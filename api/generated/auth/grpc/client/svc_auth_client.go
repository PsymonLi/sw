// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	auth "github.com/pensando/sw/api/generated/auth"
	"github.com/pensando/sw/api/interfaces"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewAuthV1 sets up a new client for AuthV1
func NewAuthV1(conn *grpc.ClientConn, logger log.Logger) auth.ServiceAuthV1Client {

	var lAutoAddAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoAddAuthenticationPolicy",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoAddAuthenticationPolicy")(lAutoAddAuthenticationPolicyEndpoint)
	}
	var lAutoAddRoleEndpoint endpoint.Endpoint
	{
		lAutoAddRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoAddRole",
			auth.EncodeGrpcReqRole,
			auth.DecodeGrpcRespRole,
			&auth.Role{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoAddRole")(lAutoAddRoleEndpoint)
	}
	var lAutoAddRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoAddRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoAddRoleBinding",
			auth.EncodeGrpcReqRoleBinding,
			auth.DecodeGrpcRespRoleBinding,
			&auth.RoleBinding{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoAddRoleBinding")(lAutoAddRoleBindingEndpoint)
	}
	var lAutoAddUserEndpoint endpoint.Endpoint
	{
		lAutoAddUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoAddUser",
			auth.EncodeGrpcReqUser,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddUserEndpoint = trace.ClientEndPoint("AuthV1:AutoAddUser")(lAutoAddUserEndpoint)
	}
	var lAutoAddUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoAddUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoAddUserPreference",
			auth.EncodeGrpcReqUserPreference,
			auth.DecodeGrpcRespUserPreference,
			&auth.UserPreference{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoAddUserPreference")(lAutoAddUserPreferenceEndpoint)
	}
	var lAutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoDeleteAuthenticationPolicy",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoDeleteAuthenticationPolicy")(lAutoDeleteAuthenticationPolicyEndpoint)
	}
	var lAutoDeleteRoleEndpoint endpoint.Endpoint
	{
		lAutoDeleteRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoDeleteRole",
			auth.EncodeGrpcReqRole,
			auth.DecodeGrpcRespRole,
			&auth.Role{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoDeleteRole")(lAutoDeleteRoleEndpoint)
	}
	var lAutoDeleteRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoDeleteRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoDeleteRoleBinding",
			auth.EncodeGrpcReqRoleBinding,
			auth.DecodeGrpcRespRoleBinding,
			&auth.RoleBinding{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoDeleteRoleBinding")(lAutoDeleteRoleBindingEndpoint)
	}
	var lAutoDeleteUserEndpoint endpoint.Endpoint
	{
		lAutoDeleteUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoDeleteUser",
			auth.EncodeGrpcReqUser,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteUserEndpoint = trace.ClientEndPoint("AuthV1:AutoDeleteUser")(lAutoDeleteUserEndpoint)
	}
	var lAutoDeleteUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoDeleteUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoDeleteUserPreference",
			auth.EncodeGrpcReqUserPreference,
			auth.DecodeGrpcRespUserPreference,
			&auth.UserPreference{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoDeleteUserPreference")(lAutoDeleteUserPreferenceEndpoint)
	}
	var lAutoGetAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoGetAuthenticationPolicy",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoGetAuthenticationPolicy")(lAutoGetAuthenticationPolicyEndpoint)
	}
	var lAutoGetRoleEndpoint endpoint.Endpoint
	{
		lAutoGetRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoGetRole",
			auth.EncodeGrpcReqRole,
			auth.DecodeGrpcRespRole,
			&auth.Role{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoGetRole")(lAutoGetRoleEndpoint)
	}
	var lAutoGetRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoGetRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoGetRoleBinding",
			auth.EncodeGrpcReqRoleBinding,
			auth.DecodeGrpcRespRoleBinding,
			&auth.RoleBinding{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoGetRoleBinding")(lAutoGetRoleBindingEndpoint)
	}
	var lAutoGetUserEndpoint endpoint.Endpoint
	{
		lAutoGetUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoGetUser",
			auth.EncodeGrpcReqUser,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetUserEndpoint = trace.ClientEndPoint("AuthV1:AutoGetUser")(lAutoGetUserEndpoint)
	}
	var lAutoGetUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoGetUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoGetUserPreference",
			auth.EncodeGrpcReqUserPreference,
			auth.DecodeGrpcRespUserPreference,
			&auth.UserPreference{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoGetUserPreference")(lAutoGetUserPreferenceEndpoint)
	}
	var lAutoLabelAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoLabelAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoLabelAuthenticationPolicy",
			auth.EncodeGrpcReqLabel,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoLabelAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoLabelAuthenticationPolicy")(lAutoLabelAuthenticationPolicyEndpoint)
	}
	var lAutoLabelRoleEndpoint endpoint.Endpoint
	{
		lAutoLabelRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoLabelRole",
			auth.EncodeGrpcReqLabel,
			auth.DecodeGrpcRespRole,
			&auth.Role{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoLabelRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoLabelRole")(lAutoLabelRoleEndpoint)
	}
	var lAutoLabelRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoLabelRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoLabelRoleBinding",
			auth.EncodeGrpcReqLabel,
			auth.DecodeGrpcRespRoleBinding,
			&auth.RoleBinding{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoLabelRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoLabelRoleBinding")(lAutoLabelRoleBindingEndpoint)
	}
	var lAutoLabelUserEndpoint endpoint.Endpoint
	{
		lAutoLabelUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoLabelUser",
			auth.EncodeGrpcReqLabel,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoLabelUserEndpoint = trace.ClientEndPoint("AuthV1:AutoLabelUser")(lAutoLabelUserEndpoint)
	}
	var lAutoLabelUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoLabelUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoLabelUserPreference",
			auth.EncodeGrpcReqLabel,
			auth.DecodeGrpcRespUserPreference,
			&auth.UserPreference{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoLabelUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoLabelUserPreference")(lAutoLabelUserPreferenceEndpoint)
	}
	var lAutoListAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoListAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoListAuthenticationPolicy",
			auth.EncodeGrpcReqListWatchOptions,
			auth.DecodeGrpcRespAuthenticationPolicyList,
			&auth.AuthenticationPolicyList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoListAuthenticationPolicy")(lAutoListAuthenticationPolicyEndpoint)
	}
	var lAutoListRoleEndpoint endpoint.Endpoint
	{
		lAutoListRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoListRole",
			auth.EncodeGrpcReqListWatchOptions,
			auth.DecodeGrpcRespRoleList,
			&auth.RoleList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoListRole")(lAutoListRoleEndpoint)
	}
	var lAutoListRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoListRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoListRoleBinding",
			auth.EncodeGrpcReqListWatchOptions,
			auth.DecodeGrpcRespRoleBindingList,
			&auth.RoleBindingList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoListRoleBinding")(lAutoListRoleBindingEndpoint)
	}
	var lAutoListUserEndpoint endpoint.Endpoint
	{
		lAutoListUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoListUser",
			auth.EncodeGrpcReqListWatchOptions,
			auth.DecodeGrpcRespUserList,
			&auth.UserList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListUserEndpoint = trace.ClientEndPoint("AuthV1:AutoListUser")(lAutoListUserEndpoint)
	}
	var lAutoListUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoListUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoListUserPreference",
			auth.EncodeGrpcReqListWatchOptions,
			auth.DecodeGrpcRespUserPreferenceList,
			&auth.UserPreferenceList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoListUserPreference")(lAutoListUserPreferenceEndpoint)
	}
	var lAutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateAuthenticationPolicyEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoUpdateAuthenticationPolicy",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateAuthenticationPolicyEndpoint = trace.ClientEndPoint("AuthV1:AutoUpdateAuthenticationPolicy")(lAutoUpdateAuthenticationPolicyEndpoint)
	}
	var lAutoUpdateRoleEndpoint endpoint.Endpoint
	{
		lAutoUpdateRoleEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoUpdateRole",
			auth.EncodeGrpcReqRole,
			auth.DecodeGrpcRespRole,
			&auth.Role{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateRoleEndpoint = trace.ClientEndPoint("AuthV1:AutoUpdateRole")(lAutoUpdateRoleEndpoint)
	}
	var lAutoUpdateRoleBindingEndpoint endpoint.Endpoint
	{
		lAutoUpdateRoleBindingEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoUpdateRoleBinding",
			auth.EncodeGrpcReqRoleBinding,
			auth.DecodeGrpcRespRoleBinding,
			&auth.RoleBinding{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateRoleBindingEndpoint = trace.ClientEndPoint("AuthV1:AutoUpdateRoleBinding")(lAutoUpdateRoleBindingEndpoint)
	}
	var lAutoUpdateUserEndpoint endpoint.Endpoint
	{
		lAutoUpdateUserEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoUpdateUser",
			auth.EncodeGrpcReqUser,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateUserEndpoint = trace.ClientEndPoint("AuthV1:AutoUpdateUser")(lAutoUpdateUserEndpoint)
	}
	var lAutoUpdateUserPreferenceEndpoint endpoint.Endpoint
	{
		lAutoUpdateUserPreferenceEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"AutoUpdateUserPreference",
			auth.EncodeGrpcReqUserPreference,
			auth.DecodeGrpcRespUserPreference,
			&auth.UserPreference{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateUserPreferenceEndpoint = trace.ClientEndPoint("AuthV1:AutoUpdateUserPreference")(lAutoUpdateUserPreferenceEndpoint)
	}
	var lIsAuthorizedEndpoint endpoint.Endpoint
	{
		lIsAuthorizedEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"IsAuthorized",
			auth.EncodeGrpcReqSubjectAccessReviewRequest,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lIsAuthorizedEndpoint = trace.ClientEndPoint("AuthV1:IsAuthorized")(lIsAuthorizedEndpoint)
	}
	var lLdapBindCheckEndpoint endpoint.Endpoint
	{
		lLdapBindCheckEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"LdapBindCheck",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lLdapBindCheckEndpoint = trace.ClientEndPoint("AuthV1:LdapBindCheck")(lLdapBindCheckEndpoint)
	}
	var lLdapConnectionCheckEndpoint endpoint.Endpoint
	{
		lLdapConnectionCheckEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"LdapConnectionCheck",
			auth.EncodeGrpcReqAuthenticationPolicy,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lLdapConnectionCheckEndpoint = trace.ClientEndPoint("AuthV1:LdapConnectionCheck")(lLdapConnectionCheckEndpoint)
	}
	var lPasswordChangeEndpoint endpoint.Endpoint
	{
		lPasswordChangeEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"PasswordChange",
			auth.EncodeGrpcReqPasswordChangeRequest,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lPasswordChangeEndpoint = trace.ClientEndPoint("AuthV1:PasswordChange")(lPasswordChangeEndpoint)
	}
	var lPasswordResetEndpoint endpoint.Endpoint
	{
		lPasswordResetEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"PasswordReset",
			auth.EncodeGrpcReqPasswordResetRequest,
			auth.DecodeGrpcRespUser,
			&auth.User{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lPasswordResetEndpoint = trace.ClientEndPoint("AuthV1:PasswordReset")(lPasswordResetEndpoint)
	}
	var lTokenSecretGenerateEndpoint endpoint.Endpoint
	{
		lTokenSecretGenerateEndpoint = grpctransport.NewClient(
			conn,
			"auth.AuthV1",
			"TokenSecretGenerate",
			auth.EncodeGrpcReqTokenSecretRequest,
			auth.DecodeGrpcRespAuthenticationPolicy,
			&auth.AuthenticationPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lTokenSecretGenerateEndpoint = trace.ClientEndPoint("AuthV1:TokenSecretGenerate")(lTokenSecretGenerateEndpoint)
	}
	return auth.EndpointsAuthV1Client{
		Client: auth.NewAuthV1Client(conn),

		AutoAddAuthenticationPolicyEndpoint:    lAutoAddAuthenticationPolicyEndpoint,
		AutoAddRoleEndpoint:                    lAutoAddRoleEndpoint,
		AutoAddRoleBindingEndpoint:             lAutoAddRoleBindingEndpoint,
		AutoAddUserEndpoint:                    lAutoAddUserEndpoint,
		AutoAddUserPreferenceEndpoint:          lAutoAddUserPreferenceEndpoint,
		AutoDeleteAuthenticationPolicyEndpoint: lAutoDeleteAuthenticationPolicyEndpoint,
		AutoDeleteRoleEndpoint:                 lAutoDeleteRoleEndpoint,
		AutoDeleteRoleBindingEndpoint:          lAutoDeleteRoleBindingEndpoint,
		AutoDeleteUserEndpoint:                 lAutoDeleteUserEndpoint,
		AutoDeleteUserPreferenceEndpoint:       lAutoDeleteUserPreferenceEndpoint,
		AutoGetAuthenticationPolicyEndpoint:    lAutoGetAuthenticationPolicyEndpoint,
		AutoGetRoleEndpoint:                    lAutoGetRoleEndpoint,
		AutoGetRoleBindingEndpoint:             lAutoGetRoleBindingEndpoint,
		AutoGetUserEndpoint:                    lAutoGetUserEndpoint,
		AutoGetUserPreferenceEndpoint:          lAutoGetUserPreferenceEndpoint,
		AutoLabelAuthenticationPolicyEndpoint:  lAutoLabelAuthenticationPolicyEndpoint,
		AutoLabelRoleEndpoint:                  lAutoLabelRoleEndpoint,
		AutoLabelRoleBindingEndpoint:           lAutoLabelRoleBindingEndpoint,
		AutoLabelUserEndpoint:                  lAutoLabelUserEndpoint,
		AutoLabelUserPreferenceEndpoint:        lAutoLabelUserPreferenceEndpoint,
		AutoListAuthenticationPolicyEndpoint:   lAutoListAuthenticationPolicyEndpoint,
		AutoListRoleEndpoint:                   lAutoListRoleEndpoint,
		AutoListRoleBindingEndpoint:            lAutoListRoleBindingEndpoint,
		AutoListUserEndpoint:                   lAutoListUserEndpoint,
		AutoListUserPreferenceEndpoint:         lAutoListUserPreferenceEndpoint,
		AutoUpdateAuthenticationPolicyEndpoint: lAutoUpdateAuthenticationPolicyEndpoint,
		AutoUpdateRoleEndpoint:                 lAutoUpdateRoleEndpoint,
		AutoUpdateRoleBindingEndpoint:          lAutoUpdateRoleBindingEndpoint,
		AutoUpdateUserEndpoint:                 lAutoUpdateUserEndpoint,
		AutoUpdateUserPreferenceEndpoint:       lAutoUpdateUserPreferenceEndpoint,
		IsAuthorizedEndpoint:                   lIsAuthorizedEndpoint,
		LdapBindCheckEndpoint:                  lLdapBindCheckEndpoint,
		LdapConnectionCheckEndpoint:            lLdapConnectionCheckEndpoint,
		PasswordChangeEndpoint:                 lPasswordChangeEndpoint,
		PasswordResetEndpoint:                  lPasswordResetEndpoint,
		TokenSecretGenerateEndpoint:            lTokenSecretGenerateEndpoint,
	}
}

// NewAuthV1Backend creates an instrumented client with middleware
func NewAuthV1Backend(conn *grpc.ClientConn, logger log.Logger) auth.ServiceAuthV1Client {
	cl := NewAuthV1(conn, logger)
	cl = auth.LoggingAuthV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjAuthV1User struct {
	logger log.Logger
	client auth.ServiceAuthV1Client
}

func (a *grpcObjAuthV1User) Create(ctx context.Context, in *auth.User) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddUser(nctx, in)
}

func (a *grpcObjAuthV1User) Update(ctx context.Context, in *auth.User) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateUser(nctx, in)
}

func (a *grpcObjAuthV1User) UpdateStatus(ctx context.Context, in *auth.User) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	nctx = addStatusUpd(nctx)
	return a.client.AutoUpdateUser(nctx, in)
}

func (a *grpcObjAuthV1User) Label(ctx context.Context, in *api.Label) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "label")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoLabelUser(nctx, in)
}

func (a *grpcObjAuthV1User) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.User{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetUser(nctx, &in)
}

func (a *grpcObjAuthV1User) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.User{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteUser(nctx, &in)
}

func (a *grpcObjAuthV1User) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListUser(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAuthV1User) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "User", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchUser(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchUserClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAuthV1User) PasswordChange(ctx context.Context, in *auth.PasswordChangeRequest) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "{PasswordChange PasswordChangeRequest User}", "oper", "PasswordChange")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.PasswordChange(nctx, in)
}

func (a *grpcObjAuthV1User) PasswordReset(ctx context.Context, in *auth.PasswordResetRequest) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "{PasswordReset PasswordResetRequest User}", "oper", "PasswordReset")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.PasswordReset(nctx, in)
}

func (a *grpcObjAuthV1User) IsAuthorized(ctx context.Context, in *auth.SubjectAccessReviewRequest) (*auth.User, error) {
	a.logger.DebugLog("msg", "received call", "object", "{IsAuthorized SubjectAccessReviewRequest User}", "oper", "IsAuthorized")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.IsAuthorized(nctx, in)
}

func (a *grpcObjAuthV1User) Allowed(oper apiintf.APIOperType) bool {
	return true
}

type restObjAuthV1User struct {
	endpoints auth.EndpointsAuthV1RestClient
	instance  string
}

func (a *restObjAuthV1User) Create(ctx context.Context, in *auth.User) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddUser(ctx, in)
}

func (a *restObjAuthV1User) Update(ctx context.Context, in *auth.User) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateUser(ctx, in)
}

func (a *restObjAuthV1User) UpdateStatus(ctx context.Context, in *auth.User) (*auth.User, error) {
	return nil, errors.New("not supported for REST")
}

func (a *restObjAuthV1User) Label(ctx context.Context, in *api.Label) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoLabelUser(ctx, in)
}

func (a *restObjAuthV1User) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.User, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.User{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetUser(ctx, &in)
}

func (a *restObjAuthV1User) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.User, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.User{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteUser(ctx, &in)
}

func (a *restObjAuthV1User) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.User, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	if options.Tenant == "" {
		options.Tenant = globals.DefaultTenant
	}
	r, err := a.endpoints.AutoListUser(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAuthV1User) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoWatchUser(ctx, options)
}

func (a *restObjAuthV1User) Allowed(oper apiintf.APIOperType) bool {
	switch oper {
	case apiintf.CreateOper:
		return true
	case apiintf.UpdateOper:
		return true
	case apiintf.GetOper:
		return true
	case apiintf.DeleteOper:
		return true
	case apiintf.ListOper:
		return true
	case apiintf.WatchOper:
		return true
	default:
		return false
	}
}

func (a *restObjAuthV1User) PasswordChange(ctx context.Context, in *auth.PasswordChangeRequest) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.PasswordChangeUser(ctx, in)
}
func (a *restObjAuthV1User) PasswordReset(ctx context.Context, in *auth.PasswordResetRequest) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.PasswordResetUser(ctx, in)
}
func (a *restObjAuthV1User) IsAuthorized(ctx context.Context, in *auth.SubjectAccessReviewRequest) (*auth.User, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.IsAuthorizedUser(ctx, in)
}

type grpcObjAuthV1AuthenticationPolicy struct {
	logger log.Logger
	client auth.ServiceAuthV1Client
}

func (a *grpcObjAuthV1AuthenticationPolicy) Create(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddAuthenticationPolicy(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) Update(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateAuthenticationPolicy(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) UpdateStatus(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	nctx = addStatusUpd(nctx)
	return a.client.AutoUpdateAuthenticationPolicy(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) Label(ctx context.Context, in *api.Label) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "label")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoLabelAuthenticationPolicy(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.AuthenticationPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetAuthenticationPolicy(nctx, &in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.AuthenticationPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteAuthenticationPolicy(nctx, &in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListAuthenticationPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAuthV1AuthenticationPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthenticationPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchAuthenticationPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchAuthenticationPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAuthV1AuthenticationPolicy) LdapConnectionCheck(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "{LdapConnectionCheck AuthenticationPolicy AuthenticationPolicy}", "oper", "LdapConnectionCheck")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.LdapConnectionCheck(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) LdapBindCheck(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "{LdapBindCheck AuthenticationPolicy AuthenticationPolicy}", "oper", "LdapBindCheck")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.LdapBindCheck(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) TokenSecretGenerate(ctx context.Context, in *auth.TokenSecretRequest) (*auth.AuthenticationPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "{TokenSecretGenerate TokenSecretRequest AuthenticationPolicy}", "oper", "TokenSecretGenerate")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.TokenSecretGenerate(nctx, in)
}

func (a *grpcObjAuthV1AuthenticationPolicy) Allowed(oper apiintf.APIOperType) bool {
	return true
}

type restObjAuthV1AuthenticationPolicy struct {
	endpoints auth.EndpointsAuthV1RestClient
	instance  string
}

func (a *restObjAuthV1AuthenticationPolicy) Create(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddAuthenticationPolicy(ctx, in)
}

func (a *restObjAuthV1AuthenticationPolicy) Update(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateAuthenticationPolicy(ctx, in)
}

func (a *restObjAuthV1AuthenticationPolicy) UpdateStatus(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	return nil, errors.New("not supported for REST")
}

func (a *restObjAuthV1AuthenticationPolicy) Label(ctx context.Context, in *api.Label) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoLabelAuthenticationPolicy(ctx, in)
}

func (a *restObjAuthV1AuthenticationPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.AuthenticationPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.AuthenticationPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetAuthenticationPolicy(ctx, &in)
}

func (a *restObjAuthV1AuthenticationPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.AuthenticationPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.AuthenticationPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteAuthenticationPolicy(ctx, &in)
}

func (a *restObjAuthV1AuthenticationPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.AuthenticationPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	r, err := a.endpoints.AutoListAuthenticationPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAuthV1AuthenticationPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoWatchAuthenticationPolicy(ctx, options)
}

func (a *restObjAuthV1AuthenticationPolicy) Allowed(oper apiintf.APIOperType) bool {
	switch oper {
	case apiintf.CreateOper:
		return true
	case apiintf.UpdateOper:
		return true
	case apiintf.GetOper:
		return true
	case apiintf.DeleteOper:
		return false
	case apiintf.ListOper:
		return false
	case apiintf.WatchOper:
		return true
	default:
		return false
	}
}

func (a *restObjAuthV1AuthenticationPolicy) LdapConnectionCheck(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.LdapConnectionCheckAuthenticationPolicy(ctx, in)
}
func (a *restObjAuthV1AuthenticationPolicy) LdapBindCheck(ctx context.Context, in *auth.AuthenticationPolicy) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.LdapBindCheckAuthenticationPolicy(ctx, in)
}
func (a *restObjAuthV1AuthenticationPolicy) TokenSecretGenerate(ctx context.Context, in *auth.TokenSecretRequest) (*auth.AuthenticationPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.TokenSecretGenerateAuthenticationPolicy(ctx, in)
}

type grpcObjAuthV1Role struct {
	logger log.Logger
	client auth.ServiceAuthV1Client
}

func (a *grpcObjAuthV1Role) Create(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddRole(nctx, in)
}

func (a *grpcObjAuthV1Role) Update(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateRole(nctx, in)
}

func (a *grpcObjAuthV1Role) UpdateStatus(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	nctx = addStatusUpd(nctx)
	return a.client.AutoUpdateRole(nctx, in)
}

func (a *grpcObjAuthV1Role) Label(ctx context.Context, in *api.Label) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "label")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoLabelRole(nctx, in)
}

func (a *grpcObjAuthV1Role) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.Role{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetRole(nctx, &in)
}

func (a *grpcObjAuthV1Role) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.Role{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteRole(nctx, &in)
}

func (a *grpcObjAuthV1Role) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.Role, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListRole(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAuthV1Role) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "Role", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchRole(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchRoleClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAuthV1Role) Allowed(oper apiintf.APIOperType) bool {
	return true
}

type restObjAuthV1Role struct {
	endpoints auth.EndpointsAuthV1RestClient
	instance  string
}

func (a *restObjAuthV1Role) Create(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddRole(ctx, in)
}

func (a *restObjAuthV1Role) Update(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateRole(ctx, in)
}

func (a *restObjAuthV1Role) UpdateStatus(ctx context.Context, in *auth.Role) (*auth.Role, error) {
	return nil, errors.New("not supported for REST")
}

func (a *restObjAuthV1Role) Label(ctx context.Context, in *api.Label) (*auth.Role, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoLabelRole(ctx, in)
}

func (a *restObjAuthV1Role) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.Role, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.Role{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetRole(ctx, &in)
}

func (a *restObjAuthV1Role) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.Role, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.Role{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteRole(ctx, &in)
}

func (a *restObjAuthV1Role) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.Role, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	if options.Tenant == "" {
		options.Tenant = globals.DefaultTenant
	}
	r, err := a.endpoints.AutoListRole(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAuthV1Role) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoWatchRole(ctx, options)
}

func (a *restObjAuthV1Role) Allowed(oper apiintf.APIOperType) bool {
	switch oper {
	case apiintf.CreateOper:
		return true
	case apiintf.UpdateOper:
		return true
	case apiintf.GetOper:
		return true
	case apiintf.DeleteOper:
		return true
	case apiintf.ListOper:
		return true
	case apiintf.WatchOper:
		return true
	default:
		return false
	}
}

type grpcObjAuthV1RoleBinding struct {
	logger log.Logger
	client auth.ServiceAuthV1Client
}

func (a *grpcObjAuthV1RoleBinding) Create(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddRoleBinding(nctx, in)
}

func (a *grpcObjAuthV1RoleBinding) Update(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateRoleBinding(nctx, in)
}

func (a *grpcObjAuthV1RoleBinding) UpdateStatus(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	nctx = addStatusUpd(nctx)
	return a.client.AutoUpdateRoleBinding(nctx, in)
}

func (a *grpcObjAuthV1RoleBinding) Label(ctx context.Context, in *api.Label) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "label")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoLabelRoleBinding(nctx, in)
}

func (a *grpcObjAuthV1RoleBinding) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.RoleBinding{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetRoleBinding(nctx, &in)
}

func (a *grpcObjAuthV1RoleBinding) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.RoleBinding{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteRoleBinding(nctx, &in)
}

func (a *grpcObjAuthV1RoleBinding) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.RoleBinding, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListRoleBinding(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAuthV1RoleBinding) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "RoleBinding", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchRoleBinding(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchRoleBindingClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAuthV1RoleBinding) Allowed(oper apiintf.APIOperType) bool {
	return true
}

type restObjAuthV1RoleBinding struct {
	endpoints auth.EndpointsAuthV1RestClient
	instance  string
}

func (a *restObjAuthV1RoleBinding) Create(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddRoleBinding(ctx, in)
}

func (a *restObjAuthV1RoleBinding) Update(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateRoleBinding(ctx, in)
}

func (a *restObjAuthV1RoleBinding) UpdateStatus(ctx context.Context, in *auth.RoleBinding) (*auth.RoleBinding, error) {
	return nil, errors.New("not supported for REST")
}

func (a *restObjAuthV1RoleBinding) Label(ctx context.Context, in *api.Label) (*auth.RoleBinding, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoLabelRoleBinding(ctx, in)
}

func (a *restObjAuthV1RoleBinding) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.RoleBinding, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.RoleBinding{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetRoleBinding(ctx, &in)
}

func (a *restObjAuthV1RoleBinding) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.RoleBinding, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.RoleBinding{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteRoleBinding(ctx, &in)
}

func (a *restObjAuthV1RoleBinding) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.RoleBinding, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	if options.Tenant == "" {
		options.Tenant = globals.DefaultTenant
	}
	r, err := a.endpoints.AutoListRoleBinding(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAuthV1RoleBinding) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoWatchRoleBinding(ctx, options)
}

func (a *restObjAuthV1RoleBinding) Allowed(oper apiintf.APIOperType) bool {
	switch oper {
	case apiintf.CreateOper:
		return true
	case apiintf.UpdateOper:
		return true
	case apiintf.GetOper:
		return true
	case apiintf.DeleteOper:
		return true
	case apiintf.ListOper:
		return true
	case apiintf.WatchOper:
		return true
	default:
		return false
	}
}

type grpcObjAuthV1UserPreference struct {
	logger log.Logger
	client auth.ServiceAuthV1Client
}

func (a *grpcObjAuthV1UserPreference) Create(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddUserPreference(nctx, in)
}

func (a *grpcObjAuthV1UserPreference) Update(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateUserPreference(nctx, in)
}

func (a *grpcObjAuthV1UserPreference) UpdateStatus(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	nctx = addStatusUpd(nctx)
	return a.client.AutoUpdateUserPreference(nctx, in)
}

func (a *grpcObjAuthV1UserPreference) Label(ctx context.Context, in *api.Label) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "label")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoLabelUserPreference(nctx, in)
}

func (a *grpcObjAuthV1UserPreference) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.UserPreference{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetUserPreference(nctx, &in)
}

func (a *grpcObjAuthV1UserPreference) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.UserPreference{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteUserPreference(nctx, &in)
}

func (a *grpcObjAuthV1UserPreference) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.UserPreference, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListUserPreference(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAuthV1UserPreference) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "UserPreference", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchUserPreference(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchUserPreferenceClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAuthV1UserPreference) Allowed(oper apiintf.APIOperType) bool {
	return true
}

type restObjAuthV1UserPreference struct {
	endpoints auth.EndpointsAuthV1RestClient
	instance  string
}

func (a *restObjAuthV1UserPreference) Create(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddUserPreference(ctx, in)
}

func (a *restObjAuthV1UserPreference) Update(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateUserPreference(ctx, in)
}

func (a *restObjAuthV1UserPreference) UpdateStatus(ctx context.Context, in *auth.UserPreference) (*auth.UserPreference, error) {
	return nil, errors.New("not supported for REST")
}

func (a *restObjAuthV1UserPreference) Label(ctx context.Context, in *api.Label) (*auth.UserPreference, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoLabelUserPreference(ctx, in)
}

func (a *restObjAuthV1UserPreference) Get(ctx context.Context, objMeta *api.ObjectMeta) (*auth.UserPreference, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.UserPreference{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetUserPreference(ctx, &in)
}

func (a *restObjAuthV1UserPreference) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*auth.UserPreference, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := auth.UserPreference{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteUserPreference(ctx, &in)
}

func (a *restObjAuthV1UserPreference) List(ctx context.Context, options *api.ListWatchOptions) ([]*auth.UserPreference, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	if options.Tenant == "" {
		options.Tenant = globals.DefaultTenant
	}
	r, err := a.endpoints.AutoListUserPreference(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAuthV1UserPreference) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoWatchUserPreference(ctx, options)
}

func (a *restObjAuthV1UserPreference) Allowed(oper apiintf.APIOperType) bool {
	switch oper {
	case apiintf.CreateOper:
		return false
	case apiintf.UpdateOper:
		return true
	case apiintf.GetOper:
		return true
	case apiintf.DeleteOper:
		return false
	case apiintf.ListOper:
		return false
	case apiintf.WatchOper:
		return true
	default:
		return false
	}
}

type crudClientAuthV1 struct {
	logger log.Logger
	client auth.ServiceAuthV1Client

	grpcUser                 auth.AuthV1UserInterface
	grpcAuthenticationPolicy auth.AuthV1AuthenticationPolicyInterface
	grpcRole                 auth.AuthV1RoleInterface
	grpcRoleBinding          auth.AuthV1RoleBindingInterface
	grpcUserPreference       auth.AuthV1UserPreferenceInterface
}

// NewGrpcCrudClientAuthV1 creates a GRPC client for the service
func NewGrpcCrudClientAuthV1(conn *grpc.ClientConn, logger log.Logger) auth.AuthV1Interface {
	client := NewAuthV1Backend(conn, logger)
	return &crudClientAuthV1{
		logger: logger,
		client: client,

		grpcUser:                 &grpcObjAuthV1User{client: client, logger: logger},
		grpcAuthenticationPolicy: &grpcObjAuthV1AuthenticationPolicy{client: client, logger: logger},
		grpcRole:                 &grpcObjAuthV1Role{client: client, logger: logger},
		grpcRoleBinding:          &grpcObjAuthV1RoleBinding{client: client, logger: logger},
		grpcUserPreference:       &grpcObjAuthV1UserPreference{client: client, logger: logger},
	}
}

func (a *crudClientAuthV1) User() auth.AuthV1UserInterface {
	return a.grpcUser
}

func (a *crudClientAuthV1) AuthenticationPolicy() auth.AuthV1AuthenticationPolicyInterface {
	return a.grpcAuthenticationPolicy
}

func (a *crudClientAuthV1) Role() auth.AuthV1RoleInterface {
	return a.grpcRole
}

func (a *crudClientAuthV1) RoleBinding() auth.AuthV1RoleBindingInterface {
	return a.grpcRoleBinding
}

func (a *crudClientAuthV1) UserPreference() auth.AuthV1UserPreferenceInterface {
	return a.grpcUserPreference
}

func (a *crudClientAuthV1) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "AuthV1", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchSvcAuthV1(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(auth.AuthV1_AutoWatchSvcAuthV1Client)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "err", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{Type: kvstore.WatchEventType(e.Type)}
				robj, err := listerwatcher.GetObject(e)
				if err != nil {
					a.logger.ErrorLog("msg", "error on receive unmarshall", "err", err)
					close(lw.OutCh)
					return
				}
				ev.Object = robj
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

type crudRestClientAuthV1 struct {
	restUser                 auth.AuthV1UserInterface
	restAuthenticationPolicy auth.AuthV1AuthenticationPolicyInterface
	restRole                 auth.AuthV1RoleInterface
	restRoleBinding          auth.AuthV1RoleBindingInterface
	restUserPreference       auth.AuthV1UserPreferenceInterface
}

// NewRestCrudClientAuthV1 creates a REST client for the service.
func NewRestCrudClientAuthV1(url string, httpClient *http.Client) auth.AuthV1Interface {
	endpoints, err := auth.MakeAuthV1RestClientEndpoints(url, httpClient)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientAuthV1{

		restUser:                 &restObjAuthV1User{endpoints: endpoints, instance: url},
		restAuthenticationPolicy: &restObjAuthV1AuthenticationPolicy{endpoints: endpoints, instance: url},
		restRole:                 &restObjAuthV1Role{endpoints: endpoints, instance: url},
		restRoleBinding:          &restObjAuthV1RoleBinding{endpoints: endpoints, instance: url},
		restUserPreference:       &restObjAuthV1UserPreference{endpoints: endpoints, instance: url},
	}
}

// NewStagedRestCrudClientAuthV1 creates a REST client for the service.
func NewStagedRestCrudClientAuthV1(url string, id string, httpClient *http.Client) auth.AuthV1Interface {
	endpoints, err := auth.MakeAuthV1StagedRestClientEndpoints(url, id, httpClient)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientAuthV1{

		restUser:                 &restObjAuthV1User{endpoints: endpoints, instance: url},
		restAuthenticationPolicy: &restObjAuthV1AuthenticationPolicy{endpoints: endpoints, instance: url},
		restRole:                 &restObjAuthV1Role{endpoints: endpoints, instance: url},
		restRoleBinding:          &restObjAuthV1RoleBinding{endpoints: endpoints, instance: url},
		restUserPreference:       &restObjAuthV1UserPreference{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientAuthV1) User() auth.AuthV1UserInterface {
	return a.restUser
}

func (a *crudRestClientAuthV1) AuthenticationPolicy() auth.AuthV1AuthenticationPolicyInterface {
	return a.restAuthenticationPolicy
}

func (a *crudRestClientAuthV1) Role() auth.AuthV1RoleInterface {
	return a.restRole
}

func (a *crudRestClientAuthV1) RoleBinding() auth.AuthV1RoleBindingInterface {
	return a.restRoleBinding
}

func (a *crudRestClientAuthV1) UserPreference() auth.AuthV1UserPreferenceInterface {
	return a.restUserPreference
}

func (a *crudRestClientAuthV1) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
