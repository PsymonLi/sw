// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package auth is a auto generated package.
Input file: protos/auth.proto
*/
package auth

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareAuthV1Client add middleware to the client
type MiddlewareAuthV1Client func(ServiceAuthV1Client) ServiceAuthV1Client

// EndpointsAuthV1Client is the endpoints for the client
type EndpointsAuthV1Client struct {
	Client AuthV1Client

	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint
}

// EndpointsAuthV1RestClient is the REST client
type EndpointsAuthV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint
	AutoWatchAuthenticationPolicyEndpoint  endpoint.Endpoint
	AutoWatchUserEndpoint                  endpoint.Endpoint
}

// MiddlewareAuthV1Server adds middle ware to the server
type MiddlewareAuthV1Server func(ServiceAuthV1Server) ServiceAuthV1Server

// EndpointsAuthV1Server is the server endpoints
type EndpointsAuthV1Server struct {
	AutoAddAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoAddUserEndpoint                    endpoint.Endpoint
	AutoDeleteAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoDeleteUserEndpoint                 endpoint.Endpoint
	AutoGetAuthenticationPolicyEndpoint    endpoint.Endpoint
	AutoGetUserEndpoint                    endpoint.Endpoint
	AutoListAuthenticationPolicyEndpoint   endpoint.Endpoint
	AutoListUserEndpoint                   endpoint.Endpoint
	AutoUpdateAuthenticationPolicyEndpoint endpoint.Endpoint
	AutoUpdateUserEndpoint                 endpoint.Endpoint

	watchHandlerUser                 func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAuthenticationPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAuthenticationPolicy is endpoint for AutoAddAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoAddAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoAddAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoAddUser is endpoint for AutoAddUser
func (e EndpointsAuthV1Client) AutoAddUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoAddUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoAddUser struct {
	V   User
	Err error
}

// AutoDeleteAuthenticationPolicy is endpoint for AutoDeleteAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoDeleteAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoDeleteAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoDeleteUser is endpoint for AutoDeleteUser
func (e EndpointsAuthV1Client) AutoDeleteUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoDeleteUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoDeleteUser struct {
	V   User
	Err error
}

// AutoGetAuthenticationPolicy is endpoint for AutoGetAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoGetAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoGetAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoGetUser is endpoint for AutoGetUser
func (e EndpointsAuthV1Client) AutoGetUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoGetUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoGetUser struct {
	V   User
	Err error
}

// AutoListAuthenticationPolicy is endpoint for AutoListAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	resp, err := e.AutoListAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicyList{}, err
	}
	return resp.(*AuthenticationPolicyList), nil
}

type respAuthV1AutoListAuthenticationPolicy struct {
	V   AuthenticationPolicyList
	Err error
}

// AutoListUser is endpoint for AutoListUser
func (e EndpointsAuthV1Client) AutoListUser(ctx context.Context, in *api.ListWatchOptions) (*UserList, error) {
	resp, err := e.AutoListUserEndpoint(ctx, in)
	if err != nil {
		return &UserList{}, err
	}
	return resp.(*UserList), nil
}

type respAuthV1AutoListUser struct {
	V   UserList
	Err error
}

// AutoUpdateAuthenticationPolicy is endpoint for AutoUpdateAuthenticationPolicy
func (e EndpointsAuthV1Client) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	resp, err := e.AutoUpdateAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return &AuthenticationPolicy{}, err
	}
	return resp.(*AuthenticationPolicy), nil
}

type respAuthV1AutoUpdateAuthenticationPolicy struct {
	V   AuthenticationPolicy
	Err error
}

// AutoUpdateUser is endpoint for AutoUpdateUser
func (e EndpointsAuthV1Client) AutoUpdateUser(ctx context.Context, in *User) (*User, error) {
	resp, err := e.AutoUpdateUserEndpoint(ctx, in)
	if err != nil {
		return &User{}, err
	}
	return resp.(*User), nil
}

type respAuthV1AutoUpdateUser struct {
	V   User
	Err error
}

// AutoWatchUser performs Watch for User
func (e EndpointsAuthV1Client) AutoWatchUser(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchUserClient, error) {
	return e.Client.AutoWatchUser(ctx, in)
}

// AutoWatchAuthenticationPolicy performs Watch for AuthenticationPolicy
func (e EndpointsAuthV1Client) AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (AuthV1_AutoWatchAuthenticationPolicyClient, error) {
	return e.Client.AutoWatchAuthenticationPolicy(ctx, in)
}

// AutoAddAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoAddAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoAddAuthenticationPolicyEndpoint creates  AutoAddAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoAddAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoAddAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoAddAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddAuthenticationPolicy")(f)
}

// AutoAddUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoAddUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoAddUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoAddUserEndpoint creates  AutoAddUser endpoints for the service
func MakeAuthV1AutoAddUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoAddUser(ctx, *req)
		return respAuthV1AutoAddUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoAddUser")(f)
}

// AutoDeleteAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoDeleteAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint creates  AutoDeleteAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoDeleteAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoDeleteAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteAuthenticationPolicy")(f)
}

// AutoDeleteUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoDeleteUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoDeleteUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoDeleteUserEndpoint creates  AutoDeleteUser endpoints for the service
func MakeAuthV1AutoDeleteUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoDeleteUser(ctx, *req)
		return respAuthV1AutoDeleteUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoDeleteUser")(f)
}

// AutoGetAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoGetAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoGetAuthenticationPolicyEndpoint creates  AutoGetAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoGetAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoGetAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoGetAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetAuthenticationPolicy")(f)
}

// AutoGetUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoGetUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoGetUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoGetUserEndpoint creates  AutoGetUser endpoints for the service
func MakeAuthV1AutoGetUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoGetUser(ctx, *req)
		return respAuthV1AutoGetUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoGetUser")(f)
}

// AutoListAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListAuthenticationPolicy(ctx context.Context, in api.ListWatchOptions) (AuthenticationPolicyList, error) {
	resp, err := e.AutoListAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicyList{}, err
	}
	return *resp.(*AuthenticationPolicyList), nil
}

// MakeAuthV1AutoListAuthenticationPolicyEndpoint creates  AutoListAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoListAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoListAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListAuthenticationPolicy")(f)
}

// AutoListUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoListUser(ctx context.Context, in api.ListWatchOptions) (UserList, error) {
	resp, err := e.AutoListUserEndpoint(ctx, in)
	if err != nil {
		return UserList{}, err
	}
	return *resp.(*UserList), nil
}

// MakeAuthV1AutoListUserEndpoint creates  AutoListUser endpoints for the service
func MakeAuthV1AutoListUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListUser(ctx, *req)
		return respAuthV1AutoListUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoListUser")(f)
}

// AutoUpdateAuthenticationPolicy implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (AuthenticationPolicy, error) {
	resp, err := e.AutoUpdateAuthenticationPolicyEndpoint(ctx, in)
	if err != nil {
		return AuthenticationPolicy{}, err
	}
	return *resp.(*AuthenticationPolicy), nil
}

// MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint creates  AutoUpdateAuthenticationPolicy endpoints for the service
func MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AuthenticationPolicy)
		v, err := s.AutoUpdateAuthenticationPolicy(ctx, *req)
		return respAuthV1AutoUpdateAuthenticationPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateAuthenticationPolicy")(f)
}

// AutoUpdateUser implementation on server Endpoint
func (e EndpointsAuthV1Server) AutoUpdateUser(ctx context.Context, in User) (User, error) {
	resp, err := e.AutoUpdateUserEndpoint(ctx, in)
	if err != nil {
		return User{}, err
	}
	return *resp.(*User), nil
}

// MakeAuthV1AutoUpdateUserEndpoint creates  AutoUpdateUser endpoints for the service
func MakeAuthV1AutoUpdateUserEndpoint(s ServiceAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*User)
		v, err := s.AutoUpdateUser(ctx, *req)
		return respAuthV1AutoUpdateUser{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AuthV1:AutoUpdateUser")(f)
}

// AutoWatchUser is the watch handler for User on the server side.
func (e EndpointsAuthV1Server) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) error {
	return e.watchHandlerUser(in, stream)
}

// MakeAutoWatchUserEndpoint creates the Watch endpoint
func MakeAutoWatchUserEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchUserServer)
		return s.AutoWatchUser(options, wstream)
	}
}

// AutoWatchAuthenticationPolicy is the watch handler for AuthenticationPolicy on the server side.
func (e EndpointsAuthV1Server) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) error {
	return e.watchHandlerAuthenticationPolicy(in, stream)
}

// MakeAutoWatchAuthenticationPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchAuthenticationPolicyEndpoint(s ServiceAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AuthV1_AutoWatchAuthenticationPolicyServer)
		return s.AutoWatchAuthenticationPolicy(options, wstream)
	}
}

// MakeAuthV1ServerEndpoints creates server endpoints
func MakeAuthV1ServerEndpoints(s ServiceAuthV1Server, logger log.Logger) EndpointsAuthV1Server {
	return EndpointsAuthV1Server{

		AutoAddAuthenticationPolicyEndpoint:    MakeAuthV1AutoAddAuthenticationPolicyEndpoint(s, logger),
		AutoAddUserEndpoint:                    MakeAuthV1AutoAddUserEndpoint(s, logger),
		AutoDeleteAuthenticationPolicyEndpoint: MakeAuthV1AutoDeleteAuthenticationPolicyEndpoint(s, logger),
		AutoDeleteUserEndpoint:                 MakeAuthV1AutoDeleteUserEndpoint(s, logger),
		AutoGetAuthenticationPolicyEndpoint:    MakeAuthV1AutoGetAuthenticationPolicyEndpoint(s, logger),
		AutoGetUserEndpoint:                    MakeAuthV1AutoGetUserEndpoint(s, logger),
		AutoListAuthenticationPolicyEndpoint:   MakeAuthV1AutoListAuthenticationPolicyEndpoint(s, logger),
		AutoListUserEndpoint:                   MakeAuthV1AutoListUserEndpoint(s, logger),
		AutoUpdateAuthenticationPolicyEndpoint: MakeAuthV1AutoUpdateAuthenticationPolicyEndpoint(s, logger),
		AutoUpdateUserEndpoint:                 MakeAuthV1AutoUpdateUserEndpoint(s, logger),

		watchHandlerUser:                 MakeAutoWatchUserEndpoint(s, logger),
		watchHandlerAuthenticationPolicy: MakeAutoWatchAuthenticationPolicyEndpoint(s, logger),
	}
}

// LoggingAuthV1MiddlewareClient adds middleware for the client
func LoggingAuthV1MiddlewareClient(logger log.Logger) MiddlewareAuthV1Client {
	return func(next ServiceAuthV1Client) ServiceAuthV1Client {
		return loggingAuthV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAuthV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceAuthV1Client
}

// LoggingAuthV1MiddlewareServer adds middleware for the client
func LoggingAuthV1MiddlewareServer(logger log.Logger) MiddlewareAuthV1Server {
	return func(next ServiceAuthV1Server) ServiceAuthV1Server {
		return loggingAuthV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAuthV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceAuthV1Server
}

func (m loggingAuthV1MiddlewareClient) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoAddUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoDeleteUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoGetUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AuthenticationPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoListUser(ctx context.Context, in *api.ListWatchOptions) (resp *UserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (resp *AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoUpdateUser(ctx context.Context, in *User) (resp *User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateUser(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareClient) AutoWatchUser(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchUserClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareClient) AutoWatchAuthenticationPolicy(ctx context.Context, in *api.ListWatchOptions) (resp AuthV1_AutoWatchAuthenticationPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoWatchAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAuthenticationPolicy(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareServer) AutoAddAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoAddUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoAddUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoDeleteUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoDeleteUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoGetUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoGetUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListAuthenticationPolicy(ctx context.Context, in api.ListWatchOptions) (resp AuthenticationPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoListUser(ctx context.Context, in api.ListWatchOptions) (resp UserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoListUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListUser(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateAuthenticationPolicy(ctx context.Context, in AuthenticationPolicy) (resp AuthenticationPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAuthenticationPolicy(ctx, in)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoUpdateUser(ctx context.Context, in User) (resp User, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AuthV1", "method", "AutoUpdateUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateUser(ctx, in)
	return
}

func (m loggingAuthV1MiddlewareServer) AutoWatchUser(in *api.ListWatchOptions, stream AuthV1_AutoWatchUserServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchUser(in, stream)
	return
}
func (m loggingAuthV1MiddlewareServer) AutoWatchAuthenticationPolicy(in *api.ListWatchOptions, stream AuthV1_AutoWatchAuthenticationPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AuthV1", "method", "AutoWatchAuthenticationPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAuthenticationPolicy(in, stream)
	return
}
func (r *EndpointsAuthV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIAuthV1AutoAddAuthenticationPolicyCreateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/v1/auth", "/authn-policy")
}

//
func makeURIAuthV1AutoAddUserCreateOper(in *User) string {
	return fmt.Sprint("/v1/auth", "/", in.Tenant, "/users")
}

//
func makeURIAuthV1AutoDeleteAuthenticationPolicyDeleteOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/v1/auth", "/authn-policy/", in.Name)
}

//
func makeURIAuthV1AutoDeleteUserDeleteOper(in *User) string {
	return fmt.Sprint("/v1/auth", "/", in.Tenant, "/users/", in.Name)
}

//
func makeURIAuthV1AutoGetAuthenticationPolicyGetOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/v1/auth", "/authn-policy/", in.Name)
}

//
func makeURIAuthV1AutoGetUserGetOper(in *User) string {
	return fmt.Sprint("/v1/auth", "/", in.Tenant, "/users/", in.Name)
}

//
func makeURIAuthV1AutoListUserListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/auth", "/", in.Tenant, "/users")
}

//
func makeURIAuthV1AutoUpdateAuthenticationPolicyUpdateOper(in *AuthenticationPolicy) string {
	return fmt.Sprint("/v1/auth", "/authn-policy")
}

//
func makeURIAuthV1AutoUpdateUserUpdateOper(in *User) string {
	return fmt.Sprint("/v1/auth", "/", in.Tenant, "/users/", in.Name)
}

// AutoAddUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoAddUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoAddUserCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddUser(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), nil
}

// AutoUpdateUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoUpdateUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoUpdateUserUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoGetUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoGetUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoGetUserGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoDeleteUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoDeleteUser(ctx context.Context, in *User) (*User, error) {
	path := makeURIAuthV1AutoDeleteUserDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoDeleteUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*User), err
}

// AutoListUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoListUser(ctx context.Context, options *api.ListWatchOptions) (*UserList, error) {
	path := makeURIAuthV1AutoListUserListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoListUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*UserList), err
}

// AutoWatchUser CRUD method for User
func (r *EndpointsAuthV1RestClient) AutoWatchUser(ctx context.Context, in *User) (*User, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoAddAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoAddAuthenticationPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoAddAuthenticationPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), nil
}

// AutoUpdateAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoUpdateAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoUpdateAuthenticationPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoUpdateAuthenticationPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoGetAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoGetAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoGetAuthenticationPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoGetAuthenticationPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoDeleteAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoDeleteAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	path := makeURIAuthV1AutoDeleteAuthenticationPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAuthV1AutoDeleteAuthenticationPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AuthenticationPolicy), err
}

// AutoListAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoListAuthenticationPolicy(ctx context.Context, options *api.ListWatchOptions) (*AuthenticationPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchAuthenticationPolicy CRUD method for AuthenticationPolicy
func (r *EndpointsAuthV1RestClient) AutoWatchAuthenticationPolicy(ctx context.Context, in *AuthenticationPolicy) (*AuthenticationPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeAuthV1RestClientEndpoints make REST client endpoints
func MakeAuthV1RestClientEndpoints(instance string) (EndpointsAuthV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAuthV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
