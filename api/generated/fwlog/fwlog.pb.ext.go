// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package fwlog is a auto generated package.
Input file: fwlog.proto
*/
package fwlog

import (
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// FwLogActions_normal is a map of normalized values for the enum
var FwLogActions_normal = map[string]string{
	"allow":         "allow",
	"deny":          "deny",
	"implicit_deny": "implicit_deny",
	"reject":        "reject",
}

var FwLogActions_vname = map[int32]string{
	0: "allow",
	1: "deny",
	2: "reject",
	3: "implicit_deny",
}

var FwLogActions_vvalue = map[string]int32{
	"allow":         0,
	"deny":          1,
	"reject":        2,
	"implicit_deny": 3,
}

func (x FwLogActions) String() string {
	return FwLogActions_vname[int32(x)]
}

// FwLogDirections_normal is a map of normalized values for the enum
var FwLogDirections_normal = map[string]string{
	"from-host":   "from-host",
	"from-uplink": "from-uplink",
}

var FwLogDirections_vname = map[int32]string{
	0: "from-host",
	1: "from-uplink",
}

var FwLogDirections_vvalue = map[string]int32{
	"from-host":   0,
	"from-uplink": 1,
}

func (x FwLogDirections) String() string {
	return FwLogDirections_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapFwlog = make(map[string]map[string][]func(string, interface{}) error)

// Clone clones the object into into or creates one of into is nil
func (m *FwLog) Clone(into interface{}) (interface{}, error) {
	var out *FwLog
	var ok bool
	if into == nil {
		out = &FwLog{}
	} else {
		out, ok = into.(*FwLog)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*FwLog))
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwLog) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Action = "allow"
		m.Direction = "from-host"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwLogList) Clone(into interface{}) (interface{}, error) {
	var out *FwLogList
	var ok bool
	if into == nil {
		out = &FwLogList{}
	} else {
		out, ok = into.(*FwLogList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*FwLogList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwLogList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Validators and Requirements

func (m *FwLog) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *FwLog) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if vs, ok := validatorMapFwlog["FwLog"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapFwlog["FwLog"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *FwLog) Normalize() {

	m.Action = FwLogActions_normal[strings.ToLower(m.Action)]

	m.Direction = FwLogDirections_normal[strings.ToLower(m.Direction)]

	m.ObjectMeta.Normalize()

}

func (m *FwLogList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *FwLogList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *FwLogList) Normalize() {

	for k, v := range m.Items {
		if v != nil {
			v.Normalize()
			m.Items[k] = v
		}
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

	validatorMapFwlog = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapFwlog["FwLog"] = make(map[string][]func(string, interface{}) error)
	validatorMapFwlog["FwLog"]["all"] = append(validatorMapFwlog["FwLog"]["all"], func(path string, i interface{}) error {
		m := i.(*FwLog)

		if _, ok := FwLogActions_vvalue[m.Action]; !ok {
			vals := []string{}
			for k1, _ := range FwLogActions_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Action", vals)
		}
		return nil
	})

	validatorMapFwlog["FwLog"]["all"] = append(validatorMapFwlog["FwLog"]["all"], func(path string, i interface{}) error {
		m := i.(*FwLog)

		if _, ok := FwLogDirections_vvalue[m.Direction]; !ok {
			vals := []string{}
			for k1, _ := range FwLogDirections_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Direction", vals)
		}
		return nil
	})

}
