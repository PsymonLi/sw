// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	fwlog "github.com/pensando/sw/api/generated/fwlog"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewFwLogV1 sets up a new client for FwLogV1
func NewFwLogV1(conn *grpc.ClientConn, logger log.Logger) fwlog.ServiceFwLogV1Client {

	var lDownloadFwLogFileContentEndpoint endpoint.Endpoint
	{
		lDownloadFwLogFileContentEndpoint = grpctransport.NewClient(
			conn,
			"fwlog.FwLogV1",
			"DownloadFwLogFileContent",
			fwlog.EncodeGrpcReqListWatchOptions,
			fwlog.DecodeGrpcRespFwLogList,
			&fwlog.FwLogList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lDownloadFwLogFileContentEndpoint = trace.ClientEndPoint("FwLogV1:DownloadFwLogFileContent")(lDownloadFwLogFileContentEndpoint)
	}
	var lGetLogsEndpoint endpoint.Endpoint
	{
		lGetLogsEndpoint = grpctransport.NewClient(
			conn,
			"fwlog.FwLogV1",
			"GetLogs",
			fwlog.EncodeGrpcReqFwLogQuery,
			fwlog.DecodeGrpcRespFwLogList,
			&fwlog.FwLogList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGetLogsEndpoint = trace.ClientEndPoint("FwLogV1:GetLogs")(lGetLogsEndpoint)
	}
	return fwlog.EndpointsFwLogV1Client{
		Client: fwlog.NewFwLogV1Client(conn),

		DownloadFwLogFileContentEndpoint: lDownloadFwLogFileContentEndpoint,
		GetLogsEndpoint:                  lGetLogsEndpoint,
	}
}

// NewFwLogV1Backend creates an instrumented client with middleware
func NewFwLogV1Backend(conn *grpc.ClientConn, logger log.Logger) fwlog.ServiceFwLogV1Client {
	cl := NewFwLogV1(conn, logger)
	cl = fwlog.LoggingFwLogV1MiddlewareClient(logger)(cl)
	return cl
}

type crudClientFwLogV1 struct {
	logger log.Logger
	client fwlog.ServiceFwLogV1Client
}

// NewGrpcCrudClientFwLogV1 creates a GRPC client for the service
func NewGrpcCrudClientFwLogV1(conn *grpc.ClientConn, logger log.Logger) fwlog.FwLogV1Interface {
	client := NewFwLogV1Backend(conn, logger)
	return &crudClientFwLogV1{
		logger: logger,
		client: client,
	}
}

type crudRestClientFwLogV1 struct {
}

// NewRestCrudClientFwLogV1 creates a REST client for the service.
func NewRestCrudClientFwLogV1(url string, httpClient *http.Client) fwlog.FwLogV1Interface {
	return &crudRestClientFwLogV1{}
}

// NewStagedRestCrudClientFwLogV1 creates a REST client for the service.
func NewStagedRestCrudClientFwLogV1(url string, id string, httpClient *http.Client) fwlog.FwLogV1Interface {
	return &crudRestClientFwLogV1{}
}

func (a *crudRestClientFwLogV1) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
