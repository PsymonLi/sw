// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_fwlog.proto

package fwlog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FwLogV1 service

type FwLogV1Client interface {
	AutoWatchSvcFwLogV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (FwLogV1_AutoWatchSvcFwLogV1Client, error)
	// Queries firewall logs
	GetLogs(ctx context.Context, in *FwLogQuery, opts ...grpc.CallOption) (*FwLogList, error)
}

type fwLogV1Client struct {
	cc *grpc.ClientConn
}

func NewFwLogV1Client(cc *grpc.ClientConn) FwLogV1Client {
	return &fwLogV1Client{cc}
}

func (c *fwLogV1Client) AutoWatchSvcFwLogV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (FwLogV1_AutoWatchSvcFwLogV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_FwLogV1_serviceDesc.Streams[0], c.cc, "/fwlog.FwLogV1/AutoWatchSvcFwLogV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &fwLogV1AutoWatchSvcFwLogV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FwLogV1_AutoWatchSvcFwLogV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type fwLogV1AutoWatchSvcFwLogV1Client struct {
	grpc.ClientStream
}

func (x *fwLogV1AutoWatchSvcFwLogV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fwLogV1Client) GetLogs(ctx context.Context, in *FwLogQuery, opts ...grpc.CallOption) (*FwLogList, error) {
	out := new(FwLogList)
	err := grpc.Invoke(ctx, "/fwlog.FwLogV1/GetLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FwLogV1 service

type FwLogV1Server interface {
	AutoWatchSvcFwLogV1(*api.ListWatchOptions, FwLogV1_AutoWatchSvcFwLogV1Server) error
	// Queries firewall logs
	GetLogs(context.Context, *FwLogQuery) (*FwLogList, error)
}

func RegisterFwLogV1Server(s *grpc.Server, srv FwLogV1Server) {
	s.RegisterService(&_FwLogV1_serviceDesc, srv)
}

func _FwLogV1_AutoWatchSvcFwLogV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FwLogV1Server).AutoWatchSvcFwLogV1(m, &fwLogV1AutoWatchSvcFwLogV1Server{stream})
}

type FwLogV1_AutoWatchSvcFwLogV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type fwLogV1AutoWatchSvcFwLogV1Server struct {
	grpc.ServerStream
}

func (x *fwLogV1AutoWatchSvcFwLogV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _FwLogV1_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwLogQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FwLogV1Server).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fwlog.FwLogV1/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FwLogV1Server).GetLogs(ctx, req.(*FwLogQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _FwLogV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fwlog.FwLogV1",
	HandlerType: (*FwLogV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _FwLogV1_GetLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcFwLogV1",
			Handler:       _FwLogV1_AutoWatchSvcFwLogV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_fwlog.proto",
}

func init() { proto.RegisterFile("svc_fwlog.proto", fileDescriptorSvcFwlog) }

var fileDescriptorSvcFwlog = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x7b, 0x85, 0xb6, 0x12, 0x05, 0x6d, 0x4a, 0x87, 0x44, 0xc9, 0x50, 0x70, 0x11, 0x9a,
	0xb3, 0xba, 0xb9, 0x29, 0x54, 0x07, 0x0b, 0x2a, 0x42, 0x05, 0x17, 0xb9, 0xa6, 0xd7, 0xeb, 0x41,
	0x7a, 0xff, 0xd8, 0xbb, 0x24, 0x74, 0x8d, 0xfd, 0x04, 0xba, 0x39, 0x39, 0x3b, 0x3a, 0x88, 0xa3,
	0xa3, 0xa3, 0xe0, 0x17, 0x90, 0xe0, 0xe0, 0xc7, 0x90, 0x5c, 0x5a, 0xc8, 0xe2, 0x76, 0xef, 0x77,
	0xef, 0x3d, 0xde, 0x71, 0xc6, 0xba, 0x8c, 0xbc, 0x9b, 0x51, 0xec, 0x03, 0x73, 0x83, 0x29, 0x28,
	0x30, 0x2b, 0x5a, 0xd8, 0x5b, 0x0c, 0x80, 0xf9, 0x14, 0x93, 0x80, 0x63, 0x22, 0x04, 0x28, 0xa2,
	0x38, 0x08, 0x99, 0x9b, 0xec, 0x2e, 0xe3, 0x6a, 0x1c, 0x0e, 0x5c, 0x0f, 0x26, 0x38, 0xa0, 0x42,
	0x12, 0x31, 0x04, 0x2c, 0x63, 0x1c, 0x51, 0xc1, 0x3d, 0x8a, 0x43, 0xc5, 0x7d, 0x99, 0x45, 0x19,
	0x15, 0xc5, 0x34, 0xe6, 0xc2, 0xf3, 0xc3, 0x21, 0x5d, 0xd6, 0xb4, 0x0b, 0x35, 0x0c, 0x18, 0x60,
	0x8d, 0x07, 0xe1, 0x48, 0x2b, 0x2d, 0xf4, 0x69, 0x61, 0x5f, 0x2d, 0xec, 0xb4, 0xb7, 0xff, 0x99,
	0x90, 0x0d, 0x9e, 0x50, 0x45, 0x72, 0xdb, 0xde, 0x2b, 0x32, 0x6a, 0xc7, 0x71, 0x0f, 0x58, 0xbf,
	0x63, 0xf6, 0x8d, 0xc6, 0x61, 0xa8, 0xe0, 0x8a, 0x28, 0x6f, 0x7c, 0x19, 0x79, 0x4b, 0xdc, 0x74,
	0x49, 0xc0, 0xdd, 0x1e, 0x97, 0x4a, 0xdf, 0x9c, 0x05, 0x7a, 0xab, 0xdd, 0xd0, 0x58, 0xa3, 0x6e,
	0x44, 0x85, 0xca, 0x0c, 0xad, 0xfa, 0xcb, 0xdc, 0xaa, 0xc4, 0x19, 0x7b, 0x9b, 0x5b, 0xe8, 0x7d,
	0x6e, 0x95, 0x76, 0x91, 0x79, 0x6a, 0xd4, 0x4e, 0xa8, 0xea, 0x01, 0x93, 0x66, 0xdd, 0xcd, 0x37,
	0xea, 0xee, 0x8b, 0x90, 0x4e, 0x67, 0xf6, 0x46, 0x11, 0xe9, 0x92, 0xcd, 0xe4, 0xeb, 0xe7, 0xa1,
	0xdc, 0x6c, 0x55, 0xf1, 0x6d, 0xe6, 0x38, 0x40, 0x3b, 0xd7, 0x2b, 0xe6, 0x42, 0xd8, 0xd5, 0xfb,
	0x3b, 0xab, 0x1c, 0x75, 0x8e, 0xda, 0x8f, 0x89, 0xb5, 0x16, 0x50, 0xd1, 0x96, 0xc1, 0x8c, 0xf9,
	0x44, 0xca, 0xa7, 0xc4, 0x2a, 0x3d, 0x27, 0x56, 0xfe, 0x3f, 0x1f, 0xa9, 0x83, 0x3e, 0x53, 0x07,
	0x7d, 0xa7, 0x0e, 0xfa, 0x4d, 0x9d, 0xd2, 0x39, 0x1a, 0x54, 0xf5, 0x83, 0xf7, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0xa3, 0x8e, 0x7e, 0xd2, 0x01, 0x00, 0x00,
}
