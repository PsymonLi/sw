// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package fwlog is a auto generated package.
Input file: svc_fwlog.proto
*/
package fwlog

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerFwLogV1 struct {
	Endpoints EndpointsFwLogV1Server

	DownloadFwLogFileContentHdlr grpctransport.Handler
	GetLogsHdlr                  grpctransport.Handler
}

// MakeGRPCServerFwLogV1 creates a GRPC server for FwLogV1 service
func MakeGRPCServerFwLogV1(ctx context.Context, endpoints EndpointsFwLogV1Server, logger log.Logger) FwLogV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerFwLogV1{
		Endpoints: endpoints,
		DownloadFwLogFileContentHdlr: grpctransport.NewServer(
			endpoints.DownloadFwLogFileContentEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFwLogList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("DownloadFwLogFileContent", logger)))...,
		),

		GetLogsHdlr: grpctransport.NewServer(
			endpoints.GetLogsEndpoint,
			DecodeGrpcReqFwLogQuery,
			EncodeGrpcRespFwLogList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("GetLogs", logger)))...,
		),
	}
}

func (s *grpcServerFwLogV1) DownloadFwLogFileContent(ctx oldcontext.Context, req *api.ListWatchOptions) (*FwLogList, error) {
	_, resp, err := s.DownloadFwLogFileContentHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwLogV1DownloadFwLogFileContent).V
	return &r, resp.(respFwLogV1DownloadFwLogFileContent).Err
}

func decodeHTTPrespFwLogV1DownloadFwLogFileContent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwLogList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwLogV1) GetLogs(ctx oldcontext.Context, req *FwLogQuery) (*FwLogList, error) {
	_, resp, err := s.GetLogsHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwLogV1GetLogs).V
	return &r, resp.(respFwLogV1GetLogs).Err
}

func decodeHTTPrespFwLogV1GetLogs(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwLogList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwLogV1) AutoWatchSvcFwLogV1(in *api.ListWatchOptions, stream FwLogV1_AutoWatchSvcFwLogV1Server) error {
	return errors.New("not implemented")
}
