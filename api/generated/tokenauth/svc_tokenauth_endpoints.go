// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package tokenauth is a auto generated package.
Input file: svc_tokenauth.proto
*/
package tokenauth

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareTokenAuthV1Client add middleware to the client
type MiddlewareTokenAuthV1Client func(ServiceTokenAuthV1Client) ServiceTokenAuthV1Client

// EndpointsTokenAuthV1Client is the endpoints for the client
type EndpointsTokenAuthV1Client struct {
	Client                          TokenAuthV1Client
	AutoWatchSvcTokenAuthV1Endpoint endpoint.Endpoint

	GenerateNodeTokenEndpoint endpoint.Endpoint
}

// EndpointsTokenAuthV1RestClient is the REST client
type EndpointsTokenAuthV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoWatchSvcTokenAuthV1Endpoint endpoint.Endpoint
	GenerateNodeTokenEndpoint       endpoint.Endpoint
}

// MiddlewareTokenAuthV1Server adds middle ware to the server
type MiddlewareTokenAuthV1Server func(ServiceTokenAuthV1Server) ServiceTokenAuthV1Server

// EndpointsTokenAuthV1Server is the server endpoints
type EndpointsTokenAuthV1Server struct {
	svcWatchHandlerTokenAuthV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	GenerateNodeTokenEndpoint endpoint.Endpoint
}

// GenerateNodeToken is endpoint for GenerateNodeToken
func (e EndpointsTokenAuthV1Client) GenerateNodeToken(ctx context.Context, in *NodeTokenRequest) (*NodeTokenResponse, error) {
	resp, err := e.GenerateNodeTokenEndpoint(ctx, in)
	if err != nil {
		return &NodeTokenResponse{}, err
	}
	return resp.(*NodeTokenResponse), nil
}

type respTokenAuthV1GenerateNodeToken struct {
	V   NodeTokenResponse
	Err error
}

func (e EndpointsTokenAuthV1Client) AutoWatchSvcTokenAuthV1(ctx context.Context, in *api.ListWatchOptions) (TokenAuthV1_AutoWatchSvcTokenAuthV1Client, error) {
	return nil, errors.New("not implemented")
}

// GenerateNodeToken implementation on server Endpoint
func (e EndpointsTokenAuthV1Server) GenerateNodeToken(ctx context.Context, in NodeTokenRequest) (NodeTokenResponse, error) {
	resp, err := e.GenerateNodeTokenEndpoint(ctx, in)
	if err != nil {
		return NodeTokenResponse{}, err
	}
	return *resp.(*NodeTokenResponse), nil
}

// MakeTokenAuthV1GenerateNodeTokenEndpoint creates  GenerateNodeToken endpoints for the service
func MakeTokenAuthV1GenerateNodeTokenEndpoint(s ServiceTokenAuthV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NodeTokenRequest)
		v, err := s.GenerateNodeToken(ctx, *req)
		return respTokenAuthV1GenerateNodeToken{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("TokenAuthV1:GenerateNodeToken")(f)
}

// MakeAutoWatchSvcTokenAuthV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcTokenAuthV1Endpoint(s ServiceTokenAuthV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		return errors.New("not implemented")
	}
}

// MakeTokenAuthV1ServerEndpoints creates server endpoints
func MakeTokenAuthV1ServerEndpoints(s ServiceTokenAuthV1Server, logger log.Logger) EndpointsTokenAuthV1Server {
	return EndpointsTokenAuthV1Server{
		svcWatchHandlerTokenAuthV1: MakeAutoWatchSvcTokenAuthV1Endpoint(s, logger),

		GenerateNodeTokenEndpoint: MakeTokenAuthV1GenerateNodeTokenEndpoint(s, logger),
	}
}

// LoggingTokenAuthV1MiddlewareClient adds middleware for the client
func LoggingTokenAuthV1MiddlewareClient(logger log.Logger) MiddlewareTokenAuthV1Client {
	return func(next ServiceTokenAuthV1Client) ServiceTokenAuthV1Client {
		return loggingTokenAuthV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingTokenAuthV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceTokenAuthV1Client
}

// LoggingTokenAuthV1MiddlewareServer adds middleware for the client
func LoggingTokenAuthV1MiddlewareServer(logger log.Logger) MiddlewareTokenAuthV1Server {
	return func(next ServiceTokenAuthV1Server) ServiceTokenAuthV1Server {
		return loggingTokenAuthV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingTokenAuthV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceTokenAuthV1Server
}

func (m loggingTokenAuthV1MiddlewareClient) GenerateNodeToken(ctx context.Context, in *NodeTokenRequest) (resp *NodeTokenResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TokenAuthV1", "method", "GenerateNodeToken", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.GenerateNodeToken(ctx, in)
	return
}

func (m loggingTokenAuthV1MiddlewareClient) AutoWatchSvcTokenAuthV1(ctx context.Context, in *api.ListWatchOptions) (TokenAuthV1_AutoWatchSvcTokenAuthV1Client, error) {
	return nil, errors.New("not implemented")
}

func (m loggingTokenAuthV1MiddlewareServer) GenerateNodeToken(ctx context.Context, in NodeTokenRequest) (resp NodeTokenResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "TokenAuthV1", "method", "GenerateNodeToken", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.GenerateNodeToken(ctx, in)
	return
}

func (m loggingTokenAuthV1MiddlewareServer) AutoWatchSvcTokenAuthV1(in *api.ListWatchOptions, stream TokenAuthV1_AutoWatchSvcTokenAuthV1Server) error {
	return errors.New("Not implemented")
}

func (r *EndpointsTokenAuthV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsTokenAuthV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURITokenAuthV1AutoWatchSvcTokenAuthV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

func (r *EndpointsTokenAuthV1RestClient) TokenAuthV1GenerateNodeTokenEndpoint(ctx context.Context, in *NodeTokenRequest) (*NodeTokenResponse, error) {
	return nil, errors.New("not allowed")
}

// MakeTokenAuthV1RestClientEndpoints make REST client endpoints
func MakeTokenAuthV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsTokenAuthV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsTokenAuthV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeTokenAuthV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeTokenAuthV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsTokenAuthV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsTokenAuthV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
