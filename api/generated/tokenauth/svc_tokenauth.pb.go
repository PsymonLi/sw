// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_tokenauth.proto

/*
	Package tokenauth is a generated protocol buffer package.

	APIs to generate node auth tokens

	It is generated from these files:
		svc_tokenauth.proto
		tokenauth.proto

	It has these top-level messages:
		NodeTokenRequest
		NodeTokenResponse
*/
package tokenauth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenAuthV1 service

type TokenAuthV1Client interface {
	AutoWatchSvcTokenAuthV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TokenAuthV1_AutoWatchSvcTokenAuthV1Client, error)
	//
	GenerateNodeToken(ctx context.Context, in *NodeTokenRequest, opts ...grpc.CallOption) (*NodeTokenResponse, error)
}

type tokenAuthV1Client struct {
	cc *grpc.ClientConn
}

func NewTokenAuthV1Client(cc *grpc.ClientConn) TokenAuthV1Client {
	return &tokenAuthV1Client{cc}
}

func (c *tokenAuthV1Client) AutoWatchSvcTokenAuthV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TokenAuthV1_AutoWatchSvcTokenAuthV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_TokenAuthV1_serviceDesc.Streams[0], c.cc, "/tokenauth.TokenAuthV1/AutoWatchSvcTokenAuthV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenAuthV1AutoWatchSvcTokenAuthV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TokenAuthV1_AutoWatchSvcTokenAuthV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type tokenAuthV1AutoWatchSvcTokenAuthV1Client struct {
	grpc.ClientStream
}

func (x *tokenAuthV1AutoWatchSvcTokenAuthV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenAuthV1Client) GenerateNodeToken(ctx context.Context, in *NodeTokenRequest, opts ...grpc.CallOption) (*NodeTokenResponse, error) {
	out := new(NodeTokenResponse)
	err := grpc.Invoke(ctx, "/tokenauth.TokenAuthV1/GenerateNodeToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenAuthV1 service

type TokenAuthV1Server interface {
	AutoWatchSvcTokenAuthV1(*api.ListWatchOptions, TokenAuthV1_AutoWatchSvcTokenAuthV1Server) error
	//
	GenerateNodeToken(context.Context, *NodeTokenRequest) (*NodeTokenResponse, error)
}

func RegisterTokenAuthV1Server(s *grpc.Server, srv TokenAuthV1Server) {
	s.RegisterService(&_TokenAuthV1_serviceDesc, srv)
}

func _TokenAuthV1_AutoWatchSvcTokenAuthV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokenAuthV1Server).AutoWatchSvcTokenAuthV1(m, &tokenAuthV1AutoWatchSvcTokenAuthV1Server{stream})
}

type TokenAuthV1_AutoWatchSvcTokenAuthV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type tokenAuthV1AutoWatchSvcTokenAuthV1Server struct {
	grpc.ServerStream
}

func (x *tokenAuthV1AutoWatchSvcTokenAuthV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _TokenAuthV1_GenerateNodeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenAuthV1Server).GenerateNodeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenauth.TokenAuthV1/GenerateNodeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenAuthV1Server).GenerateNodeToken(ctx, req.(*NodeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenAuthV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenauth.TokenAuthV1",
	HandlerType: (*TokenAuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNodeToken",
			Handler:    _TokenAuthV1_GenerateNodeToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcTokenAuthV1",
			Handler:       _TokenAuthV1_AutoWatchSvcTokenAuthV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_tokenauth.proto",
}

func init() { proto.RegisterFile("svc_tokenauth.proto", fileDescriptorSvcTokenauth) }

var fileDescriptorSvcTokenauth = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x9b, 0x42, 0x5b, 0x6e, 0x2e, 0x97, 0x4b, 0x53, 0x2e, 0x97, 0xe4, 0x96, 0x2e, 0x0a,
	0x17, 0xdc, 0x34, 0x63, 0xf5, 0x09, 0x2a, 0x14, 0x37, 0xa2, 0xa2, 0xa2, 0x20, 0x88, 0x4c, 0x93,
	0x63, 0x32, 0xd8, 0xce, 0x89, 0x9d, 0x33, 0xe9, 0x3e, 0xf6, 0x09, 0x74, 0xe7, 0xca, 0xb5, 0x4b,
	0x57, 0x2e, 0x5d, 0xba, 0x2c, 0xf8, 0x02, 0x52, 0x7c, 0x10, 0xc9, 0x58, 0xdb, 0x22, 0xba, 0xcb,
	0xf9, 0xfe, 0xff, 0xfc, 0xf9, 0x67, 0xc6, 0xae, 0xa9, 0x34, 0x38, 0x25, 0x3c, 0x07, 0xc9, 0x35,
	0xc5, 0x7e, 0x32, 0x44, 0x42, 0xe7, 0xc7, 0x1c, 0x78, 0xf5, 0x08, 0x31, 0xea, 0x03, 0xe3, 0x89,
	0x60, 0x5c, 0x4a, 0x24, 0x4e, 0x02, 0xa5, 0x7a, 0x37, 0x7a, 0xdd, 0x48, 0x50, 0xac, 0x7b, 0x7e,
	0x80, 0x03, 0x96, 0x80, 0x54, 0x5c, 0x86, 0xc8, 0xd4, 0x88, 0xa5, 0x20, 0x45, 0x00, 0x4c, 0x93,
	0xe8, 0xab, 0x7c, 0x35, 0x02, 0xb9, 0xbc, 0xcd, 0x84, 0x0c, 0xfa, 0x3a, 0x84, 0x8f, 0x98, 0xd6,
	0x52, 0x4c, 0x84, 0x11, 0x32, 0x83, 0x7b, 0xfa, 0xcc, 0x4c, 0x66, 0x30, 0x5f, 0x33, 0xfb, 0xff,
	0x6f, 0xfe, 0x9a, 0x77, 0x1c, 0x00, 0xf1, 0x99, 0xed, 0xf7, 0xa7, 0x63, 0xad, 0x4d, 0x2c, 0xfb,
	0xe7, 0x41, 0xce, 0x3a, 0x9a, 0xe2, 0xc3, 0xb6, 0x73, 0x6c, 0xff, 0xed, 0x68, 0xc2, 0x23, 0x4e,
	0x41, 0xbc, 0x9f, 0x06, 0xcb, 0xd2, 0x1f, 0x9f, 0x27, 0xc2, 0xdf, 0x12, 0x8a, 0x8c, 0xba, 0x93,
	0x98, 0xde, 0x5e, 0xcd, 0x60, 0x83, 0xba, 0x29, 0x48, 0xca, 0x0d, 0xcd, 0xea, 0xfd, 0xd8, 0x2d,
	0x8d, 0x72, 0xf6, 0x30, 0x76, 0xad, 0xc7, 0xb1, 0x5b, 0x58, 0xb5, 0x9c, 0x13, 0xbb, 0xba, 0x09,
	0x12, 0x86, 0x9c, 0x60, 0x1b, 0x43, 0x30, 0xd9, 0xce, 0x3f, 0x7f, 0x51, 0x69, 0x4e, 0xf7, 0xe0,
	0x42, 0x83, 0x22, 0xaf, 0xfe, 0xb5, 0xa8, 0x12, 0x94, 0x0a, 0x9a, 0xbf, 0xb2, 0xe7, 0xd7, 0xeb,
	0x62, 0xc5, 0x29, 0x31, 0x89, 0x21, 0x78, 0xe5, 0xab, 0x4b, 0xb7, 0x98, 0xb6, 0x37, 0x56, 0x6e,
	0x32, 0xb7, 0x92, 0x80, 0x6c, 0x05, 0x83, 0xf0, 0x36, 0x73, 0x0b, 0x77, 0x99, 0xbb, 0x78, 0xbc,
	0xa7, 0x69, 0xc3, 0x9a, 0x4c, 0x1b, 0xd6, 0xcb, 0xb4, 0x61, 0xed, 0x5a, 0xbd, 0xb2, 0xb9, 0x85,
	0xf5, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xc8, 0xa6, 0xef, 0xf3, 0x01, 0x00, 0x00,
}
