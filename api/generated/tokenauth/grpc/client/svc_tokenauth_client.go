// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	tokenauth "github.com/pensando/sw/api/generated/tokenauth"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewTokenAuthV1 sets up a new client for TokenAuthV1
func NewTokenAuthV1(conn *grpc.ClientConn, logger log.Logger) tokenauth.ServiceTokenAuthV1Client {

	var lGenerateNodeTokenEndpoint endpoint.Endpoint
	{
		lGenerateNodeTokenEndpoint = grpctransport.NewClient(
			conn,
			"tokenauth.TokenAuthV1",
			"GenerateNodeToken",
			tokenauth.EncodeGrpcReqNodeTokenRequest,
			tokenauth.DecodeGrpcRespNodeTokenResponse,
			&tokenauth.NodeTokenResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGenerateNodeTokenEndpoint = trace.ClientEndPoint("TokenAuthV1:GenerateNodeToken")(lGenerateNodeTokenEndpoint)
	}
	return tokenauth.EndpointsTokenAuthV1Client{
		Client: tokenauth.NewTokenAuthV1Client(conn),

		GenerateNodeTokenEndpoint: lGenerateNodeTokenEndpoint,
	}
}

// NewTokenAuthV1Backend creates an instrumented client with middleware
func NewTokenAuthV1Backend(conn *grpc.ClientConn, logger log.Logger) tokenauth.ServiceTokenAuthV1Client {
	cl := NewTokenAuthV1(conn, logger)
	cl = tokenauth.LoggingTokenAuthV1MiddlewareClient(logger)(cl)
	return cl
}

type crudClientTokenAuthV1 struct {
	logger log.Logger
	client tokenauth.ServiceTokenAuthV1Client
}

// NewGrpcCrudClientTokenAuthV1 creates a GRPC client for the service
func NewGrpcCrudClientTokenAuthV1(conn *grpc.ClientConn, logger log.Logger) tokenauth.TokenAuthV1Interface {
	client := NewTokenAuthV1Backend(conn, logger)
	return &crudClientTokenAuthV1{
		logger: logger,
		client: client,
	}
}

type crudRestClientTokenAuthV1 struct {
}

// NewRestCrudClientTokenAuthV1 creates a REST client for the service.
func NewRestCrudClientTokenAuthV1(url string, httpClient *http.Client) tokenauth.TokenAuthV1Interface {
	return &crudRestClientTokenAuthV1{}
}

// NewStagedRestCrudClientTokenAuthV1 creates a REST client for the service.
func NewStagedRestCrudClientTokenAuthV1(url string, id string, httpClient *http.Client) tokenauth.TokenAuthV1Interface {
	return &crudRestClientTokenAuthV1{}
}

func (a *crudRestClientTokenAuthV1) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
