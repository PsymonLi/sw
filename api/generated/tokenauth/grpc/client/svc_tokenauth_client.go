// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	tokenauth "github.com/pensando/sw/api/generated/tokenauth"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewTokenAuthV1 sets up a new client for TokenAuthV1
func NewTokenAuthV1(conn *grpc.ClientConn, logger log.Logger) tokenauth.ServiceTokenAuthV1Client {

	var lGenerateNodeTokenEndpoint endpoint.Endpoint
	{
		lGenerateNodeTokenEndpoint = grpctransport.NewClient(
			conn,
			"tokenauth.TokenAuthV1",
			"GenerateNodeToken",
			tokenauth.EncodeGrpcReqNodeTokenRequest,
			tokenauth.DecodeGrpcRespNodeTokenResponse,
			&tokenauth.NodeTokenResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGenerateNodeTokenEndpoint = trace.ClientEndPoint("TokenAuthV1:GenerateNodeToken")(lGenerateNodeTokenEndpoint)
	}
	return tokenauth.EndpointsTokenAuthV1Client{
		Client: tokenauth.NewTokenAuthV1Client(conn),

		GenerateNodeTokenEndpoint: lGenerateNodeTokenEndpoint,
	}
}

// NewTokenAuthV1Backend creates an instrumented client with middleware
func NewTokenAuthV1Backend(conn *grpc.ClientConn, logger log.Logger) tokenauth.ServiceTokenAuthV1Client {
	cl := NewTokenAuthV1(conn, logger)
	cl = tokenauth.LoggingTokenAuthV1MiddlewareClient(logger)(cl)
	return cl
}
