// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstoreGwService is a auto generated package.
Input file: protos/example.proto
*/
package bookstoreGwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	bookstore "github.com/pensando/sw/api/generated/bookstore"
	"github.com/pensando/sw/api/generated/bookstore/grpc/client"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sBookstoreV1GwService struct {
	logger log.Logger
}

type adapterBookstoreV1 struct {
	conn    *rpckit.RPCClient
	service bookstore.ServiceBookstoreV1Client
}

func (a adapterBookstoreV1) AddOutage(oldctx oldcontext.Context, t *bookstore.OutageRequest, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AddOutage(ctx, t)
}

func (a adapterBookstoreV1) Applydiscount(oldctx oldcontext.Context, t *bookstore.ApplyDiscountReq, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.Applydiscount(ctx, t)
}

func (a adapterBookstoreV1) AutoAddBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddBook(ctx, t)
}

func (a adapterBookstoreV1) AutoAddCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddCoupon(ctx, t)
}

func (a adapterBookstoreV1) AutoAddOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddOrder(ctx, t)
}

func (a adapterBookstoreV1) AutoAddPublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddPublisher(ctx, t)
}

func (a adapterBookstoreV1) AutoAddStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddStore(ctx, t)
}

func (a adapterBookstoreV1) AutoDeleteBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteBook(ctx, t)
}

func (a adapterBookstoreV1) AutoDeleteCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteCoupon(ctx, t)
}

func (a adapterBookstoreV1) AutoDeleteOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteOrder(ctx, t)
}

func (a adapterBookstoreV1) AutoDeletePublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeletePublisher(ctx, t)
}

func (a adapterBookstoreV1) AutoDeleteStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteStore(ctx, t)
}

func (a adapterBookstoreV1) AutoGetBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetBook(ctx, t)
}

func (a adapterBookstoreV1) AutoGetCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetCoupon(ctx, t)
}

func (a adapterBookstoreV1) AutoGetOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetOrder(ctx, t)
}

func (a adapterBookstoreV1) AutoGetPublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetPublisher(ctx, t)
}

func (a adapterBookstoreV1) AutoGetStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetStore(ctx, t)
}

func (a adapterBookstoreV1) AutoListBook(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.BookList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListBook(ctx, t)
}

func (a adapterBookstoreV1) AutoListCoupon(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.CouponList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListCoupon(ctx, t)
}

func (a adapterBookstoreV1) AutoListOrder(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.OrderList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListOrder(ctx, t)
}

func (a adapterBookstoreV1) AutoListPublisher(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.PublisherList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListPublisher(ctx, t)
}

func (a adapterBookstoreV1) AutoListStore(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.StoreList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListStore(ctx, t)
}

func (a adapterBookstoreV1) AutoUpdateBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateBook(ctx, t)
}

func (a adapterBookstoreV1) AutoUpdateCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateCoupon(ctx, t)
}

func (a adapterBookstoreV1) AutoUpdateOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateOrder(ctx, t)
}

func (a adapterBookstoreV1) AutoUpdatePublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdatePublisher(ctx, t)
}

func (a adapterBookstoreV1) AutoUpdateStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateStore(ctx, t)
}

func (a adapterBookstoreV1) Cleardiscount(oldctx oldcontext.Context, t *bookstore.ApplyDiscountReq, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.Cleardiscount(ctx, t)
}

func (a adapterBookstoreV1) Restock(oldctx oldcontext.Context, t *bookstore.RestockRequest, options ...grpc.CallOption) (*bookstore.RestockResponse, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.Restock(ctx, t)
}

func (a adapterBookstoreV1) AutoWatchOrder(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchOrderClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchOrder(ctx, in)
}

func (a adapterBookstoreV1) AutoWatchBook(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchBookClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchBook(ctx, in)
}

func (a adapterBookstoreV1) AutoWatchPublisher(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchPublisherClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchPublisher(ctx, in)
}

func (a adapterBookstoreV1) AutoWatchStore(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchStoreClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchStore(ctx, in)
}

func (a adapterBookstoreV1) AutoWatchCoupon(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchCouponClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchCoupon(ctx, in)
}

func (e *sBookstoreV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()

	fileCount++

	if fileCount == 1 {
		err := registerSwaggerDef(m, logger)
		if err != nil {
			logger.ErrorLog("msg", "failed to register swagger spec", "service", "bookstore.BookstoreV1", "error", err)
		}
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = bookstore.RegisterBookstoreV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service bookstore.BookstoreV1")
					m.Handle("/v1/bookstore/", http.StripPrefix("/v1/bookstore", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "bookstore.BookstoreV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sBookstoreV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterBookstoreV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient("BookstoreV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterBookstoreV1{conn: client, service: grpcclient.NewBookstoreV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()

	svcBookstoreV1 := sBookstoreV1GwService{}
	apigw.Register("bookstore.BookstoreV1", "bookstore/", &svcBookstoreV1)
}
