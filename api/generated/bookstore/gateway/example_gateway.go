// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstoreGwService is a auto generated package.
Input file: example.proto
*/
package bookstoreGwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	bookstore "github.com/pensando/sw/api/generated/bookstore"
	grpcclient "github.com/pensando/sw/api/generated/bookstore/grpc/client"
	"github.com/pensando/sw/venice/apigw"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/authz"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ authz.Authorizer

type sBookstoreV1GwService struct {
	logger     log.Logger
	defSvcProf apigw.ServiceProfile
	svcProf    map[string]apigw.ServiceProfile
}

type adapterBookstoreV1 struct {
	conn    *rpckit.RPCClient
	service bookstore.ServiceBookstoreV1Client
	gwSvc   *sBookstoreV1GwService
	gw      apigw.APIGateway
}

func (a adapterBookstoreV1) AddOutage(oldctx oldcontext.Context, t *bookstore.OutageRequest, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AddOutage")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Store", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.OutageRequest)
		return a.service.AddOutage(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Store), err
}

func (a adapterBookstoreV1) Applydiscount(oldctx oldcontext.Context, t *bookstore.ApplyDiscountReq, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("Applydiscount")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.ApplyDiscountReq)
		return a.service.Applydiscount(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) AutoAddBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Book", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Book)
		return a.service.AutoAddBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Book), err
}

func (a adapterBookstoreV1) AutoAddCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Coupon", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Coupon)
		return a.service.AutoAddCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Coupon), err
}

func (a adapterBookstoreV1) AutoAddCustomer(oldctx oldcontext.Context, t *bookstore.Customer, options ...grpc.CallOption) (*bookstore.Customer, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Customer", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Customer)
		return a.service.AutoAddCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Customer), err
}

func (a adapterBookstoreV1) AutoAddOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Order)
		return a.service.AutoAddOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) AutoAddPublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddPublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Publisher", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Publisher)
		return a.service.AutoAddPublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Publisher), err
}

func (a adapterBookstoreV1) AutoAddStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoAddStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Store", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Store)
		return a.service.AutoAddStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Store), err
}

func (a adapterBookstoreV1) AutoDeleteBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Book", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Book)
		return a.service.AutoDeleteBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Book), err
}

func (a adapterBookstoreV1) AutoDeleteCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Coupon", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Coupon)
		return a.service.AutoDeleteCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Coupon), err
}

func (a adapterBookstoreV1) AutoDeleteCustomer(oldctx oldcontext.Context, t *bookstore.Customer, options ...grpc.CallOption) (*bookstore.Customer, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Customer", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Customer)
		return a.service.AutoDeleteCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Customer), err
}

func (a adapterBookstoreV1) AutoDeleteOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Order)
		return a.service.AutoDeleteOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) AutoDeletePublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeletePublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Publisher", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Publisher)
		return a.service.AutoDeletePublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Publisher), err
}

func (a adapterBookstoreV1) AutoDeleteStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoDeleteStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.DeleteOper, "Store", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Store)
		return a.service.AutoDeleteStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Store), err
}

func (a adapterBookstoreV1) AutoGetBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Book", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Book)
		return a.service.AutoGetBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Book), err
}

func (a adapterBookstoreV1) AutoGetCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Coupon", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Coupon)
		return a.service.AutoGetCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Coupon), err
}

func (a adapterBookstoreV1) AutoGetCustomer(oldctx oldcontext.Context, t *bookstore.Customer, options ...grpc.CallOption) (*bookstore.Customer, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Customer", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Customer)
		return a.service.AutoGetCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Customer), err
}

func (a adapterBookstoreV1) AutoGetOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Order)
		return a.service.AutoGetOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) AutoGetPublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetPublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Publisher", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Publisher)
		return a.service.AutoGetPublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Publisher), err
}

func (a adapterBookstoreV1) AutoGetStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoGetStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.GetOper, "Store", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Store)
		return a.service.AutoGetStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Store), err
}

func (a adapterBookstoreV1) AutoListBook(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.BookList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "BookList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.BookList), err
}

func (a adapterBookstoreV1) AutoListCoupon(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.CouponList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "CouponList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.CouponList), err
}

func (a adapterBookstoreV1) AutoListCustomer(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.CustomerList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "CustomerList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.CustomerList), err
}

func (a adapterBookstoreV1) AutoListOrder(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.OrderList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "OrderList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.OrderList), err
}

func (a adapterBookstoreV1) AutoListPublisher(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.PublisherList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListPublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "PublisherList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListPublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.PublisherList), err
}

func (a adapterBookstoreV1) AutoListStore(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*bookstore.StoreList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoListStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	t.Tenant, t.Namespace = "", ""
	oper, kind, tenant, namespace, group, name := apiserver.ListOper, "StoreList", t.Tenant, t.Namespace, "bookstore", ""

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoListStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.StoreList), err
}

func (a adapterBookstoreV1) AutoUpdateBook(oldctx oldcontext.Context, t *bookstore.Book, options ...grpc.CallOption) (*bookstore.Book, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Book", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Book)
		return a.service.AutoUpdateBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Book), err
}

func (a adapterBookstoreV1) AutoUpdateCoupon(oldctx oldcontext.Context, t *bookstore.Coupon, options ...grpc.CallOption) (*bookstore.Coupon, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Coupon", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Coupon)
		return a.service.AutoUpdateCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Coupon), err
}

func (a adapterBookstoreV1) AutoUpdateCustomer(oldctx oldcontext.Context, t *bookstore.Customer, options ...grpc.CallOption) (*bookstore.Customer, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Customer", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Customer)
		return a.service.AutoUpdateCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Customer), err
}

func (a adapterBookstoreV1) AutoUpdateOrder(oldctx oldcontext.Context, t *bookstore.Order, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Order)
		return a.service.AutoUpdateOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) AutoUpdatePublisher(oldctx oldcontext.Context, t *bookstore.Publisher, options ...grpc.CallOption) (*bookstore.Publisher, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdatePublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Publisher", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Publisher)
		return a.service.AutoUpdatePublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Publisher), err
}

func (a adapterBookstoreV1) AutoUpdateStore(oldctx oldcontext.Context, t *bookstore.Store, options ...grpc.CallOption) (*bookstore.Store, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoUpdateStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.UpdateOper, "Store", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.Store)
		return a.service.AutoUpdateStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Store), err
}

func (a adapterBookstoreV1) Cleardiscount(oldctx oldcontext.Context, t *bookstore.ApplyDiscountReq, options ...grpc.CallOption) (*bookstore.Order, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("Cleardiscount")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Order", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.ApplyDiscountReq)
		return a.service.Cleardiscount(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.Order), err
}

func (a adapterBookstoreV1) Restock(oldctx oldcontext.Context, t *bookstore.RestockRequest, options ...grpc.CallOption) (*bookstore.RestockResponse, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("Restock")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group, name := apiserver.CreateOper, "Book", t.Tenant, t.Namespace, "bookstore", t.Name

	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*bookstore.RestockRequest)
		return a.service.Restock(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*bookstore.RestockResponse), err
}

func (a adapterBookstoreV1) AutoWatchSvcBookstoreV1(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchSvcBookstoreV1Client, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchSvcBookstoreV1")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchSvcBookstoreV1(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchSvcBookstoreV1Client), err
}

func (a adapterBookstoreV1) AutoWatchOrder(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchOrderClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchOrder")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Order", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchOrder(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchOrderClient), err
}

func (a adapterBookstoreV1) AutoWatchBook(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchBookClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchBook")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Book", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchBook(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchBookClient), err
}

func (a adapterBookstoreV1) AutoWatchPublisher(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchPublisherClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchPublisher")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Publisher", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchPublisher(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchPublisherClient), err
}

func (a adapterBookstoreV1) AutoWatchStore(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchStoreClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchStore")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Store", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchStore(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchStoreClient), err
}

func (a adapterBookstoreV1) AutoWatchCoupon(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchCouponClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchCoupon")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Coupon", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchCoupon(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchCouponClient), err
}

func (a adapterBookstoreV1) AutoWatchCustomer(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (bookstore.BookstoreV1_AutoWatchCustomerClient, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchCustomer")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}

	in.Tenant, in.Namespace = "", ""
	oper, kind, tenant, namespace, group := apiserver.WatchOper, "Customer", in.Tenant, in.Namespace, "bookstore"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
		return a.service.AutoWatchCustomer(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(bookstore.BookstoreV1_AutoWatchCustomerClient), err
}

func (e *sBookstoreV1GwService) setupSvcProfile() {
	e.defSvcProf = apigwpkg.NewServiceProfile(nil, "", "bookstore", apiserver.UnknownOper)
	e.defSvcProf.SetDefaults()
	e.svcProf = make(map[string]apigw.ServiceProfile)

	e.svcProf["AddOutage"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Store", "bookstore", apiserver.CreateOper)

	e.svcProf["Applydiscount"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.CreateOper)

	e.svcProf["AutoAddCustomer"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Customer", "bookstore", apiserver.CreateOper)

	e.svcProf["AutoAddOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.CreateOper)

	e.svcProf["AutoAddStore"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Store", "bookstore", apiserver.CreateOper)

	e.svcProf["AutoDeleteCustomer"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Customer", "bookstore", apiserver.DeleteOper)

	e.svcProf["AutoDeleteOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.DeleteOper)

	e.svcProf["AutoDeleteStore"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Store", "bookstore", apiserver.DeleteOper)

	e.svcProf["AutoGetBook"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Book", "bookstore", apiserver.GetOper)

	e.svcProf["AutoGetCustomer"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Customer", "bookstore", apiserver.GetOper)

	e.svcProf["AutoGetOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.GetOper)

	e.svcProf["AutoGetStore"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Store", "bookstore", apiserver.GetOper)

	e.svcProf["AutoListCustomer"] = apigwpkg.NewServiceProfile(e.defSvcProf, "CustomerList", "bookstore", apiserver.ListOper)

	e.svcProf["AutoListOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "OrderList", "bookstore", apiserver.ListOper)

	e.svcProf["AutoUpdateBook"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Book", "bookstore", apiserver.UpdateOper)

	e.svcProf["AutoUpdateCustomer"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Customer", "bookstore", apiserver.UpdateOper)

	e.svcProf["AutoUpdateOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.UpdateOper)

	e.svcProf["AutoUpdateStore"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Store", "bookstore", apiserver.UpdateOper)

	e.svcProf["AutoWatchOrder"] = apigwpkg.NewServiceProfile(e.defSvcProf, "AutoMsgOrderWatchHelper", "bookstore", apiserver.WatchOper)

	e.svcProf["Cleardiscount"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Order", "bookstore", apiserver.CreateOper)

	e.svcProf["Restock"] = apigwpkg.NewServiceProfile(e.defSvcProf, "Book", "bookstore", apiserver.CreateOper)
	e.svcProf["_RProxy_"+"/uploads/"] = apigwpkg.NewServiceProfile(e.defSvcProf, "", "", apiserver.UnknownOper)
}

// GetDefaultServiceProfile returns the default fallback service profile for this service
func (e *sBookstoreV1GwService) GetDefaultServiceProfile() (apigw.ServiceProfile, error) {
	if e.defSvcProf == nil {
		return nil, errors.New("not found")
	}
	return e.defSvcProf, nil
}

// GetServiceProfile returns the service profile for a given method in this service
func (e *sBookstoreV1GwService) GetServiceProfile(method string) (apigw.ServiceProfile, error) {
	if ret, ok := e.svcProf[method]; ok {
		return ret, nil
	}
	return nil, errors.New("not found")
}

// GetCrudServiceProfile returns the service profile for a auto generated crud operation
func (e *sBookstoreV1GwService) GetCrudServiceProfile(obj string, oper apiserver.APIOperType) (apigw.ServiceProfile, error) {
	name := apiserver.GetCrudServiceName(obj, oper)
	if name != "" {
		return e.GetServiceProfile(name)
	}
	return nil, errors.New("not found")
}

// GetProxyServiceProfile returns the service Profile for a reverse proxy path
func (e *sBookstoreV1GwService) GetProxyServiceProfile(path string) (apigw.ServiceProfile, error) {
	name := "_RProxy_" + path
	return e.GetServiceProfile(name)
}

func (e *sBookstoreV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()
	e.setupSvcProfile()

	err := registerSwaggerDef(m, logger)
	if err != nil {
		logger.ErrorLog("msg", "failed to register swagger spec", "service", "bookstore.BookstoreV1", "error", err)
	}
	{
		name := "_RProxy_" + "/uploads/"
		svcProf, err := e.GetServiceProfile(name)
		if err != nil {
			logger.Fatalf("failed to get service profile for [%s](%s)", name, err)
		}

		rproxy, err := apigwpkg.NewRProxyHandler("/configs/bookstore/v1/uploads/", "http://localhost:9918", svcProf)
		if err != nil {
			logger.Fatalf("failed to get proxy handler for [%s](%s)", name, err)
		}
		m.Handle("/configs/bookstore/v1/uploads/", rproxy)
	}
	wg.Add(1)
	go func() {
		defer func() {
			muxMutex.Lock()
			mux = nil
			muxMutex.Unlock()
		}()
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = bookstore.RegisterBookstoreV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service bookstore.BookstoreV1")
					m.Handle("/configs/bookstore/v1/", http.StripPrefix("/configs/bookstore/v1", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "bookstore.BookstoreV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sBookstoreV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterBookstoreV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	} else {
		opts = append(opts, rpckit.WithRemoteServerName("pen-apiserver"))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterBookstoreV1{conn: client, gw: apigwpkg.MustGetAPIGateway(), gwSvc: e, service: grpcclient.NewBookstoreV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {

	apigw := apigwpkg.MustGetAPIGateway()

	svcBookstoreV1 := sBookstoreV1GwService{}
	apigw.Register("bookstore.BookstoreV1", "bookstore/", &svcBookstoreV1)
}
