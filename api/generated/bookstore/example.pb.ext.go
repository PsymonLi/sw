// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstore is a auto generated package.
Input file: protos/example.proto
*/
package bookstore

import (
	"context"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
	"github.com/pensando/sw/venice/utils/transformers/storage"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapExample = make(map[string]map[string][]func(interface{}) bool)

var storageTransformersMapExample = make(map[string][]func(ctx context.Context, i interface{}, toStorage bool) error)

// MakeKey generates a KV store key for the object
func (m *ApplyDiscountReq) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "orders/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Book) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "books/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Coupon) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "Coupon/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Customer) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "customers/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Order) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "orders/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *OutageRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "Store/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Publisher) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "publishers/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *RestockRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "Book/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *RestockResponse) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "Book/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Store) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "store", "/Singleton")
}

// MakeKey generates a KV store key for the object
func (m *BookList) MakeKey(prefix string) string {
	obj := Book{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *CouponList) MakeKey(prefix string) string {
	obj := Coupon{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *CustomerList) MakeKey(prefix string) string {
	obj := Customer{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *OrderList) MakeKey(prefix string) string {
	obj := Order{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *PublisherList) MakeKey(prefix string) string {
	obj := Publisher{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *StoreList) MakeKey(prefix string) string {
	obj := Store{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgBookWatchHelper) MakeKey(prefix string) string {
	obj := Book{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgCouponWatchHelper) MakeKey(prefix string) string {
	obj := Coupon{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgCustomerWatchHelper) MakeKey(prefix string) string {
	obj := Customer{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgOrderWatchHelper) MakeKey(prefix string) string {
	obj := Order{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgPublisherWatchHelper) MakeKey(prefix string) string {
	obj := Publisher{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgStoreWatchHelper) MakeKey(prefix string) string {
	obj := Store{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *ApplyDiscountReq) Clone(into interface{}) (interface{}, error) {
	var out *ApplyDiscountReq
	var ok bool
	if into == nil {
		out = &ApplyDiscountReq{}
	} else {
		out, ok = into.(*ApplyDiscountReq)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ApplyDiscountReq) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgBookWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgBookWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgBookWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgBookWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgBookWatchHelper) Defaults(ver string) bool {
	var ret bool
	for m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCouponWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCouponWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgCouponWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgCouponWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCouponWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCustomerWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCustomerWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgCustomerWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgCustomerWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCustomerWatchHelper) Defaults(ver string) bool {
	var ret bool
	for m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgOrderWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgOrderWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgOrderWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgOrderWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgOrderWatchHelper) Defaults(ver string) bool {
	var ret bool
	for m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgPublisherWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgPublisherWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgPublisherWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgPublisherWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgPublisherWatchHelper) Defaults(ver string) bool {
	var ret bool
	for m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgStoreWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgStoreWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgStoreWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgStoreWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgStoreWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Book) Clone(into interface{}) (interface{}, error) {
	var out *Book
	var ok bool
	if into == nil {
		out = &Book{}
	} else {
		out, ok = into.(*Book)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Book) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookEdition) Clone(into interface{}) (interface{}, error) {
	var out *BookEdition
	var ok bool
	if into == nil {
		out = &BookEdition{}
	} else {
		out, ok = into.(*BookEdition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookEdition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Errata = "None"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookList) Clone(into interface{}) (interface{}, error) {
	var out *BookList
	var ok bool
	if into == nil {
		out = &BookList{}
	} else {
		out, ok = into.(*BookList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookSpec) Clone(into interface{}) (interface{}, error) {
	var out *BookSpec
	var ok bool
	if into == nil {
		out = &BookSpec{}
	} else {
		out, ok = into.(*BookSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Editions {
		if m.Editions[k] != nil {
			ret = ret || m.Editions[k].Defaults(ver)
		}
	}
	ret = true
	switch ver {
	default:
		m.Category = "YoungAdult"

	case "v1":
		m.Category = "ChildrensLit"
		m.IdProvider = "TestProvider"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookStatus) Clone(into interface{}) (interface{}, error) {
	var out *BookStatus
	var ok bool
	if into == nil {
		out = &BookStatus{}
	} else {
		out, ok = into.(*BookStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Coupon) Clone(into interface{}) (interface{}, error) {
	var out *Coupon
	var ok bool
	if into == nil {
		out = &Coupon{}
	} else {
		out, ok = into.(*Coupon)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Coupon) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CouponList) Clone(into interface{}) (interface{}, error) {
	var out *CouponList
	var ok bool
	if into == nil {
		out = &CouponList{}
	} else {
		out, ok = into.(*CouponList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CouponList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Customer) Clone(into interface{}) (interface{}, error) {
	var out *Customer
	var ok bool
	if into == nil {
		out = &Customer{}
	} else {
		out, ok = into.(*Customer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Customer) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerList) Clone(into interface{}) (interface{}, error) {
	var out *CustomerList
	var ok bool
	if into == nil {
		out = &CustomerList{}
	} else {
		out, ok = into.(*CustomerList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerPersonalInfo) Clone(into interface{}) (interface{}, error) {
	var out *CustomerPersonalInfo
	var ok bool
	if into == nil {
		out = &CustomerPersonalInfo{}
	} else {
		out, ok = into.(*CustomerPersonalInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerPersonalInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerSpec) Clone(into interface{}) (interface{}, error) {
	var out *CustomerSpec
	var ok bool
	if into == nil {
		out = &CustomerSpec{}
	} else {
		out, ok = into.(*CustomerSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerStatus) Clone(into interface{}) (interface{}, error) {
	var out *CustomerStatus
	var ok bool
	if into == nil {
		out = &CustomerStatus{}
	} else {
		out, ok = into.(*CustomerStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Order) Clone(into interface{}) (interface{}, error) {
	var out *Order
	var ok bool
	if into == nil {
		out = &Order{}
	} else {
		out, ok = into.(*Order)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Order) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	ret = ret || m.Status.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderItem) Clone(into interface{}) (interface{}, error) {
	var out *OrderItem
	var ok bool
	if into == nil {
		out = &OrderItem{}
	} else {
		out, ok = into.(*OrderItem)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderItem) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderList) Clone(into interface{}) (interface{}, error) {
	var out *OrderList
	var ok bool
	if into == nil {
		out = &OrderList{}
	} else {
		out, ok = into.(*OrderList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderSpec) Clone(into interface{}) (interface{}, error) {
	var out *OrderSpec
	var ok bool
	if into == nil {
		out = &OrderSpec{}
	} else {
		out, ok = into.(*OrderSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Order {
		if m.Order[k] != nil {
			ret = ret || m.Order[k].Defaults(ver)
		}
	}
	ret = true
	switch ver {
	default:
		m.Id = "unknown order"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderStatus) Clone(into interface{}) (interface{}, error) {
	var out *OrderStatus
	var ok bool
	if into == nil {
		out = &OrderStatus{}
	} else {
		out, ok = into.(*OrderStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Filled {
		if m.Filled[k] != nil {
			ret = ret || m.Filled[k].Defaults(ver)
		}
	}
	ret = true
	switch ver {
	default:
		m.Status = OrderStatus_OrderStatus_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OutageRequest) Clone(into interface{}) (interface{}, error) {
	var out *OutageRequest
	var ok bool
	if into == nil {
		out = &OutageRequest{}
	} else {
		out, ok = into.(*OutageRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *OutageRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Publisher) Clone(into interface{}) (interface{}, error) {
	var out *Publisher
	var ok bool
	if into == nil {
		out = &Publisher{}
	} else {
		out, ok = into.(*Publisher)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Publisher) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PublisherList) Clone(into interface{}) (interface{}, error) {
	var out *PublisherList
	var ok bool
	if into == nil {
		out = &PublisherList{}
	} else {
		out, ok = into.(*PublisherList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PublisherList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PublisherSpec) Clone(into interface{}) (interface{}, error) {
	var out *PublisherSpec
	var ok bool
	if into == nil {
		out = &PublisherSpec{}
	} else {
		out, ok = into.(*PublisherSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PublisherSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RestockRequest) Clone(into interface{}) (interface{}, error) {
	var out *RestockRequest
	var ok bool
	if into == nil {
		out = &RestockRequest{}
	} else {
		out, ok = into.(*RestockRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *RestockRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RestockResponse) Clone(into interface{}) (interface{}, error) {
	var out *RestockResponse
	var ok bool
	if into == nil {
		out = &RestockResponse{}
	} else {
		out, ok = into.(*RestockResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *RestockResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Store) Clone(into interface{}) (interface{}, error) {
	var out *Store
	var ok bool
	if into == nil {
		out = &Store{}
	} else {
		out, ok = into.(*Store)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Store) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreList) Clone(into interface{}) (interface{}, error) {
	var out *StoreList
	var ok bool
	if into == nil {
		out = &StoreList{}
	} else {
		out, ok = into.(*StoreList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreSpec) Clone(into interface{}) (interface{}, error) {
	var out *StoreSpec
	var ok bool
	if into == nil {
		out = &StoreSpec{}
	} else {
		out, ok = into.(*StoreSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreStatus) Clone(into interface{}) (interface{}, error) {
	var out *StoreStatus
	var ok bool
	if into == nil {
		out = &StoreStatus{}
	} else {
		out, ok = into.(*StoreStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *ApplyDiscountReq) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgBookWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgCouponWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgCustomerWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgOrderWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgPublisherWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgStoreWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Book) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *BookEdition) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *BookList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *BookSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapExample["BookSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapExample["BookSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *BookStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Coupon) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *CouponList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Customer) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *CustomerList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *CustomerPersonalInfo) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *CustomerSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapExample["CustomerSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapExample["CustomerSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *CustomerStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Order) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *OrderItem) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapExample["OrderItem"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapExample["OrderItem"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *OrderList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *OrderSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *OrderStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Filled {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := validatorMapExample["OrderStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapExample["OrderStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *OutageRequest) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Publisher) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *PublisherList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *PublisherSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapExample["PublisherSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapExample["PublisherSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *RestockRequest) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *RestockResponse) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Store) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StoreList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StoreSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StoreStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

// Transformers

func (m *AutoMsgCustomerWatchHelper) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Object == nil {
		return nil
	}
	if err := m.Object.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Customer) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

type storageCustomerTransformer struct{}

var StorageCustomerTransformer storageCustomerTransformer

func (st *storageCustomerTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Customer)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageCustomerTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Customer)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *CustomerList) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Items {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Items[i] = &c
	}
	return nil
}

func (m *CustomerPersonalInfo) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if vs, ok := storageTransformersMapExample["CustomerPersonalInfo"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func (m *CustomerSpec) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if err := m.PasswordRecoveryInfo.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	if vs, ok := storageTransformersMapExample["CustomerSpec"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func init() {

	validatorMapExample = make(map[string]map[string][]func(interface{}) bool)

	validatorMapExample["BookSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapExample["BookSpec"]["all"] = append(validatorMapExample["BookSpec"]["all"], func(i interface{}) bool {
		m := i.(*BookSpec)

		if _, ok := BookSpec_BookCategories_value[m.Category]; !ok {
			return false
		}
		return true
	})

	validatorMapExample["CustomerSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapExample["CustomerSpec"]["all"] = append(validatorMapExample["CustomerSpec"]["all"], func(i interface{}) bool {
		m := i.(*CustomerSpec)
		args := make([]string, 0)
		args = append(args, "3")
		args = append(args, "16")

		for _, v := range m.CreditCardNumbers {
			if !validators.StrLen(v, args) {
				return false
			}
		}
		return true
	})

	validatorMapExample["OrderItem"] = make(map[string][]func(interface{}) bool)
	validatorMapExample["OrderItem"]["all"] = append(validatorMapExample["OrderItem"]["all"], func(i interface{}) bool {
		m := i.(*OrderItem)
		args := make([]string, 0)
		args = append(args, "3")
		args = append(args, "10")

		if !validators.StrLen(m.ISBNId, args) {
			return false
		}
		return true
	})

	validatorMapExample["OrderItem"]["all"] = append(validatorMapExample["OrderItem"]["all"], func(i interface{}) bool {
		m := i.(*OrderItem)
		args := make([]string, 0)
		args = append(args, "2")
		args = append(args, "30")

		if !validators.IntRange(m.Quantity, args) {
			return false
		}
		return true
	})

	validatorMapExample["OrderStatus"] = make(map[string][]func(interface{}) bool)
	validatorMapExample["OrderStatus"]["all"] = append(validatorMapExample["OrderStatus"]["all"], func(i interface{}) bool {
		m := i.(*OrderStatus)

		if _, ok := OrderStatus_OrderStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	validatorMapExample["PublisherSpec"] = make(map[string][]func(interface{}) bool)

	validatorMapExample["PublisherSpec"]["all"] = append(validatorMapExample["PublisherSpec"]["all"], func(i interface{}) bool {
		m := i.(*PublisherSpec)
		if !validators.URI(m.WebAddr) {
			return false
		}
		return true
	})
	validatorMapExample["PublisherSpec"]["all"] = append(validatorMapExample["PublisherSpec"]["all"], func(i interface{}) bool {
		m := i.(*PublisherSpec)
		args := make([]string, 0)
		args = append(args, "6")
		args = append(args, "256")

		if !validators.StrLen(m.WebAddr, args) {
			return false
		}
		return true
	})

	{
		CustomerPersonalInfoMotherMaidenNameTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoMotherMaidenNameTx.TransformToStorage(ctx, []byte(m.MotherMaidenName))
				} else {
					data, err = CustomerPersonalInfoMotherMaidenNameTx.TransformFromStorage(ctx, []byte(m.MotherMaidenName))
				}
				m.MotherMaidenName = string(data)

				return err
			})
	}

	{
		CustomerPersonalInfoSSNTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoSSNTx.TransformToStorage(ctx, []byte(m.SSN))
				} else {
					data, err = CustomerPersonalInfoSSNTx.TransformFromStorage(ctx, []byte(m.SSN))
				}
				m.SSN = string(data)

				return err
			})
	}

	{
		CustomerPersonalInfoSSNTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoSSNTx.TransformToStorage(ctx, []byte(m.SSN))
				} else {
					data, err = CustomerPersonalInfoSSNTx.TransformFromStorage(ctx, []byte(m.SSN))
				}
				m.SSN = string(data)

				return err
			})
	}

	{
		CustomerSpecCreditCardNumbersTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerSpec"] = append(storageTransformersMapExample["CustomerSpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerSpec)

				slice := make([]string, 0)
				for _, v := range m.CreditCardNumbers {
					if toStorage {
						data, err = CustomerSpecCreditCardNumbersTx.TransformToStorage(ctx, []byte(v))
					} else {
						data, err = CustomerSpecCreditCardNumbersTx.TransformFromStorage(ctx, []byte(v))
					}
					if err != nil {
						return err
					}
					if data != nil {
						slice = append(slice, string(data))
					}
				}
				m.CreditCardNumbers = slice

				return err
			})
	}

	{
		CustomerSpecPasswordTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerSpec"] = append(storageTransformersMapExample["CustomerSpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerSpec)

				if toStorage {
					data, err = CustomerSpecPasswordTx.TransformToStorage(ctx, []byte(m.Password))
				} else {
					data, err = CustomerSpecPasswordTx.TransformFromStorage(ctx, []byte(m.Password))
				}
				m.Password = []byte(data)

				return err
			})
	}

}
