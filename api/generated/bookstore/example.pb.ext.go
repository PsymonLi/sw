// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstore is a auto generated package.
Input file: example.proto
*/
package bookstore

import (
	"context"
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pensando/sw/venice/utils/transformers/storage"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// BookSpec_BookCategories_normal is a map of normalized values for the enum
var BookSpec_BookCategories_normal = map[string]string{
	"ChildrensLit": "ChildrensLit",
	"Fiction":      "Fiction",
	"NonFiction":   "NonFiction",
	"YoungAdult":   "YoungAdult",
	"childrenslit": "ChildrensLit",
	"fiction":      "Fiction",
	"nonfiction":   "NonFiction",
	"youngadult":   "YoungAdult",
}

// OrderStatus_OrderStatus_normal is a map of normalized values for the enum
var OrderStatus_OrderStatus_normal = map[string]string{
	"COMPLETED":  "COMPLETED",
	"CREATED":    "CREATED",
	"DISCOUNTED": "DISCOUNTED",
	"FILLED":     "FILLED",
	"PROCESSING": "PROCESSING",
	"SHIPPED":    "SHIPPED",
	"completed":  "COMPLETED",
	"created":    "CREATED",
	"discounted": "DISCOUNTED",
	"filled":     "FILLED",
	"processing": "PROCESSING",
	"shipped":    "SHIPPED",
}

var _ validators.DummyVar
var validatorMapExample = make(map[string]map[string][]func(string, interface{}) error)

var storageTransformersMapExample = make(map[string][]func(ctx context.Context, i interface{}, toStorage bool) error)

// MakeKey generates a KV store key for the object
func (m *ApplyDiscountReq) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "orders/", m.Name)
}

func (m *ApplyDiscountReq) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/orders/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Book) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "books/", m.Name)
}

func (m *Book) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/books/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Coupon) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "Coupon/", m.Name)
}

func (m *Coupon) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/Coupon/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Customer) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "customers/", m.Name)
}

func (m *Customer) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/customers/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Order) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "orders/", m.Name)
}

func (m *Order) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/orders/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *OutageRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "Store/", m.Name)
}

func (m *OutageRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/Store/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Publisher) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "publishers/", m.Name)
}

func (m *Publisher) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/publishers/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *RestockRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "Book/", m.Name)
}

func (m *RestockRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/Book/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *RestockResponse) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "Book/", m.Name)
}

func (m *RestockResponse) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/Book/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Store) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "store", "/Singleton")
}

func (m *Store) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/store")
}

// MakeKey generates a KV store key for the object
func (m *BookList) MakeKey(prefix string) string {
	obj := Book{}
	return obj.MakeKey(prefix)
}

func (m *BookList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *CouponList) MakeKey(prefix string) string {
	obj := Coupon{}
	return obj.MakeKey(prefix)
}

func (m *CouponList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *CustomerList) MakeKey(prefix string) string {
	obj := Customer{}
	return obj.MakeKey(prefix)
}

func (m *CustomerList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *OrderList) MakeKey(prefix string) string {
	obj := Order{}
	return obj.MakeKey(prefix)
}

func (m *OrderList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *PublisherList) MakeKey(prefix string) string {
	obj := Publisher{}
	return obj.MakeKey(prefix)
}

func (m *PublisherList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *StoreList) MakeKey(prefix string) string {
	obj := Store{}
	return obj.MakeKey(prefix)
}

func (m *StoreList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgBookWatchHelper) MakeKey(prefix string) string {
	obj := Book{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgCouponWatchHelper) MakeKey(prefix string) string {
	obj := Coupon{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgCustomerWatchHelper) MakeKey(prefix string) string {
	obj := Customer{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgOrderWatchHelper) MakeKey(prefix string) string {
	obj := Order{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgPublisherWatchHelper) MakeKey(prefix string) string {
	obj := Publisher{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgStoreWatchHelper) MakeKey(prefix string) string {
	obj := Store{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *ApplyDiscountReq) Clone(into interface{}) (interface{}, error) {
	var out *ApplyDiscountReq
	var ok bool
	if into == nil {
		out = &ApplyDiscountReq{}
	} else {
		out, ok = into.(*ApplyDiscountReq)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ApplyDiscountReq))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ApplyDiscountReq) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgBookWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgBookWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgBookWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgBookWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgBookWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgBookWatchHelper) Defaults(ver string) bool {
	var ret bool
	for k := range m.Events {
		if m.Events[k] != nil {
			i := m.Events[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgBookWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgBookWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgBookWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgBookWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgBookWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgBookWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCouponWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCouponWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgCouponWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgCouponWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgCouponWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCouponWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCouponWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCouponWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgCouponWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgCouponWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgCouponWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCouponWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCustomerWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCustomerWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgCustomerWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgCustomerWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgCustomerWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCustomerWatchHelper) Defaults(ver string) bool {
	var ret bool
	for k := range m.Events {
		if m.Events[k] != nil {
			i := m.Events[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgCustomerWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgCustomerWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgCustomerWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgCustomerWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgCustomerWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgCustomerWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgOrderWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgOrderWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgOrderWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgOrderWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgOrderWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgOrderWatchHelper) Defaults(ver string) bool {
	var ret bool
	for k := range m.Events {
		if m.Events[k] != nil {
			i := m.Events[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgOrderWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgOrderWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgOrderWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgOrderWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgOrderWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgOrderWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgPublisherWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgPublisherWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgPublisherWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgPublisherWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgPublisherWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgPublisherWatchHelper) Defaults(ver string) bool {
	var ret bool
	for k := range m.Events {
		if m.Events[k] != nil {
			i := m.Events[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgPublisherWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgPublisherWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgPublisherWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgPublisherWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgPublisherWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgPublisherWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgStoreWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgStoreWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgStoreWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgStoreWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgStoreWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgStoreWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgStoreWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgStoreWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgStoreWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgStoreWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgStoreWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgStoreWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Book) Clone(into interface{}) (interface{}, error) {
	var out *Book
	var ok bool
	if into == nil {
		out = &Book{}
	} else {
		out, ok = into.(*Book)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Book))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Book) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Book"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookEdition) Clone(into interface{}) (interface{}, error) {
	var out *BookEdition
	var ok bool
	if into == nil {
		out = &BookEdition{}
	} else {
		out, ok = into.(*BookEdition)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BookEdition))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookEdition) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Errata = "None"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookList) Clone(into interface{}) (interface{}, error) {
	var out *BookList
	var ok bool
	if into == nil {
		out = &BookList{}
	} else {
		out, ok = into.(*BookList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BookList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookReview) Clone(into interface{}) (interface{}, error) {
	var out *BookReview
	var ok bool
	if into == nil {
		out = &BookReview{}
	} else {
		out, ok = into.(*BookReview)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BookReview))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookReview) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BookSpec) Clone(into interface{}) (interface{}, error) {
	var out *BookSpec
	var ok bool
	if into == nil {
		out = &BookSpec{}
	} else {
		out, ok = into.(*BookSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BookSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Editions {
		if m.Editions[k] != nil {
			i := m.Editions[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Category = "YoungAdult"

	case "v1":
		m.Category = "ChildrensLit"
		m.IdProvider = "TestProvider"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BookStatus) Clone(into interface{}) (interface{}, error) {
	var out *BookStatus
	var ok bool
	if into == nil {
		out = &BookStatus{}
	} else {
		out, ok = into.(*BookStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BookStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BookStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Coupon) Clone(into interface{}) (interface{}, error) {
	var out *Coupon
	var ok bool
	if into == nil {
		out = &Coupon{}
	} else {
		out, ok = into.(*Coupon)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Coupon))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Coupon) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CouponList) Clone(into interface{}) (interface{}, error) {
	var out *CouponList
	var ok bool
	if into == nil {
		out = &CouponList{}
	} else {
		out, ok = into.(*CouponList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CouponList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CouponList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CouponSpec) Clone(into interface{}) (interface{}, error) {
	var out *CouponSpec
	var ok bool
	if into == nil {
		out = &CouponSpec{}
	} else {
		out, ok = into.(*CouponSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CouponSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CouponSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Customer) Clone(into interface{}) (interface{}, error) {
	var out *Customer
	var ok bool
	if into == nil {
		out = &Customer{}
	} else {
		out, ok = into.(*Customer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Customer))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Customer) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Customer"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerList) Clone(into interface{}) (interface{}, error) {
	var out *CustomerList
	var ok bool
	if into == nil {
		out = &CustomerList{}
	} else {
		out, ok = into.(*CustomerList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CustomerList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerPersonalInfo) Clone(into interface{}) (interface{}, error) {
	var out *CustomerPersonalInfo
	var ok bool
	if into == nil {
		out = &CustomerPersonalInfo{}
	} else {
		out, ok = into.(*CustomerPersonalInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CustomerPersonalInfo))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerPersonalInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerSpec) Clone(into interface{}) (interface{}, error) {
	var out *CustomerSpec
	var ok bool
	if into == nil {
		out = &CustomerSpec{}
	} else {
		out, ok = into.(*CustomerSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CustomerSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CustomerStatus) Clone(into interface{}) (interface{}, error) {
	var out *CustomerStatus
	var ok bool
	if into == nil {
		out = &CustomerStatus{}
	} else {
		out, ok = into.(*CustomerStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CustomerStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CustomerStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Order) Clone(into interface{}) (interface{}, error) {
	var out *Order
	var ok bool
	if into == nil {
		out = &Order{}
	} else {
		out, ok = into.(*Order)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Order))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Order) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Order"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderItem) Clone(into interface{}) (interface{}, error) {
	var out *OrderItem
	var ok bool
	if into == nil {
		out = &OrderItem{}
	} else {
		out, ok = into.(*OrderItem)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrderItem))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderItem) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderList) Clone(into interface{}) (interface{}, error) {
	var out *OrderList
	var ok bool
	if into == nil {
		out = &OrderList{}
	} else {
		out, ok = into.(*OrderList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrderList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderSpec) Clone(into interface{}) (interface{}, error) {
	var out *OrderSpec
	var ok bool
	if into == nil {
		out = &OrderSpec{}
	} else {
		out, ok = into.(*OrderSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrderSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Order {
		if m.Order[k] != nil {
			i := m.Order[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Id = "unknown order"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OrderStatus) Clone(into interface{}) (interface{}, error) {
	var out *OrderStatus
	var ok bool
	if into == nil {
		out = &OrderStatus{}
	} else {
		out, ok = into.(*OrderStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OrderStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OrderStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.Filled {
		if m.Filled[k] != nil {
			i := m.Filled[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Status = "CREATED"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *OutageRequest) Clone(into interface{}) (interface{}, error) {
	var out *OutageRequest
	var ok bool
	if into == nil {
		out = &OutageRequest{}
	} else {
		out, ok = into.(*OutageRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*OutageRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *OutageRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Publisher) Clone(into interface{}) (interface{}, error) {
	var out *Publisher
	var ok bool
	if into == nil {
		out = &Publisher{}
	} else {
		out, ok = into.(*Publisher)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Publisher))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Publisher) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Publisher"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PublisherList) Clone(into interface{}) (interface{}, error) {
	var out *PublisherList
	var ok bool
	if into == nil {
		out = &PublisherList{}
	} else {
		out, ok = into.(*PublisherList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PublisherList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PublisherList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			i := m.Items[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PublisherSpec) Clone(into interface{}) (interface{}, error) {
	var out *PublisherSpec
	var ok bool
	if into == nil {
		out = &PublisherSpec{}
	} else {
		out, ok = into.(*PublisherSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PublisherSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PublisherSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PublisherStatus) Clone(into interface{}) (interface{}, error) {
	var out *PublisherStatus
	var ok bool
	if into == nil {
		out = &PublisherStatus{}
	} else {
		out, ok = into.(*PublisherStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PublisherStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PublisherStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RestockRequest) Clone(into interface{}) (interface{}, error) {
	var out *RestockRequest
	var ok bool
	if into == nil {
		out = &RestockRequest{}
	} else {
		out, ok = into.(*RestockRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RestockRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RestockRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *RestockResponse) Clone(into interface{}) (interface{}, error) {
	var out *RestockResponse
	var ok bool
	if into == nil {
		out = &RestockResponse{}
	} else {
		out, ok = into.(*RestockResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RestockResponse))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RestockResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Store) Clone(into interface{}) (interface{}, error) {
	var out *Store
	var ok bool
	if into == nil {
		out = &Store{}
	} else {
		out, ok = into.(*Store)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Store))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Store) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Store"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreList) Clone(into interface{}) (interface{}, error) {
	var out *StoreList
	var ok bool
	if into == nil {
		out = &StoreList{}
	} else {
		out, ok = into.(*StoreList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*StoreList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreSpec) Clone(into interface{}) (interface{}, error) {
	var out *StoreSpec
	var ok bool
	if into == nil {
		out = &StoreSpec{}
	} else {
		out, ok = into.(*StoreSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*StoreSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StoreStatus) Clone(into interface{}) (interface{}, error) {
	var out *StoreStatus
	var ok bool
	if into == nil {
		out = &StoreStatus{}
	} else {
		out, ok = into.(*StoreStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*StoreStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *StoreStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *UnusedMessage) Clone(into interface{}) (interface{}, error) {
	var out *UnusedMessage
	var ok bool
	if into == nil {
		out = &UnusedMessage{}
	} else {
		out, ok = into.(*UnusedMessage)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*UnusedMessage))
	return out, nil
}

// Default sets up the defaults for the object
func (m *UnusedMessage) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *ApplyDiscountReq) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ApplyDiscountReq) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *ApplyDiscountReq) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *AutoMsgBookWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "events"

		for _, v := range m.Events {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *AutoMsgBookWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgBookWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgBookWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "object"

		if m.Object != nil {
			m.Object.References(tenant, tag, resp)
		}

	}
}

func (m *AutoMsgBookWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgBookWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgCouponWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgCouponWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgCouponWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgCouponWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgCouponWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgCustomerWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "events"

		for _, v := range m.Events {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *AutoMsgCustomerWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgCustomerWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "object"

		if m.Object != nil {
			m.Object.References(tenant, tag, resp)
		}

	}
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgOrderWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "events"

		for _, v := range m.Events {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *AutoMsgOrderWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgOrderWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgOrderWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "object"

		if m.Object != nil {
			m.Object.References(tenant, tag, resp)
		}

	}
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgPublisherWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgPublisherWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgPublisherWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgStoreWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgStoreWatchHelper) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgStoreWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgStoreWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgStoreWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *Book) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
}

func (m *Book) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Book"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Book"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Book) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *BookEdition) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BookEdition) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapExample["BookEdition"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["BookEdition"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *BookEdition) Normalize() {

}

func (m *BookList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "items"

		for _, v := range m.Items {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *BookList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *BookList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *BookReview) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BookReview) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *BookReview) Normalize() {

}

func (m *BookSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Publisher"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Publisher != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/bookstore/"+"publishers/"+m.Publisher)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *BookSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Editions {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEditions[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapExample["BookSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["BookSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *BookSpec) Normalize() {

	m.Category = BookSpec_BookCategories_normal[strings.ToLower(m.Category)]

	for _, v := range m.Editions {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *BookStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BookStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *BookStatus) Normalize() {

}

func (m *Coupon) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Coupon) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *Coupon) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *CouponList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CouponList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *CouponList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *CouponSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CouponSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *CouponSpec) Normalize() {

}

func (m *Customer) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Status"

		m.Status.References(tenant, tag, resp)

	}
}

func (m *Customer) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Customer"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Customer"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Customer) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *CustomerList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "items"

		for _, v := range m.Items {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *CustomerList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *CustomerList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *CustomerPersonalInfo) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CustomerPersonalInfo) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *CustomerPersonalInfo) Normalize() {

}

func (m *CustomerSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CustomerSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapExample["CustomerSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["CustomerSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *CustomerSpec) Normalize() {

}

func (m *CustomerStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "interests"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("SelectorRef"),
			}
		}

		if m.Interests != "" {
			uref.Refs = append(uref.Refs, "labels:bookstore:Book:"+tenant+":"+m.Interests)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *CustomerStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *CustomerStatus) Normalize() {

}

func (m *Order) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Status"

		m.Status.References(tenant, tag, resp)

	}
}

func (m *Order) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Order"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Order"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Order) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *OrderItem) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "books"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("WeakRef"),
			}
		}

		if m.Book != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/bookstore/"+"books/"+m.Book)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *OrderItem) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapExample["OrderItem"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["OrderItem"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrderItem) Normalize() {

}

func (m *OrderList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "items"

		for _, v := range m.Items {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *OrderList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *OrderList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *OrderSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Order"

		for _, v := range m.Order {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *OrderSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Order {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sOrder[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *OrderSpec) Normalize() {

	for _, v := range m.Order {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *OrderStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "Filled"

		for _, v := range m.Filled {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *OrderStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Filled {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sFilled[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapExample["OrderStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["OrderStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *OrderStatus) Normalize() {

	for _, v := range m.Filled {
		if v != nil {
			v.Normalize()
		}
	}

	m.Status = OrderStatus_OrderStatus_normal[strings.ToLower(m.Status)]

}

func (m *OutageRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *OutageRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *OutageRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *Publisher) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Publisher) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Publisher"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Publisher"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Publisher) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *PublisherList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PublisherList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *PublisherList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *PublisherSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PublisherSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapExample["PublisherSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExample["PublisherSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *PublisherSpec) Normalize() {

}

func (m *PublisherStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PublisherStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *PublisherStatus) Normalize() {

}

func (m *RestockRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RestockRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *RestockRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *RestockResponse) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RestockResponse) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *RestockResponse) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *Store) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Store) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Store"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Store"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Store) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *StoreList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *StoreList) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *StoreList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *StoreSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *StoreSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *StoreSpec) Normalize() {

}

func (m *StoreStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *StoreStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *StoreStatus) Normalize() {

}

func (m *UnusedMessage) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *UnusedMessage) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *UnusedMessage) Normalize() {

}

// Transformers

func (m *AutoMsgCustomerWatchHelper) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Events {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Events[i] = &c
	}
	return nil
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if m.Object == nil {
		return nil
	}
	if err := m.Object.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

func (m *Customer) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if err := m.Spec.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	return nil
}

type storageCustomerTransformer struct{}

var StorageCustomerTransformer storageCustomerTransformer

func (st *storageCustomerTransformer) TransformFromStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Customer)
	err := r.ApplyStorageTransformer(ctx, false)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (st *storageCustomerTransformer) TransformToStorage(ctx context.Context, i interface{}) (interface{}, error) {
	r := i.(Customer)
	err := r.ApplyStorageTransformer(ctx, true)
	if err != nil {
		return nil, err
	}
	return r, nil
}

func (m *CustomerList) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	for i, v := range m.Items {
		c := *v
		if err := c.ApplyStorageTransformer(ctx, toStorage); err != nil {
			return err
		}
		m.Items[i] = &c
	}
	return nil
}

func (m *CustomerPersonalInfo) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {
	if vs, ok := storageTransformersMapExample["CustomerPersonalInfo"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func (m *CustomerSpec) ApplyStorageTransformer(ctx context.Context, toStorage bool) error {

	if err := m.PasswordRecoveryInfo.ApplyStorageTransformer(ctx, toStorage); err != nil {
		return err
	}
	if vs, ok := storageTransformersMapExample["CustomerSpec"]; ok {
		for _, v := range vs {
			if err := v(ctx, m, toStorage); err != nil {
				return err
			}
		}
	}
	return nil
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&ApplyDiscountReq{},
		&Book{},
		&Coupon{},
		&Customer{},
		&Order{},
		&OutageRequest{},
		&Publisher{},
		&RestockRequest{},
		&RestockResponse{},
		&Store{},
	)

	validatorMapExample = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapExample["BookEdition"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["BookEdition"]["all"] = append(validatorMapExample["BookEdition"]["all"], func(path string, i interface{}) error {
		m := i.(*BookEdition)
		args := make([]string, 0)
		args = append(args, "4")
		args = append(args, "4")

		if err := validators.StrLen(m.Year, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Year", err.Error())
		}
		return nil
	})

	validatorMapExample["BookSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["BookSpec"]["all"] = append(validatorMapExample["BookSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*BookSpec)

		if _, ok := BookSpec_BookCategories_value[m.Category]; !ok {
			vals := []string{}
			for k1, _ := range BookSpec_BookCategories_value {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Category", vals)
		}
		return nil
	})

	validatorMapExample["CustomerSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["CustomerSpec"]["all"] = append(validatorMapExample["CustomerSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*CustomerSpec)
		args := make([]string, 0)
		args = append(args, "3")
		args = append(args, "16")

		for _, v := range m.CreditCardNumbers {
			if err := validators.StrLen(v, args); err != nil {
				return fmt.Errorf("%v failed validation: %s", path+"."+"CreditCardNumbers", err.Error())
			}
		}
		return nil
	})

	validatorMapExample["OrderItem"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["OrderItem"]["all"] = append(validatorMapExample["OrderItem"]["all"], func(path string, i interface{}) error {
		m := i.(*OrderItem)
		args := make([]string, 0)
		args = append(args, "3")
		args = append(args, "10")

		if err := validators.StrLen(m.ISBNId, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"ISBNId", err.Error())
		}
		return nil
	})

	validatorMapExample["OrderItem"]["all"] = append(validatorMapExample["OrderItem"]["all"], func(path string, i interface{}) error {
		m := i.(*OrderItem)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "30")

		if err := validators.IntRange(m.Quantity, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Quantity", err.Error())
		}
		return nil
	})

	validatorMapExample["OrderStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["OrderStatus"]["all"] = append(validatorMapExample["OrderStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*OrderStatus)

		if _, ok := OrderStatus_OrderStatus_value[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range OrderStatus_OrderStatus_value {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

	validatorMapExample["PublisherSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapExample["PublisherSpec"]["all"] = append(validatorMapExample["PublisherSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*PublisherSpec)
		args := make([]string, 0)
		args = append(args, "alphanum")

		if err := validators.RegExp(m.Id, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Id", err.Error())
		}
		return nil
	})

	validatorMapExample["PublisherSpec"]["all"] = append(validatorMapExample["PublisherSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*PublisherSpec)
		if err := validators.URI(m.WebAddr); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"WebAddr", err.Error())
		}
		return nil
	})
	validatorMapExample["PublisherSpec"]["all"] = append(validatorMapExample["PublisherSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*PublisherSpec)
		args := make([]string, 0)
		args = append(args, "6")
		args = append(args, "256")

		if err := validators.StrLen(m.WebAddr, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"WebAddr", err.Error())
		}
		return nil
	})

	{
		CustomerPersonalInfoMotherMaidenNameTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoMotherMaidenNameTx.TransformToStorage(ctx, []byte(m.MotherMaidenName))
				} else {
					data, err = CustomerPersonalInfoMotherMaidenNameTx.TransformFromStorage(ctx, []byte(m.MotherMaidenName))
				}
				m.MotherMaidenName = string(data)

				return err
			})
	}

	{
		CustomerPersonalInfoSSNTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoSSNTx.TransformToStorage(ctx, []byte(m.SSN))
				} else {
					data, err = CustomerPersonalInfoSSNTx.TransformFromStorage(ctx, []byte(m.SSN))
				}
				m.SSN = string(data)

				return err
			})
	}

	{
		CustomerPersonalInfoSSNTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerPersonalInfo"] = append(storageTransformersMapExample["CustomerPersonalInfo"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerPersonalInfo)

				if toStorage {
					data, err = CustomerPersonalInfoSSNTx.TransformToStorage(ctx, []byte(m.SSN))
				} else {
					data, err = CustomerPersonalInfoSSNTx.TransformFromStorage(ctx, []byte(m.SSN))
				}
				m.SSN = string(data)

				return err
			})
	}

	{
		CustomerSpecCreditCardNumbersTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerSpec"] = append(storageTransformersMapExample["CustomerSpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerSpec)

				slice := make([]string, 0)
				for _, v := range m.CreditCardNumbers {
					if toStorage {
						data, err = CustomerSpecCreditCardNumbersTx.TransformToStorage(ctx, []byte(v))
					} else {
						data, err = CustomerSpecCreditCardNumbersTx.TransformFromStorage(ctx, []byte(v))
					}
					if err != nil {
						return err
					}
					if data != nil {
						slice = append(slice, string(data))
					}
				}
				m.CreditCardNumbers = slice

				return err
			})
	}

	{
		CustomerSpecPasswordTx, err := storage.NewSecretValueTransformer()
		if err != nil {
			log.Fatalf("Error instantiating SecretStorageTransformer: %v", err)
		}
		storageTransformersMapExample["CustomerSpec"] = append(storageTransformersMapExample["CustomerSpec"],
			func(ctx context.Context, i interface{}, toStorage bool) error {
				var data []byte
				var err error
				m := i.(*CustomerSpec)

				if toStorage {
					data, err = CustomerSpecPasswordTx.TransformToStorage(ctx, []byte(m.Password))
				} else {
					data, err = CustomerSpecPasswordTx.TransformFromStorage(ctx, []byte(m.Password))
				}
				m.Password = []byte(data)

				return err
			})
	}

}
