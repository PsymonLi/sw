// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example.proto

/*
	Package bookstore is a generated protocol buffer package.

	It is generated from these files:
		example.proto

	It has these top-level messages:
		ApplyDiscountReq
		AutoMsgBookWatchHelper
		AutoMsgCouponWatchHelper
		AutoMsgCustomerWatchHelper
		AutoMsgOrderWatchHelper
		AutoMsgPublisherWatchHelper
		AutoMsgStoreWatchHelper
		Book
		BookEdition
		BookList
		BookReview
		BookSpec
		BookStatus
		Coupon
		CouponList
		Customer
		CustomerList
		CustomerPersonalInfo
		CustomerSpec
		CustomerStatus
		Order
		OrderItem
		OrderList
		OrderSpec
		OrderStatus
		OutageRequest
		Publisher
		PublisherList
		PublisherSpec
		RestockRequest
		RestockResponse
		Store
		StoreList
		StoreSpec
		StoreStatus
*/
package bookstore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type BookSpec_BookCategories int32

const (
	// ui-hint: Childrens Literature
	BookSpec_ChildrensLit BookSpec_BookCategories = 0
	// ui-hint: Young Adult
	BookSpec_YoungAdult BookSpec_BookCategories = 1
	//
	BookSpec_Fiction BookSpec_BookCategories = 2
	// ui-hint: Non Fiction
	BookSpec_NonFiction BookSpec_BookCategories = 3
)

var BookSpec_BookCategories_name = map[int32]string{
	0: "ChildrensLit",
	1: "YoungAdult",
	2: "Fiction",
	3: "NonFiction",
}
var BookSpec_BookCategories_value = map[string]int32{
	"ChildrensLit": 0,
	"YoungAdult":   1,
	"Fiction":      2,
	"NonFiction":   3,
}

func (x BookSpec_BookCategories) String() string {
	return proto.EnumName(BookSpec_BookCategories_name, int32(x))
}
func (BookSpec_BookCategories) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{11, 0}
}

//
type OrderStatus_OrderStatus int32

const (
	//
	OrderStatus_CREATED OrderStatus_OrderStatus = 0
	//
	OrderStatus_PROCESSING OrderStatus_OrderStatus = 1
	//
	OrderStatus_FILLED OrderStatus_OrderStatus = 2
	//
	OrderStatus_SHIPPED OrderStatus_OrderStatus = 3
	//
	OrderStatus_COMPLETED OrderStatus_OrderStatus = 4
	//
	OrderStatus_DISCOUNTED OrderStatus_OrderStatus = 5
)

var OrderStatus_OrderStatus_name = map[int32]string{
	0: "CREATED",
	1: "PROCESSING",
	2: "FILLED",
	3: "SHIPPED",
	4: "COMPLETED",
	5: "DISCOUNTED",
}
var OrderStatus_OrderStatus_value = map[string]int32{
	"CREATED":    0,
	"PROCESSING": 1,
	"FILLED":     2,
	"SHIPPED":    3,
	"COMPLETED":  4,
	"DISCOUNTED": 5,
}

func (x OrderStatus_OrderStatus) String() string {
	return proto.EnumName(OrderStatus_OrderStatus_name, int32(x))
}
func (OrderStatus_OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{24, 0}
}

//
type ApplyDiscountReq struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Coupon string `protobuf:"bytes,3,opt,name=Coupon,proto3" json:"Coupon,omitempty"`
}

func (m *ApplyDiscountReq) Reset()                    { *m = ApplyDiscountReq{} }
func (m *ApplyDiscountReq) String() string            { return proto.CompactTextString(m) }
func (*ApplyDiscountReq) ProtoMessage()               {}
func (*ApplyDiscountReq) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{0} }

func (m *ApplyDiscountReq) GetCoupon() string {
	if m != nil {
		return m.Coupon
	}
	return ""
}

// AutoMsgBookWatchHelper is a wrapper object for watch events for Book objects
type AutoMsgBookWatchHelper struct {
	Events []*AutoMsgBookWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgBookWatchHelper) Reset()                    { *m = AutoMsgBookWatchHelper{} }
func (m *AutoMsgBookWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgBookWatchHelper) ProtoMessage()               {}
func (*AutoMsgBookWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{1} }

func (m *AutoMsgBookWatchHelper) GetEvents() []*AutoMsgBookWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgBookWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Book  `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgBookWatchHelper_WatchEvent) Reset()         { *m = AutoMsgBookWatchHelper_WatchEvent{} }
func (m *AutoMsgBookWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgBookWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgBookWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{1, 0}
}

func (m *AutoMsgBookWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgBookWatchHelper_WatchEvent) GetObject() *Book {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgCouponWatchHelper is a wrapper object for watch events for Coupon objects
type AutoMsgCouponWatchHelper struct {
	Events []*AutoMsgCouponWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgCouponWatchHelper) Reset()                    { *m = AutoMsgCouponWatchHelper{} }
func (m *AutoMsgCouponWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgCouponWatchHelper) ProtoMessage()               {}
func (*AutoMsgCouponWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{2} }

func (m *AutoMsgCouponWatchHelper) GetEvents() []*AutoMsgCouponWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgCouponWatchHelper_WatchEvent struct {
	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Coupon `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) Reset()         { *m = AutoMsgCouponWatchHelper_WatchEvent{} }
func (m *AutoMsgCouponWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCouponWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgCouponWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{2, 0}
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) GetObject() *Coupon {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgCustomerWatchHelper is a wrapper object for watch events for Customer objects
type AutoMsgCustomerWatchHelper struct {
	Events []*AutoMsgCustomerWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgCustomerWatchHelper) Reset()         { *m = AutoMsgCustomerWatchHelper{} }
func (m *AutoMsgCustomerWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCustomerWatchHelper) ProtoMessage()    {}
func (*AutoMsgCustomerWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{3}
}

func (m *AutoMsgCustomerWatchHelper) GetEvents() []*AutoMsgCustomerWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgCustomerWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Customer `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) Reset()         { *m = AutoMsgCustomerWatchHelper_WatchEvent{} }
func (m *AutoMsgCustomerWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCustomerWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgCustomerWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{3, 0}
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) GetObject() *Customer {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgOrderWatchHelper is a wrapper object for watch events for Order objects
type AutoMsgOrderWatchHelper struct {
	Events []*AutoMsgOrderWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgOrderWatchHelper) Reset()                    { *m = AutoMsgOrderWatchHelper{} }
func (m *AutoMsgOrderWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgOrderWatchHelper) ProtoMessage()               {}
func (*AutoMsgOrderWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{4} }

func (m *AutoMsgOrderWatchHelper) GetEvents() []*AutoMsgOrderWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgOrderWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Order `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) Reset()         { *m = AutoMsgOrderWatchHelper_WatchEvent{} }
func (m *AutoMsgOrderWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgOrderWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgOrderWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{4, 0}
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) GetObject() *Order {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgPublisherWatchHelper is a wrapper object for watch events for Publisher objects
type AutoMsgPublisherWatchHelper struct {
	Events []*AutoMsgPublisherWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgPublisherWatchHelper) Reset()         { *m = AutoMsgPublisherWatchHelper{} }
func (m *AutoMsgPublisherWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgPublisherWatchHelper) ProtoMessage()    {}
func (*AutoMsgPublisherWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{5}
}

func (m *AutoMsgPublisherWatchHelper) GetEvents() []*AutoMsgPublisherWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgPublisherWatchHelper_WatchEvent struct {
	Type   string     `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Publisher `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgPublisherWatchHelper_WatchEvent{}
}
func (m *AutoMsgPublisherWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgPublisherWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgPublisherWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{5, 0}
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) GetObject() *Publisher {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgStoreWatchHelper is a wrapper object for watch events for Store objects
type AutoMsgStoreWatchHelper struct {
	Events []*AutoMsgStoreWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgStoreWatchHelper) Reset()                    { *m = AutoMsgStoreWatchHelper{} }
func (m *AutoMsgStoreWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgStoreWatchHelper) ProtoMessage()               {}
func (*AutoMsgStoreWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{6} }

func (m *AutoMsgStoreWatchHelper) GetEvents() []*AutoMsgStoreWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgStoreWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Store `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) Reset()         { *m = AutoMsgStoreWatchHelper_WatchEvent{} }
func (m *AutoMsgStoreWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgStoreWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgStoreWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorExample, []int{6, 0}
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) GetObject() *Store {
	if m != nil {
		return m.Object
	}
	return nil
}

//
type Book struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec BookSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status BookStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{7} }

func (m *Book) GetSpec() BookSpec {
	if m != nil {
		return m.Spec
	}
	return BookSpec{}
}

func (m *Book) GetStatus() BookStatus {
	if m != nil {
		return m.Status
	}
	return BookStatus{}
}

//
type BookEdition struct {
	//
	Errata string `protobuf:"bytes,1,opt,name=Errata,json=errata,proto3" json:"errata"`
	//
	Year string `protobuf:"bytes,2,opt,name=Year,json=year,proto3" json:"year"`
	//
	Reviews map[string]*BookReview `protobuf:"bytes,3,rep,name=Reviews,json=reviews" json:"reviews" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BookEdition) Reset()                    { *m = BookEdition{} }
func (m *BookEdition) String() string            { return proto.CompactTextString(m) }
func (*BookEdition) ProtoMessage()               {}
func (*BookEdition) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{8} }

func (m *BookEdition) GetErrata() string {
	if m != nil {
		return m.Errata
	}
	return ""
}

func (m *BookEdition) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *BookEdition) GetReviews() map[string]*BookReview {
	if m != nil {
		return m.Reviews
	}
	return nil
}

// BookList is a container object for list of Book objects
type BookList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Book objects
	Items []*Book `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *BookList) Reset()                    { *m = BookList{} }
func (m *BookList) String() string            { return proto.CompactTextString(m) }
func (*BookList) ProtoMessage()               {}
func (*BookList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{9} }

func (m *BookList) GetItems() []*Book {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type BookReview struct {
	//
	Date *api.Timestamp `protobuf:"bytes,1,opt,name=Date,json=date" json:"date"`
	//
	Review string `protobuf:"bytes,2,opt,name=Review,json=review,proto3" json:"review"`
}

func (m *BookReview) Reset()                    { *m = BookReview{} }
func (m *BookReview) String() string            { return proto.CompactTextString(m) }
func (*BookReview) ProtoMessage()               {}
func (*BookReview) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{10} }

func (m *BookReview) GetDate() *api.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *BookReview) GetReview() string {
	if m != nil {
		return m.Review
	}
	return ""
}

//
type BookSpec struct {
	//
	ISBNId string `protobuf:"bytes,2,opt,name=ISBNId,proto3" json:"ISBNId,omitempty"`
	//
	Author string `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	// Added in  version 2 of the API.
	IdProvider string `protobuf:"bytes,4,opt,name=IdProvider,proto3" json:"IdProvider,omitempty"`
	//
	Category string `protobuf:"bytes,5,opt,name=Category,proto3" json:"Category,omitempty"`
	// Used for performance monitoring tests
	UpdateTimestamp *api.Timestamp `protobuf:"bytes,6,opt,name=UpdateTimestamp" json:"UpdateTimestamp,omitempty"`
	//
	Terminate bool `protobuf:"varint,7,opt,name=Terminate,proto3" json:"Terminate,omitempty"`
	//
	Editions map[string]*BookEdition `protobuf:"bytes,8,rep,name=Editions,json=editions" json:"editions" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BookSpec) Reset()                    { *m = BookSpec{} }
func (m *BookSpec) String() string            { return proto.CompactTextString(m) }
func (*BookSpec) ProtoMessage()               {}
func (*BookSpec) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{11} }

func (m *BookSpec) GetISBNId() string {
	if m != nil {
		return m.ISBNId
	}
	return ""
}

func (m *BookSpec) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BookSpec) GetIdProvider() string {
	if m != nil {
		return m.IdProvider
	}
	return ""
}

func (m *BookSpec) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *BookSpec) GetUpdateTimestamp() *api.Timestamp {
	if m != nil {
		return m.UpdateTimestamp
	}
	return nil
}

func (m *BookSpec) GetTerminate() bool {
	if m != nil {
		return m.Terminate
	}
	return false
}

func (m *BookSpec) GetEditions() map[string]*BookEdition {
	if m != nil {
		return m.Editions
	}
	return nil
}

//
type BookStatus struct {
	//
	Inventory int32 `protobuf:"varint,1,opt,name=Inventory,proto3" json:"Inventory,omitempty"`
}

func (m *BookStatus) Reset()                    { *m = BookStatus{} }
func (m *BookStatus) String() string            { return proto.CompactTextString(m) }
func (*BookStatus) ProtoMessage()               {}
func (*BookStatus) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{12} }

func (m *BookStatus) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

//
type Coupon struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	DiscountCode string `protobuf:"bytes,3,opt,name=DiscountCode,proto3" json:"DiscountCode,omitempty"`
}

func (m *Coupon) Reset()                    { *m = Coupon{} }
func (m *Coupon) String() string            { return proto.CompactTextString(m) }
func (*Coupon) ProtoMessage()               {}
func (*Coupon) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{13} }

func (m *Coupon) GetDiscountCode() string {
	if m != nil {
		return m.DiscountCode
	}
	return ""
}

// CouponList is a container object for list of Coupon objects
type CouponList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Coupon objects
	Items []*Coupon `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *CouponList) Reset()                    { *m = CouponList{} }
func (m *CouponList) String() string            { return proto.CompactTextString(m) }
func (*CouponList) ProtoMessage()               {}
func (*CouponList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{14} }

func (m *CouponList) GetItems() []*Coupon {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type Customer struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec CustomerSpec `protobuf:"bytes,3,opt,name=Spec" json:"Spec"`
	//
	Status CustomerStatus `protobuf:"bytes,4,opt,name=Status" json:"Status"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{15} }

func (m *Customer) GetSpec() CustomerSpec {
	if m != nil {
		return m.Spec
	}
	return CustomerSpec{}
}

func (m *Customer) GetStatus() CustomerStatus {
	if m != nil {
		return m.Status
	}
	return CustomerStatus{}
}

// CustomerList is a container object for list of Customer objects
type CustomerList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Customer objects
	Items []*Customer `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *CustomerList) Reset()                    { *m = CustomerList{} }
func (m *CustomerList) String() string            { return proto.CompactTextString(m) }
func (*CustomerList) ProtoMessage()               {}
func (*CustomerList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{16} }

func (m *CustomerList) GetItems() []*Customer {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type CustomerPersonalInfo struct {
	//
	SSN string `protobuf:"bytes,1,opt,name=SSN,json=ssn,omitempty,proto3" json:"ssn,omitempty"`
	//
	MotherMaidenName string `protobuf:"bytes,2,opt,name=MotherMaidenName,json=mother-maiden-name,omitempty,proto3" json:"mother-maiden-name,omitempty"`
}

func (m *CustomerPersonalInfo) Reset()                    { *m = CustomerPersonalInfo{} }
func (m *CustomerPersonalInfo) String() string            { return proto.CompactTextString(m) }
func (*CustomerPersonalInfo) ProtoMessage()               {}
func (*CustomerPersonalInfo) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{17} }

func (m *CustomerPersonalInfo) GetSSN() string {
	if m != nil {
		return m.SSN
	}
	return ""
}

func (m *CustomerPersonalInfo) GetMotherMaidenName() string {
	if m != nil {
		return m.MotherMaidenName
	}
	return ""
}

//
type CustomerSpec struct {
	//
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	//
	CreditCardNumbers []string `protobuf:"bytes,2,rep,name=CreditCardNumbers" json:"CreditCardNumbers,omitempty"`
	//
	Password []byte `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	//
	PasswordRecoveryInfo CustomerPersonalInfo `protobuf:"bytes,4,opt,name=PasswordRecoveryInfo" json:"PasswordRecoveryInfo"`
}

func (m *CustomerSpec) Reset()                    { *m = CustomerSpec{} }
func (m *CustomerSpec) String() string            { return proto.CompactTextString(m) }
func (*CustomerSpec) ProtoMessage()               {}
func (*CustomerSpec) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{18} }

func (m *CustomerSpec) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CustomerSpec) GetCreditCardNumbers() []string {
	if m != nil {
		return m.CreditCardNumbers
	}
	return nil
}

func (m *CustomerSpec) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *CustomerSpec) GetPasswordRecoveryInfo() CustomerPersonalInfo {
	if m != nil {
		return m.PasswordRecoveryInfo
	}
	return CustomerPersonalInfo{}
}

//
type CustomerStatus struct {
}

func (m *CustomerStatus) Reset()                    { *m = CustomerStatus{} }
func (m *CustomerStatus) String() string            { return proto.CompactTextString(m) }
func (*CustomerStatus) ProtoMessage()               {}
func (*CustomerStatus) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{19} }

//
type Order struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	// Spec is not allowed to be Null hence disabling nullable.
	Spec OrderSpec `protobuf:"bytes,3,opt,name=Spec" json:"Spec"`
	//
	Status OrderStatus `protobuf:"bytes,4,opt,name=Status" json:"Status"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{20} }

func (m *Order) GetSpec() OrderSpec {
	if m != nil {
		return m.Spec
	}
	return OrderSpec{}
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return OrderStatus{}
}

//
type OrderItem struct {
	//
	ISBNId string `protobuf:"bytes,1,opt,name=ISBNId,proto3" json:"ISBNId,omitempty"`
	//
	Quantity uint32 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{21} }

func (m *OrderItem) GetISBNId() string {
	if m != nil {
		return m.ISBNId
	}
	return ""
}

func (m *OrderItem) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// OrderList is a container object for list of Order objects
type OrderList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Order objects
	Items []*Order `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *OrderList) Reset()                    { *m = OrderList{} }
func (m *OrderList) String() string            { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()               {}
func (*OrderList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{22} }

func (m *OrderList) GetItems() []*Order {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type OrderSpec struct {
	//
	Id string `protobuf:"bytes,1,opt,name=Id,json=,omitempty,proto3" json:",omitempty"`
	//
	Order []*OrderItem `protobuf:"bytes,2,rep,name=Order" json:"Order,omitempty"`
}

func (m *OrderSpec) Reset()                    { *m = OrderSpec{} }
func (m *OrderSpec) String() string            { return proto.CompactTextString(m) }
func (*OrderSpec) ProtoMessage()               {}
func (*OrderSpec) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{23} }

func (m *OrderSpec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderSpec) GetOrder() []*OrderItem {
	if m != nil {
		return m.Order
	}
	return nil
}

//
type OrderStatus struct {
	//
	Status string `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	//
	Filled []*OrderSpec `protobuf:"bytes,4,rep,name=Filled" json:"Filled,omitempty"`
	//
	Message string `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *OrderStatus) Reset()                    { *m = OrderStatus{} }
func (m *OrderStatus) String() string            { return proto.CompactTextString(m) }
func (*OrderStatus) ProtoMessage()               {}
func (*OrderStatus) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{24} }

func (m *OrderStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OrderStatus) GetFilled() []*OrderSpec {
	if m != nil {
		return m.Filled
	}
	return nil
}

func (m *OrderStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//
type OutageRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *OutageRequest) Reset()                    { *m = OutageRequest{} }
func (m *OutageRequest) String() string            { return proto.CompactTextString(m) }
func (*OutageRequest) ProtoMessage()               {}
func (*OutageRequest) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{25} }

func (m *OutageRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//
type Publisher struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec PublisherSpec `protobuf:"bytes,3,opt,name=Spec" json:"Spec"`
}

func (m *Publisher) Reset()                    { *m = Publisher{} }
func (m *Publisher) String() string            { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()               {}
func (*Publisher) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{26} }

func (m *Publisher) GetSpec() PublisherSpec {
	if m != nil {
		return m.Spec
	}
	return PublisherSpec{}
}

// PublisherList is a container object for list of Publisher objects
type PublisherList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Publisher objects
	Items []*Publisher `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *PublisherList) Reset()                    { *m = PublisherList{} }
func (m *PublisherList) String() string            { return proto.CompactTextString(m) }
func (*PublisherList) ProtoMessage()               {}
func (*PublisherList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{27} }

func (m *PublisherList) GetItems() []*Publisher {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type PublisherSpec struct {
	//
	Id string `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	//
	Address string `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	//
	WebAddr string `protobuf:"bytes,4,opt,name=WebAddr,proto3" json:"WebAddr,omitempty"`
}

func (m *PublisherSpec) Reset()                    { *m = PublisherSpec{} }
func (m *PublisherSpec) String() string            { return proto.CompactTextString(m) }
func (*PublisherSpec) ProtoMessage()               {}
func (*PublisherSpec) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{28} }

func (m *PublisherSpec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublisherSpec) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PublisherSpec) GetWebAddr() string {
	if m != nil {
		return m.WebAddr
	}
	return ""
}

//
type RestockRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *RestockRequest) Reset()                    { *m = RestockRequest{} }
func (m *RestockRequest) String() string            { return proto.CompactTextString(m) }
func (*RestockRequest) ProtoMessage()               {}
func (*RestockRequest) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{29} }

func (m *RestockRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//
type RestockResponse struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Books []string `protobuf:"bytes,3,rep,name=Books" json:"Books,omitempty"`
	//
	Count int32 `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *RestockResponse) Reset()                    { *m = RestockResponse{} }
func (m *RestockResponse) String() string            { return proto.CompactTextString(m) }
func (*RestockResponse) ProtoMessage()               {}
func (*RestockResponse) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{30} }

func (m *RestockResponse) GetBooks() []string {
	if m != nil {
		return m.Books
	}
	return nil
}

func (m *RestockResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//
type Store struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec StoreSpec `protobuf:"bytes,3,opt,name=Spec" json:"Spec"`
	//
	Status StoreStatus `protobuf:"bytes,4,opt,name=Status" json:"Status"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{31} }

func (m *Store) GetSpec() StoreSpec {
	if m != nil {
		return m.Spec
	}
	return StoreSpec{}
}

func (m *Store) GetStatus() StoreStatus {
	if m != nil {
		return m.Status
	}
	return StoreStatus{}
}

// StoreList is a container object for list of Store objects
type StoreList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Store objects
	Items []*Store `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *StoreList) Reset()                    { *m = StoreList{} }
func (m *StoreList) String() string            { return proto.CompactTextString(m) }
func (*StoreList) ProtoMessage()               {}
func (*StoreList) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{32} }

func (m *StoreList) GetItems() []*Store {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type StoreSpec struct {
	//
	Contact string `protobuf:"bytes,1,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (m *StoreSpec) Reset()                    { *m = StoreSpec{} }
func (m *StoreSpec) String() string            { return proto.CompactTextString(m) }
func (*StoreSpec) ProtoMessage()               {}
func (*StoreSpec) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{33} }

func (m *StoreSpec) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

//
type StoreStatus struct {
	//
	CurrentOutages []string `protobuf:"bytes,1,rep,name=CurrentOutages" json:"CurrentOutages,omitempty"`
}

func (m *StoreStatus) Reset()                    { *m = StoreStatus{} }
func (m *StoreStatus) String() string            { return proto.CompactTextString(m) }
func (*StoreStatus) ProtoMessage()               {}
func (*StoreStatus) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{34} }

func (m *StoreStatus) GetCurrentOutages() []string {
	if m != nil {
		return m.CurrentOutages
	}
	return nil
}

func init() {
	proto.RegisterType((*ApplyDiscountReq)(nil), "bookstore.ApplyDiscountReq")
	proto.RegisterType((*AutoMsgBookWatchHelper)(nil), "bookstore.AutoMsgBookWatchHelper")
	proto.RegisterType((*AutoMsgBookWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgBookWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgCouponWatchHelper)(nil), "bookstore.AutoMsgCouponWatchHelper")
	proto.RegisterType((*AutoMsgCouponWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgCouponWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgCustomerWatchHelper)(nil), "bookstore.AutoMsgCustomerWatchHelper")
	proto.RegisterType((*AutoMsgCustomerWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgCustomerWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgOrderWatchHelper)(nil), "bookstore.AutoMsgOrderWatchHelper")
	proto.RegisterType((*AutoMsgOrderWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgOrderWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgPublisherWatchHelper)(nil), "bookstore.AutoMsgPublisherWatchHelper")
	proto.RegisterType((*AutoMsgPublisherWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgPublisherWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgStoreWatchHelper)(nil), "bookstore.AutoMsgStoreWatchHelper")
	proto.RegisterType((*AutoMsgStoreWatchHelper_WatchEvent)(nil), "bookstore.AutoMsgStoreWatchHelper.WatchEvent")
	proto.RegisterType((*Book)(nil), "bookstore.Book")
	proto.RegisterType((*BookEdition)(nil), "bookstore.BookEdition")
	proto.RegisterType((*BookList)(nil), "bookstore.BookList")
	proto.RegisterType((*BookReview)(nil), "bookstore.BookReview")
	proto.RegisterType((*BookSpec)(nil), "bookstore.BookSpec")
	proto.RegisterType((*BookStatus)(nil), "bookstore.BookStatus")
	proto.RegisterType((*Coupon)(nil), "bookstore.Coupon")
	proto.RegisterType((*CouponList)(nil), "bookstore.CouponList")
	proto.RegisterType((*Customer)(nil), "bookstore.Customer")
	proto.RegisterType((*CustomerList)(nil), "bookstore.CustomerList")
	proto.RegisterType((*CustomerPersonalInfo)(nil), "bookstore.CustomerPersonalInfo")
	proto.RegisterType((*CustomerSpec)(nil), "bookstore.CustomerSpec")
	proto.RegisterType((*CustomerStatus)(nil), "bookstore.CustomerStatus")
	proto.RegisterType((*Order)(nil), "bookstore.Order")
	proto.RegisterType((*OrderItem)(nil), "bookstore.OrderItem")
	proto.RegisterType((*OrderList)(nil), "bookstore.OrderList")
	proto.RegisterType((*OrderSpec)(nil), "bookstore.OrderSpec")
	proto.RegisterType((*OrderStatus)(nil), "bookstore.OrderStatus")
	proto.RegisterType((*OutageRequest)(nil), "bookstore.OutageRequest")
	proto.RegisterType((*Publisher)(nil), "bookstore.Publisher")
	proto.RegisterType((*PublisherList)(nil), "bookstore.PublisherList")
	proto.RegisterType((*PublisherSpec)(nil), "bookstore.PublisherSpec")
	proto.RegisterType((*RestockRequest)(nil), "bookstore.RestockRequest")
	proto.RegisterType((*RestockResponse)(nil), "bookstore.RestockResponse")
	proto.RegisterType((*Store)(nil), "bookstore.Store")
	proto.RegisterType((*StoreList)(nil), "bookstore.StoreList")
	proto.RegisterType((*StoreSpec)(nil), "bookstore.StoreSpec")
	proto.RegisterType((*StoreStatus)(nil), "bookstore.StoreStatus")
	proto.RegisterEnum("bookstore.BookSpec_BookCategories", BookSpec_BookCategories_name, BookSpec_BookCategories_value)
	proto.RegisterEnum("bookstore.OrderStatus_OrderStatus", OrderStatus_OrderStatus_name, OrderStatus_OrderStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BookstoreV1 service

type BookstoreV1Client interface {
	AddOutage(ctx context.Context, in *OutageRequest, opts ...grpc.CallOption) (*Store, error)
	Applydiscount(ctx context.Context, in *ApplyDiscountReq, opts ...grpc.CallOption) (*Order, error)
	// Creates a new Book object
	AutoAddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	// Creates a new Coupon object
	AutoAddCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	// Creates a new Customer object
	AutoAddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	// Creates a new Order object
	AutoAddOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	// Creates a new Publisher object
	AutoAddPublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error)
	// Creates a new Store object
	AutoAddStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	// Deletes the Book object
	AutoDeleteBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	// Deletes the Coupon object
	AutoDeleteCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	// Deletes the Customer object
	AutoDeleteCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	// Deletes the Order object
	AutoDeleteOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	// Deletes the Publisher object
	AutoDeletePublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error)
	// Deletes the Store object
	AutoDeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	// Retreives the Book object
	AutoGetBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	// Retreives the Coupon object
	AutoGetCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	// Retreives the Customer object
	AutoGetCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	// Retreives the Order object
	AutoGetOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	// Retreives the Publisher object
	AutoGetPublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error)
	// Retreives the Store object
	AutoGetStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	// Retreives a list of Book objects
	AutoListBook(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*BookList, error)
	// Retreives a list of Coupon objects
	AutoListCoupon(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CouponList, error)
	// Retreives a list of Customer objects
	AutoListCustomer(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CustomerList, error)
	// Retreives a list of Order objects
	AutoListOrder(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*OrderList, error)
	// Retreives a list of Publisher objects
	AutoListPublisher(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*PublisherList, error)
	// Retreives a list of Store objects
	AutoListStore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*StoreList, error)
	AutoUpdateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	AutoUpdateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error)
	AutoUpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	AutoUpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	AutoUpdatePublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error)
	AutoUpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	// Watch for changes to Book objects
	AutoWatchBook(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchBookClient, error)
	// Watch for changes to Coupon objects
	AutoWatchCoupon(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchCouponClient, error)
	// Watch for changes to Customer objects
	AutoWatchCustomer(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchCustomerClient, error)
	// Watch for changes to Order objects
	AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchOrderClient, error)
	// Watch for changes to Publisher objects
	AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchPublisherClient, error)
	// Watch for changes to Store objects
	AutoWatchStore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchStoreClient, error)
	Cleardiscount(ctx context.Context, in *ApplyDiscountReq, opts ...grpc.CallOption) (*Order, error)
	Restock(ctx context.Context, in *RestockRequest, opts ...grpc.CallOption) (*RestockResponse, error)
}

type bookstoreV1Client struct {
	cc *grpc.ClientConn
}

func NewBookstoreV1Client(cc *grpc.ClientConn) BookstoreV1Client {
	return &bookstoreV1Client{cc}
}

func (c *bookstoreV1Client) AddOutage(ctx context.Context, in *OutageRequest, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AddOutage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) Applydiscount(ctx context.Context, in *ApplyDiscountReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/Applydiscount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddCoupon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddPublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddPublisher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoAddStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoAddStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeleteBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeleteBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeleteCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeleteCoupon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeleteCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeleteCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeleteOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeleteOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeletePublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeletePublisher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoDeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoDeleteStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetCoupon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetPublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetPublisher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoGetStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoGetStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListBook(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*BookList, error) {
	out := new(BookList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListCoupon(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CouponList, error) {
	out := new(CouponList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListCoupon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListCustomer(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CustomerList, error) {
	out := new(CustomerList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListOrder(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListPublisher(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*PublisherList, error) {
	out := new(PublisherList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListPublisher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoListStore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*StoreList, error) {
	out := new(StoreList)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoListStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdateBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdateCoupon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdateCustomer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdateOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdatePublisher(ctx context.Context, in *Publisher, opts ...grpc.CallOption) (*Publisher, error) {
	out := new(Publisher)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdatePublisher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoUpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/AutoUpdateStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) AutoWatchBook(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchBookClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[0], c.cc, "/bookstore.BookstoreV1/AutoWatchBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchBookClient interface {
	Recv() (*AutoMsgBookWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchBookClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchBookClient) Recv() (*AutoMsgBookWatchHelper, error) {
	m := new(AutoMsgBookWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) AutoWatchCoupon(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchCouponClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[1], c.cc, "/bookstore.BookstoreV1/AutoWatchCoupon", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchCouponClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchCouponClient interface {
	Recv() (*AutoMsgCouponWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchCouponClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchCouponClient) Recv() (*AutoMsgCouponWatchHelper, error) {
	m := new(AutoMsgCouponWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) AutoWatchCustomer(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchCustomerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[2], c.cc, "/bookstore.BookstoreV1/AutoWatchCustomer", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchCustomerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchCustomerClient interface {
	Recv() (*AutoMsgCustomerWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchCustomerClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchCustomerClient) Recv() (*AutoMsgCustomerWatchHelper, error) {
	m := new(AutoMsgCustomerWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[3], c.cc, "/bookstore.BookstoreV1/AutoWatchOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchOrderClient interface {
	Recv() (*AutoMsgOrderWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchOrderClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchOrderClient) Recv() (*AutoMsgOrderWatchHelper, error) {
	m := new(AutoMsgOrderWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchPublisherClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[4], c.cc, "/bookstore.BookstoreV1/AutoWatchPublisher", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchPublisherClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchPublisherClient interface {
	Recv() (*AutoMsgPublisherWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchPublisherClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchPublisherClient) Recv() (*AutoMsgPublisherWatchHelper, error) {
	m := new(AutoMsgPublisherWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) AutoWatchStore(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BookstoreV1_AutoWatchStoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookstoreV1_serviceDesc.Streams[5], c.cc, "/bookstore.BookstoreV1/AutoWatchStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookstoreV1AutoWatchStoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookstoreV1_AutoWatchStoreClient interface {
	Recv() (*AutoMsgStoreWatchHelper, error)
	grpc.ClientStream
}

type bookstoreV1AutoWatchStoreClient struct {
	grpc.ClientStream
}

func (x *bookstoreV1AutoWatchStoreClient) Recv() (*AutoMsgStoreWatchHelper, error) {
	m := new(AutoMsgStoreWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookstoreV1Client) Cleardiscount(ctx context.Context, in *ApplyDiscountReq, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/Cleardiscount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookstoreV1Client) Restock(ctx context.Context, in *RestockRequest, opts ...grpc.CallOption) (*RestockResponse, error) {
	out := new(RestockResponse)
	err := grpc.Invoke(ctx, "/bookstore.BookstoreV1/Restock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookstoreV1 service

type BookstoreV1Server interface {
	AddOutage(context.Context, *OutageRequest) (*Store, error)
	Applydiscount(context.Context, *ApplyDiscountReq) (*Order, error)
	// Creates a new Book object
	AutoAddBook(context.Context, *Book) (*Book, error)
	// Creates a new Coupon object
	AutoAddCoupon(context.Context, *Coupon) (*Coupon, error)
	// Creates a new Customer object
	AutoAddCustomer(context.Context, *Customer) (*Customer, error)
	// Creates a new Order object
	AutoAddOrder(context.Context, *Order) (*Order, error)
	// Creates a new Publisher object
	AutoAddPublisher(context.Context, *Publisher) (*Publisher, error)
	// Creates a new Store object
	AutoAddStore(context.Context, *Store) (*Store, error)
	// Deletes the Book object
	AutoDeleteBook(context.Context, *Book) (*Book, error)
	// Deletes the Coupon object
	AutoDeleteCoupon(context.Context, *Coupon) (*Coupon, error)
	// Deletes the Customer object
	AutoDeleteCustomer(context.Context, *Customer) (*Customer, error)
	// Deletes the Order object
	AutoDeleteOrder(context.Context, *Order) (*Order, error)
	// Deletes the Publisher object
	AutoDeletePublisher(context.Context, *Publisher) (*Publisher, error)
	// Deletes the Store object
	AutoDeleteStore(context.Context, *Store) (*Store, error)
	// Retreives the Book object
	AutoGetBook(context.Context, *Book) (*Book, error)
	// Retreives the Coupon object
	AutoGetCoupon(context.Context, *Coupon) (*Coupon, error)
	// Retreives the Customer object
	AutoGetCustomer(context.Context, *Customer) (*Customer, error)
	// Retreives the Order object
	AutoGetOrder(context.Context, *Order) (*Order, error)
	// Retreives the Publisher object
	AutoGetPublisher(context.Context, *Publisher) (*Publisher, error)
	// Retreives the Store object
	AutoGetStore(context.Context, *Store) (*Store, error)
	// Retreives a list of Book objects
	AutoListBook(context.Context, *api.ListWatchOptions) (*BookList, error)
	// Retreives a list of Coupon objects
	AutoListCoupon(context.Context, *api.ListWatchOptions) (*CouponList, error)
	// Retreives a list of Customer objects
	AutoListCustomer(context.Context, *api.ListWatchOptions) (*CustomerList, error)
	// Retreives a list of Order objects
	AutoListOrder(context.Context, *api.ListWatchOptions) (*OrderList, error)
	// Retreives a list of Publisher objects
	AutoListPublisher(context.Context, *api.ListWatchOptions) (*PublisherList, error)
	// Retreives a list of Store objects
	AutoListStore(context.Context, *api.ListWatchOptions) (*StoreList, error)
	AutoUpdateBook(context.Context, *Book) (*Book, error)
	AutoUpdateCoupon(context.Context, *Coupon) (*Coupon, error)
	AutoUpdateCustomer(context.Context, *Customer) (*Customer, error)
	AutoUpdateOrder(context.Context, *Order) (*Order, error)
	AutoUpdatePublisher(context.Context, *Publisher) (*Publisher, error)
	AutoUpdateStore(context.Context, *Store) (*Store, error)
	// Watch for changes to Book objects
	AutoWatchBook(*api.ListWatchOptions, BookstoreV1_AutoWatchBookServer) error
	// Watch for changes to Coupon objects
	AutoWatchCoupon(*api.ListWatchOptions, BookstoreV1_AutoWatchCouponServer) error
	// Watch for changes to Customer objects
	AutoWatchCustomer(*api.ListWatchOptions, BookstoreV1_AutoWatchCustomerServer) error
	// Watch for changes to Order objects
	AutoWatchOrder(*api.ListWatchOptions, BookstoreV1_AutoWatchOrderServer) error
	// Watch for changes to Publisher objects
	AutoWatchPublisher(*api.ListWatchOptions, BookstoreV1_AutoWatchPublisherServer) error
	// Watch for changes to Store objects
	AutoWatchStore(*api.ListWatchOptions, BookstoreV1_AutoWatchStoreServer) error
	Cleardiscount(context.Context, *ApplyDiscountReq) (*Order, error)
	Restock(context.Context, *RestockRequest) (*RestockResponse, error)
}

func RegisterBookstoreV1Server(s *grpc.Server, srv BookstoreV1Server) {
	s.RegisterService(&_BookstoreV1_serviceDesc, srv)
}

func _BookstoreV1_AddOutage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AddOutage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AddOutage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AddOutage(ctx, req.(*OutageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_Applydiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDiscountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).Applydiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/Applydiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).Applydiscount(ctx, req.(*ApplyDiscountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publisher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddPublisher(ctx, req.(*Publisher))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoAddStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoAddStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoAddStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoAddStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeleteBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeleteCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeleteCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeleteCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeleteCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeleteCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeleteOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeletePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publisher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeletePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeletePublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeletePublisher(ctx, req.(*Publisher))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoDeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoDeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoDeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoDeleteStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publisher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetPublisher(ctx, req.(*Publisher))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoGetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoGetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoGetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoGetStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListBook(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListCoupon(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListCustomer(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListOrder(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListPublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListPublisher(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoListStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoListStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoListStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoListStore(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdateBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdateCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdateCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdatePublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publisher)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdatePublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdatePublisher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdatePublisher(ctx, req.(*Publisher))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoUpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).AutoUpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/AutoUpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).AutoUpdateStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_AutoWatchBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchBook(m, &bookstoreV1AutoWatchBookServer{stream})
}

type BookstoreV1_AutoWatchBookServer interface {
	Send(*AutoMsgBookWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchBookServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchBookServer) Send(m *AutoMsgBookWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_AutoWatchCoupon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchCoupon(m, &bookstoreV1AutoWatchCouponServer{stream})
}

type BookstoreV1_AutoWatchCouponServer interface {
	Send(*AutoMsgCouponWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchCouponServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchCouponServer) Send(m *AutoMsgCouponWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_AutoWatchCustomer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchCustomer(m, &bookstoreV1AutoWatchCustomerServer{stream})
}

type BookstoreV1_AutoWatchCustomerServer interface {
	Send(*AutoMsgCustomerWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchCustomerServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchCustomerServer) Send(m *AutoMsgCustomerWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_AutoWatchOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchOrder(m, &bookstoreV1AutoWatchOrderServer{stream})
}

type BookstoreV1_AutoWatchOrderServer interface {
	Send(*AutoMsgOrderWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchOrderServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchOrderServer) Send(m *AutoMsgOrderWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_AutoWatchPublisher_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchPublisher(m, &bookstoreV1AutoWatchPublisherServer{stream})
}

type BookstoreV1_AutoWatchPublisherServer interface {
	Send(*AutoMsgPublisherWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchPublisherServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchPublisherServer) Send(m *AutoMsgPublisherWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_AutoWatchStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookstoreV1Server).AutoWatchStore(m, &bookstoreV1AutoWatchStoreServer{stream})
}

type BookstoreV1_AutoWatchStoreServer interface {
	Send(*AutoMsgStoreWatchHelper) error
	grpc.ServerStream
}

type bookstoreV1AutoWatchStoreServer struct {
	grpc.ServerStream
}

func (x *bookstoreV1AutoWatchStoreServer) Send(m *AutoMsgStoreWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _BookstoreV1_Cleardiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDiscountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).Cleardiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/Cleardiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).Cleardiscount(ctx, req.(*ApplyDiscountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookstoreV1_Restock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookstoreV1Server).Restock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookstore.BookstoreV1/Restock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookstoreV1Server).Restock(ctx, req.(*RestockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookstoreV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookstore.BookstoreV1",
	HandlerType: (*BookstoreV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOutage",
			Handler:    _BookstoreV1_AddOutage_Handler,
		},
		{
			MethodName: "Applydiscount",
			Handler:    _BookstoreV1_Applydiscount_Handler,
		},
		{
			MethodName: "AutoAddBook",
			Handler:    _BookstoreV1_AutoAddBook_Handler,
		},
		{
			MethodName: "AutoAddCoupon",
			Handler:    _BookstoreV1_AutoAddCoupon_Handler,
		},
		{
			MethodName: "AutoAddCustomer",
			Handler:    _BookstoreV1_AutoAddCustomer_Handler,
		},
		{
			MethodName: "AutoAddOrder",
			Handler:    _BookstoreV1_AutoAddOrder_Handler,
		},
		{
			MethodName: "AutoAddPublisher",
			Handler:    _BookstoreV1_AutoAddPublisher_Handler,
		},
		{
			MethodName: "AutoAddStore",
			Handler:    _BookstoreV1_AutoAddStore_Handler,
		},
		{
			MethodName: "AutoDeleteBook",
			Handler:    _BookstoreV1_AutoDeleteBook_Handler,
		},
		{
			MethodName: "AutoDeleteCoupon",
			Handler:    _BookstoreV1_AutoDeleteCoupon_Handler,
		},
		{
			MethodName: "AutoDeleteCustomer",
			Handler:    _BookstoreV1_AutoDeleteCustomer_Handler,
		},
		{
			MethodName: "AutoDeleteOrder",
			Handler:    _BookstoreV1_AutoDeleteOrder_Handler,
		},
		{
			MethodName: "AutoDeletePublisher",
			Handler:    _BookstoreV1_AutoDeletePublisher_Handler,
		},
		{
			MethodName: "AutoDeleteStore",
			Handler:    _BookstoreV1_AutoDeleteStore_Handler,
		},
		{
			MethodName: "AutoGetBook",
			Handler:    _BookstoreV1_AutoGetBook_Handler,
		},
		{
			MethodName: "AutoGetCoupon",
			Handler:    _BookstoreV1_AutoGetCoupon_Handler,
		},
		{
			MethodName: "AutoGetCustomer",
			Handler:    _BookstoreV1_AutoGetCustomer_Handler,
		},
		{
			MethodName: "AutoGetOrder",
			Handler:    _BookstoreV1_AutoGetOrder_Handler,
		},
		{
			MethodName: "AutoGetPublisher",
			Handler:    _BookstoreV1_AutoGetPublisher_Handler,
		},
		{
			MethodName: "AutoGetStore",
			Handler:    _BookstoreV1_AutoGetStore_Handler,
		},
		{
			MethodName: "AutoListBook",
			Handler:    _BookstoreV1_AutoListBook_Handler,
		},
		{
			MethodName: "AutoListCoupon",
			Handler:    _BookstoreV1_AutoListCoupon_Handler,
		},
		{
			MethodName: "AutoListCustomer",
			Handler:    _BookstoreV1_AutoListCustomer_Handler,
		},
		{
			MethodName: "AutoListOrder",
			Handler:    _BookstoreV1_AutoListOrder_Handler,
		},
		{
			MethodName: "AutoListPublisher",
			Handler:    _BookstoreV1_AutoListPublisher_Handler,
		},
		{
			MethodName: "AutoListStore",
			Handler:    _BookstoreV1_AutoListStore_Handler,
		},
		{
			MethodName: "AutoUpdateBook",
			Handler:    _BookstoreV1_AutoUpdateBook_Handler,
		},
		{
			MethodName: "AutoUpdateCoupon",
			Handler:    _BookstoreV1_AutoUpdateCoupon_Handler,
		},
		{
			MethodName: "AutoUpdateCustomer",
			Handler:    _BookstoreV1_AutoUpdateCustomer_Handler,
		},
		{
			MethodName: "AutoUpdateOrder",
			Handler:    _BookstoreV1_AutoUpdateOrder_Handler,
		},
		{
			MethodName: "AutoUpdatePublisher",
			Handler:    _BookstoreV1_AutoUpdatePublisher_Handler,
		},
		{
			MethodName: "AutoUpdateStore",
			Handler:    _BookstoreV1_AutoUpdateStore_Handler,
		},
		{
			MethodName: "Cleardiscount",
			Handler:    _BookstoreV1_Cleardiscount_Handler,
		},
		{
			MethodName: "Restock",
			Handler:    _BookstoreV1_Restock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchBook",
			Handler:       _BookstoreV1_AutoWatchBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchCoupon",
			Handler:       _BookstoreV1_AutoWatchCoupon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchCustomer",
			Handler:       _BookstoreV1_AutoWatchCustomer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchOrder",
			Handler:       _BookstoreV1_AutoWatchOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchPublisher",
			Handler:       _BookstoreV1_AutoWatchPublisher_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchStore",
			Handler:       _BookstoreV1_AutoWatchStore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "example.proto",
}

func (m *ApplyDiscountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyDiscountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Coupon) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Coupon)))
		i += copy(dAtA[i:], m.Coupon)
	}
	return i, nil
}

func (m *AutoMsgBookWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgBookWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgBookWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgBookWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgCouponWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCouponWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgCustomerWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCustomerWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgOrderWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgOrderWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgPublisherWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgPublisherWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AutoMsgStoreWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgStoreWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Object.Size()))
		n8, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n10, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Spec.Size()))
	n11, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x22
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Status.Size()))
	n12, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *BookEdition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookEdition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Errata) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Errata)))
		i += copy(dAtA[i:], m.Errata)
	}
	if len(m.Year) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Year)))
		i += copy(dAtA[i:], m.Year)
	}
	if len(m.Reviews) > 0 {
		for k, _ := range m.Reviews {
			dAtA[i] = 0x1a
			i++
			v := m.Reviews[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovExample(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovExample(uint64(len(k))) + msgSize
			i = encodeVarintExample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintExample(dAtA, i, uint64(v.Size()))
				n13, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n13
			}
		}
	}
	return i, nil
}

func (m *BookList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n15, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BookReview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookReview) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Date != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Date.Size()))
		n16, err := m.Date.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Review) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Review)))
		i += copy(dAtA[i:], m.Review)
	}
	return i, nil
}

func (m *BookSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ISBNId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.ISBNId)))
		i += copy(dAtA[i:], m.ISBNId)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.IdProvider) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.IdProvider)))
		i += copy(dAtA[i:], m.IdProvider)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if m.UpdateTimestamp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.UpdateTimestamp.Size()))
		n17, err := m.UpdateTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Terminate {
		dAtA[i] = 0x38
		i++
		if m.Terminate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Editions) > 0 {
		for k, _ := range m.Editions {
			dAtA[i] = 0x42
			i++
			v := m.Editions[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovExample(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovExample(uint64(len(k))) + msgSize
			i = encodeVarintExample(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintExample(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintExample(dAtA, i, uint64(v.Size()))
				n18, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n18
			}
		}
	}
	return i, nil
}

func (m *BookStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Inventory != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Inventory))
	}
	return i, nil
}

func (m *Coupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coupon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n19, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n20, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.DiscountCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.DiscountCode)))
		i += copy(dAtA[i:], m.DiscountCode)
	}
	return i, nil
}

func (m *CouponList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouponList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n21, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n22, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Customer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Customer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n23, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n24, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Spec.Size()))
	n25, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x22
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Status.Size()))
	n26, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	return i, nil
}

func (m *CustomerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n27, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n28, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CustomerPersonalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerPersonalInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SSN) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.SSN)))
		i += copy(dAtA[i:], m.SSN)
	}
	if len(m.MotherMaidenName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.MotherMaidenName)))
		i += copy(dAtA[i:], m.MotherMaidenName)
	}
	return i, nil
}

func (m *CustomerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.CreditCardNumbers) > 0 {
		for _, s := range m.CreditCardNumbers {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.PasswordRecoveryInfo.Size()))
	n29, err := m.PasswordRecoveryInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	return i, nil
}

func (m *CustomerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n30, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n31, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Spec.Size()))
	n32, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0x22
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Status.Size()))
	n33, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	return i, nil
}

func (m *OrderItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ISBNId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.ISBNId)))
		i += copy(dAtA[i:], m.ISBNId)
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Quantity))
	}
	return i, nil
}

func (m *OrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n34, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n35, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OrderSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Order) > 0 {
		for _, msg := range m.Order {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OrderStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Filled) > 0 {
		for _, msg := range m.Filled {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *OutageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n36, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n37, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *Publisher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publisher) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n38, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n39, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Spec.Size()))
	n40, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	return i, nil
}

func (m *PublisherList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublisherList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n41, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n42, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PublisherSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublisherSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.WebAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.WebAddr)))
		i += copy(dAtA[i:], m.WebAddr)
	}
	return i, nil
}

func (m *RestockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n43, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n44, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	if len(m.Reason) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *RestockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n45, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n46, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	if len(m.Books) > 0 {
		for _, s := range m.Books {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExample(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *Store) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Store) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n47, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ObjectMeta.Size()))
	n48, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Spec.Size()))
	n49, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0x22
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.Status.Size()))
	n50, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	return i, nil
}

func (m *StoreList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.TypeMeta.Size()))
	n51, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExample(dAtA, i, uint64(m.ListMeta.Size()))
	n52, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExample(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoreSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contact) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExample(dAtA, i, uint64(len(m.Contact)))
		i += copy(dAtA[i:], m.Contact)
	}
	return i, nil
}

func (m *StoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CurrentOutages) > 0 {
		for _, s := range m.CurrentOutages {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApplyDiscountReq) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = len(m.Coupon)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgBookWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgBookWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgCouponWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgCouponWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgCustomerWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgCustomerWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgOrderWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgOrderWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgPublisherWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgPublisherWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *AutoMsgStoreWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgStoreWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *Book) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *BookEdition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Errata)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Year)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if len(m.Reviews) > 0 {
		for k, v := range m.Reviews {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExample(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExample(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExample(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BookList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *BookReview) Size() (n int) {
	var l int
	_ = l
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Review)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *BookSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ISBNId)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.IdProvider)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.UpdateTimestamp != nil {
		l = m.UpdateTimestamp.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Terminate {
		n += 2
	}
	if len(m.Editions) > 0 {
		for k, v := range m.Editions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovExample(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovExample(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovExample(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BookStatus) Size() (n int) {
	var l int
	_ = l
	if m.Inventory != 0 {
		n += 1 + sovExample(uint64(m.Inventory))
	}
	return n
}

func (m *Coupon) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = len(m.DiscountCode)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *CouponList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *Customer) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *CustomerList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *CustomerPersonalInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.SSN)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.MotherMaidenName)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *CustomerSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if len(m.CreditCardNumbers) > 0 {
		for _, s := range m.CreditCardNumbers {
			l = len(s)
			n += 1 + l + sovExample(uint64(l))
		}
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = m.PasswordRecoveryInfo.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *CustomerStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Order) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *OrderItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.ISBNId)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovExample(uint64(m.Quantity))
	}
	return n
}

func (m *OrderList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *OrderSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *OrderStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if len(m.Filled) > 0 {
		for _, e := range m.Filled {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *OutageRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *Publisher) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *PublisherList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *PublisherSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.WebAddr)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *RestockRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *RestockResponse) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Books) > 0 {
		for _, s := range m.Books {
			l = len(s)
			n += 1 + l + sovExample(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovExample(uint64(m.Count))
	}
	return n
}

func (m *Store) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovExample(uint64(l))
	return n
}

func (m *StoreList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExample(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *StoreSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *StoreStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.CurrentOutages) > 0 {
		for _, s := range m.CurrentOutages {
			l = len(s)
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func sovExample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplyDiscountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyDiscountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyDiscountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgBookWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgBookWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgBookWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgBookWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgBookWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Book{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCouponWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCouponWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCouponWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgCouponWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCouponWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Coupon{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCustomerWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCustomerWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCustomerWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgCustomerWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCustomerWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Customer{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgOrderWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgOrderWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgOrderWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgOrderWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgOrderWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Order{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgPublisherWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgPublisherWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgPublisherWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgPublisherWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgPublisherWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Publisher{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgStoreWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgStoreWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgStoreWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgStoreWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgStoreWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Store{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookEdition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookEdition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookEdition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reviews", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reviews == nil {
				m.Reviews = make(map[string]*BookReview)
			}
			var mapkey string
			var mapvalue *BookReview
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExample
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthExample
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BookReview{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthExample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Reviews[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Book{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookReview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookReview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookReview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &api.Timestamp{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Review = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISBNId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISBNId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateTimestamp == nil {
				m.UpdateTimestamp = &api.Timestamp{}
			}
			if err := m.UpdateTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Terminate = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Editions == nil {
				m.Editions = make(map[string]*BookEdition)
			}
			var mapkey string
			var mapvalue *BookEdition
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExample
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExample
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExample
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthExample
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthExample
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BookEdition{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExample(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthExample
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Editions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			m.Inventory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inventory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouponList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouponList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouponList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Coupon{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Customer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Customer{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerPersonalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerPersonalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerPersonalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotherMaidenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MotherMaidenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditCardNumbers = append(m.CreditCardNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = append(m.Password[:0], dAtA[iNdEx:postIndex]...)
			if m.Password == nil {
				m.Password = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordRecoveryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PasswordRecoveryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISBNId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISBNId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Order{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, &OrderItem{})
			if err := m.Order[len(m.Order)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filled = append(m.Filled, &OrderSpec{})
			if err := m.Filled[len(m.Filled)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Publisher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publisher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publisher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublisherList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Publisher{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublisherSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublisherSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublisherSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Store) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Store: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Store: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Store{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOutages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOutages = append(m.CurrentOutages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExample(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("example.proto", fileDescriptorExample) }

var fileDescriptorExample = []byte{
	// 2866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x6c, 0x1b, 0xc7,
	0xdd, 0xf7, 0xf2, 0x25, 0x72, 0xf8, 0x10, 0x3d, 0x7e, 0x71, 0x37, 0xf9, 0x4c, 0x79, 0x1d, 0xe7,
	0xa3, 0x64, 0x99, 0xb4, 0x6c, 0xc7, 0x4d, 0xd5, 0xa4, 0x89, 0x48, 0x31, 0x36, 0x53, 0x59, 0x92,
	0x97, 0x76, 0xdc, 0xf4, 0x11, 0x60, 0xc5, 0x9d, 0x48, 0x5b, 0x93, 0xbb, 0xcc, 0xee, 0x50, 0xae,
	0x50, 0xf4, 0xd0, 0xd2, 0x12, 0x50, 0x14, 0x3d, 0xb4, 0xb9, 0xf5, 0x56, 0xa3, 0x40, 0x01, 0x1d,
	0x8a, 0x42, 0xed, 0xa1, 0xc8, 0xb5, 0x97, 0x00, 0xbd, 0x04, 0xee, 0x2d, 0x07, 0xa3, 0x0d, 0x7a,
	0xf2, 0xb9, 0x45, 0xd1, 0x5b, 0x31, 0x8f, 0x5d, 0xee, 0x4b, 0xb4, 0xd4, 0xd4, 0x51, 0x2e, 0xe4,
	0xce, 0xee, 0xff, 0xf1, 0x9b, 0xff, 0x73, 0x66, 0x76, 0x41, 0x1e, 0x7d, 0x5f, 0xed, 0xf5, 0xbb,
	0xa8, 0xda, 0xb7, 0x4c, 0x6c, 0xc2, 0xcc, 0x9a, 0x69, 0xde, 0xb7, 0xb1, 0x69, 0x21, 0xa9, 0xb9,
	0xae, 0xe3, 0x8d, 0xc1, 0x5a, 0xb5, 0x63, 0xf6, 0x6a, 0x7d, 0x64, 0xd8, 0xaa, 0xa1, 0x99, 0x35,
	0xfb, 0x41, 0x6d, 0x13, 0x19, 0x7a, 0x07, 0xd5, 0x06, 0x58, 0xef, 0xda, 0x35, 0xb5, 0xaf, 0xaf,
	0x23, 0xa3, 0xa6, 0x1a, 0x86, 0x89, 0x55, 0xac, 0x9b, 0x86, 0x5d, 0xd3, 0x8d, 0x4e, 0x77, 0xa0,
	0x21, 0x9b, 0x49, 0x94, 0x2e, 0xec, 0x23, 0x46, 0xed, 0xeb, 0xb5, 0x1e, 0xc2, 0x2a, 0x23, 0x93,
	0xf7, 0x04, 0x50, 0x5c, 0xe8, 0xf7, 0xbb, 0x5b, 0x8b, 0xba, 0xdd, 0x31, 0x07, 0x06, 0x56, 0xd0,
	0x07, 0xf0, 0x3a, 0x10, 0xee, 0x94, 0x84, 0x29, 0xa1, 0x92, 0xbd, 0x92, 0xaf, 0xaa, 0x7d, 0xbd,
	0x7a, 0x67, 0xab, 0x8f, 0x6e, 0x21, 0xac, 0xd6, 0x4f, 0x7c, 0xfc, 0xa4, 0x7c, 0xec, 0x93, 0x27,
	0x65, 0xe1, 0xe9, 0x93, 0xf2, 0xc4, 0xac, 0x6e, 0x74, 0x75, 0x03, 0x29, 0xce, 0x05, 0x7c, 0x13,
	0x08, 0x2b, 0xa5, 0x18, 0xe5, 0x9b, 0xa4, 0x7c, 0x2b, 0x6b, 0xdf, 0x43, 0x1d, 0x4c, 0x39, 0xcf,
	0x78, 0x38, 0xb3, 0x04, 0x80, 0xc3, 0xed, 0x1d, 0xc0, 0xd3, 0x20, 0xd5, 0x30, 0x07, 0x7d, 0xd3,
	0x28, 0xc5, 0xa7, 0x84, 0x4a, 0x46, 0xe1, 0xa3, 0xf9, 0xdc, 0xe3, 0x6d, 0x31, 0x0d, 0x53, 0xa6,
	0xa5, 0x21, 0xcb, 0x96, 0x7f, 0x2d, 0x80, 0xd3, 0x0b, 0x03, 0x6c, 0xde, 0xb2, 0xd7, 0xeb, 0xa6,
	0x79, 0xff, 0x9e, 0x8a, 0x3b, 0x1b, 0x37, 0x51, 0xb7, 0x8f, 0x2c, 0xf8, 0x1a, 0x48, 0x35, 0x37,
	0x91, 0x81, 0xed, 0x92, 0x30, 0x15, 0xaf, 0x64, 0xaf, 0xcc, 0x56, 0x5d, 0xcb, 0x56, 0xa3, 0x59,
	0xaa, 0xf4, 0x9a, 0x32, 0x49, 0x5f, 0x03, 0x60, 0x34, 0x82, 0x39, 0x90, 0x20, 0x13, 0xa7, 0x96,
	0xc8, 0xc0, 0x32, 0x48, 0xb1, 0xe9, 0xb8, 0x33, 0x1c, 0x49, 0x26, 0x22, 0xe7, 0x27, 0x3f, 0xdd,
	0x16, 0xb3, 0x0f, 0x08, 0xfb, 0x06, 0x15, 0x2c, 0xef, 0x0a, 0xa0, 0xc4, 0x75, 0xb2, 0x69, 0x78,
	0x81, 0x7e, 0x3d, 0x00, 0xb4, 0x1a, 0x06, 0x1a, 0x62, 0xf2, 0x42, 0x7d, 0x7d, 0x0c, 0xd4, 0x73,
	0x01, 0xa8, 0xc7, 0x3d, 0xb2, 0xb9, 0x41, 0x43, 0x60, 0x7f, 0x27, 0x00, 0xc9, 0xd1, 0x3b, 0xb0,
	0xb1, 0xd9, 0x43, 0x96, 0x17, 0xee, 0x9b, 0x01, 0xb8, 0x97, 0x23, 0xe0, 0x86, 0xd9, 0xbc, 0x80,
	0xdf, 0x18, 0x03, 0xf8, 0x7c, 0x00, 0xf0, 0x09, 0x2f, 0x60, 0x2e, 0x36, 0x0c, 0xf9, 0x37, 0x02,
	0x38, 0xc3, 0x75, 0xaf, 0x90, 0xc0, 0xf0, 0xe2, 0x7d, 0x3d, 0x80, 0xf7, 0x52, 0x18, 0x6f, 0x90,
	0xc7, 0x0b, 0xf6, 0xb5, 0x31, 0x60, 0xa7, 0x02, 0x60, 0x8b, 0x1e, 0xd1, 0x54, 0x66, 0x18, 0xe9,
	0xef, 0x05, 0xf0, 0x02, 0xd7, 0xba, 0x3a, 0x58, 0xeb, 0xea, 0xf6, 0x86, 0x1f, 0xed, 0x42, 0x00,
	0xed, 0x5c, 0x18, 0x6d, 0x14, 0x9f, 0x17, 0xf1, 0x9b, 0x63, 0x10, 0xbf, 0x14, 0x40, 0x7c, 0xd2,
	0x23, 0xde, 0x95, 0x3b, 0xd6, 0xbe, 0x6d, 0x42, 0x7b, 0x48, 0xfb, 0x06, 0x79, 0xfe, 0x17, 0xf6,
	0xa5, 0x32, 0xc3, 0x48, 0x87, 0x31, 0x90, 0x20, 0x39, 0x78, 0x84, 0x95, 0xeb, 0x15, 0x90, 0x68,
	0xf7, 0x51, 0x87, 0xd6, 0x2d, 0x7f, 0x00, 0x13, 0x60, 0xe4, 0x51, 0x3d, 0x47, 0x04, 0x3d, 0x7d,
	0x52, 0x4e, 0xd8, 0x7d, 0xd4, 0x51, 0xe8, 0x2f, 0xb1, 0x63, 0x1b, 0xab, 0x78, 0x60, 0x97, 0x12,
	0x94, 0xf1, 0x54, 0x90, 0x91, 0x3e, 0xac, 0x17, 0x38, 0x6b, 0xca, 0xa6, 0x63, 0x85, 0xff, 0xcf,
	0x67, 0x1f, 0x6f, 0x8b, 0x13, 0x30, 0x49, 0x79, 0xe4, 0xed, 0x18, 0xc8, 0x12, 0x9e, 0xa6, 0xa6,
	0x93, 0x96, 0x00, 0x67, 0x40, 0xaa, 0x69, 0x59, 0x2a, 0x56, 0x99, 0x61, 0xeb, 0x70, 0x6f, 0x47,
	0x4c, 0x2c, 0x9b, 0x06, 0x22, 0x82, 0x10, 0x7d, 0xa2, 0xf0, 0x7f, 0x78, 0x11, 0x24, 0xde, 0x45,
	0xaa, 0x45, 0x6d, 0x90, 0xa9, 0x9f, 0xd9, 0xdd, 0x11, 0xb3, 0x6d, 0x6c, 0x2d, 0x21, 0xa3, 0x72,
	0x6d, 0xf6, 0xda, 0x34, 0x01, 0xbd, 0x85, 0x54, 0x4b, 0xa1, 0xbf, 0xf0, 0x6d, 0x30, 0xa1, 0xa0,
	0x4d, 0x1d, 0x3d, 0xb0, 0x4b, 0x71, 0xea, 0xfd, 0xf3, 0x01, 0xd4, 0x1c, 0x41, 0x95, 0x53, 0x35,
	0x0d, 0x6c, 0x6d, 0xd5, 0xb3, 0xc4, 0xf2, 0x16, 0xbb, 0xa3, 0x38, 0x17, 0xd2, 0x6d, 0x90, 0xf3,
	0x52, 0xc1, 0x22, 0x88, 0xdf, 0x47, 0x5b, 0x0c, 0xb1, 0x42, 0x2e, 0xe1, 0x45, 0x90, 0xdc, 0x54,
	0xbb, 0x03, 0xc4, 0xfd, 0x13, 0xb4, 0x10, 0xe3, 0x56, 0x18, 0xcd, 0x7c, 0xec, 0x55, 0x41, 0xfe,
	0x89, 0x00, 0xd2, 0xe4, 0xc9, 0x92, 0x6e, 0x63, 0x28, 0x93, 0x88, 0x88, 0x45, 0x45, 0x44, 0xda,
	0xf1, 0x2b, 0x9c, 0x06, 0x69, 0x42, 0x4b, 0xee, 0x72, 0xff, 0x31, 0x52, 0xe7, 0xa6, 0x87, 0xf4,
	0x2c, 0x48, 0xb6, 0x30, 0xea, 0x11, 0x77, 0xc5, 0xa3, 0x9a, 0x40, 0xe1, 0xd3, 0x6d, 0x11, 0x74,
	0x75, 0x1b, 0xf3, 0xc8, 0x7c, 0x0f, 0x80, 0x11, 0x48, 0x38, 0x0b, 0x12, 0x8b, 0x2a, 0x46, 0x3c,
	0x42, 0x0b, 0x0c, 0x8f, 0xde, 0x43, 0x36, 0x56, 0x7b, 0xfd, 0x7a, 0x9a, 0x98, 0x59, 0x53, 0x31,
	0x52, 0xe8, 0x2f, 0x94, 0x41, 0x8a, 0xf1, 0x71, 0xaf, 0x00, 0xe2, 0x37, 0x66, 0x37, 0x85, 0xff,
	0xcb, 0xbf, 0x4a, 0xb0, 0xb9, 0x92, 0x00, 0x23, 0xdd, 0xb3, 0xd5, 0xae, 0x2f, 0xb7, 0x34, 0xc6,
	0xa0, 0xf0, 0x11, 0xb9, 0xbf, 0x30, 0xc0, 0x1b, 0xa6, 0xe5, 0x74, 0x55, 0x36, 0x82, 0x57, 0x01,
	0x68, 0x69, 0xab, 0x96, 0xb9, 0xa9, 0x6b, 0xc8, 0xa2, 0x01, 0x98, 0xa9, 0x9f, 0xd8, 0xdb, 0x11,
	0x27, 0x37, 0xe7, 0xe6, 0xef, 0x20, 0x1b, 0x3b, 0x8f, 0x14, 0x0f, 0x19, 0x54, 0x41, 0xba, 0xa1,
	0x62, 0xb4, 0x6e, 0x5a, 0x5b, 0xa5, 0x24, 0x65, 0x69, 0xee, 0xee, 0x88, 0x53, 0x6d, 0x6c, 0x35,
	0x8d, 0x41, 0xaf, 0xe2, 0x80, 0xa1, 0xe6, 0xe0, 0x84, 0x3a, 0xb2, 0xa7, 0xb9, 0xd8, 0xc6, 0x86,
	0xde, 0xd5, 0x2c, 0x64, 0xd8, 0x4b, 0x3a, 0xde, 0xdb, 0x11, 0xc1, 0xbb, 0xe6, 0xc0, 0x58, 0x5f,
	0xd0, 0x06, 0x5d, 0xac, 0xb8, 0x62, 0xe1, 0xab, 0x60, 0xf2, 0x6e, 0x9f, 0x98, 0xc0, 0xb5, 0x4d,
	0x29, 0x15, 0x65, 0x31, 0x25, 0x48, 0x06, 0x5f, 0x04, 0x99, 0x3b, 0xc8, 0xea, 0xe9, 0x06, 0xb1,
	0xf2, 0xc4, 0x94, 0x50, 0x49, 0x2b, 0xa3, 0x1b, 0x70, 0x05, 0xa4, 0x79, 0x64, 0xda, 0xa5, 0x34,
	0xf5, 0xdf, 0xb9, 0x88, 0x3c, 0xad, 0x3a, 0x34, 0x2c, 0x6c, 0x8b, 0x1f, 0xb3, 0xd4, 0x4f, 0x23,
	0x7e, 0x5b, 0x71, 0xaf, 0xa4, 0x36, 0xc8, 0xfb, 0x88, 0x23, 0xa2, 0x77, 0xd6, 0x1f, 0xbd, 0xa7,
	0xa3, 0x33, 0xc5, 0x1b, 0xbe, 0x2b, 0xa0, 0xe0, 0xb7, 0x1d, 0x2c, 0x82, 0x9c, 0xd7, 0x6e, 0xc5,
	0x63, 0xb0, 0x00, 0x3c, 0x96, 0x2b, 0x0a, 0x30, 0x0b, 0x26, 0xde, 0xd2, 0x3b, 0x44, 0x52, 0x31,
	0x46, 0x1e, 0x2e, 0x9b, 0x86, 0x33, 0x8e, 0xcb, 0x33, 0x2c, 0x06, 0x59, 0x29, 0x21, 0x26, 0x6a,
	0x19, 0xa4, 0xec, 0x12, 0x07, 0x12, 0xa0, 0x49, 0x65, 0x74, 0x43, 0xfe, 0x83, 0xe0, 0xac, 0xc0,
	0x8e, 0xb0, 0x96, 0xca, 0x20, 0xe7, 0x2c, 0x47, 0x1b, 0xa6, 0x86, 0x78, 0xd4, 0xfa, 0xee, 0x39,
	0x2b, 0x42, 0x86, 0x55, 0xfe, 0x99, 0x00, 0x00, 0xbb, 0x7c, 0x1e, 0x49, 0x3f, 0xe5, 0x4f, 0xfa,
	0x88, 0xe5, 0x54, 0x30, 0xed, 0x7f, 0x14, 0x03, 0x69, 0x67, 0xe1, 0x72, 0x84, 0x86, 0x9c, 0xf3,
	0x35, 0xa5, 0x33, 0x11, 0xab, 0x2a, 0xda, 0x98, 0x12, 0x44, 0x98, 0x42, 0x49, 0xe1, 0x57, 0x02,
	0x0d, 0x49, 0x8c, 0x62, 0x62, 0x4d, 0x89, 0xb1, 0x71, 0xf2, 0xf9, 0xc9, 0xc7, 0xdb, 0x62, 0x16,
	0x66, 0x3a, 0x9c, 0xc6, 0x96, 0x7f, 0x2e, 0x80, 0x9c, 0xc3, 0xf1, 0x3c, 0xbc, 0x22, 0xfb, 0xbd,
	0x12, 0xb9, 0x66, 0x0c, 0xfa, 0xe5, 0x4f, 0x02, 0x38, 0xe9, 0x3c, 0x5c, 0x45, 0x96, 0x6d, 0x1a,
	0x6a, 0xb7, 0x65, 0xbc, 0x6f, 0xc2, 0x26, 0x88, 0xb7, 0xdb, 0xcb, 0xbc, 0x51, 0x4e, 0x7f, 0xb4,
	0x23, 0xa6, 0xdb, 0xa8, 0x63, 0x21, 0x5c, 0xf1, 0x5d, 0x3f, 0x7d, 0x52, 0xce, 0xdb, 0xb6, 0x31,
	0x6b, 0xf6, 0x74, 0x8c, 0x7a, 0x7d, 0xbc, 0xa5, 0xf8, 0x87, 0x50, 0x03, 0xc5, 0x5b, 0x26, 0xde,
	0x40, 0xd6, 0x2d, 0x55, 0xd7, 0x90, 0xb1, 0xac, 0xf6, 0x10, 0x2f, 0xde, 0xb3, 0x01, 0x39, 0x2f,
	0xf6, 0x28, 0xdd, 0xa5, 0x1e, 0x25, 0xbc, 0x64, 0xa8, 0x3d, 0xe4, 0x11, 0x3b, 0xf6, 0xa9, 0xfc,
	0x6f, 0x8f, 0x65, 0xa9, 0xd3, 0x4a, 0x60, 0x62, 0x41, 0xd3, 0x2c, 0x64, 0xdb, 0xbc, 0xf4, 0x38,
	0x43, 0xf8, 0x36, 0x38, 0xde, 0xb0, 0x48, 0xbd, 0x6a, 0xa8, 0x96, 0xb6, 0x3c, 0xe8, 0xad, 0x21,
	0xcb, 0x2e, 0xc5, 0xa6, 0xe2, 0x95, 0x4c, 0xfd, 0xc5, 0xdd, 0x1d, 0x31, 0xc7, 0x9b, 0xfc, 0xd5,
	0xd9, 0xb9, 0xeb, 0xbe, 0x99, 0x2a, 0x61, 0x36, 0x58, 0x01, 0xe9, 0x55, 0xd5, 0xb6, 0x1f, 0x98,
	0x96, 0x46, 0x7d, 0x93, 0xab, 0xe7, 0x7c, 0x2c, 0xee, 0x53, 0xf8, 0x2e, 0x38, 0xe9, 0x5c, 0x2b,
	0xa8, 0x63, 0x6e, 0x22, 0x6b, 0x8b, 0x58, 0x99, 0x87, 0x54, 0x39, 0xc2, 0x53, 0x5e, 0x67, 0xf0,
	0xc0, 0x8a, 0x14, 0x21, 0x17, 0x41, 0xc1, 0x1f, 0x86, 0xf2, 0x3f, 0x05, 0x90, 0xa4, 0xeb, 0xee,
	0x23, 0x4c, 0xb4, 0xaa, 0x2f, 0xd1, 0x4e, 0x06, 0x77, 0x04, 0xa1, 0x2c, 0xbb, 0x16, 0xc8, 0xb2,
	0xd3, 0x21, 0x8e, 0xa8, 0x14, 0xf3, 0xef, 0x82, 0x11, 0xc8, 0x50, 0x52, 0x92, 0x04, 0xb0, 0xe2,
	0xb6, 0x7e, 0x16, 0xc2, 0x45, 0xbf, 0x73, 0x2f, 0x4f, 0xbb, 0x8b, 0x81, 0x2a, 0x48, 0xdf, 0x1e,
	0xa8, 0x06, 0xd6, 0xf1, 0x16, 0x9d, 0x73, 0xbe, 0x0e, 0x77, 0x77, 0xc4, 0x42, 0xcb, 0xc0, 0x8a,
	0x6a, 0xac, 0xa3, 0xca, 0xdc, 0xec, 0xd5, 0xcb, 0xd3, 0x8a, 0x4b, 0x23, 0xff, 0x54, 0xe0, 0x7a,
	0x9e, 0x47, 0x0e, 0x97, 0xfd, 0x39, 0x1c, 0xde, 0x4a, 0x05, 0x13, 0xb8, 0xcf, 0xc1, 0xf0, 0x5a,
	0x15, 0x73, 0x27, 0x5c, 0xde, 0xdb, 0x11, 0xf3, 0x03, 0xe3, 0xbe, 0x61, 0x3e, 0x30, 0xa6, 0xa8,
	0x85, 0x9e, 0x3e, 0x29, 0x03, 0x4f, 0x4a, 0x79, 0xae, 0xe1, 0x0c, 0x8f, 0x18, 0x9a, 0x09, 0x11,
	0xfe, 0x22, 0x98, 0x14, 0x46, 0x22, 0xff, 0x4b, 0x00, 0x59, 0x8f, 0x4b, 0xe0, 0x6b, 0xae, 0xeb,
	0x68, 0x5b, 0xaa, 0xbf, 0xe4, 0x5d, 0xfd, 0x78, 0x08, 0xbd, 0x7e, 0x9c, 0x76, 0x5c, 0x08, 0x67,
	0x41, 0xea, 0x2d, 0xbd, 0xdb, 0x45, 0x1a, 0x9f, 0x71, 0x64, 0xa8, 0x28, 0x9c, 0x86, 0xe4, 0xf5,
	0x2d, 0x64, 0xdb, 0xea, 0x3a, 0x62, 0x4b, 0x2d, 0xc5, 0x19, 0xca, 0x6b, 0x7e, 0x50, 0x59, 0x30,
	0xd1, 0x50, 0x9a, 0x0b, 0x77, 0x9a, 0x8b, 0x6c, 0x71, 0xb0, 0xaa, 0xac, 0x34, 0x9a, 0xed, 0x76,
	0x6b, 0xf9, 0x46, 0x51, 0x80, 0x00, 0xa4, 0xde, 0x6a, 0x2d, 0x2d, 0x35, 0x17, 0x8b, 0x31, 0x42,
	0xd8, 0xbe, 0xd9, 0x5a, 0x5d, 0x6d, 0x2e, 0x16, 0xe3, 0x30, 0x0f, 0x32, 0x8d, 0x95, 0x5b, 0xab,
	0x4b, 0x4d, 0xc2, 0x97, 0x20, 0x7c, 0x8b, 0xad, 0x76, 0x63, 0xe5, 0xee, 0x32, 0x19, 0x27, 0xe5,
	0xdf, 0x0a, 0x20, 0xbf, 0x32, 0xc0, 0xea, 0x3a, 0x52, 0xd0, 0x07, 0x03, 0x64, 0xe3, 0xa3, 0x3d,
	0x18, 0x52, 0x90, 0x6a, 0x8f, 0x0e, 0x86, 0xd8, 0xc8, 0xd9, 0x00, 0xd1, 0x7d, 0xa1, 0xfc, 0x67,
	0x01, 0x64, 0xdc, 0xfd, 0xec, 0x11, 0x82, 0xbd, 0xe2, 0xab, 0x06, 0xa5, 0xa8, 0xdd, 0x76, 0xb0,
	0x22, 0xcc, 0x17, 0x1f, 0x6f, 0x8b, 0x39, 0x08, 0xfa, 0x0e, 0x81, 0x2d, 0x7f, 0x28, 0x80, 0xbc,
	0x4b, 0xff, 0x3c, 0x92, 0xef, 0xbc, 0x3f, 0xf9, 0xa2, 0x4f, 0x05, 0x82, 0x09, 0x68, 0x7a, 0x40,
	0xd1, 0x24, 0x2c, 0xd0, 0x24, 0x64, 0x1b, 0x8e, 0x58, 0x4b, 0xf3, 0xf6, 0xa2, 0xb8, 0xbf, 0x17,
	0x5d, 0x03, 0x13, 0xf7, 0xd0, 0x1a, 0x19, 0xf1, 0xbd, 0x86, 0xb4, 0xbb, 0x23, 0x26, 0xef, 0x2a,
	0xad, 0xca, 0xf4, 0xee, 0x8e, 0x98, 0xe7, 0xd5, 0xea, 0xfa, 0xec, 0x95, 0x57, 0xae, 0x4f, 0x2b,
	0x0e, 0x29, 0x89, 0xc2, 0x82, 0x82, 0x6c, 0x6c, 0x76, 0xee, 0x7f, 0x79, 0xc3, 0x10, 0x3c, 0xde,
	0x16, 0x53, 0x90, 0x9e, 0x41, 0x90, 0x35, 0xc6, 0xa4, 0x0b, 0xd8, 0xee, 0x9b, 0x86, 0x8d, 0x8e,
	0x10, 0xf1, 0x49, 0x90, 0x24, 0xa8, 0xd8, 0x4e, 0x3d, 0xa3, 0xb0, 0x01, 0xb9, 0xdb, 0x20, 0x4b,
	0x69, 0xea, 0x88, 0xa4, 0xc2, 0x06, 0xbe, 0x59, 0xfc, 0x43, 0x00, 0x2c, 0xab, 0xbe, 0x94, 0x5d,
	0x95, 0x22, 0x3b, 0x54, 0x57, 0x65, 0x1c, 0x51, 0x5d, 0x95, 0x96, 0x10, 0x29, 0x49, 0xc9, 0x68,
	0xb7, 0xa3, 0xa4, 0x5f, 0x70, 0xb7, 0x63, 0x07, 0x5b, 0xc1, 0x64, 0xbb, 0xc0, 0xc1, 0x38, 0x8b,
	0xbc, 0x86, 0x69, 0x60, 0xb5, 0x83, 0x9d, 0x45, 0x1e, 0x1f, 0xca, 0xaf, 0x80, 0xac, 0x67, 0x7a,
	0xf0, 0x65, 0xb2, 0x44, 0xb2, 0x2c, 0x64, 0x60, 0x56, 0xbd, 0xd9, 0x19, 0x5d, 0x46, 0x09, 0xdc,
	0xbd, 0xf2, 0xb7, 0x32, 0x3b, 0x2f, 0xa2, 0x08, 0xde, 0x99, 0x83, 0x1a, 0xc8, 0x2c, 0x68, 0x1a,
	0x7b, 0x0a, 0xbd, 0x55, 0xcb, 0xd7, 0x04, 0xa4, 0x10, 0x6c, 0xf9, 0xe2, 0xde, 0x43, 0x31, 0xd5,
	0xb1, 0x90, 0x8a, 0xd1, 0x1f, 0x1f, 0x8a, 0xc2, 0x8f, 0xff, 0xf2, 0xf7, 0x0f, 0x63, 0x67, 0xc0,
	0xb1, 0x79, 0x61, 0x46, 0x2e, 0xd6, 0x28, 0x61, 0x6d, 0x24, 0x78, 0x0b, 0xe4, 0xe9, 0x0b, 0x07,
	0x8d, 0xef, 0xe6, 0xe0, 0x0b, 0xde, 0xa3, 0xc3, 0xc0, 0xab, 0x08, 0x29, 0xb4, 0x22, 0x90, 0xbf,
	0x1a, 0xa1, 0xec, 0x02, 0x53, 0x76, 0xb6, 0xc6, 0x96, 0x46, 0xb5, 0x1f, 0xac, 0x54, 0xc9, 0xd2,
	0xfb, 0x87, 0x35, 0xd5, 0xa7, 0xe9, 0x0d, 0x90, 0x5d, 0x18, 0x60, 0x73, 0x41, 0xd3, 0xe8, 0x61,
	0x61, 0xf0, 0xf0, 0x46, 0x0a, 0xde, 0x90, 0x0b, 0x7e, 0x5d, 0xb0, 0x09, 0xf2, 0x5c, 0x00, 0xdf,
	0x23, 0x87, 0xb7, 0x82, 0x52, 0xf8, 0x56, 0x48, 0xcc, 0x1a, 0x98, 0x74, 0xc4, 0x38, 0x7b, 0xc4,
	0xa8, 0xdd, 0x8b, 0x14, 0x75, 0x53, 0xbe, 0x10, 0x31, 0xff, 0xe3, 0x6c, 0xfe, 0xa0, 0xe6, 0xee,
	0xbe, 0xe0, 0x3b, 0x20, 0xc7, 0x75, 0xb0, 0xb5, 0x71, 0xc8, 0x90, 0x11, 0xa6, 0x95, 0x23, 0x44,
	0x17, 0x98, 0xe8, 0x09, 0x6e, 0x5a, 0xb8, 0x0c, 0x8a, 0x5c, 0xee, 0xa8, 0xd3, 0x46, 0x76, 0x0e,
	0x29, 0xf2, 0x6e, 0xc8, 0x16, 0x77, 0x5d, 0x9c, 0xac, 0xda, 0x84, 0xa2, 0x2b, 0x22, 0xde, 0xce,
	0x45, 0xe0, 0xcc, 0x33, 0x9c, 0x29, 0x16, 0x6f, 0xb0, 0x0e, 0x0a, 0x44, 0xec, 0x22, 0xea, 0x22,
	0x8c, 0x0e, 0xe3, 0x6d, 0x8d, 0x72, 0x50, 0x68, 0x37, 0xd9, 0x54, 0x99, 0x8c, 0xc3, 0x3b, 0xdc,
	0x23, 0xa9, 0x07, 0xa0, 0x47, 0xd2, 0xe1, 0x7d, 0x7e, 0xc9, 0x2f, 0x8f, 0x4e, 0x58, 0x04, 0xc7,
	0xe6, 0x8f, 0xcd, 0x9c, 0x18, 0xb9, 0xdc, 0x8d, 0x7a, 0xa8, 0xb2, 0xf8, 0x62, 0xea, 0x0e, 0xee,
	0xfe, 0x99, 0x08, 0x2d, 0xa7, 0xa9, 0x96, 0x62, 0x30, 0xb1, 0xe0, 0x6d, 0x70, 0x62, 0xa4, 0xe2,
	0x73, 0x44, 0x82, 0xc7, 0x48, 0xf7, 0xbc, 0xa8, 0x0f, 0x1e, 0x0c, 0x53, 0x11, 0xa8, 0x73, 0x14,
	0xb5, 0x13, 0x0b, 0xf7, 0x58, 0xda, 0xdf, 0x40, 0xf8, 0x80, 0x81, 0xf0, 0xf2, 0xde, 0x43, 0x31,
	0xbe, 0x8e, 0xb0, 0x2b, 0xef, 0x14, 0x91, 0x07, 0x27, 0x6b, 0x94, 0x6e, 0x64, 0x84, 0x3a, 0x2b,
	0x07, 0x37, 0x10, 0x3e, 0x54, 0x74, 0x64, 0x3d, 0xe2, 0xe1, 0x3a, 0x9b, 0x35, 0x91, 0x71, 0xf8,
	0xb8, 0x98, 0x09, 0x02, 0xa5, 0x41, 0x01, 0x23, 0x83, 0xe2, 0xdb, 0x2c, 0xd1, 0x6e, 0x20, 0x7c,
	0xf0, 0x88, 0xf8, 0xff, 0xa0, 0x7c, 0x1a, 0x0e, 0x30, 0x1c, 0x0e, 0xdf, 0x60, 0xa9, 0x72, 0x03,
	0xe1, 0xff, 0x2e, 0x16, 0x7c, 0x26, 0xb9, 0xed, 0x22, 0x3d, 0x78, 0x14, 0xfc, 0x5f, 0x10, 0x29,
	0x0d, 0x01, 0xe8, 0x84, 0xc0, 0x4d, 0x26, 0x92, 0xf4, 0x64, 0x1a, 0x03, 0xa7, 0xdc, 0x16, 0x4d,
	0x5f, 0x43, 0xad, 0xf4, 0xd9, 0x79, 0x6e, 0xf0, 0xb5, 0x0d, 0x21, 0x90, 0x73, 0x7b, 0x0f, 0xc5,
	0x04, 0x69, 0xca, 0x14, 0xdc, 0x12, 0x2b, 0x2c, 0xe4, 0x09, 0x77, 0xfa, 0x3e, 0xb2, 0x4e, 0x85,
	0x1c, 0x1f, 0x21, 0xed, 0x7d, 0x66, 0x37, 0x2a, 0xcd, 0x71, 0xff, 0x3e, 0xf2, 0xa2, 0x4e, 0xef,
	0xa8, 0x44, 0xd9, 0x2b, 0x91, 0xce, 0xbd, 0x48, 0xe7, 0xee, 0xed, 0x06, 0xdf, 0x65, 0x91, 0x4a,
	0xe8, 0x99, 0xf7, 0xf7, 0x51, 0x12, 0xda, 0x8e, 0x52, 0x0d, 0xe5, 0x90, 0x86, 0x3c, 0xd5, 0xe0,
	0x36, 0x05, 0x05, 0x1c, 0x77, 0xc4, 0x8f, 0xfc, 0xbf, 0x8f, 0x8a, 0xc8, 0xed, 0x50, 0x84, 0x69,
	0xde, 0x1e, 0x41, 0x66, 0x61, 0x70, 0x00, 0xc8, 0xee, 0xca, 0x2d, 0x20, 0xeb, 0x3d, 0xe6, 0x34,
	0xf6, 0xb6, 0xe0, 0x80, 0x45, 0x80, 0x56, 0xc3, 0x01, 0xe5, 0xf0, 0x85, 0xbf, 0x30, 0x23, 0x85,
	0x0a, 0x01, 0xef, 0x14, 0x4c, 0xfe, 0xe1, 0x3b, 0xc5, 0x48, 0x0b, 0x34, 0x58, 0xa7, 0xe0, 0x92,
	0x0e, 0x5f, 0x11, 0xaa, 0x11, 0xa8, 0x25, 0x86, 0x3a, 0xb2, 0x2a, 0xf0, 0xa5, 0x08, 0xd3, 0x77,
	0xf0, 0xc2, 0x70, 0x31, 0x42, 0x0d, 0x5b, 0xf1, 0x49, 0xfb, 0xf6, 0x0a, 0xa6, 0xe3, 0x73, 0xf4,
	0x0a, 0x8f, 0x99, 0xbe, 0xe9, 0x85, 0x7d, 0xc8, 0x85, 0x43, 0x00, 0x36, 0x5b, 0x38, 0x48, 0x4e,
	0xa5, 0xf8, 0x16, 0x0b, 0x3b, 0x1a, 0x62, 0xe3, 0x4a, 0xc5, 0xb9, 0x67, 0x7e, 0x58, 0x22, 0xe7,
	0xf7, 0x1e, 0x8a, 0x49, 0xfa, 0x9a, 0x9a, 0x28, 0xbb, 0x4c, 0xc2, 0x70, 0xd2, 0x95, 0x3d, 0xbe,
	0x78, 0x9c, 0x3f, 0xc0, 0xd7, 0x20, 0x61, 0xf9, 0x6b, 0x2c, 0x0d, 0x99, 0xfc, 0x67, 0x94, 0x93,
	0x0b, 0x07, 0xfa, 0x80, 0x23, 0xac, 0xe3, 0x3b, 0x2c, 0x95, 0x98, 0xac, 0x71, 0xa5, 0x44, 0x7e,
	0xf6, 0x17, 0x17, 0x61, 0xe9, 0x1a, 0x0b, 0x7f, 0x4a, 0xf3, 0xcc, 0x4a, 0xf2, 0xf2, 0xc1, 0xbe,
	0x92, 0x18, 0x3f, 0x87, 0xb1, 0xb5, 0x45, 0x7e, 0xf6, 0x57, 0x0d, 0x61, 0xe9, 0x5b, 0x20, 0xdf,
	0xe8, 0x22, 0xd5, 0xfa, 0x42, 0x36, 0x38, 0x1d, 0x9f, 0xa6, 0xfb, 0x60, 0x82, 0x9f, 0x3c, 0x40,
	0xef, 0x7b, 0x1b, 0xff, 0xf1, 0x89, 0x24, 0x45, 0x3d, 0x62, 0x07, 0x15, 0xf2, 0x74, 0x84, 0xf2,
	0x53, 0x4c, 0x79, 0x81, 0x57, 0x3d, 0xce, 0x22, 0x3d, 0x8a, 0xff, 0x62, 0x28, 0xc6, 0x36, 0xe7,
	0x7e, 0x39, 0x14, 0x47, 0x9f, 0xaf, 0x3d, 0x1a, 0x8a, 0xec, 0xdc, 0xf4, 0xd1, 0x50, 0xa4, 0x07,
	0x09, 0x8f, 0x86, 0xe2, 0xe8, 0x4c, 0x8e, 0x3c, 0x6d, 0x73, 0x32, 0xfe, 0xea, 0xee, 0xd1, 0x50,
	0x74, 0xdf, 0x94, 0xed, 0x0e, 0xc5, 0x22, 0xff, 0x90, 0x83, 0xf4, 0x72, 0x18, 0xef, 0x0f, 0xf0,
	0xee, 0x50, 0xbc, 0xe0, 0x9c, 0xef, 0x93, 0x31, 0x7b, 0xc2, 0x17, 0x7c, 0x30, 0xd1, 0x37, 0x6d,
	0x0c, 0x69, 0xa1, 0xdf, 0x1d, 0x8a, 0x65, 0xe7, 0xc8, 0x62, 0x44, 0xc8, 0x08, 0x38, 0xf9, 0xee,
	0x50, 0xac, 0x78, 0xde, 0xcb, 0x8d, 0x15, 0xf7, 0xd1, 0x50, 0xac, 0x41, 0xa6, 0x57, 0xca, 0xfb,
	0xb6, 0x91, 0x72, 0xe8, 0x83, 0xb9, 0x19, 0x46, 0xe7, 0x63, 0xf1, 0x39, 0x66, 0x1c, 0x4b, 0x85,
	0x9f, 0x5e, 0x4a, 0xa3, 0xcd, 0xb7, 0xec, 0x3f, 0x76, 0x9d, 0x61, 0x04, 0x1f, 0x0d, 0xc5, 0xcb,
	0xcc, 0x3a, 0x92, 0xe3, 0x65, 0x39, 0x70, 0x32, 0x36, 0x13, 0x3c, 0x78, 0xaa, 0xe7, 0x3e, 0xfe,
	0xec, 0xac, 0xf0, 0xc9, 0x67, 0x67, 0x85, 0xbf, 0x7e, 0x76, 0x56, 0x58, 0x3d, 0xb6, 0x96, 0xa2,
	0x9f, 0xfd, 0x5d, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x79, 0x4d, 0xf0, 0x80, 0x28,
	0x00, 0x00,
}
