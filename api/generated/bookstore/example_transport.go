// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstore is a auto generated package.
Input file: example.proto
*/
package bookstore

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerBookstoreV1 struct {
	Endpoints EndpointsBookstoreV1Server

	AddOutageHdlr           grpctransport.Handler
	ApplydiscountHdlr       grpctransport.Handler
	AutoAddBookHdlr         grpctransport.Handler
	AutoAddCouponHdlr       grpctransport.Handler
	AutoAddCustomerHdlr     grpctransport.Handler
	AutoAddOrderHdlr        grpctransport.Handler
	AutoAddPublisherHdlr    grpctransport.Handler
	AutoAddStoreHdlr        grpctransport.Handler
	AutoDeleteBookHdlr      grpctransport.Handler
	AutoDeleteCouponHdlr    grpctransport.Handler
	AutoDeleteCustomerHdlr  grpctransport.Handler
	AutoDeleteOrderHdlr     grpctransport.Handler
	AutoDeletePublisherHdlr grpctransport.Handler
	AutoDeleteStoreHdlr     grpctransport.Handler
	AutoGetBookHdlr         grpctransport.Handler
	AutoGetCouponHdlr       grpctransport.Handler
	AutoGetCustomerHdlr     grpctransport.Handler
	AutoGetOrderHdlr        grpctransport.Handler
	AutoGetPublisherHdlr    grpctransport.Handler
	AutoGetStoreHdlr        grpctransport.Handler
	AutoListBookHdlr        grpctransport.Handler
	AutoListCouponHdlr      grpctransport.Handler
	AutoListCustomerHdlr    grpctransport.Handler
	AutoListOrderHdlr       grpctransport.Handler
	AutoListPublisherHdlr   grpctransport.Handler
	AutoListStoreHdlr       grpctransport.Handler
	AutoUpdateBookHdlr      grpctransport.Handler
	AutoUpdateCouponHdlr    grpctransport.Handler
	AutoUpdateCustomerHdlr  grpctransport.Handler
	AutoUpdateOrderHdlr     grpctransport.Handler
	AutoUpdatePublisherHdlr grpctransport.Handler
	AutoUpdateStoreHdlr     grpctransport.Handler
	CleardiscountHdlr       grpctransport.Handler
	RestockHdlr             grpctransport.Handler
}

// MakeGRPCServerBookstoreV1 creates a GRPC server for BookstoreV1 service
func MakeGRPCServerBookstoreV1(ctx context.Context, endpoints EndpointsBookstoreV1Server, logger log.Logger) BookstoreV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerBookstoreV1{
		Endpoints: endpoints,
		AddOutageHdlr: grpctransport.NewServer(
			endpoints.AddOutageEndpoint,
			DecodeGrpcReqOutageRequest,
			EncodeGrpcRespStore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AddOutage", logger)))...,
		),

		ApplydiscountHdlr: grpctransport.NewServer(
			endpoints.ApplydiscountEndpoint,
			DecodeGrpcReqApplyDiscountReq,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Applydiscount", logger)))...,
		),

		AutoAddBookHdlr: grpctransport.NewServer(
			endpoints.AutoAddBookEndpoint,
			DecodeGrpcReqBook,
			EncodeGrpcRespBook,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddBook", logger)))...,
		),

		AutoAddCouponHdlr: grpctransport.NewServer(
			endpoints.AutoAddCouponEndpoint,
			DecodeGrpcReqCoupon,
			EncodeGrpcRespCoupon,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCoupon", logger)))...,
		),

		AutoAddCustomerHdlr: grpctransport.NewServer(
			endpoints.AutoAddCustomerEndpoint,
			DecodeGrpcReqCustomer,
			EncodeGrpcRespCustomer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCustomer", logger)))...,
		),

		AutoAddOrderHdlr: grpctransport.NewServer(
			endpoints.AutoAddOrderEndpoint,
			DecodeGrpcReqOrder,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddOrder", logger)))...,
		),

		AutoAddPublisherHdlr: grpctransport.NewServer(
			endpoints.AutoAddPublisherEndpoint,
			DecodeGrpcReqPublisher,
			EncodeGrpcRespPublisher,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddPublisher", logger)))...,
		),

		AutoAddStoreHdlr: grpctransport.NewServer(
			endpoints.AutoAddStoreEndpoint,
			DecodeGrpcReqStore,
			EncodeGrpcRespStore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddStore", logger)))...,
		),

		AutoDeleteBookHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteBookEndpoint,
			DecodeGrpcReqBook,
			EncodeGrpcRespBook,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteBook", logger)))...,
		),

		AutoDeleteCouponHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCouponEndpoint,
			DecodeGrpcReqCoupon,
			EncodeGrpcRespCoupon,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCoupon", logger)))...,
		),

		AutoDeleteCustomerHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCustomerEndpoint,
			DecodeGrpcReqCustomer,
			EncodeGrpcRespCustomer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCustomer", logger)))...,
		),

		AutoDeleteOrderHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteOrderEndpoint,
			DecodeGrpcReqOrder,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteOrder", logger)))...,
		),

		AutoDeletePublisherHdlr: grpctransport.NewServer(
			endpoints.AutoDeletePublisherEndpoint,
			DecodeGrpcReqPublisher,
			EncodeGrpcRespPublisher,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeletePublisher", logger)))...,
		),

		AutoDeleteStoreHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteStoreEndpoint,
			DecodeGrpcReqStore,
			EncodeGrpcRespStore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteStore", logger)))...,
		),

		AutoGetBookHdlr: grpctransport.NewServer(
			endpoints.AutoGetBookEndpoint,
			DecodeGrpcReqBook,
			EncodeGrpcRespBook,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetBook", logger)))...,
		),

		AutoGetCouponHdlr: grpctransport.NewServer(
			endpoints.AutoGetCouponEndpoint,
			DecodeGrpcReqCoupon,
			EncodeGrpcRespCoupon,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCoupon", logger)))...,
		),

		AutoGetCustomerHdlr: grpctransport.NewServer(
			endpoints.AutoGetCustomerEndpoint,
			DecodeGrpcReqCustomer,
			EncodeGrpcRespCustomer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCustomer", logger)))...,
		),

		AutoGetOrderHdlr: grpctransport.NewServer(
			endpoints.AutoGetOrderEndpoint,
			DecodeGrpcReqOrder,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetOrder", logger)))...,
		),

		AutoGetPublisherHdlr: grpctransport.NewServer(
			endpoints.AutoGetPublisherEndpoint,
			DecodeGrpcReqPublisher,
			EncodeGrpcRespPublisher,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetPublisher", logger)))...,
		),

		AutoGetStoreHdlr: grpctransport.NewServer(
			endpoints.AutoGetStoreEndpoint,
			DecodeGrpcReqStore,
			EncodeGrpcRespStore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetStore", logger)))...,
		),

		AutoListBookHdlr: grpctransport.NewServer(
			endpoints.AutoListBookEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespBookList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListBook", logger)))...,
		),

		AutoListCouponHdlr: grpctransport.NewServer(
			endpoints.AutoListCouponEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCouponList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCoupon", logger)))...,
		),

		AutoListCustomerHdlr: grpctransport.NewServer(
			endpoints.AutoListCustomerEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCustomerList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCustomer", logger)))...,
		),

		AutoListOrderHdlr: grpctransport.NewServer(
			endpoints.AutoListOrderEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespOrderList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListOrder", logger)))...,
		),

		AutoListPublisherHdlr: grpctransport.NewServer(
			endpoints.AutoListPublisherEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespPublisherList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListPublisher", logger)))...,
		),

		AutoListStoreHdlr: grpctransport.NewServer(
			endpoints.AutoListStoreEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespStoreList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListStore", logger)))...,
		),

		AutoUpdateBookHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateBookEndpoint,
			DecodeGrpcReqBook,
			EncodeGrpcRespBook,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateBook", logger)))...,
		),

		AutoUpdateCouponHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCouponEndpoint,
			DecodeGrpcReqCoupon,
			EncodeGrpcRespCoupon,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCoupon", logger)))...,
		),

		AutoUpdateCustomerHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCustomerEndpoint,
			DecodeGrpcReqCustomer,
			EncodeGrpcRespCustomer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCustomer", logger)))...,
		),

		AutoUpdateOrderHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateOrderEndpoint,
			DecodeGrpcReqOrder,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateOrder", logger)))...,
		),

		AutoUpdatePublisherHdlr: grpctransport.NewServer(
			endpoints.AutoUpdatePublisherEndpoint,
			DecodeGrpcReqPublisher,
			EncodeGrpcRespPublisher,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdatePublisher", logger)))...,
		),

		AutoUpdateStoreHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateStoreEndpoint,
			DecodeGrpcReqStore,
			EncodeGrpcRespStore,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateStore", logger)))...,
		),

		CleardiscountHdlr: grpctransport.NewServer(
			endpoints.CleardiscountEndpoint,
			DecodeGrpcReqApplyDiscountReq,
			EncodeGrpcRespOrder,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Cleardiscount", logger)))...,
		),

		RestockHdlr: grpctransport.NewServer(
			endpoints.RestockEndpoint,
			DecodeGrpcReqRestockRequest,
			EncodeGrpcRespRestockResponse,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Restock", logger)))...,
		),
	}
}

func (s *grpcServerBookstoreV1) AddOutage(ctx oldcontext.Context, req *OutageRequest) (*Store, error) {
	_, resp, err := s.AddOutageHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AddOutage).V
	return &r, resp.(respBookstoreV1AddOutage).Err
}

func decodeHTTPrespBookstoreV1AddOutage(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Store
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) Applydiscount(ctx oldcontext.Context, req *ApplyDiscountReq) (*Order, error) {
	_, resp, err := s.ApplydiscountHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1Applydiscount).V
	return &r, resp.(respBookstoreV1Applydiscount).Err
}

func decodeHTTPrespBookstoreV1Applydiscount(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddBook(ctx oldcontext.Context, req *Book) (*Book, error) {
	_, resp, err := s.AutoAddBookHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddBook).V
	return &r, resp.(respBookstoreV1AutoAddBook).Err
}

func decodeHTTPrespBookstoreV1AutoAddBook(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Book
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddCoupon(ctx oldcontext.Context, req *Coupon) (*Coupon, error) {
	_, resp, err := s.AutoAddCouponHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddCoupon).V
	return &r, resp.(respBookstoreV1AutoAddCoupon).Err
}

func decodeHTTPrespBookstoreV1AutoAddCoupon(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Coupon
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddCustomer(ctx oldcontext.Context, req *Customer) (*Customer, error) {
	_, resp, err := s.AutoAddCustomerHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddCustomer).V
	return &r, resp.(respBookstoreV1AutoAddCustomer).Err
}

func decodeHTTPrespBookstoreV1AutoAddCustomer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Customer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddOrder(ctx oldcontext.Context, req *Order) (*Order, error) {
	_, resp, err := s.AutoAddOrderHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddOrder).V
	return &r, resp.(respBookstoreV1AutoAddOrder).Err
}

func decodeHTTPrespBookstoreV1AutoAddOrder(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddPublisher(ctx oldcontext.Context, req *Publisher) (*Publisher, error) {
	_, resp, err := s.AutoAddPublisherHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddPublisher).V
	return &r, resp.(respBookstoreV1AutoAddPublisher).Err
}

func decodeHTTPrespBookstoreV1AutoAddPublisher(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Publisher
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoAddStore(ctx oldcontext.Context, req *Store) (*Store, error) {
	_, resp, err := s.AutoAddStoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoAddStore).V
	return &r, resp.(respBookstoreV1AutoAddStore).Err
}

func decodeHTTPrespBookstoreV1AutoAddStore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Store
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeleteBook(ctx oldcontext.Context, req *Book) (*Book, error) {
	_, resp, err := s.AutoDeleteBookHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeleteBook).V
	return &r, resp.(respBookstoreV1AutoDeleteBook).Err
}

func decodeHTTPrespBookstoreV1AutoDeleteBook(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Book
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeleteCoupon(ctx oldcontext.Context, req *Coupon) (*Coupon, error) {
	_, resp, err := s.AutoDeleteCouponHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeleteCoupon).V
	return &r, resp.(respBookstoreV1AutoDeleteCoupon).Err
}

func decodeHTTPrespBookstoreV1AutoDeleteCoupon(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Coupon
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeleteCustomer(ctx oldcontext.Context, req *Customer) (*Customer, error) {
	_, resp, err := s.AutoDeleteCustomerHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeleteCustomer).V
	return &r, resp.(respBookstoreV1AutoDeleteCustomer).Err
}

func decodeHTTPrespBookstoreV1AutoDeleteCustomer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Customer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeleteOrder(ctx oldcontext.Context, req *Order) (*Order, error) {
	_, resp, err := s.AutoDeleteOrderHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeleteOrder).V
	return &r, resp.(respBookstoreV1AutoDeleteOrder).Err
}

func decodeHTTPrespBookstoreV1AutoDeleteOrder(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeletePublisher(ctx oldcontext.Context, req *Publisher) (*Publisher, error) {
	_, resp, err := s.AutoDeletePublisherHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeletePublisher).V
	return &r, resp.(respBookstoreV1AutoDeletePublisher).Err
}

func decodeHTTPrespBookstoreV1AutoDeletePublisher(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Publisher
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoDeleteStore(ctx oldcontext.Context, req *Store) (*Store, error) {
	_, resp, err := s.AutoDeleteStoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoDeleteStore).V
	return &r, resp.(respBookstoreV1AutoDeleteStore).Err
}

func decodeHTTPrespBookstoreV1AutoDeleteStore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Store
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetBook(ctx oldcontext.Context, req *Book) (*Book, error) {
	_, resp, err := s.AutoGetBookHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetBook).V
	return &r, resp.(respBookstoreV1AutoGetBook).Err
}

func decodeHTTPrespBookstoreV1AutoGetBook(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Book
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetCoupon(ctx oldcontext.Context, req *Coupon) (*Coupon, error) {
	_, resp, err := s.AutoGetCouponHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetCoupon).V
	return &r, resp.(respBookstoreV1AutoGetCoupon).Err
}

func decodeHTTPrespBookstoreV1AutoGetCoupon(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Coupon
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetCustomer(ctx oldcontext.Context, req *Customer) (*Customer, error) {
	_, resp, err := s.AutoGetCustomerHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetCustomer).V
	return &r, resp.(respBookstoreV1AutoGetCustomer).Err
}

func decodeHTTPrespBookstoreV1AutoGetCustomer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Customer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetOrder(ctx oldcontext.Context, req *Order) (*Order, error) {
	_, resp, err := s.AutoGetOrderHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetOrder).V
	return &r, resp.(respBookstoreV1AutoGetOrder).Err
}

func decodeHTTPrespBookstoreV1AutoGetOrder(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetPublisher(ctx oldcontext.Context, req *Publisher) (*Publisher, error) {
	_, resp, err := s.AutoGetPublisherHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetPublisher).V
	return &r, resp.(respBookstoreV1AutoGetPublisher).Err
}

func decodeHTTPrespBookstoreV1AutoGetPublisher(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Publisher
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoGetStore(ctx oldcontext.Context, req *Store) (*Store, error) {
	_, resp, err := s.AutoGetStoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoGetStore).V
	return &r, resp.(respBookstoreV1AutoGetStore).Err
}

func decodeHTTPrespBookstoreV1AutoGetStore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Store
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListBook(ctx oldcontext.Context, req *api.ListWatchOptions) (*BookList, error) {
	_, resp, err := s.AutoListBookHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListBook).V
	return &r, resp.(respBookstoreV1AutoListBook).Err
}

func decodeHTTPrespBookstoreV1AutoListBook(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp BookList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListCoupon(ctx oldcontext.Context, req *api.ListWatchOptions) (*CouponList, error) {
	_, resp, err := s.AutoListCouponHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListCoupon).V
	return &r, resp.(respBookstoreV1AutoListCoupon).Err
}

func decodeHTTPrespBookstoreV1AutoListCoupon(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CouponList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListCustomer(ctx oldcontext.Context, req *api.ListWatchOptions) (*CustomerList, error) {
	_, resp, err := s.AutoListCustomerHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListCustomer).V
	return &r, resp.(respBookstoreV1AutoListCustomer).Err
}

func decodeHTTPrespBookstoreV1AutoListCustomer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CustomerList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListOrder(ctx oldcontext.Context, req *api.ListWatchOptions) (*OrderList, error) {
	_, resp, err := s.AutoListOrderHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListOrder).V
	return &r, resp.(respBookstoreV1AutoListOrder).Err
}

func decodeHTTPrespBookstoreV1AutoListOrder(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp OrderList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListPublisher(ctx oldcontext.Context, req *api.ListWatchOptions) (*PublisherList, error) {
	_, resp, err := s.AutoListPublisherHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListPublisher).V
	return &r, resp.(respBookstoreV1AutoListPublisher).Err
}

func decodeHTTPrespBookstoreV1AutoListPublisher(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PublisherList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoListStore(ctx oldcontext.Context, req *api.ListWatchOptions) (*StoreList, error) {
	_, resp, err := s.AutoListStoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoListStore).V
	return &r, resp.(respBookstoreV1AutoListStore).Err
}

func decodeHTTPrespBookstoreV1AutoListStore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StoreList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdateBook(ctx oldcontext.Context, req *Book) (*Book, error) {
	_, resp, err := s.AutoUpdateBookHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdateBook).V
	return &r, resp.(respBookstoreV1AutoUpdateBook).Err
}

func decodeHTTPrespBookstoreV1AutoUpdateBook(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Book
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdateCoupon(ctx oldcontext.Context, req *Coupon) (*Coupon, error) {
	_, resp, err := s.AutoUpdateCouponHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdateCoupon).V
	return &r, resp.(respBookstoreV1AutoUpdateCoupon).Err
}

func decodeHTTPrespBookstoreV1AutoUpdateCoupon(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Coupon
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdateCustomer(ctx oldcontext.Context, req *Customer) (*Customer, error) {
	_, resp, err := s.AutoUpdateCustomerHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdateCustomer).V
	return &r, resp.(respBookstoreV1AutoUpdateCustomer).Err
}

func decodeHTTPrespBookstoreV1AutoUpdateCustomer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Customer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdateOrder(ctx oldcontext.Context, req *Order) (*Order, error) {
	_, resp, err := s.AutoUpdateOrderHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdateOrder).V
	return &r, resp.(respBookstoreV1AutoUpdateOrder).Err
}

func decodeHTTPrespBookstoreV1AutoUpdateOrder(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdatePublisher(ctx oldcontext.Context, req *Publisher) (*Publisher, error) {
	_, resp, err := s.AutoUpdatePublisherHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdatePublisher).V
	return &r, resp.(respBookstoreV1AutoUpdatePublisher).Err
}

func decodeHTTPrespBookstoreV1AutoUpdatePublisher(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Publisher
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoUpdateStore(ctx oldcontext.Context, req *Store) (*Store, error) {
	_, resp, err := s.AutoUpdateStoreHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1AutoUpdateStore).V
	return &r, resp.(respBookstoreV1AutoUpdateStore).Err
}

func decodeHTTPrespBookstoreV1AutoUpdateStore(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Store
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) Cleardiscount(ctx oldcontext.Context, req *ApplyDiscountReq) (*Order, error) {
	_, resp, err := s.CleardiscountHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1Cleardiscount).V
	return &r, resp.(respBookstoreV1Cleardiscount).Err
}

func decodeHTTPrespBookstoreV1Cleardiscount(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Order
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) Restock(ctx oldcontext.Context, req *RestockRequest) (*RestockResponse, error) {
	_, resp, err := s.RestockHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respBookstoreV1Restock).V
	return &r, resp.(respBookstoreV1Restock).Err
}

func decodeHTTPrespBookstoreV1Restock(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RestockResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerBookstoreV1) AutoWatchSvcBookstoreV1(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchSvcBookstoreV1Server) error {
	return s.Endpoints.AutoWatchSvcBookstoreV1(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchOrder(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchOrderServer) error {
	return s.Endpoints.AutoWatchOrder(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchBook(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchBookServer) error {
	return s.Endpoints.AutoWatchBook(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchPublisher(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchPublisherServer) error {
	return s.Endpoints.AutoWatchPublisher(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchStore(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchStoreServer) error {
	return s.Endpoints.AutoWatchStore(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchCoupon(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCouponServer) error {
	return s.Endpoints.AutoWatchCoupon(in, stream)
}

func (s *grpcServerBookstoreV1) AutoWatchCustomer(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCustomerServer) error {
	return s.Endpoints.AutoWatchCustomer(in, stream)
}

func encodeHTTPApplyDiscountReq(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApplyDiscountReq(_ context.Context, r *http.Request) (interface{}, error) {
	var req ApplyDiscountReq
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApplyDiscountReq encodes GRPC request
func EncodeGrpcReqApplyDiscountReq(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ApplyDiscountReq)
	return req, nil
}

// DecodeGrpcReqApplyDiscountReq decodes GRPC request
func DecodeGrpcReqApplyDiscountReq(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ApplyDiscountReq)
	return req, nil
}

// EncodeGrpcRespApplyDiscountReq encodes GRC response
func EncodeGrpcRespApplyDiscountReq(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApplyDiscountReq decodes GRPC response
func DecodeGrpcRespApplyDiscountReq(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBook(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBook(_ context.Context, r *http.Request) (interface{}, error) {
	var req Book
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBook encodes GRPC request
func EncodeGrpcReqBook(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Book)
	return req, nil
}

// DecodeGrpcReqBook decodes GRPC request
func DecodeGrpcReqBook(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Book)
	return req, nil
}

// EncodeGrpcRespBook encodes GRC response
func EncodeGrpcRespBook(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBook decodes GRPC response
func DecodeGrpcRespBook(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBookEdition(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBookEdition(_ context.Context, r *http.Request) (interface{}, error) {
	var req BookEdition
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBookEdition encodes GRPC request
func EncodeGrpcReqBookEdition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookEdition)
	return req, nil
}

// DecodeGrpcReqBookEdition decodes GRPC request
func DecodeGrpcReqBookEdition(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookEdition)
	return req, nil
}

// EncodeGrpcRespBookEdition encodes GRC response
func EncodeGrpcRespBookEdition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBookEdition decodes GRPC response
func DecodeGrpcRespBookEdition(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBookList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBookList(_ context.Context, r *http.Request) (interface{}, error) {
	var req BookList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBookList encodes GRPC request
func EncodeGrpcReqBookList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookList)
	return req, nil
}

// DecodeGrpcReqBookList decodes GRPC request
func DecodeGrpcReqBookList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookList)
	return req, nil
}

// EncodeGrpcRespBookList endodes the GRPC response
func EncodeGrpcRespBookList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBookList decodes the GRPC response
func DecodeGrpcRespBookList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBookReview(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBookReview(_ context.Context, r *http.Request) (interface{}, error) {
	var req BookReview
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBookReview encodes GRPC request
func EncodeGrpcReqBookReview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookReview)
	return req, nil
}

// DecodeGrpcReqBookReview decodes GRPC request
func DecodeGrpcReqBookReview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookReview)
	return req, nil
}

// EncodeGrpcRespBookReview encodes GRC response
func EncodeGrpcRespBookReview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBookReview decodes GRPC response
func DecodeGrpcRespBookReview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBookSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBookSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req BookSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBookSpec encodes GRPC request
func EncodeGrpcReqBookSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookSpec)
	return req, nil
}

// DecodeGrpcReqBookSpec decodes GRPC request
func DecodeGrpcReqBookSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookSpec)
	return req, nil
}

// EncodeGrpcRespBookSpec encodes GRC response
func EncodeGrpcRespBookSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBookSpec decodes GRPC response
func DecodeGrpcRespBookSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBookStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBookStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req BookStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBookStatus encodes GRPC request
func EncodeGrpcReqBookStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookStatus)
	return req, nil
}

// DecodeGrpcReqBookStatus decodes GRPC request
func DecodeGrpcReqBookStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BookStatus)
	return req, nil
}

// EncodeGrpcRespBookStatus encodes GRC response
func EncodeGrpcRespBookStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBookStatus decodes GRPC response
func DecodeGrpcRespBookStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCoupon(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCoupon(_ context.Context, r *http.Request) (interface{}, error) {
	var req Coupon
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCoupon encodes GRPC request
func EncodeGrpcReqCoupon(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Coupon)
	return req, nil
}

// DecodeGrpcReqCoupon decodes GRPC request
func DecodeGrpcReqCoupon(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Coupon)
	return req, nil
}

// EncodeGrpcRespCoupon encodes GRC response
func EncodeGrpcRespCoupon(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCoupon decodes GRPC response
func DecodeGrpcRespCoupon(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCouponList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCouponList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CouponList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCouponList encodes GRPC request
func EncodeGrpcReqCouponList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CouponList)
	return req, nil
}

// DecodeGrpcReqCouponList decodes GRPC request
func DecodeGrpcReqCouponList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CouponList)
	return req, nil
}

// EncodeGrpcRespCouponList endodes the GRPC response
func EncodeGrpcRespCouponList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCouponList decodes the GRPC response
func DecodeGrpcRespCouponList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCouponSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCouponSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CouponSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCouponSpec encodes GRPC request
func EncodeGrpcReqCouponSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CouponSpec)
	return req, nil
}

// DecodeGrpcReqCouponSpec decodes GRPC request
func DecodeGrpcReqCouponSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CouponSpec)
	return req, nil
}

// EncodeGrpcRespCouponSpec encodes GRC response
func EncodeGrpcRespCouponSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCouponSpec decodes GRPC response
func DecodeGrpcRespCouponSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCustomer(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCustomer(_ context.Context, r *http.Request) (interface{}, error) {
	var req Customer
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCustomer encodes GRPC request
func EncodeGrpcReqCustomer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Customer)
	return req, nil
}

// DecodeGrpcReqCustomer decodes GRPC request
func DecodeGrpcReqCustomer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Customer)
	return req, nil
}

// EncodeGrpcRespCustomer encodes GRC response
func EncodeGrpcRespCustomer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCustomer decodes GRPC response
func DecodeGrpcRespCustomer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCustomerList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCustomerList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CustomerList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCustomerList encodes GRPC request
func EncodeGrpcReqCustomerList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerList)
	return req, nil
}

// DecodeGrpcReqCustomerList decodes GRPC request
func DecodeGrpcReqCustomerList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerList)
	return req, nil
}

// EncodeGrpcRespCustomerList endodes the GRPC response
func EncodeGrpcRespCustomerList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCustomerList decodes the GRPC response
func DecodeGrpcRespCustomerList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCustomerPersonalInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCustomerPersonalInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req CustomerPersonalInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCustomerPersonalInfo encodes GRPC request
func EncodeGrpcReqCustomerPersonalInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerPersonalInfo)
	return req, nil
}

// DecodeGrpcReqCustomerPersonalInfo decodes GRPC request
func DecodeGrpcReqCustomerPersonalInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerPersonalInfo)
	return req, nil
}

// EncodeGrpcRespCustomerPersonalInfo encodes GRC response
func EncodeGrpcRespCustomerPersonalInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCustomerPersonalInfo decodes GRPC response
func DecodeGrpcRespCustomerPersonalInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCustomerSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCustomerSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CustomerSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCustomerSpec encodes GRPC request
func EncodeGrpcReqCustomerSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerSpec)
	return req, nil
}

// DecodeGrpcReqCustomerSpec decodes GRPC request
func DecodeGrpcReqCustomerSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerSpec)
	return req, nil
}

// EncodeGrpcRespCustomerSpec encodes GRC response
func EncodeGrpcRespCustomerSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCustomerSpec decodes GRPC response
func DecodeGrpcRespCustomerSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCustomerStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCustomerStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CustomerStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCustomerStatus encodes GRPC request
func EncodeGrpcReqCustomerStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerStatus)
	return req, nil
}

// DecodeGrpcReqCustomerStatus decodes GRPC request
func DecodeGrpcReqCustomerStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CustomerStatus)
	return req, nil
}

// EncodeGrpcRespCustomerStatus encodes GRC response
func EncodeGrpcRespCustomerStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCustomerStatus decodes GRPC response
func DecodeGrpcRespCustomerStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOrder(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOrder(_ context.Context, r *http.Request) (interface{}, error) {
	var req Order
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOrder encodes GRPC request
func EncodeGrpcReqOrder(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Order)
	return req, nil
}

// DecodeGrpcReqOrder decodes GRPC request
func DecodeGrpcReqOrder(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Order)
	return req, nil
}

// EncodeGrpcRespOrder encodes GRC response
func EncodeGrpcRespOrder(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOrder decodes GRPC response
func DecodeGrpcRespOrder(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOrderItem(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOrderItem(_ context.Context, r *http.Request) (interface{}, error) {
	var req OrderItem
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOrderItem encodes GRPC request
func EncodeGrpcReqOrderItem(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderItem)
	return req, nil
}

// DecodeGrpcReqOrderItem decodes GRPC request
func DecodeGrpcReqOrderItem(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderItem)
	return req, nil
}

// EncodeGrpcRespOrderItem encodes GRC response
func EncodeGrpcRespOrderItem(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOrderItem decodes GRPC response
func DecodeGrpcRespOrderItem(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOrderList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOrderList(_ context.Context, r *http.Request) (interface{}, error) {
	var req OrderList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOrderList encodes GRPC request
func EncodeGrpcReqOrderList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderList)
	return req, nil
}

// DecodeGrpcReqOrderList decodes GRPC request
func DecodeGrpcReqOrderList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderList)
	return req, nil
}

// EncodeGrpcRespOrderList endodes the GRPC response
func EncodeGrpcRespOrderList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOrderList decodes the GRPC response
func DecodeGrpcRespOrderList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOrderSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOrderSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req OrderSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOrderSpec encodes GRPC request
func EncodeGrpcReqOrderSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderSpec)
	return req, nil
}

// DecodeGrpcReqOrderSpec decodes GRPC request
func DecodeGrpcReqOrderSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderSpec)
	return req, nil
}

// EncodeGrpcRespOrderSpec encodes GRC response
func EncodeGrpcRespOrderSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOrderSpec decodes GRPC response
func DecodeGrpcRespOrderSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOrderStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOrderStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req OrderStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOrderStatus encodes GRPC request
func EncodeGrpcReqOrderStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderStatus)
	return req, nil
}

// DecodeGrpcReqOrderStatus decodes GRPC request
func DecodeGrpcReqOrderStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OrderStatus)
	return req, nil
}

// EncodeGrpcRespOrderStatus encodes GRC response
func EncodeGrpcRespOrderStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOrderStatus decodes GRPC response
func DecodeGrpcRespOrderStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPOutageRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPOutageRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req OutageRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqOutageRequest encodes GRPC request
func EncodeGrpcReqOutageRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OutageRequest)
	return req, nil
}

// DecodeGrpcReqOutageRequest decodes GRPC request
func DecodeGrpcReqOutageRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*OutageRequest)
	return req, nil
}

// EncodeGrpcRespOutageRequest encodes GRC response
func EncodeGrpcRespOutageRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespOutageRequest decodes GRPC response
func DecodeGrpcRespOutageRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPublisher(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPublisher(_ context.Context, r *http.Request) (interface{}, error) {
	var req Publisher
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPublisher encodes GRPC request
func EncodeGrpcReqPublisher(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Publisher)
	return req, nil
}

// DecodeGrpcReqPublisher decodes GRPC request
func DecodeGrpcReqPublisher(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Publisher)
	return req, nil
}

// EncodeGrpcRespPublisher encodes GRC response
func EncodeGrpcRespPublisher(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPublisher decodes GRPC response
func DecodeGrpcRespPublisher(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPublisherList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPublisherList(_ context.Context, r *http.Request) (interface{}, error) {
	var req PublisherList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPublisherList encodes GRPC request
func EncodeGrpcReqPublisherList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherList)
	return req, nil
}

// DecodeGrpcReqPublisherList decodes GRPC request
func DecodeGrpcReqPublisherList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherList)
	return req, nil
}

// EncodeGrpcRespPublisherList endodes the GRPC response
func EncodeGrpcRespPublisherList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPublisherList decodes the GRPC response
func DecodeGrpcRespPublisherList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPublisherSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPublisherSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req PublisherSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPublisherSpec encodes GRPC request
func EncodeGrpcReqPublisherSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherSpec)
	return req, nil
}

// DecodeGrpcReqPublisherSpec decodes GRPC request
func DecodeGrpcReqPublisherSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherSpec)
	return req, nil
}

// EncodeGrpcRespPublisherSpec encodes GRC response
func EncodeGrpcRespPublisherSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPublisherSpec decodes GRPC response
func DecodeGrpcRespPublisherSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPublisherStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPublisherStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PublisherStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPublisherStatus encodes GRPC request
func EncodeGrpcReqPublisherStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherStatus)
	return req, nil
}

// DecodeGrpcReqPublisherStatus decodes GRPC request
func DecodeGrpcReqPublisherStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PublisherStatus)
	return req, nil
}

// EncodeGrpcRespPublisherStatus encodes GRC response
func EncodeGrpcRespPublisherStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPublisherStatus decodes GRPC response
func DecodeGrpcRespPublisherStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRestockRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRestockRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req RestockRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRestockRequest encodes GRPC request
func EncodeGrpcReqRestockRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RestockRequest)
	return req, nil
}

// DecodeGrpcReqRestockRequest decodes GRPC request
func DecodeGrpcReqRestockRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RestockRequest)
	return req, nil
}

// EncodeGrpcRespRestockRequest encodes GRC response
func EncodeGrpcRespRestockRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRestockRequest decodes GRPC response
func DecodeGrpcRespRestockRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRestockResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRestockResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req RestockResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRestockResponse encodes GRPC request
func EncodeGrpcReqRestockResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RestockResponse)
	return req, nil
}

// DecodeGrpcReqRestockResponse decodes GRPC request
func DecodeGrpcReqRestockResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RestockResponse)
	return req, nil
}

// EncodeGrpcRespRestockResponse encodes GRC response
func EncodeGrpcRespRestockResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRestockResponse decodes GRPC response
func DecodeGrpcRespRestockResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStore(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStore(_ context.Context, r *http.Request) (interface{}, error) {
	var req Store
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStore encodes GRPC request
func EncodeGrpcReqStore(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Store)
	return req, nil
}

// DecodeGrpcReqStore decodes GRPC request
func DecodeGrpcReqStore(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Store)
	return req, nil
}

// EncodeGrpcRespStore encodes GRC response
func EncodeGrpcRespStore(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStore decodes GRPC response
func DecodeGrpcRespStore(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStoreList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStoreList(_ context.Context, r *http.Request) (interface{}, error) {
	var req StoreList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStoreList encodes GRPC request
func EncodeGrpcReqStoreList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreList)
	return req, nil
}

// DecodeGrpcReqStoreList decodes GRPC request
func DecodeGrpcReqStoreList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreList)
	return req, nil
}

// EncodeGrpcRespStoreList endodes the GRPC response
func EncodeGrpcRespStoreList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStoreList decodes the GRPC response
func DecodeGrpcRespStoreList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStoreSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStoreSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req StoreSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStoreSpec encodes GRPC request
func EncodeGrpcReqStoreSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreSpec)
	return req, nil
}

// DecodeGrpcReqStoreSpec decodes GRPC request
func DecodeGrpcReqStoreSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreSpec)
	return req, nil
}

// EncodeGrpcRespStoreSpec encodes GRC response
func EncodeGrpcRespStoreSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStoreSpec decodes GRPC response
func DecodeGrpcRespStoreSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStoreStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStoreStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req StoreStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStoreStatus encodes GRPC request
func EncodeGrpcReqStoreStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreStatus)
	return req, nil
}

// DecodeGrpcReqStoreStatus decodes GRPC request
func DecodeGrpcReqStoreStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StoreStatus)
	return req, nil
}

// EncodeGrpcRespStoreStatus encodes GRC response
func EncodeGrpcRespStoreStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStoreStatus decodes GRPC response
func DecodeGrpcRespStoreStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPUnusedMessage(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPUnusedMessage(_ context.Context, r *http.Request) (interface{}, error) {
	var req UnusedMessage
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqUnusedMessage encodes GRPC request
func EncodeGrpcReqUnusedMessage(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UnusedMessage)
	return req, nil
}

// DecodeGrpcReqUnusedMessage decodes GRPC request
func DecodeGrpcReqUnusedMessage(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*UnusedMessage)
	return req, nil
}

// EncodeGrpcRespUnusedMessage encodes GRC response
func EncodeGrpcRespUnusedMessage(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespUnusedMessage decodes GRPC response
func DecodeGrpcRespUnusedMessage(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
