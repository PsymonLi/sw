// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstore is a auto generated package.
Input file: protos/example.proto
*/
package bookstore

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareBookstoreV1Client add middleware to the client
type MiddlewareBookstoreV1Client func(ServiceBookstoreV1Client) ServiceBookstoreV1Client

// EndpointsBookstoreV1Client is the endpoints for the client
type EndpointsBookstoreV1Client struct {
	Client BookstoreV1Client

	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint
}

// EndpointsBookstoreV1RestClient is the REST client
type EndpointsBookstoreV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoWatchOrderEndpoint      endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoWatchBookEndpoint       endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint
	AutoWatchPublisherEndpoint  endpoint.Endpoint
}

// MiddlewareBookstoreV1Server adds middle ware to the server
type MiddlewareBookstoreV1Server func(ServiceBookstoreV1Server) ServiceBookstoreV1Server

// EndpointsBookstoreV1Server is the server endpoints
type EndpointsBookstoreV1Server struct {
	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint

	watchHandlerOrder     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerBook      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerPublisher func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddOrder is endpoint for AutoAddOrder
func (e EndpointsBookstoreV1Client) AutoAddOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoAddOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoAddOrder struct {
	V   Order
	Err error
}

// AutoUpdateOrder is endpoint for AutoUpdateOrder
func (e EndpointsBookstoreV1Client) AutoUpdateOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoUpdateOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoUpdateOrder struct {
	V   Order
	Err error
}

// AutoGetOrder is endpoint for AutoGetOrder
func (e EndpointsBookstoreV1Client) AutoGetOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoGetOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoGetOrder struct {
	V   Order
	Err error
}

// AutoDeleteOrder is endpoint for AutoDeleteOrder
func (e EndpointsBookstoreV1Client) AutoDeleteOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoDeleteOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoDeleteOrder struct {
	V   Order
	Err error
}

// AutoListOrder is endpoint for AutoListOrder
func (e EndpointsBookstoreV1Client) AutoListOrder(ctx context.Context, in *api.ListWatchOptions) (*AutoMsgOrderListHelper, error) {
	resp, err := e.AutoListOrderEndpoint(ctx, in)
	if err != nil {
		return &AutoMsgOrderListHelper{}, err
	}
	return resp.(*AutoMsgOrderListHelper), nil
}

type respBookstoreV1AutoListOrder struct {
	V   AutoMsgOrderListHelper
	Err error
}

// AutoAddBook is endpoint for AutoAddBook
func (e EndpointsBookstoreV1Client) AutoAddBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoAddBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoAddBook struct {
	V   Book
	Err error
}

// AutoUpdateBook is endpoint for AutoUpdateBook
func (e EndpointsBookstoreV1Client) AutoUpdateBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoUpdateBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoUpdateBook struct {
	V   Book
	Err error
}

// AutoGetBook is endpoint for AutoGetBook
func (e EndpointsBookstoreV1Client) AutoGetBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoGetBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoGetBook struct {
	V   Book
	Err error
}

// AutoDeleteBook is endpoint for AutoDeleteBook
func (e EndpointsBookstoreV1Client) AutoDeleteBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoDeleteBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoDeleteBook struct {
	V   Book
	Err error
}

// AutoListBook is endpoint for AutoListBook
func (e EndpointsBookstoreV1Client) AutoListBook(ctx context.Context, in *api.ListWatchOptions) (*AutoMsgBookListHelper, error) {
	resp, err := e.AutoListBookEndpoint(ctx, in)
	if err != nil {
		return &AutoMsgBookListHelper{}, err
	}
	return resp.(*AutoMsgBookListHelper), nil
}

type respBookstoreV1AutoListBook struct {
	V   AutoMsgBookListHelper
	Err error
}

// AutoAddPublisher is endpoint for AutoAddPublisher
func (e EndpointsBookstoreV1Client) AutoAddPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoAddPublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoAddPublisher struct {
	V   Publisher
	Err error
}

// AutoUpdatePublisher is endpoint for AutoUpdatePublisher
func (e EndpointsBookstoreV1Client) AutoUpdatePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoUpdatePublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoUpdatePublisher struct {
	V   Publisher
	Err error
}

// AutoGetPublisher is endpoint for AutoGetPublisher
func (e EndpointsBookstoreV1Client) AutoGetPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoGetPublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoGetPublisher struct {
	V   Publisher
	Err error
}

// AutoDeletePublisher is endpoint for AutoDeletePublisher
func (e EndpointsBookstoreV1Client) AutoDeletePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoDeletePublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoDeletePublisher struct {
	V   Publisher
	Err error
}

// AutoListPublisher is endpoint for AutoListPublisher
func (e EndpointsBookstoreV1Client) AutoListPublisher(ctx context.Context, in *api.ListWatchOptions) (*AutoMsgPublisherListHelper, error) {
	resp, err := e.AutoListPublisherEndpoint(ctx, in)
	if err != nil {
		return &AutoMsgPublisherListHelper{}, err
	}
	return resp.(*AutoMsgPublisherListHelper), nil
}

type respBookstoreV1AutoListPublisher struct {
	V   AutoMsgPublisherListHelper
	Err error
}

// AutoWatchOrder performs Watch for Order
func (e EndpointsBookstoreV1Client) AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchOrderClient, error) {
	return e.Client.AutoWatchOrder(ctx, in)
}

// AutoWatchBook performs Watch for Book
func (e EndpointsBookstoreV1Client) AutoWatchBook(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchBookClient, error) {
	return e.Client.AutoWatchBook(ctx, in)
}

// AutoWatchPublisher performs Watch for Publisher
func (e EndpointsBookstoreV1Client) AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchPublisherClient, error) {
	return e.Client.AutoWatchPublisher(ctx, in)
}

// AutoAddOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoAddOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoAddOrderEndpoint creates  AutoAddOrder endpoints for the service
func MakeBookstoreV1AutoAddOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoAddOrder(ctx, *req)
		return respBookstoreV1AutoAddOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoAddOrder")(f)
}

// AutoUpdateOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoUpdateOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoUpdateOrderEndpoint creates  AutoUpdateOrder endpoints for the service
func MakeBookstoreV1AutoUpdateOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoUpdateOrder(ctx, *req)
		return respBookstoreV1AutoUpdateOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoUpdateOrder")(f)
}

// AutoGetOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoGetOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoGetOrderEndpoint creates  AutoGetOrder endpoints for the service
func MakeBookstoreV1AutoGetOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoGetOrder(ctx, *req)
		return respBookstoreV1AutoGetOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoGetOrder")(f)
}

// AutoDeleteOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoDeleteOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoDeleteOrderEndpoint creates  AutoDeleteOrder endpoints for the service
func MakeBookstoreV1AutoDeleteOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoDeleteOrder(ctx, *req)
		return respBookstoreV1AutoDeleteOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoDeleteOrder")(f)
}

// AutoListOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListOrder(ctx context.Context, in api.ListWatchOptions) (AutoMsgOrderListHelper, error) {
	resp, err := e.AutoListOrderEndpoint(ctx, in)
	if err != nil {
		return AutoMsgOrderListHelper{}, err
	}
	return *resp.(*AutoMsgOrderListHelper), nil
}

// MakeBookstoreV1AutoListOrderEndpoint creates  AutoListOrder endpoints for the service
func MakeBookstoreV1AutoListOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListOrder(ctx, *req)
		return respBookstoreV1AutoListOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoListOrder")(f)
}

// AutoAddBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoAddBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoAddBookEndpoint creates  AutoAddBook endpoints for the service
func MakeBookstoreV1AutoAddBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoAddBook(ctx, *req)
		return respBookstoreV1AutoAddBook{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoAddBook")(f)
}

// AutoUpdateBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoUpdateBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoUpdateBookEndpoint creates  AutoUpdateBook endpoints for the service
func MakeBookstoreV1AutoUpdateBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoUpdateBook(ctx, *req)
		return respBookstoreV1AutoUpdateBook{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoUpdateBook")(f)
}

// AutoGetBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoGetBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoGetBookEndpoint creates  AutoGetBook endpoints for the service
func MakeBookstoreV1AutoGetBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoGetBook(ctx, *req)
		return respBookstoreV1AutoGetBook{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoGetBook")(f)
}

// AutoDeleteBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoDeleteBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoDeleteBookEndpoint creates  AutoDeleteBook endpoints for the service
func MakeBookstoreV1AutoDeleteBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoDeleteBook(ctx, *req)
		return respBookstoreV1AutoDeleteBook{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoDeleteBook")(f)
}

// AutoListBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListBook(ctx context.Context, in api.ListWatchOptions) (AutoMsgBookListHelper, error) {
	resp, err := e.AutoListBookEndpoint(ctx, in)
	if err != nil {
		return AutoMsgBookListHelper{}, err
	}
	return *resp.(*AutoMsgBookListHelper), nil
}

// MakeBookstoreV1AutoListBookEndpoint creates  AutoListBook endpoints for the service
func MakeBookstoreV1AutoListBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListBook(ctx, *req)
		return respBookstoreV1AutoListBook{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoListBook")(f)
}

// AutoAddPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddPublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoAddPublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoAddPublisherEndpoint creates  AutoAddPublisher endpoints for the service
func MakeBookstoreV1AutoAddPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoAddPublisher(ctx, *req)
		return respBookstoreV1AutoAddPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoAddPublisher")(f)
}

// AutoUpdatePublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdatePublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoUpdatePublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoUpdatePublisherEndpoint creates  AutoUpdatePublisher endpoints for the service
func MakeBookstoreV1AutoUpdatePublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoUpdatePublisher(ctx, *req)
		return respBookstoreV1AutoUpdatePublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoUpdatePublisher")(f)
}

// AutoGetPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetPublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoGetPublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoGetPublisherEndpoint creates  AutoGetPublisher endpoints for the service
func MakeBookstoreV1AutoGetPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoGetPublisher(ctx, *req)
		return respBookstoreV1AutoGetPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoGetPublisher")(f)
}

// AutoDeletePublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeletePublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoDeletePublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoDeletePublisherEndpoint creates  AutoDeletePublisher endpoints for the service
func MakeBookstoreV1AutoDeletePublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoDeletePublisher(ctx, *req)
		return respBookstoreV1AutoDeletePublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoDeletePublisher")(f)
}

// AutoListPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListPublisher(ctx context.Context, in api.ListWatchOptions) (AutoMsgPublisherListHelper, error) {
	resp, err := e.AutoListPublisherEndpoint(ctx, in)
	if err != nil {
		return AutoMsgPublisherListHelper{}, err
	}
	return *resp.(*AutoMsgPublisherListHelper), nil
}

// MakeBookstoreV1AutoListPublisherEndpoint creates  AutoListPublisher endpoints for the service
func MakeBookstoreV1AutoListPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListPublisher(ctx, *req)
		return respBookstoreV1AutoListPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "BookstoreV1:AutoListPublisher")(f)
}

// AutoWatchOrder is the watch handler for Order on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchOrder(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchOrderServer) error {
	return e.watchHandlerOrder(in, stream)
}

// MakeAutoWatchOrderEndpoint creates the Watch endpoint
func MakeAutoWatchOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchOrderServer)
		return s.AutoWatchOrder(options, wstream)
	}
}

// AutoWatchBook is the watch handler for Book on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchBook(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchBookServer) error {
	return e.watchHandlerBook(in, stream)
}

// MakeAutoWatchBookEndpoint creates the Watch endpoint
func MakeAutoWatchBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchBookServer)
		return s.AutoWatchBook(options, wstream)
	}
}

// AutoWatchPublisher is the watch handler for Publisher on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchPublisher(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchPublisherServer) error {
	return e.watchHandlerPublisher(in, stream)
}

// MakeAutoWatchPublisherEndpoint creates the Watch endpoint
func MakeAutoWatchPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchPublisherServer)
		return s.AutoWatchPublisher(options, wstream)
	}
}

// MakeBookstoreV1ServerEndpoints creates server endpoints
func MakeBookstoreV1ServerEndpoints(s ServiceBookstoreV1Server, logger log.Logger) EndpointsBookstoreV1Server {
	return EndpointsBookstoreV1Server{

		AutoAddOrderEndpoint:        MakeBookstoreV1AutoAddOrderEndpoint(s, logger),
		AutoUpdateOrderEndpoint:     MakeBookstoreV1AutoUpdateOrderEndpoint(s, logger),
		AutoGetOrderEndpoint:        MakeBookstoreV1AutoGetOrderEndpoint(s, logger),
		AutoDeleteOrderEndpoint:     MakeBookstoreV1AutoDeleteOrderEndpoint(s, logger),
		AutoListOrderEndpoint:       MakeBookstoreV1AutoListOrderEndpoint(s, logger),
		AutoAddBookEndpoint:         MakeBookstoreV1AutoAddBookEndpoint(s, logger),
		AutoUpdateBookEndpoint:      MakeBookstoreV1AutoUpdateBookEndpoint(s, logger),
		AutoGetBookEndpoint:         MakeBookstoreV1AutoGetBookEndpoint(s, logger),
		AutoDeleteBookEndpoint:      MakeBookstoreV1AutoDeleteBookEndpoint(s, logger),
		AutoListBookEndpoint:        MakeBookstoreV1AutoListBookEndpoint(s, logger),
		AutoAddPublisherEndpoint:    MakeBookstoreV1AutoAddPublisherEndpoint(s, logger),
		AutoUpdatePublisherEndpoint: MakeBookstoreV1AutoUpdatePublisherEndpoint(s, logger),
		AutoGetPublisherEndpoint:    MakeBookstoreV1AutoGetPublisherEndpoint(s, logger),
		AutoDeletePublisherEndpoint: MakeBookstoreV1AutoDeletePublisherEndpoint(s, logger),
		AutoListPublisherEndpoint:   MakeBookstoreV1AutoListPublisherEndpoint(s, logger),

		watchHandlerOrder:     MakeAutoWatchOrderEndpoint(s, logger),
		watchHandlerBook:      MakeAutoWatchBookEndpoint(s, logger),
		watchHandlerPublisher: MakeAutoWatchPublisherEndpoint(s, logger),
	}
}

// LoggingBookstoreV1MiddlewareClient adds middleware for the client
func LoggingBookstoreV1MiddlewareClient(logger log.Logger) MiddlewareBookstoreV1Client {
	return func(next ServiceBookstoreV1Client) ServiceBookstoreV1Client {
		return loggingBookstoreV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBookstoreV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceBookstoreV1Client
}

// LoggingBookstoreV1MiddlewareServer adds middleware for the client
func LoggingBookstoreV1MiddlewareServer(logger log.Logger) MiddlewareBookstoreV1Server {
	return func(next ServiceBookstoreV1Server) ServiceBookstoreV1Server {
		return loggingBookstoreV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBookstoreV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceBookstoreV1Server
}

func (m loggingBookstoreV1MiddlewareClient) AutoAddOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListOrder(ctx context.Context, in *api.ListWatchOptions) (resp *AutoMsgOrderListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListBook(ctx context.Context, in *api.ListWatchOptions) (resp *AutoMsgBookListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddPublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdatePublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdatePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdatePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetPublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeletePublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeletePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeletePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListPublisher(ctx context.Context, in *api.ListWatchOptions) (resp *AutoMsgPublisherListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListPublisher(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareClient) AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchOrderClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchBook(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchBookClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchPublisherClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchPublisher(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareServer) AutoAddOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListOrder(ctx context.Context, in api.ListWatchOptions) (resp AutoMsgOrderListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListBook(ctx context.Context, in api.ListWatchOptions) (resp AutoMsgBookListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddPublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdatePublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdatePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdatePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetPublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeletePublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeletePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeletePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListPublisher(ctx context.Context, in api.ListWatchOptions) (resp AutoMsgPublisherListHelper, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListPublisher(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareServer) AutoWatchOrder(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchOrderServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchOrder(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchBook(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchBookServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchBook(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchPublisher(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchPublisherServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchPublisher(in, stream)
	return
}
func (r *EndpointsBookstoreV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIBookstoreV1AutoAddOrderCreateOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders")
}

//
func makeURIBookstoreV1AutoUpdateOrderUpdateOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoGetOrderGetOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoDeleteOrderDeleteOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoListOrderListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/bookstore", "/orders")
}

//
func makeURIBookstoreV1AutoGetBookGetOper(in *Book) string {
	return fmt.Sprint("/v1/bookstore", "/books/", in.Spec.ISBNId)
}

// AutoAddOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoAddOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoAddOrderCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoAddOrder(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), nil
}

// AutoUpdateOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoUpdateOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoUpdateOrderUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoUpdateOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoGetOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoGetOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoGetOrderGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoDeleteOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoDeleteOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoDeleteOrderDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoDeleteOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoListOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoListOrder(ctx context.Context, options *api.ListWatchOptions) (*AutoMsgOrderListHelper, error) {
	path := makeURIBookstoreV1AutoListOrderListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoListOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AutoMsgOrderListHelper), err
}

// AutoWatchOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoWatchOrder(ctx context.Context, in *Order) (*Order, error) {
	return nil, errors.New("not allowed")
}

// AutoAddBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoAddBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoUpdateBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoGetBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoGetBook(ctx context.Context, in *Book) (*Book, error) {
	path := makeURIBookstoreV1AutoGetBookGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetBook(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Book), err
}

// AutoDeleteBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoDeleteBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoListBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoListBook(ctx context.Context, options *api.ListWatchOptions) (*AutoMsgBookListHelper, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoWatchBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoAddPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoAddPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdatePublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoUpdatePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoGetPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoGetPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoDeletePublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoDeletePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoListPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoListPublisher(ctx context.Context, options *api.ListWatchOptions) (*AutoMsgPublisherListHelper, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoWatchPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// MakeBookstoreV1RestClientEndpoints make REST client endpoints
func MakeBookstoreV1RestClientEndpoints(instance string) (EndpointsBookstoreV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsBookstoreV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
