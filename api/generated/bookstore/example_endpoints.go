// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package bookstore is a auto generated package.
Input file: example.proto
*/
package bookstore

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareBookstoreV1Client add middleware to the client
type MiddlewareBookstoreV1Client func(ServiceBookstoreV1Client) ServiceBookstoreV1Client

// EndpointsBookstoreV1Client is the endpoints for the client
type EndpointsBookstoreV1Client struct {
	Client BookstoreV1Client

	AddOutageEndpoint           endpoint.Endpoint
	ApplydiscountEndpoint       endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoAddCouponEndpoint       endpoint.Endpoint
	AutoAddCustomerEndpoint     endpoint.Endpoint
	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoAddStoreEndpoint        endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoDeleteCouponEndpoint    endpoint.Endpoint
	AutoDeleteCustomerEndpoint  endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoDeleteStoreEndpoint     endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoGetCouponEndpoint       endpoint.Endpoint
	AutoGetCustomerEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoGetStoreEndpoint        endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoListCouponEndpoint      endpoint.Endpoint
	AutoListCustomerEndpoint    endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint
	AutoListStoreEndpoint       endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoUpdateCouponEndpoint    endpoint.Endpoint
	AutoUpdateCustomerEndpoint  endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoUpdateStoreEndpoint     endpoint.Endpoint
	CleardiscountEndpoint       endpoint.Endpoint
	RestockEndpoint             endpoint.Endpoint
}

// EndpointsBookstoreV1RestClient is the REST client
type EndpointsBookstoreV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AddOutageEndpoint           endpoint.Endpoint
	ApplydiscountEndpoint       endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoAddCouponEndpoint       endpoint.Endpoint
	AutoAddCustomerEndpoint     endpoint.Endpoint
	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoAddStoreEndpoint        endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoDeleteCouponEndpoint    endpoint.Endpoint
	AutoDeleteCustomerEndpoint  endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoDeleteStoreEndpoint     endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoGetCouponEndpoint       endpoint.Endpoint
	AutoGetCustomerEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoGetStoreEndpoint        endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoListCouponEndpoint      endpoint.Endpoint
	AutoListCustomerEndpoint    endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint
	AutoListStoreEndpoint       endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoUpdateCouponEndpoint    endpoint.Endpoint
	AutoUpdateCustomerEndpoint  endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoUpdateStoreEndpoint     endpoint.Endpoint
	AutoWatchBookEndpoint       endpoint.Endpoint
	AutoWatchCouponEndpoint     endpoint.Endpoint
	AutoWatchCustomerEndpoint   endpoint.Endpoint
	AutoWatchOrderEndpoint      endpoint.Endpoint
	AutoWatchPublisherEndpoint  endpoint.Endpoint
	AutoWatchStoreEndpoint      endpoint.Endpoint
	CleardiscountEndpoint       endpoint.Endpoint
	RestockEndpoint             endpoint.Endpoint
}

// MiddlewareBookstoreV1Server adds middle ware to the server
type MiddlewareBookstoreV1Server func(ServiceBookstoreV1Server) ServiceBookstoreV1Server

// EndpointsBookstoreV1Server is the server endpoints
type EndpointsBookstoreV1Server struct {
	AddOutageEndpoint           endpoint.Endpoint
	ApplydiscountEndpoint       endpoint.Endpoint
	AutoAddBookEndpoint         endpoint.Endpoint
	AutoAddCouponEndpoint       endpoint.Endpoint
	AutoAddCustomerEndpoint     endpoint.Endpoint
	AutoAddOrderEndpoint        endpoint.Endpoint
	AutoAddPublisherEndpoint    endpoint.Endpoint
	AutoAddStoreEndpoint        endpoint.Endpoint
	AutoDeleteBookEndpoint      endpoint.Endpoint
	AutoDeleteCouponEndpoint    endpoint.Endpoint
	AutoDeleteCustomerEndpoint  endpoint.Endpoint
	AutoDeleteOrderEndpoint     endpoint.Endpoint
	AutoDeletePublisherEndpoint endpoint.Endpoint
	AutoDeleteStoreEndpoint     endpoint.Endpoint
	AutoGetBookEndpoint         endpoint.Endpoint
	AutoGetCouponEndpoint       endpoint.Endpoint
	AutoGetCustomerEndpoint     endpoint.Endpoint
	AutoGetOrderEndpoint        endpoint.Endpoint
	AutoGetPublisherEndpoint    endpoint.Endpoint
	AutoGetStoreEndpoint        endpoint.Endpoint
	AutoListBookEndpoint        endpoint.Endpoint
	AutoListCouponEndpoint      endpoint.Endpoint
	AutoListCustomerEndpoint    endpoint.Endpoint
	AutoListOrderEndpoint       endpoint.Endpoint
	AutoListPublisherEndpoint   endpoint.Endpoint
	AutoListStoreEndpoint       endpoint.Endpoint
	AutoUpdateBookEndpoint      endpoint.Endpoint
	AutoUpdateCouponEndpoint    endpoint.Endpoint
	AutoUpdateCustomerEndpoint  endpoint.Endpoint
	AutoUpdateOrderEndpoint     endpoint.Endpoint
	AutoUpdatePublisherEndpoint endpoint.Endpoint
	AutoUpdateStoreEndpoint     endpoint.Endpoint
	CleardiscountEndpoint       endpoint.Endpoint
	RestockEndpoint             endpoint.Endpoint

	watchHandlerOrder     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerBook      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerPublisher func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerStore     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerCoupon    func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerCustomer  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AddOutage is endpoint for AddOutage
func (e EndpointsBookstoreV1Client) AddOutage(ctx context.Context, in *OutageRequest) (*Store, error) {
	resp, err := e.AddOutageEndpoint(ctx, in)
	if err != nil {
		return &Store{}, err
	}
	return resp.(*Store), nil
}

type respBookstoreV1AddOutage struct {
	V   Store
	Err error
}

// Applydiscount is endpoint for Applydiscount
func (e EndpointsBookstoreV1Client) Applydiscount(ctx context.Context, in *ApplyDiscountReq) (*Order, error) {
	resp, err := e.ApplydiscountEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1Applydiscount struct {
	V   Order
	Err error
}

// AutoAddBook is endpoint for AutoAddBook
func (e EndpointsBookstoreV1Client) AutoAddBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoAddBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoAddBook struct {
	V   Book
	Err error
}

// AutoAddCoupon is endpoint for AutoAddCoupon
func (e EndpointsBookstoreV1Client) AutoAddCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	resp, err := e.AutoAddCouponEndpoint(ctx, in)
	if err != nil {
		return &Coupon{}, err
	}
	return resp.(*Coupon), nil
}

type respBookstoreV1AutoAddCoupon struct {
	V   Coupon
	Err error
}

// AutoAddCustomer is endpoint for AutoAddCustomer
func (e EndpointsBookstoreV1Client) AutoAddCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	resp, err := e.AutoAddCustomerEndpoint(ctx, in)
	if err != nil {
		return &Customer{}, err
	}
	return resp.(*Customer), nil
}

type respBookstoreV1AutoAddCustomer struct {
	V   Customer
	Err error
}

// AutoAddOrder is endpoint for AutoAddOrder
func (e EndpointsBookstoreV1Client) AutoAddOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoAddOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoAddOrder struct {
	V   Order
	Err error
}

// AutoAddPublisher is endpoint for AutoAddPublisher
func (e EndpointsBookstoreV1Client) AutoAddPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoAddPublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoAddPublisher struct {
	V   Publisher
	Err error
}

// AutoAddStore is endpoint for AutoAddStore
func (e EndpointsBookstoreV1Client) AutoAddStore(ctx context.Context, in *Store) (*Store, error) {
	resp, err := e.AutoAddStoreEndpoint(ctx, in)
	if err != nil {
		return &Store{}, err
	}
	return resp.(*Store), nil
}

type respBookstoreV1AutoAddStore struct {
	V   Store
	Err error
}

// AutoDeleteBook is endpoint for AutoDeleteBook
func (e EndpointsBookstoreV1Client) AutoDeleteBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoDeleteBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoDeleteBook struct {
	V   Book
	Err error
}

// AutoDeleteCoupon is endpoint for AutoDeleteCoupon
func (e EndpointsBookstoreV1Client) AutoDeleteCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	resp, err := e.AutoDeleteCouponEndpoint(ctx, in)
	if err != nil {
		return &Coupon{}, err
	}
	return resp.(*Coupon), nil
}

type respBookstoreV1AutoDeleteCoupon struct {
	V   Coupon
	Err error
}

// AutoDeleteCustomer is endpoint for AutoDeleteCustomer
func (e EndpointsBookstoreV1Client) AutoDeleteCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	resp, err := e.AutoDeleteCustomerEndpoint(ctx, in)
	if err != nil {
		return &Customer{}, err
	}
	return resp.(*Customer), nil
}

type respBookstoreV1AutoDeleteCustomer struct {
	V   Customer
	Err error
}

// AutoDeleteOrder is endpoint for AutoDeleteOrder
func (e EndpointsBookstoreV1Client) AutoDeleteOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoDeleteOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoDeleteOrder struct {
	V   Order
	Err error
}

// AutoDeletePublisher is endpoint for AutoDeletePublisher
func (e EndpointsBookstoreV1Client) AutoDeletePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoDeletePublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoDeletePublisher struct {
	V   Publisher
	Err error
}

// AutoDeleteStore is endpoint for AutoDeleteStore
func (e EndpointsBookstoreV1Client) AutoDeleteStore(ctx context.Context, in *Store) (*Store, error) {
	resp, err := e.AutoDeleteStoreEndpoint(ctx, in)
	if err != nil {
		return &Store{}, err
	}
	return resp.(*Store), nil
}

type respBookstoreV1AutoDeleteStore struct {
	V   Store
	Err error
}

// AutoGetBook is endpoint for AutoGetBook
func (e EndpointsBookstoreV1Client) AutoGetBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoGetBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoGetBook struct {
	V   Book
	Err error
}

// AutoGetCoupon is endpoint for AutoGetCoupon
func (e EndpointsBookstoreV1Client) AutoGetCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	resp, err := e.AutoGetCouponEndpoint(ctx, in)
	if err != nil {
		return &Coupon{}, err
	}
	return resp.(*Coupon), nil
}

type respBookstoreV1AutoGetCoupon struct {
	V   Coupon
	Err error
}

// AutoGetCustomer is endpoint for AutoGetCustomer
func (e EndpointsBookstoreV1Client) AutoGetCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	resp, err := e.AutoGetCustomerEndpoint(ctx, in)
	if err != nil {
		return &Customer{}, err
	}
	return resp.(*Customer), nil
}

type respBookstoreV1AutoGetCustomer struct {
	V   Customer
	Err error
}

// AutoGetOrder is endpoint for AutoGetOrder
func (e EndpointsBookstoreV1Client) AutoGetOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoGetOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoGetOrder struct {
	V   Order
	Err error
}

// AutoGetPublisher is endpoint for AutoGetPublisher
func (e EndpointsBookstoreV1Client) AutoGetPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoGetPublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoGetPublisher struct {
	V   Publisher
	Err error
}

// AutoGetStore is endpoint for AutoGetStore
func (e EndpointsBookstoreV1Client) AutoGetStore(ctx context.Context, in *Store) (*Store, error) {
	resp, err := e.AutoGetStoreEndpoint(ctx, in)
	if err != nil {
		return &Store{}, err
	}
	return resp.(*Store), nil
}

type respBookstoreV1AutoGetStore struct {
	V   Store
	Err error
}

// AutoListBook is endpoint for AutoListBook
func (e EndpointsBookstoreV1Client) AutoListBook(ctx context.Context, in *api.ListWatchOptions) (*BookList, error) {
	resp, err := e.AutoListBookEndpoint(ctx, in)
	if err != nil {
		return &BookList{}, err
	}
	return resp.(*BookList), nil
}

type respBookstoreV1AutoListBook struct {
	V   BookList
	Err error
}

// AutoListCoupon is endpoint for AutoListCoupon
func (e EndpointsBookstoreV1Client) AutoListCoupon(ctx context.Context, in *api.ListWatchOptions) (*CouponList, error) {
	resp, err := e.AutoListCouponEndpoint(ctx, in)
	if err != nil {
		return &CouponList{}, err
	}
	return resp.(*CouponList), nil
}

type respBookstoreV1AutoListCoupon struct {
	V   CouponList
	Err error
}

// AutoListCustomer is endpoint for AutoListCustomer
func (e EndpointsBookstoreV1Client) AutoListCustomer(ctx context.Context, in *api.ListWatchOptions) (*CustomerList, error) {
	resp, err := e.AutoListCustomerEndpoint(ctx, in)
	if err != nil {
		return &CustomerList{}, err
	}
	return resp.(*CustomerList), nil
}

type respBookstoreV1AutoListCustomer struct {
	V   CustomerList
	Err error
}

// AutoListOrder is endpoint for AutoListOrder
func (e EndpointsBookstoreV1Client) AutoListOrder(ctx context.Context, in *api.ListWatchOptions) (*OrderList, error) {
	resp, err := e.AutoListOrderEndpoint(ctx, in)
	if err != nil {
		return &OrderList{}, err
	}
	return resp.(*OrderList), nil
}

type respBookstoreV1AutoListOrder struct {
	V   OrderList
	Err error
}

// AutoListPublisher is endpoint for AutoListPublisher
func (e EndpointsBookstoreV1Client) AutoListPublisher(ctx context.Context, in *api.ListWatchOptions) (*PublisherList, error) {
	resp, err := e.AutoListPublisherEndpoint(ctx, in)
	if err != nil {
		return &PublisherList{}, err
	}
	return resp.(*PublisherList), nil
}

type respBookstoreV1AutoListPublisher struct {
	V   PublisherList
	Err error
}

// AutoListStore is endpoint for AutoListStore
func (e EndpointsBookstoreV1Client) AutoListStore(ctx context.Context, in *api.ListWatchOptions) (*StoreList, error) {
	resp, err := e.AutoListStoreEndpoint(ctx, in)
	if err != nil {
		return &StoreList{}, err
	}
	return resp.(*StoreList), nil
}

type respBookstoreV1AutoListStore struct {
	V   StoreList
	Err error
}

// AutoUpdateBook is endpoint for AutoUpdateBook
func (e EndpointsBookstoreV1Client) AutoUpdateBook(ctx context.Context, in *Book) (*Book, error) {
	resp, err := e.AutoUpdateBookEndpoint(ctx, in)
	if err != nil {
		return &Book{}, err
	}
	return resp.(*Book), nil
}

type respBookstoreV1AutoUpdateBook struct {
	V   Book
	Err error
}

// AutoUpdateCoupon is endpoint for AutoUpdateCoupon
func (e EndpointsBookstoreV1Client) AutoUpdateCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	resp, err := e.AutoUpdateCouponEndpoint(ctx, in)
	if err != nil {
		return &Coupon{}, err
	}
	return resp.(*Coupon), nil
}

type respBookstoreV1AutoUpdateCoupon struct {
	V   Coupon
	Err error
}

// AutoUpdateCustomer is endpoint for AutoUpdateCustomer
func (e EndpointsBookstoreV1Client) AutoUpdateCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	resp, err := e.AutoUpdateCustomerEndpoint(ctx, in)
	if err != nil {
		return &Customer{}, err
	}
	return resp.(*Customer), nil
}

type respBookstoreV1AutoUpdateCustomer struct {
	V   Customer
	Err error
}

// AutoUpdateOrder is endpoint for AutoUpdateOrder
func (e EndpointsBookstoreV1Client) AutoUpdateOrder(ctx context.Context, in *Order) (*Order, error) {
	resp, err := e.AutoUpdateOrderEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1AutoUpdateOrder struct {
	V   Order
	Err error
}

// AutoUpdatePublisher is endpoint for AutoUpdatePublisher
func (e EndpointsBookstoreV1Client) AutoUpdatePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	resp, err := e.AutoUpdatePublisherEndpoint(ctx, in)
	if err != nil {
		return &Publisher{}, err
	}
	return resp.(*Publisher), nil
}

type respBookstoreV1AutoUpdatePublisher struct {
	V   Publisher
	Err error
}

// AutoUpdateStore is endpoint for AutoUpdateStore
func (e EndpointsBookstoreV1Client) AutoUpdateStore(ctx context.Context, in *Store) (*Store, error) {
	resp, err := e.AutoUpdateStoreEndpoint(ctx, in)
	if err != nil {
		return &Store{}, err
	}
	return resp.(*Store), nil
}

type respBookstoreV1AutoUpdateStore struct {
	V   Store
	Err error
}

// Cleardiscount is endpoint for Cleardiscount
func (e EndpointsBookstoreV1Client) Cleardiscount(ctx context.Context, in *ApplyDiscountReq) (*Order, error) {
	resp, err := e.CleardiscountEndpoint(ctx, in)
	if err != nil {
		return &Order{}, err
	}
	return resp.(*Order), nil
}

type respBookstoreV1Cleardiscount struct {
	V   Order
	Err error
}

// Restock is endpoint for Restock
func (e EndpointsBookstoreV1Client) Restock(ctx context.Context, in *RestockRequest) (*RestockResponse, error) {
	resp, err := e.RestockEndpoint(ctx, in)
	if err != nil {
		return &RestockResponse{}, err
	}
	return resp.(*RestockResponse), nil
}

type respBookstoreV1Restock struct {
	V   RestockResponse
	Err error
}

// AutoWatchOrder performs Watch for Order
func (e EndpointsBookstoreV1Client) AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchOrderClient, error) {
	return e.Client.AutoWatchOrder(ctx, in)
}

// AutoWatchBook performs Watch for Book
func (e EndpointsBookstoreV1Client) AutoWatchBook(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchBookClient, error) {
	return e.Client.AutoWatchBook(ctx, in)
}

// AutoWatchPublisher performs Watch for Publisher
func (e EndpointsBookstoreV1Client) AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchPublisherClient, error) {
	return e.Client.AutoWatchPublisher(ctx, in)
}

// AutoWatchStore performs Watch for Store
func (e EndpointsBookstoreV1Client) AutoWatchStore(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchStoreClient, error) {
	return e.Client.AutoWatchStore(ctx, in)
}

// AutoWatchCoupon performs Watch for Coupon
func (e EndpointsBookstoreV1Client) AutoWatchCoupon(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchCouponClient, error) {
	return e.Client.AutoWatchCoupon(ctx, in)
}

// AutoWatchCustomer performs Watch for Customer
func (e EndpointsBookstoreV1Client) AutoWatchCustomer(ctx context.Context, in *api.ListWatchOptions) (BookstoreV1_AutoWatchCustomerClient, error) {
	return e.Client.AutoWatchCustomer(ctx, in)
}

// AddOutage implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AddOutage(ctx context.Context, in OutageRequest) (Store, error) {
	resp, err := e.AddOutageEndpoint(ctx, in)
	if err != nil {
		return Store{}, err
	}
	return *resp.(*Store), nil
}

// MakeBookstoreV1AddOutageEndpoint creates  AddOutage endpoints for the service
func MakeBookstoreV1AddOutageEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*OutageRequest)
		v, err := s.AddOutage(ctx, *req)
		return respBookstoreV1AddOutage{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AddOutage")(f)
}

// Applydiscount implementation on server Endpoint
func (e EndpointsBookstoreV1Server) Applydiscount(ctx context.Context, in ApplyDiscountReq) (Order, error) {
	resp, err := e.ApplydiscountEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1ApplydiscountEndpoint creates  Applydiscount endpoints for the service
func MakeBookstoreV1ApplydiscountEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ApplyDiscountReq)
		v, err := s.Applydiscount(ctx, *req)
		return respBookstoreV1Applydiscount{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:Applydiscount")(f)
}

// AutoAddBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoAddBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoAddBookEndpoint creates  AutoAddBook endpoints for the service
func MakeBookstoreV1AutoAddBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoAddBook(ctx, *req)
		return respBookstoreV1AutoAddBook{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddBook")(f)
}

// AutoAddCoupon implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddCoupon(ctx context.Context, in Coupon) (Coupon, error) {
	resp, err := e.AutoAddCouponEndpoint(ctx, in)
	if err != nil {
		return Coupon{}, err
	}
	return *resp.(*Coupon), nil
}

// MakeBookstoreV1AutoAddCouponEndpoint creates  AutoAddCoupon endpoints for the service
func MakeBookstoreV1AutoAddCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Coupon)
		v, err := s.AutoAddCoupon(ctx, *req)
		return respBookstoreV1AutoAddCoupon{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddCoupon")(f)
}

// AutoAddCustomer implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddCustomer(ctx context.Context, in Customer) (Customer, error) {
	resp, err := e.AutoAddCustomerEndpoint(ctx, in)
	if err != nil {
		return Customer{}, err
	}
	return *resp.(*Customer), nil
}

// MakeBookstoreV1AutoAddCustomerEndpoint creates  AutoAddCustomer endpoints for the service
func MakeBookstoreV1AutoAddCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Customer)
		v, err := s.AutoAddCustomer(ctx, *req)
		return respBookstoreV1AutoAddCustomer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddCustomer")(f)
}

// AutoAddOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoAddOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoAddOrderEndpoint creates  AutoAddOrder endpoints for the service
func MakeBookstoreV1AutoAddOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoAddOrder(ctx, *req)
		return respBookstoreV1AutoAddOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddOrder")(f)
}

// AutoAddPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddPublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoAddPublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoAddPublisherEndpoint creates  AutoAddPublisher endpoints for the service
func MakeBookstoreV1AutoAddPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoAddPublisher(ctx, *req)
		return respBookstoreV1AutoAddPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddPublisher")(f)
}

// AutoAddStore implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoAddStore(ctx context.Context, in Store) (Store, error) {
	resp, err := e.AutoAddStoreEndpoint(ctx, in)
	if err != nil {
		return Store{}, err
	}
	return *resp.(*Store), nil
}

// MakeBookstoreV1AutoAddStoreEndpoint creates  AutoAddStore endpoints for the service
func MakeBookstoreV1AutoAddStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Store)
		v, err := s.AutoAddStore(ctx, *req)
		return respBookstoreV1AutoAddStore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoAddStore")(f)
}

// AutoDeleteBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoDeleteBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoDeleteBookEndpoint creates  AutoDeleteBook endpoints for the service
func MakeBookstoreV1AutoDeleteBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoDeleteBook(ctx, *req)
		return respBookstoreV1AutoDeleteBook{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeleteBook")(f)
}

// AutoDeleteCoupon implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteCoupon(ctx context.Context, in Coupon) (Coupon, error) {
	resp, err := e.AutoDeleteCouponEndpoint(ctx, in)
	if err != nil {
		return Coupon{}, err
	}
	return *resp.(*Coupon), nil
}

// MakeBookstoreV1AutoDeleteCouponEndpoint creates  AutoDeleteCoupon endpoints for the service
func MakeBookstoreV1AutoDeleteCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Coupon)
		v, err := s.AutoDeleteCoupon(ctx, *req)
		return respBookstoreV1AutoDeleteCoupon{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeleteCoupon")(f)
}

// AutoDeleteCustomer implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteCustomer(ctx context.Context, in Customer) (Customer, error) {
	resp, err := e.AutoDeleteCustomerEndpoint(ctx, in)
	if err != nil {
		return Customer{}, err
	}
	return *resp.(*Customer), nil
}

// MakeBookstoreV1AutoDeleteCustomerEndpoint creates  AutoDeleteCustomer endpoints for the service
func MakeBookstoreV1AutoDeleteCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Customer)
		v, err := s.AutoDeleteCustomer(ctx, *req)
		return respBookstoreV1AutoDeleteCustomer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeleteCustomer")(f)
}

// AutoDeleteOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoDeleteOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoDeleteOrderEndpoint creates  AutoDeleteOrder endpoints for the service
func MakeBookstoreV1AutoDeleteOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoDeleteOrder(ctx, *req)
		return respBookstoreV1AutoDeleteOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeleteOrder")(f)
}

// AutoDeletePublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeletePublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoDeletePublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoDeletePublisherEndpoint creates  AutoDeletePublisher endpoints for the service
func MakeBookstoreV1AutoDeletePublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoDeletePublisher(ctx, *req)
		return respBookstoreV1AutoDeletePublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeletePublisher")(f)
}

// AutoDeleteStore implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoDeleteStore(ctx context.Context, in Store) (Store, error) {
	resp, err := e.AutoDeleteStoreEndpoint(ctx, in)
	if err != nil {
		return Store{}, err
	}
	return *resp.(*Store), nil
}

// MakeBookstoreV1AutoDeleteStoreEndpoint creates  AutoDeleteStore endpoints for the service
func MakeBookstoreV1AutoDeleteStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Store)
		v, err := s.AutoDeleteStore(ctx, *req)
		return respBookstoreV1AutoDeleteStore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoDeleteStore")(f)
}

// AutoGetBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoGetBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoGetBookEndpoint creates  AutoGetBook endpoints for the service
func MakeBookstoreV1AutoGetBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoGetBook(ctx, *req)
		return respBookstoreV1AutoGetBook{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetBook")(f)
}

// AutoGetCoupon implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetCoupon(ctx context.Context, in Coupon) (Coupon, error) {
	resp, err := e.AutoGetCouponEndpoint(ctx, in)
	if err != nil {
		return Coupon{}, err
	}
	return *resp.(*Coupon), nil
}

// MakeBookstoreV1AutoGetCouponEndpoint creates  AutoGetCoupon endpoints for the service
func MakeBookstoreV1AutoGetCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Coupon)
		v, err := s.AutoGetCoupon(ctx, *req)
		return respBookstoreV1AutoGetCoupon{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetCoupon")(f)
}

// AutoGetCustomer implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetCustomer(ctx context.Context, in Customer) (Customer, error) {
	resp, err := e.AutoGetCustomerEndpoint(ctx, in)
	if err != nil {
		return Customer{}, err
	}
	return *resp.(*Customer), nil
}

// MakeBookstoreV1AutoGetCustomerEndpoint creates  AutoGetCustomer endpoints for the service
func MakeBookstoreV1AutoGetCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Customer)
		v, err := s.AutoGetCustomer(ctx, *req)
		return respBookstoreV1AutoGetCustomer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetCustomer")(f)
}

// AutoGetOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoGetOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoGetOrderEndpoint creates  AutoGetOrder endpoints for the service
func MakeBookstoreV1AutoGetOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoGetOrder(ctx, *req)
		return respBookstoreV1AutoGetOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetOrder")(f)
}

// AutoGetPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetPublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoGetPublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoGetPublisherEndpoint creates  AutoGetPublisher endpoints for the service
func MakeBookstoreV1AutoGetPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoGetPublisher(ctx, *req)
		return respBookstoreV1AutoGetPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetPublisher")(f)
}

// AutoGetStore implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoGetStore(ctx context.Context, in Store) (Store, error) {
	resp, err := e.AutoGetStoreEndpoint(ctx, in)
	if err != nil {
		return Store{}, err
	}
	return *resp.(*Store), nil
}

// MakeBookstoreV1AutoGetStoreEndpoint creates  AutoGetStore endpoints for the service
func MakeBookstoreV1AutoGetStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Store)
		v, err := s.AutoGetStore(ctx, *req)
		return respBookstoreV1AutoGetStore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoGetStore")(f)
}

// AutoListBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListBook(ctx context.Context, in api.ListWatchOptions) (BookList, error) {
	resp, err := e.AutoListBookEndpoint(ctx, in)
	if err != nil {
		return BookList{}, err
	}
	return *resp.(*BookList), nil
}

// MakeBookstoreV1AutoListBookEndpoint creates  AutoListBook endpoints for the service
func MakeBookstoreV1AutoListBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListBook(ctx, *req)
		return respBookstoreV1AutoListBook{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListBook")(f)
}

// AutoListCoupon implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListCoupon(ctx context.Context, in api.ListWatchOptions) (CouponList, error) {
	resp, err := e.AutoListCouponEndpoint(ctx, in)
	if err != nil {
		return CouponList{}, err
	}
	return *resp.(*CouponList), nil
}

// MakeBookstoreV1AutoListCouponEndpoint creates  AutoListCoupon endpoints for the service
func MakeBookstoreV1AutoListCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCoupon(ctx, *req)
		return respBookstoreV1AutoListCoupon{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListCoupon")(f)
}

// AutoListCustomer implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListCustomer(ctx context.Context, in api.ListWatchOptions) (CustomerList, error) {
	resp, err := e.AutoListCustomerEndpoint(ctx, in)
	if err != nil {
		return CustomerList{}, err
	}
	return *resp.(*CustomerList), nil
}

// MakeBookstoreV1AutoListCustomerEndpoint creates  AutoListCustomer endpoints for the service
func MakeBookstoreV1AutoListCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCustomer(ctx, *req)
		return respBookstoreV1AutoListCustomer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListCustomer")(f)
}

// AutoListOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListOrder(ctx context.Context, in api.ListWatchOptions) (OrderList, error) {
	resp, err := e.AutoListOrderEndpoint(ctx, in)
	if err != nil {
		return OrderList{}, err
	}
	return *resp.(*OrderList), nil
}

// MakeBookstoreV1AutoListOrderEndpoint creates  AutoListOrder endpoints for the service
func MakeBookstoreV1AutoListOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListOrder(ctx, *req)
		return respBookstoreV1AutoListOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListOrder")(f)
}

// AutoListPublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListPublisher(ctx context.Context, in api.ListWatchOptions) (PublisherList, error) {
	resp, err := e.AutoListPublisherEndpoint(ctx, in)
	if err != nil {
		return PublisherList{}, err
	}
	return *resp.(*PublisherList), nil
}

// MakeBookstoreV1AutoListPublisherEndpoint creates  AutoListPublisher endpoints for the service
func MakeBookstoreV1AutoListPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListPublisher(ctx, *req)
		return respBookstoreV1AutoListPublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListPublisher")(f)
}

// AutoListStore implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoListStore(ctx context.Context, in api.ListWatchOptions) (StoreList, error) {
	resp, err := e.AutoListStoreEndpoint(ctx, in)
	if err != nil {
		return StoreList{}, err
	}
	return *resp.(*StoreList), nil
}

// MakeBookstoreV1AutoListStoreEndpoint creates  AutoListStore endpoints for the service
func MakeBookstoreV1AutoListStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListStore(ctx, *req)
		return respBookstoreV1AutoListStore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoListStore")(f)
}

// AutoUpdateBook implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateBook(ctx context.Context, in Book) (Book, error) {
	resp, err := e.AutoUpdateBookEndpoint(ctx, in)
	if err != nil {
		return Book{}, err
	}
	return *resp.(*Book), nil
}

// MakeBookstoreV1AutoUpdateBookEndpoint creates  AutoUpdateBook endpoints for the service
func MakeBookstoreV1AutoUpdateBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Book)
		v, err := s.AutoUpdateBook(ctx, *req)
		return respBookstoreV1AutoUpdateBook{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdateBook")(f)
}

// AutoUpdateCoupon implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateCoupon(ctx context.Context, in Coupon) (Coupon, error) {
	resp, err := e.AutoUpdateCouponEndpoint(ctx, in)
	if err != nil {
		return Coupon{}, err
	}
	return *resp.(*Coupon), nil
}

// MakeBookstoreV1AutoUpdateCouponEndpoint creates  AutoUpdateCoupon endpoints for the service
func MakeBookstoreV1AutoUpdateCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Coupon)
		v, err := s.AutoUpdateCoupon(ctx, *req)
		return respBookstoreV1AutoUpdateCoupon{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdateCoupon")(f)
}

// AutoUpdateCustomer implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateCustomer(ctx context.Context, in Customer) (Customer, error) {
	resp, err := e.AutoUpdateCustomerEndpoint(ctx, in)
	if err != nil {
		return Customer{}, err
	}
	return *resp.(*Customer), nil
}

// MakeBookstoreV1AutoUpdateCustomerEndpoint creates  AutoUpdateCustomer endpoints for the service
func MakeBookstoreV1AutoUpdateCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Customer)
		v, err := s.AutoUpdateCustomer(ctx, *req)
		return respBookstoreV1AutoUpdateCustomer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdateCustomer")(f)
}

// AutoUpdateOrder implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateOrder(ctx context.Context, in Order) (Order, error) {
	resp, err := e.AutoUpdateOrderEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1AutoUpdateOrderEndpoint creates  AutoUpdateOrder endpoints for the service
func MakeBookstoreV1AutoUpdateOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Order)
		v, err := s.AutoUpdateOrder(ctx, *req)
		return respBookstoreV1AutoUpdateOrder{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdateOrder")(f)
}

// AutoUpdatePublisher implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdatePublisher(ctx context.Context, in Publisher) (Publisher, error) {
	resp, err := e.AutoUpdatePublisherEndpoint(ctx, in)
	if err != nil {
		return Publisher{}, err
	}
	return *resp.(*Publisher), nil
}

// MakeBookstoreV1AutoUpdatePublisherEndpoint creates  AutoUpdatePublisher endpoints for the service
func MakeBookstoreV1AutoUpdatePublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Publisher)
		v, err := s.AutoUpdatePublisher(ctx, *req)
		return respBookstoreV1AutoUpdatePublisher{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdatePublisher")(f)
}

// AutoUpdateStore implementation on server Endpoint
func (e EndpointsBookstoreV1Server) AutoUpdateStore(ctx context.Context, in Store) (Store, error) {
	resp, err := e.AutoUpdateStoreEndpoint(ctx, in)
	if err != nil {
		return Store{}, err
	}
	return *resp.(*Store), nil
}

// MakeBookstoreV1AutoUpdateStoreEndpoint creates  AutoUpdateStore endpoints for the service
func MakeBookstoreV1AutoUpdateStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Store)
		v, err := s.AutoUpdateStore(ctx, *req)
		return respBookstoreV1AutoUpdateStore{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:AutoUpdateStore")(f)
}

// Cleardiscount implementation on server Endpoint
func (e EndpointsBookstoreV1Server) Cleardiscount(ctx context.Context, in ApplyDiscountReq) (Order, error) {
	resp, err := e.CleardiscountEndpoint(ctx, in)
	if err != nil {
		return Order{}, err
	}
	return *resp.(*Order), nil
}

// MakeBookstoreV1CleardiscountEndpoint creates  Cleardiscount endpoints for the service
func MakeBookstoreV1CleardiscountEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ApplyDiscountReq)
		v, err := s.Cleardiscount(ctx, *req)
		return respBookstoreV1Cleardiscount{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:Cleardiscount")(f)
}

// Restock implementation on server Endpoint
func (e EndpointsBookstoreV1Server) Restock(ctx context.Context, in RestockRequest) (RestockResponse, error) {
	resp, err := e.RestockEndpoint(ctx, in)
	if err != nil {
		return RestockResponse{}, err
	}
	return *resp.(*RestockResponse), nil
}

// MakeBookstoreV1RestockEndpoint creates  Restock endpoints for the service
func MakeBookstoreV1RestockEndpoint(s ServiceBookstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RestockRequest)
		v, err := s.Restock(ctx, *req)
		return respBookstoreV1Restock{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BookstoreV1:Restock")(f)
}

// AutoWatchOrder is the watch handler for Order on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchOrder(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchOrderServer) error {
	return e.watchHandlerOrder(in, stream)
}

// MakeAutoWatchOrderEndpoint creates the Watch endpoint
func MakeAutoWatchOrderEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchOrderServer)
		return s.AutoWatchOrder(options, wstream)
	}
}

// AutoWatchBook is the watch handler for Book on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchBook(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchBookServer) error {
	return e.watchHandlerBook(in, stream)
}

// MakeAutoWatchBookEndpoint creates the Watch endpoint
func MakeAutoWatchBookEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchBookServer)
		return s.AutoWatchBook(options, wstream)
	}
}

// AutoWatchPublisher is the watch handler for Publisher on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchPublisher(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchPublisherServer) error {
	return e.watchHandlerPublisher(in, stream)
}

// MakeAutoWatchPublisherEndpoint creates the Watch endpoint
func MakeAutoWatchPublisherEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchPublisherServer)
		return s.AutoWatchPublisher(options, wstream)
	}
}

// AutoWatchStore is the watch handler for Store on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchStore(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchStoreServer) error {
	return e.watchHandlerStore(in, stream)
}

// MakeAutoWatchStoreEndpoint creates the Watch endpoint
func MakeAutoWatchStoreEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchStoreServer)
		return s.AutoWatchStore(options, wstream)
	}
}

// AutoWatchCoupon is the watch handler for Coupon on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchCoupon(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCouponServer) error {
	return e.watchHandlerCoupon(in, stream)
}

// MakeAutoWatchCouponEndpoint creates the Watch endpoint
func MakeAutoWatchCouponEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchCouponServer)
		return s.AutoWatchCoupon(options, wstream)
	}
}

// AutoWatchCustomer is the watch handler for Customer on the server side.
func (e EndpointsBookstoreV1Server) AutoWatchCustomer(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCustomerServer) error {
	return e.watchHandlerCustomer(in, stream)
}

// MakeAutoWatchCustomerEndpoint creates the Watch endpoint
func MakeAutoWatchCustomerEndpoint(s ServiceBookstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(BookstoreV1_AutoWatchCustomerServer)
		return s.AutoWatchCustomer(options, wstream)
	}
}

// MakeBookstoreV1ServerEndpoints creates server endpoints
func MakeBookstoreV1ServerEndpoints(s ServiceBookstoreV1Server, logger log.Logger) EndpointsBookstoreV1Server {
	return EndpointsBookstoreV1Server{

		AddOutageEndpoint:           MakeBookstoreV1AddOutageEndpoint(s, logger),
		ApplydiscountEndpoint:       MakeBookstoreV1ApplydiscountEndpoint(s, logger),
		AutoAddBookEndpoint:         MakeBookstoreV1AutoAddBookEndpoint(s, logger),
		AutoAddCouponEndpoint:       MakeBookstoreV1AutoAddCouponEndpoint(s, logger),
		AutoAddCustomerEndpoint:     MakeBookstoreV1AutoAddCustomerEndpoint(s, logger),
		AutoAddOrderEndpoint:        MakeBookstoreV1AutoAddOrderEndpoint(s, logger),
		AutoAddPublisherEndpoint:    MakeBookstoreV1AutoAddPublisherEndpoint(s, logger),
		AutoAddStoreEndpoint:        MakeBookstoreV1AutoAddStoreEndpoint(s, logger),
		AutoDeleteBookEndpoint:      MakeBookstoreV1AutoDeleteBookEndpoint(s, logger),
		AutoDeleteCouponEndpoint:    MakeBookstoreV1AutoDeleteCouponEndpoint(s, logger),
		AutoDeleteCustomerEndpoint:  MakeBookstoreV1AutoDeleteCustomerEndpoint(s, logger),
		AutoDeleteOrderEndpoint:     MakeBookstoreV1AutoDeleteOrderEndpoint(s, logger),
		AutoDeletePublisherEndpoint: MakeBookstoreV1AutoDeletePublisherEndpoint(s, logger),
		AutoDeleteStoreEndpoint:     MakeBookstoreV1AutoDeleteStoreEndpoint(s, logger),
		AutoGetBookEndpoint:         MakeBookstoreV1AutoGetBookEndpoint(s, logger),
		AutoGetCouponEndpoint:       MakeBookstoreV1AutoGetCouponEndpoint(s, logger),
		AutoGetCustomerEndpoint:     MakeBookstoreV1AutoGetCustomerEndpoint(s, logger),
		AutoGetOrderEndpoint:        MakeBookstoreV1AutoGetOrderEndpoint(s, logger),
		AutoGetPublisherEndpoint:    MakeBookstoreV1AutoGetPublisherEndpoint(s, logger),
		AutoGetStoreEndpoint:        MakeBookstoreV1AutoGetStoreEndpoint(s, logger),
		AutoListBookEndpoint:        MakeBookstoreV1AutoListBookEndpoint(s, logger),
		AutoListCouponEndpoint:      MakeBookstoreV1AutoListCouponEndpoint(s, logger),
		AutoListCustomerEndpoint:    MakeBookstoreV1AutoListCustomerEndpoint(s, logger),
		AutoListOrderEndpoint:       MakeBookstoreV1AutoListOrderEndpoint(s, logger),
		AutoListPublisherEndpoint:   MakeBookstoreV1AutoListPublisherEndpoint(s, logger),
		AutoListStoreEndpoint:       MakeBookstoreV1AutoListStoreEndpoint(s, logger),
		AutoUpdateBookEndpoint:      MakeBookstoreV1AutoUpdateBookEndpoint(s, logger),
		AutoUpdateCouponEndpoint:    MakeBookstoreV1AutoUpdateCouponEndpoint(s, logger),
		AutoUpdateCustomerEndpoint:  MakeBookstoreV1AutoUpdateCustomerEndpoint(s, logger),
		AutoUpdateOrderEndpoint:     MakeBookstoreV1AutoUpdateOrderEndpoint(s, logger),
		AutoUpdatePublisherEndpoint: MakeBookstoreV1AutoUpdatePublisherEndpoint(s, logger),
		AutoUpdateStoreEndpoint:     MakeBookstoreV1AutoUpdateStoreEndpoint(s, logger),
		CleardiscountEndpoint:       MakeBookstoreV1CleardiscountEndpoint(s, logger),
		RestockEndpoint:             MakeBookstoreV1RestockEndpoint(s, logger),

		watchHandlerOrder:     MakeAutoWatchOrderEndpoint(s, logger),
		watchHandlerBook:      MakeAutoWatchBookEndpoint(s, logger),
		watchHandlerPublisher: MakeAutoWatchPublisherEndpoint(s, logger),
		watchHandlerStore:     MakeAutoWatchStoreEndpoint(s, logger),
		watchHandlerCoupon:    MakeAutoWatchCouponEndpoint(s, logger),
		watchHandlerCustomer:  MakeAutoWatchCustomerEndpoint(s, logger),
	}
}

// LoggingBookstoreV1MiddlewareClient adds middleware for the client
func LoggingBookstoreV1MiddlewareClient(logger log.Logger) MiddlewareBookstoreV1Client {
	return func(next ServiceBookstoreV1Client) ServiceBookstoreV1Client {
		return loggingBookstoreV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBookstoreV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceBookstoreV1Client
}

// LoggingBookstoreV1MiddlewareServer adds middleware for the client
func LoggingBookstoreV1MiddlewareServer(logger log.Logger) MiddlewareBookstoreV1Server {
	return func(next ServiceBookstoreV1Server) ServiceBookstoreV1Server {
		return loggingBookstoreV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBookstoreV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceBookstoreV1Server
}

func (m loggingBookstoreV1MiddlewareClient) AddOutage(ctx context.Context, in *OutageRequest) (resp *Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AddOutage", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AddOutage(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) Applydiscount(ctx context.Context, in *ApplyDiscountReq) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Applydiscount", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Applydiscount(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddCoupon(ctx context.Context, in *Coupon) (resp *Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddCustomer(ctx context.Context, in *Customer) (resp *Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddPublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoAddStore(ctx context.Context, in *Store) (resp *Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteCoupon(ctx context.Context, in *Coupon) (resp *Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteCustomer(ctx context.Context, in *Customer) (resp *Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeletePublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeletePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeletePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoDeleteStore(ctx context.Context, in *Store) (resp *Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetCoupon(ctx context.Context, in *Coupon) (resp *Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetCustomer(ctx context.Context, in *Customer) (resp *Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetPublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoGetStore(ctx context.Context, in *Store) (resp *Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListBook(ctx context.Context, in *api.ListWatchOptions) (resp *BookList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListCoupon(ctx context.Context, in *api.ListWatchOptions) (resp *CouponList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListCustomer(ctx context.Context, in *api.ListWatchOptions) (resp *CustomerList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListOrder(ctx context.Context, in *api.ListWatchOptions) (resp *OrderList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListPublisher(ctx context.Context, in *api.ListWatchOptions) (resp *PublisherList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoListStore(ctx context.Context, in *api.ListWatchOptions) (resp *StoreList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateBook(ctx context.Context, in *Book) (resp *Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateCoupon(ctx context.Context, in *Coupon) (resp *Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateCustomer(ctx context.Context, in *Customer) (resp *Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateOrder(ctx context.Context, in *Order) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdatePublisher(ctx context.Context, in *Publisher) (resp *Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdatePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdatePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoUpdateStore(ctx context.Context, in *Store) (resp *Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) Cleardiscount(ctx context.Context, in *ApplyDiscountReq) (resp *Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Cleardiscount", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Cleardiscount(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) Restock(ctx context.Context, in *RestockRequest) (resp *RestockResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Restock", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Restock(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareClient) AutoWatchOrder(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchOrderClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchBook(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchBookClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchPublisher(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchPublisherClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchStore(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchStoreClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchCoupon(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchCouponClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareClient) AutoWatchCustomer(ctx context.Context, in *api.ListWatchOptions) (resp BookstoreV1_AutoWatchCustomerClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoWatchCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCustomer(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareServer) AddOutage(ctx context.Context, in OutageRequest) (resp Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AddOutage", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AddOutage(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) Applydiscount(ctx context.Context, in ApplyDiscountReq) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Applydiscount", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Applydiscount(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddCoupon(ctx context.Context, in Coupon) (resp Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddCustomer(ctx context.Context, in Customer) (resp Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddPublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoAddStore(ctx context.Context, in Store) (resp Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoAddStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteCoupon(ctx context.Context, in Coupon) (resp Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteCustomer(ctx context.Context, in Customer) (resp Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeletePublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeletePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeletePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoDeleteStore(ctx context.Context, in Store) (resp Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoDeleteStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetCoupon(ctx context.Context, in Coupon) (resp Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetCustomer(ctx context.Context, in Customer) (resp Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetPublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoGetStore(ctx context.Context, in Store) (resp Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoGetStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListBook(ctx context.Context, in api.ListWatchOptions) (resp BookList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListCoupon(ctx context.Context, in api.ListWatchOptions) (resp CouponList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListCustomer(ctx context.Context, in api.ListWatchOptions) (resp CustomerList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListOrder(ctx context.Context, in api.ListWatchOptions) (resp OrderList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListPublisher(ctx context.Context, in api.ListWatchOptions) (resp PublisherList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListPublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoListStore(ctx context.Context, in api.ListWatchOptions) (resp StoreList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoListStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateBook(ctx context.Context, in Book) (resp Book, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBook(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateCoupon(ctx context.Context, in Coupon) (resp Coupon, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCoupon(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateCustomer(ctx context.Context, in Customer) (resp Customer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCustomer(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateOrder(ctx context.Context, in Order) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateOrder(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdatePublisher(ctx context.Context, in Publisher) (resp Publisher, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdatePublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdatePublisher(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoUpdateStore(ctx context.Context, in Store) (resp Store, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "AutoUpdateStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStore(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) Cleardiscount(ctx context.Context, in ApplyDiscountReq) (resp Order, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Cleardiscount", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Cleardiscount(ctx, in)
	return
}
func (m loggingBookstoreV1MiddlewareServer) Restock(ctx context.Context, in RestockRequest) (resp RestockResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BookstoreV1", "method", "Restock", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Restock(ctx, in)
	return
}

func (m loggingBookstoreV1MiddlewareServer) AutoWatchOrder(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchOrderServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchOrder", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchOrder(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchBook(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchBookServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchBook", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchBook(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchPublisher(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchPublisherServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchPublisher", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchPublisher(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchStore(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchStoreServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchStore", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchStore(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchCoupon(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCouponServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchCoupon", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCoupon(in, stream)
	return
}
func (m loggingBookstoreV1MiddlewareServer) AutoWatchCustomer(in *api.ListWatchOptions, stream BookstoreV1_AutoWatchCustomerServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "BookstoreV1", "method", "AutoWatchCustomer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCustomer(in, stream)
	return
}
func (r *EndpointsBookstoreV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIBookstoreV1AddOutageCreateOper(in *OutageRequest) string {
	return fmt.Sprint("/v1/bookstore", "/store/AddOutage")
}

//
func makeURIBookstoreV1ApplydiscountCreateOper(in *ApplyDiscountReq) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name, "/applydiscount")
}

//
func makeURIBookstoreV1AutoAddCustomerCreateOper(in *Customer) string {
	return fmt.Sprint("/v1/bookstore", "/customers")
}

//
func makeURIBookstoreV1AutoAddOrderCreateOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders")
}

//
func makeURIBookstoreV1AutoAddStoreCreateOper(in *Store) string {
	return fmt.Sprint("/v1/bookstore", "/store")
}

//
func makeURIBookstoreV1AutoDeleteCustomerDeleteOper(in *Customer) string {
	return fmt.Sprint("/v1/bookstore", "/customers/", in.Name)
}

//
func makeURIBookstoreV1AutoDeleteOrderDeleteOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoDeleteStoreDeleteOper(in *Store) string {
	return fmt.Sprint("/v1/bookstore", "/store")
}

//
func makeURIBookstoreV1AutoGetBookGetOper(in *Book) string {
	return fmt.Sprint("/v1/bookstore", "/books/", in.Name)
}

//
func makeURIBookstoreV1AutoGetCustomerGetOper(in *Customer) string {
	return fmt.Sprint("/v1/bookstore", "/customers/", in.Name)
}

//
func makeURIBookstoreV1AutoGetOrderGetOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoGetStoreGetOper(in *Store) string {
	return fmt.Sprint("/v1/bookstore", "/store")
}

//
func makeURIBookstoreV1AutoListCustomerListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/bookstore", "/customers")
}

//
func makeURIBookstoreV1AutoListOrderListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/bookstore", "/orders")
}

//
func makeURIBookstoreV1AutoUpdateBookUpdateOper(in *Book) string {
	return fmt.Sprint("/v1/bookstore", "/books/", in.Name)
}

//
func makeURIBookstoreV1AutoUpdateCustomerUpdateOper(in *Customer) string {
	return fmt.Sprint("/v1/bookstore", "/customers/", in.Name)
}

//
func makeURIBookstoreV1AutoUpdateOrderUpdateOper(in *Order) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name)
}

//
func makeURIBookstoreV1AutoUpdateStoreUpdateOper(in *Store) string {
	return fmt.Sprint("/v1/bookstore", "/store")
}

//
func makeURIBookstoreV1CleardiscountCreateOper(in *ApplyDiscountReq) string {
	return fmt.Sprint("/v1/bookstore", "/orders/", in.Name, "/cleardiscount")
}

//
func makeURIBookstoreV1RestockCreateOper(in *RestockRequest) string {
	return fmt.Sprint("/v1/bookstore", "/books/Restock")
}

// AutoAddOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoAddOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoAddOrderCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoAddOrder(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), nil
}

// AutoUpdateOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoUpdateOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoUpdateOrderUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoUpdateOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoGetOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoGetOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoGetOrderGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoDeleteOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoDeleteOrder(ctx context.Context, in *Order) (*Order, error) {
	path := makeURIBookstoreV1AutoDeleteOrderDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoDeleteOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoListOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoListOrder(ctx context.Context, options *api.ListWatchOptions) (*OrderList, error) {
	path := makeURIBookstoreV1AutoListOrderListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoListOrder(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*OrderList), err
}

// AutoWatchOrder CRUD method for Order
func (r *EndpointsBookstoreV1RestClient) AutoWatchOrder(ctx context.Context, in *Order) (*Order, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsBookstoreV1RestClient) ApplydiscountOrder(ctx context.Context, in *ApplyDiscountReq) (*Order, error) {
	path := makeURIBookstoreV1ApplydiscountCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1Applydiscount(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

func (r *EndpointsBookstoreV1RestClient) CleardiscountOrder(ctx context.Context, in *ApplyDiscountReq) (*Order, error) {
	path := makeURIBookstoreV1CleardiscountCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1Cleardiscount(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Order), err
}

// AutoAddBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoAddBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoUpdateBook(ctx context.Context, in *Book) (*Book, error) {
	path := makeURIBookstoreV1AutoUpdateBookUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoUpdateBook(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Book), err
}

// AutoGetBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoGetBook(ctx context.Context, in *Book) (*Book, error) {
	path := makeURIBookstoreV1AutoGetBookGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetBook(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Book), err
}

// AutoDeleteBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoDeleteBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

// AutoListBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoListBook(ctx context.Context, options *api.ListWatchOptions) (*BookList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchBook CRUD method for Book
func (r *EndpointsBookstoreV1RestClient) AutoWatchBook(ctx context.Context, in *Book) (*Book, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsBookstoreV1RestClient) RestockBook(ctx context.Context, in *RestockRequest) (*RestockResponse, error) {
	path := makeURIBookstoreV1RestockCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1Restock(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RestockResponse), err
}

// AutoAddPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoAddPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdatePublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoUpdatePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoGetPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoGetPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoDeletePublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoDeletePublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoListPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoListPublisher(ctx context.Context, options *api.ListWatchOptions) (*PublisherList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchPublisher CRUD method for Publisher
func (r *EndpointsBookstoreV1RestClient) AutoWatchPublisher(ctx context.Context, in *Publisher) (*Publisher, error) {
	return nil, errors.New("not allowed")
}

// AutoAddStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoAddStore(ctx context.Context, in *Store) (*Store, error) {
	path := makeURIBookstoreV1AutoAddStoreCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoAddStore(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Store), nil
}

// AutoUpdateStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoUpdateStore(ctx context.Context, in *Store) (*Store, error) {
	path := makeURIBookstoreV1AutoUpdateStoreUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoUpdateStore(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Store), err
}

// AutoGetStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoGetStore(ctx context.Context, in *Store) (*Store, error) {
	path := makeURIBookstoreV1AutoGetStoreGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetStore(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Store), err
}

// AutoDeleteStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoDeleteStore(ctx context.Context, in *Store) (*Store, error) {
	path := makeURIBookstoreV1AutoDeleteStoreDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoDeleteStore(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Store), err
}

// AutoListStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoListStore(ctx context.Context, options *api.ListWatchOptions) (*StoreList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchStore CRUD method for Store
func (r *EndpointsBookstoreV1RestClient) AutoWatchStore(ctx context.Context, in *Store) (*Store, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsBookstoreV1RestClient) AddOutageStore(ctx context.Context, in *OutageRequest) (*Store, error) {
	path := makeURIBookstoreV1AddOutageCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AddOutage(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Store), err
}

// AutoAddCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoAddCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoUpdateCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	return nil, errors.New("not allowed")
}

// AutoGetCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoGetCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoDeleteCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	return nil, errors.New("not allowed")
}

// AutoListCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoListCoupon(ctx context.Context, options *api.ListWatchOptions) (*CouponList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCoupon CRUD method for Coupon
func (r *EndpointsBookstoreV1RestClient) AutoWatchCoupon(ctx context.Context, in *Coupon) (*Coupon, error) {
	return nil, errors.New("not allowed")
}

// AutoAddCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoAddCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	path := makeURIBookstoreV1AutoAddCustomerCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoAddCustomer(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Customer), nil
}

// AutoUpdateCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoUpdateCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	path := makeURIBookstoreV1AutoUpdateCustomerUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoUpdateCustomer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Customer), err
}

// AutoGetCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoGetCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	path := makeURIBookstoreV1AutoGetCustomerGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoGetCustomer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Customer), err
}

// AutoDeleteCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoDeleteCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	path := makeURIBookstoreV1AutoDeleteCustomerDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoDeleteCustomer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Customer), err
}

// AutoListCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoListCustomer(ctx context.Context, options *api.ListWatchOptions) (*CustomerList, error) {
	path := makeURIBookstoreV1AutoListCustomerListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespBookstoreV1AutoListCustomer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CustomerList), err
}

// AutoWatchCustomer CRUD method for Customer
func (r *EndpointsBookstoreV1RestClient) AutoWatchCustomer(ctx context.Context, in *Customer) (*Customer, error) {
	return nil, errors.New("not allowed")
}

// MakeBookstoreV1RestClientEndpoints make REST client endpoints
func MakeBookstoreV1RestClientEndpoints(instance string) (EndpointsBookstoreV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsBookstoreV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
