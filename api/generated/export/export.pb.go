// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: export.proto

/*
	Package export is a generated protocol buffer package.

	Service name

	It is generated from these files:
		export.proto

	It has these top-level messages:
		AutoMsgExportPolicyWatchHelper
		ExportPolicy
		ExportPolicyList
		ExportPolicySpec
		ExportPolicyStatus
		ExternalCred
*/
package export

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ExportPolicySpec_Formats int32

const (
	ExportPolicySpec_Netflow ExportPolicySpec_Formats = 0
	ExportPolicySpec_Kafka   ExportPolicySpec_Formats = 1
)

var ExportPolicySpec_Formats_name = map[int32]string{
	0: "Netflow",
	1: "Kafka",
}
var ExportPolicySpec_Formats_value = map[string]int32{
	"Netflow": 0,
	"Kafka":   1,
}

func (x ExportPolicySpec_Formats) String() string {
	return proto.EnumName(ExportPolicySpec_Formats_name, int32(x))
}
func (ExportPolicySpec_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorExport, []int{3, 0}
}

type AutoMsgExportPolicyWatchHelper struct {
	// Export Interval defines how often to push the records to an external or internal collector
	// The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Area describes an area for which the monitoring policy is specified
	Object *ExportPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgExportPolicyWatchHelper) Reset()         { *m = AutoMsgExportPolicyWatchHelper{} }
func (m *AutoMsgExportPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgExportPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgExportPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorExport, []int{0}
}

func (m *AutoMsgExportPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgExportPolicyWatchHelper) GetObject() *ExportPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type ExportPolicy struct {
	// list of monitoring policies that refer to this collection policy
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// list of event policies that refer to this collection policy
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           ExportPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         ExportPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *ExportPolicy) Reset()                    { *m = ExportPolicy{} }
func (m *ExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicy) ProtoMessage()               {}
func (*ExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorExport, []int{1} }

func (m *ExportPolicy) GetSpec() ExportPolicySpec {
	if m != nil {
		return m.Spec
	}
	return ExportPolicySpec{}
}

func (m *ExportPolicy) GetStatus() ExportPolicyStatus {
	if m != nil {
		return m.Status
	}
	return ExportPolicyStatus{}
}

type ExportPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the export policy.
	Items []*ExportPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *ExportPolicyList) Reset()                    { *m = ExportPolicyList{} }
func (m *ExportPolicyList) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicyList) ProtoMessage()               {}
func (*ExportPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorExport, []int{2} }

func (m *ExportPolicyList) GetItems() []*ExportPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// ------------------------ ExternalCred Object ----------------------------
// ExternalCred defines credentails required to access an external entity, such as
// a stats collector, compute orchestration entity, or a syslog server.
// External entity may support a variety of methods, like username/password,
// TLS Client authentication, or Bearer Token based authentication. User is
// expected to configure one of the methods
type ExportPolicySpec struct {
	// UserName is the login id to be used towards the external entity
	ExportInterval string `protobuf:"bytes,1,opt,name=ExportInterval,proto3" json:"export-interval,omitempty"`
	// Password is one time specified, not visibile on read operations
	// Only valid when UserName is defined
	// TBD: need to add (venice.secret) = "true" support for this
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format,omitempty"`
	// External entity supports bearer tokens for authentication and authorization
	// Token refresh is not supported using OAuth2
	// TBD: need to add (venice.secret) = "true" support for this
	CollectorIpAddress string `protobuf:"bytes,3,opt,name=CollectorIpAddress,proto3" json:"collector-ip-address,omitempty"`
	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	CollectorPort string `protobuf:"bytes,4,opt,name=CollectorPort,proto3" json:"collector-port,omitempty"`
	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	// TBD: need to add (venice.secret) = "true" support for this
	Credentials *ExternalCred `protobuf:"bytes,5,opt,name=Credentials" json:"credentials,omitempty"`
}

func (m *ExportPolicySpec) Reset()                    { *m = ExportPolicySpec{} }
func (m *ExportPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicySpec) ProtoMessage()               {}
func (*ExportPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorExport, []int{3} }

func (m *ExportPolicySpec) GetExportInterval() string {
	if m != nil {
		return m.ExportInterval
	}
	return ""
}

func (m *ExportPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ExportPolicySpec) GetCollectorIpAddress() string {
	if m != nil {
		return m.CollectorIpAddress
	}
	return ""
}

func (m *ExportPolicySpec) GetCollectorPort() string {
	if m != nil {
		return m.CollectorPort
	}
	return ""
}

func (m *ExportPolicySpec) GetCredentials() *ExternalCred {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type ExportPolicyStatus struct {
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
	EventPolicies      []string `protobuf:"bytes,2,rep,name=EventPolicies" json:"event-policies,omitempty"`
}

func (m *ExportPolicyStatus) Reset()                    { *m = ExportPolicyStatus{} }
func (m *ExportPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicyStatus) ProtoMessage()               {}
func (*ExportPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorExport, []int{4} }

func (m *ExportPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

func (m *ExportPolicyStatus) GetEventPolicies() []string {
	if m != nil {
		return m.EventPolicies
	}
	return nil
}

type ExternalCred struct {
	UserName    string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password,omitempty"`
	BearerToken string `protobuf:"bytes,3,opt,name=BearerToken,proto3" json:"bearer-token,omitempty"`
	CertData    []byte `protobuf:"bytes,4,opt,name=CertData,proto3" json:"cert-data,omitempty"`
	KeyData     []byte `protobuf:"bytes,5,opt,name=KeyData,proto3" json:"key-data,omitempty"`
	CaData      []byte `protobuf:"bytes,6,opt,name=CaData,proto3" json:"ca-data,omitempty"`
}

func (m *ExternalCred) Reset()                    { *m = ExternalCred{} }
func (m *ExternalCred) String() string            { return proto.CompactTextString(m) }
func (*ExternalCred) ProtoMessage()               {}
func (*ExternalCred) Descriptor() ([]byte, []int) { return fileDescriptorExport, []int{5} }

func (m *ExternalCred) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ExternalCred) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ExternalCred) GetBearerToken() string {
	if m != nil {
		return m.BearerToken
	}
	return ""
}

func (m *ExternalCred) GetCertData() []byte {
	if m != nil {
		return m.CertData
	}
	return nil
}

func (m *ExternalCred) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *ExternalCred) GetCaData() []byte {
	if m != nil {
		return m.CaData
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgExportPolicyWatchHelper)(nil), "export.AutoMsgExportPolicyWatchHelper")
	proto.RegisterType((*ExportPolicy)(nil), "export.ExportPolicy")
	proto.RegisterType((*ExportPolicyList)(nil), "export.ExportPolicyList")
	proto.RegisterType((*ExportPolicySpec)(nil), "export.ExportPolicySpec")
	proto.RegisterType((*ExportPolicyStatus)(nil), "export.ExportPolicyStatus")
	proto.RegisterType((*ExternalCred)(nil), "export.ExternalCred")
	proto.RegisterEnum("export.ExportPolicySpec_Formats", ExportPolicySpec_Formats_name, ExportPolicySpec_Formats_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExportPolicyV1 service

type ExportPolicyV1Client interface {
	AutoAddExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoGetExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ExportPolicyList, error)
	AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ExportPolicyV1_AutoWatchExportPolicyClient, error)
}

type exportPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewExportPolicyV1Client(cc *grpc.ClientConn) ExportPolicyV1Client {
	return &exportPolicyV1Client{cc}
}

func (c *exportPolicyV1Client) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/export.ExportPolicyV1/AutoAddExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/export.ExportPolicyV1/AutoDeleteExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/export.ExportPolicyV1/AutoGetExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ExportPolicyList, error) {
	out := new(ExportPolicyList)
	err := grpc.Invoke(ctx, "/export.ExportPolicyV1/AutoListExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/export.ExportPolicyV1/AutoUpdateExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ExportPolicyV1_AutoWatchExportPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExportPolicyV1_serviceDesc.Streams[0], c.cc, "/export.ExportPolicyV1/AutoWatchExportPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &exportPolicyV1AutoWatchExportPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportPolicyV1_AutoWatchExportPolicyClient interface {
	Recv() (*AutoMsgExportPolicyWatchHelper, error)
	grpc.ClientStream
}

type exportPolicyV1AutoWatchExportPolicyClient struct {
	grpc.ClientStream
}

func (x *exportPolicyV1AutoWatchExportPolicyClient) Recv() (*AutoMsgExportPolicyWatchHelper, error) {
	m := new(AutoMsgExportPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExportPolicyV1 service

type ExportPolicyV1Server interface {
	AutoAddExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoDeleteExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoGetExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoListExportPolicy(context.Context, *api.ListWatchOptions) (*ExportPolicyList, error)
	AutoUpdateExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoWatchExportPolicy(*api.ListWatchOptions, ExportPolicyV1_AutoWatchExportPolicyServer) error
}

func RegisterExportPolicyV1Server(s *grpc.Server, srv ExportPolicyV1Server) {
	s.RegisterService(&_ExportPolicyV1_serviceDesc, srv)
}

func _ExportPolicyV1_AutoAddExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoAddExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/export.ExportPolicyV1/AutoAddExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoAddExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoDeleteExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoDeleteExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/export.ExportPolicyV1/AutoDeleteExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoDeleteExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoGetExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoGetExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/export.ExportPolicyV1/AutoGetExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoGetExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoListExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoListExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/export.ExportPolicyV1/AutoListExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoListExportPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoUpdateExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoUpdateExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/export.ExportPolicyV1/AutoUpdateExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoUpdateExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoWatchExportPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportPolicyV1Server).AutoWatchExportPolicy(m, &exportPolicyV1AutoWatchExportPolicyServer{stream})
}

type ExportPolicyV1_AutoWatchExportPolicyServer interface {
	Send(*AutoMsgExportPolicyWatchHelper) error
	grpc.ServerStream
}

type exportPolicyV1AutoWatchExportPolicyServer struct {
	grpc.ServerStream
}

func (x *exportPolicyV1AutoWatchExportPolicyServer) Send(m *AutoMsgExportPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _ExportPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "export.ExportPolicyV1",
	HandlerType: (*ExportPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddExportPolicy",
			Handler:    _ExportPolicyV1_AutoAddExportPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteExportPolicy",
			Handler:    _ExportPolicyV1_AutoDeleteExportPolicy_Handler,
		},
		{
			MethodName: "AutoGetExportPolicy",
			Handler:    _ExportPolicyV1_AutoGetExportPolicy_Handler,
		},
		{
			MethodName: "AutoListExportPolicy",
			Handler:    _ExportPolicyV1_AutoListExportPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateExportPolicy",
			Handler:    _ExportPolicyV1_AutoUpdateExportPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchExportPolicy",
			Handler:       _ExportPolicyV1_AutoWatchExportPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "export.proto",
}

func (m *AutoMsgExportPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgExportPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExport(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *ExportPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintExport(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExport(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExportPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExportInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.ExportInterval)))
		i += copy(dAtA[i:], m.ExportInterval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.CollectorIpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.CollectorIpAddress)))
		i += copy(dAtA[i:], m.CollectorIpAddress)
	}
	if len(m.CollectorPort) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.CollectorPort)))
		i += copy(dAtA[i:], m.CollectorPort)
	}
	if m.Credentials != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExport(dAtA, i, uint64(m.Credentials.Size()))
		n8, err := m.Credentials.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ExportPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.EventPolicies) > 0 {
		for _, s := range m.EventPolicies {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ExternalCred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalCred) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.BearerToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.BearerToken)))
		i += copy(dAtA[i:], m.BearerToken)
	}
	if len(m.CertData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.CertData)))
		i += copy(dAtA[i:], m.CertData)
	}
	if len(m.KeyData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.KeyData)))
		i += copy(dAtA[i:], m.KeyData)
	}
	if len(m.CaData) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExport(dAtA, i, uint64(len(m.CaData)))
		i += copy(dAtA[i:], m.CaData)
	}
	return i, nil
}

func encodeVarintExport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgExportPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovExport(uint64(l))
	}
	return n
}

func (m *ExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExport(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovExport(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovExport(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovExport(uint64(l))
	return n
}

func (m *ExportPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovExport(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovExport(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovExport(uint64(l))
		}
	}
	return n
}

func (m *ExportPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExportInterval)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.CollectorIpAddress)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.CollectorPort)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovExport(uint64(l))
	}
	return n
}

func (m *ExportPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovExport(uint64(l))
		}
	}
	if len(m.EventPolicies) > 0 {
		for _, s := range m.EventPolicies {
			l = len(s)
			n += 1 + l + sovExport(uint64(l))
		}
	}
	return n
}

func (m *ExternalCred) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.BearerToken)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.CertData)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.KeyData)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	l = len(m.CaData)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	return n
}

func sovExport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExport(x uint64) (n int) {
	return sovExport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgExportPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgExportPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgExportPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &ExportPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ExportPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &ExternalCred{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPolicies = append(m.EventPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalCred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalCred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalCred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertData = append(m.CertData[:0], dAtA[iNdEx:postIndex]...)
			if m.CertData == nil {
				m.CertData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = append(m.KeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyData == nil {
				m.KeyData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaData = append(m.CaData[:0], dAtA[iNdEx:postIndex]...)
			if m.CaData == nil {
				m.CaData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("export.proto", fileDescriptorExport) }

var fileDescriptorExport = []byte{
	// 1127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xd8, 0x89, 0x13, 0x8f, 0xdd, 0x36, 0x4c, 0x3e, 0xb0, 0xad, 0x36, 0x9b, 0x2c, 0x5f,
	0x69, 0x55, 0xdb, 0x69, 0x72, 0xa1, 0xa1, 0x97, 0x6c, 0x12, 0x20, 0x6a, 0xd3, 0x7c, 0xc3, 0x79,
	0xb2, 0xfb, 0xe2, 0x2c, 0x59, 0xef, 0xac, 0x76, 0xc7, 0x09, 0x51, 0xd5, 0x03, 0x0d, 0xf0, 0x07,
	0x40, 0xc4, 0x81, 0x0b, 0x82, 0x63, 0xb8, 0x71, 0xe4, 0x2f, 0xa8, 0x38, 0x55, 0x70, 0x41, 0x3d,
	0xac, 0x50, 0xc4, 0xc9, 0x27, 0xfe, 0x04, 0x34, 0xb3, 0x63, 0x67, 0xec, 0x3a, 0x28, 0x2a, 0x37,
	0xef, 0x7b, 0xbf, 0xdf, 0xef, 0x7d, 0xcc, 0xf3, 0x9b, 0xc1, 0x79, 0xf8, 0x3c, 0x60, 0x21, 0xaf,
	0x04, 0x21, 0xe3, 0x8c, 0x64, 0x92, 0xaf, 0xd2, 0xcd, 0x1a, 0x63, 0x35, 0x0f, 0xaa, 0x34, 0x70,
	0xab, 0xd4, 0xf7, 0x19, 0xa7, 0xdc, 0x65, 0x7e, 0x94, 0xa0, 0x4a, 0xcb, 0x35, 0x97, 0xef, 0x37,
	0x76, 0x2b, 0x36, 0xab, 0x57, 0x03, 0xf0, 0x23, 0xea, 0x3b, 0xac, 0x1a, 0x1d, 0x55, 0x0f, 0xc1,
	0x77, 0x6d, 0xa8, 0x36, 0xb8, 0xeb, 0x45, 0x82, 0x5a, 0x03, 0x5f, 0x67, 0x57, 0x5d, 0xdf, 0xf6,
	0x1a, 0x0e, 0xb4, 0x64, 0xca, 0x9a, 0x4c, 0x8d, 0xd5, 0x58, 0x55, 0x9a, 0x77, 0x1b, 0x7b, 0xf2,
	0x4b, 0x7e, 0xc8, 0x5f, 0x0a, 0xfe, 0xce, 0x25, 0x51, 0x45, 0x8e, 0x75, 0xe0, 0x34, 0x81, 0x99,
	0x80, 0x27, 0x16, 0x1a, 0x9c, 0xad, 0x46, 0xb5, 0x65, 0x59, 0xcb, 0x3a, 0xf3, 0x5c, 0xfb, 0xf8,
	0x53, 0xca, 0xed, 0xfd, 0x8f, 0xc1, 0x0b, 0x20, 0x24, 0x79, 0xdc, 0xbf, 0x7d, 0x1c, 0x40, 0x01,
	0x4d, 0xa2, 0xe9, 0x2c, 0x79, 0x1b, 0x67, 0xd6, 0x76, 0x3f, 0x03, 0x9b, 0x17, 0x52, 0x93, 0x68,
	0x3a, 0x37, 0x3b, 0x5a, 0x51, 0x1d, 0xd1, 0xe9, 0xf3, 0x37, 0x5e, 0x9e, 0x8e, 0xe6, 0x8e, 0x84,
	0xc8, 0xbe, 0x14, 0x31, 0x7f, 0x4c, 0xe1, 0xbc, 0x8e, 0x20, 0x33, 0x18, 0x6d, 0x4b, 0xc9, 0xdc,
	0xec, 0xb5, 0x0a, 0x0d, 0xdc, 0x8a, 0x88, 0xb1, 0x0a, 0x9c, 0x5a, 0x23, 0xcf, 0x63, 0xa3, 0xef,
	0x45, 0x6c, 0xa0, 0x66, 0x6c, 0x0c, 0xde, 0x75, 0x7d, 0xcf, 0xf5, 0x61, 0x13, 0x6d, 0x93, 0xfb,
	0x18, 0xad, 0xa9, 0xa0, 0x37, 0x24, 0x23, 0xc9, 0x43, 0x72, 0x4a, 0x1a, 0xe7, 0xba, 0xa8, 0xee,
	0x2e, 0xab, 0xbb, 0x1c, 0xea, 0x01, 0x3f, 0xde, 0x44, 0x6b, 0x64, 0x09, 0xf7, 0x6f, 0x05, 0x60,
	0x17, 0xd2, 0x92, 0x5d, 0xe8, 0x95, 0xb2, 0xf0, 0x5b, 0xe3, 0x42, 0x46, 0x48, 0x44, 0x01, 0xd8,
	0x9a, 0x84, 0x64, 0x93, 0x47, 0x38, 0xb3, 0xc5, 0x29, 0x6f, 0x44, 0x85, 0x7e, 0xa9, 0x53, 0xea,
	0xa9, 0x23, 0x11, 0x56, 0x41, 0x29, 0x0d, 0x47, 0xf2, 0x5b, 0xd3, 0x52, 0x1a, 0xf3, 0xc3, 0xbf,
	0x7f, 0x55, 0x54, 0xd3, 0x94, 0x30, 0xcd, 0xef, 0x10, 0x1e, 0xd6, 0xa5, 0x1e, 0xb9, 0x11, 0x27,
	0xa6, 0xe8, 0x53, 0xaa, 0x57, 0x9f, 0x86, 0x5a, 0x35, 0x93, 0xdb, 0x78, 0x48, 0x60, 0x85, 0x55,
	0x95, 0x98, 0x40, 0x5b, 0x46, 0x0d, 0xfa, 0x16, 0x1e, 0x58, 0xe1, 0x50, 0x17, 0x25, 0xa4, 0x2f,
	0x3d, 0xbd, 0xeb, 0x2f, 0x4f, 0x47, 0xb1, 0xe7, 0x46, 0x5c, 0x1d, 0xde, 0xaf, 0xe9, 0xce, 0xc4,
	0x64, 0x37, 0x96, 0xf1, 0xf5, 0xc4, 0xb6, 0xe2, 0x73, 0x08, 0x0f, 0xa9, 0x97, 0x0c, 0x88, 0x75,
	0xab, 0x19, 0x1b, 0xc5, 0x44, 0xb5, 0xec, 0x2a, 0x97, 0x56, 0x7e, 0x17, 0x89, 0x6c, 0xe0, 0xcc,
	0x87, 0x2c, 0xac, 0xd3, 0x64, 0x9e, 0xb2, 0xd6, 0xfd, 0xb3, 0xaf, 0x8b, 0x53, 0x5b, 0x3c, 0x5c,
	0xf6, 0x1b, 0xf5, 0xe9, 0xee, 0xa0, 0x95, 0x04, 0x1a, 0xdd, 0x16, 0x9d, 0xdd, 0x93, 0xbf, 0xf5,
	0xce, 0x26, 0x5e, 0xb2, 0x89, 0xc9, 0x22, 0xf3, 0x3c, 0xb0, 0x39, 0x0b, 0x57, 0x82, 0x05, 0xc7,
	0x09, 0x21, 0x8a, 0x64, 0x63, 0xb2, 0x96, 0xd9, 0x8c, 0x8d, 0x09, 0xbb, 0xe5, 0x2d, 0xbb, 0x41,
	0x99, 0x26, 0x7e, 0x4d, 0xa7, 0x07, 0x9b, 0x58, 0xf8, 0x5a, 0xdb, 0xba, 0xce, 0x42, 0x2e, 0x47,
	0x20, 0x6b, 0xdd, 0x6c, 0xc6, 0x46, 0xe1, 0x42, 0x4e, 0x64, 0xab, 0x09, 0x75, 0x52, 0xc8, 0x06,
	0xce, 0x2d, 0x86, 0xe0, 0x80, 0xcf, 0x5d, 0xea, 0x45, 0x85, 0x81, 0xee, 0xff, 0x0f, 0x87, 0xd0,
	0xa7, 0x9e, 0x80, 0x58, 0xc5, 0x66, 0x6c, 0x8c, 0xd9, 0x17, 0x60, 0x4d, 0x54, 0xd7, 0x30, 0xa7,
	0xf0, 0xa0, 0x6a, 0x09, 0xc9, 0xe1, 0xc1, 0xc7, 0xc0, 0xf7, 0x3c, 0x76, 0x34, 0xdc, 0x47, 0xb2,
	0x78, 0xe0, 0x21, 0xdd, 0x3b, 0xa0, 0xc3, 0xc8, 0xfc, 0x19, 0x61, 0xf2, 0xea, 0x80, 0x92, 0x0d,
	0x4c, 0x56, 0x99, 0xef, 0x72, 0x16, 0xba, 0x7e, 0x4d, 0x7a, 0x5c, 0x88, 0x0a, 0x68, 0x32, 0x3d,
	0x9d, 0xb5, 0xa6, 0x9a, 0xb1, 0x71, 0xab, 0xde, 0xf6, 0x96, 0x03, 0xe5, 0xd6, 0x7b, 0xf4, 0x2a,
	0x59, 0xf4, 0x68, 0xf9, 0x10, 0x7c, 0xde, 0x56, 0x4b, 0x49, 0x35, 0xd9, 0x23, 0x10, 0x8e, 0x5e,
	0x42, 0x9d, 0x14, 0xf3, 0x37, 0xb9, 0x27, 0x2e, 0x3a, 0x41, 0x66, 0xf1, 0xd0, 0x4e, 0x04, 0xe1,
	0x63, 0x5a, 0x57, 0x1b, 0xc8, 0x1a, 0x6f, 0xc6, 0x06, 0x69, 0x44, 0x02, 0x52, 0x07, 0x4d, 0xa9,
	0x8d, 0x13, 0x9c, 0x75, 0x1a, 0x45, 0x47, 0x2c, 0x74, 0xd4, 0x54, 0x49, 0x4e, 0xa0, 0x6c, 0x3a,
	0xa7, 0x85, 0x23, 0x0f, 0x70, 0xce, 0x02, 0x1a, 0x42, 0xb8, 0xcd, 0x0e, 0xc0, 0x57, 0xd3, 0x52,
	0x6a, 0xc6, 0xc6, 0xf8, 0xae, 0x34, 0x97, 0xb9, 0xb0, 0xeb, 0xe7, 0xa0, 0xc1, 0xc9, 0x1c, 0x1e,
	0x5a, 0x84, 0x90, 0x2f, 0x51, 0x4e, 0xe5, 0x64, 0xe4, 0xad, 0x37, 0x9b, 0xb1, 0x31, 0x62, 0x43,
	0xc8, 0xcb, 0x0e, 0xed, 0x58, 0x47, 0x6d, 0x20, 0x99, 0xc1, 0x83, 0x0f, 0xe1, 0x58, 0x72, 0x06,
	0x24, 0x47, 0x66, 0x79, 0x00, 0xc7, 0xdd, 0x94, 0x16, 0x8c, 0x94, 0x71, 0x66, 0x91, 0x4a, 0x42,
	0x46, 0x12, 0xc6, 0x9a, 0xb1, 0xf1, 0x86, 0x4d, 0xbb, 0xf1, 0x0a, 0x34, 0xfb, 0x4f, 0xa6, 0xf5,
	0x1f, 0x4d, 0x8e, 0xfe, 0x93, 0x7b, 0xe4, 0x10, 0x8f, 0x88, 0x75, 0xbf, 0xe0, 0x38, 0x1d, 0xdb,
	0xb8, 0xe7, 0x1e, 0x28, 0xf5, 0xb4, 0x9a, 0x73, 0x7f, 0x9e, 0x8e, 0xa2, 0x5f, 0xbe, 0x2c, 0x66,
	0xec, 0x10, 0x28, 0x87, 0x67, 0x7f, 0xfc, 0xfd, 0x6d, 0xca, 0xc0, 0x7d, 0xf3, 0xe8, 0x8e, 0x59,
	0xa8, 0x3e, 0x59, 0xab, 0x6c, 0x83, 0x4f, 0x7d, 0xfe, 0xb4, 0xaa, 0xef, 0x36, 0xf2, 0x05, 0xc2,
	0xe3, 0x22, 0xf0, 0x12, 0x78, 0xc0, 0xe1, 0xb5, 0x63, 0x7f, 0xd0, 0x8a, 0xed, 0x48, 0x1d, 0x19,
	0xfb, 0x3d, 0xdc, 0x37, 0xdf, 0x77, 0x67, 0xea, 0xb2, 0xd0, 0xc2, 0x2e, 0xa6, 0xe2, 0x29, 0x79,
	0x92, 0xd4, 0xfe, 0x11, 0xf0, 0xd7, 0x8e, 0xff, 0xbe, 0x8a, 0x9f, 0xae, 0x01, 0xbf, 0x08, 0x4e,
	0xae, 0x10, 0x7c, 0x07, 0x8f, 0x8a, 0xe0, 0x62, 0x25, 0x77, 0x44, 0x1f, 0x6b, 0x6f, 0x6a, 0x79,
	0xe7, 0xae, 0x05, 0xf2, 0xee, 0x2f, 0xf5, 0xbc, 0xa3, 0x04, 0xca, 0xcc, 0xab, 0x14, 0xfa, 0xc5,
	0x82, 0x26, 0xcf, 0x54, 0x5f, 0x77, 0x02, 0x87, 0xfe, 0x8f, 0xbe, 0x3e, 0x68, 0xf5, 0xb5, 0x21,
	0x75, 0x64, 0x69, 0xd3, 0xf2, 0x4c, 0x4b, 0x57, 0xa8, 0xad, 0x86, 0xc7, 0x44, 0x0e, 0xb2, 0x80,
	0xab, 0x14, 0xf7, 0x6e, 0x2b, 0x87, 0xff, 0x7e, 0x79, 0x98, 0xd7, 0x54, 0x56, 0x03, 0xf2, 0x25,
	0x31, 0x83, 0x4a, 0x3f, 0xa0, 0x6f, 0x4e, 0x8a, 0xa9, 0xc3, 0x7b, 0xdf, 0x9f, 0x74, 0x5e, 0x9d,
	0x3f, 0x9d, 0x14, 0x3b, 0x5e, 0x17, 0x67, 0x27, 0xc5, 0xc5, 0xae, 0xf7, 0x86, 0x38, 0x31, 0x92,
	0x0e, 0x1a, 0x9c, 0xa8, 0xd9, 0xb9, 0x42, 0x61, 0x67, 0x27, 0xc5, 0x4a, 0x97, 0x4c, 0x7f, 0xc0,
	0x22, 0x5e, 0xba, 0x74, 0xce, 0xad, 0xfc, 0xf3, 0xf3, 0x09, 0xf4, 0xe2, 0x7c, 0x02, 0xfd, 0x75,
	0x3e, 0x81, 0xd6, 0xd1, 0x6e, 0x46, 0xbe, 0xb2, 0xe6, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf2,
	0x15, 0x44, 0xe6, 0x38, 0x0a, 0x00, 0x00,
}
