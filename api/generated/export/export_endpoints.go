// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package export is a auto generated package.
Input file: protos/export.proto
*/
package export

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareExportPolicyV1Client add middleware to the client
type MiddlewareExportPolicyV1Client func(ServiceExportPolicyV1Client) ServiceExportPolicyV1Client

// EndpointsExportPolicyV1Client is the endpoints for the client
type EndpointsExportPolicyV1Client struct {
	Client ExportPolicyV1Client

	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint
}

// EndpointsExportPolicyV1RestClient is the REST client
type EndpointsExportPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint
	AutoWatchExportPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareExportPolicyV1Server adds middle ware to the server
type MiddlewareExportPolicyV1Server func(ServiceExportPolicyV1Server) ServiceExportPolicyV1Server

// EndpointsExportPolicyV1Server is the server endpoints
type EndpointsExportPolicyV1Server struct {
	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint

	watchHandlerExportPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddExportPolicy is endpoint for AutoAddExportPolicy
func (e EndpointsExportPolicyV1Client) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoAddExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoAddExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoDeleteExportPolicy is endpoint for AutoDeleteExportPolicy
func (e EndpointsExportPolicyV1Client) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoDeleteExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoDeleteExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoGetExportPolicy is endpoint for AutoGetExportPolicy
func (e EndpointsExportPolicyV1Client) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoGetExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoGetExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoListExportPolicy is endpoint for AutoListExportPolicy
func (e EndpointsExportPolicyV1Client) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions) (*ExportPolicyList, error) {
	resp, err := e.AutoListExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicyList{}, err
	}
	return resp.(*ExportPolicyList), nil
}

type respExportPolicyV1AutoListExportPolicy struct {
	V   ExportPolicyList
	Err error
}

// AutoUpdateExportPolicy is endpoint for AutoUpdateExportPolicy
func (e EndpointsExportPolicyV1Client) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoUpdateExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoUpdateExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoWatchExportPolicy performs Watch for ExportPolicy
func (e EndpointsExportPolicyV1Client) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions) (ExportPolicyV1_AutoWatchExportPolicyClient, error) {
	return e.Client.AutoWatchExportPolicy(ctx, in)
}

// AutoAddExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoAddExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoAddExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoAddExportPolicyEndpoint creates  AutoAddExportPolicy endpoints for the service
func MakeExportPolicyV1AutoAddExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoAddExportPolicy(ctx, *req)
		return respExportPolicyV1AutoAddExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ExportPolicyV1:AutoAddExportPolicy")(f)
}

// AutoDeleteExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoDeleteExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoDeleteExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoDeleteExportPolicyEndpoint creates  AutoDeleteExportPolicy endpoints for the service
func MakeExportPolicyV1AutoDeleteExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoDeleteExportPolicy(ctx, *req)
		return respExportPolicyV1AutoDeleteExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ExportPolicyV1:AutoDeleteExportPolicy")(f)
}

// AutoGetExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoGetExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoGetExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoGetExportPolicyEndpoint creates  AutoGetExportPolicy endpoints for the service
func MakeExportPolicyV1AutoGetExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoGetExportPolicy(ctx, *req)
		return respExportPolicyV1AutoGetExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ExportPolicyV1:AutoGetExportPolicy")(f)
}

// AutoListExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoListExportPolicy(ctx context.Context, in api.ListWatchOptions) (ExportPolicyList, error) {
	resp, err := e.AutoListExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicyList{}, err
	}
	return *resp.(*ExportPolicyList), nil
}

// MakeExportPolicyV1AutoListExportPolicyEndpoint creates  AutoListExportPolicy endpoints for the service
func MakeExportPolicyV1AutoListExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListExportPolicy(ctx, *req)
		return respExportPolicyV1AutoListExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ExportPolicyV1:AutoListExportPolicy")(f)
}

// AutoUpdateExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoUpdateExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoUpdateExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoUpdateExportPolicyEndpoint creates  AutoUpdateExportPolicy endpoints for the service
func MakeExportPolicyV1AutoUpdateExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoUpdateExportPolicy(ctx, *req)
		return respExportPolicyV1AutoUpdateExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ExportPolicyV1:AutoUpdateExportPolicy")(f)
}

// AutoWatchExportPolicy is the watch handler for ExportPolicy on the server side.
func (e EndpointsExportPolicyV1Server) AutoWatchExportPolicy(in *api.ListWatchOptions, stream ExportPolicyV1_AutoWatchExportPolicyServer) error {
	return e.watchHandlerExportPolicy(in, stream)
}

// MakeAutoWatchExportPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ExportPolicyV1_AutoWatchExportPolicyServer)
		return s.AutoWatchExportPolicy(options, wstream)
	}
}

// MakeExportPolicyV1ServerEndpoints creates server endpoints
func MakeExportPolicyV1ServerEndpoints(s ServiceExportPolicyV1Server, logger log.Logger) EndpointsExportPolicyV1Server {
	return EndpointsExportPolicyV1Server{

		AutoAddExportPolicyEndpoint:    MakeExportPolicyV1AutoAddExportPolicyEndpoint(s, logger),
		AutoDeleteExportPolicyEndpoint: MakeExportPolicyV1AutoDeleteExportPolicyEndpoint(s, logger),
		AutoGetExportPolicyEndpoint:    MakeExportPolicyV1AutoGetExportPolicyEndpoint(s, logger),
		AutoListExportPolicyEndpoint:   MakeExportPolicyV1AutoListExportPolicyEndpoint(s, logger),
		AutoUpdateExportPolicyEndpoint: MakeExportPolicyV1AutoUpdateExportPolicyEndpoint(s, logger),

		watchHandlerExportPolicy: MakeAutoWatchExportPolicyEndpoint(s, logger),
	}
}

// LoggingExportPolicyV1MiddlewareClient adds middleware for the client
func LoggingExportPolicyV1MiddlewareClient(logger log.Logger) MiddlewareExportPolicyV1Client {
	return func(next ServiceExportPolicyV1Client) ServiceExportPolicyV1Client {
		return loggingExportPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingExportPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceExportPolicyV1Client
}

// LoggingExportPolicyV1MiddlewareServer adds middleware for the client
func LoggingExportPolicyV1MiddlewareServer(logger log.Logger) MiddlewareExportPolicyV1Server {
	return func(next ServiceExportPolicyV1Server) ServiceExportPolicyV1Server {
		return loggingExportPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingExportPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceExportPolicyV1Server
}

func (m loggingExportPolicyV1MiddlewareClient) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoAddExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoDeleteExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoGetExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *ExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoListExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoUpdateExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareClient) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp ExportPolicyV1_AutoWatchExportPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoWatchExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareServer) AutoAddExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoAddExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoDeleteExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoDeleteExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoGetExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoGetExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoListExportPolicy(ctx context.Context, in api.ListWatchOptions) (resp ExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoListExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoUpdateExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoUpdateExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareServer) AutoWatchExportPolicy(in *api.ListWatchOptions, stream ExportPolicyV1_AutoWatchExportPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ExportPolicyV1", "method", "AutoWatchExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchExportPolicy(in, stream)
	return
}
func (r *EndpointsExportPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIExportPolicyV1AutoAddExportPolicyCreateOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy")
}

//
func makeURIExportPolicyV1AutoDeleteExportPolicyDeleteOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

//
func makeURIExportPolicyV1AutoGetExportPolicyGetOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

//
func makeURIExportPolicyV1AutoUpdateExportPolicyUpdateOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

// AutoAddExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoAddExportPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoAddExportPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), nil
}

// AutoUpdateExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoUpdateExportPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoUpdateExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoGetExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoGetExportPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoGetExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoDeleteExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoDeleteExportPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoDeleteExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoListExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoListExportPolicy(ctx context.Context, options *api.ListWatchOptions) (*ExportPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoWatchExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeExportPolicyV1RestClientEndpoints make REST client endpoints
func MakeExportPolicyV1RestClientEndpoints(instance string) (EndpointsExportPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsExportPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
