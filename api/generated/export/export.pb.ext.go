// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package export is a auto generated package.
Input file: protos/export.proto
*/
package export

import (
	fmt "fmt"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapExport = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *ExportPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "exportPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *ExportPolicyList) MakeKey(prefix string) string {
	obj := ExportPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgExportPolicyWatchHelper) MakeKey(prefix string) string {
	obj := ExportPolicy{}
	return obj.MakeKey(prefix)
}

// Validators

func (m *AutoMsgExportPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ExportPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ExportPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ExportPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapExport["ExportPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapExport["ExportPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *ExportPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ExternalCred) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	funcMapExport = make(map[string]map[string][]func(interface{}) bool)

	funcMapExport["ExportPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapExport["ExportPolicySpec"]["all"] = append(funcMapExport["ExportPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*ExportPolicySpec)

		if _, ok := ExportPolicySpec_Formats_value[m.Format]; !ok {
			return false
		}
		return true
	})

}
