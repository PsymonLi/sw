{
  "swagger": "2.0",
  "info": {
    "title": "svc_workload.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/workload/{O.Tenant}/endpoints": {
      "get": {
        "summary": "Retreives a list of Endpoint objects",
        "operationId": "ListEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadEndpointList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "from represents the start offset (zero based), used for pagination.\nresults returned would be in the range [from ... from+max-results-1].",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "max-results",
            "description": "max. number of events to be fetched for the request.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new Endpoint object",
        "operationId": "AddEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      }
    },
    "/v1/workload/{O.Tenant}/endpoints/{O.Name}": {
      "get": {
        "summary": "Retreives the Endpoint object",
        "operationId": "GetEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.endpoint-uuid",
            "description": "endpoint UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.workload-uuid",
            "description": "VM or container UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.workload-name",
            "description": "VM or container name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.network",
            "description": "network this endpoint belogs to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.homing-host-addr",
            "description": "host address of the host where this endpoint exists.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.homing-host-name",
            "description": "host name of the host where this endpoint exists.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.ipv4-address",
            "description": "IPv4 address of the endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.ipv4-gateway",
            "description": "IPv4 gateway for the endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.ipv6-address",
            "description": "IPv6 address for the endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.ipv6-gateway",
            "description": "IPv6 gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.mac-address",
            "description": "Mac address of the endpoint.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.node-uuid",
            "description": "homing host's UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.EndpointState",
            "description": "endpoint FSM state.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.SecurityGroups",
            "description": "security groups.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "status.micro-segment-vlan",
            "description": "micro-segment VLAN.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the Endpoint object",
        "operationId": "DeleteEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workloadEndpoint"
            }
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      }
    },
    "/v1/workload/{O.Tenant}/workloads": {
      "get": {
        "summary": "Retreives a list of Workload objects",
        "operationId": "ListWorkload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadWorkloadList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "from represents the start offset (zero based), used for pagination.\nresults returned would be in the range [from ... from+max-results-1].",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "max-results",
            "description": "max. number of events to be fetched for the request.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new Workload object",
        "operationId": "AddWorkload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      }
    },
    "/v1/workload/{O.Tenant}/workloads/{O.Name}": {
      "get": {
        "summary": "Retreives the Workload object",
        "operationId": "GetWorkload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.host-name",
            "description": "Hostname of the server where the workload is running.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.endpoints",
            "description": "List of all endpoints associated with this Workload.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the Workload object",
        "operationId": "DeleteWorkload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateWorkload",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workloadWorkload"
            }
          }
        ],
        "tags": [
          "WorkloadV1",
          "version:v1"
        ]
      }
    }
  },
  "definitions": {
    "apiListMeta": {
      "type": "object",
      "properties": {
        "resource-version": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creation-time": {
          "type": "string",
          "format": "date-time"
        },
        "mod-time": {
          "type": "string",
          "format": "date-time"
        },
        "self-link": {
          "type": "string"
        },
        "label-selector": {
          "type": "string"
        },
        "field-selector": {
          "type": "string"
        },
        "prefix-watch": {
          "type": "boolean",
          "format": "boolean"
        },
        "field-change-selector": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "type": "integer",
          "format": "int32",
          "title": "from represents the start offset (zero based), used for pagination.\nresults returned would be in the range [from ... from+max-results-1]"
        },
        "max-results": {
          "type": "integer",
          "format": "int32",
          "description": "max. number of events to be fetched for the request."
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "resource-version": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "uuid": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "creation-time": {
          "type": "string",
          "format": "date-time",
          "title": "CreationTime is the creation time of Object"
        },
        "mod-time": {
          "type": "string",
          "format": "date-time",
          "title": "ModTime is the Last Modification time of Object"
        },
        "self-link": {
          "type": "string",
          "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway."
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiObjectRef": {
      "type": "object",
      "properties": {
        "tenant": {
          "type": "string",
          "description": "Tenant of the object."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "uri": {
          "type": "string",
          "description": "URI is a link to accessing the referenced object."
        }
      },
      "description": "ObjectRef contains identifying information about an object."
    },
    "apiStatus": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/apiStatusResult",
          "description": "Result contains the status of the operation, success or failure."
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Message contains human readable form of the error."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Code is the HTTP status code."
        },
        "object-ref": {
          "$ref": "#/definitions/apiObjectRef",
          "description": "Reference to the object (optional) for which this status is being sent."
        }
      },
      "description": "Status is returned for calls that dont return objects."
    },
    "apiStatusResult": {
      "type": "object",
      "properties": {
        "Str": {
          "type": "string"
        }
      },
      "description": "StatusResult contains possible statuses for a NIC."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64"
        },
        "nanos": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "api-version": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "workloadAutoMsgEndpointWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workloadAutoMsgEndpointWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgEndpointWatchHelper is a wrapper object for watch events for Endpoint objects"
    },
    "workloadAutoMsgEndpointWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/workloadEndpoint"
        }
      }
    },
    "workloadAutoMsgWorkloadWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workloadAutoMsgWorkloadWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgWorkloadWatchHelper is a wrapper object for watch events for Workload objects"
    },
    "workloadAutoMsgWorkloadWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/workloadWorkload"
        }
      }
    },
    "workloadEndpoint": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/workloadEndpointSpec",
          "description": "Spec contains the configuration of the Endpoint."
        },
        "status": {
          "$ref": "#/definitions/workloadEndpointStatus",
          "description": "Status contains the current state of the Endpoint."
        }
      },
      "title": "Endpoint represents a network endpoint"
    },
    "workloadEndpointList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workloadEndpoint"
          },
          "title": "List of Endpoint objects"
        }
      },
      "title": "EndpointList is a container object for list of Endpoint objects"
    },
    "workloadEndpointSpec": {
      "type": "object",
      "title": "spec part of Endpoint object"
    },
    "workloadEndpointStatus": {
      "type": "object",
      "properties": {
        "endpoint-uuid": {
          "type": "string",
          "title": "endpoint UUID"
        },
        "workload-uuid": {
          "type": "string",
          "title": "VM or container UUID"
        },
        "workload-name": {
          "type": "string",
          "title": "VM or container name"
        },
        "network": {
          "type": "string",
          "title": "network this endpoint belogs to"
        },
        "homing-host-addr": {
          "type": "string",
          "title": "host address of the host where this endpoint exists"
        },
        "homing-host-name": {
          "type": "string",
          "title": "host name of the host where this endpoint exists"
        },
        "ipv4-address": {
          "type": "string",
          "title": "IPv4 address of the endpoint"
        },
        "ipv4-gateway": {
          "type": "string",
          "title": "IPv4 gateway for the endpoint"
        },
        "ipv6-address": {
          "type": "string",
          "title": "IPv6 address for the endpoint"
        },
        "ipv6-gateway": {
          "type": "string",
          "title": "IPv6 gateway"
        },
        "mac-address": {
          "type": "string",
          "title": "Mac address of the endpoint"
        },
        "node-uuid": {
          "type": "string",
          "title": "homing host's UUID"
        },
        "EndpointState": {
          "type": "string",
          "title": "endpoint FSM state"
        },
        "SecurityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "security groups"
        },
        "micro-segment-vlan": {
          "type": "integer",
          "format": "int64",
          "title": "micro-segment VLAN"
        },
        "workload-attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "VM or container attribute/labels"
        }
      },
      "title": "status part of Endpoint object"
    },
    "workloadWorkload": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/workloadWorkloadSpec",
          "description": "Spec contains the configuration of the Workload."
        },
        "status": {
          "$ref": "#/definitions/workloadWorkloadStatus",
          "description": "Status contains the current state of the Workload."
        }
      },
      "description": "Workload represents a VM, container/pod or Baremetal.",
      "title": "----------------------------- Workload Object -----------------------------"
    },
    "workloadWorkloadIntfSpec": {
      "type": "object",
      "properties": {
        "micro-seg-vlan": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 4095,
          "description": "value should be between 1 and 4095\n",
          "title": "Micro-segmentation vlan assigned for this interface"
        },
        "external-vlan": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 4095,
          "description": "value should be between 1 and 4095\n",
          "title": "External vlan assigned for this interface"
        }
      },
      "title": "Spec of a Workload interface"
    },
    "workloadWorkloadIntfStatus": {
      "type": "object",
      "properties": {
        "ip-addrs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of all IP addresses configured and discovered on a Workload Interface"
        }
      },
      "title": "Status of a Workload interface"
    },
    "workloadWorkloadList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workloadWorkload"
          },
          "title": "List of Workload objects"
        }
      },
      "title": "WorkloadList is a container object for list of Workload objects"
    },
    "workloadWorkloadSpec": {
      "type": "object",
      "properties": {
        "host-name": {
          "type": "string",
          "description": "Hostname of the server where the workload is running."
        },
        "interfaces": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/workloadWorkloadIntfSpec"
          },
          "title": "Spec of all interfaces in the Workload identified by Primary MAC"
        }
      },
      "title": "Spec part of Workload object"
    },
    "workloadWorkloadStatus": {
      "type": "object",
      "properties": {
        "interfaces": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/workloadWorkloadIntfStatus"
          },
          "title": "Status of all interfaces in the Workload identified by Primary MAC"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of all endpoints associated with this Workload"
        }
      },
      "title": "Status part of Workload object"
    }
  }
}
