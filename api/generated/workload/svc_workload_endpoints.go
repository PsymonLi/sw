// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package workload is a auto generated package.
Input file: svc_workload.proto
*/
package workload

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareWorkloadV1Client add middleware to the client
type MiddlewareWorkloadV1Client func(ServiceWorkloadV1Client) ServiceWorkloadV1Client

// EndpointsWorkloadV1Client is the endpoints for the client
type EndpointsWorkloadV1Client struct {
	Client                         WorkloadV1Client
	AutoWatchSvcWorkloadV1Endpoint endpoint.Endpoint

	AbortMigrationEndpoint     endpoint.Endpoint
	AutoAddEndpointEndpoint    endpoint.Endpoint
	AutoAddWorkloadEndpoint    endpoint.Endpoint
	AutoDeleteEndpointEndpoint endpoint.Endpoint
	AutoDeleteWorkloadEndpoint endpoint.Endpoint
	AutoGetEndpointEndpoint    endpoint.Endpoint
	AutoGetWorkloadEndpoint    endpoint.Endpoint
	AutoLabelEndpointEndpoint  endpoint.Endpoint
	AutoLabelWorkloadEndpoint  endpoint.Endpoint
	AutoListEndpointEndpoint   endpoint.Endpoint
	AutoListWorkloadEndpoint   endpoint.Endpoint
	AutoUpdateEndpointEndpoint endpoint.Endpoint
	AutoUpdateWorkloadEndpoint endpoint.Endpoint
	FinishMigrationEndpoint    endpoint.Endpoint
	StartMigrationEndpoint     endpoint.Endpoint
}

// EndpointsWorkloadV1RestClient is the REST client
type EndpointsWorkloadV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AbortMigrationEndpoint         endpoint.Endpoint
	AutoAddEndpointEndpoint        endpoint.Endpoint
	AutoAddWorkloadEndpoint        endpoint.Endpoint
	AutoDeleteEndpointEndpoint     endpoint.Endpoint
	AutoDeleteWorkloadEndpoint     endpoint.Endpoint
	AutoGetEndpointEndpoint        endpoint.Endpoint
	AutoGetWorkloadEndpoint        endpoint.Endpoint
	AutoLabelEndpointEndpoint      endpoint.Endpoint
	AutoLabelWorkloadEndpoint      endpoint.Endpoint
	AutoListEndpointEndpoint       endpoint.Endpoint
	AutoListWorkloadEndpoint       endpoint.Endpoint
	AutoUpdateEndpointEndpoint     endpoint.Endpoint
	AutoUpdateWorkloadEndpoint     endpoint.Endpoint
	AutoWatchEndpointEndpoint      endpoint.Endpoint
	AutoWatchSvcWorkloadV1Endpoint endpoint.Endpoint
	AutoWatchWorkloadEndpoint      endpoint.Endpoint
	FinishMigrationEndpoint        endpoint.Endpoint
	StartMigrationEndpoint         endpoint.Endpoint
}

// MiddlewareWorkloadV1Server adds middle ware to the server
type MiddlewareWorkloadV1Server func(ServiceWorkloadV1Server) ServiceWorkloadV1Server

// EndpointsWorkloadV1Server is the server endpoints
type EndpointsWorkloadV1Server struct {
	svcWatchHandlerWorkloadV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AbortMigrationEndpoint     endpoint.Endpoint
	AutoAddEndpointEndpoint    endpoint.Endpoint
	AutoAddWorkloadEndpoint    endpoint.Endpoint
	AutoDeleteEndpointEndpoint endpoint.Endpoint
	AutoDeleteWorkloadEndpoint endpoint.Endpoint
	AutoGetEndpointEndpoint    endpoint.Endpoint
	AutoGetWorkloadEndpoint    endpoint.Endpoint
	AutoLabelEndpointEndpoint  endpoint.Endpoint
	AutoLabelWorkloadEndpoint  endpoint.Endpoint
	AutoListEndpointEndpoint   endpoint.Endpoint
	AutoListWorkloadEndpoint   endpoint.Endpoint
	AutoUpdateEndpointEndpoint endpoint.Endpoint
	AutoUpdateWorkloadEndpoint endpoint.Endpoint
	FinishMigrationEndpoint    endpoint.Endpoint
	StartMigrationEndpoint     endpoint.Endpoint

	watchHandlerEndpoint func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerWorkload func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AbortMigration is endpoint for AbortMigration
func (e EndpointsWorkloadV1Client) AbortMigration(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.AbortMigrationEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AbortMigration struct {
	V   Workload
	Err error
}

// AutoAddEndpoint is endpoint for AutoAddEndpoint
func (e EndpointsWorkloadV1Client) AutoAddEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoAddEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoAddEndpoint struct {
	V   Endpoint
	Err error
}

// AutoAddWorkload is endpoint for AutoAddWorkload
func (e EndpointsWorkloadV1Client) AutoAddWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.AutoAddWorkloadEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AutoAddWorkload struct {
	V   Workload
	Err error
}

// AutoDeleteEndpoint is endpoint for AutoDeleteEndpoint
func (e EndpointsWorkloadV1Client) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoDeleteEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoDeleteEndpoint struct {
	V   Endpoint
	Err error
}

// AutoDeleteWorkload is endpoint for AutoDeleteWorkload
func (e EndpointsWorkloadV1Client) AutoDeleteWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.AutoDeleteWorkloadEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AutoDeleteWorkload struct {
	V   Workload
	Err error
}

// AutoGetEndpoint is endpoint for AutoGetEndpoint
func (e EndpointsWorkloadV1Client) AutoGetEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoGetEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoGetEndpoint struct {
	V   Endpoint
	Err error
}

// AutoGetWorkload is endpoint for AutoGetWorkload
func (e EndpointsWorkloadV1Client) AutoGetWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.AutoGetWorkloadEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AutoGetWorkload struct {
	V   Workload
	Err error
}

// AutoLabelEndpoint is endpoint for AutoLabelEndpoint
func (e EndpointsWorkloadV1Client) AutoLabelEndpoint(ctx context.Context, in *api.Label) (*Endpoint, error) {
	resp, err := e.AutoLabelEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoLabelEndpoint struct {
	V   Endpoint
	Err error
}

// AutoLabelWorkload is endpoint for AutoLabelWorkload
func (e EndpointsWorkloadV1Client) AutoLabelWorkload(ctx context.Context, in *api.Label) (*Workload, error) {
	resp, err := e.AutoLabelWorkloadEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AutoLabelWorkload struct {
	V   Workload
	Err error
}

// AutoListEndpoint is endpoint for AutoListEndpoint
func (e EndpointsWorkloadV1Client) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions) (*EndpointList, error) {
	resp, err := e.AutoListEndpointEndpoint(ctx, in)
	if err != nil {
		return &EndpointList{}, err
	}
	return resp.(*EndpointList), nil
}

type respWorkloadV1AutoListEndpoint struct {
	V   EndpointList
	Err error
}

// AutoListWorkload is endpoint for AutoListWorkload
func (e EndpointsWorkloadV1Client) AutoListWorkload(ctx context.Context, in *api.ListWatchOptions) (*WorkloadList, error) {
	resp, err := e.AutoListWorkloadEndpoint(ctx, in)
	if err != nil {
		return &WorkloadList{}, err
	}
	return resp.(*WorkloadList), nil
}

type respWorkloadV1AutoListWorkload struct {
	V   WorkloadList
	Err error
}

// AutoUpdateEndpoint is endpoint for AutoUpdateEndpoint
func (e EndpointsWorkloadV1Client) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoUpdateEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoUpdateEndpoint struct {
	V   Endpoint
	Err error
}

// AutoUpdateWorkload is endpoint for AutoUpdateWorkload
func (e EndpointsWorkloadV1Client) AutoUpdateWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.AutoUpdateWorkloadEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1AutoUpdateWorkload struct {
	V   Workload
	Err error
}

// FinishMigration is endpoint for FinishMigration
func (e EndpointsWorkloadV1Client) FinishMigration(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.FinishMigrationEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1FinishMigration struct {
	V   Workload
	Err error
}

// StartMigration is endpoint for StartMigration
func (e EndpointsWorkloadV1Client) StartMigration(ctx context.Context, in *Workload) (*Workload, error) {
	resp, err := e.StartMigrationEndpoint(ctx, in)
	if err != nil {
		return &Workload{}, err
	}
	return resp.(*Workload), nil
}

type respWorkloadV1StartMigration struct {
	V   Workload
	Err error
}

func (e EndpointsWorkloadV1Client) AutoWatchSvcWorkloadV1(ctx context.Context, in *api.ListWatchOptions) (WorkloadV1_AutoWatchSvcWorkloadV1Client, error) {
	return e.Client.AutoWatchSvcWorkloadV1(ctx, in)
}

// AutoWatchEndpoint performs Watch for Endpoint
func (e EndpointsWorkloadV1Client) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions) (WorkloadV1_AutoWatchEndpointClient, error) {
	return e.Client.AutoWatchEndpoint(ctx, in)
}

// AutoWatchWorkload performs Watch for Workload
func (e EndpointsWorkloadV1Client) AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions) (WorkloadV1_AutoWatchWorkloadClient, error) {
	return e.Client.AutoWatchWorkload(ctx, in)
}

// AbortMigration implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AbortMigration(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.AbortMigrationEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AbortMigrationEndpoint creates  AbortMigration endpoints for the service
func MakeWorkloadV1AbortMigrationEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.AbortMigration(ctx, *req)
		return respWorkloadV1AbortMigration{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AbortMigration")(f)
}

// AutoAddEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoAddEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoAddEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoAddEndpointEndpoint creates  AutoAddEndpoint endpoints for the service
func MakeWorkloadV1AutoAddEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoAddEndpoint(ctx, *req)
		return respWorkloadV1AutoAddEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoAddEndpoint")(f)
}

// AutoAddWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoAddWorkload(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.AutoAddWorkloadEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AutoAddWorkloadEndpoint creates  AutoAddWorkload endpoints for the service
func MakeWorkloadV1AutoAddWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.AutoAddWorkload(ctx, *req)
		return respWorkloadV1AutoAddWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoAddWorkload")(f)
}

// AutoDeleteEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoDeleteEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoDeleteEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoDeleteEndpointEndpoint creates  AutoDeleteEndpoint endpoints for the service
func MakeWorkloadV1AutoDeleteEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoDeleteEndpoint(ctx, *req)
		return respWorkloadV1AutoDeleteEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoDeleteEndpoint")(f)
}

// AutoDeleteWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoDeleteWorkload(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.AutoDeleteWorkloadEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AutoDeleteWorkloadEndpoint creates  AutoDeleteWorkload endpoints for the service
func MakeWorkloadV1AutoDeleteWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.AutoDeleteWorkload(ctx, *req)
		return respWorkloadV1AutoDeleteWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoDeleteWorkload")(f)
}

// AutoGetEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoGetEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoGetEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoGetEndpointEndpoint creates  AutoGetEndpoint endpoints for the service
func MakeWorkloadV1AutoGetEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoGetEndpoint(ctx, *req)
		return respWorkloadV1AutoGetEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoGetEndpoint")(f)
}

// AutoGetWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoGetWorkload(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.AutoGetWorkloadEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AutoGetWorkloadEndpoint creates  AutoGetWorkload endpoints for the service
func MakeWorkloadV1AutoGetWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.AutoGetWorkload(ctx, *req)
		return respWorkloadV1AutoGetWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoGetWorkload")(f)
}

// AutoLabelEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoLabelEndpoint(ctx context.Context, in api.Label) (Endpoint, error) {
	resp, err := e.AutoLabelEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoLabelEndpointEndpoint creates  AutoLabelEndpoint endpoints for the service
func MakeWorkloadV1AutoLabelEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelEndpoint(ctx, *req)
		return respWorkloadV1AutoLabelEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoLabelEndpoint")(f)
}

// AutoLabelWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoLabelWorkload(ctx context.Context, in api.Label) (Workload, error) {
	resp, err := e.AutoLabelWorkloadEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AutoLabelWorkloadEndpoint creates  AutoLabelWorkload endpoints for the service
func MakeWorkloadV1AutoLabelWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelWorkload(ctx, *req)
		return respWorkloadV1AutoLabelWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoLabelWorkload")(f)
}

// AutoListEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoListEndpoint(ctx context.Context, in api.ListWatchOptions) (EndpointList, error) {
	resp, err := e.AutoListEndpointEndpoint(ctx, in)
	if err != nil {
		return EndpointList{}, err
	}
	return *resp.(*EndpointList), nil
}

// MakeWorkloadV1AutoListEndpointEndpoint creates  AutoListEndpoint endpoints for the service
func MakeWorkloadV1AutoListEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListEndpoint(ctx, *req)
		return respWorkloadV1AutoListEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoListEndpoint")(f)
}

// AutoListWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoListWorkload(ctx context.Context, in api.ListWatchOptions) (WorkloadList, error) {
	resp, err := e.AutoListWorkloadEndpoint(ctx, in)
	if err != nil {
		return WorkloadList{}, err
	}
	return *resp.(*WorkloadList), nil
}

// MakeWorkloadV1AutoListWorkloadEndpoint creates  AutoListWorkload endpoints for the service
func MakeWorkloadV1AutoListWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListWorkload(ctx, *req)
		return respWorkloadV1AutoListWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoListWorkload")(f)
}

// AutoUpdateEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoUpdateEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoUpdateEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoUpdateEndpointEndpoint creates  AutoUpdateEndpoint endpoints for the service
func MakeWorkloadV1AutoUpdateEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoUpdateEndpoint(ctx, *req)
		return respWorkloadV1AutoUpdateEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoUpdateEndpoint")(f)
}

// AutoUpdateWorkload implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoUpdateWorkload(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.AutoUpdateWorkloadEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1AutoUpdateWorkloadEndpoint creates  AutoUpdateWorkload endpoints for the service
func MakeWorkloadV1AutoUpdateWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.AutoUpdateWorkload(ctx, *req)
		return respWorkloadV1AutoUpdateWorkload{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoUpdateWorkload")(f)
}

// FinishMigration implementation on server Endpoint
func (e EndpointsWorkloadV1Server) FinishMigration(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.FinishMigrationEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1FinishMigrationEndpoint creates  FinishMigration endpoints for the service
func MakeWorkloadV1FinishMigrationEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.FinishMigration(ctx, *req)
		return respWorkloadV1FinishMigration{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:FinishMigration")(f)
}

// StartMigration implementation on server Endpoint
func (e EndpointsWorkloadV1Server) StartMigration(ctx context.Context, in Workload) (Workload, error) {
	resp, err := e.StartMigrationEndpoint(ctx, in)
	if err != nil {
		return Workload{}, err
	}
	return *resp.(*Workload), nil
}

// MakeWorkloadV1StartMigrationEndpoint creates  StartMigration endpoints for the service
func MakeWorkloadV1StartMigrationEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Workload)
		v, err := s.StartMigration(ctx, *req)
		return respWorkloadV1StartMigration{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:StartMigration")(f)
}

func (e EndpointsWorkloadV1Server) AutoWatchSvcWorkloadV1(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchSvcWorkloadV1Server) error {
	return e.svcWatchHandlerWorkloadV1(in, stream)
}

// MakeAutoWatchSvcWorkloadV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcWorkloadV1Endpoint(s ServiceWorkloadV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(WorkloadV1_AutoWatchSvcWorkloadV1Server)
		return s.AutoWatchSvcWorkloadV1(options, wstream)
	}
}

// AutoWatchEndpoint is the watch handler for Endpoint on the server side.
func (e EndpointsWorkloadV1Server) AutoWatchEndpoint(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchEndpointServer) error {
	return e.watchHandlerEndpoint(in, stream)
}

// MakeAutoWatchEndpointEndpoint creates the Watch endpoint
func MakeAutoWatchEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(WorkloadV1_AutoWatchEndpointServer)
		return s.AutoWatchEndpoint(options, wstream)
	}
}

// AutoWatchWorkload is the watch handler for Workload on the server side.
func (e EndpointsWorkloadV1Server) AutoWatchWorkload(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchWorkloadServer) error {
	return e.watchHandlerWorkload(in, stream)
}

// MakeAutoWatchWorkloadEndpoint creates the Watch endpoint
func MakeAutoWatchWorkloadEndpoint(s ServiceWorkloadV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(WorkloadV1_AutoWatchWorkloadServer)
		return s.AutoWatchWorkload(options, wstream)
	}
}

// MakeWorkloadV1ServerEndpoints creates server endpoints
func MakeWorkloadV1ServerEndpoints(s ServiceWorkloadV1Server, logger log.Logger) EndpointsWorkloadV1Server {
	return EndpointsWorkloadV1Server{
		svcWatchHandlerWorkloadV1: MakeAutoWatchSvcWorkloadV1Endpoint(s, logger),

		AbortMigrationEndpoint:     MakeWorkloadV1AbortMigrationEndpoint(s, logger),
		AutoAddEndpointEndpoint:    MakeWorkloadV1AutoAddEndpointEndpoint(s, logger),
		AutoAddWorkloadEndpoint:    MakeWorkloadV1AutoAddWorkloadEndpoint(s, logger),
		AutoDeleteEndpointEndpoint: MakeWorkloadV1AutoDeleteEndpointEndpoint(s, logger),
		AutoDeleteWorkloadEndpoint: MakeWorkloadV1AutoDeleteWorkloadEndpoint(s, logger),
		AutoGetEndpointEndpoint:    MakeWorkloadV1AutoGetEndpointEndpoint(s, logger),
		AutoGetWorkloadEndpoint:    MakeWorkloadV1AutoGetWorkloadEndpoint(s, logger),
		AutoLabelEndpointEndpoint:  MakeWorkloadV1AutoLabelEndpointEndpoint(s, logger),
		AutoLabelWorkloadEndpoint:  MakeWorkloadV1AutoLabelWorkloadEndpoint(s, logger),
		AutoListEndpointEndpoint:   MakeWorkloadV1AutoListEndpointEndpoint(s, logger),
		AutoListWorkloadEndpoint:   MakeWorkloadV1AutoListWorkloadEndpoint(s, logger),
		AutoUpdateEndpointEndpoint: MakeWorkloadV1AutoUpdateEndpointEndpoint(s, logger),
		AutoUpdateWorkloadEndpoint: MakeWorkloadV1AutoUpdateWorkloadEndpoint(s, logger),
		FinishMigrationEndpoint:    MakeWorkloadV1FinishMigrationEndpoint(s, logger),
		StartMigrationEndpoint:     MakeWorkloadV1StartMigrationEndpoint(s, logger),

		watchHandlerEndpoint: MakeAutoWatchEndpointEndpoint(s, logger),
		watchHandlerWorkload: MakeAutoWatchWorkloadEndpoint(s, logger),
	}
}

// LoggingWorkloadV1MiddlewareClient adds middleware for the client
func LoggingWorkloadV1MiddlewareClient(logger log.Logger) MiddlewareWorkloadV1Client {
	return func(next ServiceWorkloadV1Client) ServiceWorkloadV1Client {
		return loggingWorkloadV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingWorkloadV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceWorkloadV1Client
}

// LoggingWorkloadV1MiddlewareServer adds middleware for the client
func LoggingWorkloadV1MiddlewareServer(logger log.Logger) MiddlewareWorkloadV1Server {
	return func(next ServiceWorkloadV1Server) ServiceWorkloadV1Server {
		return loggingWorkloadV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingWorkloadV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceWorkloadV1Server
}

func (m loggingWorkloadV1MiddlewareClient) AbortMigration(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AbortMigration", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AbortMigration(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoAddEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoAddWorkload(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoDeleteWorkload(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoGetEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoGetWorkload(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoLabelEndpoint(ctx context.Context, in *api.Label) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoLabelEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoLabelWorkload(ctx context.Context, in *api.Label) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoLabelWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions) (resp *EndpointList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoListWorkload(ctx context.Context, in *api.ListWatchOptions) (resp *WorkloadList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoUpdateWorkload(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) FinishMigration(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "FinishMigration", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.FinishMigration(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) StartMigration(ctx context.Context, in *Workload) (resp *Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "StartMigration", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.StartMigration(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareClient) AutoWatchSvcWorkloadV1(ctx context.Context, in *api.ListWatchOptions) (resp WorkloadV1_AutoWatchSvcWorkloadV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoWatchSvcWorkloadV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcWorkloadV1(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareClient) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions) (resp WorkloadV1_AutoWatchEndpointClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoWatchEndpoint", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions) (resp WorkloadV1_AutoWatchWorkloadClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoWatchWorkload", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchWorkload(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareServer) AbortMigration(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AbortMigration", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AbortMigration(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoAddEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoAddWorkload(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoDeleteEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoDeleteWorkload(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoGetEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoGetWorkload(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoLabelEndpoint(ctx context.Context, in api.Label) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoLabelEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoLabelWorkload(ctx context.Context, in api.Label) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoLabelWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoListEndpoint(ctx context.Context, in api.ListWatchOptions) (resp EndpointList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoListWorkload(ctx context.Context, in api.ListWatchOptions) (resp WorkloadList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoUpdateEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoUpdateWorkload(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateWorkload(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) FinishMigration(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "FinishMigration", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.FinishMigration(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) StartMigration(ctx context.Context, in Workload) (resp Workload, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "StartMigration", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.StartMigration(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareServer) AutoWatchSvcWorkloadV1(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchSvcWorkloadV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "WorkloadV1", "method", "AutoWatchSvcWorkloadV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcWorkloadV1(in, stream)
	return
}

func (m loggingWorkloadV1MiddlewareServer) AutoWatchEndpoint(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchEndpointServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "WorkloadV1", "method", "AutoWatchEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchEndpoint(in, stream)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoWatchWorkload(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchWorkloadServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "WorkloadV1", "method", "AutoWatchWorkload", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchWorkload(in, stream)
	return
}

func (r *EndpointsWorkloadV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsWorkloadV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIWorkloadV1AbortMigrationCreateOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name, "/AbortMigration")
}

//
func makeURIWorkloadV1AutoAddEndpointCreateOper(in *Endpoint) string {
	return ""

}

//
func makeURIWorkloadV1AutoAddWorkloadCreateOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads")
}

//
func makeURIWorkloadV1AutoDeleteEndpointDeleteOper(in *Endpoint) string {
	return ""

}

//
func makeURIWorkloadV1AutoDeleteWorkloadDeleteOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name)
}

//
func makeURIWorkloadV1AutoGetEndpointGetOper(in *Endpoint) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/endpoints/", in.Name)
}

//
func makeURIWorkloadV1AutoGetWorkloadGetOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name)
}

//
func makeURIWorkloadV1AutoLabelEndpointLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIWorkloadV1AutoLabelWorkloadLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name, "/label")
}

//
func makeURIWorkloadV1AutoListEndpointListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/endpoints")
}

//
func makeURIWorkloadV1AutoListWorkloadListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads")
}

//
func makeURIWorkloadV1AutoUpdateEndpointUpdateOper(in *Endpoint) string {
	return ""

}

//
func makeURIWorkloadV1AutoUpdateWorkloadUpdateOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name)
}

//
func makeURIWorkloadV1AutoWatchEndpointWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/workload/v1", "/watch/tenant/", in.Tenant, "/endpoints")
}

//
func makeURIWorkloadV1AutoWatchSvcWorkloadV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIWorkloadV1AutoWatchWorkloadWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/workload/v1", "/watch/tenant/", in.Tenant, "/workloads")
}

//
func makeURIWorkloadV1FinishMigrationCreateOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name, "/FinishMigration")
}

//
func makeURIWorkloadV1StartMigrationCreateOper(in *Workload) string {
	return fmt.Sprint("/configs/workload/v1", "/tenant/", in.Tenant, "/workloads/", in.Name, "/StartMigration")
}

// AutoAddEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoAddEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelEndpoint label method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoLabelEndpoint(ctx context.Context, in *api.Label) (*Endpoint, error) {
	return nil, errors.New("not allowed")
}

// AutoGetEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoGetEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	path := makeURIWorkloadV1AutoGetEndpointGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoGetEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Endpoint), err
}

// AutoDeleteEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	return nil, errors.New("not allowed")
}

// AutoListEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoListEndpoint(ctx context.Context, options *api.ListWatchOptions) (*EndpointList, error) {
	path := makeURIWorkloadV1AutoListEndpointListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoListEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EndpointList), err
}

// AutoWatchEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoWatchEndpoint(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIWorkloadV1AutoWatchEndpointWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgEndpointWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoAddWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	path := makeURIWorkloadV1AutoAddWorkloadCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoAddWorkload(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), nil
}

// AutoUpdateWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoUpdateWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	path := makeURIWorkloadV1AutoUpdateWorkloadUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoUpdateWorkload(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

// AutoLabelWorkload label method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoLabelWorkload(ctx context.Context, in *api.Label) (*Workload, error) {
	path := makeURIWorkloadV1AutoLabelWorkloadLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoLabelWorkload(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

// AutoGetWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoGetWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	path := makeURIWorkloadV1AutoGetWorkloadGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoGetWorkload(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

// AutoDeleteWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoDeleteWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	path := makeURIWorkloadV1AutoDeleteWorkloadDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoDeleteWorkload(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

// AutoListWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoListWorkload(ctx context.Context, options *api.ListWatchOptions) (*WorkloadList, error) {
	path := makeURIWorkloadV1AutoListWorkloadListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AutoListWorkload(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*WorkloadList), err
}

// AutoWatchWorkload CRUD method for Workload
func (r *EndpointsWorkloadV1RestClient) AutoWatchWorkload(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIWorkloadV1AutoWatchWorkloadWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgWorkloadWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsWorkloadV1RestClient) StartMigrationWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIWorkloadV1StartMigrationCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1StartMigration(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

func (r *EndpointsWorkloadV1RestClient) FinishMigrationWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIWorkloadV1FinishMigrationCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1FinishMigration(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

func (r *EndpointsWorkloadV1RestClient) AbortMigrationWorkload(ctx context.Context, in *Workload) (*Workload, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIWorkloadV1AbortMigrationCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespWorkloadV1AbortMigration(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Workload), err
}

// MakeWorkloadV1RestClientEndpoints make REST client endpoints
func MakeWorkloadV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsWorkloadV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsWorkloadV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeWorkloadV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeWorkloadV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsWorkloadV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsWorkloadV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
