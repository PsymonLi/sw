// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package workload is a auto generated package.
Input file: svc_workload.proto
*/
package workload

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareWorkloadV1Client add middleware to the client
type MiddlewareWorkloadV1Client func(ServiceWorkloadV1Client) ServiceWorkloadV1Client

// EndpointsWorkloadV1Client is the endpoints for the client
type EndpointsWorkloadV1Client struct {
	Client WorkloadV1Client

	AutoAddEndpointEndpoint    endpoint.Endpoint
	AutoDeleteEndpointEndpoint endpoint.Endpoint
	AutoGetEndpointEndpoint    endpoint.Endpoint
	AutoListEndpointEndpoint   endpoint.Endpoint
	AutoUpdateEndpointEndpoint endpoint.Endpoint
}

// EndpointsWorkloadV1RestClient is the REST client
type EndpointsWorkloadV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddEndpointEndpoint    endpoint.Endpoint
	AutoDeleteEndpointEndpoint endpoint.Endpoint
	AutoGetEndpointEndpoint    endpoint.Endpoint
	AutoListEndpointEndpoint   endpoint.Endpoint
	AutoUpdateEndpointEndpoint endpoint.Endpoint
	AutoWatchEndpointEndpoint  endpoint.Endpoint
}

// MiddlewareWorkloadV1Server adds middle ware to the server
type MiddlewareWorkloadV1Server func(ServiceWorkloadV1Server) ServiceWorkloadV1Server

// EndpointsWorkloadV1Server is the server endpoints
type EndpointsWorkloadV1Server struct {
	AutoAddEndpointEndpoint    endpoint.Endpoint
	AutoDeleteEndpointEndpoint endpoint.Endpoint
	AutoGetEndpointEndpoint    endpoint.Endpoint
	AutoListEndpointEndpoint   endpoint.Endpoint
	AutoUpdateEndpointEndpoint endpoint.Endpoint

	watchHandlerEndpoint func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddEndpoint is endpoint for AutoAddEndpoint
func (e EndpointsWorkloadV1Client) AutoAddEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoAddEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoAddEndpoint struct {
	V   Endpoint
	Err error
}

// AutoDeleteEndpoint is endpoint for AutoDeleteEndpoint
func (e EndpointsWorkloadV1Client) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoDeleteEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoDeleteEndpoint struct {
	V   Endpoint
	Err error
}

// AutoGetEndpoint is endpoint for AutoGetEndpoint
func (e EndpointsWorkloadV1Client) AutoGetEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoGetEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoGetEndpoint struct {
	V   Endpoint
	Err error
}

// AutoListEndpoint is endpoint for AutoListEndpoint
func (e EndpointsWorkloadV1Client) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions) (*EndpointList, error) {
	resp, err := e.AutoListEndpointEndpoint(ctx, in)
	if err != nil {
		return &EndpointList{}, err
	}
	return resp.(*EndpointList), nil
}

type respWorkloadV1AutoListEndpoint struct {
	V   EndpointList
	Err error
}

// AutoUpdateEndpoint is endpoint for AutoUpdateEndpoint
func (e EndpointsWorkloadV1Client) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	resp, err := e.AutoUpdateEndpointEndpoint(ctx, in)
	if err != nil {
		return &Endpoint{}, err
	}
	return resp.(*Endpoint), nil
}

type respWorkloadV1AutoUpdateEndpoint struct {
	V   Endpoint
	Err error
}

// AutoWatchEndpoint performs Watch for Endpoint
func (e EndpointsWorkloadV1Client) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions) (WorkloadV1_AutoWatchEndpointClient, error) {
	return e.Client.AutoWatchEndpoint(ctx, in)
}

// AutoAddEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoAddEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoAddEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoAddEndpointEndpoint creates  AutoAddEndpoint endpoints for the service
func MakeWorkloadV1AutoAddEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoAddEndpoint(ctx, *req)
		return respWorkloadV1AutoAddEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoAddEndpoint")(f)
}

// AutoDeleteEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoDeleteEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoDeleteEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoDeleteEndpointEndpoint creates  AutoDeleteEndpoint endpoints for the service
func MakeWorkloadV1AutoDeleteEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoDeleteEndpoint(ctx, *req)
		return respWorkloadV1AutoDeleteEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoDeleteEndpoint")(f)
}

// AutoGetEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoGetEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoGetEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoGetEndpointEndpoint creates  AutoGetEndpoint endpoints for the service
func MakeWorkloadV1AutoGetEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoGetEndpoint(ctx, *req)
		return respWorkloadV1AutoGetEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoGetEndpoint")(f)
}

// AutoListEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoListEndpoint(ctx context.Context, in api.ListWatchOptions) (EndpointList, error) {
	resp, err := e.AutoListEndpointEndpoint(ctx, in)
	if err != nil {
		return EndpointList{}, err
	}
	return *resp.(*EndpointList), nil
}

// MakeWorkloadV1AutoListEndpointEndpoint creates  AutoListEndpoint endpoints for the service
func MakeWorkloadV1AutoListEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListEndpoint(ctx, *req)
		return respWorkloadV1AutoListEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoListEndpoint")(f)
}

// AutoUpdateEndpoint implementation on server Endpoint
func (e EndpointsWorkloadV1Server) AutoUpdateEndpoint(ctx context.Context, in Endpoint) (Endpoint, error) {
	resp, err := e.AutoUpdateEndpointEndpoint(ctx, in)
	if err != nil {
		return Endpoint{}, err
	}
	return *resp.(*Endpoint), nil
}

// MakeWorkloadV1AutoUpdateEndpointEndpoint creates  AutoUpdateEndpoint endpoints for the service
func MakeWorkloadV1AutoUpdateEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Endpoint)
		v, err := s.AutoUpdateEndpoint(ctx, *req)
		return respWorkloadV1AutoUpdateEndpoint{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("WorkloadV1:AutoUpdateEndpoint")(f)
}

// AutoWatchEndpoint is the watch handler for Endpoint on the server side.
func (e EndpointsWorkloadV1Server) AutoWatchEndpoint(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchEndpointServer) error {
	return e.watchHandlerEndpoint(in, stream)
}

// MakeAutoWatchEndpointEndpoint creates the Watch endpoint
func MakeAutoWatchEndpointEndpoint(s ServiceWorkloadV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(WorkloadV1_AutoWatchEndpointServer)
		return s.AutoWatchEndpoint(options, wstream)
	}
}

// MakeWorkloadV1ServerEndpoints creates server endpoints
func MakeWorkloadV1ServerEndpoints(s ServiceWorkloadV1Server, logger log.Logger) EndpointsWorkloadV1Server {
	return EndpointsWorkloadV1Server{

		AutoAddEndpointEndpoint:    MakeWorkloadV1AutoAddEndpointEndpoint(s, logger),
		AutoDeleteEndpointEndpoint: MakeWorkloadV1AutoDeleteEndpointEndpoint(s, logger),
		AutoGetEndpointEndpoint:    MakeWorkloadV1AutoGetEndpointEndpoint(s, logger),
		AutoListEndpointEndpoint:   MakeWorkloadV1AutoListEndpointEndpoint(s, logger),
		AutoUpdateEndpointEndpoint: MakeWorkloadV1AutoUpdateEndpointEndpoint(s, logger),

		watchHandlerEndpoint: MakeAutoWatchEndpointEndpoint(s, logger),
	}
}

// LoggingWorkloadV1MiddlewareClient adds middleware for the client
func LoggingWorkloadV1MiddlewareClient(logger log.Logger) MiddlewareWorkloadV1Client {
	return func(next ServiceWorkloadV1Client) ServiceWorkloadV1Client {
		return loggingWorkloadV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingWorkloadV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceWorkloadV1Client
}

// LoggingWorkloadV1MiddlewareServer adds middleware for the client
func LoggingWorkloadV1MiddlewareServer(logger log.Logger) MiddlewareWorkloadV1Server {
	return func(next ServiceWorkloadV1Server) ServiceWorkloadV1Server {
		return loggingWorkloadV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingWorkloadV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceWorkloadV1Server
}

func (m loggingWorkloadV1MiddlewareClient) AutoAddEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoGetEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions) (resp *EndpointList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareClient) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (resp *Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEndpoint(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareClient) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions) (resp WorkloadV1_AutoWatchEndpointClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoWatchEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchEndpoint(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareServer) AutoAddEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoAddEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoDeleteEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoDeleteEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoGetEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoGetEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoListEndpoint(ctx context.Context, in api.ListWatchOptions) (resp EndpointList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoListEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEndpoint(ctx, in)
	return
}
func (m loggingWorkloadV1MiddlewareServer) AutoUpdateEndpoint(ctx context.Context, in Endpoint) (resp Endpoint, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "WorkloadV1", "method", "AutoUpdateEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEndpoint(ctx, in)
	return
}

func (m loggingWorkloadV1MiddlewareServer) AutoWatchEndpoint(in *api.ListWatchOptions, stream WorkloadV1_AutoWatchEndpointServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "WorkloadV1", "method", "AutoWatchEndpoint", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchEndpoint(in, stream)
	return
}
func (r *EndpointsWorkloadV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		req.Header.Add("Authorization", val)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIWorkloadV1AutoAddEndpointCreateOper(in *Endpoint) string {
	return fmt.Sprint("/v1/workload", "/", in.Tenant, "/endpoints")
}

//
func makeURIWorkloadV1AutoDeleteEndpointDeleteOper(in *Endpoint) string {
	return fmt.Sprint("/v1/workload", "/", in.Tenant, "/endpoints/", in.Name)
}

//
func makeURIWorkloadV1AutoGetEndpointGetOper(in *Endpoint) string {
	return fmt.Sprint("/v1/workload", "/", in.Tenant, "/endpoints/", in.Name)
}

//
func makeURIWorkloadV1AutoListEndpointListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/workload", "/", in.Tenant, "/endpoints")
}

//
func makeURIWorkloadV1AutoUpdateEndpointUpdateOper(in *Endpoint) string {
	return fmt.Sprint("/v1/workload", "/", in.Tenant, "/endpoints/", in.Name)
}

// AutoAddEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoAddEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	path := makeURIWorkloadV1AutoAddEndpointCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespWorkloadV1AutoAddEndpoint(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Endpoint), nil
}

// AutoUpdateEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoUpdateEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	path := makeURIWorkloadV1AutoUpdateEndpointUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespWorkloadV1AutoUpdateEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Endpoint), err
}

// AutoGetEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoGetEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	path := makeURIWorkloadV1AutoGetEndpointGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespWorkloadV1AutoGetEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Endpoint), err
}

// AutoDeleteEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoDeleteEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	path := makeURIWorkloadV1AutoDeleteEndpointDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespWorkloadV1AutoDeleteEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Endpoint), err
}

// AutoListEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoListEndpoint(ctx context.Context, options *api.ListWatchOptions) (*EndpointList, error) {
	path := makeURIWorkloadV1AutoListEndpointListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespWorkloadV1AutoListEndpoint(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EndpointList), err
}

// AutoWatchEndpoint CRUD method for Endpoint
func (r *EndpointsWorkloadV1RestClient) AutoWatchEndpoint(ctx context.Context, in *Endpoint) (*Endpoint, error) {
	return nil, errors.New("not allowed")
}

// MakeWorkloadV1RestClientEndpoints make REST client endpoints
func MakeWorkloadV1RestClientEndpoints(instance string) (EndpointsWorkloadV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsWorkloadV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
