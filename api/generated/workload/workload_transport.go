// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package workload is a auto generated package.
Input file: workload.proto
*/
package workload

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPWorkload(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkload(_ context.Context, r *http.Request) (interface{}, error) {
	var req Workload
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkload encodes GRPC request
func EncodeGrpcReqWorkload(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Workload)
	return req, nil
}

// DecodeGrpcReqWorkload decodes GRPC request
func DecodeGrpcReqWorkload(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Workload)
	return req, nil
}

// EncodeGrpcRespWorkload encodes GRC response
func EncodeGrpcRespWorkload(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkload decodes GRPC response
func DecodeGrpcRespWorkload(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPWorkloadIntfSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkloadIntfSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req WorkloadIntfSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkloadIntfSpec encodes GRPC request
func EncodeGrpcReqWorkloadIntfSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadIntfSpec)
	return req, nil
}

// DecodeGrpcReqWorkloadIntfSpec decodes GRPC request
func DecodeGrpcReqWorkloadIntfSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadIntfSpec)
	return req, nil
}

// EncodeGrpcRespWorkloadIntfSpec encodes GRC response
func EncodeGrpcRespWorkloadIntfSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkloadIntfSpec decodes GRPC response
func DecodeGrpcRespWorkloadIntfSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPWorkloadIntfStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkloadIntfStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req WorkloadIntfStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkloadIntfStatus encodes GRPC request
func EncodeGrpcReqWorkloadIntfStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadIntfStatus)
	return req, nil
}

// DecodeGrpcReqWorkloadIntfStatus decodes GRPC request
func DecodeGrpcReqWorkloadIntfStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadIntfStatus)
	return req, nil
}

// EncodeGrpcRespWorkloadIntfStatus encodes GRC response
func EncodeGrpcRespWorkloadIntfStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkloadIntfStatus decodes GRPC response
func DecodeGrpcRespWorkloadIntfStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPWorkloadMigrationStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkloadMigrationStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req WorkloadMigrationStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkloadMigrationStatus encodes GRPC request
func EncodeGrpcReqWorkloadMigrationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadMigrationStatus)
	return req, nil
}

// DecodeGrpcReqWorkloadMigrationStatus decodes GRPC request
func DecodeGrpcReqWorkloadMigrationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadMigrationStatus)
	return req, nil
}

// EncodeGrpcRespWorkloadMigrationStatus encodes GRC response
func EncodeGrpcRespWorkloadMigrationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkloadMigrationStatus decodes GRPC response
func DecodeGrpcRespWorkloadMigrationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPWorkloadSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkloadSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req WorkloadSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkloadSpec encodes GRPC request
func EncodeGrpcReqWorkloadSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadSpec)
	return req, nil
}

// DecodeGrpcReqWorkloadSpec decodes GRPC request
func DecodeGrpcReqWorkloadSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadSpec)
	return req, nil
}

// EncodeGrpcRespWorkloadSpec encodes GRC response
func EncodeGrpcRespWorkloadSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkloadSpec decodes GRPC response
func DecodeGrpcRespWorkloadSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPWorkloadStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPWorkloadStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req WorkloadStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqWorkloadStatus encodes GRPC request
func EncodeGrpcReqWorkloadStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadStatus)
	return req, nil
}

// DecodeGrpcReqWorkloadStatus decodes GRPC request
func DecodeGrpcReqWorkloadStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*WorkloadStatus)
	return req, nil
}

// EncodeGrpcRespWorkloadStatus encodes GRC response
func EncodeGrpcRespWorkloadStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespWorkloadStatus decodes GRPC response
func DecodeGrpcRespWorkloadStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
