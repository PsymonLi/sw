// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package workload is a auto generated package.
Input file: workload.proto
*/
package workload

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// WorkloadMigrationStatus_State_normal is a map of normalized values for the enum
var WorkloadMigrationStatus_State_normal = map[string]string{
	"aborted":    "aborted",
	"failed":     "failed",
	"inprogress": "inprogress",
	"none":       "none",
	"started":    "started",
	"success":    "success",
}

var WorkloadMigrationStatus_State_vname = map[int32]string{
	0: "none",
	1: "started",
	2: "inprogress",
	3: "success",
	4: "failed",
	5: "aborted",
}

var WorkloadMigrationStatus_State_vvalue = map[string]int32{
	"none":       0,
	"started":    1,
	"inprogress": 2,
	"success":    3,
	"failed":     4,
	"aborted":    5,
}

func (x WorkloadMigrationStatus_State) String() string {
	return WorkloadMigrationStatus_State_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapWorkload = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Workload) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "workloads/", m.Tenant, "/", m.Name)
}

func (m *Workload) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/workloads/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Workload) Clone(into interface{}) (interface{}, error) {
	var out *Workload
	var ok bool
	if into == nil {
		out = &Workload{}
	} else {
		out, ok = into.(*Workload)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Workload))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Workload) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Workload"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *WorkloadIntfSpec) Clone(into interface{}) (interface{}, error) {
	var out *WorkloadIntfSpec
	var ok bool
	if into == nil {
		out = &WorkloadIntfSpec{}
	} else {
		out, ok = into.(*WorkloadIntfSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*WorkloadIntfSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *WorkloadIntfSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *WorkloadIntfStatus) Clone(into interface{}) (interface{}, error) {
	var out *WorkloadIntfStatus
	var ok bool
	if into == nil {
		out = &WorkloadIntfStatus{}
	} else {
		out, ok = into.(*WorkloadIntfStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*WorkloadIntfStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *WorkloadIntfStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *WorkloadMigrationStatus) Clone(into interface{}) (interface{}, error) {
	var out *WorkloadMigrationStatus
	var ok bool
	if into == nil {
		out = &WorkloadMigrationStatus{}
	} else {
		out, ok = into.(*WorkloadMigrationStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*WorkloadMigrationStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *WorkloadMigrationStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "none"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *WorkloadSpec) Clone(into interface{}) (interface{}, error) {
	var out *WorkloadSpec
	var ok bool
	if into == nil {
		out = &WorkloadSpec{}
	} else {
		out, ok = into.(*WorkloadSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*WorkloadSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *WorkloadSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Interfaces {
		i := m.Interfaces[k]
		ret = i.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *WorkloadStatus) Clone(into interface{}) (interface{}, error) {
	var out *WorkloadStatus
	var ok bool
	if into == nil {
		out = &WorkloadStatus{}
	} else {
		out, ok = into.(*WorkloadStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*WorkloadStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *WorkloadStatus) Defaults(ver string) bool {
	var ret bool
	if m.Migration != nil {
		ret = m.Migration.Defaults(ver) || ret
	}
	ret = m.PropagationStatus.Defaults(ver) || ret
	return ret
}

// Validators and Requirements

func (m *Workload) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *Workload) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for Workload"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Workload) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *WorkloadIntfSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *WorkloadIntfSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapWorkload["WorkloadIntfSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapWorkload["WorkloadIntfSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *WorkloadIntfSpec) Normalize() {

}

func (m *WorkloadIntfStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *WorkloadIntfStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *WorkloadIntfStatus) Normalize() {

}

func (m *WorkloadMigrationStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *WorkloadMigrationStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapWorkload["WorkloadMigrationStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapWorkload["WorkloadMigrationStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *WorkloadMigrationStatus) Normalize() {

	m.Status = WorkloadMigrationStatus_State_normal[strings.ToLower(m.Status)]

}

func (m *WorkloadSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "host-name"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Host",
			}
		}

		if m.HostName != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"hosts/"+m.HostName)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *WorkloadSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Interfaces {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sInterfaces[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapWorkload["WorkloadSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapWorkload["WorkloadSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *WorkloadSpec) Normalize() {

	for k, v := range m.Interfaces {
		v.Normalize()
		m.Interfaces[k] = v

	}

}

func (m *WorkloadStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *WorkloadStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Migration != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Migration"
			if errs := m.Migration.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *WorkloadStatus) Normalize() {

	if m.Migration != nil {
		m.Migration.Normalize()
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Workload{},
	)

	validatorMapWorkload = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapWorkload["WorkloadIntfSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapWorkload["WorkloadIntfSpec"]["all"] = append(validatorMapWorkload["WorkloadIntfSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*WorkloadIntfSpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "4095")

		if err := validators.IntRange(m.ExternalVlan, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"ExternalVlan", err.Error())
		}
		return nil
	})

	validatorMapWorkload["WorkloadIntfSpec"]["all"] = append(validatorMapWorkload["WorkloadIntfSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*WorkloadIntfSpec)
		if err := validators.EmptyOr(validators.MacAddr, m.MACAddress, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"MACAddress", err.Error())
		}
		return nil
	})

	validatorMapWorkload["WorkloadIntfSpec"]["all"] = append(validatorMapWorkload["WorkloadIntfSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*WorkloadIntfSpec)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "4095")

		if err := validators.IntRange(m.MicroSegVlan, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"MicroSegVlan", err.Error())
		}
		return nil
	})

	validatorMapWorkload["WorkloadMigrationStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapWorkload["WorkloadMigrationStatus"]["all"] = append(validatorMapWorkload["WorkloadMigrationStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*WorkloadMigrationStatus)

		if _, ok := WorkloadMigrationStatus_State_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range WorkloadMigrationStatus_State_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

	validatorMapWorkload["WorkloadSpec"] = make(map[string][]func(string, interface{}) error)

	validatorMapWorkload["WorkloadSpec"]["all"] = append(validatorMapWorkload["WorkloadSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*WorkloadSpec)
		if err := validators.HostAddr(m.HostName); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"HostName", err.Error())
		}
		return nil
	})

}
