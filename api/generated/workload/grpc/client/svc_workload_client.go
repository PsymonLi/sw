// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	workload "github.com/pensando/sw/api/generated/workload"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewWorkloadV1 sets up a new client for WorkloadV1
func NewWorkloadV1(conn *grpc.ClientConn, logger log.Logger) workload.ServiceWorkloadV1Client {

	var lAutoAddEndpointEndpoint endpoint.Endpoint
	{
		lAutoAddEndpointEndpoint = grpctransport.NewClient(
			conn,
			"workload.WorkloadV1",
			"AutoAddEndpoint",
			workload.EncodeGrpcReqEndpoint,
			workload.DecodeGrpcRespEndpoint,
			&workload.Endpoint{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddEndpointEndpoint = trace.ClientEndPoint("WorkloadV1:AutoAddEndpoint")(lAutoAddEndpointEndpoint)
	}
	var lAutoDeleteEndpointEndpoint endpoint.Endpoint
	{
		lAutoDeleteEndpointEndpoint = grpctransport.NewClient(
			conn,
			"workload.WorkloadV1",
			"AutoDeleteEndpoint",
			workload.EncodeGrpcReqEndpoint,
			workload.DecodeGrpcRespEndpoint,
			&workload.Endpoint{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteEndpointEndpoint = trace.ClientEndPoint("WorkloadV1:AutoDeleteEndpoint")(lAutoDeleteEndpointEndpoint)
	}
	var lAutoGetEndpointEndpoint endpoint.Endpoint
	{
		lAutoGetEndpointEndpoint = grpctransport.NewClient(
			conn,
			"workload.WorkloadV1",
			"AutoGetEndpoint",
			workload.EncodeGrpcReqEndpoint,
			workload.DecodeGrpcRespEndpoint,
			&workload.Endpoint{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetEndpointEndpoint = trace.ClientEndPoint("WorkloadV1:AutoGetEndpoint")(lAutoGetEndpointEndpoint)
	}
	var lAutoListEndpointEndpoint endpoint.Endpoint
	{
		lAutoListEndpointEndpoint = grpctransport.NewClient(
			conn,
			"workload.WorkloadV1",
			"AutoListEndpoint",
			workload.EncodeGrpcReqListWatchOptions,
			workload.DecodeGrpcRespEndpointList,
			&workload.EndpointList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListEndpointEndpoint = trace.ClientEndPoint("WorkloadV1:AutoListEndpoint")(lAutoListEndpointEndpoint)
	}
	var lAutoUpdateEndpointEndpoint endpoint.Endpoint
	{
		lAutoUpdateEndpointEndpoint = grpctransport.NewClient(
			conn,
			"workload.WorkloadV1",
			"AutoUpdateEndpoint",
			workload.EncodeGrpcReqEndpoint,
			workload.DecodeGrpcRespEndpoint,
			&workload.Endpoint{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateEndpointEndpoint = trace.ClientEndPoint("WorkloadV1:AutoUpdateEndpoint")(lAutoUpdateEndpointEndpoint)
	}
	return workload.EndpointsWorkloadV1Client{
		Client: workload.NewWorkloadV1Client(conn),

		AutoAddEndpointEndpoint:    lAutoAddEndpointEndpoint,
		AutoDeleteEndpointEndpoint: lAutoDeleteEndpointEndpoint,
		AutoGetEndpointEndpoint:    lAutoGetEndpointEndpoint,
		AutoListEndpointEndpoint:   lAutoListEndpointEndpoint,
		AutoUpdateEndpointEndpoint: lAutoUpdateEndpointEndpoint,
	}
}

// NewWorkloadV1Backend creates an instrumented client with middleware
func NewWorkloadV1Backend(conn *grpc.ClientConn, logger log.Logger) workload.ServiceWorkloadV1Client {
	cl := NewWorkloadV1(conn, logger)
	cl = workload.LoggingWorkloadV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjWorkloadV1Endpoint struct {
	logger log.Logger
	client workload.ServiceWorkloadV1Client
}

func (a *grpcObjWorkloadV1Endpoint) Create(ctx context.Context, in *workload.Endpoint) (*workload.Endpoint, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddEndpoint(nctx, in)
}

func (a *grpcObjWorkloadV1Endpoint) Update(ctx context.Context, in *workload.Endpoint) (*workload.Endpoint, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateEndpoint(nctx, in)
}

func (a *grpcObjWorkloadV1Endpoint) Get(ctx context.Context, objMeta *api.ObjectMeta) (*workload.Endpoint, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := workload.Endpoint{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetEndpoint(nctx, &in)
}

func (a *grpcObjWorkloadV1Endpoint) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*workload.Endpoint, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := workload.Endpoint{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteEndpoint(nctx, &in)
}

func (a *grpcObjWorkloadV1Endpoint) List(ctx context.Context, options *api.ListWatchOptions) ([]*workload.Endpoint, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListEndpoint(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjWorkloadV1Endpoint) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "Endpoint", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchEndpoint(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(workload.WorkloadV1_AutoWatchEndpointClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjWorkloadV1Endpoint) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjWorkloadV1Endpoint struct {
	endpoints workload.EndpointsWorkloadV1RestClient
	instance  string
}

func (a *restObjWorkloadV1Endpoint) Create(ctx context.Context, in *workload.Endpoint) (*workload.Endpoint, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddEndpoint(ctx, in)
}

func (a *restObjWorkloadV1Endpoint) Update(ctx context.Context, in *workload.Endpoint) (*workload.Endpoint, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateEndpoint(ctx, in)
}

func (a *restObjWorkloadV1Endpoint) Get(ctx context.Context, objMeta *api.ObjectMeta) (*workload.Endpoint, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := workload.Endpoint{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetEndpoint(ctx, &in)
}

func (a *restObjWorkloadV1Endpoint) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*workload.Endpoint, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := workload.Endpoint{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteEndpoint(ctx, &in)
}

func (a *restObjWorkloadV1Endpoint) List(ctx context.Context, options *api.ListWatchOptions) ([]*workload.Endpoint, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListEndpoint(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjWorkloadV1Endpoint) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjWorkloadV1Endpoint) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return true
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientWorkloadV1 struct {
	grpcEndpoint workload.WorkloadV1EndpointInterface
}

// NewGrpcCrudClientWorkloadV1 creates a GRPC client for the service
func NewGrpcCrudClientWorkloadV1(conn *grpc.ClientConn, logger log.Logger) workload.WorkloadV1Interface {
	client := NewWorkloadV1Backend(conn, logger)
	return &crudClientWorkloadV1{

		grpcEndpoint: &grpcObjWorkloadV1Endpoint{client: client, logger: logger},
	}
}

func (a *crudClientWorkloadV1) Endpoint() workload.WorkloadV1EndpointInterface {
	return a.grpcEndpoint
}

type crudRestClientWorkloadV1 struct {
	restEndpoint workload.WorkloadV1EndpointInterface
}

// NewRestCrudClientWorkloadV1 creates a REST client for the service.
func NewRestCrudClientWorkloadV1(url string) workload.WorkloadV1Interface {
	endpoints, err := workload.MakeWorkloadV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientWorkloadV1{

		restEndpoint: &restObjWorkloadV1Endpoint{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientWorkloadV1) Endpoint() workload.WorkloadV1EndpointInterface {
	return a.restEndpoint
}
