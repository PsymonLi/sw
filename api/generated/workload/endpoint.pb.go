// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: endpoint.proto

/*
	Package workload is a generated protocol buffer package.

	Service name

	It is generated from these files:
		endpoint.proto
		svc_workload.proto
		workload.proto

	It has these top-level messages:
		Endpoint
		EndpointMigrationStatus
		EndpointSpec
		EndpointStatus
		AutoMsgEndpointWatchHelper
		AutoMsgWorkloadWatchHelper
		EndpointList
		WorkloadList
		Workload
		WorkloadIntfSpec
		WorkloadIntfStatus
		WorkloadMigrationStatus
		WorkloadSpec
		WorkloadStatus
*/
package workload

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/security"
import _ "github.com/pensando/sw/api/generated/network"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// MigrationState
type EndpointMigrationStatus_MigrationState int32

const (
	// ui-hint: None
	EndpointMigrationStatus_NONE EndpointMigrationStatus_MigrationState = 0
	// ui-hint: Start
	EndpointMigrationStatus_START EndpointMigrationStatus_MigrationState = 1
	// ui-hint: FinalSync
	EndpointMigrationStatus_FINAL_SYNC EndpointMigrationStatus_MigrationState = 2
	// ui-hint: Done
	EndpointMigrationStatus_DONE EndpointMigrationStatus_MigrationState = 3
	// ui-hint: Failed
	EndpointMigrationStatus_FAILED EndpointMigrationStatus_MigrationState = 4
	// ui-hint : Aborted
	EndpointMigrationStatus_ABORTED EndpointMigrationStatus_MigrationState = 5
	// ui-hint : Move from non pensando host
	EndpointMigrationStatus_FROM_NON_PEN_HOST EndpointMigrationStatus_MigrationState = 6
)

var EndpointMigrationStatus_MigrationState_name = map[int32]string{
	0: "NONE",
	1: "START",
	2: "FINAL_SYNC",
	3: "DONE",
	4: "FAILED",
	5: "ABORTED",
	6: "FROM_NON_PEN_HOST",
}
var EndpointMigrationStatus_MigrationState_value = map[string]int32{
	"NONE":              0,
	"START":             1,
	"FINAL_SYNC":        2,
	"DONE":              3,
	"FAILED":            4,
	"ABORTED":           5,
	"FROM_NON_PEN_HOST": 6,
}

func (EndpointMigrationStatus_MigrationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEndpoint, []int{1, 0}
}

// Endpoint represents a network endpoint
type Endpoint struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the Endpoint.
	Spec EndpointSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the Endpoint.
	Status EndpointStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{0} }

func (m *Endpoint) GetSpec() EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return EndpointSpec{}
}

func (m *Endpoint) GetStatus() EndpointStatus {
	if m != nil {
		return m.Status
	}
	return EndpointStatus{}
}

//
type EndpointMigrationStatus struct {
	// Status of migration
	Status string `protobuf:"bytes,1,opt,name=Status,json=status, omitempty,proto3" json:"status, omitempty"`
}

func (m *EndpointMigrationStatus) Reset()                    { *m = EndpointMigrationStatus{} }
func (m *EndpointMigrationStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointMigrationStatus) ProtoMessage()               {}
func (*EndpointMigrationStatus) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{1} }

func (m *EndpointMigrationStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// spec part of Endpoint object
type EndpointSpec struct {
	// The DSC Name or MAC where the endpoint should reside
	NodeUUID string `protobuf:"bytes,1,opt,name=NodeUUID,json=node-uuid,omitempty,proto3" json:"node-uuid,omitempty"`
	// IP of the DSC where this endpoint exists
	HomingHostAddr string `protobuf:"bytes,2,opt,name=HomingHostAddr,json=homing-host-addr,omitempty,proto3" json:"homing-host-addr,omitempty"`
	// MicroSegmentVlan to be assigned to the endpoint
	MicroSegmentVlan uint32 `protobuf:"varint,3,opt,name=MicroSegmentVlan,json=micro-segment-vlan,omitempty,proto3" json:"micro-segment-vlan,omitempty"`
}

func (m *EndpointSpec) Reset()                    { *m = EndpointSpec{} }
func (m *EndpointSpec) String() string            { return proto.CompactTextString(m) }
func (*EndpointSpec) ProtoMessage()               {}
func (*EndpointSpec) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{2} }

func (m *EndpointSpec) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointSpec) GetHomingHostAddr() string {
	if m != nil {
		return m.HomingHostAddr
	}
	return ""
}

func (m *EndpointSpec) GetMicroSegmentVlan() uint32 {
	if m != nil {
		return m.MicroSegmentVlan
	}
	return 0
}

// status part of Endpoint object
type EndpointStatus struct {
	// VM or container name
	WorkloadName string `protobuf:"bytes,1,opt,name=WorkloadName,json=workload-name,omitempty,proto3" json:"workload-name,omitempty"`
	// network this endpoint belogs to
	Network string `protobuf:"bytes,2,opt,name=Network,json=network,omitempty,proto3" json:"network,omitempty"`
	// host address of the host where this endpoint exists
	HomingHostAddr string `protobuf:"bytes,3,opt,name=HomingHostAddr,json=homing-host-addr,omitempty,proto3" json:"homing-host-addr,omitempty"`
	// host name of the host where this endpoint exists
	HomingHostName string `protobuf:"bytes,4,opt,name=HomingHostName,json=homing-host-name,omitempty,proto3" json:"homing-host-name,omitempty"`
	// IPv4 address of the endpoint
	IPv4Address string `protobuf:"bytes,5,opt,name=IPv4Address,json=ipv4-address,omitempty,proto3" json:"ipv4-address,omitempty"`
	// IPv4 gateway for the endpoint
	IPv4Gateway string `protobuf:"bytes,6,opt,name=IPv4Gateway,json=ipv4-gateway,omitempty,proto3" json:"ipv4-gateway,omitempty"`
	// IPv6 address for the endpoint
	IPv6Address string `protobuf:"bytes,7,opt,name=IPv6Address,json=ipv6-address,omitempty,proto3" json:"ipv6-address,omitempty"`
	// IPv6 gateway
	IPv6Gateway string `protobuf:"bytes,8,opt,name=IPv6Gateway,json=ipv6-gateway,omitempty,proto3" json:"ipv6-gateway,omitempty"`
	// Mac address of the endpoint
	MacAddress string `protobuf:"bytes,9,opt,name=MacAddress,json=mac-address,omitempty,proto3" json:"mac-address,omitempty"`
	// homing host's UUID
	NodeUUID string `protobuf:"bytes,10,opt,name=NodeUUID,json=node-uuid,omitempty,proto3" json:"node-uuid,omitempty"`
	// endpoint FSM state
	EndpointState string `protobuf:"bytes,11,opt,name=EndpointState,proto3" json:"EndpointState,omitempty"`
	// security groups
	SecurityGroups []string `protobuf:"bytes,12,rep,name=SecurityGroups" json:"SecurityGroups,omitempty"`
	// micro-segment VLAN
	MicroSegmentVlan uint32 `protobuf:"varint,13,opt,name=MicroSegmentVlan,json=micro-segment-vlan,omitempty,proto3" json:"micro-segment-vlan,omitempty"`
	// VM or container attribute/labels
	WorkloadAttributes map[string]string `protobuf:"bytes,14,rep,name=WorkloadAttributes,json=workload-attributes,omitempty" json:"workload-attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Used to store state if the endpoint is migrating
	Migration *EndpointMigrationStatus `protobuf:"bytes,15,opt,name=Migration,json=migration,omitempty" json:"migration,omitempty"`
	// IPv4 addresses of the endpoint
	IPv4Addresses []string `protobuf:"bytes,16,rep,name=IPv4Addresses,json=ipv4-addresses,omitempty" json:"ipv4-addresses,omitempty"`
	// IPv4 gateways for the endpoint
	IPv4Gateways []string `protobuf:"bytes,17,rep,name=IPv4Gateways,json=ipv4-gateways,omitempty" json:"ipv4-gateways,omitempty"`
	// IPv6 addresses for the endpoint
	IPv6Addresses []string `protobuf:"bytes,18,rep,name=IPv6Addresses,json=ipv6-addresses,omitempty" json:"ipv6-addresses,omitempty"`
	// IPv6 gateways
	IPv6Gateways []string `protobuf:"bytes,19,rep,name=IPv6Gateways,json=ipv6-gateways,omitempty" json:"ipv6-gateways,omitempty"`
}

func (m *EndpointStatus) Reset()                    { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()               {}
func (*EndpointStatus) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{3} }

func (m *EndpointStatus) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *EndpointStatus) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *EndpointStatus) GetHomingHostAddr() string {
	if m != nil {
		return m.HomingHostAddr
	}
	return ""
}

func (m *EndpointStatus) GetHomingHostName() string {
	if m != nil {
		return m.HomingHostName
	}
	return ""
}

func (m *EndpointStatus) GetIPv4Address() string {
	if m != nil {
		return m.IPv4Address
	}
	return ""
}

func (m *EndpointStatus) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *EndpointStatus) GetIPv6Address() string {
	if m != nil {
		return m.IPv6Address
	}
	return ""
}

func (m *EndpointStatus) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *EndpointStatus) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EndpointStatus) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointStatus) GetEndpointState() string {
	if m != nil {
		return m.EndpointState
	}
	return ""
}

func (m *EndpointStatus) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *EndpointStatus) GetMicroSegmentVlan() uint32 {
	if m != nil {
		return m.MicroSegmentVlan
	}
	return 0
}

func (m *EndpointStatus) GetWorkloadAttributes() map[string]string {
	if m != nil {
		return m.WorkloadAttributes
	}
	return nil
}

func (m *EndpointStatus) GetMigration() *EndpointMigrationStatus {
	if m != nil {
		return m.Migration
	}
	return nil
}

func (m *EndpointStatus) GetIPv4Addresses() []string {
	if m != nil {
		return m.IPv4Addresses
	}
	return nil
}

func (m *EndpointStatus) GetIPv4Gateways() []string {
	if m != nil {
		return m.IPv4Gateways
	}
	return nil
}

func (m *EndpointStatus) GetIPv6Addresses() []string {
	if m != nil {
		return m.IPv6Addresses
	}
	return nil
}

func (m *EndpointStatus) GetIPv6Gateways() []string {
	if m != nil {
		return m.IPv6Gateways
	}
	return nil
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "workload.Endpoint")
	proto.RegisterType((*EndpointMigrationStatus)(nil), "workload.EndpointMigrationStatus")
	proto.RegisterType((*EndpointSpec)(nil), "workload.EndpointSpec")
	proto.RegisterType((*EndpointStatus)(nil), "workload.EndpointStatus")
	proto.RegisterEnum("workload.EndpointMigrationStatus_MigrationState", EndpointMigrationStatus_MigrationState_name, EndpointMigrationStatus_MigrationState_value)
}
func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *EndpointMigrationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointMigrationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *EndpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if len(m.HomingHostAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostAddr)))
		i += copy(dAtA[i:], m.HomingHostAddr)
	}
	if m.MicroSegmentVlan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.MicroSegmentVlan))
	}
	return i, nil
}

func (m *EndpointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkloadName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.WorkloadName)))
		i += copy(dAtA[i:], m.WorkloadName)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.HomingHostAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostAddr)))
		i += copy(dAtA[i:], m.HomingHostAddr)
	}
	if len(m.HomingHostName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostName)))
		i += copy(dAtA[i:], m.HomingHostName)
	}
	if len(m.IPv4Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv4Address)))
		i += copy(dAtA[i:], m.IPv4Address)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Address) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv6Address)))
		i += copy(dAtA[i:], m.IPv6Address)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if len(m.EndpointState) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.EndpointState)))
		i += copy(dAtA[i:], m.EndpointState)
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MicroSegmentVlan != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.MicroSegmentVlan))
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, _ := range m.WorkloadAttributes {
			dAtA[i] = 0x72
			i++
			v := m.WorkloadAttributes[k]
			mapSize := 1 + len(k) + sovEndpoint(uint64(len(k))) + 1 + len(v) + sovEndpoint(uint64(len(v)))
			i = encodeVarintEndpoint(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Migration != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.Migration.Size()))
		n5, err := m.Migration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.IPv4Addresses) > 0 {
		for _, s := range m.IPv4Addresses {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPv4Gateways) > 0 {
		for _, s := range m.IPv4Gateways {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPv6Addresses) > 0 {
		for _, s := range m.IPv6Addresses {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPv6Gateways) > 0 {
		for _, s := range m.IPv6Gateways {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintEndpoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	return n
}

func (m *EndpointMigrationStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	return n
}

func (m *EndpointSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostAddr)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if m.MicroSegmentVlan != 0 {
		n += 1 + sovEndpoint(uint64(m.MicroSegmentVlan))
	}
	return n
}

func (m *EndpointStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.WorkloadName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostAddr)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv4Address)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv6Address)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.EndpointState)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	if m.MicroSegmentVlan != 0 {
		n += 1 + sovEndpoint(uint64(m.MicroSegmentVlan))
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, v := range m.WorkloadAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEndpoint(uint64(len(k))) + 1 + len(v) + sovEndpoint(uint64(len(v)))
			n += mapEntrySize + 1 + sovEndpoint(uint64(mapEntrySize))
		}
	}
	if m.Migration != nil {
		l = m.Migration.Size()
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if len(m.IPv4Addresses) > 0 {
		for _, s := range m.IPv4Addresses {
			l = len(s)
			n += 2 + l + sovEndpoint(uint64(l))
		}
	}
	if len(m.IPv4Gateways) > 0 {
		for _, s := range m.IPv4Gateways {
			l = len(s)
			n += 2 + l + sovEndpoint(uint64(l))
		}
	}
	if len(m.IPv6Addresses) > 0 {
		for _, s := range m.IPv6Addresses {
			l = len(s)
			n += 2 + l + sovEndpoint(uint64(l))
		}
	}
	if len(m.IPv6Gateways) > 0 {
		for _, s := range m.IPv6Gateways {
			l = len(s)
			n += 2 + l + sovEndpoint(uint64(l))
		}
	}
	return n
}

func sovEndpoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndpoint(x uint64) (n int) {
	return sovEndpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointMigrationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointMigrationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointMigrationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroSegmentVlan", wireType)
			}
			m.MicroSegmentVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicroSegmentVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroSegmentVlan", wireType)
			}
			m.MicroSegmentVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicroSegmentVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadAttributes == nil {
				m.WorkloadAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndpoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEndpoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEndpoint
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEndpoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEndpoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkloadAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Migration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Migration == nil {
				m.Migration = &EndpointMigrationStatus{}
			}
			if err := m.Migration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Addresses = append(m.IPv4Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateways = append(m.IPv4Gateways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Addresses = append(m.IPv6Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateways = append(m.IPv6Gateways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndpoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndpoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndpoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndpoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndpoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("endpoint.proto", fileDescriptorEndpoint) }

var fileDescriptorEndpoint = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x84, 0x7f, 0x99, 0x90, 0x60, 0x86, 0x2e, 0x98, 0x94, 0x02, 0x8d, 0x76, 0xab, 0x20,
	0x6d, 0xe2, 0xd5, 0xee, 0x2a, 0xaa, 0xf6, 0x16, 0x97, 0xb0, 0xa0, 0x82, 0x43, 0x93, 0xec, 0xa2,
	0x4a, 0x55, 0xd1, 0xc4, 0x1e, 0x8c, 0x8b, 0x3d, 0x63, 0xd9, 0x63, 0x50, 0x54, 0xf5, 0x58, 0xd4,
	0x73, 0x3f, 0x42, 0x8f, 0xfb, 0x49, 0x38, 0xf4, 0xb0, 0xea, 0x07, 0x40, 0x15, 0xa7, 0x6a, 0xbf,
	0xc0, 0x5e, 0x2b, 0xdb, 0xe3, 0xe0, 0x10, 0x3b, 0x87, 0xd5, 0xde, 0xfc, 0xde, 0xef, 0xbd, 0xdf,
	0xfc, 0xf2, 0xe6, 0xbd, 0x79, 0x01, 0x25, 0x4c, 0x74, 0x87, 0x9a, 0x84, 0xd5, 0x1d, 0x97, 0x32,
	0x0a, 0x17, 0xae, 0xa8, 0x7b, 0x61, 0x51, 0xa4, 0x97, 0x37, 0x0c, 0x4a, 0x0d, 0x0b, 0xcb, 0xc8,
	0x31, 0x65, 0x44, 0x08, 0x65, 0x88, 0x99, 0x94, 0x78, 0x51, 0x5c, 0xb9, 0x65, 0x98, 0xec, 0xdc,
	0xef, 0xd7, 0x35, 0x6a, 0xcb, 0x0e, 0x26, 0x1e, 0x22, 0x3a, 0x95, 0xbd, 0x2b, 0xf9, 0x12, 0x13,
	0x53, 0xc3, 0xb2, 0xcf, 0x4c, 0xcb, 0x0b, 0x52, 0x0d, 0x4c, 0x92, 0xd9, 0xb2, 0x49, 0x34, 0xcb,
	0xd7, 0x71, 0x4c, 0x53, 0x4b, 0xd0, 0x18, 0xd4, 0xa0, 0x72, 0xe8, 0xee, 0xfb, 0x67, 0xa1, 0x15,
	0x1a, 0xe1, 0x17, 0x0f, 0x7f, 0x92, 0x71, 0x6a, 0xa0, 0xd1, 0xc6, 0x0c, 0xf1, 0xb0, 0x67, 0x13,
	0xc2, 0x2c, 0xd4, 0xc7, 0x96, 0x27, 0x7b, 0xd8, 0xc2, 0x1a, 0xa3, 0x2e, 0xcf, 0x58, 0xf1, 0xb0,
	0xe6, 0xbb, 0x26, 0x1b, 0x18, 0x2e, 0xf5, 0x1d, 0xee, 0x2c, 0x12, 0xcc, 0x82, 0x72, 0x44, 0x66,
	0xe5, 0xef, 0x69, 0xb0, 0xd0, 0xe2, 0xd5, 0x82, 0x0d, 0x20, 0xf4, 0x24, 0x61, 0x5b, 0xa8, 0x16,
	0x9e, 0x17, 0xeb, 0xc8, 0x31, 0xeb, 0xbd, 0x81, 0x83, 0x8f, 0x30, 0x43, 0xca, 0xca, 0xcd, 0xed,
	0xd6, 0xd4, 0xfb, 0xdb, 0x2d, 0xe1, 0xc3, 0xed, 0xd6, 0xfc, 0x53, 0x93, 0x58, 0x26, 0xc1, 0x9d,
	0xf8, 0x03, 0xee, 0x01, 0xa1, 0x2d, 0x4d, 0x87, 0x79, 0x4b, 0x61, 0x5e, 0xbb, 0xff, 0x0b, 0xd6,
	0x58, 0x98, 0x59, 0x4e, 0x64, 0x96, 0x82, 0x9f, 0xf3, 0x94, 0xda, 0x26, 0xc3, 0xb6, 0xc3, 0x06,
	0x9d, 0x07, 0x36, 0x3c, 0x04, 0x33, 0x5d, 0x07, 0x6b, 0x52, 0x2e, 0xa4, 0x5a, 0xad, 0xc7, 0xd7,
	0x56, 0x8f, 0x15, 0x06, 0xa8, 0xb2, 0x1a, 0x30, 0x06, 0x6c, 0x9e, 0x83, 0xb5, 0x24, 0xdb, 0xa8,
	0x0d, 0x7b, 0x60, 0xae, 0xcb, 0x10, 0xf3, 0x3d, 0x69, 0x26, 0xe4, 0x93, 0x52, 0xf8, 0x42, 0x5c,
	0x91, 0x38, 0xa3, 0xe8, 0x85, 0x76, 0x82, 0x73, 0xcc, 0xf3, 0x6a, 0xe3, 0x9f, 0xdf, 0xd7, 0x25,
	0x50, 0x90, 0x7f, 0x6d, 0xd7, 0x7b, 0x98, 0x20, 0xc2, 0x7e, 0x83, 0xf9, 0xb8, 0xdd, 0xbc, 0xca,
	0x47, 0x01, 0xac, 0xc5, 0xe4, 0x47, 0xa6, 0xe1, 0x86, 0x0d, 0x12, 0x9d, 0x02, 0x2f, 0x86, 0x7a,
	0x82, 0x12, 0xe7, 0x95, 0xfd, 0x77, 0xd7, 0xeb, 0x72, 0x97, 0xb9, 0x2d, 0xe2, 0xdb, 0xd5, 0x8c,
	0xa4, 0xfa, 0x88, 0x8d, 0x77, 0x3e, 0xdc, 0x6e, 0x2d, 0x73, 0x49, 0xdb, 0xf7, 0x2a, 0xc7, 0x5d,
	0x15, 0x0a, 0x4a, 0xa3, 0xa9, 0x70, 0x01, 0xcc, 0xa8, 0x6d, 0xb5, 0x25, 0x4e, 0xc1, 0x3c, 0x98,
	0xed, 0xf6, 0x9a, 0x9d, 0x9e, 0x28, 0xc0, 0x12, 0x00, 0x7b, 0x07, 0x6a, 0xf3, 0xf0, 0xb4, 0xfb,
	0xa3, 0xfa, 0x9d, 0x38, 0x1d, 0x04, 0xed, 0x06, 0x41, 0x39, 0x08, 0xc0, 0xdc, 0x5e, 0xf3, 0xe0,
	0xb0, 0xb5, 0x2b, 0xce, 0xc0, 0x02, 0x98, 0x6f, 0x2a, 0xed, 0x4e, 0xaf, 0xb5, 0x2b, 0xce, 0xc2,
	0x47, 0x60, 0x79, 0xaf, 0xd3, 0x3e, 0x3a, 0x55, 0xdb, 0xea, 0xe9, 0x71, 0x4b, 0x3d, 0xdd, 0x6f,
	0x77, 0x7b, 0xe2, 0x5c, 0xe5, 0x8f, 0x69, 0xb0, 0x98, 0xbc, 0x26, 0xa8, 0x80, 0x05, 0x95, 0xea,
	0xf8, 0xcd, 0x9b, 0x83, 0x5d, 0xfe, 0x83, 0xbf, 0xbc, 0x89, 0xda, 0x60, 0x85, 0x50, 0x1d, 0xd7,
	0x7c, 0xdf, 0xd4, 0x13, 0x95, 0x4e, 0x73, 0xc2, 0xb7, 0xa0, 0xb4, 0x4f, 0x6d, 0x93, 0x18, 0xfb,
	0xd4, 0x63, 0x4d, 0x5d, 0x77, 0xc3, 0x2e, 0xcb, 0x2b, 0x15, 0xce, 0x54, 0x3e, 0x0f, 0xd1, 0xda,
	0x39, 0xf5, 0x58, 0x0d, 0xe9, 0xba, 0x9b, 0x20, 0x9c, 0x80, 0xc1, 0x9f, 0x80, 0x78, 0x64, 0x6a,
	0x2e, 0xed, 0x62, 0xc3, 0xc6, 0x84, 0xbd, 0xb5, 0x10, 0x09, 0x9b, 0xae, 0xa8, 0x3c, 0xe6, 0xcc,
	0x1b, 0x76, 0x80, 0xd7, 0xbc, 0x28, 0xa0, 0x76, 0x69, 0x21, 0x92, 0xe0, 0x9e, 0x88, 0x56, 0x3e,
	0x2e, 0x82, 0xd2, 0x68, 0x87, 0x41, 0x15, 0x2c, 0x9e, 0xf0, 0xe6, 0x53, 0x91, 0x8d, 0x79, 0x41,
	0xb6, 0xf8, 0x61, 0x6b, 0x71, 0x63, 0xd6, 0x08, 0xb2, 0x71, 0xe2, 0x9c, 0x2c, 0x00, 0x9e, 0x80,
	0x79, 0x35, 0x9a, 0x63, 0x5e, 0x91, 0x17, 0x7f, 0x5d, 0xaf, 0x97, 0xc1, 0xfc, 0x09, 0x46, 0x17,
	0x1d, 0x7c, 0x06, 0x97, 0xf8, 0x94, 0xcb, 0x3c, 0x2a, 0xe8, 0x1b, 0xee, 0x4a, 0xd0, 0x8f, 0xbb,
	0x52, 0x2a, 0x9e, 0xfb, 0x2c, 0x15, 0x1f, 0xe1, 0x0d, 0x4b, 0x30, 0x93, 0xcd, 0xfb, 0xa0, 0x0a,
	0x13, 0x30, 0xf8, 0x3d, 0x28, 0x1c, 0x1c, 0x5f, 0xbe, 0x0c, 0x94, 0x62, 0xcf, 0x93, 0x66, 0x43,
	0xd2, 0x4d, 0x4e, 0xba, 0x6a, 0x3a, 0x97, 0x2f, 0x43, 0x25, 0xd8, 0x4b, 0x4e, 0x75, 0x86, 0x3f,
	0x26, 0x7b, 0x8d, 0x18, 0xbe, 0x42, 0x03, 0x69, 0x2e, 0x85, 0xcc, 0x88, 0xb0, 0x31, 0xb2, 0x31,
	0x3f, 0x27, 0x6b, 0xc4, 0xca, 0xe6, 0xc7, 0xc8, 0x1a, 0x19, 0xca, 0x1a, 0x99, 0xca, 0x1a, 0xb1,
	0xb2, 0x85, 0x14, 0xb2, 0x74, 0x65, 0x29, 0x7e, 0xf8, 0x33, 0x00, 0x47, 0x48, 0x8b, 0x85, 0xe5,
	0xa3, 0xfe, 0x79, 0x77, 0xbd, 0x0e, 0x5b, 0x01, 0xdc, 0x76, 0xab, 0x1c, 0xad, 0xee, 0xec, 0xf0,
	0x13, 0x1e, 0xd9, 0x48, 0x4b, 0x51, 0x9b, 0xee, 0x1e, 0x99, 0x7c, 0xf0, 0x89, 0x93, 0xff, 0x18,
	0x14, 0x93, 0x23, 0x84, 0xa5, 0x42, 0x40, 0xd4, 0x19, 0x75, 0xc2, 0x6f, 0x40, 0xa9, 0xcb, 0x77,
	0xdc, 0xeb, 0x60, 0xc7, 0x79, 0xd2, 0xe2, 0x76, 0xae, 0x9a, 0xef, 0x3c, 0xf0, 0xa6, 0xce, 0x7b,
	0xf1, 0x73, 0xcd, 0x3b, 0xfc, 0x53, 0x00, 0x30, 0x9e, 0xee, 0x26, 0x63, 0xae, 0xd9, 0xf7, 0x19,
	0xf6, 0xa4, 0xd2, 0x76, 0xae, 0x5a, 0x78, 0xfe, 0x2c, 0x6b, 0xeb, 0xd4, 0xc7, 0x53, 0x5a, 0x84,
	0xb9, 0x03, 0xe5, 0x09, 0x97, 0xf4, 0xd5, 0x70, 0xf8, 0xd1, 0x30, 0x22, 0xa1, 0x69, 0x32, 0x0c,
	0xcf, 0x40, 0x7e, 0xb8, 0x00, 0xa4, 0xa5, 0x70, 0x01, 0x7e, 0x3d, 0x2e, 0xe5, 0xc1, 0xba, 0xb9,
	0xbf, 0x28, 0x3b, 0x06, 0x92, 0x17, 0x95, 0xe2, 0x84, 0x3f, 0x80, 0x62, 0x62, 0x00, 0xb1, 0x27,
	0x89, 0xc1, 0x0d, 0x28, 0xdb, 0x9c, 0x48, 0x4a, 0x8e, 0xda, 0x88, 0xfe, 0x4c, 0x24, 0x78, 0x2c,
	0x13, 0x63, 0xe8, 0x49, 0xcb, 0x21, 0xe3, 0xf0, 0xb1, 0x4c, 0xce, 0x5b, 0x92, 0x30, 0x0b, 0xe0,
	0x12, 0x1b, 0xf7, 0x12, 0xe1, 0x98, 0xc4, 0x46, 0xa6, 0xc4, 0xc6, 0x04, 0x89, 0x8d, 0xa1, 0xc4,
	0x95, 0x31, 0x89, 0x8d, 0x2c, 0x89, 0x69, 0x40, 0xb9, 0x05, 0xd6, 0x32, 0xda, 0x01, 0x8a, 0x20,
	0x77, 0x81, 0x07, 0xd1, 0xc6, 0xe8, 0x04, 0x9f, 0xf0, 0x0b, 0x30, 0x7b, 0x89, 0x2c, 0x1f, 0x47,
	0x4f, 0x7f, 0x27, 0x32, 0x5e, 0x4d, 0x7f, 0x2b, 0x28, 0xe2, 0xcd, 0xdd, 0xa6, 0xf0, 0xfe, 0x6e,
	0x53, 0xf8, 0xf7, 0x6e, 0x53, 0xf8, 0xef, 0x6e, 0x73, 0xea, 0x58, 0xe8, 0xcf, 0x85, 0x7f, 0xf4,
	0x5e, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x87, 0x03, 0x53, 0x57, 0x15, 0x0b, 0x00, 0x00,
}
