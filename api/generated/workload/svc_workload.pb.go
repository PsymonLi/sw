// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_workload.proto

package workload

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoMsgEndpointWatchHelper is a wrapper object for watch events for Endpoint objects
type AutoMsgEndpointWatchHelper struct {
	Events []*AutoMsgEndpointWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgEndpointWatchHelper) Reset()         { *m = AutoMsgEndpointWatchHelper{} }
func (m *AutoMsgEndpointWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEndpointWatchHelper) ProtoMessage()    {}
func (*AutoMsgEndpointWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{0}
}

func (m *AutoMsgEndpointWatchHelper) GetEvents() []*AutoMsgEndpointWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgEndpointWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Endpoint `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Reset()         { *m = AutoMsgEndpointWatchHelper_WatchEvent{} }
func (m *AutoMsgEndpointWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEndpointWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgEndpointWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{0, 0}
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) GetObject() *Endpoint {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgWorkloadWatchHelper is a wrapper object for watch events for Workload objects
type AutoMsgWorkloadWatchHelper struct {
	Events []*AutoMsgWorkloadWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgWorkloadWatchHelper) Reset()         { *m = AutoMsgWorkloadWatchHelper{} }
func (m *AutoMsgWorkloadWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgWorkloadWatchHelper) ProtoMessage()    {}
func (*AutoMsgWorkloadWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{1}
}

func (m *AutoMsgWorkloadWatchHelper) GetEvents() []*AutoMsgWorkloadWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgWorkloadWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Workload `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Reset()         { *m = AutoMsgWorkloadWatchHelper_WatchEvent{} }
func (m *AutoMsgWorkloadWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgWorkloadWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgWorkloadWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{1, 0}
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) GetObject() *Workload {
	if m != nil {
		return m.Object
	}
	return nil
}

// EndpointList is a container object for list of Endpoint objects
type EndpointList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Endpoint objects
	Items []*Endpoint `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (m *EndpointList) String() string            { return proto.CompactTextString(m) }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorSvcWorkload, []int{2} }

func (m *EndpointList) GetItems() []*Endpoint {
	if m != nil {
		return m.Items
	}
	return nil
}

// WorkloadList is a container object for list of Workload objects
type WorkloadList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Workload objects
	Items []*Workload `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *WorkloadList) Reset()                    { *m = WorkloadList{} }
func (m *WorkloadList) String() string            { return proto.CompactTextString(m) }
func (*WorkloadList) ProtoMessage()               {}
func (*WorkloadList) Descriptor() ([]byte, []int) { return fileDescriptorSvcWorkload, []int{3} }

func (m *WorkloadList) GetItems() []*Workload {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgEndpointWatchHelper)(nil), "workload.AutoMsgEndpointWatchHelper")
	proto.RegisterType((*AutoMsgEndpointWatchHelper_WatchEvent)(nil), "workload.AutoMsgEndpointWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgWorkloadWatchHelper)(nil), "workload.AutoMsgWorkloadWatchHelper")
	proto.RegisterType((*AutoMsgWorkloadWatchHelper_WatchEvent)(nil), "workload.AutoMsgWorkloadWatchHelper.WatchEvent")
	proto.RegisterType((*EndpointList)(nil), "workload.EndpointList")
	proto.RegisterType((*WorkloadList)(nil), "workload.WorkloadList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkloadV1 service

type WorkloadV1Client interface {
	// Abort Workload Migration operation
	AbortMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// Create Endpoint object
	AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	// Create Workload object
	AutoAddWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// Delete Endpoint object
	AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	// Delete Workload object
	AutoDeleteWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// Get Endpoint object
	AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	// Get Workload object
	AutoGetWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// List Endpoint objects
	AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error)
	// List Workload objects
	AutoListWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*WorkloadList, error)
	// Update Endpoint object
	AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	// Update Workload object
	AutoUpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// Watch Endpoint objects. Supports WebSockets or HTTP long poll
	AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchEndpointClient, error)
	AutoWatchSvcWorkloadV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchSvcWorkloadV1Client, error)
	// Watch Workload objects. Supports WebSockets or HTTP long poll
	AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchWorkloadClient, error)
	// Finish Workload Migration operation
	FinishMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	// Start Workload Migration operation
	StartMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
}

type workloadV1Client struct {
	cc *grpc.ClientConn
}

func NewWorkloadV1Client(cc *grpc.ClientConn) WorkloadV1Client {
	return &workloadV1Client{cc}
}

func (c *workloadV1Client) AbortMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AbortMigration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoAddEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoAddWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoAddWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoDeleteEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoDeleteWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoDeleteWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoGetEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoGetWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoGetWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoListEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoListWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*WorkloadList, error) {
	out := new(WorkloadList)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoListWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoUpdateEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoUpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoUpdateWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchEndpointClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkloadV1_serviceDesc.Streams[0], c.cc, "/workload.WorkloadV1/AutoWatchEndpoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadV1AutoWatchEndpointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadV1_AutoWatchEndpointClient interface {
	Recv() (*AutoMsgEndpointWatchHelper, error)
	grpc.ClientStream
}

type workloadV1AutoWatchEndpointClient struct {
	grpc.ClientStream
}

func (x *workloadV1AutoWatchEndpointClient) Recv() (*AutoMsgEndpointWatchHelper, error) {
	m := new(AutoMsgEndpointWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadV1Client) AutoWatchSvcWorkloadV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchSvcWorkloadV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkloadV1_serviceDesc.Streams[1], c.cc, "/workload.WorkloadV1/AutoWatchSvcWorkloadV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadV1AutoWatchSvcWorkloadV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadV1_AutoWatchSvcWorkloadV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type workloadV1AutoWatchSvcWorkloadV1Client struct {
	grpc.ClientStream
}

func (x *workloadV1AutoWatchSvcWorkloadV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadV1Client) AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchWorkloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkloadV1_serviceDesc.Streams[2], c.cc, "/workload.WorkloadV1/AutoWatchWorkload", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadV1AutoWatchWorkloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadV1_AutoWatchWorkloadClient interface {
	Recv() (*AutoMsgWorkloadWatchHelper, error)
	grpc.ClientStream
}

type workloadV1AutoWatchWorkloadClient struct {
	grpc.ClientStream
}

func (x *workloadV1AutoWatchWorkloadClient) Recv() (*AutoMsgWorkloadWatchHelper, error) {
	m := new(AutoMsgWorkloadWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadV1Client) FinishMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/FinishMigration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) StartMigration(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/StartMigration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkloadV1 service

type WorkloadV1Server interface {
	// Abort Workload Migration operation
	AbortMigration(context.Context, *Workload) (*Workload, error)
	// Create Endpoint object
	AutoAddEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	// Create Workload object
	AutoAddWorkload(context.Context, *Workload) (*Workload, error)
	// Delete Endpoint object
	AutoDeleteEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	// Delete Workload object
	AutoDeleteWorkload(context.Context, *Workload) (*Workload, error)
	// Get Endpoint object
	AutoGetEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	// Get Workload object
	AutoGetWorkload(context.Context, *Workload) (*Workload, error)
	// List Endpoint objects
	AutoListEndpoint(context.Context, *api.ListWatchOptions) (*EndpointList, error)
	// List Workload objects
	AutoListWorkload(context.Context, *api.ListWatchOptions) (*WorkloadList, error)
	// Update Endpoint object
	AutoUpdateEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	// Update Workload object
	AutoUpdateWorkload(context.Context, *Workload) (*Workload, error)
	// Watch Endpoint objects. Supports WebSockets or HTTP long poll
	AutoWatchEndpoint(*api.ListWatchOptions, WorkloadV1_AutoWatchEndpointServer) error
	AutoWatchSvcWorkloadV1(*api.ListWatchOptions, WorkloadV1_AutoWatchSvcWorkloadV1Server) error
	// Watch Workload objects. Supports WebSockets or HTTP long poll
	AutoWatchWorkload(*api.ListWatchOptions, WorkloadV1_AutoWatchWorkloadServer) error
	// Finish Workload Migration operation
	FinishMigration(context.Context, *Workload) (*Workload, error)
	// Start Workload Migration operation
	StartMigration(context.Context, *Workload) (*Workload, error)
}

func RegisterWorkloadV1Server(s *grpc.Server, srv WorkloadV1Server) {
	s.RegisterService(&_WorkloadV1_serviceDesc, srv)
}

func _WorkloadV1_AbortMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AbortMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AbortMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AbortMigration(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoAddEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoAddEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoAddEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoAddEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoAddWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoAddWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoAddWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoAddWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoDeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoDeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoDeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoDeleteEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoDeleteWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoDeleteWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoDeleteWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoDeleteWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoGetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoGetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoGetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoGetEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoGetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoGetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoGetWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoGetWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoListEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoListEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoListEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoListEndpoint(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoListWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoListWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoListWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoListWorkload(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoUpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoUpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoUpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoUpdateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoUpdateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoUpdateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoUpdateWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoUpdateWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoWatchEndpoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadV1Server).AutoWatchEndpoint(m, &workloadV1AutoWatchEndpointServer{stream})
}

type WorkloadV1_AutoWatchEndpointServer interface {
	Send(*AutoMsgEndpointWatchHelper) error
	grpc.ServerStream
}

type workloadV1AutoWatchEndpointServer struct {
	grpc.ServerStream
}

func (x *workloadV1AutoWatchEndpointServer) Send(m *AutoMsgEndpointWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadV1_AutoWatchSvcWorkloadV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadV1Server).AutoWatchSvcWorkloadV1(m, &workloadV1AutoWatchSvcWorkloadV1Server{stream})
}

type WorkloadV1_AutoWatchSvcWorkloadV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type workloadV1AutoWatchSvcWorkloadV1Server struct {
	grpc.ServerStream
}

func (x *workloadV1AutoWatchSvcWorkloadV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadV1_AutoWatchWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadV1Server).AutoWatchWorkload(m, &workloadV1AutoWatchWorkloadServer{stream})
}

type WorkloadV1_AutoWatchWorkloadServer interface {
	Send(*AutoMsgWorkloadWatchHelper) error
	grpc.ServerStream
}

type workloadV1AutoWatchWorkloadServer struct {
	grpc.ServerStream
}

func (x *workloadV1AutoWatchWorkloadServer) Send(m *AutoMsgWorkloadWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadV1_FinishMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).FinishMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/FinishMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).FinishMigration(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_StartMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).StartMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/StartMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).StartMigration(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workload.WorkloadV1",
	HandlerType: (*WorkloadV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AbortMigration",
			Handler:    _WorkloadV1_AbortMigration_Handler,
		},
		{
			MethodName: "AutoAddEndpoint",
			Handler:    _WorkloadV1_AutoAddEndpoint_Handler,
		},
		{
			MethodName: "AutoAddWorkload",
			Handler:    _WorkloadV1_AutoAddWorkload_Handler,
		},
		{
			MethodName: "AutoDeleteEndpoint",
			Handler:    _WorkloadV1_AutoDeleteEndpoint_Handler,
		},
		{
			MethodName: "AutoDeleteWorkload",
			Handler:    _WorkloadV1_AutoDeleteWorkload_Handler,
		},
		{
			MethodName: "AutoGetEndpoint",
			Handler:    _WorkloadV1_AutoGetEndpoint_Handler,
		},
		{
			MethodName: "AutoGetWorkload",
			Handler:    _WorkloadV1_AutoGetWorkload_Handler,
		},
		{
			MethodName: "AutoListEndpoint",
			Handler:    _WorkloadV1_AutoListEndpoint_Handler,
		},
		{
			MethodName: "AutoListWorkload",
			Handler:    _WorkloadV1_AutoListWorkload_Handler,
		},
		{
			MethodName: "AutoUpdateEndpoint",
			Handler:    _WorkloadV1_AutoUpdateEndpoint_Handler,
		},
		{
			MethodName: "AutoUpdateWorkload",
			Handler:    _WorkloadV1_AutoUpdateWorkload_Handler,
		},
		{
			MethodName: "FinishMigration",
			Handler:    _WorkloadV1_FinishMigration_Handler,
		},
		{
			MethodName: "StartMigration",
			Handler:    _WorkloadV1_StartMigration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchEndpoint",
			Handler:       _WorkloadV1_AutoWatchEndpoint_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcWorkloadV1",
			Handler:       _WorkloadV1_AutoWatchSvcWorkloadV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchWorkload",
			Handler:       _WorkloadV1_AutoWatchWorkload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_workload.proto",
}

func (m *AutoMsgEndpointWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEndpointWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgWorkloadWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgWorkloadWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EndpointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorkloadList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcWorkload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgEndpointWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	return n
}

func (m *AutoMsgWorkloadWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *WorkloadList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func sovSvcWorkload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcWorkload(x uint64) (n int) {
	return sovSvcWorkload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgEndpointWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgEndpointWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEndpointWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Endpoint{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgWorkloadWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgWorkloadWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgWorkloadWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgWorkloadWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Workload{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Endpoint{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Workload{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcWorkload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcWorkload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcWorkload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcWorkload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcWorkload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcWorkload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_workload.proto", fileDescriptorSvcWorkload) }

var fileDescriptorSvcWorkload = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xc4, 0x89, 0x49, 0x27, 0x25, 0x71, 0x26, 0x34, 0xf2, 0xae, 0xac, 0xd8, 0xda, 0xb6,
	0x52, 0xb0, 0x5a, 0x6f, 0x9a, 0x96, 0x0a, 0xe5, 0x44, 0x2c, 0x52, 0x0a, 0x22, 0x4d, 0x95, 0x04,
	0x22, 0x8a, 0x04, 0xac, 0xed, 0xa9, 0xbd, 0xb0, 0xde, 0x59, 0x79, 0xc7, 0x8e, 0x22, 0xd4, 0x03,
	0xd8, 0x3d, 0x80, 0xe0, 0x02, 0x12, 0x07, 0x84, 0x38, 0x70, 0x2c, 0xb7, 0x70, 0x41, 0x3d, 0x71,
	0x41, 0x8a, 0x38, 0x55, 0xe2, 0x56, 0x21, 0x0b, 0x45, 0x1c, 0x90, 0xc5, 0x1f, 0x81, 0x66, 0x76,
	0x67, 0xbd, 0x6b, 0xaf, 0xed, 0x75, 0x0e, 0xa0, 0x5e, 0xbc, 0xf3, 0xe3, 0xbd, 0x6f, 0xbe, 0xf7,
	0xcd, 0x9b, 0x99, 0x67, 0x88, 0xec, 0x66, 0xe9, 0xfd, 0x43, 0x52, 0xff, 0xc8, 0x20, 0x5a, 0x39,
	0x6f, 0xd5, 0x09, 0x25, 0x68, 0x56, 0xf4, 0xe5, 0x74, 0x85, 0x90, 0x8a, 0x81, 0x55, 0xcd, 0xd2,
	0x55, 0xcd, 0x34, 0x09, 0xd5, 0xa8, 0x4e, 0x4c, 0xdb, 0xb1, 0x93, 0xb7, 0x2a, 0x3a, 0xad, 0x36,
	0x8a, 0xf9, 0x12, 0xa9, 0xa9, 0x16, 0x36, 0x6d, 0xcd, 0x2c, 0x13, 0xd5, 0x3e, 0x54, 0x9b, 0xd8,
	0xd4, 0x4b, 0x58, 0x6d, 0x50, 0xdd, 0xb0, 0x99, 0x6b, 0x05, 0x9b, 0x7e, 0x6f, 0x55, 0x37, 0x4b,
	0x46, 0xa3, 0x8c, 0x05, 0xcc, 0x55, 0x1f, 0x4c, 0x85, 0x54, 0x88, 0xca, 0x87, 0x8b, 0x8d, 0xfb,
	0xbc, 0xc7, 0x3b, 0xbc, 0xe5, 0x9a, 0xaf, 0x0d, 0x59, 0x95, 0x71, 0x34, 0xb4, 0x22, 0x36, 0x6c,
	0xd5, 0xc6, 0x06, 0x2e, 0x51, 0x52, 0x77, 0x3d, 0xce, 0x53, 0x6c, 0x6a, 0x26, 0x75, 0x7b, 0xf3,
	0xd8, 0x2c, 0x5b, 0x44, 0xef, 0xf5, 0x83, 0xd1, 0xcb, 0x97, 0x47, 0xe0, 0xd7, 0x30, 0xd5, 0x1c,
	0x33, 0xe5, 0x1f, 0x00, 0xe5, 0xcd, 0x06, 0x25, 0xdb, 0x76, 0x65, 0xcb, 0x05, 0x3c, 0xd0, 0x68,
	0xa9, 0x7a, 0x1b, 0x1b, 0x16, 0xae, 0xa3, 0x3d, 0x98, 0xd8, 0x6a, 0x62, 0x93, 0xda, 0x29, 0x90,
	0x8d, 0xaf, 0xce, 0xad, 0xab, 0x79, 0x6f, 0x99, 0xe1, 0x5e, 0x79, 0xde, 0xe6, 0x7e, 0x05, 0xd8,
	0xed, 0x64, 0x12, 0x98, 0x43, 0xec, 0xba, 0x5f, 0xb9, 0x0a, 0x61, 0xcf, 0x02, 0x65, 0xe1, 0xf4,
	0xfe, 0x91, 0x85, 0x53, 0x20, 0x0b, 0x56, 0xcf, 0x15, 0x50, 0xb7, 0x93, 0x99, 0xa7, 0x47, 0x16,
	0xbe, 0x42, 0x6a, 0x3a, 0xc5, 0x35, 0x8b, 0x1e, 0xa1, 0x97, 0x61, 0x62, 0xa7, 0xf8, 0x21, 0x2e,
	0xd1, 0xd4, 0x54, 0x16, 0xac, 0xce, 0xad, 0xa3, 0x1e, 0x09, 0xb1, 0x7a, 0xe1, 0x85, 0x6e, 0x27,
	0x93, 0x24, 0xdc, 0xaa, 0xe7, 0xb9, 0xb1, 0xf0, 0xf4, 0xa1, 0x34, 0x77, 0xc8, 0xd6, 0xaa, 0x72,
	0x66, 0xfe, 0x70, 0x0f, 0x5c, 0x8c, 0xc9, 0xc2, 0x0d, 0xf1, 0xfa, 0x0f, 0xc3, 0x15, 0xab, 0x47,
	0x0d, 0xf7, 0x0f, 0x00, 0xcf, 0x0b, 0x89, 0xde, 0xd4, 0x6d, 0x8a, 0x6e, 0x42, 0xb0, 0xef, 0xc2,
	0x3e, 0x9f, 0xd7, 0x2c, 0x3d, 0xcf, 0xb8, 0x6c, 0x63, 0xaa, 0x15, 0x96, 0x4e, 0x3a, 0x99, 0xd8,
	0x93, 0x4e, 0x06, 0x74, 0x3b, 0x99, 0xe7, 0xae, 0xe8, 0xa6, 0xa1, 0x9b, 0x78, 0x57, 0x34, 0xd0,
	0x0e, 0x9c, 0x65, 0xfe, 0xcc, 0x32, 0x15, 0xf7, 0xb9, 0x8b, 0xc1, 0x42, 0xda, 0xe7, 0x9e, 0x34,
	0x74, 0x9b, 0x5e, 0x65, 0x49, 0x26, 0x70, 0x06, 0x46, 0xd0, 0x75, 0x38, 0xf3, 0x3a, 0xc5, 0x35,
	0x3b, 0x35, 0xcd, 0x85, 0x0e, 0xdb, 0xd2, 0x73, 0xdd, 0x4e, 0x66, 0x86, 0x85, 0x66, 0xef, 0x3a,
	0x9f, 0x8d, 0xf9, 0xa7, 0x0f, 0x25, 0xc8, 0xa0, 0x7c, 0xe1, 0x09, 0x49, 0x9e, 0x95, 0xf0, 0xbc,
	0x2d, 0x1c, 0x1b, 0xde, 0xfa, 0x4f, 0x17, 0x20, 0x14, 0xe6, 0x6f, 0x5f, 0x43, 0xbf, 0x02, 0x38,
	0xbf, 0x59, 0x24, 0x75, 0xba, 0xad, 0x57, 0xea, 0xfc, 0x0e, 0x42, 0x21, 0xb8, 0x72, 0xc8, 0x98,
	0xf2, 0x39, 0x38, 0x6e, 0x4b, 0x89, 0x52, 0x1d, 0x6b, 0x14, 0xff, 0xdc, 0x96, 0xc0, 0x2f, 0x6d,
	0x09, 0xfc, 0xd6, 0x96, 0x66, 0x85, 0xc1, 0xa7, 0xbf, 0xff, 0xf5, 0xf5, 0xd4, 0x7d, 0x18, 0xdb,
	0x00, 0xb9, 0x7b, 0x2f, 0xf2, 0x8f, 0xa2, 0xa8, 0x02, 0xc6, 0x56, 0x3f, 0xde, 0xc9, 0xdf, 0xd1,
	0x6a, 0xf8, 0x81, 0x1a, 0x5c, 0x5e, 0xb9, 0xa1, 0x3a, 0x57, 0x12, 0x33, 0xd8, 0xe7, 0xad, 0x07,
	0xe3, 0xbd, 0xd0, 0x36, 0x5c, 0x60, 0x87, 0x69, 0xb3, 0x5c, 0x16, 0x5b, 0x8d, 0x42, 0xb6, 0x5f,
	0x0e, 0x19, 0x53, 0xd0, 0x40, 0x18, 0x31, 0xf4, 0x19, 0xf0, 0xf0, 0x44, 0x38, 0x91, 0x75, 0xb9,
	0x33, 0x28, 0x0b, 0x97, 0xe2, 0xa6, 0x23, 0xc5, 0xa2, 0x23, 0x05, 0xec, 0x05, 0xa5, 0xa4, 0x47,
	0x85, 0x8c, 0xee, 0x42, 0xc4, 0xa8, 0xbc, 0x8a, 0x0d, 0x4c, 0xf1, 0xd9, 0xa2, 0x2b, 0x73, 0x5f,
	0x2f, 0xba, 0xef, 0x80, 0x1f, 0x72, 0xe2, 0x00, 0xdf, 0x1b, 0x80, 0x74, 0x02, 0xbc, 0x05, 0x63,
	0x1b, 0xb1, 0x7b, 0x12, 0xfb, 0xcd, 0x2d, 0x85, 0xec, 0x59, 0xee, 0x72, 0xa4, 0xad, 0x45, 0xdf,
	0xb8, 0xe2, 0xbf, 0x86, 0xe9, 0xc4, 0xe1, 0xbe, 0x7b, 0xdc, 0x96, 0xe2, 0x15, 0x4c, 0x87, 0x11,
	0x43, 0x4b, 0xaa, 0x78, 0xe3, 0x7c, 0x2b, 0x86, 0x11, 0x0b, 0x31, 0xf3, 0x11, 0x9b, 0x58, 0xb4,
	0x08, 0xc4, 0x42, 0xa4, 0x88, 0xa8, 0xd8, 0x97, 0x00, 0x26, 0x19, 0x31, 0x76, 0xb5, 0x78, 0x92,
	0x5d, 0xf0, 0x6e, 0x1b, 0xfe, 0x52, 0xec, 0x58, 0xbc, 0xc2, 0x90, 0x97, 0x07, 0x55, 0x63, 0x36,
	0xca, 0x1b, 0xc7, 0x6d, 0x69, 0x9a, 0x5d, 0x14, 0x01, 0x86, 0x37, 0x38, 0xc3, 0x24, 0x67, 0x08,
	0x7b, 0x9a, 0xa0, 0xf4, 0x28, 0xc5, 0x02, 0x7c, 0x3c, 0xa5, 0xc6, 0xf3, 0xf1, 0x5f, 0xbb, 0x91,
	0xf8, 0xf4, 0x0e, 0x49, 0xa4, 0x23, 0xf4, 0x96, 0x55, 0xd6, 0xce, 0x7a, 0x84, 0x1a, 0xdc, 0xd7,
	0x3b, 0x42, 0xdf, 0x03, 0x3f, 0xe4, 0xc4, 0xd9, 0xf0, 0xc1, 0x00, 0xa4, 0x13, 0xde, 0x6d, 0xe7,
	0x8e, 0x90, 0xf9, 0x47, 0x0e, 0x4b, 0x09, 0x39, 0x62, 0x4a, 0xfc, 0x08, 0xe0, 0x22, 0x23, 0xe8,
	0x54, 0x09, 0x63, 0x72, 0xe2, 0x52, 0x94, 0x0a, 0x4c, 0x39, 0x38, 0x6e, 0x4b, 0x33, 0xbc, 0x12,
	0x08, 0x70, 0x7e, 0x85, 0x6f, 0xc9, 0x32, 0xdf, 0x92, 0xa4, 0xca, 0xe7, 0x7d, 0xa9, 0xa0, 0xb8,
	0x23, 0x23, 0xd2, 0x65, 0x0d, 0xa0, 0x77, 0xe0, 0xb2, 0x47, 0x76, 0xaf, 0x59, 0xf2, 0x3d, 0x50,
	0x43, 0x18, 0x2f, 0xf1, 0xe1, 0x5e, 0x09, 0xc4, 0x53, 0x66, 0xb1, 0x9f, 0x60, 0x6c, 0x0d, 0x04,
	0x85, 0x18, 0x97, 0x8c, 0x97, 0xa2, 0xd4, 0x66, 0x93, 0x08, 0xd1, 0xcb, 0xc1, 0xe1, 0x42, 0x78,
	0x36, 0x6b, 0x00, 0x9d, 0x00, 0xb8, 0x70, 0x4b, 0x37, 0x75, 0xbb, 0x3a, 0xf9, 0x83, 0xfc, 0x45,
	0x94, 0x07, 0xb9, 0xea, 0x64, 0x58, 0xce, 0x79, 0x85, 0x2e, 0x86, 0x3d, 0xad, 0x7d, 0xeb, 0x2b,
	0x2f, 0x45, 0x7b, 0x91, 0xfb, 0x69, 0xb3, 0xd2, 0x62, 0x8f, 0x6a, 0xff, 0x67, 0x69, 0x11, 0x5c,
	0x3e, 0x6a, 0x69, 0x11, 0xf4, 0x92, 0x3f, 0x89, 0x7f, 0xd5, 0x92, 0xa6, 0x9a, 0xd7, 0xbe, 0x6d,
	0x49, 0xde, 0xbf, 0xbf, 0x1f, 0x5a, 0xd2, 0xac, 0x38, 0x22, 0xac, 0x2d, 0x88, 0x3d, 0x6a, 0x49,
	0x69, 0xe8, 0xcd, 0x20, 0x76, 0xe1, 0x23, 0x7e, 0x89, 0x21, 0x27, 0x5f, 0x1e, 0xb5, 0x24, 0x15,
	0x7a, 0xd6, 0xce, 0x7c, 0xdc, 0x6a, 0x50, 0xe4, 0xbe, 0xa7, 0x68, 0xda, 0x22, 0x76, 0xd0, 0xe5,
	0x71, 0x4b, 0xda, 0x45, 0x9e, 0x8b, 0xdc, 0x27, 0xa9, 0xe2, 0xcd, 0xe4, 0xbc, 0xd6, 0xba, 0xc2,
	0x6d, 0xb2, 0xa2, 0x9f, 0xf5, 0xac, 0xb3, 0xc4, 0xc2, 0x4e, 0xeb, 0x71, 0x4b, 0xda, 0xf7, 0xa1,
	0xf6, 0xe7, 0x5c, 0x28, 0xec, 0x45, 0xc7, 0x68, 0x1c, 0x6e, 0x80, 0x6d, 0x5f, 0x71, 0x17, 0xca,
	0x96, 0xdb, 0x8c, 0x44, 0x2d, 0x24, 0x4f, 0x4e, 0x57, 0xc0, 0x93, 0xd3, 0x15, 0xf0, 0xe7, 0xe9,
	0x0a, 0xf8, 0xfb, 0x74, 0x25, 0x76, 0x17, 0x14, 0x13, 0xfc, 0xcf, 0xe6, 0xf5, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0xf6, 0x57, 0xfc, 0xa7, 0x0f, 0x00, 0x00,
}
