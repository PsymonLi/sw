// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_workload.proto

package workload

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/labels"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AutoMsgEndpointWatchHelper struct {
	Events []*AutoMsgEndpointWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgEndpointWatchHelper) Reset()         { *m = AutoMsgEndpointWatchHelper{} }
func (m *AutoMsgEndpointWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEndpointWatchHelper) ProtoMessage()    {}
func (*AutoMsgEndpointWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{0}
}

func (m *AutoMsgEndpointWatchHelper) GetEvents() []*AutoMsgEndpointWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgEndpointWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Endpoint `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Reset()         { *m = AutoMsgEndpointWatchHelper_WatchEvent{} }
func (m *AutoMsgEndpointWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEndpointWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgEndpointWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{0, 0}
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) GetObject() *Endpoint {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgWorkloadWatchHelper struct {
	Events []*AutoMsgWorkloadWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgWorkloadWatchHelper) Reset()         { *m = AutoMsgWorkloadWatchHelper{} }
func (m *AutoMsgWorkloadWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgWorkloadWatchHelper) ProtoMessage()    {}
func (*AutoMsgWorkloadWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{1}
}

func (m *AutoMsgWorkloadWatchHelper) GetEvents() []*AutoMsgWorkloadWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgWorkloadWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Workload `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Reset()         { *m = AutoMsgWorkloadWatchHelper_WatchEvent{} }
func (m *AutoMsgWorkloadWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgWorkloadWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgWorkloadWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcWorkload, []int{1, 0}
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) GetObject() *Workload {
	if m != nil {
		return m.Object
	}
	return nil
}

type EndpointList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Endpoint `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (m *EndpointList) String() string            { return proto.CompactTextString(m) }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorSvcWorkload, []int{2} }

func (m *EndpointList) GetItems() []*Endpoint {
	if m != nil {
		return m.Items
	}
	return nil
}

type WorkloadList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Workload `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *WorkloadList) Reset()                    { *m = WorkloadList{} }
func (m *WorkloadList) String() string            { return proto.CompactTextString(m) }
func (*WorkloadList) ProtoMessage()               {}
func (*WorkloadList) Descriptor() ([]byte, []int) { return fileDescriptorSvcWorkload, []int{3} }

func (m *WorkloadList) GetItems() []*Workload {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgEndpointWatchHelper)(nil), "workload.AutoMsgEndpointWatchHelper")
	proto.RegisterType((*AutoMsgEndpointWatchHelper_WatchEvent)(nil), "workload.AutoMsgEndpointWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgWorkloadWatchHelper)(nil), "workload.AutoMsgWorkloadWatchHelper")
	proto.RegisterType((*AutoMsgWorkloadWatchHelper_WatchEvent)(nil), "workload.AutoMsgWorkloadWatchHelper.WatchEvent")
	proto.RegisterType((*EndpointList)(nil), "workload.EndpointList")
	proto.RegisterType((*WorkloadList)(nil), "workload.WorkloadList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkloadV1 service

type WorkloadV1Client interface {
	AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoAddWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoDeleteWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoGetWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error)
	AutoListWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*WorkloadList, error)
	AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoUpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error)
	AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchEndpointClient, error)
	AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchWorkloadClient, error)
}

type workloadV1Client struct {
	cc *grpc.ClientConn
}

func NewWorkloadV1Client(cc *grpc.ClientConn) WorkloadV1Client {
	return &workloadV1Client{cc}
}

func (c *workloadV1Client) AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoAddEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoAddWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoAddWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoDeleteEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoDeleteWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoDeleteWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoGetEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoGetWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoGetWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoListEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoListWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*WorkloadList, error) {
	out := new(WorkloadList)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoListWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoUpdateEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoUpdateWorkload(ctx context.Context, in *Workload, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := grpc.Invoke(ctx, "/workload.WorkloadV1/AutoUpdateWorkload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadV1Client) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchEndpointClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkloadV1_serviceDesc.Streams[0], c.cc, "/workload.WorkloadV1/AutoWatchEndpoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadV1AutoWatchEndpointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadV1_AutoWatchEndpointClient interface {
	Recv() (*AutoMsgEndpointWatchHelper, error)
	grpc.ClientStream
}

type workloadV1AutoWatchEndpointClient struct {
	grpc.ClientStream
}

func (x *workloadV1AutoWatchEndpointClient) Recv() (*AutoMsgEndpointWatchHelper, error) {
	m := new(AutoMsgEndpointWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workloadV1Client) AutoWatchWorkload(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (WorkloadV1_AutoWatchWorkloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkloadV1_serviceDesc.Streams[1], c.cc, "/workload.WorkloadV1/AutoWatchWorkload", opts...)
	if err != nil {
		return nil, err
	}
	x := &workloadV1AutoWatchWorkloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkloadV1_AutoWatchWorkloadClient interface {
	Recv() (*AutoMsgWorkloadWatchHelper, error)
	grpc.ClientStream
}

type workloadV1AutoWatchWorkloadClient struct {
	grpc.ClientStream
}

func (x *workloadV1AutoWatchWorkloadClient) Recv() (*AutoMsgWorkloadWatchHelper, error) {
	m := new(AutoMsgWorkloadWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WorkloadV1 service

type WorkloadV1Server interface {
	AutoAddEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoAddWorkload(context.Context, *Workload) (*Workload, error)
	AutoDeleteEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoDeleteWorkload(context.Context, *Workload) (*Workload, error)
	AutoGetEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoGetWorkload(context.Context, *Workload) (*Workload, error)
	AutoListEndpoint(context.Context, *api.ListWatchOptions) (*EndpointList, error)
	AutoListWorkload(context.Context, *api.ListWatchOptions) (*WorkloadList, error)
	AutoUpdateEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoUpdateWorkload(context.Context, *Workload) (*Workload, error)
	AutoWatchEndpoint(*api.ListWatchOptions, WorkloadV1_AutoWatchEndpointServer) error
	AutoWatchWorkload(*api.ListWatchOptions, WorkloadV1_AutoWatchWorkloadServer) error
}

func RegisterWorkloadV1Server(s *grpc.Server, srv WorkloadV1Server) {
	s.RegisterService(&_WorkloadV1_serviceDesc, srv)
}

func _WorkloadV1_AutoAddEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoAddEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoAddEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoAddEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoAddWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoAddWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoAddWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoAddWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoDeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoDeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoDeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoDeleteEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoDeleteWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoDeleteWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoDeleteWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoDeleteWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoGetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoGetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoGetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoGetEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoGetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoGetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoGetWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoGetWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoListEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoListEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoListEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoListEndpoint(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoListWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoListWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoListWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoListWorkload(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoUpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoUpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoUpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoUpdateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoUpdateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadV1Server).AutoUpdateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.WorkloadV1/AutoUpdateWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadV1Server).AutoUpdateWorkload(ctx, req.(*Workload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadV1_AutoWatchEndpoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadV1Server).AutoWatchEndpoint(m, &workloadV1AutoWatchEndpointServer{stream})
}

type WorkloadV1_AutoWatchEndpointServer interface {
	Send(*AutoMsgEndpointWatchHelper) error
	grpc.ServerStream
}

type workloadV1AutoWatchEndpointServer struct {
	grpc.ServerStream
}

func (x *workloadV1AutoWatchEndpointServer) Send(m *AutoMsgEndpointWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkloadV1_AutoWatchWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkloadV1Server).AutoWatchWorkload(m, &workloadV1AutoWatchWorkloadServer{stream})
}

type WorkloadV1_AutoWatchWorkloadServer interface {
	Send(*AutoMsgWorkloadWatchHelper) error
	grpc.ServerStream
}

type workloadV1AutoWatchWorkloadServer struct {
	grpc.ServerStream
}

func (x *workloadV1AutoWatchWorkloadServer) Send(m *AutoMsgWorkloadWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _WorkloadV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workload.WorkloadV1",
	HandlerType: (*WorkloadV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddEndpoint",
			Handler:    _WorkloadV1_AutoAddEndpoint_Handler,
		},
		{
			MethodName: "AutoAddWorkload",
			Handler:    _WorkloadV1_AutoAddWorkload_Handler,
		},
		{
			MethodName: "AutoDeleteEndpoint",
			Handler:    _WorkloadV1_AutoDeleteEndpoint_Handler,
		},
		{
			MethodName: "AutoDeleteWorkload",
			Handler:    _WorkloadV1_AutoDeleteWorkload_Handler,
		},
		{
			MethodName: "AutoGetEndpoint",
			Handler:    _WorkloadV1_AutoGetEndpoint_Handler,
		},
		{
			MethodName: "AutoGetWorkload",
			Handler:    _WorkloadV1_AutoGetWorkload_Handler,
		},
		{
			MethodName: "AutoListEndpoint",
			Handler:    _WorkloadV1_AutoListEndpoint_Handler,
		},
		{
			MethodName: "AutoListWorkload",
			Handler:    _WorkloadV1_AutoListWorkload_Handler,
		},
		{
			MethodName: "AutoUpdateEndpoint",
			Handler:    _WorkloadV1_AutoUpdateEndpoint_Handler,
		},
		{
			MethodName: "AutoUpdateWorkload",
			Handler:    _WorkloadV1_AutoUpdateWorkload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchEndpoint",
			Handler:       _WorkloadV1_AutoWatchEndpoint_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchWorkload",
			Handler:       _WorkloadV1_AutoWatchWorkload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_workload.proto",
}

func (m *AutoMsgEndpointWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEndpointWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgWorkloadWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgWorkloadWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcWorkload(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EndpointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WorkloadList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcWorkload(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcWorkload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcWorkload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgEndpointWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgEndpointWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	return n
}

func (m *AutoMsgWorkloadWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcWorkload(uint64(l))
	}
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func (m *WorkloadList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcWorkload(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcWorkload(uint64(l))
		}
	}
	return n
}

func sovSvcWorkload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcWorkload(x uint64) (n int) {
	return sovSvcWorkload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgEndpointWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgEndpointWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEndpointWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Endpoint{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgWorkloadWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgWorkloadWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgWorkloadWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgWorkloadWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgWorkloadWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Workload{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Endpoint{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Workload{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcWorkload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcWorkload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcWorkload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcWorkload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcWorkload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcWorkload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcWorkload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcWorkload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcWorkload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcWorkload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_workload.proto", fileDescriptorSvcWorkload) }

var fileDescriptorSvcWorkload = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0xb4, 0x34, 0x75, 0xca, 0x0f, 0x9d, 0x04, 0xd3, 0x5d, 0x49, 0xc1, 0x06, 0x92,
	0x4a, 0x42, 0x17, 0x30, 0x26, 0xca, 0x41, 0x03, 0x91, 0xa8, 0x89, 0x88, 0x07, 0x94, 0xa3, 0x99,
	0xee, 0x8e, 0xcb, 0xca, 0x76, 0x67, 0xd3, 0x99, 0xb6, 0x31, 0x86, 0x0b, 0x2d, 0x77, 0xa3, 0x37,
	0x8f, 0x1e, 0x3d, 0x78, 0xe8, 0xc9, 0x3f, 0x81, 0x23, 0x89, 0x37, 0x4c, 0x88, 0x21, 0xfe, 0x21,
	0x66, 0xa6, 0x9d, 0xed, 0x56, 0x16, 0xba, 0x35, 0xc6, 0xdb, 0xce, 0xf4, 0xbd, 0xf7, 0xf9, 0x7e,
	0x77, 0xde, 0xeb, 0x2c, 0x44, 0xac, 0x6e, 0xbe, 0x6a, 0xd0, 0xea, 0x9e, 0x4b, 0xb1, 0x55, 0xf2,
	0xab, 0x94, 0x53, 0x94, 0x51, 0x6b, 0x7d, 0xda, 0xa6, 0xd4, 0x76, 0x89, 0x81, 0x7d, 0xc7, 0xc0,
	0x9e, 0x47, 0x39, 0xe6, 0x0e, 0xf5, 0x58, 0x27, 0x4e, 0xdf, 0xb0, 0x1d, 0xbe, 0x5b, 0x2b, 0x97,
	0x4c, 0x5a, 0x31, 0x7c, 0xe2, 0x31, 0xec, 0x59, 0xd4, 0x60, 0x0d, 0xa3, 0x4e, 0x3c, 0xc7, 0x24,
	0x46, 0x8d, 0x3b, 0x2e, 0x13, 0xa9, 0x36, 0xf1, 0xc2, 0xd9, 0x86, 0xe3, 0x99, 0x6e, 0xcd, 0x22,
	0xaa, 0xcc, 0x62, 0xa8, 0x8c, 0x4d, 0x6d, 0x6a, 0xc8, 0xed, 0x72, 0xed, 0xb5, 0x5c, 0xc9, 0x85,
	0x7c, 0xea, 0x86, 0x2f, 0x5d, 0x40, 0x15, 0x1a, 0x5d, 0x5c, 0x26, 0x2e, 0x33, 0x18, 0x71, 0x89,
	0xc9, 0x69, 0xb5, 0x9b, 0x31, 0x41, 0x3c, 0xcb, 0xa7, 0x8e, 0xc7, 0xd5, 0xba, 0xdf, 0xaf, 0x3e,
	0x7f, 0x49, 0xc5, 0x0a, 0xe1, 0xb8, 0x13, 0x56, 0xf8, 0x0a, 0xa0, 0xbe, 0x56, 0xe3, 0x74, 0x93,
	0xd9, 0x1b, 0xdd, 0x82, 0x3b, 0x98, 0x9b, 0xbb, 0x8f, 0x89, 0xeb, 0x93, 0x2a, 0x7a, 0x00, 0xd3,
	0x1b, 0x75, 0xe2, 0x71, 0x96, 0x03, 0xb3, 0xc9, 0x62, 0x76, 0xc5, 0x28, 0x05, 0x98, 0x8b, 0xb3,
	0x4a, 0xf2, 0x59, 0xe6, 0xe9, 0xf7, 0x21, 0xec, 0xad, 0xd0, 0x18, 0x4c, 0x6d, 0xbf, 0xf5, 0x49,
	0x0e, 0xcc, 0x82, 0xe2, 0x15, 0x54, 0x80, 0xe9, 0xad, 0xf2, 0x1b, 0x62, 0xf2, 0xdc, 0xc8, 0x2c,
	0x28, 0x66, 0x57, 0x50, 0xaf, 0xb8, 0xaa, 0xba, 0x3a, 0x79, 0x72, 0xa8, 0x65, 0x1b, 0xa2, 0xc2,
	0xae, 0xac, 0x1d, 0x16, 0xbc, 0xd3, 0x8d, 0x1e, 0x4e, 0x70, 0x44, 0xd6, 0x3f, 0x10, 0xac, 0xaa,
	0x9e, 0x17, 0xfc, 0x1e, 0xc0, 0x31, 0x65, 0xe7, 0xa9, 0xc3, 0x38, 0x2a, 0x40, 0xb0, 0xdd, 0x2d,
	0x30, 0x5e, 0xc2, 0xbe, 0x53, 0x12, 0x84, 0x4d, 0xc2, 0xf1, 0x7a, 0xe6, 0xe8, 0x74, 0x26, 0x71,
	0x7c, 0x3a, 0x03, 0xd0, 0x2d, 0x98, 0x11, 0xb1, 0x62, 0x37, 0x97, 0x0c, 0x85, 0xaa, 0xcd, 0x50,
	0xe8, 0x4d, 0x38, 0xfa, 0x84, 0x93, 0x0a, 0xcb, 0xa5, 0xa4, 0xe1, 0xa8, 0x97, 0x38, 0x71, 0x72,
	0xa8, 0x41, 0xd7, 0x61, 0x3c, 0x24, 0x49, 0x09, 0xfe, 0xbf, 0x92, 0x82, 0xd7, 0xf4, 0x87, 0xa4,
	0x95, 0x1f, 0x59, 0x08, 0xd5, 0x8f, 0x2f, 0x97, 0xd1, 0x1e, 0x9c, 0x14, 0xc7, 0xb5, 0x66, 0x59,
	0xca, 0x04, 0x8a, 0x30, 0xa6, 0x47, 0xec, 0x15, 0x96, 0xda, 0x2d, 0x2d, 0x6d, 0x56, 0x09, 0xe6,
	0xe4, 0x5b, 0x4b, 0x03, 0x07, 0xdf, 0x7f, 0x7d, 0x1c, 0x99, 0x86, 0x89, 0x55, 0xb0, 0x50, 0x98,
	0x32, 0xde, 0x6d, 0x95, 0xb6, 0x89, 0x87, 0x3d, 0xbe, 0x6f, 0xa8, 0xf9, 0x61, 0x21, 0x98, 0x52,
	0x80, 0x22, 0x24, 0xeb, 0x11, 0x7b, 0xb1, 0x61, 0x2a, 0x93, 0xa1, 0x3a, 0x44, 0x02, 0xf6, 0x90,
	0xb8, 0x84, 0x93, 0xa1, 0xcd, 0xdd, 0x15, 0x3c, 0x4b, 0xe6, 0x06, 0xbc, 0x39, 0x98, 0x58, 0x4d,
	0x2c, 0xe4, 0x23, 0xbd, 0x89, 0xcd, 0x67, 0xb8, 0x42, 0xf6, 0xfb, 0xb9, 0x43, 0xfb, 0x8c, 0xc9,
	0x0d, 0x6c, 0xf6, 0xb8, 0x7e, 0xe7, 0xe5, 0x3e, 0x22, 0x7c, 0x68, 0xb3, 0x77, 0xda, 0x2d, 0x2d,
	0x69, 0x13, 0xde, 0x4f, 0x44, 0x83, 0x9c, 0xf6, 0x88, 0x43, 0xdb, 0x8c, 0x43, 0x8c, 0xf4, 0x78,
	0x55, 0x10, 0xc5, 0x24, 0x04, 0x26, 0xa7, 0x82, 0xe1, 0x90, 0x7f, 0x27, 0x5b, 0xbe, 0xbc, 0x26,
	0xf4, 0xeb, 0xe7, 0x7d, 0x8a, 0x98, 0xc2, 0x62, 0xbb, 0xa5, 0xa5, 0xc4, 0x3c, 0x04, 0xe8, 0x1b,
	0x12, 0x7d, 0x41, 0xcb, 0x86, 0x88, 0x81, 0xc9, 0xc1, 0xc4, 0xf0, 0xcc, 0xc7, 0x23, 0xf6, 0xfa,
	0xb6, 0xd1, 0xe9, 0x9f, 0x17, 0xbe, 0x85, 0xff, 0xa2, 0x6f, 0xef, 0x89, 0xfe, 0xa9, 0xc9, 0xdc,
	0x00, 0x37, 0x2f, 0xe7, 0x44, 0x1f, 0x74, 0x9c, 0x7d, 0xe0, 0xa1, 0x4f, 0x34, 0x2e, 0x38, 0xe2,
	0x54, 0x31, 0xbc, 0x26, 0xc0, 0x9d, 0xdb, 0x60, 0xc0, 0xb1, 0xce, 0xc5, 0xb9, 0x17, 0x0b, 0xe3,
	0xed, 0x96, 0x36, 0x2a, 0xef, 0x06, 0xa1, 0x65, 0x09, 0xf4, 0x21, 0x06, 0x9d, 0xe3, 0x5c, 0x9c,
	0x9b, 0xec, 0x1c, 0x42, 0x3f, 0x00, 0x1f, 0x9a, 0xda, 0x48, 0x7d, 0xf9, 0x53, 0x53, 0x0b, 0x3e,
	0x81, 0x3e, 0x37, 0xb5, 0x8c, 0xd2, 0x27, 0x9e, 0x55, 0xa1, 0x2f, 0x4d, 0xad, 0x08, 0x83, 0x5f,
	0x90, 0x98, 0x04, 0x94, 0xf4, 0x6b, 0x1c, 0x75, 0x47, 0x1f, 0xa5, 0x7c, 0xca, 0x38, 0x92, 0x5d,
	0xd3, 0x89, 0x0d, 0x44, 0x5f, 0x1a, 0xbb, 0x3e, 0x76, 0x74, 0x96, 0x07, 0xc7, 0x67, 0x79, 0xf0,
	0xf3, 0x2c, 0x0f, 0x9e, 0x83, 0x72, 0x5a, 0x7e, 0x7c, 0xdc, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xb8, 0x92, 0xf7, 0x7b, 0xa9, 0x09, 0x00, 0x00,
}
