// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package workloadCliUtilsBackend is a auto generated package.
Input file: svc_workload.proto
*/
package cli

import (
	"context"
	"fmt"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/workload"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/ncli/gen"
)

func restGetEndpoint(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Endpoint); ok {
		nv, err := restcl.WorkloadV1().Endpoint().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*workload.EndpointList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.WorkloadV1().Endpoint().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteEndpoint(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Endpoint); ok {
		nv, err := restcl.WorkloadV1().Endpoint().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostEndpoint(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Endpoint); ok {
		nv, err := restcl.WorkloadV1().Endpoint().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutEndpoint(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Endpoint); ok {
		nv, err := restcl.WorkloadV1().Endpoint().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetWorkload(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Workload); ok {
		nv, err := restcl.WorkloadV1().Workload().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*workload.WorkloadList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.WorkloadV1().Workload().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteWorkload(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Workload); ok {
		nv, err := restcl.WorkloadV1().Workload().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostWorkload(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Workload); ok {
		nv, err := restcl.WorkloadV1().Workload().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutWorkload(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*workload.Workload); ok {
		nv, err := restcl.WorkloadV1().Workload().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func init() {
	cl := gen.GetInfo()
	if cl == nil {
		return
	}

	cl.AddRestPostFunc("workload.Endpoint", "v1", restPostEndpoint)
	cl.AddRestDeleteFunc("workload.Endpoint", "v1", restDeleteEndpoint)
	cl.AddRestPutFunc("workload.Endpoint", "v1", restPutEndpoint)
	cl.AddRestGetFunc("workload.Endpoint", "v1", restGetEndpoint)

	cl.AddRestPostFunc("workload.Workload", "v1", restPostWorkload)
	cl.AddRestDeleteFunc("workload.Workload", "v1", restDeleteWorkload)
	cl.AddRestPutFunc("workload.Workload", "v1", restPutWorkload)
	cl.AddRestGetFunc("workload.Workload", "v1", restGetWorkload)

}
