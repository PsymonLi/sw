// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vrf.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import security "github.com/pensando/sw/api/generated/security"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type VirtualRouterSpec_VPCTypes int32

const (
	//
	VirtualRouterSpec_Unknown VirtualRouterSpec_VPCTypes = 0
	//
	VirtualRouterSpec_Tenant VirtualRouterSpec_VPCTypes = 1
	//
	VirtualRouterSpec_Infra VirtualRouterSpec_VPCTypes = 2
)

var VirtualRouterSpec_VPCTypes_name = map[int32]string{
	0: "Unknown",
	1: "Tenant",
	2: "Infra",
}
var VirtualRouterSpec_VPCTypes_value = map[string]int32{
	"Unknown": 0,
	"Tenant":  1,
	"Infra":   2,
}

func (VirtualRouterSpec_VPCTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorVrf, []int{1, 0}
}

// VirtualRouter - represents a forwarding instance. Could be multiple per tenant.
type VirtualRouter struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec VirtualRouterSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status VirtualRouterStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *VirtualRouter) Reset()                    { *m = VirtualRouter{} }
func (m *VirtualRouter) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouter) ProtoMessage()               {}
func (*VirtualRouter) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{0} }

func (m *VirtualRouter) GetSpec() VirtualRouterSpec {
	if m != nil {
		return m.Spec
	}
	return VirtualRouterSpec{}
}

func (m *VirtualRouter) GetStatus() VirtualRouterStatus {
	if m != nil {
		return m.Status
	}
	return VirtualRouterStatus{}
}

//
type VirtualRouterSpec struct {
	//
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,,proto3" json:"type,"`
	// Default Router MAC Address to use for this Virtual Router.
	RouterMACAddress string `protobuf:"bytes,2,opt,name=RouterMACAddress,json=router-mac-address,omitempty,proto3" json:"router-mac-address,omitempty"`
	// VxlAN VNI for the Virtual Router.
	VxLanVNI uint32 `protobuf:"varint,3,opt,name=VxLanVNI,json=vxlan-vni,omitempty,proto3" json:"vxlan-vni,omitempty"`
	// RouteImportExport specifies what routes will be imported to this Router and how routes are tagged when exported.
	RouteImportExport *RDSpec `protobuf:"bytes,4,opt,name=RouteImportExport,json=route-import-export,omitempty" json:"route-import-export,omitempty"`
	// Default IPAM policy for networks belonging to this Virtual Router. Any IPAM Policy specified in the Network overrides this.
	DefaultIPAMPolicy string `protobuf:"bytes,5,opt,name=DefaultIPAMPolicy,json=default-ipam-policy,omitempty,proto3" json:"default-ipam-policy,omitempty"`
}

func (m *VirtualRouterSpec) Reset()                    { *m = VirtualRouterSpec{} }
func (m *VirtualRouterSpec) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouterSpec) ProtoMessage()               {}
func (*VirtualRouterSpec) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{1} }

func (m *VirtualRouterSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VirtualRouterSpec) GetRouterMACAddress() string {
	if m != nil {
		return m.RouterMACAddress
	}
	return ""
}

func (m *VirtualRouterSpec) GetVxLanVNI() uint32 {
	if m != nil {
		return m.VxLanVNI
	}
	return 0
}

func (m *VirtualRouterSpec) GetRouteImportExport() *RDSpec {
	if m != nil {
		return m.RouteImportExport
	}
	return nil
}

func (m *VirtualRouterSpec) GetDefaultIPAMPolicy() string {
	if m != nil {
		return m.DefaultIPAMPolicy
	}
	return ""
}

//
type VirtualRouterStatus struct {
	// Handle allocated in the system.
	Handle uint64 `protobuf:"varint,1,opt,name=Handle,json=id,omitempty,proto3" json:"id,omitempty"`
	//
	RouteTable string `protobuf:"bytes,2,opt,name=RouteTable,json=route-table,omitempty,proto3" json:"route-table,omitempty"`
	//
	RD *RouteDistinguisher `protobuf:"bytes,3,opt,name=RD,json=rd,omitempty" json:"rd,omitempty"`
	// The status of the configuration propagation to the Naples
	PropagationStatus security.PropagationStatus `protobuf:"bytes,4,opt,name=PropagationStatus,json=propagation-status" json:"propagation-status"`
}

func (m *VirtualRouterStatus) Reset()                    { *m = VirtualRouterStatus{} }
func (m *VirtualRouterStatus) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouterStatus) ProtoMessage()               {}
func (*VirtualRouterStatus) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{2} }

func (m *VirtualRouterStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *VirtualRouterStatus) GetRouteTable() string {
	if m != nil {
		return m.RouteTable
	}
	return ""
}

func (m *VirtualRouterStatus) GetRD() *RouteDistinguisher {
	if m != nil {
		return m.RD
	}
	return nil
}

func (m *VirtualRouterStatus) GetPropagationStatus() security.PropagationStatus {
	if m != nil {
		return m.PropagationStatus
	}
	return security.PropagationStatus{}
}

func init() {
	proto.RegisterType((*VirtualRouter)(nil), "network.VirtualRouter")
	proto.RegisterType((*VirtualRouterSpec)(nil), "network.VirtualRouterSpec")
	proto.RegisterType((*VirtualRouterStatus)(nil), "network.VirtualRouterStatus")
	proto.RegisterEnum("network.VirtualRouterSpec_VPCTypes", VirtualRouterSpec_VPCTypes_name, VirtualRouterSpec_VPCTypes_value)
}
func (m *VirtualRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *VirtualRouterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVrf(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.RouterMACAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(len(m.RouterMACAddress)))
		i += copy(dAtA[i:], m.RouterMACAddress)
	}
	if m.VxLanVNI != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.VxLanVNI))
	}
	if m.RouteImportExport != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.RouteImportExport.Size()))
		n5, err := m.RouteImportExport.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.DefaultIPAMPolicy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(len(m.DefaultIPAMPolicy)))
		i += copy(dAtA[i:], m.DefaultIPAMPolicy)
	}
	return i, nil
}

func (m *VirtualRouterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.Handle))
	}
	if len(m.RouteTable) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVrf(dAtA, i, uint64(len(m.RouteTable)))
		i += copy(dAtA[i:], m.RouteTable)
	}
	if m.RD != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVrf(dAtA, i, uint64(m.RD.Size()))
		n6, err := m.RD.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.PropagationStatus.Size()))
	n7, err := m.PropagationStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintVrf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VirtualRouter) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovVrf(uint64(l))
	return n
}

func (m *VirtualRouterSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	l = len(m.RouterMACAddress)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.VxLanVNI != 0 {
		n += 1 + sovVrf(uint64(m.VxLanVNI))
	}
	if m.RouteImportExport != nil {
		l = m.RouteImportExport.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	l = len(m.DefaultIPAMPolicy)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	return n
}

func (m *VirtualRouterStatus) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovVrf(uint64(m.Handle))
	}
	l = len(m.RouteTable)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.RD != nil {
		l = m.RD.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	l = m.PropagationStatus.Size()
	n += 1 + l + sovVrf(uint64(l))
	return n
}

func sovVrf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVrf(x uint64) (n int) {
	return sovVrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterMACAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterMACAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxLanVNI", wireType)
			}
			m.VxLanVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxLanVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteImportExport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteImportExport == nil {
				m.RouteImportExport = &RDSpec{}
			}
			if err := m.RouteImportExport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultIPAMPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultIPAMPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RD == nil {
				m.RD = &RouteDistinguisher{}
			}
			if err := m.RD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropagationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVrf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVrf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVrf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vrf.proto", fileDescriptorVrf) }

var fileDescriptorVrf = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc6, 0x69, 0xf8, 0x35, 0x14, 0x36, 0x0c, 0x6d, 0x95, 0xb0, 0x10, 0x77, 0xa9, 0x2a, 0x05,
	0x09, 0xdb, 0xfb, 0x43, 0x05, 0x69, 0x6f, 0x18, 0xd2, 0x36, 0x52, 0x59, 0x22, 0x43, 0x69, 0xd5,
	0xdb, 0xc4, 0x9e, 0x78, 0xa7, 0xd8, 0x33, 0xd6, 0x78, 0x1c, 0x88, 0xaa, 0x3d, 0x36, 0x7f, 0xc8,
	0x1e, 0xf9, 0x37, 0x7a, 0xe1, 0xb8, 0xea, 0xbd, 0x56, 0xc5, 0xa9, 0xca, 0x5f, 0x51, 0xcd, 0x8c,
	0x29, 0x4e, 0x93, 0xe5, 0x92, 0xf8, 0xcd, 0xfb, 0xde, 0xf7, 0xbe, 0x99, 0x6f, 0xde, 0x80, 0xe5,
	0x01, 0xef, 0xdb, 0x09, 0x67, 0x82, 0xc1, 0x45, 0x8a, 0xc5, 0x15, 0xe3, 0x97, 0x9b, 0x5b, 0x21,
	0x63, 0x61, 0x84, 0x1d, 0x94, 0x10, 0x07, 0x51, 0xca, 0x04, 0x12, 0x84, 0xd1, 0x54, 0xc3, 0x36,
	0xdb, 0x21, 0x11, 0x6f, 0xb3, 0x9e, 0xed, 0xb3, 0xd8, 0x49, 0x30, 0x4d, 0x11, 0x0d, 0x98, 0x93,
	0x5e, 0x39, 0x03, 0x4c, 0x89, 0x8f, 0x9d, 0x4c, 0x90, 0x28, 0x95, 0xa5, 0x21, 0xa6, 0xe5, 0x6a,
	0x87, 0x50, 0x3f, 0xca, 0x02, 0x7c, 0x4f, 0x63, 0x95, 0x68, 0x42, 0x16, 0x32, 0x47, 0x2d, 0xf7,
	0xb2, 0xbe, 0x8a, 0x54, 0xa0, 0xbe, 0x0a, 0xf8, 0xd7, 0x1f, 0xe9, 0x2a, 0x35, 0xc6, 0x58, 0xa0,
	0x02, 0xb6, 0xc2, 0x59, 0x26, 0x70, 0x11, 0x00, 0x92, 0xa0, 0xb8, 0xf8, 0x5e, 0x4b, 0xc3, 0x84,
	0x45, 0xc4, 0x1f, 0xea, 0x78, 0x27, 0xaf, 0x80, 0xd5, 0x0b, 0xc2, 0x45, 0x86, 0x22, 0x4f, 0x96,
	0x70, 0xb8, 0x0f, 0x8c, 0xf3, 0xba, 0xf1, 0xa5, 0xd1, 0x5a, 0x79, 0xb9, 0x6a, 0xa3, 0x84, 0xd8,
	0xe7, 0xc3, 0x04, 0x9f, 0x60, 0x81, 0xdc, 0x8d, 0xdb, 0xdc, 0x9c, 0xfb, 0x90, 0x9b, 0xc6, 0x38,
	0x37, 0x17, 0xf7, 0x08, 0x8d, 0x08, 0xc5, 0xde, 0xfd, 0x07, 0xfc, 0x16, 0x18, 0xa7, 0xf5, 0x8a,
	0xaa, 0x7b, 0xa2, 0xea, 0x4e, 0x7b, 0xbf, 0x62, 0x5f, 0xa8, 0xca, 0xcd, 0x52, 0xe5, 0x9a, 0x94,
	0xb9, 0xc7, 0x62, 0x22, 0x70, 0x9c, 0x88, 0xa1, 0xf7, 0xbf, 0x18, 0x76, 0x41, 0xf5, 0x2c, 0xc1,
	0x7e, 0xfd, 0x13, 0x45, 0xb5, 0x69, 0x17, 0x6e, 0xd8, 0x13, 0x2a, 0x25, 0xc2, 0xfd, 0x42, 0xb2,
	0x4a, 0xc6, 0x34, 0xc1, 0x7e, 0x99, 0x71, 0x32, 0x86, 0x3f, 0x83, 0x85, 0x33, 0x81, 0x44, 0x96,
	0xd6, 0xab, 0x8a, 0x73, 0xeb, 0x23, 0x9c, 0x0a, 0xe3, 0xd6, 0x0b, 0xd6, 0x5a, 0xaa, 0xe2, 0x12,
	0xef, 0xd4, 0xca, 0xeb, 0x67, 0x7f, 0xfe, 0xde, 0xd8, 0x06, 0x2b, 0xce, 0x6f, 0xa7, 0xf6, 0x39,
	0xa6, 0x88, 0x8a, 0x77, 0x70, 0x6d, 0xa0, 0x39, 0x95, 0x01, 0x3c, 0xdd, 0xf9, 0xa3, 0x0a, 0xd6,
	0xa7, 0xa4, 0xc3, 0x36, 0xa8, 0xca, 0x63, 0x55, 0xe7, 0xbc, 0xec, 0x3e, 0xbf, 0x19, 0x35, 0xbe,
	0x3a, 0x13, 0xbc, 0x4d, 0xb3, 0xb8, 0x35, 0x05, 0xb6, 0x2f, 0xba, 0x47, 0x12, 0x9c, 0xee, 0x8e,
	0x73, 0x73, 0x5e, 0x0c, 0x13, 0xbc, 0xe7, 0xe9, 0x3f, 0x48, 0x41, 0x4d, 0xe3, 0x4e, 0x0e, 0x8f,
	0x0e, 0x83, 0x80, 0xe3, 0x34, 0x55, 0x16, 0x2c, 0xbb, 0xfb, 0x37, 0xa3, 0x06, 0x6c, 0x4b, 0x91,
	0xa7, 0xbc, 0x75, 0x82, 0x7c, 0x99, 0x6d, 0xed, 0x4a, 0x86, 0x2d, 0xad, 0xcc, 0x8a, 0x91, 0x6f,
	0x21, 0x5d, 0x53, 0xda, 0xe3, 0xa3, 0x59, 0xf8, 0x0b, 0x58, 0xba, 0xb8, 0xfe, 0x01, 0xd1, 0x8b,
	0x37, 0x1d, 0xe5, 0xcf, 0xaa, 0xfb, 0xea, 0x66, 0xd4, 0xf8, 0xac, 0x43, 0x85, 0x87, 0x68, 0x88,
	0x5b, 0xcf, 0xf7, 0x5e, 0xec, 0x1f, 0x1c, 0x1c, 0xbc, 0x7c, 0xf1, 0xcd, 0xee, 0xad, 0x76, 0x7b,
	0x63, 0x70, 0x1d, 0x21, 0x6a, 0x0d, 0x28, 0x29, 0x35, 0x99, 0xb5, 0x08, 0x23, 0xb0, 0xae, 0xf6,
	0xd2, 0x89, 0x13, 0xc6, 0x45, 0xfb, 0x5a, 0xfe, 0x16, 0x86, 0x3d, 0xf9, 0xcf, 0x30, 0xef, 0x58,
	0x39, 0xff, 0x6c, 0x9c, 0x9b, 0xdb, 0x4a, 0xa9, 0x45, 0x14, 0xdc, 0xc2, 0x0a, 0x5f, 0xea, 0xf1,
	0x78, 0x1a, 0xbe, 0x03, 0xeb, 0xc7, 0xb8, 0x8f, 0xb2, 0x48, 0x74, 0xba, 0x87, 0x27, 0x5d, 0x35,
	0x12, 0xf5, 0x79, 0x75, 0x74, 0x47, 0xef, 0x47, 0x8d, 0x26, 0x58, 0x7a, 0x83, 0x62, 0x1c, 0x78,
	0xb8, 0x0f, 0x61, 0xd1, 0xdc, 0x79, 0x40, 0xca, 0xf6, 0x81, 0x2e, 0xb7, 0xe4, 0x70, 0x59, 0x7a,
	0xa6, 0xca, 0xed, 0x1f, 0x4d, 0xef, 0xd8, 0x60, 0xe9, 0xde, 0x55, 0xb8, 0x02, 0x16, 0x7f, 0xa4,
	0x97, 0x94, 0x5d, 0xd1, 0xda, 0x1c, 0x04, 0x60, 0x41, 0xdf, 0xa4, 0x9a, 0x01, 0x97, 0xc1, 0x7c,
	0x87, 0xf6, 0x39, 0xaa, 0x55, 0x76, 0xfe, 0xaa, 0x80, 0x8d, 0x19, 0x97, 0x15, 0xda, 0x60, 0xe1,
	0x7b, 0x44, 0x83, 0x48, 0xdf, 0xa4, 0xaa, 0x5b, 0x1b, 0xe7, 0xe6, 0xa7, 0x24, 0x28, 0x09, 0x99,
	0x88, 0x20, 0x06, 0x40, 0xd5, 0x9f, 0xa3, 0x5e, 0x84, 0x8b, 0xab, 0xf2, 0xfa, 0xfd, 0xa8, 0xb1,
	0x0d, 0x16, 0x7f, 0xc2, 0xe8, 0x72, 0x62, 0xbb, 0x0f, 0xc0, 0x71, 0x6e, 0x7e, 0xae, 0x8f, 0x53,
	0xc8, 0xb0, 0xc4, 0x3e, 0x7b, 0x19, 0x7e, 0x07, 0x2a, 0xde, 0x71, 0x31, 0xc1, 0x4f, 0x1f, 0xcc,
	0x93, 0xd8, 0x63, 0x92, 0x0a, 0x42, 0xc3, 0x8c, 0xa4, 0x6f, 0x31, 0xd7, 0x7a, 0xf9, 0x84, 0xde,
	0x72, 0x04, 0xfb, 0x60, 0xbd, 0xcb, 0x59, 0x82, 0x42, 0xf5, 0x78, 0x4e, 0x4c, 0xf1, 0x53, 0x3b,
	0xc5, 0x7e, 0xc6, 0x89, 0x18, 0xda, 0x53, 0x10, 0xfd, 0xe0, 0x8c, 0x73, 0x13, 0x26, 0x0f, 0x29,
	0x4b, 0x8f, 0xaf, 0x37, 0x63, 0xcd, 0xad, 0xdd, 0xde, 0x35, 0x8d, 0x0f, 0x77, 0x4d, 0xe3, 0xef,
	0xbb, 0xa6, 0xf1, 0xcf, 0x5d, 0x73, 0xae, 0x6b, 0xf4, 0x16, 0xd4, 0x0b, 0xf9, 0xea, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x72, 0x06, 0x30, 0xbe, 0x1b, 0x06, 0x00, 0x00,
}
