// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vrf.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// VirtualRouter - represents a forwarding instance. Could be multiple per tenant.
type VirtualRouter struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec VirtualRouterSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status VirtualRouterStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *VirtualRouter) Reset()                    { *m = VirtualRouter{} }
func (m *VirtualRouter) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouter) ProtoMessage()               {}
func (*VirtualRouter) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{0} }

func (m *VirtualRouter) GetSpec() VirtualRouterSpec {
	if m != nil {
		return m.Spec
	}
	return VirtualRouterSpec{}
}

func (m *VirtualRouter) GetStatus() VirtualRouterStatus {
	if m != nil {
		return m.Status
	}
	return VirtualRouterStatus{}
}

//
type VirtualRouterSpec struct {
}

func (m *VirtualRouterSpec) Reset()                    { *m = VirtualRouterSpec{} }
func (m *VirtualRouterSpec) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouterSpec) ProtoMessage()               {}
func (*VirtualRouterSpec) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{1} }

//
type VirtualRouterStatus struct {
}

func (m *VirtualRouterStatus) Reset()                    { *m = VirtualRouterStatus{} }
func (m *VirtualRouterStatus) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouterStatus) ProtoMessage()               {}
func (*VirtualRouterStatus) Descriptor() ([]byte, []int) { return fileDescriptorVrf, []int{2} }

func init() {
	proto.RegisterType((*VirtualRouter)(nil), "network.VirtualRouter")
	proto.RegisterType((*VirtualRouterSpec)(nil), "network.VirtualRouterSpec")
	proto.RegisterType((*VirtualRouterStatus)(nil), "network.VirtualRouterStatus")
}
func (m *VirtualRouter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintVrf(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *VirtualRouterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VirtualRouterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintVrf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VirtualRouter) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovVrf(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovVrf(uint64(l))
	return n
}

func (m *VirtualRouterSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VirtualRouterStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovVrf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVrf(x uint64) (n int) {
	return sovVrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualRouter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVrf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVrf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVrf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVrf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vrf.proto", fileDescriptorVrf) }

var fileDescriptorVrf = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0xab, 0xd3, 0x40,
	0x14, 0x85, 0xdf, 0x3c, 0x1f, 0xaf, 0x38, 0xa5, 0xb5, 0xa6, 0x28, 0x31, 0xd4, 0x54, 0x0b, 0x82,
	0x8b, 0x9a, 0x01, 0x05, 0x17, 0x2e, 0x0b, 0xba, 0x93, 0x96, 0xb6, 0x88, 0xdb, 0x49, 0x7a, 0x1b,
	0x47, 0x93, 0x99, 0x21, 0x73, 0xd3, 0x52, 0xc4, 0xa5, 0xff, 0xad, 0xcb, 0xe2, 0x0f, 0x08, 0x92,
	0x95, 0xf8, 0x2b, 0x24, 0xd3, 0x16, 0x52, 0xfb, 0xba, 0xbb, 0xe7, 0x72, 0xce, 0x77, 0x0f, 0x33,
	0xf4, 0xfe, 0x2a, 0x5b, 0x06, 0x3a, 0x53, 0xa8, 0x9c, 0x86, 0x04, 0x5c, 0xab, 0xec, 0x9b, 0xd7,
	0x8b, 0x95, 0x8a, 0x13, 0x60, 0x5c, 0x0b, 0xc6, 0xa5, 0x54, 0xc8, 0x51, 0x28, 0x69, 0xf6, 0x36,
	0xef, 0x7d, 0x2c, 0xf0, 0x4b, 0x1e, 0x06, 0x91, 0x4a, 0x99, 0x06, 0x69, 0xb8, 0x5c, 0x28, 0x66,
	0xd6, 0x6c, 0x05, 0x52, 0x44, 0xc0, 0x72, 0x14, 0x89, 0xa9, 0xa2, 0x31, 0xc8, 0x7a, 0x9a, 0x09,
	0x19, 0x25, 0xf9, 0x02, 0x8e, 0x98, 0x57, 0x35, 0x4c, 0xac, 0x62, 0xc5, 0xec, 0x3a, 0xcc, 0x97,
	0x56, 0x59, 0x61, 0xa7, 0x83, 0xfd, 0xc5, 0x85, 0xab, 0x55, 0xc7, 0x14, 0x90, 0xef, 0x6d, 0x83,
	0xe2, 0x9a, 0xb6, 0x3e, 0x89, 0x0c, 0x73, 0x9e, 0x4c, 0x55, 0x8e, 0x90, 0x39, 0x6f, 0x29, 0x99,
	0xbb, 0xe4, 0x19, 0x79, 0xd9, 0x7c, 0xdd, 0x0a, 0xb8, 0x16, 0xc1, 0x7c, 0xa3, 0xe1, 0x23, 0x20,
	0x1f, 0x75, 0xb7, 0x45, 0xff, 0x6a, 0x57, 0xf4, 0xc9, 0xdf, 0xa2, 0xdf, 0x18, 0x0a, 0x99, 0x08,
	0x09, 0xd3, 0xe3, 0xe0, 0x7c, 0xa0, 0x64, 0xec, 0x5e, 0xdb, 0xdc, 0x03, 0x9b, 0x1b, 0x87, 0x5f,
	0x21, 0x42, 0x9b, 0xf4, 0x6a, 0xc9, 0x76, 0x75, 0x7d, 0xa8, 0x52, 0x81, 0x90, 0x6a, 0xdc, 0x4c,
	0xff, 0xd3, 0xce, 0x84, 0xde, 0xcc, 0x34, 0x44, 0xee, 0x3d, 0x8b, 0xf2, 0x82, 0xc3, 0x23, 0x07,
	0x27, 0x2d, 0x2b, 0xc7, 0xe8, 0x71, 0x45, 0xad, 0x88, 0x46, 0x43, 0x54, 0x27, 0x9e, 0x6a, 0xe7,
	0x33, 0xbd, 0x9d, 0x21, 0xc7, 0xdc, 0xb8, 0x37, 0x96, 0xd9, 0xbb, 0xc0, 0xb4, 0x9e, 0x91, 0x7b,
	0xa0, 0x76, 0x8c, 0xd5, 0x35, 0xee, 0xd9, 0xe6, 0xdd, 0xf3, 0x5f, 0x3f, 0x9f, 0x3c, 0xa5, 0x4d,
	0xf6, 0x7d, 0x1c, 0xcc, 0x41, 0x72, 0x89, 0x3f, 0x9c, 0xf6, 0x6a, 0xcf, 0xcc, 0x2c, 0xd3, 0x0c,
	0xba, 0xf4, 0xe1, 0x59, 0xf3, 0xc1, 0x23, 0xda, 0xbd, 0xeb, 0x74, 0x67, 0x5b, 0xfa, 0x64, 0x57,
	0xfa, 0xe4, 0x77, 0xe9, 0x93, 0x3f, 0xa5, 0x7f, 0x35, 0x21, 0xe1, 0xad, 0xfd, 0xa7, 0x37, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xc4, 0xcb, 0xf8, 0x78, 0x02, 0x00, 0x00,
}
