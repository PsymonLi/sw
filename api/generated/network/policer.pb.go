// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: policer.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/cluster"
import security "github.com/pensando/sw/api/generated/security"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type PolicerAction_Action int32

const (
	//
	PolicerAction_DROP PolicerAction_Action = 0
)

var PolicerAction_Action_name = map[int32]string{
	0: "DROP",
}
var PolicerAction_Action_value = map[string]int32{
	"DROP": 0,
}

func (PolicerAction_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorPolicer, []int{0, 0}
}

//
type PolicerAction struct {
	//
	PolicerAction string `protobuf:"bytes,1,opt,name=PolicerAction,json=policer-action,omitempty,proto3" json:"policer-action,omitempty"`
}

func (m *PolicerAction) Reset()                    { *m = PolicerAction{} }
func (m *PolicerAction) String() string            { return proto.CompactTextString(m) }
func (*PolicerAction) ProtoMessage()               {}
func (*PolicerAction) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{0} }

func (m *PolicerAction) GetPolicerAction() string {
	if m != nil {
		return m.PolicerAction
	}
	return ""
}

//
type PolicerCriteria struct {
	// Maximum permissible bytes per second before policer will start dropping traffic. Either BytesPerSecond/PacketsPerSecond can be specified
	BytesPerSecond uint64 `protobuf:"varint,1,opt,name=BytesPerSecond,json=bytes-per-second,omitempty,proto3" json:"bytes-per-second,omitempty"`
	// Maximum permissible packets per second before policer will start dropping traffic. Either BytesPerSecond/PacketsPerSecond can be specified
	PacketsPerSecond uint64 `protobuf:"varint,2,opt,name=PacketsPerSecond,json=packets-per-second,omitempty,proto3" json:"packets-per-second,omitempty"`
	// Burst size in number of packets/bytes as policer criteria
	BurstSize uint64 `protobuf:"varint,3,opt,name=BurstSize,json=burst-size,omitempty,proto3" json:"burst-size,omitempty"`
}

func (m *PolicerCriteria) Reset()                    { *m = PolicerCriteria{} }
func (m *PolicerCriteria) String() string            { return proto.CompactTextString(m) }
func (*PolicerCriteria) ProtoMessage()               {}
func (*PolicerCriteria) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{1} }

func (m *PolicerCriteria) GetBytesPerSecond() uint64 {
	if m != nil {
		return m.BytesPerSecond
	}
	return 0
}

func (m *PolicerCriteria) GetPacketsPerSecond() uint64 {
	if m != nil {
		return m.PacketsPerSecond
	}
	return 0
}

func (m *PolicerCriteria) GetBurstSize() uint64 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

// PolicerProfile
type PolicerProfile struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the Traffic Policer
	Spec PolicerProfileSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	// Status contains the current state of the Traffic Policer
	Status PolicerProfileStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *PolicerProfile) Reset()                    { *m = PolicerProfile{} }
func (m *PolicerProfile) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfile) ProtoMessage()               {}
func (*PolicerProfile) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{2} }

func (m *PolicerProfile) GetSpec() PolicerProfileSpec {
	if m != nil {
		return m.Spec
	}
	return PolicerProfileSpec{}
}

func (m *PolicerProfile) GetStatus() PolicerProfileStatus {
	if m != nil {
		return m.Status
	}
	return PolicerProfileStatus{}
}

//
type PolicerProfileSpec struct {
	// Traffic Policer Criteria
	Criteria PolicerCriteria `protobuf:"bytes,1,opt,name=Criteria,json=criteria" json:"criteria"`
	// Traffc Policer Action
	ExceedAction PolicerAction `protobuf:"bytes,2,opt,name=ExceedAction,json=exceed-action" json:"exceed-action"`
}

func (m *PolicerProfileSpec) Reset()                    { *m = PolicerProfileSpec{} }
func (m *PolicerProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileSpec) ProtoMessage()               {}
func (*PolicerProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{3} }

func (m *PolicerProfileSpec) GetCriteria() PolicerCriteria {
	if m != nil {
		return m.Criteria
	}
	return PolicerCriteria{}
}

func (m *PolicerProfileSpec) GetExceedAction() PolicerAction {
	if m != nil {
		return m.ExceedAction
	}
	return PolicerAction{}
}

//
type PolicerProfileStatus struct {
	// The status of the configuration propagation to the Naples
	PropagationStatus security.PropagationStatus `protobuf:"bytes,1,opt,name=PropagationStatus,json=propagation-status" json:"propagation-status"`
}

func (m *PolicerProfileStatus) Reset()                    { *m = PolicerProfileStatus{} }
func (m *PolicerProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*PolicerProfileStatus) ProtoMessage()               {}
func (*PolicerProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptorPolicer, []int{4} }

func (m *PolicerProfileStatus) GetPropagationStatus() security.PropagationStatus {
	if m != nil {
		return m.PropagationStatus
	}
	return security.PropagationStatus{}
}

func init() {
	proto.RegisterType((*PolicerAction)(nil), "network.PolicerAction")
	proto.RegisterType((*PolicerCriteria)(nil), "network.PolicerCriteria")
	proto.RegisterType((*PolicerProfile)(nil), "network.PolicerProfile")
	proto.RegisterType((*PolicerProfileSpec)(nil), "network.PolicerProfileSpec")
	proto.RegisterType((*PolicerProfileStatus)(nil), "network.PolicerProfileStatus")
	proto.RegisterEnum("network.PolicerAction_Action", PolicerAction_Action_name, PolicerAction_Action_value)
}
func (m *PolicerAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PolicerAction) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(len(m.PolicerAction)))
		i += copy(dAtA[i:], m.PolicerAction)
	}
	return i, nil
}

func (m *PolicerCriteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerCriteria) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BytesPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.BytesPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.PacketsPerSecond))
	}
	if m.BurstSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPolicer(dAtA, i, uint64(m.BurstSize))
	}
	return i, nil
}

func (m *PolicerProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *PolicerProfileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.Criteria.Size()))
	n5, err := m.Criteria.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.ExceedAction.Size()))
	n6, err := m.ExceedAction.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *PolicerProfileStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicerProfileStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPolicer(dAtA, i, uint64(m.PropagationStatus.Size()))
	n7, err := m.PropagationStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintPolicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PolicerAction) Size() (n int) {
	var l int
	_ = l
	l = len(m.PolicerAction)
	if l > 0 {
		n += 1 + l + sovPolicer(uint64(l))
	}
	return n
}

func (m *PolicerCriteria) Size() (n int) {
	var l int
	_ = l
	if m.BytesPerSecond != 0 {
		n += 1 + sovPolicer(uint64(m.BytesPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		n += 1 + sovPolicer(uint64(m.PacketsPerSecond))
	}
	if m.BurstSize != 0 {
		n += 1 + sovPolicer(uint64(m.BurstSize))
	}
	return n
}

func (m *PolicerProfile) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func (m *PolicerProfileSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Criteria.Size()
	n += 1 + l + sovPolicer(uint64(l))
	l = m.ExceedAction.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func (m *PolicerProfileStatus) Size() (n int) {
	var l int
	_ = l
	l = m.PropagationStatus.Size()
	n += 1 + l + sovPolicer(uint64(l))
	return n
}

func sovPolicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPolicer(x uint64) (n int) {
	return sovPolicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicerAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicerAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerCriteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerCriteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerCriteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesPerSecond", wireType)
			}
			m.BytesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsPerSecond", wireType)
			}
			m.PacketsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurstSize", wireType)
			}
			m.BurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurstSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Criteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceedAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExceedAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicerProfileStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicerProfileStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicerProfileStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPolicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropagationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPolicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPolicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPolicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPolicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPolicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPolicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPolicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPolicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPolicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPolicer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("policer.proto", fileDescriptorPolicer) }

var fileDescriptorPolicer = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0x7b, 0xa3, 0xfe, 0x4c, 0x9a, 0x34, 0x77, 0x6e, 0xef, 0x55, 0x9a, 0xdb, 0xc6, 0x55,
	0x24, 0xa4, 0x22, 0x35, 0x36, 0x2a, 0x12, 0x0b, 0xa4, 0x2e, 0x6a, 0x68, 0x77, 0x28, 0x91, 0xd3,
	0x05, 0x2c, 0x9d, 0xc9, 0xa9, 0x19, 0xea, 0xcc, 0x8c, 0x3c, 0x63, 0x4a, 0x8a, 0x60, 0x81, 0x04,
	0x2f, 0xc0, 0x5b, 0xb0, 0xe2, 0x31, 0xba, 0x42, 0x15, 0x0f, 0x60, 0xa1, 0xac, 0x50, 0x9e, 0x02,
	0x79, 0x3c, 0x01, 0x37, 0x4d, 0xbb, 0x49, 0xe6, 0x9c, 0xef, 0x9c, 0x6f, 0xbe, 0xf3, 0x79, 0x66,
	0x50, 0x45, 0xf0, 0x88, 0x12, 0x88, 0x1d, 0x11, 0x73, 0xc5, 0xf1, 0x32, 0x03, 0x75, 0xce, 0xe3,
	0xb3, 0xc6, 0x56, 0xc8, 0x79, 0x18, 0x81, 0x1b, 0x08, 0xea, 0x06, 0x8c, 0x71, 0x15, 0x28, 0xca,
	0x99, 0xcc, 0xcb, 0x1a, 0x47, 0x21, 0x55, 0x2f, 0x93, 0xbe, 0x43, 0xf8, 0xd0, 0x15, 0xc0, 0x64,
	0xc0, 0x06, 0xdc, 0x95, 0xe7, 0xee, 0x6b, 0x60, 0x94, 0x80, 0x9b, 0x28, 0x1a, 0xc9, 0xac, 0x35,
	0x04, 0x56, 0xec, 0x76, 0x29, 0x23, 0x51, 0x32, 0x80, 0x29, 0x4d, 0xbb, 0x40, 0x13, 0xf2, 0x90,
	0xbb, 0x3a, 0xdd, 0x4f, 0x4e, 0x75, 0xa4, 0x03, 0xbd, 0x32, 0xe5, 0xf7, 0x6e, 0xd9, 0x35, 0xd3,
	0x38, 0x04, 0x15, 0x98, 0xb2, 0x07, 0x77, 0x94, 0x45, 0x41, 0x1f, 0x22, 0xe9, 0x4a, 0x88, 0x80,
	0x28, 0x6e, 0xa6, 0x6e, 0xac, 0x29, 0x60, 0x01, 0x53, 0x26, 0xaa, 0xca, 0x50, 0x9b, 0x32, 0xca,
	0xe3, 0xd6, 0x67, 0x0b, 0x55, 0xba, 0xb9, 0x4b, 0x87, 0x24, 0x9b, 0x03, 0xb3, 0x99, 0x44, 0xdd,
	0xda, 0xb1, 0x76, 0x57, 0xbd, 0x83, 0x2f, 0x9f, 0x36, 0xb7, 0x7b, 0x2a, 0x3e, 0x62, 0xc9, 0x70,
	0xf7, 0x5a, 0x81, 0x93, 0xff, 0xdd, 0x9f, 0xa4, 0x76, 0xdd, 0x18, 0xde, 0x0e, 0x74, 0x6a, 0x8f,
	0x0f, 0xa9, 0x82, 0xa1, 0x50, 0x23, 0xff, 0x56, 0xa4, 0x85, 0xd1, 0x92, 0xd9, 0x79, 0x05, 0x95,
	0x9e, 0xfa, 0x9d, 0x6e, 0x6d, 0xa1, 0xf5, 0x61, 0x11, 0xad, 0x9b, 0x3d, 0x9e, 0xc4, 0x54, 0x41,
	0x4c, 0x03, 0xec, 0xa3, 0xaa, 0x37, 0x52, 0x20, 0xbb, 0x10, 0xf7, 0x80, 0x70, 0x36, 0xd0, 0xc2,
	0x4a, 0x5e, 0x73, 0x92, 0xda, 0x8d, 0x7e, 0x86, 0xb4, 0x05, 0xc4, 0x6d, 0xa9, 0xb1, 0xc2, 0xce,
	0x77, 0x60, 0xf8, 0x39, 0xaa, 0x75, 0x03, 0x72, 0x06, 0xaa, 0xc0, 0xba, 0xa8, 0x59, 0x77, 0x26,
	0xa9, 0xbd, 0x25, 0x72, 0x6c, 0x3e, 0xef, 0x9d, 0x28, 0x3e, 0x44, 0xab, 0x5e, 0x12, 0x4b, 0xd5,
	0xa3, 0x17, 0x50, 0xff, 0x4b, 0x53, 0xd6, 0x27, 0xa9, 0xbd, 0xd1, 0xcf, 0x92, 0x6d, 0x49, 0x2f,
	0xa0, 0x40, 0x35, 0x37, 0xdb, 0xfa, 0xb6, 0x88, 0xaa, 0xc6, 0x84, 0x6e, 0xcc, 0x4f, 0x69, 0x04,
	0xf8, 0x11, 0xb2, 0x4e, 0xf4, 0xd8, 0xe5, 0xfd, 0x8a, 0x13, 0x08, 0xea, 0x9c, 0x8c, 0x04, 0x3c,
	0x03, 0x15, 0x78, 0xff, 0x5c, 0xa6, 0xf6, 0xc2, 0x55, 0x6a, 0x5b, 0x93, 0xd4, 0x5e, 0xde, 0xa3,
	0x2c, 0xa2, 0x0c, 0xfc, 0xe9, 0x02, 0x1f, 0x23, 0xab, 0xa3, 0x07, 0x2b, 0xef, 0xaf, 0xeb, 0xbe,
	0x4e, 0xff, 0x15, 0x10, 0xa5, 0x3b, 0x1b, 0x85, 0xce, 0x6a, 0x76, 0xd2, 0x0a, 0xc2, 0x66, 0x62,
	0x7c, 0x80, 0x4a, 0x3d, 0x01, 0x44, 0x0f, 0x54, 0xde, 0xff, 0xdf, 0x31, 0x17, 0xca, 0xb9, 0x2e,
	0x33, 0x2b, 0xf1, 0xd6, 0x32, 0xda, 0x49, 0x6a, 0x97, 0xa4, 0x00, 0xe2, 0xeb, 0x5f, 0xfc, 0x02,
	0x2d, 0xf5, 0x54, 0xa0, 0x12, 0x59, 0x2f, 0x69, 0x82, 0xed, 0xdb, 0x08, 0x74, 0x91, 0x57, 0x37,
	0x14, 0x35, 0xa9, 0xe3, 0x82, 0xae, 0x1b, 0x99, 0xc7, 0xad, 0xef, 0x1f, 0x37, 0x9b, 0xa8, 0xec,
	0xbe, 0xed, 0x38, 0x27, 0xfa, 0xbc, 0xbf, 0xc3, 0xeb, 0xd3, 0x23, 0x27, 0x72, 0xd6, 0xd6, 0x57,
	0x0b, 0xe1, 0x9b, 0x4a, 0xf1, 0x31, 0x5a, 0x99, 0x1e, 0x32, 0xe3, 0x6d, 0x7d, 0x56, 0xd7, 0x14,
	0xf7, 0x6a, 0x46, 0xd2, 0x0a, 0x31, 0x19, 0xff, 0xf7, 0x0a, 0xfb, 0x68, 0xed, 0xe8, 0x0d, 0x01,
	0x18, 0x98, 0x7b, 0x93, 0xfb, 0xfd, 0xdf, 0x2c, 0x57, 0x8e, 0x7a, 0xff, 0x1a, 0xa6, 0x0a, 0xe8,
	0x1e, 0x73, 0x2f, 0xfc, 0xeb, 0x61, 0xeb, 0x3d, 0xda, 0x98, 0x67, 0x0d, 0x3e, 0x45, 0x7f, 0x77,
	0x63, 0x2e, 0x82, 0x50, 0xbf, 0x3d, 0xc6, 0x54, 0xcb, 0x7c, 0x15, 0x09, 0x24, 0x89, 0xa9, 0x1a,
	0x39, 0x37, 0x4a, 0xf2, 0x8f, 0x3d, 0x49, 0x6d, 0x2c, 0xfe, 0x40, 0xed, 0xdc, 0x4c, 0x7f, 0x4e,
	0xce, 0xab, 0x5d, 0x8e, 0x9b, 0xd6, 0xd5, 0xb8, 0x69, 0xfd, 0x18, 0x37, 0xad, 0x9f, 0xe3, 0xe6,
	0x42, 0xd7, 0xea, 0x2f, 0xe9, 0x97, 0xe3, 0xe1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x35,
	0xc5, 0xa9, 0x5e, 0x05, 0x00, 0x00,
}
