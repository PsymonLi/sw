// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: lb.proto
*/
package network

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *LbPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "lb-policy/", m.Tenant, "/", m.Name)
}

func (m *LbPolicy) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/lb-policy/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *HealthCheckSpec) Clone(into interface{}) (interface{}, error) {
	var out *HealthCheckSpec
	var ok bool
	if into == nil {
		out = &HealthCheckSpec{}
	} else {
		out, ok = into.(*HealthCheckSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *HealthCheckSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicy) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicy
	var ok bool
	if into == nil {
		out = &LbPolicy{}
	} else {
		out, ok = into.(*LbPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicy) Defaults(ver string) bool {
	m.Kind = "LbPolicy"
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicySpec
	var ok bool
	if into == nil {
		out = &LbPolicySpec{}
	} else {
		out, ok = into.(*LbPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicyStatus
	var ok bool
	if into == nil {
		out = &LbPolicyStatus{}
	} else {
		out, ok = into.(*LbPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicyStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *HealthCheckSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *LbPolicy) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *LbPolicySpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *LbPolicyStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&LbPolicy{},
	)

}
