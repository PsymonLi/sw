// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: service.proto
*/
package network

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPService(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPService(_ context.Context, r *http.Request) (interface{}, error) {
	var req Service
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqService encodes GRPC request
func EncodeGrpcReqService(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Service)
	return req, nil
}

// DecodeGrpcReqService decodes GRPC request
func DecodeGrpcReqService(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Service)
	return req, nil
}

// EncodeGrpcRespService encodes GRC response
func EncodeGrpcRespService(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespService decodes GRPC response
func DecodeGrpcRespService(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPServiceSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPServiceSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ServiceSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqServiceSpec encodes GRPC request
func EncodeGrpcReqServiceSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceSpec)
	return req, nil
}

// DecodeGrpcReqServiceSpec decodes GRPC request
func DecodeGrpcReqServiceSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceSpec)
	return req, nil
}

// EncodeGrpcRespServiceSpec encodes GRC response
func EncodeGrpcRespServiceSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespServiceSpec decodes GRPC response
func DecodeGrpcRespServiceSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPServiceStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPServiceStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ServiceStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqServiceStatus encodes GRPC request
func EncodeGrpcReqServiceStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceStatus)
	return req, nil
}

// DecodeGrpcReqServiceStatus decodes GRPC request
func DecodeGrpcReqServiceStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceStatus)
	return req, nil
}

// EncodeGrpcRespServiceStatus encodes GRC response
func EncodeGrpcRespServiceStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespServiceStatus decodes GRPC response
func DecodeGrpcRespServiceStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSClientPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSClientPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSClientPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSClientPolicySpec encodes GRPC request
func EncodeGrpcReqTLSClientPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSClientPolicySpec)
	return req, nil
}

// DecodeGrpcReqTLSClientPolicySpec decodes GRPC request
func DecodeGrpcReqTLSClientPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSClientPolicySpec)
	return req, nil
}

// EncodeGrpcRespTLSClientPolicySpec encodes GRC response
func EncodeGrpcRespTLSClientPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSClientPolicySpec decodes GRPC response
func DecodeGrpcRespTLSClientPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSServerPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSServerPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSServerPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSServerPolicySpec encodes GRPC request
func EncodeGrpcReqTLSServerPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSServerPolicySpec)
	return req, nil
}

// DecodeGrpcReqTLSServerPolicySpec decodes GRPC request
func DecodeGrpcReqTLSServerPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSServerPolicySpec)
	return req, nil
}

// EncodeGrpcRespTLSServerPolicySpec encodes GRC response
func EncodeGrpcRespTLSServerPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSServerPolicySpec decodes GRPC response
func DecodeGrpcRespTLSServerPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
