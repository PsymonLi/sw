// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/cluster"
import _ "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type NetworkType int32

const (
	//
	NetworkType_Bridged NetworkType = 0
	//
	NetworkType_Routed NetworkType = 1
)

var NetworkType_name = map[int32]string{
	0: "Bridged",
	1: "Routed",
}
var NetworkType_value = map[string]int32{
	"Bridged": 0,
	"Routed":  1,
}

func (NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

// Network represents a subnet
type Network struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the network.
	Spec NetworkSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the network.
	Status NetworkStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

func (m *Network) GetSpec() NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return NetworkSpec{}
}

func (m *Network) GetStatus() NetworkStatus {
	if m != nil {
		return m.Status
	}
	return NetworkStatus{}
}

// spec part of network object
type NetworkSpec struct {
	// type of network. (vlan/vxlan/routed etc)
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	// IPv4 subnet CIDR
	IPv4Subnet string `protobuf:"bytes,2,opt,name=IPv4Subnet,json=ipv4-subnet,omitempty,proto3" json:"ipv4-subnet,omitempty"`
	// IPv4 gateway for this subnet
	IPv4Gateway string `protobuf:"bytes,3,opt,name=IPv4Gateway,json=ipv4-gateway,omitempty,proto3" json:"ipv4-gateway,omitempty"`
	// IPv6 subnet CIDR
	IPv6Subnet string `protobuf:"bytes,4,opt,name=IPv6Subnet,json=ipv6-subnet,omitempty,proto3" json:"ipv6-subnet,omitempty"`
	// IPv6 gateway
	IPv6Gateway string `protobuf:"bytes,5,opt,name=IPv6Gateway,json=ipv6-gateway,omitempty,proto3" json:"ipv6-gateway,omitempty"`
	// Vlan ID for the network
	VlanID uint32 `protobuf:"varint,6,opt,name=VlanID,json=vlan-id,omitempty,proto3" json:"vlan-id,omitempty"`
	// Vxlan VNI for the network
	VxlanVNI uint32 `protobuf:"varint,7,opt,name=VxlanVNI,json=vxlan-vni,omitempty,proto3" json:"vxlan-vni,omitempty"`
	// VirtualRouter specifies the VRF this network belongs to
	VirtualRouter string `protobuf:"bytes,8,opt,name=VirtualRouter,json=virtual-router,omitempty,proto3" json:"virtual-router,omitempty"`
	// Relay Configuration if any
	IPAMPolicy string `protobuf:"bytes,9,opt,name=IPAMPolicy,json=ipam-policy,omitempty,proto3" json:"ipam-policy,omitempty"`
	// RouteImportExport specifies what routes will be imported to this Router and how routes are tagged when exported.
	RouteImportExport *RDSpec `protobuf:"bytes,10,opt,name=RouteImportExport,json=route-imoport-export,omitempty" json:"route-imoport-export,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{1} }

func (m *NetworkSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkSpec) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Subnet() string {
	if m != nil {
		return m.IPv6Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *NetworkSpec) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

func (m *NetworkSpec) GetVxlanVNI() uint32 {
	if m != nil {
		return m.VxlanVNI
	}
	return 0
}

func (m *NetworkSpec) GetVirtualRouter() string {
	if m != nil {
		return m.VirtualRouter
	}
	return ""
}

func (m *NetworkSpec) GetIPAMPolicy() string {
	if m != nil {
		return m.IPAMPolicy
	}
	return ""
}

func (m *NetworkSpec) GetRouteImportExport() *RDSpec {
	if m != nil {
		return m.RouteImportExport
	}
	return nil
}

// status part of network object
type NetworkStatus struct {
	// list of all workloads in this network
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads,json=workloads,omitempty" json:"workloads,omitempty"`
	// allocated IPv4 addresses (bitmap)
	AllocatedIPv4Addrs []byte `protobuf:"bytes,2,opt,name=AllocatedIPv4Addrs,json=allocated-ipv4-addrs,omitempty,proto3" json:"allocated-ipv4-addrs,omitempty" venice:"sskip"`
	// Handle is the internal Handle allocated to this network
	Handle uint64 `protobuf:"varint,3,opt,name=Handle,json=id,omitempty,proto3" json:"id,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

func (m *NetworkStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func (m *NetworkStatus) GetAllocatedIPv4Addrs() []byte {
	if m != nil {
		return m.AllocatedIPv4Addrs
	}
	return nil
}

func (m *NetworkStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func init() {
	proto.RegisterType((*Network)(nil), "network.Network")
	proto.RegisterType((*NetworkSpec)(nil), "network.NetworkSpec")
	proto.RegisterType((*NetworkStatus)(nil), "network.NetworkStatus")
	proto.RegisterEnum("network.NetworkType", NetworkType_name, NetworkType_value)
}
func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NetworkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.IPv4Subnet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Subnet)))
		i += copy(dAtA[i:], m.IPv4Subnet)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Subnet) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Subnet)))
		i += copy(dAtA[i:], m.IPv6Subnet)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if m.VlanID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VxlanVNI))
	}
	if len(m.VirtualRouter) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.VirtualRouter)))
		i += copy(dAtA[i:], m.VirtualRouter)
	}
	if len(m.IPAMPolicy) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPAMPolicy)))
		i += copy(dAtA[i:], m.IPAMPolicy)
	}
	if m.RouteImportExport != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.RouteImportExport.Size()))
		n5, err := m.RouteImportExport.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *NetworkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllocatedIPv4Addrs) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AllocatedIPv4Addrs)))
		i += copy(dAtA[i:], m.AllocatedIPv4Addrs)
	}
	if m.Handle != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		n += 1 + sovNetwork(uint64(m.VxlanVNI))
	}
	l = len(m.VirtualRouter)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPAMPolicy)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.RouteImportExport != nil {
		l = m.RouteImportExport.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *NetworkStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.AllocatedIPv4Addrs)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Handle != 0 {
		n += 1 + sovNetwork(uint64(m.Handle))
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanVNI", wireType)
			}
			m.VxlanVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxlanVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualRouter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAMPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAMPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteImportExport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteImportExport == nil {
				m.RouteImportExport = &RDSpec{}
			}
			if err := m.RouteImportExport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedIPv4Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedIPv4Addrs = append(m.AllocatedIPv4Addrs[:0], dAtA[iNdEx:postIndex]...)
			if m.AllocatedIPv4Addrs == nil {
				m.AllocatedIPv4Addrs = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network.proto", fileDescriptorNetwork) }

var fileDescriptorNetwork = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xb6, 0xc6, 0x8e, 0xc7, 0x71, 0x70, 0xa7, 0x6d, 0xba, 0x4e, 0x61, 0x1d, 0x2c, 0x81,
	0x02, 0xea, 0xee, 0x22, 0xa8, 0x2c, 0x54, 0x90, 0x50, 0x56, 0x0d, 0x34, 0x40, 0x93, 0xc8, 0x89,
	0xc2, 0x79, 0xbc, 0x3b, 0x59, 0x86, 0xcc, 0xce, 0xac, 0x76, 0x66, 0x9d, 0x5a, 0x88, 0x23, 0xf9,
	0x21, 0x3d, 0xf2, 0x43, 0x50, 0x8e, 0x15, 0x17, 0x6e, 0x16, 0xf2, 0x09, 0xf9, 0xc8, 0x81, 0x33,
	0x9a, 0xf1, 0x2c, 0x5d, 0x63, 0xbb, 0xb9, 0x58, 0xfb, 0xbe, 0xf7, 0xbe, 0x6f, 0xbe, 0x7d, 0x6f,
	0xdf, 0x18, 0x34, 0x19, 0x96, 0x97, 0x3c, 0xbb, 0xf0, 0xd2, 0x8c, 0x4b, 0x0e, 0x6b, 0x26, 0xdc,
	0x7e, 0x27, 0xe6, 0x3c, 0xa6, 0xd8, 0x47, 0x29, 0xf1, 0x11, 0x63, 0x5c, 0x22, 0x49, 0x38, 0x13,
	0xb3, 0xb2, 0xed, 0xfd, 0x98, 0xc8, 0x1f, 0xf2, 0x81, 0x17, 0xf2, 0xc4, 0x4f, 0x31, 0x13, 0x88,
	0x45, 0xdc, 0x17, 0x97, 0xfe, 0x10, 0x33, 0x12, 0x62, 0x3f, 0x97, 0x84, 0x0a, 0x45, 0x8d, 0x31,
	0x2b, 0xb3, 0x7d, 0xc2, 0x42, 0x9a, 0x47, 0xb8, 0x90, 0x71, 0x4b, 0x32, 0x31, 0x8f, 0xb9, 0xaf,
	0xe1, 0x41, 0x7e, 0xae, 0x23, 0x1d, 0xe8, 0x27, 0x53, 0xfe, 0xfe, 0x8a, 0x53, 0x95, 0xc7, 0x04,
	0x4b, 0x64, 0xca, 0x3e, 0x7e, 0x43, 0x19, 0x45, 0x03, 0x4c, 0x85, 0x2f, 0x30, 0xc5, 0xa1, 0xe4,
	0x99, 0x61, 0x6c, 0x48, 0xcc, 0x10, 0x93, 0x26, 0x6a, 0x64, 0x3c, 0x97, 0xd8, 0x04, 0x9b, 0x22,
	0x41, 0x99, 0x64, 0x24, 0x9c, 0xc5, 0xdd, 0xdf, 0x6e, 0x81, 0xda, 0xe1, 0xac, 0x47, 0xb0, 0x07,
	0xac, 0x53, 0xdb, 0xda, 0xb1, 0x76, 0x1b, 0x9f, 0x34, 0x3d, 0x94, 0x12, 0xef, 0x74, 0x94, 0xe2,
	0xe7, 0x58, 0xa2, 0xe0, 0xee, 0xf5, 0xb8, 0xb3, 0xf6, 0x6a, 0xdc, 0xb1, 0xa6, 0xe3, 0x4e, 0xed,
	0x11, 0x61, 0x94, 0x30, 0xdc, 0x2f, 0x1e, 0xe0, 0x57, 0xc0, 0x3a, 0xb2, 0x6f, 0x69, 0xde, 0xdb,
	0x9a, 0x77, 0x34, 0xf8, 0x11, 0x87, 0x52, 0x33, 0xb7, 0x4b, 0xcc, 0x4d, 0xf5, 0x52, 0x8f, 0x78,
	0x42, 0x24, 0x4e, 0x52, 0x39, 0xea, 0xff, 0x2f, 0x86, 0xdf, 0x80, 0xca, 0x49, 0x8a, 0x43, 0xfb,
	0xb6, 0x96, 0xba, 0xe7, 0x15, 0xa3, 0x34, 0xfe, 0x54, 0x2e, 0xd8, 0x52, 0x7a, 0x4a, 0x4b, 0xa4,
	0x38, 0x2c, 0x6b, 0xcd, 0xc7, 0xb0, 0x0f, 0xaa, 0x27, 0x12, 0xc9, 0x5c, 0xd8, 0x15, 0xad, 0xb6,
	0xb5, 0xa0, 0xa6, 0xb3, 0x81, 0x6d, 0xf4, 0x5a, 0x42, 0xc7, 0x25, 0xc5, 0x05, 0xe4, 0xc9, 0xc3,
	0xdf, 0x7f, 0x69, 0x3f, 0x00, 0x0d, 0xff, 0xa7, 0x23, 0xef, 0x54, 0x37, 0xf8, 0x67, 0xb8, 0x6e,
	0x54, 0x45, 0xf7, 0x8f, 0x2a, 0x68, 0x94, 0x8c, 0xc2, 0xef, 0x40, 0x45, 0xb5, 0x4f, 0xf7, 0xb3,
	0x1e, 0x78, 0xbf, 0x5e, 0xb5, 0xef, 0x9d, 0xc8, 0x6c, 0x9f, 0xe5, 0xc9, 0xae, 0x29, 0x53, 0xe9,
	0x0f, 0xaf, 0x4d, 0x6b, 0xe4, 0x28, 0xc5, 0xe5, 0xd7, 0x99, 0x8f, 0xe1, 0x33, 0x00, 0x0e, 0x8e,
	0x87, 0x8f, 0x4f, 0xf2, 0x01, 0xc3, 0x52, 0xf7, 0xba, 0x1e, 0xbc, 0x6b, 0xb8, 0xf7, 0x49, 0x3a,
	0x7c, 0xec, 0x0a, 0x9d, 0x2a, 0x49, 0x2c, 0x87, 0xe1, 0xb7, 0xa0, 0xa1, 0x94, 0xbe, 0x46, 0x12,
	0x5f, 0xa2, 0x91, 0xee, 0x75, 0x3d, 0x70, 0x8c, 0xd4, 0x96, 0xe6, 0xc4, 0xb3, 0x5c, 0x49, 0x6b,
	0x05, 0x6e, 0x6c, 0xf5, 0x8c, 0xad, 0xca, 0x82, 0xad, 0xde, 0x72, 0x5b, 0xbd, 0x55, 0xb6, 0x7a,
	0x85, 0xad, 0xb7, 0x16, 0x6c, 0xf5, 0x56, 0xd8, 0x5a, 0x82, 0xc3, 0x2f, 0x40, 0xf5, 0x8c, 0x22,
	0x76, 0xf0, 0xd4, 0xae, 0xee, 0x58, 0xbb, 0xcd, 0xa0, 0x6d, 0x74, 0xee, 0x0c, 0x29, 0x62, 0x2e,
	0x89, 0x4a, 0x12, 0x8b, 0x10, 0x0c, 0xc0, 0xfa, 0xd9, 0x0b, 0x8a, 0xd8, 0xd9, 0xe1, 0x81, 0x5d,
	0xd3, 0xfc, 0x87, 0x86, 0x7f, 0x77, 0xa8, 0x70, 0x77, 0xc8, 0x48, 0x49, 0x61, 0x19, 0x08, 0x33,
	0xd0, 0x3c, 0x23, 0x99, 0xcc, 0x11, 0xed, 0xab, 0xe5, 0xcb, 0xec, 0x75, 0xfd, 0x42, 0x7b, 0x2f,
	0xaf, 0xda, 0xef, 0x81, 0xf5, 0x43, 0x94, 0xe0, 0xa8, 0x8f, 0xcf, 0xe1, 0x7d, 0xf3, 0xf9, 0xf8,
	0x73, 0xc5, 0xd3, 0x71, 0xc7, 0x1e, 0xce, 0x00, 0x57, 0xef, 0x6e, 0x56, 0x3a, 0x6e, 0x65, 0x06,
	0x9e, 0xab, 0x61, 0xec, 0x3d, 0x3f, 0xe6, 0x94, 0x84, 0x23, 0xbb, 0xae, 0x0f, 0xfc, 0xfc, 0xe5,
	0x55, 0xdb, 0x29, 0x1d, 0x08, 0x8b, 0x03, 0x5f, 0x57, 0xce, 0x46, 0x85, 0x12, 0x37, 0xd5, 0xe1,
	0xfc, 0xa8, 0x96, 0xc0, 0x90, 0x81, 0x3b, 0xda, 0xe7, 0x41, 0x92, 0xf2, 0x4c, 0xee, 0xbf, 0x50,
	0xbf, 0x36, 0x30, 0xeb, 0x5f, 0x6c, 0x59, 0xff, 0xa9, 0x5e, 0xd7, 0xee, 0x74, 0xdc, 0x71, 0xb4,
	0x53, 0x97, 0x24, 0x5c, 0x55, 0xba, 0x58, 0x13, 0x4a, 0xc7, 0xdc, 0x90, 0xef, 0xfe, 0x63, 0x81,
	0xe6, 0xdc, 0xd2, 0xc2, 0x2f, 0x41, 0xfd, 0x7b, 0x9e, 0x5d, 0x50, 0x8e, 0x22, 0x61, 0x5b, 0x3b,
	0xb7, 0x77, 0xeb, 0xc1, 0x03, 0x35, 0x9e, 0xcb, 0x02, 0x2c, 0x8f, 0x67, 0x09, 0x08, 0x25, 0x80,
	0x7b, 0x94, 0xf2, 0x10, 0x49, 0x1c, 0xa9, 0x6d, 0xd8, 0x8b, 0xa2, 0x4c, 0xe8, 0xb5, 0xda, 0x08,
	0x3e, 0x33, 0xc3, 0x76, 0x50, 0x51, 0xe1, 0xea, 0xaf, 0x1f, 0xa9, 0x9a, 0xd7, 0x1a, 0x7f, 0x8f,
	0x3b, 0x9b, 0xb3, 0xbf, 0x87, 0x27, 0x5d, 0x21, 0x2e, 0x48, 0xda, 0xed, 0xdf, 0xc0, 0x80, 0x1e,
	0xa8, 0x3e, 0x43, 0x2c, 0xa2, 0x58, 0x6f, 0x5d, 0x25, 0x68, 0x4d, 0xc7, 0x9d, 0x8d, 0xb9, 0xaf,
	0x71, 0x2e, 0xfa, 0xe8, 0x83, 0xff, 0x6e, 0x14, 0x75, 0x55, 0xc0, 0x06, 0xa8, 0x05, 0x19, 0x89,
	0x62, 0x1c, 0xb5, 0xd6, 0x20, 0x00, 0x55, 0x3d, 0x84, 0xa8, 0x65, 0x05, 0xad, 0xeb, 0x89, 0x63,
	0xbd, 0x9a, 0x38, 0xd6, 0x9f, 0x13, 0xc7, 0xfa, 0x6b, 0xe2, 0xac, 0x1d, 0x5b, 0x83, 0xaa, 0xbe,
	0xde, 0x3f, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x95, 0x92, 0x9e, 0xbe, 0x10, 0x07, 0x00, 0x00,
}
