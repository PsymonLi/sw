// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

/*
	Package network is a generated protocol buffer package.

	Service name

	It is generated from these files:
		network.proto

	It has these top-level messages:
		AutoMsgEndpointWatchHelper
		AutoMsgLbPolicyWatchHelper
		AutoMsgNetworkWatchHelper
		AutoMsgSecurityGroupWatchHelper
		AutoMsgServiceWatchHelper
		AutoMsgSgpolicyWatchHelper
		AutoMsgTenantWatchHelper
		Endpoint
		EndpointList
		EndpointSpec
		EndpointStatus
		HealthCheckSpec
		LbPolicy
		LbPolicyList
		LbPolicySpec
		LbPolicyStatus
		Network
		NetworkList
		NetworkSpec
		NetworkStatus
		SGRule
		SecurityGroup
		SecurityGroupList
		SecurityGroupSpec
		SecurityGroupStatus
		Service
		ServiceList
		ServiceSpec
		ServiceStatus
		Sgpolicy
		SgpolicyList
		SgpolicySpec
		SgpolicyStatus
		TLSClientPolicySpec
		TLSServerPolicySpec
		Tenant
		TenantList
		TenantSpec
		TenantStatus
*/
package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import labels "github.com/pensando/sw/api/labels"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TLSServerPolicySpec_ClientAuthTypes int32

const (
	TLSServerPolicySpec_Mandatory TLSServerPolicySpec_ClientAuthTypes = 0
	TLSServerPolicySpec_Optional  TLSServerPolicySpec_ClientAuthTypes = 1
	TLSServerPolicySpec_None      TLSServerPolicySpec_ClientAuthTypes = 2
)

var TLSServerPolicySpec_ClientAuthTypes_name = map[int32]string{
	0: "Mandatory",
	1: "Optional",
	2: "None",
}
var TLSServerPolicySpec_ClientAuthTypes_value = map[string]int32{
	"Mandatory": 0,
	"Optional":  1,
	"None":      2,
}

func (x TLSServerPolicySpec_ClientAuthTypes) String() string {
	return proto.EnumName(TLSServerPolicySpec_ClientAuthTypes_name, int32(x))
}
func (TLSServerPolicySpec_ClientAuthTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNetwork, []int{34, 0}
}

// spec part of tenant object
type AutoMsgEndpointWatchHelper struct {
	// Tenant admin user
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Endpoint `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgEndpointWatchHelper) Reset()         { *m = AutoMsgEndpointWatchHelper{} }
func (m *AutoMsgEndpointWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEndpointWatchHelper) ProtoMessage()    {}
func (*AutoMsgEndpointWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorNetwork, []int{0}
}

func (m *AutoMsgEndpointWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEndpointWatchHelper) GetObject() *Endpoint {
	if m != nil {
		return m.Object
	}
	return nil
}

// status part of tenant object
type AutoMsgLbPolicyWatchHelper struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *LbPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgLbPolicyWatchHelper) Reset()         { *m = AutoMsgLbPolicyWatchHelper{} }
func (m *AutoMsgLbPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLbPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgLbPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorNetwork, []int{1}
}

func (m *AutoMsgLbPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgLbPolicyWatchHelper) GetObject() *LbPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// Tenant represents an org or a tenant
type AutoMsgNetworkWatchHelper struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Network `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgNetworkWatchHelper) Reset()                    { *m = AutoMsgNetworkWatchHelper{} }
func (m *AutoMsgNetworkWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgNetworkWatchHelper) ProtoMessage()               {}
func (*AutoMsgNetworkWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

func (m *AutoMsgNetworkWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNetworkWatchHelper) GetObject() *Network {
	if m != nil {
		return m.Object
	}
	return nil
}

// spec part of network object
type AutoMsgSecurityGroupWatchHelper struct {
	// type of network. (vlan/vxlan/routed etc)
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// IPv4 subnet CIDR
	Object *SecurityGroup `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgSecurityGroupWatchHelper) Reset()         { *m = AutoMsgSecurityGroupWatchHelper{} }
func (m *AutoMsgSecurityGroupWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSecurityGroupWatchHelper) ProtoMessage()    {}
func (*AutoMsgSecurityGroupWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorNetwork, []int{3}
}

func (m *AutoMsgSecurityGroupWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSecurityGroupWatchHelper) GetObject() *SecurityGroup {
	if m != nil {
		return m.Object
	}
	return nil
}

// status part of network object
type AutoMsgServiceWatchHelper struct {
	// list of all workloads in this network
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// allocated IPv4 addresses (bitmap)
	Object *Service `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgServiceWatchHelper) Reset()                    { *m = AutoMsgServiceWatchHelper{} }
func (m *AutoMsgServiceWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgServiceWatchHelper) ProtoMessage()               {}
func (*AutoMsgServiceWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{4} }

func (m *AutoMsgServiceWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgServiceWatchHelper) GetObject() *Service {
	if m != nil {
		return m.Object
	}
	return nil
}

// Network represents a subnet
type AutoMsgSgpolicyWatchHelper struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Sgpolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgSgpolicyWatchHelper) Reset()         { *m = AutoMsgSgpolicyWatchHelper{} }
func (m *AutoMsgSgpolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSgpolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgSgpolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorNetwork, []int{5}
}

func (m *AutoMsgSgpolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSgpolicyWatchHelper) GetObject() *Sgpolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// security group configuration
type AutoMsgTenantWatchHelper struct {
	// Workload selector (list of labels)
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Service object selector
	Object *Tenant `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgTenantWatchHelper) Reset()                    { *m = AutoMsgTenantWatchHelper{} }
func (m *AutoMsgTenantWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgTenantWatchHelper) ProtoMessage()               {}
func (*AutoMsgTenantWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{6} }

func (m *AutoMsgTenantWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTenantWatchHelper) GetObject() *Tenant {
	if m != nil {
		return m.Object
	}
	return nil
}

// security group status
type Endpoint struct {
	// list of workloads that are part of this security group
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// list of all policies attached to this security group
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           EndpointSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         EndpointStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{7} }

func (m *Endpoint) GetSpec() EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return EndpointSpec{}
}

func (m *Endpoint) GetStatus() EndpointStatus {
	if m != nil {
		return m.Status
	}
	return EndpointStatus{}
}

// SecurityGroup represents a security zone or domain
type EndpointList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the security group.
	Items []*Endpoint `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (m *EndpointList) String() string            { return proto.CompactTextString(m) }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{8} }

func (m *EndpointList) GetItems() []*Endpoint {
	if m != nil {
		return m.Items
	}
	return nil
}

type EndpointSpec struct {
}

func (m *EndpointSpec) Reset()                    { *m = EndpointSpec{} }
func (m *EndpointSpec) String() string            { return proto.CompactTextString(m) }
func (*EndpointSpec) ProtoMessage()               {}
func (*EndpointSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{9} }

type EndpointStatus struct {
	// list of security groups this policy is attached to
	EndpointUUID string `protobuf:"bytes,1,opt,name=EndpointUUID,proto3" json:"endpoint-uuid,omitempty"`
	// Incoming rules
	WorkloadUUID string `protobuf:"bytes,2,opt,name=WorkloadUUID,proto3" json:"workload-uuid,omitempty"`
	// Outgoing rules
	WorkloadName       string            `protobuf:"bytes,3,opt,name=WorkloadName,proto3" json:"workload-name,omitempty"`
	Network            string            `protobuf:"bytes,4,opt,name=Network,proto3" json:"network,omitempty"`
	HomingHostAddr     string            `protobuf:"bytes,5,opt,name=HomingHostAddr,proto3" json:"homing-host-addr,omitempty"`
	HomingHostName     string            `protobuf:"bytes,6,opt,name=HomingHostName,proto3" json:"homing-host-name,omitempty"`
	IPv4Address        string            `protobuf:"bytes,7,opt,name=IPv4Address,proto3" json:"ipv4-address,omitempty"`
	IPv4Gateway        string            `protobuf:"bytes,8,opt,name=IPv4Gateway,proto3" json:"ipv4-gateway,omitempty"`
	IPv6Address        string            `protobuf:"bytes,9,opt,name=IPv6Address,proto3" json:"ipv6-address,omitempty"`
	IPv6Gateway        string            `protobuf:"bytes,10,opt,name=IPv6Gateway,proto3" json:"ipv6-gateway,omitempty"`
	MacAddress         string            `protobuf:"bytes,11,opt,name=MacAddress,proto3" json:"mac-address,omitempty"`
	NodeUUID           string            `protobuf:"bytes,12,opt,name=NodeUUID,proto3" json:"node-uuid,omitempty"`
	EndpointState      string            `protobuf:"bytes,13,opt,name=EndpointState,proto3" json:"EndpointState,omitempty"`
	SecurityGroups     []string          `protobuf:"bytes,14,rep,name=SecurityGroups" json:"SecurityGroups,omitempty"`
	MicroSegmentVlan   uint32            `protobuf:"varint,15,opt,name=MicroSegmentVlan,proto3" json:"micro-segment-vlan,omitempty"`
	WorkloadAttributes map[string]string `protobuf:"bytes,16,rep,name=WorkloadAttributes" json:"workload-attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EndpointStatus) Reset()                    { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()               {}
func (*EndpointStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{10} }

func (m *EndpointStatus) GetEndpointUUID() string {
	if m != nil {
		return m.EndpointUUID
	}
	return ""
}

func (m *EndpointStatus) GetWorkloadUUID() string {
	if m != nil {
		return m.WorkloadUUID
	}
	return ""
}

func (m *EndpointStatus) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *EndpointStatus) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *EndpointStatus) GetHomingHostAddr() string {
	if m != nil {
		return m.HomingHostAddr
	}
	return ""
}

func (m *EndpointStatus) GetHomingHostName() string {
	if m != nil {
		return m.HomingHostName
	}
	return ""
}

func (m *EndpointStatus) GetIPv4Address() string {
	if m != nil {
		return m.IPv4Address
	}
	return ""
}

func (m *EndpointStatus) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *EndpointStatus) GetIPv6Address() string {
	if m != nil {
		return m.IPv6Address
	}
	return ""
}

func (m *EndpointStatus) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *EndpointStatus) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EndpointStatus) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointStatus) GetEndpointState() string {
	if m != nil {
		return m.EndpointState
	}
	return ""
}

func (m *EndpointStatus) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *EndpointStatus) GetMicroSegmentVlan() uint32 {
	if m != nil {
		return m.MicroSegmentVlan
	}
	return 0
}

func (m *EndpointStatus) GetWorkloadAttributes() map[string]string {
	if m != nil {
		return m.WorkloadAttributes
	}
	return nil
}

type HealthCheckSpec struct {
	// list of workloads in this group
	Interval            uint32 `protobuf:"varint,1,opt,name=Interval,proto3" json:"interval,omitempty"`
	ProbesPerInterval   uint32 `protobuf:"varint,2,opt,name=ProbesPerInterval,proto3" json:"probes-per-interval,omitempty"`
	ProbePortOrUrl      string `protobuf:"bytes,3,opt,name=ProbePortOrUrl,proto3" json:"probe-port-or-url,omitempty"`
	MaxTimeouts         uint32 `protobuf:"varint,4,opt,name=MaxTimeouts,proto3" json:"max-timeouts,omitempty"`
	DeclareHealthyCount uint32 `protobuf:"varint,5,opt,name=DeclareHealthyCount,proto3" json:"declare-healthy-count,omitempty"`
}

func (m *HealthCheckSpec) Reset()                    { *m = HealthCheckSpec{} }
func (m *HealthCheckSpec) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckSpec) ProtoMessage()               {}
func (*HealthCheckSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{11} }

func (m *HealthCheckSpec) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *HealthCheckSpec) GetProbesPerInterval() uint32 {
	if m != nil {
		return m.ProbesPerInterval
	}
	return 0
}

func (m *HealthCheckSpec) GetProbePortOrUrl() string {
	if m != nil {
		return m.ProbePortOrUrl
	}
	return ""
}

func (m *HealthCheckSpec) GetMaxTimeouts() uint32 {
	if m != nil {
		return m.MaxTimeouts
	}
	return 0
}

func (m *HealthCheckSpec) GetDeclareHealthyCount() uint32 {
	if m != nil {
		return m.DeclareHealthyCount
	}
	return 0
}

// Sgpolicy represents a security policy for security groups
type LbPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the sgpolicy.
	Spec LbPolicySpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the sgpolicy.
	Status LbPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *LbPolicy) Reset()                    { *m = LbPolicy{} }
func (m *LbPolicy) String() string            { return proto.CompactTextString(m) }
func (*LbPolicy) ProtoMessage()               {}
func (*LbPolicy) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{12} }

func (m *LbPolicy) GetSpec() LbPolicySpec {
	if m != nil {
		return m.Spec
	}
	return LbPolicySpec{}
}

func (m *LbPolicy) GetStatus() LbPolicyStatus {
	if m != nil {
		return m.Status
	}
	return LbPolicyStatus{}
}

// The Service TLS configuration for inbound connections.
// It is used on all ports specified in the Service spec.
// Multiple Service objects can select the same workload and provide different
// server TLS configurations for disjoint sets of ports.
type LbPolicyList struct {
	// List of names of certificates to present to clients.
	// The certificates "usage" field must contain "server".
	// If multiple certificates names are provided, system tries to choose the
	// correct one using SNI, otherwise it picks the first one in the list.
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	// Client authentication
	// "None" means that server does not request and will not validate a client certificate.
	// "Mandatory" means that server requests and validates client certificate.
	// "Optional" means that server requests client certificate but proceeds even
	// if client does not present it.
	// Default is "Mandatory".
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// The list of root certificates used to validate a trust chain presented by client.
	// If the list is empty, all roots certificates in the tenant scope are considered.
	Items []*LbPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *LbPolicyList) Reset()                    { *m = LbPolicyList{} }
func (m *LbPolicyList) String() string            { return proto.CompactTextString(m) }
func (*LbPolicyList) ProtoMessage()               {}
func (*LbPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{13} }

func (m *LbPolicyList) GetItems() []*LbPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// Service TLS configuration for connections initiated by the workload towards
// destinations inside or outside the cluster.
type LbPolicySpec struct {
	// A map containing the certificate to use for a set of destinations.
	// The key is a selector for workloads that exist either inside or
	// outside the cluster. It can be based on labels, hostnames or "IP:port" pairs.
	// The value is the name of the certificate to use for the selected destinations.
	// The certificates "usage" field must contain "client".
	// TODO: replace the first "string" type with proper selector type when available.
	// A single "default" certificate which matches all destinations is allowed.
	// If a destination matches multiple non-default map keys, an error is returned.
	// If a destination does not match any map key (and there is no default),
	// the outbound connection is initiated without TLS.
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	// The list of root certificates used to validate a trust chain presented by a server.
	// If the list is empty, all roots certificates in the tenant scope are considered.
	Algorithm string `protobuf:"bytes,2,opt,name=Algorithm,proto3" json:"algorithm,omitempty"`
	// Valid DNS names or IP addresses that must appear in the server certificate
	// SubjAltName or Common Name (if SAN is not specified). If not specified,
	// client validates the IP address of the server.
	SessionAffinity string           `protobuf:"bytes,3,opt,name=SessionAffinity,proto3" json:"session-affinity,omitempty"`
	HealthCheck     *HealthCheckSpec `protobuf:"bytes,4,opt,name=HealthCheck" json:"health-check,omitempty"`
}

func (m *LbPolicySpec) Reset()                    { *m = LbPolicySpec{} }
func (m *LbPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*LbPolicySpec) ProtoMessage()               {}
func (*LbPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{14} }

func (m *LbPolicySpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LbPolicySpec) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *LbPolicySpec) GetSessionAffinity() string {
	if m != nil {
		return m.SessionAffinity
	}
	return ""
}

func (m *LbPolicySpec) GetHealthCheck() *HealthCheckSpec {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

// spec part of service object
type LbPolicyStatus struct {
	// FIXME: maps are not working. change this after its fixed
	// map<string, string> WorkloadSelector  = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-labels,omitempty"];
	// workload selector for the service (list of labels to match)
	Services []string `protobuf:"bytes,1,rep,name=Services" json:"type,omitempty"`
}

func (m *LbPolicyStatus) Reset()                    { *m = LbPolicyStatus{} }
func (m *LbPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*LbPolicyStatus) ProtoMessage()               {}
func (*LbPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{15} }

func (m *LbPolicyStatus) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

// status part of service object
type Network struct {
	// list of workloads that are backends of this service
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           NetworkSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NetworkStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{16} }

func (m *Network) GetSpec() NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return NetworkSpec{}
}

func (m *Network) GetStatus() NetworkStatus {
	if m != nil {
		return m.Status
	}
	return NetworkStatus{}
}

// Service represents a group of identical endpoints, such as servers in an app tier
type NetworkList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the Service.
	Items []*Network `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *NetworkList) Reset()                    { *m = NetworkList{} }
func (m *NetworkList) String() string            { return proto.CompactTextString(m) }
func (*NetworkList) ProtoMessage()               {}
func (*NetworkList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{17} }

func (m *NetworkList) GetItems() []*Network {
	if m != nil {
		return m.Items
	}
	return nil
}

type NetworkSpec struct {
	// Health check interval
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	// # of probes per interval
	IPv4Subnet string `protobuf:"bytes,2,opt,name=IPv4Subnet,proto3" json:"ipv4-subnet,omitempty"`
	// probe URL
	IPv4Gateway string `protobuf:"bytes,3,opt,name=IPv4Gateway,proto3" json:"ipv4-gateway,omitempty"`
	// timeout for declaring backend down
	IPv6Subnet string `protobuf:"bytes,4,opt,name=IPv6Subnet,proto3" json:"ipv6-subnet,omitempty"`
	// # of successful probes before we declare the backend back up
	IPv6Gateway string `protobuf:"bytes,5,opt,name=IPv6Gateway,proto3" json:"ipv6-gateway,omitempty"`
	VlanID      uint32 `protobuf:"varint,6,opt,name=VlanID,proto3" json:"vlan-id,omitempty"`
	VxlanVNI    uint32 `protobuf:"varint,7,opt,name=VxlanVNI,proto3" json:"vxlan-vni,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{18} }

func (m *NetworkSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkSpec) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Subnet() string {
	if m != nil {
		return m.IPv6Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *NetworkSpec) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

func (m *NetworkSpec) GetVxlanVNI() uint32 {
	if m != nil {
		return m.VxlanVNI
	}
	return 0
}

type NetworkStatus struct {
	// load balancing type
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
	// load balancing algorithm
	AllocatedIPv4Addrs []byte `protobuf:"bytes,2,opt,name=AllocatedIPv4Addrs,proto3" json:"allocated-ipv4-addrs,omitempty" venice:"sskip"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{19} }

func (m *NetworkStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func (m *NetworkStatus) GetAllocatedIPv4Addrs() []byte {
	if m != nil {
		return m.AllocatedIPv4Addrs
	}
	return nil
}

type SGRule struct {
	// list of service objects referring this lb-policy
	Ports      string   `protobuf:"bytes,1,opt,name=Ports,proto3" json:"ports,omitempty"`
	Action     string   `protobuf:"bytes,2,opt,name=Action,proto3" json:"action,omitempty"`
	PeerGroup  string   `protobuf:"bytes,3,opt,name=PeerGroup,proto3" json:"peer-group,omitempty"`
	Apps       []string `protobuf:"bytes,4,rep,name=Apps" json:"apps,omitempty"`
	AppUser    string   `protobuf:"bytes,5,opt,name=AppUser,proto3" json:"app-user,omitempty"`
	AppUserGrp string   `protobuf:"bytes,6,opt,name=AppUserGrp,proto3" json:"app-user-group,omitempty"`
}

func (m *SGRule) Reset()                    { *m = SGRule{} }
func (m *SGRule) String() string            { return proto.CompactTextString(m) }
func (*SGRule) ProtoMessage()               {}
func (*SGRule) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{20} }

func (m *SGRule) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *SGRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SGRule) GetPeerGroup() string {
	if m != nil {
		return m.PeerGroup
	}
	return ""
}

func (m *SGRule) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *SGRule) GetAppUser() string {
	if m != nil {
		return m.AppUser
	}
	return ""
}

func (m *SGRule) GetAppUserGrp() string {
	if m != nil {
		return m.AppUserGrp
	}
	return ""
}

// LbPolicy represents a load balancer policy
type SecurityGroup struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the LbPolicy.
	Spec SecurityGroupSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the LbPolicy.
	Status SecurityGroupStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *SecurityGroup) Reset()                    { *m = SecurityGroup{} }
func (m *SecurityGroup) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroup) ProtoMessage()               {}
func (*SecurityGroup) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{21} }

func (m *SecurityGroup) GetSpec() SecurityGroupSpec {
	if m != nil {
		return m.Spec
	}
	return SecurityGroupSpec{}
}

func (m *SecurityGroup) GetStatus() SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return SecurityGroupStatus{}
}

// spec part of Endpoint object
type SecurityGroupList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*SecurityGroup `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *SecurityGroupList) Reset()                    { *m = SecurityGroupList{} }
func (m *SecurityGroupList) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupList) ProtoMessage()               {}
func (*SecurityGroupList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{22} }

func (m *SecurityGroupList) GetItems() []*SecurityGroup {
	if m != nil {
		return m.Items
	}
	return nil
}

// status part of Endpoint object
type SecurityGroupSpec struct {
	// endpoint UUID
	WorkloadSelector *labels.Selector `protobuf:"bytes,1,opt,name=WorkloadSelector" json:"workload-selector,omitempty"`
	// VM or container UUID
	ServiceSelector []string `protobuf:"bytes,2,rep,name=ServiceSelector" json:"service-labels,omitempty"`
	// VM or container name
	MatchPrefixes []string `protobuf:"bytes,3,rep,name=MatchPrefixes" json:"match-prefixes,omitempty"`
}

func (m *SecurityGroupSpec) Reset()                    { *m = SecurityGroupSpec{} }
func (m *SecurityGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupSpec) ProtoMessage()               {}
func (*SecurityGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{23} }

func (m *SecurityGroupSpec) GetWorkloadSelector() *labels.Selector {
	if m != nil {
		return m.WorkloadSelector
	}
	return nil
}

func (m *SecurityGroupSpec) GetServiceSelector() []string {
	if m != nil {
		return m.ServiceSelector
	}
	return nil
}

func (m *SecurityGroupSpec) GetMatchPrefixes() []string {
	if m != nil {
		return m.MatchPrefixes
	}
	return nil
}

// Endpoint represents a network endpoint
type SecurityGroupStatus struct {
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
	Policies  []string `protobuf:"bytes,2,rep,name=Policies" json:"Policies,omitempty"`
}

func (m *SecurityGroupStatus) Reset()                    { *m = SecurityGroupStatus{} }
func (m *SecurityGroupStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStatus) ProtoMessage()               {}
func (*SecurityGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{24} }

func (m *SecurityGroupStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func (m *SecurityGroupStatus) GetPolicies() []string {
	if m != nil {
		return m.Policies
	}
	return nil
}

type Service struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           ServiceSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         ServiceStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{25} }

func (m *Service) GetSpec() ServiceSpec {
	if m != nil {
		return m.Spec
	}
	return ServiceSpec{}
}

func (m *Service) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus{}
}

type ServiceList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Service `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{26} }

func (m *ServiceList) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

type ServiceSpec struct {
	WorkloadSelector []string             `protobuf:"bytes,1,rep,name=WorkloadSelector" json:"workload-labels,omitempty"`
	VirtualIp        string               `protobuf:"bytes,2,opt,name=VirtualIp,proto3" json:"virtual-ip,omitempty"`
	Ports            string               `protobuf:"bytes,3,opt,name=Ports,proto3" json:"ports,omitempty"`
	LBPolicy         string               `protobuf:"bytes,4,opt,name=LBPolicy,proto3" json:"lb-policy,omitempty"`
	TLSServerPolicy  *TLSServerPolicySpec `protobuf:"bytes,5,opt,name=TLSServerPolicy" json:"tls-server-policy,omitempty"`
	TLSClientPolicy  *TLSClientPolicySpec `protobuf:"bytes,6,opt,name=TLSClientPolicy" json:"tls-client-policy,omitempty"`
}

func (m *ServiceSpec) Reset()                    { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()               {}
func (*ServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{27} }

func (m *ServiceSpec) GetWorkloadSelector() []string {
	if m != nil {
		return m.WorkloadSelector
	}
	return nil
}

func (m *ServiceSpec) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ServiceSpec) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *ServiceSpec) GetLBPolicy() string {
	if m != nil {
		return m.LBPolicy
	}
	return ""
}

func (m *ServiceSpec) GetTLSServerPolicy() *TLSServerPolicySpec {
	if m != nil {
		return m.TLSServerPolicy
	}
	return nil
}

func (m *ServiceSpec) GetTLSClientPolicy() *TLSClientPolicySpec {
	if m != nil {
		return m.TLSClientPolicy
	}
	return nil
}

type ServiceStatus struct {
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{28} }

func (m *ServiceStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

type Sgpolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           SgpolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         SgpolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Sgpolicy) Reset()                    { *m = Sgpolicy{} }
func (m *Sgpolicy) String() string            { return proto.CompactTextString(m) }
func (*Sgpolicy) ProtoMessage()               {}
func (*Sgpolicy) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{29} }

func (m *Sgpolicy) GetSpec() SgpolicySpec {
	if m != nil {
		return m.Spec
	}
	return SgpolicySpec{}
}

func (m *Sgpolicy) GetStatus() SgpolicyStatus {
	if m != nil {
		return m.Status
	}
	return SgpolicyStatus{}
}

type SgpolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Sgpolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *SgpolicyList) Reset()                    { *m = SgpolicyList{} }
func (m *SgpolicyList) String() string            { return proto.CompactTextString(m) }
func (*SgpolicyList) ProtoMessage()               {}
func (*SgpolicyList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{30} }

func (m *SgpolicyList) GetItems() []*Sgpolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type SgpolicySpec struct {
	AttachGroups []string `protobuf:"bytes,1,rep,name=AttachGroups" json:"attach-groups,omitempty"`
	InRules      []SGRule `protobuf:"bytes,2,rep,name=InRules" json:"in-rules,omitempty"`
	OutRules     []SGRule `protobuf:"bytes,3,rep,name=OutRules" json:"out-rules,omitempty"`
}

func (m *SgpolicySpec) Reset()                    { *m = SgpolicySpec{} }
func (m *SgpolicySpec) String() string            { return proto.CompactTextString(m) }
func (*SgpolicySpec) ProtoMessage()               {}
func (*SgpolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{31} }

func (m *SgpolicySpec) GetAttachGroups() []string {
	if m != nil {
		return m.AttachGroups
	}
	return nil
}

func (m *SgpolicySpec) GetInRules() []SGRule {
	if m != nil {
		return m.InRules
	}
	return nil
}

func (m *SgpolicySpec) GetOutRules() []SGRule {
	if m != nil {
		return m.OutRules
	}
	return nil
}

type SgpolicyStatus struct {
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
}

func (m *SgpolicyStatus) Reset()                    { *m = SgpolicyStatus{} }
func (m *SgpolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*SgpolicyStatus) ProtoMessage()               {}
func (*SgpolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{32} }

func (m *SgpolicyStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

type TLSClientPolicySpec struct {
	CertificatesSelector map[string]string `protobuf:"bytes,1,rep,name=CertificatesSelector" json:"tls-client-certificates-selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrustRoots           []string          `protobuf:"bytes,2,rep,name=TrustRoots" json:"tls-client-trust-roots,omitempty"`
	AllowedPeerId        []string          `protobuf:"bytes,3,rep,name=AllowedPeerId" json:"tls-client-allowed-peer-id,omitempty"`
}

func (m *TLSClientPolicySpec) Reset()                    { *m = TLSClientPolicySpec{} }
func (m *TLSClientPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*TLSClientPolicySpec) ProtoMessage()               {}
func (*TLSClientPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{33} }

func (m *TLSClientPolicySpec) GetCertificatesSelector() map[string]string {
	if m != nil {
		return m.CertificatesSelector
	}
	return nil
}

func (m *TLSClientPolicySpec) GetTrustRoots() []string {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

func (m *TLSClientPolicySpec) GetAllowedPeerId() []string {
	if m != nil {
		return m.AllowedPeerId
	}
	return nil
}

type TLSServerPolicySpec struct {
	Certificates         []string `protobuf:"bytes,1,rep,name=Certificates" json:"tls-server-certificates,omitempty"`
	ClientAuthentication string   `protobuf:"bytes,2,opt,name=ClientAuthentication,proto3" json:"client-authentication,omitempty"`
	TrustRoots           []string `protobuf:"bytes,3,rep,name=TrustRoots" json:"tls-server-trust-roots,omitempty"`
	AllowedPeerId        []string `protobuf:"bytes,4,rep,name=AllowedPeerId" json:"tls-server-allowed-peer-id,omitempty"`
}

func (m *TLSServerPolicySpec) Reset()                    { *m = TLSServerPolicySpec{} }
func (m *TLSServerPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*TLSServerPolicySpec) ProtoMessage()               {}
func (*TLSServerPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{34} }

func (m *TLSServerPolicySpec) GetCertificates() []string {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *TLSServerPolicySpec) GetClientAuthentication() string {
	if m != nil {
		return m.ClientAuthentication
	}
	return ""
}

func (m *TLSServerPolicySpec) GetTrustRoots() []string {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

func (m *TLSServerPolicySpec) GetAllowedPeerId() []string {
	if m != nil {
		return m.AllowedPeerId
	}
	return nil
}

type Tenant struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           TenantSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TenantStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Tenant) Reset()                    { *m = Tenant{} }
func (m *Tenant) String() string            { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()               {}
func (*Tenant) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{35} }

func (m *Tenant) GetSpec() TenantSpec {
	if m != nil {
		return m.Spec
	}
	return TenantSpec{}
}

func (m *Tenant) GetStatus() TenantStatus {
	if m != nil {
		return m.Status
	}
	return TenantStatus{}
}

type TenantList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Tenant `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *TenantList) Reset()                    { *m = TenantList{} }
func (m *TenantList) String() string            { return proto.CompactTextString(m) }
func (*TenantList) ProtoMessage()               {}
func (*TenantList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{36} }

func (m *TenantList) GetItems() []*Tenant {
	if m != nil {
		return m.Items
	}
	return nil
}

type TenantSpec struct {
	AdminUser string `protobuf:"bytes,1,opt,name=AdminUser,proto3" json:"admin-user,omitempty"`
}

func (m *TenantSpec) Reset()                    { *m = TenantSpec{} }
func (m *TenantSpec) String() string            { return proto.CompactTextString(m) }
func (*TenantSpec) ProtoMessage()               {}
func (*TenantSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{37} }

func (m *TenantSpec) GetAdminUser() string {
	if m != nil {
		return m.AdminUser
	}
	return ""
}

type TenantStatus struct {
}

func (m *TenantStatus) Reset()                    { *m = TenantStatus{} }
func (m *TenantStatus) String() string            { return proto.CompactTextString(m) }
func (*TenantStatus) ProtoMessage()               {}
func (*TenantStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{38} }

func init() {
	proto.RegisterType((*AutoMsgEndpointWatchHelper)(nil), "network.AutoMsgEndpointWatchHelper")
	proto.RegisterType((*AutoMsgLbPolicyWatchHelper)(nil), "network.AutoMsgLbPolicyWatchHelper")
	proto.RegisterType((*AutoMsgNetworkWatchHelper)(nil), "network.AutoMsgNetworkWatchHelper")
	proto.RegisterType((*AutoMsgSecurityGroupWatchHelper)(nil), "network.AutoMsgSecurityGroupWatchHelper")
	proto.RegisterType((*AutoMsgServiceWatchHelper)(nil), "network.AutoMsgServiceWatchHelper")
	proto.RegisterType((*AutoMsgSgpolicyWatchHelper)(nil), "network.AutoMsgSgpolicyWatchHelper")
	proto.RegisterType((*AutoMsgTenantWatchHelper)(nil), "network.AutoMsgTenantWatchHelper")
	proto.RegisterType((*Endpoint)(nil), "network.Endpoint")
	proto.RegisterType((*EndpointList)(nil), "network.EndpointList")
	proto.RegisterType((*EndpointSpec)(nil), "network.EndpointSpec")
	proto.RegisterType((*EndpointStatus)(nil), "network.EndpointStatus")
	proto.RegisterType((*HealthCheckSpec)(nil), "network.HealthCheckSpec")
	proto.RegisterType((*LbPolicy)(nil), "network.LbPolicy")
	proto.RegisterType((*LbPolicyList)(nil), "network.LbPolicyList")
	proto.RegisterType((*LbPolicySpec)(nil), "network.LbPolicySpec")
	proto.RegisterType((*LbPolicyStatus)(nil), "network.LbPolicyStatus")
	proto.RegisterType((*Network)(nil), "network.Network")
	proto.RegisterType((*NetworkList)(nil), "network.NetworkList")
	proto.RegisterType((*NetworkSpec)(nil), "network.NetworkSpec")
	proto.RegisterType((*NetworkStatus)(nil), "network.NetworkStatus")
	proto.RegisterType((*SGRule)(nil), "network.SGRule")
	proto.RegisterType((*SecurityGroup)(nil), "network.SecurityGroup")
	proto.RegisterType((*SecurityGroupList)(nil), "network.SecurityGroupList")
	proto.RegisterType((*SecurityGroupSpec)(nil), "network.SecurityGroupSpec")
	proto.RegisterType((*SecurityGroupStatus)(nil), "network.SecurityGroupStatus")
	proto.RegisterType((*Service)(nil), "network.Service")
	proto.RegisterType((*ServiceList)(nil), "network.ServiceList")
	proto.RegisterType((*ServiceSpec)(nil), "network.ServiceSpec")
	proto.RegisterType((*ServiceStatus)(nil), "network.ServiceStatus")
	proto.RegisterType((*Sgpolicy)(nil), "network.Sgpolicy")
	proto.RegisterType((*SgpolicyList)(nil), "network.SgpolicyList")
	proto.RegisterType((*SgpolicySpec)(nil), "network.SgpolicySpec")
	proto.RegisterType((*SgpolicyStatus)(nil), "network.SgpolicyStatus")
	proto.RegisterType((*TLSClientPolicySpec)(nil), "network.TLSClientPolicySpec")
	proto.RegisterType((*TLSServerPolicySpec)(nil), "network.TLSServerPolicySpec")
	proto.RegisterType((*Tenant)(nil), "network.Tenant")
	proto.RegisterType((*TenantList)(nil), "network.TenantList")
	proto.RegisterType((*TenantSpec)(nil), "network.TenantSpec")
	proto.RegisterType((*TenantStatus)(nil), "network.TenantStatus")
	proto.RegisterEnum("network.TLSServerPolicySpec_ClientAuthTypes", TLSServerPolicySpec_ClientAuthTypes_name, TLSServerPolicySpec_ClientAuthTypes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EndpointV1 service

type EndpointV1Client interface {
	AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error)
	AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EndpointV1_AutoWatchEndpointClient, error)
}

type endpointV1Client struct {
	cc *grpc.ClientConn
}

func NewEndpointV1Client(cc *grpc.ClientConn) EndpointV1Client {
	return &endpointV1Client{cc}
}

func (c *endpointV1Client) AutoAddEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/network.EndpointV1/AutoAddEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointV1Client) AutoDeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/network.EndpointV1/AutoDeleteEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointV1Client) AutoGetEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/network.EndpointV1/AutoGetEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointV1Client) AutoListEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := grpc.Invoke(ctx, "/network.EndpointV1/AutoListEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointV1Client) AutoUpdateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/network.EndpointV1/AutoUpdateEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointV1Client) AutoWatchEndpoint(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (EndpointV1_AutoWatchEndpointClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EndpointV1_serviceDesc.Streams[0], c.cc, "/network.EndpointV1/AutoWatchEndpoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointV1AutoWatchEndpointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EndpointV1_AutoWatchEndpointClient interface {
	Recv() (*AutoMsgEndpointWatchHelper, error)
	grpc.ClientStream
}

type endpointV1AutoWatchEndpointClient struct {
	grpc.ClientStream
}

func (x *endpointV1AutoWatchEndpointClient) Recv() (*AutoMsgEndpointWatchHelper, error) {
	m := new(AutoMsgEndpointWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EndpointV1 service

type EndpointV1Server interface {
	AutoAddEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoDeleteEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoGetEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoListEndpoint(context.Context, *api.ListWatchOptions) (*EndpointList, error)
	AutoUpdateEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	AutoWatchEndpoint(*api.ListWatchOptions, EndpointV1_AutoWatchEndpointServer) error
}

func RegisterEndpointV1Server(s *grpc.Server, srv EndpointV1Server) {
	s.RegisterService(&_EndpointV1_serviceDesc, srv)
}

func _EndpointV1_AutoAddEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointV1Server).AutoAddEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.EndpointV1/AutoAddEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointV1Server).AutoAddEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointV1_AutoDeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointV1Server).AutoDeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.EndpointV1/AutoDeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointV1Server).AutoDeleteEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointV1_AutoGetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointV1Server).AutoGetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.EndpointV1/AutoGetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointV1Server).AutoGetEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointV1_AutoListEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointV1Server).AutoListEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.EndpointV1/AutoListEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointV1Server).AutoListEndpoint(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointV1_AutoUpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointV1Server).AutoUpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.EndpointV1/AutoUpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointV1Server).AutoUpdateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointV1_AutoWatchEndpoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndpointV1Server).AutoWatchEndpoint(m, &endpointV1AutoWatchEndpointServer{stream})
}

type EndpointV1_AutoWatchEndpointServer interface {
	Send(*AutoMsgEndpointWatchHelper) error
	grpc.ServerStream
}

type endpointV1AutoWatchEndpointServer struct {
	grpc.ServerStream
}

func (x *endpointV1AutoWatchEndpointServer) Send(m *AutoMsgEndpointWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _EndpointV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.EndpointV1",
	HandlerType: (*EndpointV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddEndpoint",
			Handler:    _EndpointV1_AutoAddEndpoint_Handler,
		},
		{
			MethodName: "AutoDeleteEndpoint",
			Handler:    _EndpointV1_AutoDeleteEndpoint_Handler,
		},
		{
			MethodName: "AutoGetEndpoint",
			Handler:    _EndpointV1_AutoGetEndpoint_Handler,
		},
		{
			MethodName: "AutoListEndpoint",
			Handler:    _EndpointV1_AutoListEndpoint_Handler,
		},
		{
			MethodName: "AutoUpdateEndpoint",
			Handler:    _EndpointV1_AutoUpdateEndpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchEndpoint",
			Handler:       _EndpointV1_AutoWatchEndpoint_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for LbPolicyV1 service

type LbPolicyV1Client interface {
	AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error)
	AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (LbPolicyV1_AutoWatchLbPolicyClient, error)
}

type lbPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewLbPolicyV1Client(cc *grpc.ClientConn) LbPolicyV1Client {
	return &lbPolicyV1Client{cc}
}

func (c *lbPolicyV1Client) AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.LbPolicyV1/AutoAddLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbPolicyV1Client) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.LbPolicyV1/AutoDeleteLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbPolicyV1Client) AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.LbPolicyV1/AutoGetLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbPolicyV1Client) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error) {
	out := new(LbPolicyList)
	err := grpc.Invoke(ctx, "/network.LbPolicyV1/AutoListLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbPolicyV1Client) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.LbPolicyV1/AutoUpdateLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbPolicyV1Client) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (LbPolicyV1_AutoWatchLbPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LbPolicyV1_serviceDesc.Streams[0], c.cc, "/network.LbPolicyV1/AutoWatchLbPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &lbPolicyV1AutoWatchLbPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LbPolicyV1_AutoWatchLbPolicyClient interface {
	Recv() (*AutoMsgLbPolicyWatchHelper, error)
	grpc.ClientStream
}

type lbPolicyV1AutoWatchLbPolicyClient struct {
	grpc.ClientStream
}

func (x *lbPolicyV1AutoWatchLbPolicyClient) Recv() (*AutoMsgLbPolicyWatchHelper, error) {
	m := new(AutoMsgLbPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LbPolicyV1 service

type LbPolicyV1Server interface {
	AutoAddLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoDeleteLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoGetLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoListLbPolicy(context.Context, *api.ListWatchOptions) (*LbPolicyList, error)
	AutoUpdateLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoWatchLbPolicy(*api.ListWatchOptions, LbPolicyV1_AutoWatchLbPolicyServer) error
}

func RegisterLbPolicyV1Server(s *grpc.Server, srv LbPolicyV1Server) {
	s.RegisterService(&_LbPolicyV1_serviceDesc, srv)
}

func _LbPolicyV1_AutoAddLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbPolicyV1Server).AutoAddLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.LbPolicyV1/AutoAddLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbPolicyV1Server).AutoAddLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _LbPolicyV1_AutoDeleteLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbPolicyV1Server).AutoDeleteLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.LbPolicyV1/AutoDeleteLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbPolicyV1Server).AutoDeleteLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _LbPolicyV1_AutoGetLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbPolicyV1Server).AutoGetLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.LbPolicyV1/AutoGetLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbPolicyV1Server).AutoGetLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _LbPolicyV1_AutoListLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbPolicyV1Server).AutoListLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.LbPolicyV1/AutoListLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbPolicyV1Server).AutoListLbPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _LbPolicyV1_AutoUpdateLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbPolicyV1Server).AutoUpdateLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.LbPolicyV1/AutoUpdateLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbPolicyV1Server).AutoUpdateLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _LbPolicyV1_AutoWatchLbPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LbPolicyV1Server).AutoWatchLbPolicy(m, &lbPolicyV1AutoWatchLbPolicyServer{stream})
}

type LbPolicyV1_AutoWatchLbPolicyServer interface {
	Send(*AutoMsgLbPolicyWatchHelper) error
	grpc.ServerStream
}

type lbPolicyV1AutoWatchLbPolicyServer struct {
	grpc.ServerStream
}

func (x *lbPolicyV1AutoWatchLbPolicyServer) Send(m *AutoMsgLbPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _LbPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.LbPolicyV1",
	HandlerType: (*LbPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddLbPolicy",
			Handler:    _LbPolicyV1_AutoAddLbPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteLbPolicy",
			Handler:    _LbPolicyV1_AutoDeleteLbPolicy_Handler,
		},
		{
			MethodName: "AutoGetLbPolicy",
			Handler:    _LbPolicyV1_AutoGetLbPolicy_Handler,
		},
		{
			MethodName: "AutoListLbPolicy",
			Handler:    _LbPolicyV1_AutoListLbPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateLbPolicy",
			Handler:    _LbPolicyV1_AutoUpdateLbPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchLbPolicy",
			Handler:       _LbPolicyV1_AutoWatchLbPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for NetworkV1 service

type NetworkV1Client interface {
	AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error)
	AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error)
}

type networkV1Client struct {
	cc *grpc.ClientConn
}

func NewNetworkV1Client(cc *grpc.ClientConn) NetworkV1Client {
	return &networkV1Client{cc}
}

func (c *networkV1Client) AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error) {
	out := new(NetworkList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[0], c.cc, "/network.NetworkV1/AutoWatchNetwork", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchNetworkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchNetworkClient interface {
	Recv() (*AutoMsgNetworkWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchNetworkClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchNetworkClient) Recv() (*AutoMsgNetworkWatchHelper, error) {
	m := new(AutoMsgNetworkWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkV1 service

type NetworkV1Server interface {
	AutoAddNetwork(context.Context, *Network) (*Network, error)
	AutoDeleteNetwork(context.Context, *Network) (*Network, error)
	AutoGetNetwork(context.Context, *Network) (*Network, error)
	AutoListNetwork(context.Context, *api.ListWatchOptions) (*NetworkList, error)
	AutoUpdateNetwork(context.Context, *Network) (*Network, error)
	AutoWatchNetwork(*api.ListWatchOptions, NetworkV1_AutoWatchNetworkServer) error
}

func RegisterNetworkV1Server(s *grpc.Server, srv NetworkV1Server) {
	s.RegisterService(&_NetworkV1_serviceDesc, srv)
}

func _NetworkV1_AutoAddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoWatchNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchNetwork(m, &networkV1AutoWatchNetworkServer{stream})
}

type NetworkV1_AutoWatchNetworkServer interface {
	Send(*AutoMsgNetworkWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchNetworkServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchNetworkServer) Send(m *AutoMsgNetworkWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.NetworkV1",
	HandlerType: (*NetworkV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddNetwork",
			Handler:    _NetworkV1_AutoAddNetwork_Handler,
		},
		{
			MethodName: "AutoDeleteNetwork",
			Handler:    _NetworkV1_AutoDeleteNetwork_Handler,
		},
		{
			MethodName: "AutoGetNetwork",
			Handler:    _NetworkV1_AutoGetNetwork_Handler,
		},
		{
			MethodName: "AutoListNetwork",
			Handler:    _NetworkV1_AutoListNetwork_Handler,
		},
		{
			MethodName: "AutoUpdateNetwork",
			Handler:    _NetworkV1_AutoUpdateNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchNetwork",
			Handler:       _NetworkV1_AutoWatchNetwork_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for SecurityGroupV1 service

type SecurityGroupV1Client interface {
	AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SecurityGroupList, error)
	AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityGroupV1_AutoWatchSecurityGroupClient, error)
}

type securityGroupV1Client struct {
	cc *grpc.ClientConn
}

func NewSecurityGroupV1Client(cc *grpc.ClientConn) SecurityGroupV1Client {
	return &securityGroupV1Client{cc}
}

func (c *securityGroupV1Client) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/network.SecurityGroupV1/AutoAddSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupV1Client) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/network.SecurityGroupV1/AutoDeleteSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupV1Client) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/network.SecurityGroupV1/AutoGetSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupV1Client) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SecurityGroupList, error) {
	out := new(SecurityGroupList)
	err := grpc.Invoke(ctx, "/network.SecurityGroupV1/AutoListSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupV1Client) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/network.SecurityGroupV1/AutoUpdateSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityGroupV1Client) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityGroupV1_AutoWatchSecurityGroupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityGroupV1_serviceDesc.Streams[0], c.cc, "/network.SecurityGroupV1/AutoWatchSecurityGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityGroupV1AutoWatchSecurityGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityGroupV1_AutoWatchSecurityGroupClient interface {
	Recv() (*AutoMsgSecurityGroupWatchHelper, error)
	grpc.ClientStream
}

type securityGroupV1AutoWatchSecurityGroupClient struct {
	grpc.ClientStream
}

func (x *securityGroupV1AutoWatchSecurityGroupClient) Recv() (*AutoMsgSecurityGroupWatchHelper, error) {
	m := new(AutoMsgSecurityGroupWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SecurityGroupV1 service

type SecurityGroupV1Server interface {
	AutoAddSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	AutoDeleteSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	AutoGetSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	AutoListSecurityGroup(context.Context, *api.ListWatchOptions) (*SecurityGroupList, error)
	AutoUpdateSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	AutoWatchSecurityGroup(*api.ListWatchOptions, SecurityGroupV1_AutoWatchSecurityGroupServer) error
}

func RegisterSecurityGroupV1Server(s *grpc.Server, srv SecurityGroupV1Server) {
	s.RegisterService(&_SecurityGroupV1_serviceDesc, srv)
}

func _SecurityGroupV1_AutoAddSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupV1Server).AutoAddSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SecurityGroupV1/AutoAddSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupV1Server).AutoAddSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupV1_AutoDeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupV1Server).AutoDeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SecurityGroupV1/AutoDeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupV1Server).AutoDeleteSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupV1_AutoGetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupV1Server).AutoGetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SecurityGroupV1/AutoGetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupV1Server).AutoGetSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupV1_AutoListSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupV1Server).AutoListSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SecurityGroupV1/AutoListSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupV1Server).AutoListSecurityGroup(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupV1_AutoUpdateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityGroupV1Server).AutoUpdateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SecurityGroupV1/AutoUpdateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityGroupV1Server).AutoUpdateSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityGroupV1_AutoWatchSecurityGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityGroupV1Server).AutoWatchSecurityGroup(m, &securityGroupV1AutoWatchSecurityGroupServer{stream})
}

type SecurityGroupV1_AutoWatchSecurityGroupServer interface {
	Send(*AutoMsgSecurityGroupWatchHelper) error
	grpc.ServerStream
}

type securityGroupV1AutoWatchSecurityGroupServer struct {
	grpc.ServerStream
}

func (x *securityGroupV1AutoWatchSecurityGroupServer) Send(m *AutoMsgSecurityGroupWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _SecurityGroupV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.SecurityGroupV1",
	HandlerType: (*SecurityGroupV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddSecurityGroup",
			Handler:    _SecurityGroupV1_AutoAddSecurityGroup_Handler,
		},
		{
			MethodName: "AutoDeleteSecurityGroup",
			Handler:    _SecurityGroupV1_AutoDeleteSecurityGroup_Handler,
		},
		{
			MethodName: "AutoGetSecurityGroup",
			Handler:    _SecurityGroupV1_AutoGetSecurityGroup_Handler,
		},
		{
			MethodName: "AutoListSecurityGroup",
			Handler:    _SecurityGroupV1_AutoListSecurityGroup_Handler,
		},
		{
			MethodName: "AutoUpdateSecurityGroup",
			Handler:    _SecurityGroupV1_AutoUpdateSecurityGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSecurityGroup",
			Handler:       _SecurityGroupV1_AutoWatchSecurityGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for ServiceV1 service

type ServiceV1Client interface {
	AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error)
	AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ServiceV1_AutoWatchServiceClient, error)
}

type serviceV1Client struct {
	cc *grpc.ClientConn
}

func NewServiceV1Client(cc *grpc.ClientConn) ServiceV1Client {
	return &serviceV1Client{cc}
}

func (c *serviceV1Client) AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.ServiceV1/AutoAddService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceV1Client) AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.ServiceV1/AutoDeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceV1Client) AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.ServiceV1/AutoGetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceV1Client) AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/network.ServiceV1/AutoListService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceV1Client) AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.ServiceV1/AutoUpdateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceV1Client) AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ServiceV1_AutoWatchServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceV1_serviceDesc.Streams[0], c.cc, "/network.ServiceV1/AutoWatchService", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceV1AutoWatchServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceV1_AutoWatchServiceClient interface {
	Recv() (*AutoMsgServiceWatchHelper, error)
	grpc.ClientStream
}

type serviceV1AutoWatchServiceClient struct {
	grpc.ClientStream
}

func (x *serviceV1AutoWatchServiceClient) Recv() (*AutoMsgServiceWatchHelper, error) {
	m := new(AutoMsgServiceWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceV1 service

type ServiceV1Server interface {
	AutoAddService(context.Context, *Service) (*Service, error)
	AutoDeleteService(context.Context, *Service) (*Service, error)
	AutoGetService(context.Context, *Service) (*Service, error)
	AutoListService(context.Context, *api.ListWatchOptions) (*ServiceList, error)
	AutoUpdateService(context.Context, *Service) (*Service, error)
	AutoWatchService(*api.ListWatchOptions, ServiceV1_AutoWatchServiceServer) error
}

func RegisterServiceV1Server(s *grpc.Server, srv ServiceV1Server) {
	s.RegisterService(&_ServiceV1_serviceDesc, srv)
}

func _ServiceV1_AutoAddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceV1Server).AutoAddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ServiceV1/AutoAddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceV1Server).AutoAddService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceV1_AutoDeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceV1Server).AutoDeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ServiceV1/AutoDeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceV1Server).AutoDeleteService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceV1_AutoGetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceV1Server).AutoGetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ServiceV1/AutoGetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceV1Server).AutoGetService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceV1_AutoListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceV1Server).AutoListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ServiceV1/AutoListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceV1Server).AutoListService(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceV1_AutoUpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceV1Server).AutoUpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.ServiceV1/AutoUpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceV1Server).AutoUpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceV1_AutoWatchService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceV1Server).AutoWatchService(m, &serviceV1AutoWatchServiceServer{stream})
}

type ServiceV1_AutoWatchServiceServer interface {
	Send(*AutoMsgServiceWatchHelper) error
	grpc.ServerStream
}

type serviceV1AutoWatchServiceServer struct {
	grpc.ServerStream
}

func (x *serviceV1AutoWatchServiceServer) Send(m *AutoMsgServiceWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.ServiceV1",
	HandlerType: (*ServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddService",
			Handler:    _ServiceV1_AutoAddService_Handler,
		},
		{
			MethodName: "AutoDeleteService",
			Handler:    _ServiceV1_AutoDeleteService_Handler,
		},
		{
			MethodName: "AutoGetService",
			Handler:    _ServiceV1_AutoGetService_Handler,
		},
		{
			MethodName: "AutoListService",
			Handler:    _ServiceV1_AutoListService_Handler,
		},
		{
			MethodName: "AutoUpdateService",
			Handler:    _ServiceV1_AutoUpdateService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchService",
			Handler:       _ServiceV1_AutoWatchService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for SgpolicyV1 service

type SgpolicyV1Client interface {
	AutoAddSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error)
	AutoDeleteSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error)
	AutoGetSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error)
	AutoListSgpolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SgpolicyList, error)
	AutoUpdateSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error)
	AutoWatchSgpolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SgpolicyV1_AutoWatchSgpolicyClient, error)
}

type sgpolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewSgpolicyV1Client(cc *grpc.ClientConn) SgpolicyV1Client {
	return &sgpolicyV1Client{cc}
}

func (c *sgpolicyV1Client) AutoAddSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error) {
	out := new(Sgpolicy)
	err := grpc.Invoke(ctx, "/network.SgpolicyV1/AutoAddSgpolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgpolicyV1Client) AutoDeleteSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error) {
	out := new(Sgpolicy)
	err := grpc.Invoke(ctx, "/network.SgpolicyV1/AutoDeleteSgpolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgpolicyV1Client) AutoGetSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error) {
	out := new(Sgpolicy)
	err := grpc.Invoke(ctx, "/network.SgpolicyV1/AutoGetSgpolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgpolicyV1Client) AutoListSgpolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SgpolicyList, error) {
	out := new(SgpolicyList)
	err := grpc.Invoke(ctx, "/network.SgpolicyV1/AutoListSgpolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgpolicyV1Client) AutoUpdateSgpolicy(ctx context.Context, in *Sgpolicy, opts ...grpc.CallOption) (*Sgpolicy, error) {
	out := new(Sgpolicy)
	err := grpc.Invoke(ctx, "/network.SgpolicyV1/AutoUpdateSgpolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sgpolicyV1Client) AutoWatchSgpolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SgpolicyV1_AutoWatchSgpolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SgpolicyV1_serviceDesc.Streams[0], c.cc, "/network.SgpolicyV1/AutoWatchSgpolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &sgpolicyV1AutoWatchSgpolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SgpolicyV1_AutoWatchSgpolicyClient interface {
	Recv() (*AutoMsgSgpolicyWatchHelper, error)
	grpc.ClientStream
}

type sgpolicyV1AutoWatchSgpolicyClient struct {
	grpc.ClientStream
}

func (x *sgpolicyV1AutoWatchSgpolicyClient) Recv() (*AutoMsgSgpolicyWatchHelper, error) {
	m := new(AutoMsgSgpolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SgpolicyV1 service

type SgpolicyV1Server interface {
	AutoAddSgpolicy(context.Context, *Sgpolicy) (*Sgpolicy, error)
	AutoDeleteSgpolicy(context.Context, *Sgpolicy) (*Sgpolicy, error)
	AutoGetSgpolicy(context.Context, *Sgpolicy) (*Sgpolicy, error)
	AutoListSgpolicy(context.Context, *api.ListWatchOptions) (*SgpolicyList, error)
	AutoUpdateSgpolicy(context.Context, *Sgpolicy) (*Sgpolicy, error)
	AutoWatchSgpolicy(*api.ListWatchOptions, SgpolicyV1_AutoWatchSgpolicyServer) error
}

func RegisterSgpolicyV1Server(s *grpc.Server, srv SgpolicyV1Server) {
	s.RegisterService(&_SgpolicyV1_serviceDesc, srv)
}

func _SgpolicyV1_AutoAddSgpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sgpolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgpolicyV1Server).AutoAddSgpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SgpolicyV1/AutoAddSgpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgpolicyV1Server).AutoAddSgpolicy(ctx, req.(*Sgpolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SgpolicyV1_AutoDeleteSgpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sgpolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgpolicyV1Server).AutoDeleteSgpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SgpolicyV1/AutoDeleteSgpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgpolicyV1Server).AutoDeleteSgpolicy(ctx, req.(*Sgpolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SgpolicyV1_AutoGetSgpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sgpolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgpolicyV1Server).AutoGetSgpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SgpolicyV1/AutoGetSgpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgpolicyV1Server).AutoGetSgpolicy(ctx, req.(*Sgpolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SgpolicyV1_AutoListSgpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgpolicyV1Server).AutoListSgpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SgpolicyV1/AutoListSgpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgpolicyV1Server).AutoListSgpolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SgpolicyV1_AutoUpdateSgpolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sgpolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SgpolicyV1Server).AutoUpdateSgpolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.SgpolicyV1/AutoUpdateSgpolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SgpolicyV1Server).AutoUpdateSgpolicy(ctx, req.(*Sgpolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SgpolicyV1_AutoWatchSgpolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SgpolicyV1Server).AutoWatchSgpolicy(m, &sgpolicyV1AutoWatchSgpolicyServer{stream})
}

type SgpolicyV1_AutoWatchSgpolicyServer interface {
	Send(*AutoMsgSgpolicyWatchHelper) error
	grpc.ServerStream
}

type sgpolicyV1AutoWatchSgpolicyServer struct {
	grpc.ServerStream
}

func (x *sgpolicyV1AutoWatchSgpolicyServer) Send(m *AutoMsgSgpolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _SgpolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.SgpolicyV1",
	HandlerType: (*SgpolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddSgpolicy",
			Handler:    _SgpolicyV1_AutoAddSgpolicy_Handler,
		},
		{
			MethodName: "AutoDeleteSgpolicy",
			Handler:    _SgpolicyV1_AutoDeleteSgpolicy_Handler,
		},
		{
			MethodName: "AutoGetSgpolicy",
			Handler:    _SgpolicyV1_AutoGetSgpolicy_Handler,
		},
		{
			MethodName: "AutoListSgpolicy",
			Handler:    _SgpolicyV1_AutoListSgpolicy_Handler,
		},
		{
			MethodName: "AutoUpdateSgpolicy",
			Handler:    _SgpolicyV1_AutoUpdateSgpolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSgpolicy",
			Handler:       _SgpolicyV1_AutoWatchSgpolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

// Client API for TenantV1 service

type TenantV1Client interface {
	AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error)
	AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error)
	AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TenantV1_AutoWatchTenantClient, error)
}

type tenantV1Client struct {
	cc *grpc.ClientConn
}

func NewTenantV1Client(cc *grpc.ClientConn) TenantV1Client {
	return &tenantV1Client{cc}
}

func (c *tenantV1Client) AutoAddTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/network.TenantV1/AutoAddTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantV1Client) AutoDeleteTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/network.TenantV1/AutoDeleteTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantV1Client) AutoGetTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/network.TenantV1/AutoGetTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantV1Client) AutoListTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TenantList, error) {
	out := new(TenantList)
	err := grpc.Invoke(ctx, "/network.TenantV1/AutoListTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantV1Client) AutoUpdateTenant(ctx context.Context, in *Tenant, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/network.TenantV1/AutoUpdateTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantV1Client) AutoWatchTenant(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (TenantV1_AutoWatchTenantClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TenantV1_serviceDesc.Streams[0], c.cc, "/network.TenantV1/AutoWatchTenant", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenantV1AutoWatchTenantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TenantV1_AutoWatchTenantClient interface {
	Recv() (*AutoMsgTenantWatchHelper, error)
	grpc.ClientStream
}

type tenantV1AutoWatchTenantClient struct {
	grpc.ClientStream
}

func (x *tenantV1AutoWatchTenantClient) Recv() (*AutoMsgTenantWatchHelper, error) {
	m := new(AutoMsgTenantWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TenantV1 service

type TenantV1Server interface {
	AutoAddTenant(context.Context, *Tenant) (*Tenant, error)
	AutoDeleteTenant(context.Context, *Tenant) (*Tenant, error)
	AutoGetTenant(context.Context, *Tenant) (*Tenant, error)
	AutoListTenant(context.Context, *api.ListWatchOptions) (*TenantList, error)
	AutoUpdateTenant(context.Context, *Tenant) (*Tenant, error)
	AutoWatchTenant(*api.ListWatchOptions, TenantV1_AutoWatchTenantServer) error
}

func RegisterTenantV1Server(s *grpc.Server, srv TenantV1Server) {
	s.RegisterService(&_TenantV1_serviceDesc, srv)
}

func _TenantV1_AutoAddTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantV1Server).AutoAddTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.TenantV1/AutoAddTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantV1Server).AutoAddTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantV1_AutoDeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantV1Server).AutoDeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.TenantV1/AutoDeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantV1Server).AutoDeleteTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantV1_AutoGetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantV1Server).AutoGetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.TenantV1/AutoGetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantV1Server).AutoGetTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantV1_AutoListTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantV1Server).AutoListTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.TenantV1/AutoListTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantV1Server).AutoListTenant(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantV1_AutoUpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantV1Server).AutoUpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.TenantV1/AutoUpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantV1Server).AutoUpdateTenant(ctx, req.(*Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantV1_AutoWatchTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TenantV1Server).AutoWatchTenant(m, &tenantV1AutoWatchTenantServer{stream})
}

type TenantV1_AutoWatchTenantServer interface {
	Send(*AutoMsgTenantWatchHelper) error
	grpc.ServerStream
}

type tenantV1AutoWatchTenantServer struct {
	grpc.ServerStream
}

func (x *tenantV1AutoWatchTenantServer) Send(m *AutoMsgTenantWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _TenantV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.TenantV1",
	HandlerType: (*TenantV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddTenant",
			Handler:    _TenantV1_AutoAddTenant_Handler,
		},
		{
			MethodName: "AutoDeleteTenant",
			Handler:    _TenantV1_AutoDeleteTenant_Handler,
		},
		{
			MethodName: "AutoGetTenant",
			Handler:    _TenantV1_AutoGetTenant_Handler,
		},
		{
			MethodName: "AutoListTenant",
			Handler:    _TenantV1_AutoListTenant_Handler,
		},
		{
			MethodName: "AutoUpdateTenant",
			Handler:    _TenantV1_AutoUpdateTenant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchTenant",
			Handler:       _TenantV1_AutoWatchTenant_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

func (m *AutoMsgEndpointWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEndpointWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgLbPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLbPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgNetworkWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgSecurityGroupWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSecurityGroupWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgServiceWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgServiceWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgSgpolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSgpolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgTenantWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTenantWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n9, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n10, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n11, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *EndpointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EndpointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndpointUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.EndpointUUID)))
		i += copy(dAtA[i:], m.EndpointUUID)
	}
	if len(m.WorkloadUUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.WorkloadUUID)))
		i += copy(dAtA[i:], m.WorkloadUUID)
	}
	if len(m.WorkloadName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.WorkloadName)))
		i += copy(dAtA[i:], m.WorkloadName)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.HomingHostAddr) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.HomingHostAddr)))
		i += copy(dAtA[i:], m.HomingHostAddr)
	}
	if len(m.HomingHostName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.HomingHostName)))
		i += copy(dAtA[i:], m.HomingHostName)
	}
	if len(m.IPv4Address) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Address)))
		i += copy(dAtA[i:], m.IPv4Address)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Address) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Address)))
		i += copy(dAtA[i:], m.IPv6Address)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if len(m.EndpointState) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.EndpointState)))
		i += copy(dAtA[i:], m.EndpointState)
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MicroSegmentVlan != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.MicroSegmentVlan))
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, _ := range m.WorkloadAttributes {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			v := m.WorkloadAttributes[k]
			mapSize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			i = encodeVarintNetwork(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *HealthCheckSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Interval))
	}
	if m.ProbesPerInterval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.ProbesPerInterval))
	}
	if len(m.ProbePortOrUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ProbePortOrUrl)))
		i += copy(dAtA[i:], m.ProbePortOrUrl)
	}
	if m.MaxTimeouts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.MaxTimeouts))
	}
	if m.DeclareHealthyCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.DeclareHealthyCount))
	}
	return i, nil
}

func (m *LbPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n15, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n16, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n17, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	return i, nil
}

func (m *LbPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n18, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n19, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LbPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Algorithm) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Algorithm)))
		i += copy(dAtA[i:], m.Algorithm)
	}
	if len(m.SessionAffinity) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.SessionAffinity)))
		i += copy(dAtA[i:], m.SessionAffinity)
	}
	if m.HealthCheck != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.HealthCheck.Size()))
		n20, err := m.HealthCheck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *LbPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n21, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n22, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n23, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n24, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *NetworkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n25, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n26, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.IPv4Subnet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Subnet)))
		i += copy(dAtA[i:], m.IPv4Subnet)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Subnet) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Subnet)))
		i += copy(dAtA[i:], m.IPv6Subnet)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if m.VlanID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VxlanVNI))
	}
	return i, nil
}

func (m *NetworkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllocatedIPv4Addrs) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AllocatedIPv4Addrs)))
		i += copy(dAtA[i:], m.AllocatedIPv4Addrs)
	}
	return i, nil
}

func (m *SGRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Ports)))
		i += copy(dAtA[i:], m.Ports)
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.PeerGroup) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.PeerGroup)))
		i += copy(dAtA[i:], m.PeerGroup)
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AppUser) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AppUser)))
		i += copy(dAtA[i:], m.AppUser)
	}
	if len(m.AppUserGrp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AppUserGrp)))
		i += copy(dAtA[i:], m.AppUserGrp)
	}
	return i, nil
}

func (m *SecurityGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n27, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n28, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n29, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n30, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	return i, nil
}

func (m *SecurityGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n31, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n32, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkloadSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.WorkloadSelector.Size()))
		n33, err := m.WorkloadSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.ServiceSelector) > 0 {
		for _, s := range m.ServiceSelector {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MatchPrefixes) > 0 {
		for _, s := range m.MatchPrefixes {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SecurityGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Policies) > 0 {
		for _, s := range m.Policies {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n34, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n35, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n36, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n37, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	return i, nil
}

func (m *ServiceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n38, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n39, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkloadSelector) > 0 {
		for _, s := range m.WorkloadSelector {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.Ports) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Ports)))
		i += copy(dAtA[i:], m.Ports)
	}
	if len(m.LBPolicy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.LBPolicy)))
		i += copy(dAtA[i:], m.LBPolicy)
	}
	if m.TLSServerPolicy != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.TLSServerPolicy.Size()))
		n40, err := m.TLSServerPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.TLSClientPolicy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.TLSClientPolicy.Size()))
		n41, err := m.TLSClientPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Sgpolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sgpolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n42, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n43, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n44, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n44
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n45, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n45
	return i, nil
}

func (m *SgpolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgpolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n46, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n46
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n47, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n47
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SgpolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgpolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttachGroups) > 0 {
		for _, s := range m.AttachGroups {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.InRules) > 0 {
		for _, msg := range m.InRules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutRules) > 0 {
		for _, msg := range m.OutRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SgpolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgpolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TLSClientPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSClientPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CertificatesSelector) > 0 {
		for k, _ := range m.CertificatesSelector {
			dAtA[i] = 0xa
			i++
			v := m.CertificatesSelector[k]
			mapSize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			i = encodeVarintNetwork(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TLSServerPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSServerPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientAuthentication) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ClientAuthentication)))
		i += copy(dAtA[i:], m.ClientAuthentication)
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n48, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n48
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n49, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n50, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n51, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	return i, nil
}

func (m *TenantList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n52, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n53, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminUser) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AdminUser)))
		i += copy(dAtA[i:], m.AdminUser)
	}
	return i, nil
}

func (m *TenantStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgEndpointWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgLbPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgNetworkWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgSecurityGroupWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgServiceWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgSgpolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgTenantWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *EndpointSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EndpointStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.EndpointUUID)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.WorkloadUUID)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.WorkloadName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.HomingHostAddr)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.HomingHostName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Address)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Address)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.EndpointState)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.MicroSegmentVlan != 0 {
		n += 1 + sovNetwork(uint64(m.MicroSegmentVlan))
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, v := range m.WorkloadAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			n += mapEntrySize + 2 + sovNetwork(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HealthCheckSpec) Size() (n int) {
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovNetwork(uint64(m.Interval))
	}
	if m.ProbesPerInterval != 0 {
		n += 1 + sovNetwork(uint64(m.ProbesPerInterval))
	}
	l = len(m.ProbePortOrUrl)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.MaxTimeouts != 0 {
		n += 1 + sovNetwork(uint64(m.MaxTimeouts))
	}
	if m.DeclareHealthyCount != 0 {
		n += 1 + sovNetwork(uint64(m.DeclareHealthyCount))
	}
	return n
}

func (m *LbPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *LbPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *LbPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Algorithm)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.SessionAffinity)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.HealthCheck != nil {
		l = m.HealthCheck.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *LbPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		n += 1 + sovNetwork(uint64(m.VxlanVNI))
	}
	return n
}

func (m *NetworkStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.AllocatedIPv4Addrs)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *SGRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ports)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.PeerGroup)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.AppUser)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.AppUserGrp)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *SecurityGroup) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *SecurityGroupList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *SecurityGroupSpec) Size() (n int) {
	var l int
	_ = l
	if m.WorkloadSelector != nil {
		l = m.WorkloadSelector.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.ServiceSelector) > 0 {
		for _, s := range m.ServiceSelector {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.MatchPrefixes) > 0 {
		for _, s := range m.MatchPrefixes {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *SecurityGroupStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.Policies) > 0 {
		for _, s := range m.Policies {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *Service) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *ServiceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *ServiceSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.WorkloadSelector) > 0 {
		for _, s := range m.WorkloadSelector {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Ports)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.LBPolicy)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.TLSServerPolicy != nil {
		l = m.TLSServerPolicy.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.TLSClientPolicy != nil {
		l = m.TLSClientPolicy.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *ServiceStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *Sgpolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *SgpolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *SgpolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.AttachGroups) > 0 {
		for _, s := range m.AttachGroups {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.InRules) > 0 {
		for _, e := range m.InRules {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.OutRules) > 0 {
		for _, e := range m.OutRules {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *SgpolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *TLSClientPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.CertificatesSelector) > 0 {
		for k, v := range m.CertificatesSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNetwork(uint64(len(k))) + 1 + len(v) + sovNetwork(uint64(len(v)))
			n += mapEntrySize + 1 + sovNetwork(uint64(mapEntrySize))
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *TLSServerPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	l = len(m.ClientAuthentication)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *Tenant) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *TenantList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *TenantSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdminUser)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *TenantStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgEndpointWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEndpointWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Endpoint{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgLbPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &LbPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Network{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSecurityGroupWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSecurityGroupWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSecurityGroupWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &SecurityGroup{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgServiceWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Service{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSgpolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSgpolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSgpolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Sgpolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTenantWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTenantWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Tenant{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Endpoint{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroSegmentVlan", wireType)
			}
			m.MicroSegmentVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicroSegmentVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadAttributes == nil {
				m.WorkloadAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetwork(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNetwork
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkloadAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbesPerInterval", wireType)
			}
			m.ProbesPerInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProbesPerInterval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbePortOrUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbePortOrUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimeouts", wireType)
			}
			m.MaxTimeouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTimeouts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclareHealthyCount", wireType)
			}
			m.DeclareHealthyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeclareHealthyCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &LbPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Algorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionAffinity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionAffinity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HealthCheck == nil {
				m.HealthCheck = &HealthCheckSpec{}
			}
			if err := m.HealthCheck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Network{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanVNI", wireType)
			}
			m.VxlanVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxlanVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedIPv4Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedIPv4Addrs = append(m.AllocatedIPv4Addrs[:0], dAtA[iNdEx:postIndex]...)
			if m.AllocatedIPv4Addrs == nil {
				m.AllocatedIPv4Addrs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUserGrp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUserGrp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SecurityGroup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadSelector == nil {
				m.WorkloadSelector = &labels.Selector{}
			}
			if err := m.WorkloadSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSelector = append(m.ServiceSelector, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchPrefixes = append(m.MatchPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Service{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadSelector = append(m.WorkloadSelector, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LBPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LBPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSServerPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSServerPolicy == nil {
				m.TLSServerPolicy = &TLSServerPolicySpec{}
			}
			if err := m.TLSServerPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSClientPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSClientPolicy == nil {
				m.TLSClientPolicy = &TLSClientPolicySpec{}
			}
			if err := m.TLSClientPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sgpolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sgpolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sgpolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SgpolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgpolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgpolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Sgpolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SgpolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgpolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgpolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachGroups = append(m.AttachGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InRules = append(m.InRules, SGRule{})
			if err := m.InRules[len(m.InRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutRules = append(m.OutRules, SGRule{})
			if err := m.OutRules[len(m.OutRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SgpolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgpolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgpolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSClientPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSClientPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSClientPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificatesSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificatesSelector == nil {
				m.CertificatesSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetwork
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthNetwork
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNetwork(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNetwork
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CertificatesSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustRoots = append(m.TrustRoots, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPeerId = append(m.AllowedPeerId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSServerPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSServerPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSServerPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAuthentication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAuthentication = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustRoots = append(m.TrustRoots, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPeerId = append(m.AllowedPeerId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Tenant{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network.proto", fileDescriptorNetwork) }

var fileDescriptorNetwork = []byte{
	// 3521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0xdd, 0x6f, 0x1b, 0xc7,
	0xb5, 0xf7, 0x52, 0x1f, 0x26, 0x47, 0xa2, 0x24, 0x8f, 0x64, 0x8b, 0xa4, 0x1d, 0x51, 0x5e, 0x7f,
	0x44, 0x71, 0xbc, 0x92, 0xed, 0x24, 0x8a, 0xa3, 0x7b, 0x73, 0x13, 0xca, 0x76, 0x24, 0x25, 0x96,
	0x2c, 0x48, 0xb6, 0x82, 0x9b, 0xe4, 0x06, 0x77, 0x45, 0x8e, 0xc9, 0x8d, 0x97, 0xbb, 0x7b, 0x77,
	0x87, 0xb2, 0x85, 0x8b, 0xb4, 0x40, 0x64, 0xa7, 0x1f, 0x41, 0x5b, 0xb4, 0x7d, 0x6a, 0x50, 0xa0,
	0x80, 0xfb, 0x50, 0xc0, 0x4f, 0xad, 0x9f, 0x82, 0xfe, 0x05, 0x79, 0x0c, 0xdc, 0xb7, 0x14, 0x10,
	0x8a, 0x20, 0x4f, 0x7a, 0xe8, 0x43, 0xd1, 0xa7, 0x3e, 0x15, 0xf3, 0xc9, 0xd9, 0x0f, 0x52, 0xa4,
	0x85, 0x18, 0x79, 0x13, 0x67, 0xe6, 0xfc, 0xce, 0x99, 0x33, 0xbf, 0x33, 0xe7, 0xcc, 0xcc, 0x0a,
	0x64, 0x1d, 0x84, 0xef, 0xba, 0xfe, 0x9d, 0x69, 0xcf, 0x77, 0xb1, 0x0b, 0x0f, 0xf3, 0x9f, 0x85,
	0x13, 0x55, 0xd7, 0xad, 0xda, 0x68, 0xc6, 0xf4, 0xac, 0x19, 0xd3, 0x71, 0x5c, 0x6c, 0x62, 0xcb,
	0x75, 0x02, 0x36, 0xac, 0x70, 0xad, 0x6a, 0xe1, 0x5a, 0x63, 0x73, 0xba, 0xec, 0xd6, 0x67, 0x3c,
	0xe4, 0x04, 0xa6, 0x53, 0x71, 0x67, 0x82, 0xbb, 0x33, 0x5b, 0xc8, 0xb1, 0xca, 0x68, 0xa6, 0x81,
	0x2d, 0x3b, 0x20, 0xa2, 0x55, 0xe4, 0xa8, 0xd2, 0x33, 0x96, 0x53, 0xb6, 0x1b, 0x15, 0x24, 0x60,
	0x0c, 0x05, 0xa6, 0xea, 0x56, 0xdd, 0x19, 0xda, 0xbc, 0xd9, 0xb8, 0x4d, 0x7f, 0xd1, 0x1f, 0xf4,
	0x2f, 0x3e, 0xfc, 0x4c, 0x0b, 0xad, 0xc4, 0xc6, 0x3a, 0xc2, 0x26, 0x1f, 0x76, 0xa1, 0xcd, 0x30,
	0xdb, 0xdc, 0x44, 0x76, 0x30, 0x13, 0x20, 0x1b, 0x95, 0xb1, 0xeb, 0x33, 0x09, 0xfd, 0x43, 0x50,
	0x28, 0x35, 0xb0, 0xbb, 0x1c, 0x54, 0xaf, 0x39, 0x15, 0xcf, 0xb5, 0x1c, 0xfc, 0xae, 0x89, 0xcb,
	0xb5, 0x45, 0x64, 0x7b, 0xc8, 0x87, 0x83, 0xa0, 0xf7, 0xe6, 0xb6, 0x87, 0x72, 0xda, 0xa4, 0x36,
	0x95, 0x81, 0x27, 0x41, 0xff, 0x8d, 0xcd, 0x8f, 0x50, 0x19, 0xe7, 0x52, 0x93, 0xda, 0xd4, 0xc0,
	0xa5, 0x23, 0xd3, 0xc2, 0x83, 0x42, 0x76, 0x6e, 0xf8, 0xeb, 0x07, 0xf9, 0x81, 0xbb, 0x04, 0xa1,
	0x46, 0x11, 0x14, 0xfc, 0xeb, 0x9b, 0xab, 0xae, 0x6d, 0x95, 0xb7, 0x9f, 0x06, 0x5f, 0xc8, 0xc6,
	0xf1, 0x3f, 0x00, 0x79, 0x8e, 0xbf, 0xc2, 0xc6, 0xb6, 0x86, 0x9f, 0x8c, 0xc0, 0x8f, 0x48, 0x78,
	0x2e, 0x1a, 0x47, 0xaf, 0x81, 0x22, 0x47, 0x5f, 0x47, 0xe5, 0x86, 0x6f, 0xe1, 0xed, 0x05, 0xdf,
	0x6d, 0x78, 0xad, 0x75, 0x9c, 0x8d, 0xe8, 0x38, 0x26, 0x75, 0x84, 0x00, 0xda, 0xcd, 0x63, 0x1d,
	0xf9, 0x5b, 0x56, 0x19, 0x3d, 0xcd, 0x3c, 0xb8, 0x68, 0xbb, 0x55, 0x58, 0xaf, 0x7a, 0x4f, 0xbd,
	0x0a, 0x42, 0x36, 0x8e, 0xff, 0x1e, 0xc8, 0x71, 0xfc, 0x9b, 0xc8, 0x31, 0xdb, 0x71, 0xa8, 0x18,
	0x41, 0x1f, 0x96, 0xe8, 0x4c, 0x32, 0x8e, 0xfd, 0xfb, 0x14, 0x48, 0x0b, 0x7e, 0xc1, 0x0b, 0x40,
	0xbb, 0x49, 0x91, 0x06, 0x2e, 0x65, 0xa7, 0x4d, 0xcf, 0x9a, 0x26, 0xd0, 0xcb, 0x08, 0x9b, 0xf3,
	0xa3, 0x5f, 0xee, 0x16, 0x0f, 0x7d, 0xb5, 0x5b, 0xd4, 0xf6, 0x76, 0x8b, 0x87, 0xcf, 0x5b, 0x8e,
	0x6d, 0x39, 0x68, 0x4d, 0xbb, 0x09, 0x5f, 0x03, 0xda, 0x0d, 0xa9, 0x8b, 0x48, 0x30, 0xf5, 0x54,
	0xa6, 0xa0, 0xc8, 0x0c, 0x91, 0x30, 0x3a, 0xef, 0xd6, 0x2d, 0x8c, 0xea, 0x1e, 0xde, 0x5e, 0xd3,
	0x6e, 0xc0, 0x12, 0xe8, 0x5d, 0xf7, 0x50, 0x39, 0xd7, 0x43, 0xa5, 0x8f, 0xc6, 0xd8, 0x4e, 0x3a,
	0xe7, 0x8f, 0x11, 0x0c, 0x22, 0x1f, 0x78, 0xa8, 0xac, 0xc8, 0x53, 0x51, 0xb8, 0x04, 0xfa, 0xd7,
	0xb1, 0x89, 0x1b, 0x41, 0xae, 0x97, 0x82, 0x8c, 0xc7, 0x41, 0x68, 0xf7, 0x7c, 0x8e, 0xc3, 0x8c,
	0x04, 0xf4, 0xb7, 0x02, 0xc4, 0x01, 0xe6, 0x4e, 0x3c, 0x79, 0x90, 0xcf, 0x81, 0x81, 0x99, 0xff,
	0xbf, 0xc1, 0x5d, 0xf5, 0x31, 0xcc, 0x20, 0x0e, 0x12, 0xe8, 0xbf, 0xd0, 0xc0, 0xa0, 0x80, 0xbc,
	0x6e, 0x05, 0x18, 0xea, 0xc4, 0x53, 0xa9, 0x24, 0x4f, 0xa5, 0xc5, 0xac, 0xe1, 0x0b, 0x20, 0x4d,
	0xc6, 0x92, 0x56, 0x3e, 0x49, 0x36, 0x54, 0x34, 0x2a, 0x43, 0x27, 0x41, 0xdf, 0x12, 0x46, 0x75,
	0x32, 0x8f, 0x9e, 0xe4, 0xd0, 0x1f, 0xfa, 0xfa, 0x41, 0x1e, 0xd8, 0x56, 0x80, 0xf9, 0xba, 0x0d,
	0x35, 0x0d, 0x22, 0xae, 0xd0, 0x7f, 0x9b, 0x01, 0x43, 0xe1, 0x49, 0xc3, 0x2b, 0xcd, 0x21, 0xb7,
	0x6e, 0x2d, 0x5d, 0x65, 0x14, 0x99, 0x2f, 0x7e, 0xc9, 0x56, 0x64, 0x5c, 0xcc, 0xce, 0x68, 0x34,
	0xac, 0x8a, 0xe2, 0x91, 0x90, 0x10, 0x01, 0x79, 0xd7, 0xf5, 0xef, 0xd8, 0xae, 0x59, 0xa1, 0x20,
	0xa9, 0x30, 0xc8, 0x5d, 0xde, 0x17, 0x03, 0x51, 0x85, 0x54, 0x90, 0x15, 0xb3, 0x8e, 0xa8, 0x37,
	0x92, 0x40, 0x1c, 0xb3, 0x8e, 0x92, 0x40, 0x88, 0x10, 0x7c, 0x09, 0x1c, 0xe6, 0x3b, 0x09, 0x5d,
	0xed, 0xcc, 0x7c, 0x9e, 0xcb, 0x1f, 0xe1, 0xce, 0x52, 0x24, 0xc5, 0x48, 0xf8, 0x36, 0x18, 0x5a,
	0x74, 0xeb, 0x96, 0x53, 0x5d, 0x74, 0x03, 0x5c, 0xaa, 0x54, 0xfc, 0x5c, 0x1f, 0x95, 0xd5, 0xb9,
	0x6c, 0xa1, 0x46, 0x7b, 0x8d, 0x9a, 0x1b, 0x60, 0xc3, 0xac, 0x54, 0x7c, 0x05, 0x24, 0x22, 0x19,
	0xc6, 0xa2, 0xf3, 0xe8, 0x6f, 0x8d, 0x15, 0x99, 0x4a, 0x44, 0x12, 0xbe, 0x09, 0x06, 0x96, 0x56,
	0xb7, 0x5e, 0x26, 0xb8, 0x28, 0x08, 0x72, 0x87, 0x29, 0xd0, 0x04, 0x07, 0x3a, 0x66, 0x79, 0x5b,
	0x2f, 0x53, 0x6b, 0x50, 0xa0, 0x72, 0x55, 0x15, 0x11, 0x08, 0x0b, 0x26, 0x46, 0x77, 0xcd, 0xed,
	0x5c, 0x3a, 0x01, 0xa1, 0xca, 0xfa, 0xa2, 0x08, 0x5c, 0x84, 0x23, 0xcc, 0x0a, 0x1b, 0x32, 0x31,
	0x84, 0xd9, 0x16, 0x36, 0xcc, 0x86, 0x6d, 0x98, 0x15, 0x36, 0x80, 0x04, 0x84, 0x64, 0x1b, 0x84,
	0x08, 0x7c, 0x1d, 0x80, 0x65, 0xb3, 0x2c, 0x4c, 0x18, 0xa0, 0x00, 0xcf, 0x71, 0x80, 0xa3, 0x75,
	0xb3, 0x9c, 0x60, 0x81, 0x22, 0x00, 0x5f, 0x05, 0xe9, 0x15, 0xb7, 0x82, 0x28, 0x33, 0x07, 0xa9,
	0xf0, 0x71, 0x2e, 0x3c, 0xea, 0xb8, 0x15, 0x14, 0x65, 0xa5, 0x1c, 0x0c, 0x4f, 0x83, 0xac, 0x1a,
	0x2d, 0x28, 0x97, 0x25, 0xd2, 0x6b, 0xe1, 0x46, 0x78, 0x16, 0x0c, 0x85, 0x12, 0x4b, 0x90, 0x1b,
	0x9a, 0xec, 0x99, 0xca, 0xac, 0x45, 0x5a, 0xe1, 0x2a, 0x18, 0x59, 0xb6, 0xca, 0xbe, 0xbb, 0x8e,
	0xaa, 0x75, 0xe4, 0xe0, 0x0d, 0xdb, 0x74, 0x72, 0xc3, 0x93, 0xda, 0x54, 0x76, 0xfe, 0x34, 0x37,
	0xe7, 0x44, 0x9d, 0xf4, 0x1b, 0x01, 0x1b, 0x60, 0x6c, 0xd9, 0xa6, 0xa3, 0xd8, 0x15, 0x93, 0x86,
	0x9f, 0x6a, 0x00, 0x0a, 0xf6, 0x97, 0x30, 0xf6, 0xad, 0xcd, 0x06, 0x46, 0x41, 0x6e, 0x84, 0x6e,
	0x0f, 0x33, 0x2d, 0xb6, 0xb9, 0xe9, 0xb8, 0xc4, 0x35, 0x07, 0xfb, 0xdb, 0xf3, 0x67, 0xb8, 0x15,
	0xcf, 0xc9, 0x48, 0x33, 0xe5, 0x08, 0xc5, 0x8c, 0x04, 0x8d, 0x85, 0x6b, 0x60, 0xbc, 0x05, 0x2a,
	0x1c, 0x01, 0x3d, 0x77, 0xd0, 0x36, 0xdb, 0x56, 0xd6, 0xc8, 0x9f, 0x70, 0x0c, 0xf4, 0x6d, 0x99,
	0x76, 0x03, 0xb1, 0x5d, 0x62, 0x8d, 0xfd, 0x98, 0x4b, 0x5d, 0xd6, 0xf4, 0x1f, 0xf7, 0x80, 0xe1,
	0x45, 0x64, 0xda, 0xb8, 0x76, 0xa5, 0x86, 0xca, 0x77, 0xe8, 0xee, 0x3d, 0x0b, 0xd2, 0x4b, 0x0e,
	0x46, 0xfe, 0x96, 0x69, 0x53, 0x90, 0x2c, 0xcd, 0x18, 0xc4, 0x4e, 0x68, 0xf1, 0x76, 0x75, 0xed,
	0xc4, 0x58, 0xb8, 0x0e, 0x8e, 0xac, 0xfa, 0xee, 0x26, 0x0a, 0x56, 0x91, 0x2f, 0x01, 0x52, 0x14,
	0x40, 0x4e, 0xd4, 0xa3, 0x03, 0x0c, 0x0f, 0xf9, 0x46, 0x02, 0x56, 0x5c, 0x1e, 0xbe, 0x03, 0x86,
	0x68, 0xe3, 0xaa, 0xeb, 0xe3, 0x1b, 0xfe, 0x2d, 0xdf, 0xe6, 0x9b, 0xd4, 0x29, 0x8e, 0x78, 0x9c,
	0x22, 0x1a, 0x9e, 0xeb, 0x63, 0xc3, 0xf5, 0x8d, 0x86, 0xaf, 0xe2, 0x45, 0x44, 0x49, 0x5c, 0x2c,
	0x9b, 0xf7, 0x6e, 0x5a, 0x75, 0xe4, 0x36, 0x30, 0x4b, 0x4e, 0xd9, 0x66, 0x5c, 0xd4, 0xcd, 0x7b,
	0x06, 0xe6, 0x7d, 0x6a, 0x5c, 0x28, 0x22, 0xf0, 0xbf, 0xc1, 0xe8, 0x55, 0x54, 0xb6, 0x4d, 0x1f,
	0x31, 0xaf, 0x6d, 0x5f, 0x71, 0x1b, 0x0e, 0xa6, 0x9b, 0x57, 0x76, 0xfe, 0x79, 0x8e, 0x54, 0xac,
	0xb0, 0x21, 0x46, 0x8d, 0x8d, 0x31, 0xca, 0x64, 0x90, 0x02, 0x99, 0x84, 0x41, 0x33, 0xbe, 0xa8,
	0xf8, 0xbe, 0x1f, 0x19, 0x5f, 0x58, 0x73, 0xa0, 0x8c, 0x2f, 0x41, 0x0e, 0x92, 0xf1, 0xed, 0x4d,
	0x83, 0x15, 0x61, 0x34, 0xe3, 0x0b, 0xc8, 0x67, 0x9a, 0xf1, 0x65, 0x31, 0x1e, 0xcd, 0xf8, 0xbf,
	0x4b, 0x35, 0x2d, 0xa2, 0xbe, 0x38, 0xa7, 0x96, 0x7e, 0xd4, 0x6f, 0xd4, 0xef, 0x78, 0xdb, 0x53,
	0x33, 0x0f, 0x1d, 0x03, 0x5f, 0x03, 0x99, 0x92, 0x5d, 0x75, 0x7d, 0x0b, 0xd7, 0xea, 0x3c, 0x87,
	0xcb, 0x9d, 0xd2, 0x14, 0x1d, 0x8a, 0x54, 0x73, 0x34, 0xbc, 0x0e, 0x86, 0xd7, 0x51, 0x10, 0x58,
	0xae, 0x53, 0xba, 0x7d, 0xdb, 0x72, 0x2c, 0xbc, 0xcd, 0x43, 0x43, 0xe6, 0xbd, 0x80, 0x75, 0x1b,
	0x26, 0xef, 0x57, 0x70, 0xa2, 0xa2, 0xf0, 0x3d, 0x30, 0xa0, 0xec, 0x03, 0x7c, 0x15, 0x73, 0x72,
	0xf6, 0x91, 0x3d, 0xa2, 0x19, 0x34, 0x8c, 0xe2, 0x46, 0x99, 0xf4, 0xa8, 0x41, 0xa3, 0x08, 0xe8,
	0x57, 0xc1, 0x50, 0x98, 0x05, 0xf0, 0x12, 0x48, 0xf3, 0xaa, 0x3d, 0xc8, 0x69, 0x64, 0xeb, 0x6e,
	0xe9, 0x26, 0x39, 0x8e, 0xf8, 0x59, 0x96, 0x0f, 0xcf, 0x34, 0x3c, 0xde, 0x0c, 0x85, 0xc7, 0x58,
	0xf4, 0xfc, 0xd4, 0x41, 0x74, 0x2c, 0x46, 0xa2, 0xe3, 0x58, 0x0c, 0xa3, 0xd3, 0xe0, 0x38, 0xfe,
	0xe4, 0x41, 0x7e, 0x3c, 0x1c, 0x1c, 0x69, 0x8e, 0x15, 0xe8, 0x3f, 0xd3, 0xc0, 0x00, 0x07, 0xfc,
	0x2e, 0x42, 0xa3, 0x18, 0x0e, 0x8d, 0xf8, 0x41, 0x32, 0x1a, 0x19, 0x7f, 0xe8, 0x91, 0xf6, 0x74,
	0x1d, 0x18, 0xaf, 0x03, 0x40, 0x6a, 0xa2, 0xf5, 0xc6, 0xa6, 0x83, 0x30, 0x8f, 0x0c, 0x59, 0x80,
	0xd0, 0x2a, 0x2a, 0xa0, 0x5d, 0x6a, 0x01, 0xd2, 0x14, 0x88, 0x56, 0x61, 0x3d, 0xdd, 0x57, 0x61,
	0xcc, 0x80, 0x59, 0x6e, 0x40, 0x6f, 0xcc, 0x80, 0xd9, 0x64, 0x03, 0x66, 0x43, 0x06, 0xc8, 0x12,
	0xac, 0xaf, 0xfb, 0x12, 0xec, 0x22, 0xe8, 0x27, 0x25, 0xc7, 0xd2, 0x55, 0x5a, 0xce, 0x66, 0x9b,
	0x65, 0x35, 0x29, 0x52, 0x8c, 0x50, 0xfd, 0xc4, 0x07, 0x92, 0xb2, 0x6b, 0xe3, 0x9e, 0x6d, 0x3a,
	0x1b, 0x2b, 0x4b, 0xb4, 0x74, 0xcd, 0x36, 0x37, 0x93, 0x2d, 0xd2, 0x6e, 0x6c, 0x39, 0x96, 0x1a,
	0x5b, 0x62, 0xb0, 0xfe, 0x47, 0x0d, 0x64, 0x43, 0x54, 0x84, 0xaf, 0x80, 0x8c, 0xa8, 0x2f, 0x44,
	0x88, 0x8e, 0x13, 0x1c, 0x51, 0xa9, 0xa8, 0xe4, 0x6c, 0x8e, 0x84, 0x35, 0x00, 0x4b, 0xb6, 0xed,
	0x96, 0x4d, 0x8c, 0x2a, 0xa2, 0x2a, 0x0e, 0xe8, 0xf2, 0x0d, 0xce, 0x5f, 0xe6, 0xb6, 0x4c, 0x98,
	0x62, 0x84, 0x21, 0x0b, 0x6a, 0x05, 0xee, 0x1f, 0xbb, 0xc5, 0x21, 0x76, 0xad, 0x34, 0xa7, 0x07,
	0xc1, 0x1d, 0xcb, 0xd3, 0xd7, 0x12, 0x30, 0xf5, 0x3f, 0xa5, 0x40, 0xff, 0xfa, 0xc2, 0x5a, 0xc3,
	0x46, 0xf0, 0x05, 0xd0, 0x47, 0x72, 0x7c, 0xc0, 0x89, 0x35, 0xba, 0xb7, 0x5b, 0x1c, 0x26, 0x05,
	0x81, 0x6a, 0x23, 0x1b, 0x01, 0xcf, 0x83, 0xfe, 0x52, 0x19, 0x5b, 0xae, 0xc3, 0x29, 0x35, 0x46,
	0xa2, 0xcd, 0xa4, 0x2d, 0xaa, 0x3f, 0xd9, 0x18, 0x38, 0x0b, 0x32, 0xab, 0x08, 0xf9, 0xb4, 0x9a,
	0xe4, 0x1c, 0xca, 0xed, 0xed, 0x16, 0xc7, 0x3c, 0x84, 0x7c, 0xa3, 0x4a, 0x5a, 0x55, 0x2f, 0xc8,
	0xa1, 0xf0, 0x2c, 0xe8, 0x2d, 0x79, 0x1e, 0x0b, 0x94, 0xcc, 0x3c, 0x24, 0x24, 0x37, 0x3d, 0x4f,
	0x35, 0x87, 0xf6, 0xc3, 0x0b, 0xe0, 0x70, 0xc9, 0xf3, 0x6e, 0x05, 0x48, 0x1c, 0x7f, 0x8e, 0x91,
	0x22, 0xcb, 0xf4, 0x3c, 0xa3, 0x11, 0x20, 0xf5, 0xc8, 0x23, 0x86, 0xc1, 0xff, 0x04, 0x80, 0xff,
	0xb9, 0xe0, 0x7b, 0xfc, 0x9c, 0x73, 0x62, 0x6f, 0xb7, 0x98, 0x13, 0x42, 0x31, 0xb3, 0x94, 0xf1,
	0xfa, 0x17, 0x29, 0x90, 0x0d, 0x95, 0xc8, 0xcf, 0x76, 0x23, 0x7d, 0x2b, 0xb4, 0x91, 0x16, 0x92,
	0x2f, 0x89, 0x3a, 0xd8, 0x4e, 0x57, 0x22, 0xdb, 0xe9, 0x89, 0x16, 0x48, 0x9d, 0x6e, 0xaa, 0xfa,
	0x93, 0x07, 0xf9, 0x89, 0xf0, 0xa6, 0x3a, 0x1c, 0x70, 0x24, 0xe6, 0xcf, 0x40, 0xff, 0x8d, 0x06,
	0x8e, 0x84, 0xd0, 0xbf, 0x8b, 0x1d, 0xf6, 0x4c, 0x78, 0x87, 0x6d, 0x75, 0x8d, 0x16, 0xdd, 0x67,
	0x3f, 0x49, 0x45, 0x6c, 0xa3, 0x5e, 0xfa, 0x1f, 0x30, 0x22, 0xe2, 0x72, 0x9d, 0xdf, 0x7e, 0xf2,
	0x95, 0x1e, 0x99, 0x66, 0xb7, 0xa2, 0xd3, 0xa2, 0x7d, 0xbe, 0x48, 0x2a, 0x69, 0x79, 0x08, 0x11,
	0x97, 0xa5, 0xea, 0x49, 0x28, 0x0a, 0x05, 0xdf, 0x22, 0xe5, 0x07, 0x4d, 0xcd, 0x12, 0x3d, 0x45,
	0xe9, 0x4e, 0xe9, 0x18, 0xb0, 0x2e, 0x83, 0x29, 0x0a, 0x17, 0x1e, 0x21, 0x21, 0xf8, 0x16, 0xc8,
	0x2e, 0x9b, 0xb8, 0x5c, 0x5b, 0xf5, 0xd1, 0x6d, 0xeb, 0x1e, 0x0a, 0x72, 0x3d, 0x14, 0x65, 0x92,
	0x6f, 0x16, 0xb9, 0x3a, 0xe9, 0x34, 0x3c, 0xde, 0xab, 0x20, 0x85, 0xc5, 0x74, 0x1b, 0x8c, 0x26,
	0xac, 0x3e, 0x29, 0xb0, 0xa2, 0xfb, 0x98, 0xdc, 0x13, 0xf7, 0xd9, 0xcb, 0x0a, 0x20, 0x4d, 0x8b,
	0x16, 0x0b, 0x05, 0x6c, 0x6a, 0x6b, 0xf2, 0x37, 0x2d, 0x46, 0xf8, 0x4c, 0xbe, 0x1f, 0xc5, 0x88,
	0x70, 0xeb, 0x41, 0x8a, 0x11, 0x81, 0x71, 0x90, 0x62, 0x24, 0x10, 0xe5, 0x1a, 0x29, 0x46, 0x38,
	0xe0, 0x33, 0x2d, 0x46, 0xc4, 0x6d, 0x70, 0x34, 0x48, 0xbe, 0xee, 0x91, 0xf6, 0x50, 0x37, 0x2c,
	0x27, 0x86, 0x07, 0xe1, 0xc7, 0x49, 0xce, 0x8f, 0xbc, 0x0c, 0x88, 0x18, 0x8b, 0xe3, 0xe1, 0x30,
	0x07, 0x32, 0x1b, 0x96, 0x8f, 0x1b, 0xa6, 0xbd, 0xe4, 0xf1, 0xdc, 0x72, 0x82, 0xe3, 0x8c, 0x6d,
	0xb1, 0x0e, 0xc3, 0x0a, 0xa5, 0x0b, 0x39, 0x1c, 0x1a, 0x22, 0x7f, 0xb1, 0x14, 0x33, 0xce, 0xe5,
	0x5a, 0xe5, 0xb0, 0x57, 0x41, 0xfa, 0xfa, 0x3c, 0x2b, 0xa7, 0x79, 0x5d, 0x22, 0x19, 0x2d, 0xcf,
	0x49, 0x6a, 0x96, 0x17, 0x83, 0xe1, 0x1d, 0x30, 0x7c, 0xf3, 0xfa, 0x3a, 0x71, 0x02, 0xf2, 0xb9,
	0x7c, 0x5f, 0x64, 0x03, 0x8d, 0xf4, 0x53, 0x3a, 0xc9, 0xa3, 0x36, 0xb6, 0x03, 0x23, 0xa0, 0xbd,
	0x71, 0x2d, 0x51, 0x64, 0xae, 0xec, 0x8a, 0x6d, 0x21, 0x07, 0x73, 0x65, 0xfd, 0x71, 0x65, 0x6a,
	0x7f, 0x5c, 0x59, 0x99, 0xf6, 0x26, 0x2b, 0x53, 0x25, 0xf5, 0xb7, 0x49, 0x5e, 0x53, 0xc8, 0x7b,
	0x80, 0xb0, 0xd7, 0x1f, 0xa6, 0x40, 0x5a, 0xdc, 0xf9, 0x7f, 0x3f, 0xce, 0xe1, 0xc2, 0x9a, 0x03,
	0x9d, 0xc3, 0x25, 0xc8, 0x81, 0xa2, 0xbb, 0xaa, 0x1c, 0xc3, 0x05, 0xe2, 0x33, 0x3d, 0x86, 0xcb,
	0xd7, 0x98, 0x68, 0x7c, 0x7f, 0xab, 0x58, 0x44, 0x5d, 0x71, 0x05, 0x0c, 0x96, 0x30, 0x36, 0xcb,
	0x35, 0x7e, 0x45, 0xc8, 0x58, 0x20, 0x2f, 0xb7, 0x4d, 0xda, 0xc7, 0xd3, 0xbb, 0x7a, 0xb9, 0xad,
	0x0a, 0xc1, 0x6b, 0xe0, 0xf0, 0x92, 0x43, 0x8a, 0x4c, 0x96, 0x02, 0xd4, 0x97, 0x1b, 0x56, 0x7c,
	0xb2, 0x35, 0x65, 0x77, 0x63, 0x86, 0x4f, 0x06, 0xaa, 0x65, 0x1b, 0x97, 0x85, 0x8b, 0x20, 0x7d,
	0xa3, 0x81, 0x19, 0x4e, 0x4f, 0x32, 0xce, 0x71, 0x8e, 0x33, 0xea, 0x36, 0x70, 0x0c, 0x48, 0x4a,
	0xeb, 0xef, 0x80, 0xa1, 0xf0, 0x4a, 0x1e, 0x84, 0xea, 0xbf, 0xec, 0x01, 0xa3, 0x09, 0x41, 0x08,
	0x3f, 0xd7, 0xc0, 0xd8, 0x15, 0xe4, 0x63, 0xeb, 0xb6, 0x45, 0xaa, 0xee, 0x20, 0xb4, 0x41, 0x0e,
	0x5c, 0x9a, 0x6d, 0x17, 0xc1, 0xd3, 0x49, 0x82, 0xec, 0xba, 0x73, 0x7a, 0x6f, 0xb7, 0x78, 0x4e,
	0x89, 0xeb, 0xb2, 0x32, 0x32, 0xa9, 0xe8, 0x48, 0xb4, 0x01, 0x5e, 0x05, 0xe0, 0xa6, 0xdf, 0x08,
	0xf0, 0x9a, 0xeb, 0x62, 0x9e, 0x98, 0xe7, 0x4f, 0xef, 0xed, 0x16, 0x27, 0x15, 0x64, 0x4c, 0x06,
	0x18, 0x3e, 0x19, 0xa1, 0x96, 0xc2, 0x4d, 0x39, 0xb8, 0x02, 0xb2, 0xe4, 0x50, 0x71, 0x17, 0x55,
	0x48, 0xd9, 0xbe, 0x54, 0xe1, 0x65, 0xc7, 0xd4, 0xde, 0x6e, 0xf1, 0xb4, 0x02, 0x64, 0xb2, 0x31,
	0x06, 0xad, 0xf8, 0x43, 0x67, 0xae, 0xb0, 0x78, 0x61, 0x01, 0xe4, 0x5b, 0x4e, 0xbc, 0xab, 0x1b,
	0xd9, 0x3f, 0xb3, 0x35, 0x89, 0xee, 0xc2, 0x70, 0x09, 0x0c, 0xaa, 0x0a, 0xf8, 0x4a, 0x9f, 0xd9,
	0xdb, 0x2d, 0x9e, 0x54, 0xf6, 0x65, 0xd5, 0xa5, 0x2a, 0xa9, 0x55, 0x51, 0xf8, 0x23, 0xb2, 0xbc,
	0x74, 0x7e, 0xa5, 0x06, 0xae, 0x21, 0x07, 0x93, 0xf6, 0xe6, 0x99, 0x68, 0xfd, 0xd1, 0xa7, 0xf9,
	0xf3, 0xeb, 0xd8, 0xbf, 0xe6, 0x34, 0xea, 0x53, 0x09, 0xa6, 0x4c, 0x37, 0x65, 0x49, 0x90, 0x07,
	0x2f, 0xec, 0xed, 0x16, 0x8b, 0xc2, 0x5f, 0x21, 0xc0, 0xd0, 0x5a, 0x26, 0x28, 0x8c, 0xac, 0x65,
	0x4f, 0x78, 0x2d, 0xf9, 0x94, 0x9e, 0x62, 0x2d, 0x7b, 0xc3, 0x6b, 0xc9, 0x81, 0x3a, 0x5d, 0x4b,
	0xfd, 0x32, 0x18, 0x8e, 0x4c, 0x11, 0x66, 0x41, 0x66, 0xd9, 0x74, 0x2a, 0x26, 0x76, 0xfd, 0xed,
	0x91, 0x43, 0x70, 0x10, 0xa4, 0x6f, 0x78, 0x64, 0x06, 0xa6, 0x3d, 0xa2, 0xc1, 0x34, 0xe8, 0x5d,
	0x71, 0x1d, 0x34, 0x92, 0xd2, 0x7f, 0x9e, 0x02, 0xfd, 0x6c, 0xb3, 0x7c, 0xb6, 0x99, 0xe3, 0x8d,
	0x50, 0xe6, 0x18, 0x8d, 0xbc, 0x2e, 0x77, 0x90, 0x37, 0x16, 0x22, 0x79, 0xe3, 0x68, 0x14, 0xa2,
	0xd3, 0xac, 0x91, 0x7d, 0xf2, 0x20, 0x9f, 0x81, 0x87, 0x31, 0x95, 0x0a, 0xf4, 0xcf, 0x34, 0x00,
	0x18, 0xc2, 0x77, 0x91, 0x25, 0x26, 0xc2, 0x59, 0x22, 0xf6, 0xaa, 0x1e, 0xcd, 0x11, 0x8b, 0xc2,
	0x18, 0x3a, 0xe7, 0x39, 0x90, 0x29, 0x55, 0xea, 0x96, 0x43, 0xcf, 0xdf, 0x5a, 0xb8, 0x64, 0x33,
	0x49, 0x47, 0xf4, 0x14, 0xde, 0x1c, 0xae, 0x0f, 0x81, 0x41, 0xd5, 0x31, 0x97, 0xfe, 0xd9, 0x07,
	0x80, 0x78, 0xf4, 0xd9, 0xb8, 0x08, 0x2d, 0x30, 0x5c, 0x6a, 0x60, 0xb7, 0x54, 0xa9, 0xc8, 0x37,
	0xfc, 0xf8, 0xdb, 0x71, 0x21, 0xde, 0xa4, 0x5f, 0x78, 0x7c, 0x3f, 0xdf, 0x5f, 0xf6, 0x91, 0x89,
	0xd1, 0x17, 0xf7, 0xf3, 0xda, 0x27, 0x7f, 0xf9, 0xf6, 0xd7, 0xa9, 0x13, 0xe0, 0xd0, 0x9c, 0x76,
	0x4e, 0x3f, 0xaa, 0x64, 0xe2, 0x19, 0xf9, 0x04, 0x0e, 0x31, 0x80, 0x44, 0xd5, 0x55, 0x64, 0x23,
	0x8c, 0xba, 0xd4, 0x76, 0x99, 0x68, 0xab, 0x50, 0x49, 0xa9, 0xed, 0x34, 0x38, 0x34, 0x77, 0xe8,
	0xdc, 0x44, 0xa2, 0x32, 0xd2, 0xb8, 0x62, 0xd6, 0xd1, 0xc7, 0xd0, 0x61, 0x13, 0x5c, 0x40, 0xb8,
	0x4b, 0x95, 0xaf, 0x3c, 0xbe, 0x9f, 0xef, 0xa9, 0x22, 0x1c, 0xd6, 0x07, 0xf7, 0xd3, 0xe7, 0x82,
	0x11, 0xa2, 0x8f, 0x70, 0x40, 0x2a, 0x3c, 0x2a, 0x69, 0x41, 0x3f, 0xbc, 0x60, 0x01, 0x19, 0x14,
	0xe2, 0x5f, 0x2c, 0x90, 0x21, 0xba, 0xf1, 0xf8, 0x7e, 0xbe, 0x97, 0x70, 0x41, 0x6a, 0x3e, 0x4e,
	0x35, 0xb7, 0x70, 0x6b, 0x83, 0xb9, 0xf5, 0x96, 0x57, 0x31, 0xbb, 0x76, 0xeb, 0x6b, 0xc4, 0xad,
	0x0d, 0x2a, 0x29, 0x95, 0x9d, 0xa1, 0x8b, 0x58, 0xd8, 0x6f, 0x9e, 0xff, 0x0b, 0x8e, 0x10, 0xb5,
	0x74, 0x42, 0xfb, 0x4d, 0xf4, 0x94, 0xd4, 0xdc, 0xfa, 0x5b, 0x26, 0x3d, 0xfb, 0xf8, 0x7e, 0xbe,
	0x8f, 0x7e, 0x58, 0x42, 0x4c, 0xb9, 0xa0, 0x15, 0xde, 0xf9, 0xd5, 0x4e, 0x3e, 0xb5, 0x75, 0xf1,
	0xf3, 0x9d, 0x7c, 0xf3, 0x3b, 0x8a, 0x87, 0x3b, 0x79, 0xf9, 0xb1, 0xc9, 0xa3, 0x9d, 0xfc, 0x94,
	0xf2, 0xe9, 0x09, 0x59, 0x2b, 0xd8, 0xe3, 0x35, 0x30, 0xe4, 0x44, 0x81, 0xbd, 0x9e, 0x1b, 0x60,
	0x48, 0x5d, 0x49, 0x69, 0x2f, 0xae, 0xf6, 0x43, 0xb4, 0x97, 0x0f, 0x59, 0xf1, 0x07, 0x94, 0x42,
	0xbc, 0xa9, 0x63, 0xda, 0xcb, 0xf3, 0x4d, 0x98, 0xf6, 0x5d, 0x6a, 0xeb, 0x90, 0xf6, 0x52, 0x59,
	0x12, 0xed, 0xbb, 0x54, 0xd9, 0x09, 0xed, 0x13, 0xf4, 0x29, 0xb4, 0x97, 0x0a, 0xf7, 0xa5, 0xbd,
	0xfa, 0x3c, 0xd6, 0x19, 0xed, 0x9b, 0x6e, 0x0d, 0xd1, 0xbe, 0xcb, 0x39, 0x76, 0x4a, 0xfb, 0x84,
	0x79, 0xaa, 0xb4, 0xdf, 0x6f, 0xa2, 0x31, 0xda, 0x27, 0x7c, 0x62, 0xd7, 0x96, 0xf6, 0x52, 0x3f,
	0xa1, 0xbd, 0x10, 0x66, 0xb4, 0x97, 0xba, 0xdb, 0xd3, 0xfe, 0xaf, 0x7d, 0x20, 0xc3, 0xaf, 0xcb,
	0x37, 0x2e, 0x42, 0x04, 0x86, 0x38, 0xeb, 0xc5, 0xf3, 0x54, 0xec, 0x69, 0xa4, 0x10, 0x6b, 0xd1,
	0x67, 0x12, 0x28, 0x7f, 0x9c, 0x51, 0x7e, 0x4c, 0xf5, 0x96, 0x78, 0xdd, 0x81, 0x1e, 0xf3, 0x11,
	0x63, 0x7c, 0x37, 0x9a, 0x5e, 0x4d, 0xa0, 0xfb, 0x29, 0x4a, 0xf7, 0xe7, 0x92, 0x14, 0x35, 0x57,
	0xe5, 0x23, 0x36, 0xb1, 0x05, 0x84, 0xbb, 0x51, 0xf7, 0x72, 0x94, 0xea, 0x54, 0x17, 0xdc, 0x47,
	0x97, 0xcd, 0x22, 0x8b, 0xac, 0xb6, 0x50, 0xd6, 0x62, 0xfd, 0x63, 0x0f, 0x70, 0x94, 0xe7, 0xe7,
	0x63, 0x3c, 0x2f, 0x50, 0xb5, 0xc9, 0xbe, 0xfc, 0x3f, 0xe6, 0x4b, 0x46, 0xf3, 0x6e, 0x26, 0x77,
	0x39, 0x81, 0xe3, 0xa7, 0x19, 0xc7, 0xf7, 0x99, 0xe0, 0x87, 0x2c, 0x94, 0xe9, 0x54, 0xf6, 0x99,
	0xa1, 0x1e, 0x65, 0x78, 0xfc, 0x23, 0xcf, 0x38, 0xc1, 0x17, 0x25, 0xc1, 0xe5, 0x83, 0xe0, 0xc3,
	0x9d, 0xbc, 0x78, 0x31, 0x7d, 0xb4, 0x93, 0x7f, 0xbe, 0xf9, 0x7c, 0xda, 0x9e, 0xdd, 0xff, 0xea,
	0x07, 0xc3, 0xa1, 0xab, 0xd4, 0x8d, 0x8b, 0xf0, 0x07, 0x60, 0x8c, 0x73, 0x3c, 0xfc, 0x7e, 0xd0,
	0xe2, 0x8a, 0xba, 0xd0, 0xa2, 0x5d, 0x9f, 0x4d, 0x60, 0xbd, 0xce, 0x58, 0x7f, 0x5c, 0xf5, 0x5f,
	0xe4, 0xfa, 0x1d, 0xfe, 0x44, 0x03, 0xe3, 0x4d, 0xf6, 0x1f, 0xcc, 0x86, 0xff, 0x4a, 0x88, 0x87,
	0x73, 0x34, 0x1e, 0x4e, 0xb7, 0x31, 0xa1, 0xb9, 0x92, 0x3b, 0x1a, 0x73, 0xc6, 0x02, 0xc2, 0x07,
	0x33, 0xe4, 0x3f, 0xa2, 0x91, 0x42, 0xad, 0x80, 0x9d, 0x59, 0xf1, 0x43, 0x70, 0x54, 0x04, 0x4c,
	0xd8, 0x8a, 0x16, 0xa4, 0x6a, 0xf1, 0xdc, 0x42, 0x83, 0xe7, 0xa5, 0x58, 0xf0, 0x9c, 0xa4, 0x96,
	0xb4, 0x5d, 0x92, 0x9f, 0xf2, 0x25, 0x61, 0x41, 0x74, 0x30, 0x4f, 0xbc, 0x91, 0x10, 0x56, 0x2f,
	0xb2, 0xb0, 0xea, 0xcc, 0x1b, 0x1f, 0x81, 0x63, 0x32, 0xba, 0x3a, 0x72, 0xc7, 0x54, 0x34, 0xc6,
	0x5a, 0x7d, 0xea, 0x1c, 0x8f, 0xb4, 0xf7, 0x65, 0xa4, 0x45, 0x5f, 0x89, 0x1e, 0xee, 0xe4, 0xc3,
	0xef, 0x6b, 0x8f, 0x76, 0xf2, 0x46, 0xf4, 0xc9, 0x6d, 0xff, 0xd4, 0xc2, 0xaf, 0x32, 0x43, 0xa9,
	0x45, 0x3c, 0x36, 0xc4, 0x2e, 0xba, 0x0b, 0xb1, 0x96, 0x8e, 0x53, 0x8b, 0xb8, 0xab, 0x0f, 0xa7,
	0x96, 0x6e, 0x34, 0x75, 0x98, 0x5a, 0x84, 0xa2, 0xa4, 0xd4, 0xd2, 0x8d, 0xba, 0x4e, 0x52, 0x4b,
	0x5c, 0x97, 0x92, 0x5a, 0x84, 0xb2, 0x7d, 0x53, 0x8b, 0xf2, 0x72, 0xd1, 0x59, 0x6a, 0x91, 0xbe,
	0x0c, 0xa5, 0x96, 0x6e, 0x26, 0xd7, 0x69, 0x6a, 0x89, 0x4f, 0x50, 0x4d, 0x2d, 0xfb, 0xcc, 0x50,
	0x8f, 0xd3, 0x3e, 0xfa, 0xdd, 0x7d, 0xdb, 0xd4, 0x22, 0x94, 0x93, 0xd4, 0xc2, 0x45, 0x59, 0x6a,
	0x11, 0x7a, 0xdb, 0xb3, 0xfb, 0xef, 0x7d, 0x00, 0x88, 0xeb, 0xcb, 0x8d, 0x8b, 0xb0, 0x26, 0xcf,
	0x0b, 0xf2, 0xc2, 0x3d, 0x7e, 0xd3, 0x5b, 0x88, 0x37, 0x75, 0xce, 0x70, 0x01, 0x1b, 0xa8, 0xc7,
	0x85, 0x2e, 0x95, 0x75, 0x4a, 0xf2, 0x6a, 0xb4, 0xaa, 0xad, 0xcb, 0xd3, 0x42, 0x97, 0x1a, 0x3b,
	0xe2, 0x79, 0x35, 0x7e, 0x38, 0x91, 0x87, 0x05, 0xa9, 0x6f, 0xdf, 0xc3, 0x82, 0x7a, 0x89, 0xdf,
	0x21, 0xd3, 0xab, 0xe1, 0x23, 0x18, 0x67, 0x7a, 0x77, 0x33, 0xec, 0x98, 0xec, 0xd5, 0x76, 0x47,
	0x85, 0xfd, 0xa6, 0x19, 0x3b, 0x2a, 0x24, 0xfc, 0x1f, 0x48, 0x9c, 0xee, 0x6f, 0x2b, 0x74, 0xaf,
	0x36, 0x4f, 0x0a, 0x42, 0x96, 0x9d, 0x14, 0xa4, 0xea, 0xf6, 0x84, 0xff, 0xac, 0x0f, 0xa4, 0xd9,
	0x5c, 0x36, 0x2e, 0xc2, 0x0d, 0x90, 0xe5, 0x74, 0xe7, 0x77, 0x84, 0xd1, 0x0b, 0xab, 0x42, 0xb4,
	0x41, 0x3f, 0x95, 0x40, 0xf4, 0x61, 0x46, 0xf4, 0xf4, 0x0c, 0xbf, 0x64, 0x83, 0x26, 0x5b, 0x78,
	0x46, 0xee, 0x8e, 0xa1, 0x5f, 0x4c, 0xa0, 0xf5, 0x38, 0xa5, 0xf5, 0x11, 0x81, 0xdc, 0xf4, 0xfa,
	0xfb, 0xcc, 0xf4, 0x05, 0x84, 0x3b, 0xc6, 0x9f, 0x8a, 0x92, 0x98, 0x82, 0xc3, 0x04, 0xf0, 0x0f,
	0x59, 0x32, 0x20, 0xcb, 0xc7, 0xd1, 0x5b, 0xac, 0x67, 0xf4, 0x62, 0x93, 0x92, 0x76, 0x32, 0x46,
	0xda, 0x21, 0xaa, 0xa8, 0xe9, 0x9f, 0x4d, 0xe6, 0x1f, 0x46, 0xd4, 0x8e, 0xed, 0x3f, 0x9f, 0x40,
	0xd1, 0x1c, 0xa3, 0x68, 0xc2, 0x1c, 0x3e, 0x60, 0xb1, 0x4e, 0xcd, 0x6d, 0x3f, 0x89, 0x93, 0x51,
	0x52, 0xc6, 0xfe, 0x79, 0x28, 0x4e, 0xc9, 0x6b, 0x92, 0x92, 0xe2, 0x66, 0xf5, 0xe1, 0x4e, 0x9e,
	0xdf, 0x34, 0x3f, 0xda, 0xc9, 0x9f, 0x95, 0xb7, 0xce, 0x6d, 0xd9, 0x38, 0x3f, 0xf8, 0xe5, 0x37,
	0x13, 0xda, 0x57, 0xdf, 0x4c, 0x68, 0x7f, 0xfb, 0x66, 0x42, 0x5b, 0xd5, 0x36, 0xfb, 0xe9, 0x7f,
	0xc3, 0xbd, 0xf4, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0xf4, 0xc0, 0x8f, 0x14, 0x38, 0x00,
	0x00,
}
