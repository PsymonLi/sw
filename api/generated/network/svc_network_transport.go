// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: svc_network.proto
*/
package network

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerNetworkV1 struct {
	Endpoints EndpointsNetworkV1Server

	AutoAddIPAMPolicyHdlr                   grpctransport.Handler
	AutoAddLbPolicyHdlr                     grpctransport.Handler
	AutoAddNetworkHdlr                      grpctransport.Handler
	AutoAddNetworkInterfaceHdlr             grpctransport.Handler
	AutoAddPolicerProfileHdlr               grpctransport.Handler
	AutoAddRouteTableHdlr                   grpctransport.Handler
	AutoAddRoutingConfigHdlr                grpctransport.Handler
	AutoAddServiceHdlr                      grpctransport.Handler
	AutoAddVirtualRouterHdlr                grpctransport.Handler
	AutoAddVirtualRouterPeeringGroupHdlr    grpctransport.Handler
	AutoDeleteIPAMPolicyHdlr                grpctransport.Handler
	AutoDeleteLbPolicyHdlr                  grpctransport.Handler
	AutoDeleteNetworkHdlr                   grpctransport.Handler
	AutoDeleteNetworkInterfaceHdlr          grpctransport.Handler
	AutoDeletePolicerProfileHdlr            grpctransport.Handler
	AutoDeleteRouteTableHdlr                grpctransport.Handler
	AutoDeleteRoutingConfigHdlr             grpctransport.Handler
	AutoDeleteServiceHdlr                   grpctransport.Handler
	AutoDeleteVirtualRouterHdlr             grpctransport.Handler
	AutoDeleteVirtualRouterPeeringGroupHdlr grpctransport.Handler
	AutoGetIPAMPolicyHdlr                   grpctransport.Handler
	AutoGetLbPolicyHdlr                     grpctransport.Handler
	AutoGetNetworkHdlr                      grpctransport.Handler
	AutoGetNetworkInterfaceHdlr             grpctransport.Handler
	AutoGetPolicerProfileHdlr               grpctransport.Handler
	AutoGetRouteTableHdlr                   grpctransport.Handler
	AutoGetRoutingConfigHdlr                grpctransport.Handler
	AutoGetServiceHdlr                      grpctransport.Handler
	AutoGetVirtualRouterHdlr                grpctransport.Handler
	AutoGetVirtualRouterPeeringGroupHdlr    grpctransport.Handler
	AutoLabelIPAMPolicyHdlr                 grpctransport.Handler
	AutoLabelLbPolicyHdlr                   grpctransport.Handler
	AutoLabelNetworkHdlr                    grpctransport.Handler
	AutoLabelNetworkInterfaceHdlr           grpctransport.Handler
	AutoLabelPolicerProfileHdlr             grpctransport.Handler
	AutoLabelRouteTableHdlr                 grpctransport.Handler
	AutoLabelRoutingConfigHdlr              grpctransport.Handler
	AutoLabelServiceHdlr                    grpctransport.Handler
	AutoLabelVirtualRouterHdlr              grpctransport.Handler
	AutoLabelVirtualRouterPeeringGroupHdlr  grpctransport.Handler
	AutoListIPAMPolicyHdlr                  grpctransport.Handler
	AutoListLbPolicyHdlr                    grpctransport.Handler
	AutoListNetworkHdlr                     grpctransport.Handler
	AutoListNetworkInterfaceHdlr            grpctransport.Handler
	AutoListPolicerProfileHdlr              grpctransport.Handler
	AutoListRouteTableHdlr                  grpctransport.Handler
	AutoListRoutingConfigHdlr               grpctransport.Handler
	AutoListServiceHdlr                     grpctransport.Handler
	AutoListVirtualRouterHdlr               grpctransport.Handler
	AutoListVirtualRouterPeeringGroupHdlr   grpctransport.Handler
	AutoUpdateIPAMPolicyHdlr                grpctransport.Handler
	AutoUpdateLbPolicyHdlr                  grpctransport.Handler
	AutoUpdateNetworkHdlr                   grpctransport.Handler
	AutoUpdateNetworkInterfaceHdlr          grpctransport.Handler
	AutoUpdatePolicerProfileHdlr            grpctransport.Handler
	AutoUpdateRouteTableHdlr                grpctransport.Handler
	AutoUpdateRoutingConfigHdlr             grpctransport.Handler
	AutoUpdateServiceHdlr                   grpctransport.Handler
	AutoUpdateVirtualRouterHdlr             grpctransport.Handler
	AutoUpdateVirtualRouterPeeringGroupHdlr grpctransport.Handler
}

// MakeGRPCServerNetworkV1 creates a GRPC server for NetworkV1 service
func MakeGRPCServerNetworkV1(ctx context.Context, endpoints EndpointsNetworkV1Server, logger log.Logger) NetworkV1Server {
	return &grpcServerNetworkV1{
		Endpoints: endpoints,
		AutoAddIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddIPAMPolicyEndpoint,
			DecodeGrpcReqIPAMPolicy,
			EncodeGrpcRespIPAMPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddIPAMPolicy", logger)))...,
		),

		AutoAddLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddLbPolicyEndpoint,
			DecodeGrpcReqLbPolicy,
			EncodeGrpcRespLbPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddLbPolicy", logger)))...,
		),

		AutoAddNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoAddNetworkEndpoint,
			DecodeGrpcReqNetwork,
			EncodeGrpcRespNetwork,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNetwork", logger)))...,
		),

		AutoAddNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoAddNetworkInterfaceEndpoint,
			DecodeGrpcReqNetworkInterface,
			EncodeGrpcRespNetworkInterface,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNetworkInterface", logger)))...,
		),

		AutoAddPolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoAddPolicerProfileEndpoint,
			DecodeGrpcReqPolicerProfile,
			EncodeGrpcRespPolicerProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddPolicerProfile", logger)))...,
		),

		AutoAddRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoAddRouteTableEndpoint,
			DecodeGrpcReqRouteTable,
			EncodeGrpcRespRouteTable,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRouteTable", logger)))...,
		),

		AutoAddRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoAddRoutingConfigEndpoint,
			DecodeGrpcReqRoutingConfig,
			EncodeGrpcRespRoutingConfig,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRoutingConfig", logger)))...,
		),

		AutoAddServiceHdlr: grpctransport.NewServer(
			endpoints.AutoAddServiceEndpoint,
			DecodeGrpcReqService,
			EncodeGrpcRespService,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddService", logger)))...,
		),

		AutoAddVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoAddVirtualRouterEndpoint,
			DecodeGrpcReqVirtualRouter,
			EncodeGrpcRespVirtualRouter,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddVirtualRouter", logger)))...,
		),

		AutoAddVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoAddVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqVirtualRouterPeeringGroup,
			EncodeGrpcRespVirtualRouterPeeringGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddVirtualRouterPeeringGroup", logger)))...,
		),

		AutoDeleteIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteIPAMPolicyEndpoint,
			DecodeGrpcReqIPAMPolicy,
			EncodeGrpcRespIPAMPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteIPAMPolicy", logger)))...,
		),

		AutoDeleteLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteLbPolicyEndpoint,
			DecodeGrpcReqLbPolicy,
			EncodeGrpcRespLbPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteLbPolicy", logger)))...,
		),

		AutoDeleteNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNetworkEndpoint,
			DecodeGrpcReqNetwork,
			EncodeGrpcRespNetwork,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNetwork", logger)))...,
		),

		AutoDeleteNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNetworkInterfaceEndpoint,
			DecodeGrpcReqNetworkInterface,
			EncodeGrpcRespNetworkInterface,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNetworkInterface", logger)))...,
		),

		AutoDeletePolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoDeletePolicerProfileEndpoint,
			DecodeGrpcReqPolicerProfile,
			EncodeGrpcRespPolicerProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeletePolicerProfile", logger)))...,
		),

		AutoDeleteRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRouteTableEndpoint,
			DecodeGrpcReqRouteTable,
			EncodeGrpcRespRouteTable,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRouteTable", logger)))...,
		),

		AutoDeleteRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRoutingConfigEndpoint,
			DecodeGrpcReqRoutingConfig,
			EncodeGrpcRespRoutingConfig,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRoutingConfig", logger)))...,
		),

		AutoDeleteServiceHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteServiceEndpoint,
			DecodeGrpcReqService,
			EncodeGrpcRespService,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteService", logger)))...,
		),

		AutoDeleteVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteVirtualRouterEndpoint,
			DecodeGrpcReqVirtualRouter,
			EncodeGrpcRespVirtualRouter,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteVirtualRouter", logger)))...,
		),

		AutoDeleteVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqVirtualRouterPeeringGroup,
			EncodeGrpcRespVirtualRouterPeeringGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteVirtualRouterPeeringGroup", logger)))...,
		),

		AutoGetIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetIPAMPolicyEndpoint,
			DecodeGrpcReqIPAMPolicy,
			EncodeGrpcRespIPAMPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetIPAMPolicy", logger)))...,
		),

		AutoGetLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetLbPolicyEndpoint,
			DecodeGrpcReqLbPolicy,
			EncodeGrpcRespLbPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetLbPolicy", logger)))...,
		),

		AutoGetNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoGetNetworkEndpoint,
			DecodeGrpcReqNetwork,
			EncodeGrpcRespNetwork,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNetwork", logger)))...,
		),

		AutoGetNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoGetNetworkInterfaceEndpoint,
			DecodeGrpcReqNetworkInterface,
			EncodeGrpcRespNetworkInterface,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNetworkInterface", logger)))...,
		),

		AutoGetPolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoGetPolicerProfileEndpoint,
			DecodeGrpcReqPolicerProfile,
			EncodeGrpcRespPolicerProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetPolicerProfile", logger)))...,
		),

		AutoGetRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoGetRouteTableEndpoint,
			DecodeGrpcReqRouteTable,
			EncodeGrpcRespRouteTable,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRouteTable", logger)))...,
		),

		AutoGetRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoGetRoutingConfigEndpoint,
			DecodeGrpcReqRoutingConfig,
			EncodeGrpcRespRoutingConfig,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRoutingConfig", logger)))...,
		),

		AutoGetServiceHdlr: grpctransport.NewServer(
			endpoints.AutoGetServiceEndpoint,
			DecodeGrpcReqService,
			EncodeGrpcRespService,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetService", logger)))...,
		),

		AutoGetVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoGetVirtualRouterEndpoint,
			DecodeGrpcReqVirtualRouter,
			EncodeGrpcRespVirtualRouter,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetVirtualRouter", logger)))...,
		),

		AutoGetVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoGetVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqVirtualRouterPeeringGroup,
			EncodeGrpcRespVirtualRouterPeeringGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetVirtualRouterPeeringGroup", logger)))...,
		),

		AutoLabelIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoLabelIPAMPolicyEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespIPAMPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelIPAMPolicy", logger)))...,
		),

		AutoLabelLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoLabelLbPolicyEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespLbPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelLbPolicy", logger)))...,
		),

		AutoLabelNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoLabelNetworkEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespNetwork,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelNetwork", logger)))...,
		),

		AutoLabelNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoLabelNetworkInterfaceEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespNetworkInterface,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelNetworkInterface", logger)))...,
		),

		AutoLabelPolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoLabelPolicerProfileEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespPolicerProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelPolicerProfile", logger)))...,
		),

		AutoLabelRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoLabelRouteTableEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespRouteTable,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelRouteTable", logger)))...,
		),

		AutoLabelRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoLabelRoutingConfigEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespRoutingConfig,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelRoutingConfig", logger)))...,
		),

		AutoLabelServiceHdlr: grpctransport.NewServer(
			endpoints.AutoLabelServiceEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespService,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelService", logger)))...,
		),

		AutoLabelVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoLabelVirtualRouterEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespVirtualRouter,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelVirtualRouter", logger)))...,
		),

		AutoLabelVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoLabelVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespVirtualRouterPeeringGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelVirtualRouterPeeringGroup", logger)))...,
		),

		AutoListIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListIPAMPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespIPAMPolicyList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListIPAMPolicy", logger)))...,
		),

		AutoListLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListLbPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespLbPolicyList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListLbPolicy", logger)))...,
		),

		AutoListNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoListNetworkEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNetworkList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNetwork", logger)))...,
		),

		AutoListNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoListNetworkInterfaceEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNetworkInterfaceList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNetworkInterface", logger)))...,
		),

		AutoListPolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoListPolicerProfileEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespPolicerProfileList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListPolicerProfile", logger)))...,
		),

		AutoListRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoListRouteTableEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRouteTableList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRouteTable", logger)))...,
		),

		AutoListRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoListRoutingConfigEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRoutingConfigList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRoutingConfig", logger)))...,
		),

		AutoListServiceHdlr: grpctransport.NewServer(
			endpoints.AutoListServiceEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespServiceList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListService", logger)))...,
		),

		AutoListVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoListVirtualRouterEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespVirtualRouterList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListVirtualRouter", logger)))...,
		),

		AutoListVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoListVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespVirtualRouterPeeringGroupList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListVirtualRouterPeeringGroup", logger)))...,
		),

		AutoUpdateIPAMPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateIPAMPolicyEndpoint,
			DecodeGrpcReqIPAMPolicy,
			EncodeGrpcRespIPAMPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateIPAMPolicy", logger)))...,
		),

		AutoUpdateLbPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateLbPolicyEndpoint,
			DecodeGrpcReqLbPolicy,
			EncodeGrpcRespLbPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateLbPolicy", logger)))...,
		),

		AutoUpdateNetworkHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNetworkEndpoint,
			DecodeGrpcReqNetwork,
			EncodeGrpcRespNetwork,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNetwork", logger)))...,
		),

		AutoUpdateNetworkInterfaceHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNetworkInterfaceEndpoint,
			DecodeGrpcReqNetworkInterface,
			EncodeGrpcRespNetworkInterface,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNetworkInterface", logger)))...,
		),

		AutoUpdatePolicerProfileHdlr: grpctransport.NewServer(
			endpoints.AutoUpdatePolicerProfileEndpoint,
			DecodeGrpcReqPolicerProfile,
			EncodeGrpcRespPolicerProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdatePolicerProfile", logger)))...,
		),

		AutoUpdateRouteTableHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRouteTableEndpoint,
			DecodeGrpcReqRouteTable,
			EncodeGrpcRespRouteTable,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRouteTable", logger)))...,
		),

		AutoUpdateRoutingConfigHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRoutingConfigEndpoint,
			DecodeGrpcReqRoutingConfig,
			EncodeGrpcRespRoutingConfig,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRoutingConfig", logger)))...,
		),

		AutoUpdateServiceHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateServiceEndpoint,
			DecodeGrpcReqService,
			EncodeGrpcRespService,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateService", logger)))...,
		),

		AutoUpdateVirtualRouterHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateVirtualRouterEndpoint,
			DecodeGrpcReqVirtualRouter,
			EncodeGrpcRespVirtualRouter,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateVirtualRouter", logger)))...,
		),

		AutoUpdateVirtualRouterPeeringGroupHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateVirtualRouterPeeringGroupEndpoint,
			DecodeGrpcReqVirtualRouterPeeringGroup,
			EncodeGrpcRespVirtualRouterPeeringGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateVirtualRouterPeeringGroup", logger)))...,
		),
	}
}

func (s *grpcServerNetworkV1) AutoAddIPAMPolicy(ctx oldcontext.Context, req *IPAMPolicy) (*IPAMPolicy, error) {
	_, resp, err := s.AutoAddIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoAddIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoAddIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddLbPolicy(ctx oldcontext.Context, req *LbPolicy) (*LbPolicy, error) {
	_, resp, err := s.AutoAddLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddLbPolicy).V
	return &r, resp.(respNetworkV1AutoAddLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoAddLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddNetwork(ctx oldcontext.Context, req *Network) (*Network, error) {
	_, resp, err := s.AutoAddNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddNetwork).V
	return &r, resp.(respNetworkV1AutoAddNetwork).Err
}

func decodeHTTPrespNetworkV1AutoAddNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Network
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddNetworkInterface(ctx oldcontext.Context, req *NetworkInterface) (*NetworkInterface, error) {
	_, resp, err := s.AutoAddNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddNetworkInterface).V
	return &r, resp.(respNetworkV1AutoAddNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoAddNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterface
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddPolicerProfile(ctx oldcontext.Context, req *PolicerProfile) (*PolicerProfile, error) {
	_, resp, err := s.AutoAddPolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddPolicerProfile).V
	return &r, resp.(respNetworkV1AutoAddPolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoAddPolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddRouteTable(ctx oldcontext.Context, req *RouteTable) (*RouteTable, error) {
	_, resp, err := s.AutoAddRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddRouteTable).V
	return &r, resp.(respNetworkV1AutoAddRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoAddRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTable
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddRoutingConfig(ctx oldcontext.Context, req *RoutingConfig) (*RoutingConfig, error) {
	_, resp, err := s.AutoAddRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddRoutingConfig).V
	return &r, resp.(respNetworkV1AutoAddRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoAddRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfig
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddService(ctx oldcontext.Context, req *Service) (*Service, error) {
	_, resp, err := s.AutoAddServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddService).V
	return &r, resp.(respNetworkV1AutoAddService).Err
}

func decodeHTTPrespNetworkV1AutoAddService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Service
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddVirtualRouter(ctx oldcontext.Context, req *VirtualRouter) (*VirtualRouter, error) {
	_, resp, err := s.AutoAddVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddVirtualRouter).V
	return &r, resp.(respNetworkV1AutoAddVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoAddVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouter
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoAddVirtualRouterPeeringGroup(ctx oldcontext.Context, req *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	_, resp, err := s.AutoAddVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoAddVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoAddVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoAddVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteIPAMPolicy(ctx oldcontext.Context, req *IPAMPolicy) (*IPAMPolicy, error) {
	_, resp, err := s.AutoDeleteIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoDeleteIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoDeleteIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteLbPolicy(ctx oldcontext.Context, req *LbPolicy) (*LbPolicy, error) {
	_, resp, err := s.AutoDeleteLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteLbPolicy).V
	return &r, resp.(respNetworkV1AutoDeleteLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoDeleteLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteNetwork(ctx oldcontext.Context, req *Network) (*Network, error) {
	_, resp, err := s.AutoDeleteNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteNetwork).V
	return &r, resp.(respNetworkV1AutoDeleteNetwork).Err
}

func decodeHTTPrespNetworkV1AutoDeleteNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Network
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteNetworkInterface(ctx oldcontext.Context, req *NetworkInterface) (*NetworkInterface, error) {
	_, resp, err := s.AutoDeleteNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteNetworkInterface).V
	return &r, resp.(respNetworkV1AutoDeleteNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoDeleteNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterface
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeletePolicerProfile(ctx oldcontext.Context, req *PolicerProfile) (*PolicerProfile, error) {
	_, resp, err := s.AutoDeletePolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeletePolicerProfile).V
	return &r, resp.(respNetworkV1AutoDeletePolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoDeletePolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteRouteTable(ctx oldcontext.Context, req *RouteTable) (*RouteTable, error) {
	_, resp, err := s.AutoDeleteRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteRouteTable).V
	return &r, resp.(respNetworkV1AutoDeleteRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoDeleteRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTable
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteRoutingConfig(ctx oldcontext.Context, req *RoutingConfig) (*RoutingConfig, error) {
	_, resp, err := s.AutoDeleteRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteRoutingConfig).V
	return &r, resp.(respNetworkV1AutoDeleteRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoDeleteRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfig
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteService(ctx oldcontext.Context, req *Service) (*Service, error) {
	_, resp, err := s.AutoDeleteServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteService).V
	return &r, resp.(respNetworkV1AutoDeleteService).Err
}

func decodeHTTPrespNetworkV1AutoDeleteService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Service
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteVirtualRouter(ctx oldcontext.Context, req *VirtualRouter) (*VirtualRouter, error) {
	_, resp, err := s.AutoDeleteVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteVirtualRouter).V
	return &r, resp.(respNetworkV1AutoDeleteVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoDeleteVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouter
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoDeleteVirtualRouterPeeringGroup(ctx oldcontext.Context, req *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	_, resp, err := s.AutoDeleteVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoDeleteVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoDeleteVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoDeleteVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetIPAMPolicy(ctx oldcontext.Context, req *IPAMPolicy) (*IPAMPolicy, error) {
	_, resp, err := s.AutoGetIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoGetIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoGetIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetLbPolicy(ctx oldcontext.Context, req *LbPolicy) (*LbPolicy, error) {
	_, resp, err := s.AutoGetLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetLbPolicy).V
	return &r, resp.(respNetworkV1AutoGetLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoGetLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetNetwork(ctx oldcontext.Context, req *Network) (*Network, error) {
	_, resp, err := s.AutoGetNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetNetwork).V
	return &r, resp.(respNetworkV1AutoGetNetwork).Err
}

func decodeHTTPrespNetworkV1AutoGetNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Network
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetNetworkInterface(ctx oldcontext.Context, req *NetworkInterface) (*NetworkInterface, error) {
	_, resp, err := s.AutoGetNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetNetworkInterface).V
	return &r, resp.(respNetworkV1AutoGetNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoGetNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterface
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetPolicerProfile(ctx oldcontext.Context, req *PolicerProfile) (*PolicerProfile, error) {
	_, resp, err := s.AutoGetPolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetPolicerProfile).V
	return &r, resp.(respNetworkV1AutoGetPolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoGetPolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetRouteTable(ctx oldcontext.Context, req *RouteTable) (*RouteTable, error) {
	_, resp, err := s.AutoGetRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetRouteTable).V
	return &r, resp.(respNetworkV1AutoGetRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoGetRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTable
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetRoutingConfig(ctx oldcontext.Context, req *RoutingConfig) (*RoutingConfig, error) {
	_, resp, err := s.AutoGetRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetRoutingConfig).V
	return &r, resp.(respNetworkV1AutoGetRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoGetRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfig
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetService(ctx oldcontext.Context, req *Service) (*Service, error) {
	_, resp, err := s.AutoGetServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetService).V
	return &r, resp.(respNetworkV1AutoGetService).Err
}

func decodeHTTPrespNetworkV1AutoGetService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Service
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetVirtualRouter(ctx oldcontext.Context, req *VirtualRouter) (*VirtualRouter, error) {
	_, resp, err := s.AutoGetVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetVirtualRouter).V
	return &r, resp.(respNetworkV1AutoGetVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoGetVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouter
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoGetVirtualRouterPeeringGroup(ctx oldcontext.Context, req *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	_, resp, err := s.AutoGetVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoGetVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoGetVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoGetVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelIPAMPolicy(ctx oldcontext.Context, req *api.Label) (*IPAMPolicy, error) {
	_, resp, err := s.AutoLabelIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoLabelIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoLabelIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelLbPolicy(ctx oldcontext.Context, req *api.Label) (*LbPolicy, error) {
	_, resp, err := s.AutoLabelLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelLbPolicy).V
	return &r, resp.(respNetworkV1AutoLabelLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoLabelLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelNetwork(ctx oldcontext.Context, req *api.Label) (*Network, error) {
	_, resp, err := s.AutoLabelNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelNetwork).V
	return &r, resp.(respNetworkV1AutoLabelNetwork).Err
}

func decodeHTTPrespNetworkV1AutoLabelNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Network
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelNetworkInterface(ctx oldcontext.Context, req *api.Label) (*NetworkInterface, error) {
	_, resp, err := s.AutoLabelNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelNetworkInterface).V
	return &r, resp.(respNetworkV1AutoLabelNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoLabelNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterface
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelPolicerProfile(ctx oldcontext.Context, req *api.Label) (*PolicerProfile, error) {
	_, resp, err := s.AutoLabelPolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelPolicerProfile).V
	return &r, resp.(respNetworkV1AutoLabelPolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoLabelPolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelRouteTable(ctx oldcontext.Context, req *api.Label) (*RouteTable, error) {
	_, resp, err := s.AutoLabelRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelRouteTable).V
	return &r, resp.(respNetworkV1AutoLabelRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoLabelRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTable
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelRoutingConfig(ctx oldcontext.Context, req *api.Label) (*RoutingConfig, error) {
	_, resp, err := s.AutoLabelRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelRoutingConfig).V
	return &r, resp.(respNetworkV1AutoLabelRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoLabelRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfig
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelService(ctx oldcontext.Context, req *api.Label) (*Service, error) {
	_, resp, err := s.AutoLabelServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelService).V
	return &r, resp.(respNetworkV1AutoLabelService).Err
}

func decodeHTTPrespNetworkV1AutoLabelService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Service
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelVirtualRouter(ctx oldcontext.Context, req *api.Label) (*VirtualRouter, error) {
	_, resp, err := s.AutoLabelVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelVirtualRouter).V
	return &r, resp.(respNetworkV1AutoLabelVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoLabelVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouter
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoLabelVirtualRouterPeeringGroup(ctx oldcontext.Context, req *api.Label) (*VirtualRouterPeeringGroup, error) {
	_, resp, err := s.AutoLabelVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoLabelVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoLabelVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoLabelVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListIPAMPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*IPAMPolicyList, error) {
	_, resp, err := s.AutoListIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoListIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoListIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListLbPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*LbPolicyList, error) {
	_, resp, err := s.AutoListLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListLbPolicy).V
	return &r, resp.(respNetworkV1AutoListLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoListLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListNetwork(ctx oldcontext.Context, req *api.ListWatchOptions) (*NetworkList, error) {
	_, resp, err := s.AutoListNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListNetwork).V
	return &r, resp.(respNetworkV1AutoListNetwork).Err
}

func decodeHTTPrespNetworkV1AutoListNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListNetworkInterface(ctx oldcontext.Context, req *api.ListWatchOptions) (*NetworkInterfaceList, error) {
	_, resp, err := s.AutoListNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListNetworkInterface).V
	return &r, resp.(respNetworkV1AutoListNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoListNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterfaceList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListPolicerProfile(ctx oldcontext.Context, req *api.ListWatchOptions) (*PolicerProfileList, error) {
	_, resp, err := s.AutoListPolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListPolicerProfile).V
	return &r, resp.(respNetworkV1AutoListPolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoListPolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfileList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListRouteTable(ctx oldcontext.Context, req *api.ListWatchOptions) (*RouteTableList, error) {
	_, resp, err := s.AutoListRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListRouteTable).V
	return &r, resp.(respNetworkV1AutoListRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoListRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTableList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListRoutingConfig(ctx oldcontext.Context, req *api.ListWatchOptions) (*RoutingConfigList, error) {
	_, resp, err := s.AutoListRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListRoutingConfig).V
	return &r, resp.(respNetworkV1AutoListRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoListRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfigList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListService(ctx oldcontext.Context, req *api.ListWatchOptions) (*ServiceList, error) {
	_, resp, err := s.AutoListServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListService).V
	return &r, resp.(respNetworkV1AutoListService).Err
}

func decodeHTTPrespNetworkV1AutoListService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ServiceList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListVirtualRouter(ctx oldcontext.Context, req *api.ListWatchOptions) (*VirtualRouterList, error) {
	_, resp, err := s.AutoListVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListVirtualRouter).V
	return &r, resp.(respNetworkV1AutoListVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoListVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoListVirtualRouterPeeringGroup(ctx oldcontext.Context, req *api.ListWatchOptions) (*VirtualRouterPeeringGroupList, error) {
	_, resp, err := s.AutoListVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoListVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoListVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoListVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroupList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateIPAMPolicy(ctx oldcontext.Context, req *IPAMPolicy) (*IPAMPolicy, error) {
	_, resp, err := s.AutoUpdateIPAMPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateIPAMPolicy).V
	return &r, resp.(respNetworkV1AutoUpdateIPAMPolicy).Err
}

func decodeHTTPrespNetworkV1AutoUpdateIPAMPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp IPAMPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateLbPolicy(ctx oldcontext.Context, req *LbPolicy) (*LbPolicy, error) {
	_, resp, err := s.AutoUpdateLbPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateLbPolicy).V
	return &r, resp.(respNetworkV1AutoUpdateLbPolicy).Err
}

func decodeHTTPrespNetworkV1AutoUpdateLbPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp LbPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateNetwork(ctx oldcontext.Context, req *Network) (*Network, error) {
	_, resp, err := s.AutoUpdateNetworkHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateNetwork).V
	return &r, resp.(respNetworkV1AutoUpdateNetwork).Err
}

func decodeHTTPrespNetworkV1AutoUpdateNetwork(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Network
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateNetworkInterface(ctx oldcontext.Context, req *NetworkInterface) (*NetworkInterface, error) {
	_, resp, err := s.AutoUpdateNetworkInterfaceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateNetworkInterface).V
	return &r, resp.(respNetworkV1AutoUpdateNetworkInterface).Err
}

func decodeHTTPrespNetworkV1AutoUpdateNetworkInterface(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkInterface
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdatePolicerProfile(ctx oldcontext.Context, req *PolicerProfile) (*PolicerProfile, error) {
	_, resp, err := s.AutoUpdatePolicerProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdatePolicerProfile).V
	return &r, resp.(respNetworkV1AutoUpdatePolicerProfile).Err
}

func decodeHTTPrespNetworkV1AutoUpdatePolicerProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp PolicerProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateRouteTable(ctx oldcontext.Context, req *RouteTable) (*RouteTable, error) {
	_, resp, err := s.AutoUpdateRouteTableHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateRouteTable).V
	return &r, resp.(respNetworkV1AutoUpdateRouteTable).Err
}

func decodeHTTPrespNetworkV1AutoUpdateRouteTable(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RouteTable
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateRoutingConfig(ctx oldcontext.Context, req *RoutingConfig) (*RoutingConfig, error) {
	_, resp, err := s.AutoUpdateRoutingConfigHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateRoutingConfig).V
	return &r, resp.(respNetworkV1AutoUpdateRoutingConfig).Err
}

func decodeHTTPrespNetworkV1AutoUpdateRoutingConfig(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RoutingConfig
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateService(ctx oldcontext.Context, req *Service) (*Service, error) {
	_, resp, err := s.AutoUpdateServiceHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateService).V
	return &r, resp.(respNetworkV1AutoUpdateService).Err
}

func decodeHTTPrespNetworkV1AutoUpdateService(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Service
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateVirtualRouter(ctx oldcontext.Context, req *VirtualRouter) (*VirtualRouter, error) {
	_, resp, err := s.AutoUpdateVirtualRouterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateVirtualRouter).V
	return &r, resp.(respNetworkV1AutoUpdateVirtualRouter).Err
}

func decodeHTTPrespNetworkV1AutoUpdateVirtualRouter(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouter
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoUpdateVirtualRouterPeeringGroup(ctx oldcontext.Context, req *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	_, resp, err := s.AutoUpdateVirtualRouterPeeringGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respNetworkV1AutoUpdateVirtualRouterPeeringGroup).V
	return &r, resp.(respNetworkV1AutoUpdateVirtualRouterPeeringGroup).Err
}

func decodeHTTPrespNetworkV1AutoUpdateVirtualRouterPeeringGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp VirtualRouterPeeringGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerNetworkV1) AutoWatchSvcNetworkV1(in *api.AggWatchOptions, stream NetworkV1_AutoWatchSvcNetworkV1Server) error {
	return s.Endpoints.AutoWatchSvcNetworkV1(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchNetwork(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkServer) error {
	return s.Endpoints.AutoWatchNetwork(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchService(in *api.ListWatchOptions, stream NetworkV1_AutoWatchServiceServer) error {
	return s.Endpoints.AutoWatchService(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchLbPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchLbPolicyServer) error {
	return s.Endpoints.AutoWatchLbPolicy(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchVirtualRouter(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterServer) error {
	return s.Endpoints.AutoWatchVirtualRouter(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchNetworkInterface(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkInterfaceServer) error {
	return s.Endpoints.AutoWatchNetworkInterface(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchIPAMPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchIPAMPolicyServer) error {
	return s.Endpoints.AutoWatchIPAMPolicy(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchRoutingConfig(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRoutingConfigServer) error {
	return s.Endpoints.AutoWatchRoutingConfig(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchRouteTable(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRouteTableServer) error {
	return s.Endpoints.AutoWatchRouteTable(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchVirtualRouterPeeringGroup(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterPeeringGroupServer) error {
	return s.Endpoints.AutoWatchVirtualRouterPeeringGroup(in, stream)
}

func (s *grpcServerNetworkV1) AutoWatchPolicerProfile(in *api.ListWatchOptions, stream NetworkV1_AutoWatchPolicerProfileServer) error {
	return s.Endpoints.AutoWatchPolicerProfile(in, stream)
}

func encodeHTTPIPAMPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPAMPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPAMPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPAMPolicyList encodes GRPC request
func EncodeGrpcReqIPAMPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicyList)
	return req, nil
}

// DecodeGrpcReqIPAMPolicyList decodes GRPC request
func DecodeGrpcReqIPAMPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicyList)
	return req, nil
}

// EncodeGrpcRespIPAMPolicyList endodes the GRPC response
func EncodeGrpcRespIPAMPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPAMPolicyList decodes the GRPC response
func DecodeGrpcRespIPAMPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPLbPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPLbPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req LbPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqLbPolicyList encodes GRPC request
func EncodeGrpcReqLbPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LbPolicyList)
	return req, nil
}

// DecodeGrpcReqLbPolicyList decodes GRPC request
func DecodeGrpcReqLbPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*LbPolicyList)
	return req, nil
}

// EncodeGrpcRespLbPolicyList endodes the GRPC response
func EncodeGrpcRespLbPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespLbPolicyList decodes the GRPC response
func DecodeGrpcRespLbPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkInterfaceList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkInterfaceList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkInterfaceList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkInterfaceList encodes GRPC request
func EncodeGrpcReqNetworkInterfaceList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceList)
	return req, nil
}

// DecodeGrpcReqNetworkInterfaceList decodes GRPC request
func DecodeGrpcReqNetworkInterfaceList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkInterfaceList)
	return req, nil
}

// EncodeGrpcRespNetworkInterfaceList endodes the GRPC response
func EncodeGrpcRespNetworkInterfaceList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkInterfaceList decodes the GRPC response
func DecodeGrpcRespNetworkInterfaceList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkList encodes GRPC request
func EncodeGrpcReqNetworkList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkList)
	return req, nil
}

// DecodeGrpcReqNetworkList decodes GRPC request
func DecodeGrpcReqNetworkList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkList)
	return req, nil
}

// EncodeGrpcRespNetworkList endodes the GRPC response
func EncodeGrpcRespNetworkList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkList decodes the GRPC response
func DecodeGrpcRespNetworkList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPolicerProfileList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPolicerProfileList(_ context.Context, r *http.Request) (interface{}, error) {
	var req PolicerProfileList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPolicerProfileList encodes GRPC request
func EncodeGrpcReqPolicerProfileList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicerProfileList)
	return req, nil
}

// DecodeGrpcReqPolicerProfileList decodes GRPC request
func DecodeGrpcReqPolicerProfileList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicerProfileList)
	return req, nil
}

// EncodeGrpcRespPolicerProfileList endodes the GRPC response
func EncodeGrpcRespPolicerProfileList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPolicerProfileList decodes the GRPC response
func DecodeGrpcRespPolicerProfileList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteTableList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteTableList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteTableList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteTableList encodes GRPC request
func EncodeGrpcReqRouteTableList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableList)
	return req, nil
}

// DecodeGrpcReqRouteTableList decodes GRPC request
func DecodeGrpcReqRouteTableList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableList)
	return req, nil
}

// EncodeGrpcRespRouteTableList endodes the GRPC response
func EncodeGrpcRespRouteTableList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteTableList decodes the GRPC response
func DecodeGrpcRespRouteTableList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoutingConfigList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoutingConfigList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoutingConfigList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoutingConfigList encodes GRPC request
func EncodeGrpcReqRoutingConfigList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigList)
	return req, nil
}

// DecodeGrpcReqRoutingConfigList decodes GRPC request
func DecodeGrpcReqRoutingConfigList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigList)
	return req, nil
}

// EncodeGrpcRespRoutingConfigList endodes the GRPC response
func EncodeGrpcRespRoutingConfigList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoutingConfigList decodes the GRPC response
func DecodeGrpcRespRoutingConfigList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPServiceList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPServiceList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ServiceList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqServiceList encodes GRPC request
func EncodeGrpcReqServiceList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceList)
	return req, nil
}

// DecodeGrpcReqServiceList decodes GRPC request
func DecodeGrpcReqServiceList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ServiceList)
	return req, nil
}

// EncodeGrpcRespServiceList endodes the GRPC response
func EncodeGrpcRespServiceList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespServiceList decodes the GRPC response
func DecodeGrpcRespServiceList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVirtualRouterList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVirtualRouterList(_ context.Context, r *http.Request) (interface{}, error) {
	var req VirtualRouterList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVirtualRouterList encodes GRPC request
func EncodeGrpcReqVirtualRouterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VirtualRouterList)
	return req, nil
}

// DecodeGrpcReqVirtualRouterList decodes GRPC request
func DecodeGrpcReqVirtualRouterList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VirtualRouterList)
	return req, nil
}

// EncodeGrpcRespVirtualRouterList endodes the GRPC response
func EncodeGrpcRespVirtualRouterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVirtualRouterList decodes the GRPC response
func DecodeGrpcRespVirtualRouterList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPVirtualRouterPeeringGroupList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPVirtualRouterPeeringGroupList(_ context.Context, r *http.Request) (interface{}, error) {
	var req VirtualRouterPeeringGroupList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqVirtualRouterPeeringGroupList encodes GRPC request
func EncodeGrpcReqVirtualRouterPeeringGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VirtualRouterPeeringGroupList)
	return req, nil
}

// DecodeGrpcReqVirtualRouterPeeringGroupList decodes GRPC request
func DecodeGrpcReqVirtualRouterPeeringGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*VirtualRouterPeeringGroupList)
	return req, nil
}

// EncodeGrpcRespVirtualRouterPeeringGroupList endodes the GRPC response
func EncodeGrpcRespVirtualRouterPeeringGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespVirtualRouterPeeringGroupList decodes the GRPC response
func DecodeGrpcRespVirtualRouterPeeringGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
