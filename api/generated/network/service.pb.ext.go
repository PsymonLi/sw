// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: service.proto
*/
package network

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapService = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Service) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "services/", m.Tenant, "/", m.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Service) Clone(into interface{}) (interface{}, error) {
	var out *Service
	var ok bool
	if into == nil {
		out = &Service{}
	} else {
		out, ok = into.(*Service)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Service) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServiceSpec) Clone(into interface{}) (interface{}, error) {
	var out *ServiceSpec
	var ok bool
	if into == nil {
		out = &ServiceSpec{}
	} else {
		out, ok = into.(*ServiceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServiceSpec) Defaults(ver string) bool {
	var ret bool
	if m.TLSServerPolicy != nil {
		ret = ret || m.TLSServerPolicy.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServiceStatus) Clone(into interface{}) (interface{}, error) {
	var out *ServiceStatus
	var ok bool
	if into == nil {
		out = &ServiceStatus{}
	} else {
		out, ok = into.(*ServiceStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServiceStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TLSClientPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *TLSClientPolicySpec
	var ok bool
	if into == nil {
		out = &TLSClientPolicySpec{}
	} else {
		out, ok = into.(*TLSClientPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TLSClientPolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TLSServerPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *TLSServerPolicySpec
	var ok bool
	if into == nil {
		out = &TLSServerPolicySpec{}
	} else {
		out, ok = into.(*TLSServerPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TLSServerPolicySpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.ClientAuthentication = TLSServerPolicySpec_ClientAuthTypes_name[0]
	}
	return ret
}

// Validators

func (m *Service) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceSpec) Validate(ver string, ignoreStatus bool) bool {
	if m.TLSServerPolicy != nil && !m.TLSServerPolicy.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSClientPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSServerPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapService["TLSServerPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapService["TLSServerPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {

	validatorMapService = make(map[string]map[string][]func(interface{}) bool)

	validatorMapService["TLSServerPolicySpec"] = make(map[string][]func(interface{}) bool)
	validatorMapService["TLSServerPolicySpec"]["all"] = append(validatorMapService["TLSServerPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*TLSServerPolicySpec)

		if _, ok := TLSServerPolicySpec_ClientAuthTypes_value[m.ClientAuthentication]; !ok {
			return false
		}
		return true
	})

}
