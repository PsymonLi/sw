// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package networkApiServer is a auto generated package.
Input file: svc_network.proto
*/
package networkApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	network "github.com/pensando/sw/api/generated/network"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type snetworkSvc_networkBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsNetworkV1 *eNetworkV1Endpoints
}

type eNetworkV1Endpoints struct {
	Svc snetworkSvc_networkBackend

	fnAutoAddLbPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddNetwork     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddService     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteLbPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteNetwork  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteService  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetLbPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetNetwork     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetService     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListLbPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListNetwork    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListService    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateLbPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateNetwork  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateService  func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchNetwork  func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchService  func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchLbPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *snetworkSvc_networkBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for snetworkSvc_networkBackend")
	s.Messages = map[string]apiserver.Message{

		"network.AutoMsgLbPolicyWatchHelper": apisrvpkg.NewMessage("network.AutoMsgLbPolicyWatchHelper"),
		"network.AutoMsgNetworkWatchHelper":  apisrvpkg.NewMessage("network.AutoMsgNetworkWatchHelper"),
		"network.AutoMsgServiceWatchHelper":  apisrvpkg.NewMessage("network.AutoMsgServiceWatchHelper"),
		"network.LbPolicyList": apisrvpkg.NewMessage("network.LbPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := network.LbPolicyList{}
			r := network.LbPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"network.NetworkList": apisrvpkg.NewMessage("network.NetworkList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := network.NetworkList{}
			r := network.Network{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"network.ServiceList": apisrvpkg.NewMessage("network.ServiceList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := network.ServiceList{}
			r := network.Service{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("network", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *snetworkSvc_networkBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("NetworkV1")

		s.endpointsNetworkV1.fnAutoAddLbPolicy = srv.AddMethod("AutoAddLbPolicy",
			apisrvpkg.NewMethod(pkgMessages["network.LbPolicy"], pkgMessages["network.LbPolicy"], "network", "AutoAddLbPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.LbPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/lb-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoAddNetwork = srv.AddMethod("AutoAddNetwork",
			apisrvpkg.NewMethod(pkgMessages["network.Network"], pkgMessages["network.Network"], "network", "AutoAddNetwork")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Network)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/networks/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoAddService = srv.AddMethod("AutoAddService",
			apisrvpkg.NewMethod(pkgMessages["network.Service"], pkgMessages["network.Service"], "network", "AutoAddService")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Service)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/services/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoDeleteLbPolicy = srv.AddMethod("AutoDeleteLbPolicy",
			apisrvpkg.NewMethod(pkgMessages["network.LbPolicy"], pkgMessages["network.LbPolicy"], "network", "AutoDeleteLbPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.LbPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/lb-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoDeleteNetwork = srv.AddMethod("AutoDeleteNetwork",
			apisrvpkg.NewMethod(pkgMessages["network.Network"], pkgMessages["network.Network"], "network", "AutoDeleteNetwork")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Network)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/networks/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoDeleteService = srv.AddMethod("AutoDeleteService",
			apisrvpkg.NewMethod(pkgMessages["network.Service"], pkgMessages["network.Service"], "network", "AutoDeleteService")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Service)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/services/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoGetLbPolicy = srv.AddMethod("AutoGetLbPolicy",
			apisrvpkg.NewMethod(pkgMessages["network.LbPolicy"], pkgMessages["network.LbPolicy"], "network", "AutoGetLbPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.LbPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/lb-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoGetNetwork = srv.AddMethod("AutoGetNetwork",
			apisrvpkg.NewMethod(pkgMessages["network.Network"], pkgMessages["network.Network"], "network", "AutoGetNetwork")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Network)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/networks/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoGetService = srv.AddMethod("AutoGetService",
			apisrvpkg.NewMethod(pkgMessages["network.Service"], pkgMessages["network.Service"], "network", "AutoGetService")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Service)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/services/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoListLbPolicy = srv.AddMethod("AutoListLbPolicy",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["network.LbPolicyList"], "network", "AutoListLbPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/lb-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoListNetwork = srv.AddMethod("AutoListNetwork",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["network.NetworkList"], "network", "AutoListNetwork")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/networks/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoListService = srv.AddMethod("AutoListService",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["network.ServiceList"], "network", "AutoListService")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/services/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoUpdateLbPolicy = srv.AddMethod("AutoUpdateLbPolicy",
			apisrvpkg.NewMethod(pkgMessages["network.LbPolicy"], pkgMessages["network.LbPolicy"], "network", "AutoUpdateLbPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.LbPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/lb-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoUpdateNetwork = srv.AddMethod("AutoUpdateNetwork",
			apisrvpkg.NewMethod(pkgMessages["network.Network"], pkgMessages["network.Network"], "network", "AutoUpdateNetwork")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Network)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/networks/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoUpdateService = srv.AddMethod("AutoUpdateService",
			apisrvpkg.NewMethod(pkgMessages["network.Service"], pkgMessages["network.Service"], "network", "AutoUpdateService")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(network.Service)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "network/", in.Tenant, "/services/", in.Name), nil
		}).HandleInvocation

		s.endpointsNetworkV1.fnAutoWatchNetwork = pkgMessages["network.Network"].WatchFromKv

		s.endpointsNetworkV1.fnAutoWatchService = pkgMessages["network.Service"].WatchFromKv

		s.endpointsNetworkV1.fnAutoWatchLbPolicy = pkgMessages["network.LbPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"network.NetworkV1": srv,
		}
		apisrv.RegisterService("network.NetworkV1", srv)
		endpoints := network.MakeNetworkV1ServerEndpoints(s.endpointsNetworkV1, logger)
		server := network.MakeGRPCServerNetworkV1(ctx, endpoints, logger)
		network.RegisterNetworkV1Server(grpcserver.GrpcServer, server)
	}
}

func (s *snetworkSvc_networkBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		pkgMessages["network.Network"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := network.Network{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(network.NetworkV1_AutoWatchNetworkServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "Network")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &network.AutoMsgNetworkWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.DebugLog("msg", "Stream send error'ed for Order", "error", err)
					return err
				}
				events = &network.AutoMsgNetworkWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for Network Watcher")
						return nil
					}
					in, ok := ev.Object.(*network.Network)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &network.AutoMsgNetworkWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Network watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Network", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*network.Network)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Network Watcher")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["network.Service"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := network.Service{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(network.NetworkV1_AutoWatchServiceServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "Service")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &network.AutoMsgServiceWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.DebugLog("msg", "Stream send error'ed for Order", "error", err)
					return err
				}
				events = &network.AutoMsgServiceWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for Service Watcher")
						return nil
					}
					in, ok := ev.Object.(*network.Service)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &network.AutoMsgServiceWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Service watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Service", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*network.Service)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Service Watcher")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["network.LbPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := network.LbPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(network.NetworkV1_AutoWatchLbPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "LbPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &network.AutoMsgLbPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.DebugLog("msg", "Stream send error'ed for Order", "error", err)
					return err
				}
				events = &network.AutoMsgLbPolicyWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for LbPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*network.LbPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &network.AutoMsgLbPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received LbPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "LbPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*network.LbPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for LbPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *snetworkSvc_networkBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *snetworkSvc_networkBackend) Reset() {
	cleanupRegistration()
}

func (e *eNetworkV1Endpoints) AutoAddLbPolicy(ctx context.Context, t network.LbPolicy) (network.LbPolicy, error) {
	r, err := e.fnAutoAddLbPolicy(ctx, t)
	if err == nil {
		return r.(network.LbPolicy), err
	}
	return network.LbPolicy{}, err

}
func (e *eNetworkV1Endpoints) AutoAddNetwork(ctx context.Context, t network.Network) (network.Network, error) {
	r, err := e.fnAutoAddNetwork(ctx, t)
	if err == nil {
		return r.(network.Network), err
	}
	return network.Network{}, err

}
func (e *eNetworkV1Endpoints) AutoAddService(ctx context.Context, t network.Service) (network.Service, error) {
	r, err := e.fnAutoAddService(ctx, t)
	if err == nil {
		return r.(network.Service), err
	}
	return network.Service{}, err

}
func (e *eNetworkV1Endpoints) AutoDeleteLbPolicy(ctx context.Context, t network.LbPolicy) (network.LbPolicy, error) {
	r, err := e.fnAutoDeleteLbPolicy(ctx, t)
	if err == nil {
		return r.(network.LbPolicy), err
	}
	return network.LbPolicy{}, err

}
func (e *eNetworkV1Endpoints) AutoDeleteNetwork(ctx context.Context, t network.Network) (network.Network, error) {
	r, err := e.fnAutoDeleteNetwork(ctx, t)
	if err == nil {
		return r.(network.Network), err
	}
	return network.Network{}, err

}
func (e *eNetworkV1Endpoints) AutoDeleteService(ctx context.Context, t network.Service) (network.Service, error) {
	r, err := e.fnAutoDeleteService(ctx, t)
	if err == nil {
		return r.(network.Service), err
	}
	return network.Service{}, err

}
func (e *eNetworkV1Endpoints) AutoGetLbPolicy(ctx context.Context, t network.LbPolicy) (network.LbPolicy, error) {
	r, err := e.fnAutoGetLbPolicy(ctx, t)
	if err == nil {
		return r.(network.LbPolicy), err
	}
	return network.LbPolicy{}, err

}
func (e *eNetworkV1Endpoints) AutoGetNetwork(ctx context.Context, t network.Network) (network.Network, error) {
	r, err := e.fnAutoGetNetwork(ctx, t)
	if err == nil {
		return r.(network.Network), err
	}
	return network.Network{}, err

}
func (e *eNetworkV1Endpoints) AutoGetService(ctx context.Context, t network.Service) (network.Service, error) {
	r, err := e.fnAutoGetService(ctx, t)
	if err == nil {
		return r.(network.Service), err
	}
	return network.Service{}, err

}
func (e *eNetworkV1Endpoints) AutoListLbPolicy(ctx context.Context, t api.ListWatchOptions) (network.LbPolicyList, error) {
	r, err := e.fnAutoListLbPolicy(ctx, t)
	if err == nil {
		return r.(network.LbPolicyList), err
	}
	return network.LbPolicyList{}, err

}
func (e *eNetworkV1Endpoints) AutoListNetwork(ctx context.Context, t api.ListWatchOptions) (network.NetworkList, error) {
	r, err := e.fnAutoListNetwork(ctx, t)
	if err == nil {
		return r.(network.NetworkList), err
	}
	return network.NetworkList{}, err

}
func (e *eNetworkV1Endpoints) AutoListService(ctx context.Context, t api.ListWatchOptions) (network.ServiceList, error) {
	r, err := e.fnAutoListService(ctx, t)
	if err == nil {
		return r.(network.ServiceList), err
	}
	return network.ServiceList{}, err

}
func (e *eNetworkV1Endpoints) AutoUpdateLbPolicy(ctx context.Context, t network.LbPolicy) (network.LbPolicy, error) {
	r, err := e.fnAutoUpdateLbPolicy(ctx, t)
	if err == nil {
		return r.(network.LbPolicy), err
	}
	return network.LbPolicy{}, err

}
func (e *eNetworkV1Endpoints) AutoUpdateNetwork(ctx context.Context, t network.Network) (network.Network, error) {
	r, err := e.fnAutoUpdateNetwork(ctx, t)
	if err == nil {
		return r.(network.Network), err
	}
	return network.Network{}, err

}
func (e *eNetworkV1Endpoints) AutoUpdateService(ctx context.Context, t network.Service) (network.Service, error) {
	r, err := e.fnAutoUpdateService(ctx, t)
	if err == nil {
		return r.(network.Service), err
	}
	return network.Service{}, err

}

func (e *eNetworkV1Endpoints) AutoWatchNetwork(in *api.ListWatchOptions, stream network.NetworkV1_AutoWatchNetworkServer) error {
	return e.fnAutoWatchNetwork(in, stream, "network")
}
func (e *eNetworkV1Endpoints) AutoWatchService(in *api.ListWatchOptions, stream network.NetworkV1_AutoWatchServiceServer) error {
	return e.fnAutoWatchService(in, stream, "network")
}
func (e *eNetworkV1Endpoints) AutoWatchLbPolicy(in *api.ListWatchOptions, stream network.NetworkV1_AutoWatchLbPolicyServer) error {
	return e.fnAutoWatchLbPolicy(in, stream, "network")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := snetworkSvc_networkBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eNetworkV1Endpoints{Svc: svc}
		svc.endpointsNetworkV1 = &e
	}
	apisrv.Register("network.svc_network.proto", &svc)
}
