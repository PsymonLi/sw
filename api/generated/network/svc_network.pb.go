// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_network.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AutoMsgLbPolicyWatchHelper struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *LbPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgLbPolicyWatchHelper) Reset()         { *m = AutoMsgLbPolicyWatchHelper{} }
func (m *AutoMsgLbPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLbPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgLbPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{0}
}

func (m *AutoMsgLbPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgLbPolicyWatchHelper) GetObject() *LbPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgNetworkWatchHelper struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Network `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgNetworkWatchHelper) Reset()         { *m = AutoMsgNetworkWatchHelper{} }
func (m *AutoMsgNetworkWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNetworkWatchHelper) ProtoMessage()    {}
func (*AutoMsgNetworkWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{1}
}

func (m *AutoMsgNetworkWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNetworkWatchHelper) GetObject() *Network {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgServiceWatchHelper struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Service `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgServiceWatchHelper) Reset()         { *m = AutoMsgServiceWatchHelper{} }
func (m *AutoMsgServiceWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgServiceWatchHelper) ProtoMessage()    {}
func (*AutoMsgServiceWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{2}
}

func (m *AutoMsgServiceWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgServiceWatchHelper) GetObject() *Service {
	if m != nil {
		return m.Object
	}
	return nil
}

type LbPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*LbPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *LbPolicyList) Reset()                    { *m = LbPolicyList{} }
func (m *LbPolicyList) String() string            { return proto.CompactTextString(m) }
func (*LbPolicyList) ProtoMessage()               {}
func (*LbPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{3} }

func (m *LbPolicyList) GetItems() []*LbPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type NetworkList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Network `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *NetworkList) Reset()                    { *m = NetworkList{} }
func (m *NetworkList) String() string            { return proto.CompactTextString(m) }
func (*NetworkList) ProtoMessage()               {}
func (*NetworkList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{4} }

func (m *NetworkList) GetItems() []*Network {
	if m != nil {
		return m.Items
	}
	return nil
}

type ServiceList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*Service `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{5} }

func (m *ServiceList) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgLbPolicyWatchHelper)(nil), "network.AutoMsgLbPolicyWatchHelper")
	proto.RegisterType((*AutoMsgNetworkWatchHelper)(nil), "network.AutoMsgNetworkWatchHelper")
	proto.RegisterType((*AutoMsgServiceWatchHelper)(nil), "network.AutoMsgServiceWatchHelper")
	proto.RegisterType((*LbPolicyList)(nil), "network.LbPolicyList")
	proto.RegisterType((*NetworkList)(nil), "network.NetworkList")
	proto.RegisterType((*ServiceList)(nil), "network.ServiceList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkV1 service

type NetworkV1Client interface {
	AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error)
	AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error)
	AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error)
	AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchLbPolicyClient, error)
	AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error)
	AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchServiceClient, error)
}

type networkV1Client struct {
	cc *grpc.ClientConn
}

func NewNetworkV1Client(cc *grpc.ClientConn) NetworkV1Client {
	return &networkV1Client{cc}
}

func (c *networkV1Client) AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error) {
	out := new(LbPolicyList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error) {
	out := new(NetworkList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchLbPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[0], c.cc, "/network.NetworkV1/AutoWatchLbPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchLbPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchLbPolicyClient interface {
	Recv() (*AutoMsgLbPolicyWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchLbPolicyClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchLbPolicyClient) Recv() (*AutoMsgLbPolicyWatchHelper, error) {
	m := new(AutoMsgLbPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[1], c.cc, "/network.NetworkV1/AutoWatchNetwork", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchNetworkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchNetworkClient interface {
	Recv() (*AutoMsgNetworkWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchNetworkClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchNetworkClient) Recv() (*AutoMsgNetworkWatchHelper, error) {
	m := new(AutoMsgNetworkWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[2], c.cc, "/network.NetworkV1/AutoWatchService", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchServiceClient interface {
	Recv() (*AutoMsgServiceWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchServiceClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchServiceClient) Recv() (*AutoMsgServiceWatchHelper, error) {
	m := new(AutoMsgServiceWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkV1 service

type NetworkV1Server interface {
	AutoAddLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoAddNetwork(context.Context, *Network) (*Network, error)
	AutoAddService(context.Context, *Service) (*Service, error)
	AutoDeleteLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoDeleteNetwork(context.Context, *Network) (*Network, error)
	AutoDeleteService(context.Context, *Service) (*Service, error)
	AutoGetLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoGetNetwork(context.Context, *Network) (*Network, error)
	AutoGetService(context.Context, *Service) (*Service, error)
	AutoListLbPolicy(context.Context, *api.ListWatchOptions) (*LbPolicyList, error)
	AutoListNetwork(context.Context, *api.ListWatchOptions) (*NetworkList, error)
	AutoListService(context.Context, *api.ListWatchOptions) (*ServiceList, error)
	AutoUpdateLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	AutoUpdateNetwork(context.Context, *Network) (*Network, error)
	AutoUpdateService(context.Context, *Service) (*Service, error)
	AutoWatchLbPolicy(*api.ListWatchOptions, NetworkV1_AutoWatchLbPolicyServer) error
	AutoWatchNetwork(*api.ListWatchOptions, NetworkV1_AutoWatchNetworkServer) error
	AutoWatchService(*api.ListWatchOptions, NetworkV1_AutoWatchServiceServer) error
}

func RegisterNetworkV1Server(s *grpc.Server, srv NetworkV1Server) {
	s.RegisterService(&_NetworkV1_serviceDesc, srv)
}

func _NetworkV1_AutoAddLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListLbPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListService(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoWatchLbPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchLbPolicy(m, &networkV1AutoWatchLbPolicyServer{stream})
}

type NetworkV1_AutoWatchLbPolicyServer interface {
	Send(*AutoMsgLbPolicyWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchLbPolicyServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchLbPolicyServer) Send(m *AutoMsgLbPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchNetwork(m, &networkV1AutoWatchNetworkServer{stream})
}

type NetworkV1_AutoWatchNetworkServer interface {
	Send(*AutoMsgNetworkWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchNetworkServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchNetworkServer) Send(m *AutoMsgNetworkWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchService(m, &networkV1AutoWatchServiceServer{stream})
}

type NetworkV1_AutoWatchServiceServer interface {
	Send(*AutoMsgServiceWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchServiceServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchServiceServer) Send(m *AutoMsgServiceWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.NetworkV1",
	HandlerType: (*NetworkV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddLbPolicy",
			Handler:    _NetworkV1_AutoAddLbPolicy_Handler,
		},
		{
			MethodName: "AutoAddNetwork",
			Handler:    _NetworkV1_AutoAddNetwork_Handler,
		},
		{
			MethodName: "AutoAddService",
			Handler:    _NetworkV1_AutoAddService_Handler,
		},
		{
			MethodName: "AutoDeleteLbPolicy",
			Handler:    _NetworkV1_AutoDeleteLbPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteNetwork",
			Handler:    _NetworkV1_AutoDeleteNetwork_Handler,
		},
		{
			MethodName: "AutoDeleteService",
			Handler:    _NetworkV1_AutoDeleteService_Handler,
		},
		{
			MethodName: "AutoGetLbPolicy",
			Handler:    _NetworkV1_AutoGetLbPolicy_Handler,
		},
		{
			MethodName: "AutoGetNetwork",
			Handler:    _NetworkV1_AutoGetNetwork_Handler,
		},
		{
			MethodName: "AutoGetService",
			Handler:    _NetworkV1_AutoGetService_Handler,
		},
		{
			MethodName: "AutoListLbPolicy",
			Handler:    _NetworkV1_AutoListLbPolicy_Handler,
		},
		{
			MethodName: "AutoListNetwork",
			Handler:    _NetworkV1_AutoListNetwork_Handler,
		},
		{
			MethodName: "AutoListService",
			Handler:    _NetworkV1_AutoListService_Handler,
		},
		{
			MethodName: "AutoUpdateLbPolicy",
			Handler:    _NetworkV1_AutoUpdateLbPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateNetwork",
			Handler:    _NetworkV1_AutoUpdateNetwork_Handler,
		},
		{
			MethodName: "AutoUpdateService",
			Handler:    _NetworkV1_AutoUpdateService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchLbPolicy",
			Handler:       _NetworkV1_AutoWatchLbPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchNetwork",
			Handler:       _NetworkV1_AutoWatchNetwork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchService",
			Handler:       _NetworkV1_AutoWatchService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_network.proto",
}

func (m *AutoMsgLbPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLbPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgNetworkWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgServiceWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgServiceWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LbPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n5, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n9, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgLbPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgNetworkWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgServiceWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *LbPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *ServiceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func sovSvcNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcNetwork(x uint64) (n int) {
	return sovSvcNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgLbPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &LbPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Network{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgServiceWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Service{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &LbPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Network{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Service{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_network.proto", fileDescriptorSvcNetwork) }

var fileDescriptorSvcNetwork = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xe3, 0x26, 0xdb, 0xcd, 0x4e, 0xdb, 0xdd, 0x76, 0xb4, 0x95, 0x62, 0xb3, 0xa4, 0xc1,
	0xbb, 0x2b, 0xca, 0x8a, 0xc6, 0xdd, 0x05, 0xc4, 0xd2, 0xdb, 0xae, 0x40, 0x0b, 0xd2, 0x6e, 0xbb,
	0x12, 0x05, 0x2e, 0xa8, 0x60, 0x3b, 0x83, 0xeb, 0xe2, 0x78, 0x4c, 0x3c, 0x4e, 0x55, 0xa1, 0x5e,
	0x48, 0x7a, 0x44, 0x48, 0x70, 0xe3, 0xd8, 0x23, 0xc7, 0x48, 0x48, 0xfc, 0x09, 0x3d, 0x56, 0xe2,
	0xd6, 0x43, 0x85, 0x2a, 0x4e, 0xfc, 0x15, 0x68, 0x7e, 0xd8, 0x71, 0x32, 0x4e, 0x1c, 0x23, 0xb1,
	0xb7, 0x78, 0xf2, 0xde, 0xf7, 0xf3, 0xfc, 0x9d, 0xf7, 0xc6, 0x03, 0x56, 0xc2, 0xae, 0xfd, 0x95,
	0x8f, 0xc8, 0x21, 0xee, 0x7c, 0xdb, 0x0c, 0x3a, 0x98, 0x60, 0x78, 0x5d, 0x3c, 0x6a, 0x77, 0x1c,
	0x8c, 0x1d, 0x0f, 0x19, 0x66, 0xe0, 0x1a, 0xa6, 0xef, 0x63, 0x62, 0x12, 0x17, 0xfb, 0x21, 0x0f,
	0xd3, 0x3e, 0x72, 0x5c, 0xb2, 0x1f, 0x59, 0x4d, 0x1b, 0xb7, 0x8d, 0x00, 0xf9, 0xa1, 0xe9, 0xb7,
	0xb0, 0x11, 0x1e, 0x1a, 0x5d, 0xe4, 0xbb, 0x36, 0x32, 0x22, 0xe2, 0x7a, 0x21, 0x4d, 0x75, 0x90,
	0x9f, 0xce, 0x36, 0x5c, 0xdf, 0xf6, 0xa2, 0x16, 0x8a, 0x65, 0x36, 0x52, 0x32, 0x0e, 0x76, 0xb0,
	0xc1, 0x96, 0xad, 0xe8, 0x1b, 0xf6, 0xc4, 0x1e, 0xd8, 0x2f, 0x11, 0x7e, 0x7f, 0x02, 0x95, 0xd6,
	0xd8, 0x46, 0xc4, 0x14, 0x61, 0x9b, 0x53, 0xc2, 0x3c, 0xd3, 0x42, 0x5e, 0x68, 0x84, 0xc8, 0x43,
	0x36, 0xc1, 0x1d, 0x91, 0xb1, 0x34, 0x62, 0x82, 0x56, 0xf5, 0xac, 0xf8, 0x8f, 0x10, 0x75, 0xba,
	0xae, 0x8d, 0xf8, 0xa3, 0xbe, 0x07, 0xb4, 0x27, 0x11, 0xc1, 0x2f, 0x42, 0xe7, 0xb9, 0xf5, 0x12,
	0x7b, 0xae, 0x7d, 0xf4, 0x85, 0x49, 0xec, 0xfd, 0x8f, 0x91, 0x17, 0xa0, 0x0e, 0x5c, 0x04, 0x95,
	0xdd, 0xa3, 0x00, 0xd5, 0x94, 0x86, 0xb2, 0x7e, 0x03, 0xbe, 0x01, 0xe6, 0x77, 0xac, 0x03, 0x64,
	0x93, 0xda, 0x5c, 0x43, 0x59, 0x5f, 0x78, 0xb4, 0xd2, 0x8c, 0x21, 0x71, 0xee, 0xd6, 0xad, 0x8b,
	0x13, 0x75, 0xe1, 0x90, 0x2a, 0xec, 0x33, 0x05, 0xfd, 0x4b, 0xa0, 0x0a, 0xfd, 0x6d, 0x1e, 0x3b,
	0x59, 0xbe, 0x31, 0x26, 0xbf, 0x9c, 0xc8, 0x8b, 0xd4, 0x69, 0xea, 0x9f, 0xf2, 0xb7, 0xfa, 0x2f,
	0xea, 0x22, 0x55, 0x56, 0xff, 0x49, 0x01, 0x8b, 0xf1, 0x9b, 0x3d, 0x77, 0x43, 0x02, 0x75, 0xa0,
	0xec, 0x8a, 0xf4, 0xa5, 0xa6, 0x19, 0xb8, 0x4d, 0xaa, 0xff, 0x02, 0x11, 0xf3, 0x69, 0xf5, 0xec,
	0x72, 0xad, 0x74, 0x7e, 0xb9, 0xa6, 0xc0, 0xb7, 0x40, 0x95, 0xc6, 0xd2, 0xd5, 0x5a, 0x39, 0x15,
	0x1a, 0x2f, 0xa6, 0x42, 0x1b, 0xe0, 0xda, 0x27, 0x04, 0xb5, 0xc3, 0x5a, 0xa5, 0x51, 0xce, 0xb6,
	0xf3, 0xe6, 0xc5, 0x89, 0x0a, 0x3c, 0x37, 0x24, 0xa2, 0xa2, 0x1f, 0x15, 0xb0, 0x20, 0xcc, 0xf8,
	0x3f, 0x0a, 0x5a, 0x1b, 0x2d, 0x48, 0xde, 0x80, 0xac, 0x7a, 0x84, 0x7d, 0xaf, 0xb4, 0x9e, 0x78,
	0xcb, 0xc6, 0xea, 0x79, 0xf4, 0xcf, 0x32, 0xb8, 0x21, 0x6a, 0xfd, 0xfc, 0x21, 0x74, 0xc1, 0x2d,
	0xda, 0x1d, 0x4f, 0x5a, 0xad, 0xd8, 0x50, 0x28, 0x7b, 0xac, 0xc9, 0x4b, 0xfa, 0xe6, 0xa0, 0xaf,
	0xce, 0xdb, 0x1d, 0x64, 0x12, 0xf4, 0x47, 0x5f, 0x55, 0x7e, 0xf8, 0xf3, 0xef, 0x5f, 0xe6, 0xee,
	0x80, 0xd2, 0x96, 0xf2, 0x40, 0x5f, 0x35, 0xbe, 0xdf, 0x69, 0xee, 0x22, 0xdf, 0xf4, 0xc9, 0xb1,
	0xe1, 0x59, 0x1b, 0x01, 0xd7, 0x45, 0xe0, 0xa6, 0x40, 0x09, 0x3c, 0x94, 0xcc, 0xd3, 0xa4, 0x15,
	0xdd, 0xc8, 0xe0, 0xbc, 0xc6, 0x39, 0xb7, 0xd3, 0x1c, 0x91, 0x17, 0xa6, 0x30, 0xc2, 0x01, 0x28,
	0x79, 0xa2, 0x49, 0x2b, 0x33, 0x63, 0xc4, 0xc9, 0x10, 0x42, 0x02, 0x20, 0xc5, 0x7c, 0x88, 0x3c,
	0x44, 0x50, 0x41, 0xef, 0x1e, 0x53, 0x58, 0x8b, 0x65, 0x26, 0xb0, 0x7b, 0xa0, 0xb4, 0x55, 0x7a,
	0x50, 0xcf, 0xb4, 0x8e, 0x2e, 0x6e, 0x9b, 0x6d, 0x74, 0x0c, 0x03, 0xb0, 0x32, 0xa4, 0x16, 0xb1,
	0xf1, 0xfd, 0x0c, 0xe4, 0x5d, 0x86, 0x7c, 0x3d, 0xcb, 0xc5, 0x09, 0xc4, 0x22, 0x8e, 0xce, 0x48,
	0x8c, 0x0d, 0x1d, 0x12, 0x7d, 0xde, 0x92, 0xcf, 0x10, 0x29, 0x68, 0xeb, 0x7b, 0x83, 0xbe, 0x5a,
	0x76, 0x10, 0x19, 0xf5, 0x14, 0xe6, 0x79, 0x7a, 0xc0, 0x1b, 0xe6, 0x19, 0x22, 0x45, 0x0c, 0x7d,
	0x77, 0x1c, 0xc6, 0xde, 0x0d, 0xe6, 0xb8, 0x39, 0x64, 0x15, 0xb1, 0x72, 0x16, 0x96, 0xec, 0x23,
	0x06, 0xcb, 0x94, 0x45, 0xcf, 0x8c, 0xc4, 0xc8, 0xd5, 0xe4, 0x18, 0x61, 0x5f, 0x81, 0x9d, 0x80,
	0x7d, 0xa0, 0xb5, 0x55, 0xc9, 0x4c, 0x1a, 0xa2, 0x6f, 0x0c, 0xfa, 0x6a, 0x85, 0x1e, 0x1d, 0x23,
	0x23, 0x51, 0x82, 0x13, 0x06, 0xdc, 0xe3, 0x1b, 0x47, 0x53, 0x63, 0x27, 0x27, 0xf0, 0x6e, 0x8f,
	0xdb, 0xc9, 0x70, 0x6f, 0x4b, 0x38, 0x8d, 0xe1, 0xb2, 0xe7, 0x3c, 0x45, 0x8b, 0xbd, 0xcc, 0xa5,
	0xa5, 0xce, 0xe1, 0xd9, 0x68, 0xc9, 0xb8, 0x47, 0x7c, 0xdc, 0x3f, 0x0b, 0x5a, 0x66, 0xe1, 0x71,
	0xff, 0x80, 0x4e, 0x42, 0xc4, 0x32, 0x13, 0xd6, 0x7d, 0x76, 0xb6, 0x68, 0x79, 0xbd, 0xf9, 0x1d,
	0x9f, 0x3e, 0x8e, 0x2d, 0xd2, 0x9e, 0x8f, 0x33, 0x98, 0xf7, 0x38, 0x33, 0xa7, 0x45, 0x47, 0x90,
	0x45, 0xba, 0x74, 0x56, 0xa4, 0xdc, 0xa9, 0x5f, 0x73, 0x24, 0xdb, 0xb4, 0xbc, 0x56, 0xbd, 0x9b,
	0x70, 0x27, 0xdf, 0xc9, 0xf4, 0xa5, 0x41, 0x5f, 0xbd, 0xc6, 0xae, 0x29, 0xb4, 0x92, 0x4d, 0x05,
	0xee, 0xf1, 0x59, 0x60, 0x31, 0x39, 0xbd, 0xa9, 0x8f, 0x03, 0xe4, 0x4b, 0xd9, 0x74, 0xfd, 0x9c,
	0x6e, 0x94, 0xf4, 0xe5, 0x6b, 0x99, 0xa4, 0xaf, 0xfd, 0xae, 0xfc, 0xdc, 0x53, 0xe7, 0xba, 0x0f,
	0x7f, 0xed, 0xa9, 0xf1, 0x5d, 0xfd, 0xb4, 0xa7, 0x5e, 0xdf, 0x1e, 0xfe, 0x14, 0x2a, 0xa7, 0x3d,
	0xb5, 0x1a, 0x3b, 0xf2, 0x5b, 0x4f, 0x7d, 0x13, 0xc4, 0x31, 0x90, 0x1e, 0x20, 0xb0, 0x1c, 0x44,
	0x04, 0x8a, 0x53, 0x19, 0x56, 0x02, 0x1c, 0x12, 0xc8, 0x66, 0x80, 0x87, 0xc6, 0x95, 0xe7, 0x85,
	0xae, 0x83, 0x84, 0x31, 0x3d, 0xf6, 0xe9, 0xe2, 0xd9, 0x55, 0x5d, 0x39, 0xbf, 0xaa, 0x2b, 0x7f,
	0x5d, 0xd5, 0x95, 0x97, 0x8a, 0x35, 0xcf, 0x6e, 0xd4, 0xef, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x44, 0xf4, 0xe5, 0xd6, 0x84, 0x0c, 0x00, 0x00,
}
