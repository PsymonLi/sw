// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_network.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoMsgIPAMPolicyWatchHelper is a wrapper object for watch events for IPAMPolicy objects
type AutoMsgIPAMPolicyWatchHelper struct {
	Events []*AutoMsgIPAMPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgIPAMPolicyWatchHelper) Reset()         { *m = AutoMsgIPAMPolicyWatchHelper{} }
func (m *AutoMsgIPAMPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgIPAMPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgIPAMPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{0}
}

func (m *AutoMsgIPAMPolicyWatchHelper) GetEvents() []*AutoMsgIPAMPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgIPAMPolicyWatchHelper_WatchEvent struct {
	Type   string      `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *IPAMPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgIPAMPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgIPAMPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgIPAMPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{0, 0}
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) GetObject() *IPAMPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgLbPolicyWatchHelper is a wrapper object for watch events for LbPolicy objects
type AutoMsgLbPolicyWatchHelper struct {
	Events []*AutoMsgLbPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgLbPolicyWatchHelper) Reset()         { *m = AutoMsgLbPolicyWatchHelper{} }
func (m *AutoMsgLbPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLbPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgLbPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{1}
}

func (m *AutoMsgLbPolicyWatchHelper) GetEvents() []*AutoMsgLbPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgLbPolicyWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *LbPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) Reset()         { *m = AutoMsgLbPolicyWatchHelper_WatchEvent{} }
func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgLbPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgLbPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{1, 0}
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) GetObject() *LbPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgNetworkInterfaceWatchHelper is a wrapper object for watch events for NetworkInterface objects
type AutoMsgNetworkInterfaceWatchHelper struct {
	Events []*AutoMsgNetworkInterfaceWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgNetworkInterfaceWatchHelper) Reset()         { *m = AutoMsgNetworkInterfaceWatchHelper{} }
func (m *AutoMsgNetworkInterfaceWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNetworkInterfaceWatchHelper) ProtoMessage()    {}
func (*AutoMsgNetworkInterfaceWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{2}
}

func (m *AutoMsgNetworkInterfaceWatchHelper) GetEvents() []*AutoMsgNetworkInterfaceWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgNetworkInterfaceWatchHelper_WatchEvent struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *NetworkInterface `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgNetworkInterfaceWatchHelper_WatchEvent{}
}
func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgNetworkInterfaceWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgNetworkInterfaceWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{2, 0}
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) GetObject() *NetworkInterface {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgNetworkWatchHelper is a wrapper object for watch events for Network objects
type AutoMsgNetworkWatchHelper struct {
	Events []*AutoMsgNetworkWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgNetworkWatchHelper) Reset()         { *m = AutoMsgNetworkWatchHelper{} }
func (m *AutoMsgNetworkWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNetworkWatchHelper) ProtoMessage()    {}
func (*AutoMsgNetworkWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{3}
}

func (m *AutoMsgNetworkWatchHelper) GetEvents() []*AutoMsgNetworkWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgNetworkWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Network `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) Reset()         { *m = AutoMsgNetworkWatchHelper_WatchEvent{} }
func (m *AutoMsgNetworkWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgNetworkWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgNetworkWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{3, 0}
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) GetObject() *Network {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgRouteTableWatchHelper is a wrapper object for watch events for RouteTable objects
type AutoMsgRouteTableWatchHelper struct {
	Events []*AutoMsgRouteTableWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgRouteTableWatchHelper) Reset()         { *m = AutoMsgRouteTableWatchHelper{} }
func (m *AutoMsgRouteTableWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRouteTableWatchHelper) ProtoMessage()    {}
func (*AutoMsgRouteTableWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{4}
}

func (m *AutoMsgRouteTableWatchHelper) GetEvents() []*AutoMsgRouteTableWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgRouteTableWatchHelper_WatchEvent struct {
	Type   string      `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *RouteTable `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgRouteTableWatchHelper_WatchEvent{}
}
func (m *AutoMsgRouteTableWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRouteTableWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgRouteTableWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{4, 0}
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) GetObject() *RouteTable {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgRoutingConfigWatchHelper is a wrapper object for watch events for RoutingConfig objects
type AutoMsgRoutingConfigWatchHelper struct {
	Events []*AutoMsgRoutingConfigWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgRoutingConfigWatchHelper) Reset()         { *m = AutoMsgRoutingConfigWatchHelper{} }
func (m *AutoMsgRoutingConfigWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRoutingConfigWatchHelper) ProtoMessage()    {}
func (*AutoMsgRoutingConfigWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{5}
}

func (m *AutoMsgRoutingConfigWatchHelper) GetEvents() []*AutoMsgRoutingConfigWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgRoutingConfigWatchHelper_WatchEvent struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *RoutingConfig `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgRoutingConfigWatchHelper_WatchEvent{}
}
func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgRoutingConfigWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgRoutingConfigWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{5, 0}
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) GetObject() *RoutingConfig {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgServiceWatchHelper is a wrapper object for watch events for Service objects
type AutoMsgServiceWatchHelper struct {
	Events []*AutoMsgServiceWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgServiceWatchHelper) Reset()         { *m = AutoMsgServiceWatchHelper{} }
func (m *AutoMsgServiceWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgServiceWatchHelper) ProtoMessage()    {}
func (*AutoMsgServiceWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{6}
}

func (m *AutoMsgServiceWatchHelper) GetEvents() []*AutoMsgServiceWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgServiceWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Service `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) Reset()         { *m = AutoMsgServiceWatchHelper_WatchEvent{} }
func (m *AutoMsgServiceWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgServiceWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgServiceWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{6, 0}
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) GetObject() *Service {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgVirtualRouterWatchHelper is a wrapper object for watch events for VirtualRouter objects
type AutoMsgVirtualRouterWatchHelper struct {
	Events []*AutoMsgVirtualRouterWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgVirtualRouterWatchHelper) Reset()         { *m = AutoMsgVirtualRouterWatchHelper{} }
func (m *AutoMsgVirtualRouterWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgVirtualRouterWatchHelper) ProtoMessage()    {}
func (*AutoMsgVirtualRouterWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{7}
}

func (m *AutoMsgVirtualRouterWatchHelper) GetEvents() []*AutoMsgVirtualRouterWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgVirtualRouterWatchHelper_WatchEvent struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *VirtualRouter `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgVirtualRouterWatchHelper_WatchEvent{}
}
func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgVirtualRouterWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgVirtualRouterWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcNetwork, []int{7, 0}
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) GetObject() *VirtualRouter {
	if m != nil {
		return m.Object
	}
	return nil
}

// IPAMPolicyList is a container object for list of IPAMPolicy objects
type IPAMPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of IPAMPolicy objects
	Items []*IPAMPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *IPAMPolicyList) Reset()                    { *m = IPAMPolicyList{} }
func (m *IPAMPolicyList) String() string            { return proto.CompactTextString(m) }
func (*IPAMPolicyList) ProtoMessage()               {}
func (*IPAMPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{8} }

func (m *IPAMPolicyList) GetItems() []*IPAMPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// LbPolicyList is a container object for list of LbPolicy objects
type LbPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of LbPolicy objects
	Items []*LbPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *LbPolicyList) Reset()                    { *m = LbPolicyList{} }
func (m *LbPolicyList) String() string            { return proto.CompactTextString(m) }
func (*LbPolicyList) ProtoMessage()               {}
func (*LbPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{9} }

func (m *LbPolicyList) GetItems() []*LbPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// NetworkInterfaceList is a container object for list of NetworkInterface objects
type NetworkInterfaceList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of NetworkInterface objects
	Items []*NetworkInterface `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *NetworkInterfaceList) Reset()                    { *m = NetworkInterfaceList{} }
func (m *NetworkInterfaceList) String() string            { return proto.CompactTextString(m) }
func (*NetworkInterfaceList) ProtoMessage()               {}
func (*NetworkInterfaceList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{10} }

func (m *NetworkInterfaceList) GetItems() []*NetworkInterface {
	if m != nil {
		return m.Items
	}
	return nil
}

// NetworkList is a container object for list of Network objects
type NetworkList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Network objects
	Items []*Network `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *NetworkList) Reset()                    { *m = NetworkList{} }
func (m *NetworkList) String() string            { return proto.CompactTextString(m) }
func (*NetworkList) ProtoMessage()               {}
func (*NetworkList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{11} }

func (m *NetworkList) GetItems() []*Network {
	if m != nil {
		return m.Items
	}
	return nil
}

// RouteTableList is a container object for list of RouteTable objects
type RouteTableList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of RouteTable objects
	Items []*RouteTable `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *RouteTableList) Reset()                    { *m = RouteTableList{} }
func (m *RouteTableList) String() string            { return proto.CompactTextString(m) }
func (*RouteTableList) ProtoMessage()               {}
func (*RouteTableList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{12} }

func (m *RouteTableList) GetItems() []*RouteTable {
	if m != nil {
		return m.Items
	}
	return nil
}

// RoutingConfigList is a container object for list of RoutingConfig objects
type RoutingConfigList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of RoutingConfig objects
	Items []*RoutingConfig `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *RoutingConfigList) Reset()                    { *m = RoutingConfigList{} }
func (m *RoutingConfigList) String() string            { return proto.CompactTextString(m) }
func (*RoutingConfigList) ProtoMessage()               {}
func (*RoutingConfigList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{13} }

func (m *RoutingConfigList) GetItems() []*RoutingConfig {
	if m != nil {
		return m.Items
	}
	return nil
}

// ServiceList is a container object for list of Service objects
type ServiceList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Service objects
	Items []*Service `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{14} }

func (m *ServiceList) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

// VirtualRouterList is a container object for list of VirtualRouter objects
type VirtualRouterList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of VirtualRouter objects
	Items []*VirtualRouter `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *VirtualRouterList) Reset()                    { *m = VirtualRouterList{} }
func (m *VirtualRouterList) String() string            { return proto.CompactTextString(m) }
func (*VirtualRouterList) ProtoMessage()               {}
func (*VirtualRouterList) Descriptor() ([]byte, []int) { return fileDescriptorSvcNetwork, []int{15} }

func (m *VirtualRouterList) GetItems() []*VirtualRouter {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgIPAMPolicyWatchHelper)(nil), "network.AutoMsgIPAMPolicyWatchHelper")
	proto.RegisterType((*AutoMsgIPAMPolicyWatchHelper_WatchEvent)(nil), "network.AutoMsgIPAMPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgLbPolicyWatchHelper)(nil), "network.AutoMsgLbPolicyWatchHelper")
	proto.RegisterType((*AutoMsgLbPolicyWatchHelper_WatchEvent)(nil), "network.AutoMsgLbPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgNetworkInterfaceWatchHelper)(nil), "network.AutoMsgNetworkInterfaceWatchHelper")
	proto.RegisterType((*AutoMsgNetworkInterfaceWatchHelper_WatchEvent)(nil), "network.AutoMsgNetworkInterfaceWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgNetworkWatchHelper)(nil), "network.AutoMsgNetworkWatchHelper")
	proto.RegisterType((*AutoMsgNetworkWatchHelper_WatchEvent)(nil), "network.AutoMsgNetworkWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgRouteTableWatchHelper)(nil), "network.AutoMsgRouteTableWatchHelper")
	proto.RegisterType((*AutoMsgRouteTableWatchHelper_WatchEvent)(nil), "network.AutoMsgRouteTableWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgRoutingConfigWatchHelper)(nil), "network.AutoMsgRoutingConfigWatchHelper")
	proto.RegisterType((*AutoMsgRoutingConfigWatchHelper_WatchEvent)(nil), "network.AutoMsgRoutingConfigWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgServiceWatchHelper)(nil), "network.AutoMsgServiceWatchHelper")
	proto.RegisterType((*AutoMsgServiceWatchHelper_WatchEvent)(nil), "network.AutoMsgServiceWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgVirtualRouterWatchHelper)(nil), "network.AutoMsgVirtualRouterWatchHelper")
	proto.RegisterType((*AutoMsgVirtualRouterWatchHelper_WatchEvent)(nil), "network.AutoMsgVirtualRouterWatchHelper.WatchEvent")
	proto.RegisterType((*IPAMPolicyList)(nil), "network.IPAMPolicyList")
	proto.RegisterType((*LbPolicyList)(nil), "network.LbPolicyList")
	proto.RegisterType((*NetworkInterfaceList)(nil), "network.NetworkInterfaceList")
	proto.RegisterType((*NetworkList)(nil), "network.NetworkList")
	proto.RegisterType((*RouteTableList)(nil), "network.RouteTableList")
	proto.RegisterType((*RoutingConfigList)(nil), "network.RoutingConfigList")
	proto.RegisterType((*ServiceList)(nil), "network.ServiceList")
	proto.RegisterType((*VirtualRouterList)(nil), "network.VirtualRouterList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkV1 service

type NetworkV1Client interface {
	// Create IPAMPolicy object
	AutoAddIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error)
	// Create LbPolicy object
	AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	// Create Network object
	AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	// Create NetworkInterface object
	AutoAddNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error)
	// Create RouteTable object
	AutoAddRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error)
	// Create RoutingConfig object
	AutoAddRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error)
	// Create Service object
	AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// Create VirtualRouter object
	AutoAddVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error)
	// Delete IPAMPolicy object
	AutoDeleteIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error)
	// Delete LbPolicy object
	AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	// Delete Network object
	AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	// Delete NetworkInterface object
	AutoDeleteNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error)
	// Delete RouteTable object
	AutoDeleteRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error)
	// Delete RoutingConfig object
	AutoDeleteRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error)
	// Delete Service object
	AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// Delete VirtualRouter object
	AutoDeleteVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error)
	// Get IPAMPolicy object
	AutoGetIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error)
	// Get LbPolicy object
	AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	// Get Network object
	AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	// Get NetworkInterface object
	AutoGetNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error)
	// Get RouteTable object
	AutoGetRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error)
	// Get RoutingConfig object
	AutoGetRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error)
	// Get Service object
	AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// Get VirtualRouter object
	AutoGetVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error)
	// List IPAMPolicy objects
	AutoListIPAMPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*IPAMPolicyList, error)
	// List LbPolicy objects
	AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error)
	// List Network objects
	AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error)
	// List NetworkInterface objects
	AutoListNetworkInterface(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkInterfaceList, error)
	// List RouteTable objects
	AutoListRouteTable(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RouteTableList, error)
	// List RoutingConfig objects
	AutoListRoutingConfig(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoutingConfigList, error)
	// List Service objects
	AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error)
	// List VirtualRouter objects
	AutoListVirtualRouter(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VirtualRouterList, error)
	// Update IPAMPolicy object
	AutoUpdateIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error)
	// Update LbPolicy object
	AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error)
	// Update Network object
	AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error)
	// Update NetworkInterface object
	AutoUpdateNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error)
	// Update RouteTable object
	AutoUpdateRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error)
	// Update RoutingConfig object
	AutoUpdateRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error)
	// Update Service object
	AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error)
	// Update VirtualRouter object
	AutoUpdateVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error)
	// Watch IPAMPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchIPAMPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchIPAMPolicyClient, error)
	// Watch LbPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchLbPolicyClient, error)
	// Watch Network objects. Supports WebSockets or HTTP long poll
	AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error)
	// Watch NetworkInterface objects. Supports WebSockets or HTTP long poll
	AutoWatchNetworkInterface(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkInterfaceClient, error)
	// Watch RouteTable objects. Supports WebSockets or HTTP long poll
	AutoWatchRouteTable(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchRouteTableClient, error)
	// Watch RoutingConfig objects. Supports WebSockets or HTTP long poll
	AutoWatchRoutingConfig(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchRoutingConfigClient, error)
	// Watch Service objects. Supports WebSockets or HTTP long poll
	AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchServiceClient, error)
	AutoWatchSvcNetworkV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchSvcNetworkV1Client, error)
	// Watch VirtualRouter objects. Supports WebSockets or HTTP long poll
	AutoWatchVirtualRouter(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchVirtualRouterClient, error)
}

type networkV1Client struct {
	cc *grpc.ClientConn
}

func NewNetworkV1Client(cc *grpc.ClientConn) NetworkV1Client {
	return &networkV1Client{cc}
}

func (c *networkV1Client) AutoAddIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error) {
	out := new(IPAMPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddIPAMPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error) {
	out := new(NetworkInterface)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddNetworkInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddRouteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error) {
	out := new(RoutingConfig)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddRoutingConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoAddVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error) {
	out := new(VirtualRouter)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoAddVirtualRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error) {
	out := new(IPAMPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteIPAMPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error) {
	out := new(NetworkInterface)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteNetworkInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteRouteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error) {
	out := new(RoutingConfig)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteRoutingConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoDeleteVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error) {
	out := new(VirtualRouter)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoDeleteVirtualRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error) {
	out := new(IPAMPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetIPAMPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error) {
	out := new(NetworkInterface)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetNetworkInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetRouteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error) {
	out := new(RoutingConfig)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetRoutingConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoGetVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error) {
	out := new(VirtualRouter)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoGetVirtualRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListIPAMPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*IPAMPolicyList, error) {
	out := new(IPAMPolicyList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListIPAMPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*LbPolicyList, error) {
	out := new(LbPolicyList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkList, error) {
	out := new(NetworkList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListNetworkInterface(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*NetworkInterfaceList, error) {
	out := new(NetworkInterfaceList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListNetworkInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListRouteTable(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RouteTableList, error) {
	out := new(RouteTableList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListRouteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListRoutingConfig(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RoutingConfigList, error) {
	out := new(RoutingConfigList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListRoutingConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoListVirtualRouter(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*VirtualRouterList, error) {
	out := new(VirtualRouterList)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoListVirtualRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateIPAMPolicy(ctx context.Context, in *IPAMPolicy, opts ...grpc.CallOption) (*IPAMPolicy, error) {
	out := new(IPAMPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateIPAMPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy, opts ...grpc.CallOption) (*LbPolicy, error) {
	out := new(LbPolicy)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateLbPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateNetworkInterface(ctx context.Context, in *NetworkInterface, opts ...grpc.CallOption) (*NetworkInterface, error) {
	out := new(NetworkInterface)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateNetworkInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateRouteTable(ctx context.Context, in *RouteTable, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateRouteTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateRoutingConfig(ctx context.Context, in *RoutingConfig, opts ...grpc.CallOption) (*RoutingConfig, error) {
	out := new(RoutingConfig)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateRoutingConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoUpdateVirtualRouter(ctx context.Context, in *VirtualRouter, opts ...grpc.CallOption) (*VirtualRouter, error) {
	out := new(VirtualRouter)
	err := grpc.Invoke(ctx, "/network.NetworkV1/AutoUpdateVirtualRouter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkV1Client) AutoWatchIPAMPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchIPAMPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[0], c.cc, "/network.NetworkV1/AutoWatchIPAMPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchIPAMPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchIPAMPolicyClient interface {
	Recv() (*AutoMsgIPAMPolicyWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchIPAMPolicyClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchIPAMPolicyClient) Recv() (*AutoMsgIPAMPolicyWatchHelper, error) {
	m := new(AutoMsgIPAMPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchLbPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[1], c.cc, "/network.NetworkV1/AutoWatchLbPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchLbPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchLbPolicyClient interface {
	Recv() (*AutoMsgLbPolicyWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchLbPolicyClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchLbPolicyClient) Recv() (*AutoMsgLbPolicyWatchHelper, error) {
	m := new(AutoMsgLbPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[2], c.cc, "/network.NetworkV1/AutoWatchNetwork", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchNetworkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchNetworkClient interface {
	Recv() (*AutoMsgNetworkWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchNetworkClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchNetworkClient) Recv() (*AutoMsgNetworkWatchHelper, error) {
	m := new(AutoMsgNetworkWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchNetworkInterface(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchNetworkInterfaceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[3], c.cc, "/network.NetworkV1/AutoWatchNetworkInterface", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchNetworkInterfaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchNetworkInterfaceClient interface {
	Recv() (*AutoMsgNetworkInterfaceWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchNetworkInterfaceClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchNetworkInterfaceClient) Recv() (*AutoMsgNetworkInterfaceWatchHelper, error) {
	m := new(AutoMsgNetworkInterfaceWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchRouteTable(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchRouteTableClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[4], c.cc, "/network.NetworkV1/AutoWatchRouteTable", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchRouteTableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchRouteTableClient interface {
	Recv() (*AutoMsgRouteTableWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchRouteTableClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchRouteTableClient) Recv() (*AutoMsgRouteTableWatchHelper, error) {
	m := new(AutoMsgRouteTableWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchRoutingConfig(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchRoutingConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[5], c.cc, "/network.NetworkV1/AutoWatchRoutingConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchRoutingConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchRoutingConfigClient interface {
	Recv() (*AutoMsgRoutingConfigWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchRoutingConfigClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchRoutingConfigClient) Recv() (*AutoMsgRoutingConfigWatchHelper, error) {
	m := new(AutoMsgRoutingConfigWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchService(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[6], c.cc, "/network.NetworkV1/AutoWatchService", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchServiceClient interface {
	Recv() (*AutoMsgServiceWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchServiceClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchServiceClient) Recv() (*AutoMsgServiceWatchHelper, error) {
	m := new(AutoMsgServiceWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchSvcNetworkV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchSvcNetworkV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[7], c.cc, "/network.NetworkV1/AutoWatchSvcNetworkV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchSvcNetworkV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchSvcNetworkV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type networkV1AutoWatchSvcNetworkV1Client struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchSvcNetworkV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkV1Client) AutoWatchVirtualRouter(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (NetworkV1_AutoWatchVirtualRouterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkV1_serviceDesc.Streams[8], c.cc, "/network.NetworkV1/AutoWatchVirtualRouter", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkV1AutoWatchVirtualRouterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkV1_AutoWatchVirtualRouterClient interface {
	Recv() (*AutoMsgVirtualRouterWatchHelper, error)
	grpc.ClientStream
}

type networkV1AutoWatchVirtualRouterClient struct {
	grpc.ClientStream
}

func (x *networkV1AutoWatchVirtualRouterClient) Recv() (*AutoMsgVirtualRouterWatchHelper, error) {
	m := new(AutoMsgVirtualRouterWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkV1 service

type NetworkV1Server interface {
	// Create IPAMPolicy object
	AutoAddIPAMPolicy(context.Context, *IPAMPolicy) (*IPAMPolicy, error)
	// Create LbPolicy object
	AutoAddLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	// Create Network object
	AutoAddNetwork(context.Context, *Network) (*Network, error)
	// Create NetworkInterface object
	AutoAddNetworkInterface(context.Context, *NetworkInterface) (*NetworkInterface, error)
	// Create RouteTable object
	AutoAddRouteTable(context.Context, *RouteTable) (*RouteTable, error)
	// Create RoutingConfig object
	AutoAddRoutingConfig(context.Context, *RoutingConfig) (*RoutingConfig, error)
	// Create Service object
	AutoAddService(context.Context, *Service) (*Service, error)
	// Create VirtualRouter object
	AutoAddVirtualRouter(context.Context, *VirtualRouter) (*VirtualRouter, error)
	// Delete IPAMPolicy object
	AutoDeleteIPAMPolicy(context.Context, *IPAMPolicy) (*IPAMPolicy, error)
	// Delete LbPolicy object
	AutoDeleteLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	// Delete Network object
	AutoDeleteNetwork(context.Context, *Network) (*Network, error)
	// Delete NetworkInterface object
	AutoDeleteNetworkInterface(context.Context, *NetworkInterface) (*NetworkInterface, error)
	// Delete RouteTable object
	AutoDeleteRouteTable(context.Context, *RouteTable) (*RouteTable, error)
	// Delete RoutingConfig object
	AutoDeleteRoutingConfig(context.Context, *RoutingConfig) (*RoutingConfig, error)
	// Delete Service object
	AutoDeleteService(context.Context, *Service) (*Service, error)
	// Delete VirtualRouter object
	AutoDeleteVirtualRouter(context.Context, *VirtualRouter) (*VirtualRouter, error)
	// Get IPAMPolicy object
	AutoGetIPAMPolicy(context.Context, *IPAMPolicy) (*IPAMPolicy, error)
	// Get LbPolicy object
	AutoGetLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	// Get Network object
	AutoGetNetwork(context.Context, *Network) (*Network, error)
	// Get NetworkInterface object
	AutoGetNetworkInterface(context.Context, *NetworkInterface) (*NetworkInterface, error)
	// Get RouteTable object
	AutoGetRouteTable(context.Context, *RouteTable) (*RouteTable, error)
	// Get RoutingConfig object
	AutoGetRoutingConfig(context.Context, *RoutingConfig) (*RoutingConfig, error)
	// Get Service object
	AutoGetService(context.Context, *Service) (*Service, error)
	// Get VirtualRouter object
	AutoGetVirtualRouter(context.Context, *VirtualRouter) (*VirtualRouter, error)
	// List IPAMPolicy objects
	AutoListIPAMPolicy(context.Context, *api.ListWatchOptions) (*IPAMPolicyList, error)
	// List LbPolicy objects
	AutoListLbPolicy(context.Context, *api.ListWatchOptions) (*LbPolicyList, error)
	// List Network objects
	AutoListNetwork(context.Context, *api.ListWatchOptions) (*NetworkList, error)
	// List NetworkInterface objects
	AutoListNetworkInterface(context.Context, *api.ListWatchOptions) (*NetworkInterfaceList, error)
	// List RouteTable objects
	AutoListRouteTable(context.Context, *api.ListWatchOptions) (*RouteTableList, error)
	// List RoutingConfig objects
	AutoListRoutingConfig(context.Context, *api.ListWatchOptions) (*RoutingConfigList, error)
	// List Service objects
	AutoListService(context.Context, *api.ListWatchOptions) (*ServiceList, error)
	// List VirtualRouter objects
	AutoListVirtualRouter(context.Context, *api.ListWatchOptions) (*VirtualRouterList, error)
	// Update IPAMPolicy object
	AutoUpdateIPAMPolicy(context.Context, *IPAMPolicy) (*IPAMPolicy, error)
	// Update LbPolicy object
	AutoUpdateLbPolicy(context.Context, *LbPolicy) (*LbPolicy, error)
	// Update Network object
	AutoUpdateNetwork(context.Context, *Network) (*Network, error)
	// Update NetworkInterface object
	AutoUpdateNetworkInterface(context.Context, *NetworkInterface) (*NetworkInterface, error)
	// Update RouteTable object
	AutoUpdateRouteTable(context.Context, *RouteTable) (*RouteTable, error)
	// Update RoutingConfig object
	AutoUpdateRoutingConfig(context.Context, *RoutingConfig) (*RoutingConfig, error)
	// Update Service object
	AutoUpdateService(context.Context, *Service) (*Service, error)
	// Update VirtualRouter object
	AutoUpdateVirtualRouter(context.Context, *VirtualRouter) (*VirtualRouter, error)
	// Watch IPAMPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchIPAMPolicy(*api.ListWatchOptions, NetworkV1_AutoWatchIPAMPolicyServer) error
	// Watch LbPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchLbPolicy(*api.ListWatchOptions, NetworkV1_AutoWatchLbPolicyServer) error
	// Watch Network objects. Supports WebSockets or HTTP long poll
	AutoWatchNetwork(*api.ListWatchOptions, NetworkV1_AutoWatchNetworkServer) error
	// Watch NetworkInterface objects. Supports WebSockets or HTTP long poll
	AutoWatchNetworkInterface(*api.ListWatchOptions, NetworkV1_AutoWatchNetworkInterfaceServer) error
	// Watch RouteTable objects. Supports WebSockets or HTTP long poll
	AutoWatchRouteTable(*api.ListWatchOptions, NetworkV1_AutoWatchRouteTableServer) error
	// Watch RoutingConfig objects. Supports WebSockets or HTTP long poll
	AutoWatchRoutingConfig(*api.ListWatchOptions, NetworkV1_AutoWatchRoutingConfigServer) error
	// Watch Service objects. Supports WebSockets or HTTP long poll
	AutoWatchService(*api.ListWatchOptions, NetworkV1_AutoWatchServiceServer) error
	AutoWatchSvcNetworkV1(*api.ListWatchOptions, NetworkV1_AutoWatchSvcNetworkV1Server) error
	// Watch VirtualRouter objects. Supports WebSockets or HTTP long poll
	AutoWatchVirtualRouter(*api.ListWatchOptions, NetworkV1_AutoWatchVirtualRouterServer) error
}

func RegisterNetworkV1Server(s *grpc.Server, srv NetworkV1Server) {
	s.RegisterService(&_NetworkV1_serviceDesc, srv)
}

func _NetworkV1_AutoAddIPAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddIPAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddIPAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddIPAMPolicy(ctx, req.(*IPAMPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddNetworkInterface(ctx, req.(*NetworkInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddRouteTable(ctx, req.(*RouteTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddRoutingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddRoutingConfig(ctx, req.(*RoutingConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoAddVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoAddVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoAddVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoAddVirtualRouter(ctx, req.(*VirtualRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteIPAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteIPAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteIPAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteIPAMPolicy(ctx, req.(*IPAMPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteNetworkInterface(ctx, req.(*NetworkInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteRouteTable(ctx, req.(*RouteTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteRoutingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteRoutingConfig(ctx, req.(*RoutingConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoDeleteVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoDeleteVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoDeleteVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoDeleteVirtualRouter(ctx, req.(*VirtualRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetIPAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetIPAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetIPAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetIPAMPolicy(ctx, req.(*IPAMPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetNetworkInterface(ctx, req.(*NetworkInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetRouteTable(ctx, req.(*RouteTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetRoutingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetRoutingConfig(ctx, req.(*RoutingConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoGetVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoGetVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoGetVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoGetVirtualRouter(ctx, req.(*VirtualRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListIPAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListIPAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListIPAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListIPAMPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListLbPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListNetwork(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListNetworkInterface(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListRouteTable(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListRoutingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListRoutingConfig(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListService(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoListVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoListVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoListVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoListVirtualRouter(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateIPAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAMPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateIPAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateIPAMPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateIPAMPolicy(ctx, req.(*IPAMPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LbPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateLbPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateLbPolicy(ctx, req.(*LbPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateNetworkInterface(ctx, req.(*NetworkInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateRouteTable(ctx, req.(*RouteTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateRoutingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateRoutingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateRoutingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateRoutingConfig(ctx, req.(*RoutingConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoUpdateVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualRouter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkV1Server).AutoUpdateVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkV1/AutoUpdateVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkV1Server).AutoUpdateVirtualRouter(ctx, req.(*VirtualRouter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkV1_AutoWatchIPAMPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchIPAMPolicy(m, &networkV1AutoWatchIPAMPolicyServer{stream})
}

type NetworkV1_AutoWatchIPAMPolicyServer interface {
	Send(*AutoMsgIPAMPolicyWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchIPAMPolicyServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchIPAMPolicyServer) Send(m *AutoMsgIPAMPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchLbPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchLbPolicy(m, &networkV1AutoWatchLbPolicyServer{stream})
}

type NetworkV1_AutoWatchLbPolicyServer interface {
	Send(*AutoMsgLbPolicyWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchLbPolicyServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchLbPolicyServer) Send(m *AutoMsgLbPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchNetwork(m, &networkV1AutoWatchNetworkServer{stream})
}

type NetworkV1_AutoWatchNetworkServer interface {
	Send(*AutoMsgNetworkWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchNetworkServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchNetworkServer) Send(m *AutoMsgNetworkWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchNetworkInterface_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchNetworkInterface(m, &networkV1AutoWatchNetworkInterfaceServer{stream})
}

type NetworkV1_AutoWatchNetworkInterfaceServer interface {
	Send(*AutoMsgNetworkInterfaceWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchNetworkInterfaceServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchNetworkInterfaceServer) Send(m *AutoMsgNetworkInterfaceWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchRouteTable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchRouteTable(m, &networkV1AutoWatchRouteTableServer{stream})
}

type NetworkV1_AutoWatchRouteTableServer interface {
	Send(*AutoMsgRouteTableWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchRouteTableServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchRouteTableServer) Send(m *AutoMsgRouteTableWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchRoutingConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchRoutingConfig(m, &networkV1AutoWatchRoutingConfigServer{stream})
}

type NetworkV1_AutoWatchRoutingConfigServer interface {
	Send(*AutoMsgRoutingConfigWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchRoutingConfigServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchRoutingConfigServer) Send(m *AutoMsgRoutingConfigWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchService(m, &networkV1AutoWatchServiceServer{stream})
}

type NetworkV1_AutoWatchServiceServer interface {
	Send(*AutoMsgServiceWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchServiceServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchServiceServer) Send(m *AutoMsgServiceWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchSvcNetworkV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchSvcNetworkV1(m, &networkV1AutoWatchSvcNetworkV1Server{stream})
}

type NetworkV1_AutoWatchSvcNetworkV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type networkV1AutoWatchSvcNetworkV1Server struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchSvcNetworkV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkV1_AutoWatchVirtualRouter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkV1Server).AutoWatchVirtualRouter(m, &networkV1AutoWatchVirtualRouterServer{stream})
}

type NetworkV1_AutoWatchVirtualRouterServer interface {
	Send(*AutoMsgVirtualRouterWatchHelper) error
	grpc.ServerStream
}

type networkV1AutoWatchVirtualRouterServer struct {
	grpc.ServerStream
}

func (x *networkV1AutoWatchVirtualRouterServer) Send(m *AutoMsgVirtualRouterWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.NetworkV1",
	HandlerType: (*NetworkV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddIPAMPolicy",
			Handler:    _NetworkV1_AutoAddIPAMPolicy_Handler,
		},
		{
			MethodName: "AutoAddLbPolicy",
			Handler:    _NetworkV1_AutoAddLbPolicy_Handler,
		},
		{
			MethodName: "AutoAddNetwork",
			Handler:    _NetworkV1_AutoAddNetwork_Handler,
		},
		{
			MethodName: "AutoAddNetworkInterface",
			Handler:    _NetworkV1_AutoAddNetworkInterface_Handler,
		},
		{
			MethodName: "AutoAddRouteTable",
			Handler:    _NetworkV1_AutoAddRouteTable_Handler,
		},
		{
			MethodName: "AutoAddRoutingConfig",
			Handler:    _NetworkV1_AutoAddRoutingConfig_Handler,
		},
		{
			MethodName: "AutoAddService",
			Handler:    _NetworkV1_AutoAddService_Handler,
		},
		{
			MethodName: "AutoAddVirtualRouter",
			Handler:    _NetworkV1_AutoAddVirtualRouter_Handler,
		},
		{
			MethodName: "AutoDeleteIPAMPolicy",
			Handler:    _NetworkV1_AutoDeleteIPAMPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteLbPolicy",
			Handler:    _NetworkV1_AutoDeleteLbPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteNetwork",
			Handler:    _NetworkV1_AutoDeleteNetwork_Handler,
		},
		{
			MethodName: "AutoDeleteNetworkInterface",
			Handler:    _NetworkV1_AutoDeleteNetworkInterface_Handler,
		},
		{
			MethodName: "AutoDeleteRouteTable",
			Handler:    _NetworkV1_AutoDeleteRouteTable_Handler,
		},
		{
			MethodName: "AutoDeleteRoutingConfig",
			Handler:    _NetworkV1_AutoDeleteRoutingConfig_Handler,
		},
		{
			MethodName: "AutoDeleteService",
			Handler:    _NetworkV1_AutoDeleteService_Handler,
		},
		{
			MethodName: "AutoDeleteVirtualRouter",
			Handler:    _NetworkV1_AutoDeleteVirtualRouter_Handler,
		},
		{
			MethodName: "AutoGetIPAMPolicy",
			Handler:    _NetworkV1_AutoGetIPAMPolicy_Handler,
		},
		{
			MethodName: "AutoGetLbPolicy",
			Handler:    _NetworkV1_AutoGetLbPolicy_Handler,
		},
		{
			MethodName: "AutoGetNetwork",
			Handler:    _NetworkV1_AutoGetNetwork_Handler,
		},
		{
			MethodName: "AutoGetNetworkInterface",
			Handler:    _NetworkV1_AutoGetNetworkInterface_Handler,
		},
		{
			MethodName: "AutoGetRouteTable",
			Handler:    _NetworkV1_AutoGetRouteTable_Handler,
		},
		{
			MethodName: "AutoGetRoutingConfig",
			Handler:    _NetworkV1_AutoGetRoutingConfig_Handler,
		},
		{
			MethodName: "AutoGetService",
			Handler:    _NetworkV1_AutoGetService_Handler,
		},
		{
			MethodName: "AutoGetVirtualRouter",
			Handler:    _NetworkV1_AutoGetVirtualRouter_Handler,
		},
		{
			MethodName: "AutoListIPAMPolicy",
			Handler:    _NetworkV1_AutoListIPAMPolicy_Handler,
		},
		{
			MethodName: "AutoListLbPolicy",
			Handler:    _NetworkV1_AutoListLbPolicy_Handler,
		},
		{
			MethodName: "AutoListNetwork",
			Handler:    _NetworkV1_AutoListNetwork_Handler,
		},
		{
			MethodName: "AutoListNetworkInterface",
			Handler:    _NetworkV1_AutoListNetworkInterface_Handler,
		},
		{
			MethodName: "AutoListRouteTable",
			Handler:    _NetworkV1_AutoListRouteTable_Handler,
		},
		{
			MethodName: "AutoListRoutingConfig",
			Handler:    _NetworkV1_AutoListRoutingConfig_Handler,
		},
		{
			MethodName: "AutoListService",
			Handler:    _NetworkV1_AutoListService_Handler,
		},
		{
			MethodName: "AutoListVirtualRouter",
			Handler:    _NetworkV1_AutoListVirtualRouter_Handler,
		},
		{
			MethodName: "AutoUpdateIPAMPolicy",
			Handler:    _NetworkV1_AutoUpdateIPAMPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateLbPolicy",
			Handler:    _NetworkV1_AutoUpdateLbPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateNetwork",
			Handler:    _NetworkV1_AutoUpdateNetwork_Handler,
		},
		{
			MethodName: "AutoUpdateNetworkInterface",
			Handler:    _NetworkV1_AutoUpdateNetworkInterface_Handler,
		},
		{
			MethodName: "AutoUpdateRouteTable",
			Handler:    _NetworkV1_AutoUpdateRouteTable_Handler,
		},
		{
			MethodName: "AutoUpdateRoutingConfig",
			Handler:    _NetworkV1_AutoUpdateRoutingConfig_Handler,
		},
		{
			MethodName: "AutoUpdateService",
			Handler:    _NetworkV1_AutoUpdateService_Handler,
		},
		{
			MethodName: "AutoUpdateVirtualRouter",
			Handler:    _NetworkV1_AutoUpdateVirtualRouter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchIPAMPolicy",
			Handler:       _NetworkV1_AutoWatchIPAMPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchLbPolicy",
			Handler:       _NetworkV1_AutoWatchLbPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchNetwork",
			Handler:       _NetworkV1_AutoWatchNetwork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchNetworkInterface",
			Handler:       _NetworkV1_AutoWatchNetworkInterface_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchRouteTable",
			Handler:       _NetworkV1_AutoWatchRouteTable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchRoutingConfig",
			Handler:       _NetworkV1_AutoWatchRoutingConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchService",
			Handler:       _NetworkV1_AutoWatchService_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcNetworkV1",
			Handler:       _NetworkV1_AutoWatchSvcNetworkV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchVirtualRouter",
			Handler:       _NetworkV1_AutoWatchVirtualRouter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_network.proto",
}

func (m *AutoMsgIPAMPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgIPAMPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgLbPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLbPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgNetworkInterfaceWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkInterfaceWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgNetworkWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgRouteTableWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRouteTableWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgRoutingConfigWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoutingConfigWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgServiceWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgServiceWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AutoMsgVirtualRouterWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgVirtualRouterWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcNetwork(dAtA, i, uint64(m.Object.Size()))
		n8, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *IPAMPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAMPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n10, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LbPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LbPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n12, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkInterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterfaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n13, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n14, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n15, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n16, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RouteTableList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteTableList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n17, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n18, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoutingConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingConfigList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n19, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n20, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n21, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n22, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VirtualRouterList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualRouterList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n23, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcNetwork(dAtA, i, uint64(m.ListMeta.Size()))
	n24, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgIPAMPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgLbPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgNetworkInterfaceWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgNetworkWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgNetworkWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgRouteTableWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgRouteTableWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgRoutingConfigWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgServiceWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgServiceWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *AutoMsgVirtualRouterWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcNetwork(uint64(l))
	}
	return n
}

func (m *IPAMPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *LbPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkInterfaceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *RouteTableList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *RoutingConfigList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *ServiceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func (m *VirtualRouterList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcNetwork(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcNetwork(uint64(l))
		}
	}
	return n
}

func sovSvcNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcNetwork(x uint64) (n int) {
	return sovSvcNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgIPAMPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgIPAMPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgIPAMPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgIPAMPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgIPAMPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &IPAMPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgLbPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgLbPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgLbPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgLbPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &LbPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkInterfaceWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNetworkInterfaceWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNetworkInterfaceWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgNetworkInterfaceWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkInterfaceWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &NetworkInterface{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgNetworkWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgNetworkWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgNetworkWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Network{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRouteTableWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRouteTableWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRouteTableWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgRouteTableWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRouteTableWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &RouteTable{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoutingConfigWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRoutingConfigWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRoutingConfigWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgRoutingConfigWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRoutingConfigWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &RoutingConfig{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgServiceWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgServiceWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgServiceWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgServiceWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Service{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgVirtualRouterWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgVirtualRouterWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgVirtualRouterWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgVirtualRouterWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgVirtualRouterWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &VirtualRouter{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAMPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAMPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAMPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &IPAMPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LbPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LbPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LbPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &LbPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &NetworkInterface{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Network{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteTableList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteTableList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteTableList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RouteTable{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RoutingConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Service{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VirtualRouterList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualRouterList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualRouterList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VirtualRouter{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_network.proto", fileDescriptorSvcNetwork) }

var fileDescriptorSvcNetwork = []byte{
	// 2161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x5d, 0x6c, 0x1c, 0x47,
	0x1d, 0xbf, 0x89, 0x13, 0x27, 0x1e, 0x37, 0xfe, 0x18, 0x7f, 0xc4, 0xbb, 0x49, 0x7d, 0xce, 0x42,
	0xc0, 0xb8, 0xf5, 0xed, 0xd9, 0x49, 0x1d, 0x61, 0x55, 0x85, 0x98, 0xa6, 0x71, 0x68, 0xe2, 0xb8,
	0xe6, 0x9a, 0x96, 0x08, 0xa8, 0xf6, 0xce, 0xe3, 0xcb, 0x96, 0xf3, 0xee, 0xe9, 0x76, 0xef, 0xa2,
	0xa8, 0xaa, 0x04, 0x39, 0x57, 0xf0, 0x04, 0x12, 0x08, 0x8a, 0x78, 0x8a, 0xfc, 0x80, 0x50, 0x24,
	0x1e, 0x08, 0x1f, 0xe2, 0x09, 0xf1, 0xd8, 0xc7, 0x4a, 0x3c, 0x11, 0x24, 0x83, 0x22, 0x10, 0xc8,
	0xbc, 0xf0, 0xca, 0x1b, 0xda, 0x99, 0xd9, 0x8f, 0xd9, 0x9d, 0xf1, 0xee, 0x9e, 0xa5, 0xc8, 0x79,
	0xb1, 0x77, 0x67, 0xe7, 0x3f, 0xf3, 0xfb, 0xfd, 0xe7, 0xff, 0x35, 0x73, 0x03, 0x47, 0x9d, 0x4e,
	0xed, 0x3d, 0x0b, 0xbb, 0xf7, 0xec, 0xd6, 0xb7, 0x4b, 0xcd, 0x96, 0xed, 0xda, 0xe8, 0x24, 0x7b,
	0x55, 0xcf, 0xd5, 0x6d, 0xbb, 0xde, 0xc0, 0xba, 0xd1, 0x34, 0x75, 0xc3, 0xb2, 0x6c, 0xd7, 0x70,
	0x4d, 0xdb, 0x72, 0x68, 0x37, 0xf5, 0x6a, 0xdd, 0x74, 0xef, 0xb6, 0xab, 0xa5, 0x9a, 0xbd, 0xad,
	0x37, 0xb1, 0xe5, 0x18, 0xd6, 0xa6, 0xad, 0x3b, 0xf7, 0xf4, 0x0e, 0xb6, 0xcc, 0x1a, 0xd6, 0xdb,
	0xae, 0xd9, 0x70, 0x3c, 0xd1, 0x3a, 0xb6, 0xa2, 0xd2, 0xba, 0x69, 0xd5, 0x1a, 0xed, 0x4d, 0xec,
	0x0f, 0x33, 0x1f, 0x19, 0xa6, 0x6e, 0xd7, 0x6d, 0x9d, 0x34, 0x57, 0xdb, 0x5b, 0xe4, 0x8d, 0xbc,
	0x90, 0x27, 0xd6, 0xbd, 0x2c, 0x99, 0xd5, 0xc3, 0xd8, 0x30, 0xaa, 0xb8, 0xe1, 0xe8, 0x0e, 0x6e,
	0xe0, 0x9a, 0x6b, 0xb7, 0x98, 0xc4, 0x0b, 0x2e, 0xb6, 0x0c, 0xcb, 0x65, 0x6f, 0xa7, 0x39, 0xae,
	0xea, 0xa9, 0x46, 0xd5, 0xff, 0xe0, 0xe0, 0x56, 0xc7, 0xac, 0x61, 0xf6, 0x3a, 0xd0, 0x69, 0x6d,
	0xb1, 0xc7, 0x49, 0x26, 0x62, 0x5a, 0x2e, 0x6e, 0x6d, 0x19, 0x41, 0x17, 0x68, 0x36, 0x8d, 0x6d,
	0xf6, 0x3c, 0xd8, 0xb2, 0xdb, 0xae, 0xff, 0xe1, 0xc2, 0x01, 0x18, 0xb7, 0xb1, 0x6b, 0xd0, 0x6e,
	0xda, 0x7f, 0x01, 0x3c, 0x77, 0xa5, 0xed, 0xda, 0x37, 0x9d, 0xfa, 0xf5, 0xf5, 0x2b, 0x37, 0xd7,
	0xed, 0x86, 0x59, 0xbb, 0xff, 0x8e, 0xe1, 0xd6, 0xee, 0xae, 0xe2, 0x46, 0x13, 0xb7, 0x50, 0x05,
	0xf6, 0x5f, 0xed, 0x60, 0xcb, 0x75, 0xa6, 0xc0, 0x4c, 0xdf, 0xec, 0xe0, 0x62, 0xb9, 0xe4, 0x83,
	0x3f, 0x48, 0xac, 0x44, 0x9e, 0x89, 0xe0, 0x0a, 0xdc, 0xdf, 0x2b, 0xf6, 0x63, 0x32, 0xc6, 0x06,
	0xfb, 0xaf, 0x9a, 0x10, 0x86, 0x3d, 0xd0, 0x0c, 0x3c, 0x5e, 0xb9, 0xdf, 0xc4, 0x53, 0x60, 0x06,
	0xcc, 0x0e, 0xac, 0xa0, 0xfd, 0xbd, 0xe2, 0x90, 0x7b, 0xbf, 0x89, 0x5f, 0xb6, 0xb7, 0x4d, 0x17,
	0x6f, 0x37, 0xdd, 0xfb, 0xe8, 0x8b, 0xb0, 0xff, 0x56, 0xf5, 0x7d, 0x5c, 0x73, 0xa7, 0x8e, 0xcd,
	0x80, 0xd9, 0xc1, 0xc5, 0xb1, 0x00, 0x45, 0x38, 0xfd, 0xca, 0xf8, 0xfe, 0x5e, 0x71, 0xc4, 0x26,
	0xdd, 0x42, 0xd1, 0xe5, 0xe1, 0x27, 0x1f, 0x29, 0x83, 0xf7, 0xbc, 0xc9, 0xee, 0x12, 0x68, 0xda,
	0x3e, 0x80, 0x2a, 0xc3, 0x7e, 0xa3, 0x9a, 0x24, 0xbc, 0x11, 0x23, 0x5c, 0x8a, 0x13, 0x16, 0x08,
	0xa5, 0xd1, 0xad, 0xe7, 0xa4, 0x7b, 0x39, 0x46, 0x77, 0x34, 0xc0, 0xe0, 0x4f, 0x9e, 0x95, 0xec,
	0x83, 0x63, 0x50, 0x63, 0xb8, 0xd7, 0xe8, 0x10, 0xd7, 0x7d, 0x0b, 0x8a, 0x92, 0xbe, 0x13, 0x23,
	0xbd, 0x14, 0x27, 0x7d, 0x80, 0x70, 0x1a, 0x79, 0x3b, 0x27, 0xf9, 0x2f, 0xc5, 0xc8, 0x2b, 0x01,
	0x96, 0x38, 0x88, 0xac, 0x4a, 0xf8, 0x17, 0x80, 0x0a, 0xcf, 0x23, 0xca, 0xfd, 0xad, 0x18, 0xf7,
	0x79, 0x09, 0xf7, 0x1c, 0x94, 0xb7, 0x72, 0x52, 0x5e, 0x8a, 0x51, 0x1e, 0x89, 0x53, 0xce, 0xca,
	0x34, 0xe2, 0xce, 0x1b, 0x5e, 0x30, 0xa8, 0x18, 0xd5, 0x06, 0xce, 0xe5, 0xce, 0x42, 0xb1, 0x67,
	0xe7, 0xce, 0xe1, 0xf4, 0x59, 0x29, 0xff, 0x0f, 0xc0, 0x62, 0x04, 0xbb, 0x69, 0xd5, 0xbf, 0x62,
	0x5b, 0x5b, 0x66, 0x3d, 0xca, 0xfa, 0x9d, 0x18, 0xeb, 0x8b, 0x22, 0xd6, 0x22, 0xc9, 0x34, 0xe2,
	0x8d, 0x9c, 0xc4, 0x5f, 0x8d, 0x11, 0x9f, 0xe4, 0x88, 0x07, 0x08, 0x7a, 0x30, 0xec, 0xaf, 0xd1,
	0xcc, 0x91, 0xcb, 0xb0, 0x93, 0x32, 0xcf, 0xce, 0xb0, 0xd9, 0xdc, 0x3d, 0xac, 0xf2, 0x6d, 0xb3,
	0xe5, 0xb6, 0x8d, 0x06, 0xb1, 0x94, 0x56, 0xae, 0x55, 0x96, 0x49, 0x3e, 0xbb, 0x55, 0xe6, 0x10,
	0x64, 0xe5, 0xfe, 0x37, 0x00, 0x87, 0xc2, 0x34, 0x77, 0xc3, 0x74, 0x5c, 0xb4, 0x04, 0x41, 0x85,
	0x0d, 0x7e, 0xba, 0x64, 0x34, 0xcd, 0x92, 0x87, 0xe8, 0x26, 0x76, 0x8d, 0x95, 0xb1, 0x4f, 0xf6,
	0x8a, 0x85, 0x4f, 0xf7, 0x8a, 0x60, 0x7f, 0xaf, 0x78, 0xf2, 0x65, 0xd3, 0x6a, 0x98, 0x16, 0xde,
	0xf0, 0x1f, 0xd0, 0x2d, 0x78, 0xca, 0x93, 0xf7, 0x7a, 0x4e, 0xf5, 0x45, 0xc4, 0xfd, 0xc6, 0x95,
	0x73, 0x11, 0xf1, 0x91, 0x86, 0xe9, 0xb8, 0xf3, 0x5e, 0xb1, 0xe0, 0x8f, 0x93, 0x68, 0x41, 0x97,
	0xe0, 0x89, 0xeb, 0x2e, 0xde, 0x76, 0xa6, 0x8e, 0x13, 0x95, 0x0b, 0xf3, 0xf2, 0xc0, 0xfe, 0x5e,
	0xf1, 0x84, 0xc7, 0xce, 0xd9, 0xa0, 0xff, 0x96, 0x87, 0x9e, 0x7c, 0xa4, 0x40, 0x6f, 0x2c, 0xc6,
	0xf0, 0xaf, 0x00, 0xbe, 0xe0, 0x67, 0xb6, 0xa3, 0xc5, 0x6f, 0x91, 0xe7, 0x27, 0x48, 0xc4, 0xe9,
	0xec, 0xfe, 0x03, 0xe0, 0x78, 0x3c, 0x75, 0x1d, 0x2d, 0x96, 0xcb, 0x3c, 0xcb, 0x03, 0x32, 0x6e,
	0x3a, 0xdb, 0xbf, 0x00, 0x38, 0xc8, 0xc4, 0x8e, 0x16, 0xc9, 0x05, 0x9e, 0x64, 0x32, 0xc7, 0xa6,
	0x73, 0xf3, 0x3c, 0x31, 0xcc, 0x50, 0xcf, 0x89, 0x27, 0x46, 0x52, 0x6a, 0x3a, 0xc3, 0x7f, 0x02,
	0x38, 0xca, 0xa5, 0xa2, 0xa3, 0x45, 0xf2, 0x32, 0x4f, 0x52, 0x96, 0x3e, 0xb3, 0x59, 0x29, 0x4b,
	0x41, 0xcf, 0x89, 0x95, 0xfa, 0x09, 0x33, 0xdb, 0x1a, 0x72, 0x89, 0xe6, 0x39, 0x59, 0x43, 0x3e,
	0x39, 0xa6, 0xf2, 0x5c, 0xfc, 0xf8, 0x15, 0x38, 0xc0, 0x7c, 0xf7, 0xf6, 0x02, 0xfa, 0x09, 0x80,
	0xa3, 0x5e, 0x9e, 0xbf, 0xb2, 0xb9, 0x19, 0xe6, 0x1e, 0x24, 0x4a, 0x48, 0xaa, 0xa8, 0x51, 0xbb,
	0xfd, 0x78, 0x47, 0xe9, 0xaf, 0xb5, 0xb0, 0xe1, 0xe2, 0x3f, 0xec, 0x28, 0xe0, 0x4f, 0x3b, 0x0a,
	0x78, 0xf0, 0xe7, 0x7f, 0xfc, 0xf8, 0xd8, 0x6b, 0xb0, 0xb0, 0x0c, 0xe6, 0xee, 0x4c, 0x90, 0x7f,
	0xda, 0x90, 0xee, 0x6d, 0xb8, 0xe7, 0x9b, 0x9e, 0x8c, 0x89, 0x1d, 0x6d, 0x46, 0xa7, 0x3b, 0x7b,
	0xfd, 0x83, 0x5b, 0xa5, 0x0a, 0x79, 0xfa, 0x90, 0xef, 0x81, 0xde, 0x84, 0xc3, 0x0c, 0x96, 0x9f,
	0x32, 0x50, 0x32, 0x8b, 0xa8, 0xc9, 0x26, 0x0d, 0x25, 0x00, 0x15, 0xd0, 0x03, 0x00, 0x87, 0xd8,
	0x68, 0x8c, 0x39, 0x4a, 0xc4, 0x31, 0x35, 0xd1, 0xa2, 0xdd, 0x90, 0x70, 0xbb, 0x44, 0xb9, 0x8d,
	0x50, 0x6e, 0x03, 0x3a, 0x93, 0x73, 0xb4, 0xb3, 0x02, 0x5a, 0xfe, 0x47, 0x0f, 0xc4, 0x19, 0x1e,
	0x44, 0x90, 0x1f, 0x90, 0x3c, 0x75, 0xa8, 0xf2, 0x4f, 0xda, 0x42, 0x92, 0x2a, 0xc1, 0xa7, 0x50,
	0x60, 0x48, 0x8f, 0x9f, 0x7e, 0x38, 0xe8, 0xad, 0x60, 0xb5, 0xc3, 0xf8, 0x86, 0x44, 0x41, 0x4f,
	0x15, 0x35, 0x0a, 0x95, 0xdb, 0x81, 0xe3, 0x91, 0x21, 0x83, 0x68, 0x82, 0x24, 0x51, 0x46, 0x95,
	0xb4, 0x6b, 0x25, 0x09, 0x9b, 0x49, 0xca, 0x66, 0x58, 0x6f, 0xd1, 0xee, 0xf3, 0x35, 0x3a, 0xfe,
	0x6a, 0xb0, 0xa6, 0xcc, 0xc7, 0x51, 0xc2, 0xeb, 0xd5, 0x44, 0x8b, 0x90, 0xc1, 0x43, 0x10, 0x50,
	0xe0, 0x9c, 0x09, 0x49, 0x9c, 0x4c, 0x95, 0xb4, 0x6b, 0xef, 0x4a, 0x0c, 0xe6, 0xcb, 0xd4, 0x60,
	0x02, 0x26, 0x1d, 0x2a, 0x45, 0x0e, 0x9e, 0x5a, 0x8e, 0x76, 0x5e, 0x60, 0x36, 0x7c, 0x17, 0xf4,
	0x4b, 0x06, 0xf1, 0x75, 0xdc, 0xc0, 0x2e, 0xee, 0xc9, 0x53, 0xb7, 0x3c, 0x70, 0x9b, 0x44, 0x9e,
	0x03, 0xb7, 0x06, 0x0b, 0xcb, 0x85, 0x3b, 0x2f, 0x7a, 0x7f, 0xe7, 0xce, 0xf0, 0x5e, 0xe8, 0x01,
	0x5a, 0x33, 0xb6, 0xf1, 0x87, 0x73, 0x5f, 0x48, 0x73, 0xd8, 0xa0, 0x2b, 0x5a, 0x83, 0x28, 0x44,
	0xda, 0x8b, 0xf3, 0x72, 0x18, 0x0b, 0x41, 0x84, 0xa2, 0x03, 0xe6, 0xf1, 0xdf, 0x6f, 0x48, 0x18,
	0xbf, 0x4e, 0x18, 0x4f, 0x11, 0xc6, 0x81, 0x93, 0x44, 0xc8, 0x7e, 0xf6, 0x00, 0x37, 0x0e, 0x79,
	0x6e, 0xd1, 0xf3, 0x30, 0x0e, 0xd6, 0x61, 0x3d, 0x5a, 0xc4, 0xbf, 0x12, 0x5d, 0xf9, 0xde, 0xbd,
	0x36, 0x36, 0xea, 0x77, 0x59, 0x34, 0x0a, 0x87, 0xed, 0xdd, 0x73, 0x97, 0x92, 0xe3, 0x13, 0x3d,
	0x4f, 0x13, 0x0d, 0x4f, 0xc5, 0x1c, 0x37, 0xd4, 0xe0, 0x9b, 0xd1, 0x85, 0xcd, 0xed, 0xc4, 0x31,
	0x42, 0xbf, 0xe1, 0x08, 0x1d, 0xce, 0x8f, 0xef, 0x4a, 0x0c, 0x67, 0x9d, 0x18, 0x8e, 0x4f, 0x8b,
	0x77, 0xd1, 0xd0, 0x7c, 0xe6, 0x52, 0xdd, 0x39, 0x54, 0xc1, 0x2e, 0x33, 0xee, 0x6b, 0xd8, 0xed,
	0xc9, 0xa9, 0x6b, 0x8f, 0x77, 0x94, 0xbe, 0x3a, 0x76, 0x65, 0x1e, 0x8d, 0x64, 0x1e, 0x8d, 0x72,
	0x78, 0xf4, 0x2a, 0xcd, 0xc5, 0xd7, 0xb0, 0x9b, 0xd3, 0x9d, 0x87, 0x79, 0x74, 0x05, 0xf4, 0x43,
	0x96, 0x88, 0xaf, 0x61, 0x37, 0x8f, 0x23, 0x7f, 0x5d, 0xc4, 0x32, 0xe2, 0xc5, 0x48, 0xe0, 0xc5,
	0x28, 0x9b, 0x17, 0x7f, 0x8f, 0x99, 0x4d, 0x88, 0xe8, 0xb0, 0x3e, 0xbc, 0x14, 0x23, 0x4d, 0xc0,
	0x9e, 0x27, 0x30, 0xcf, 0x26, 0x33, 0x72, 0x88, 0xe4, 0x61, 0x68, 0x0a, 0x3d, 0x79, 0xb9, 0x21,
	0x52, 0xd2, 0x0d, 0xa2, 0xa4, 0x73, 0x64, 0xf6, 0x49, 0xe2, 0x88, 0x78, 0xde, 0xf5, 0xba, 0x47,
	0x26, 0x9e, 0x15, 0x28, 0x4a, 0xdc, 0xf3, 0x03, 0x1a, 0x8a, 0x18, 0xc2, 0xde, 0x03, 0xc6, 0x45,
	0x91, 0x8a, 0x88, 0x5b, 0x21, 0x79, 0xb4, 0xb8, 0x1a, 0x98, 0x4e, 0x9e, 0x50, 0x91, 0x30, 0xc1,
	0x5f, 0x81, 0x80, 0xc4, 0xe1, 0x82, 0x04, 0x16, 0xe9, 0x3b, 0x12, 0x21, 0x90, 0x34, 0x42, 0xa0,
	0x3c, 0x11, 0xe2, 0x67, 0x80, 0xe6, 0x53, 0x6f, 0xe3, 0x10, 0x09, 0x11, 0x13, 0xc1, 0x6e, 0x82,
	0x9c, 0xb1, 0xdd, 0x6a, 0x92, 0x5f, 0xe8, 0xd4, 0x33, 0x82, 0x20, 0xe1, 0x75, 0xd2, 0x36, 0x1e,
	0xef, 0x28, 0xc7, 0xbd, 0x5d, 0x00, 0x07, 0xf7, 0x55, 0x02, 0x77, 0x9c, 0xc0, 0x8d, 0xd5, 0xe8,
	0x28, 0xbd, 0x46, 0xdf, 0x80, 0x23, 0x3e, 0xb2, 0x20, 0x30, 0x48, 0x70, 0x4d, 0x24, 0x82, 0x03,
	0x41, 0x35, 0x12, 0x43, 0x55, 0x40, 0xdf, 0x07, 0x34, 0xd8, 0x78, 0x9f, 0xfd, 0x10, 0x21, 0x19,
	0x73, 0x3c, 0xee, 0x83, 0x64, 0xc8, 0x55, 0x21, 0xd1, 0x45, 0x42, 0x74, 0x98, 0x10, 0x0d, 0x0b,
	0x76, 0x74, 0x60, 0xc1, 0xfe, 0x1d, 0x00, 0xa7, 0x62, 0x50, 0xc2, 0xd8, 0x20, 0xc1, 0xf4, 0xa2,
	0x34, 0x2e, 0x10, 0x70, 0xa5, 0x38, 0x5f, 0x02, 0x2e, 0x16, 0xc3, 0x22, 0xe5, 0xfa, 0x4f, 0x23,
	0x8b, 0x1f, 0x09, 0x0a, 0xa9, 0x8b, 0xcf, 0x9f, 0xb6, 0x68, 0xeb, 0x42, 0x9d, 0x2c, 0x13, 0x9d,
	0x8c, 0x91, 0xc9, 0x4f, 0x73, 0x1e, 0x8f, 0x8a, 0x29, 0x21, 0x01, 0xdd, 0x83, 0x13, 0x51, 0x5c,
	0x61, 0x28, 0x90, 0x40, 0x53, 0xc5, 0x91, 0x80, 0xa0, 0x7b, 0x49, 0xa8, 0x94, 0x09, 0x82, 0x2b,
	0x51, 0xf5, 0xaf, 0x87, 0xe6, 0xe1, 0x87, 0x81, 0x54, 0xf3, 0x88, 0x9c, 0x58, 0x08, 0x2c, 0xee,
	0x21, 0x08, 0xb9, 0xf0, 0x11, 0x21, 0x95, 0x4b, 0xe2, 0xb8, 0x40, 0xab, 0x08, 0x35, 0xfd, 0x1a,
	0xd1, 0xb4, 0xcf, 0x28, 0x56, 0xda, 0x67, 0xa8, 0xfe, 0x1f, 0xb1, 0x98, 0xf5, 0x76, 0x73, 0xd3,
	0xe8, 0xb1, 0xfa, 0x27, 0x25, 0x4d, 0x9b, 0xc8, 0x27, 0x02, 0x16, 0x98, 0x23, 0x11, 0x0b, 0xcc,
	0xa9, 0xb2, 0x6a, 0x41, 0xcd, 0x5f, 0xff, 0x53, 0xac, 0xbd, 0xd4, 0xff, 0x1c, 0xca, 0x02, 0xfa,
	0x98, 0xe5, 0x45, 0x3a, 0x60, 0x9e, 0xb2, 0xe1, 0x5b, 0x12, 0xce, 0x6f, 0x50, 0xce, 0x74, 0x9b,
	0xac, 0x0a, 0x6a, 0x07, 0x35, 0x5b, 0xed, 0xf0, 0x03, 0xf6, 0x93, 0x38, 0x87, 0xec, 0xb0, 0xe5,
	0xc3, 0x72, 0x52, 0x05, 0x04, 0xb4, 0x46, 0xd1, 0x1e, 0x58, 0x42, 0x54, 0xa2, 0x66, 0xd2, 0xfb,
	0x56, 0x21, 0xb6, 0x00, 0xfe, 0xc1, 0x45, 0x38, 0x6c, 0xef, 0x99, 0xff, 0xb2, 0x84, 0x5d, 0x91,
	0xb2, 0x4b, 0xdd, 0x2b, 0x50, 0x0c, 0xb9, 0xf7, 0x0a, 0x31, 0x46, 0xbf, 0xe3, 0x18, 0x1d, 0xae,
	0x0c, 0x78, 0x5f, 0x62, 0x64, 0x1b, 0xd4, 0xc8, 0x02, 0x62, 0x92, 0xfc, 0xae, 0xe6, 0xa9, 0x05,
	0x7e, 0x0f, 0xe0, 0x98, 0x87, 0x9b, 0x84, 0xa3, 0xf4, 0x62, 0xe0, 0x42, 0xa6, 0x4b, 0x27, 0xda,
	0x7b, 0x8f, 0x77, 0x94, 0x13, 0xe4, 0x97, 0x33, 0x8e, 0xc0, 0x2a, 0x09, 0x5a, 0x2a, 0x09, 0x5a,
	0xe3, 0x3a, 0xf9, 0x1e, 0xcb, 0xff, 0x9f, 0x63, 0xad, 0x29, 0xa1, 0xa1, 0x0c, 0xd0, 0x26, 0x5d,
	0x3d, 0x32, 0x6b, 0x5a, 0xa9, 0xf0, 0x99, 0x0c, 0x37, 0x47, 0xb4, 0xd1, 0x38, 0xe6, 0x42, 0x19,
	0xa0, 0x5f, 0x00, 0x5a, 0x90, 0x90, 0x8e, 0x29, 0xc5, 0x83, 0x96, 0x7e, 0x5d, 0x41, 0x7b, 0x5b,
	0xac, 0x18, 0x3e, 0x9a, 0x53, 0x15, 0x04, 0x45, 0xc3, 0x79, 0xa9, 0x4e, 0xfc, 0x2e, 0x65, 0xe0,
	0xd5, 0x74, 0x4a, 0x1c, 0x68, 0x6a, 0x69, 0xf1, 0x52, 0x8e, 0xcb, 0x25, 0xda, 0x2b, 0x09, 0xfd,
	0x70, 0x35, 0x36, 0x07, 0x3a, 0x8c, 0x24, 0x65, 0x80, 0x7e, 0x1b, 0x35, 0xb1, 0xf4, 0x92, 0xe3,
	0x42, 0xa6, 0x8b, 0x10, 0xda, 0x37, 0xc5, 0x9a, 0x7c, 0x83, 0x68, 0x52, 0x21, 0xa0, 0xc6, 0x18,
	0x28, 0xae, 0xcc, 0xb8, 0x20, 0xd5, 0x66, 0xb4, 0x5b, 0x19, 0x78, 0x1b, 0xcb, 0x49, 0x0e, 0x76,
	0x6a, 0x45, 0x32, 0x9b, 0xf5, 0x32, 0x83, 0xb6, 0x28, 0xd6, 0xe5, 0x59, 0x02, 0x7b, 0x22, 0x02,
	0x3b, 0x8c, 0x5b, 0x65, 0x80, 0xaa, 0x11, 0x5b, 0x4c, 0xa9, 0x54, 0xb4, 0xf4, 0x1b, 0x06, 0x62,
	0x83, 0x7f, 0x97, 0x56, 0x2e, 0x74, 0x8e, 0x4e, 0x2d, 0x3c, 0xd5, 0x97, 0x4c, 0x34, 0x46, 0x9a,
	0xc3, 0x1f, 0xe5, 0x49, 0xc9, 0x22, 0x1c, 0xf9, 0x8f, 0x51, 0x7d, 0x66, 0xaa, 0x8a, 0x66, 0xb3,
	0x5e, 0x1b, 0x20, 0x1b, 0x55, 0x81, 0x31, 0x7c, 0x95, 0x18, 0x03, 0xaf, 0xd5, 0x58, 0x1d, 0xf4,
	0x79, 0xa9, 0x39, 0xf0, 0x1d, 0xcb, 0x40, 0xfd, 0x75, 0xdf, 0x8f, 0xba, 0xca, 0xb1, 0xce, 0xc2,
	0xcf, 0xbb, 0x8a, 0x7f, 0x29, 0x72, 0xb7, 0xab, 0x9c, 0x5c, 0x0b, 0x1f, 0x99, 0x92, 0x77, 0xbb,
	0xca, 0x29, 0x3f, 0xc2, 0xec, 0x76, 0x95, 0xd3, 0x1c, 0xec, 0xdd, 0xae, 0x32, 0x12, 0x77, 0xb3,
	0xdd, 0xae, 0x02, 0xc3, 0x40, 0xea, 0x89, 0x70, 0x96, 0xe3, 0x7d, 0x0e, 0x9d, 0xe0, 0x51, 0x57,
	0x29, 0x41, 0x7f, 0x56, 0x74, 0xbc, 0x69, 0x3b, 0x2e, 0xea, 0x6b, 0xb6, 0x5d, 0xc4, 0x8e, 0x97,
	0x90, 0xb7, 0x83, 0x44, 0xa4, 0x62, 0x44, 0x54, 0x27, 0x8f, 0xba, 0x8a, 0x0e, 0x13, 0x93, 0x46,
	0x45, 0x45, 0x22, 0x0b, 0x30, 0x82, 0x29, 0xeb, 0x3c, 0x97, 0x20, 0xcf, 0x36, 0x87, 0x1c, 0xef,
	0x62, 0x19, 0xe5, 0xa6, 0x61, 0x44, 0x33, 0xc9, 0x1e, 0x2b, 0x23, 0x9f, 0x3c, 0x9d, 0x06, 0x9f,
	0x3e, 0x9d, 0x06, 0x7f, 0x7f, 0x3a, 0x0d, 0xfe, 0xfd, 0x74, 0xba, 0xb0, 0x0e, 0xaa, 0xfd, 0xe4,
	0xc2, 0xe5, 0xc5, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x1f, 0xcd, 0xc7, 0xed, 0x2a, 0x00,
	0x00,
}
