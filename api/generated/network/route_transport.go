// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: route.proto
*/
package network

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPBGPAuthStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBGPAuthStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req BGPAuthStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBGPAuthStatus encodes GRPC request
func EncodeGrpcReqBGPAuthStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPAuthStatus)
	return req, nil
}

// DecodeGrpcReqBGPAuthStatus decodes GRPC request
func DecodeGrpcReqBGPAuthStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPAuthStatus)
	return req, nil
}

// EncodeGrpcRespBGPAuthStatus encodes GRC response
func EncodeGrpcRespBGPAuthStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBGPAuthStatus decodes GRPC response
func DecodeGrpcRespBGPAuthStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBGPConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBGPConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req BGPConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBGPConfig encodes GRPC request
func EncodeGrpcReqBGPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPConfig)
	return req, nil
}

// DecodeGrpcReqBGPConfig decodes GRPC request
func DecodeGrpcReqBGPConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPConfig)
	return req, nil
}

// EncodeGrpcRespBGPConfig encodes GRC response
func EncodeGrpcRespBGPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBGPConfig decodes GRPC response
func DecodeGrpcRespBGPConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBGPNeighbor(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBGPNeighbor(_ context.Context, r *http.Request) (interface{}, error) {
	var req BGPNeighbor
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBGPNeighbor encodes GRPC request
func EncodeGrpcReqBGPNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPNeighbor)
	return req, nil
}

// DecodeGrpcReqBGPNeighbor decodes GRPC request
func DecodeGrpcReqBGPNeighbor(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BGPNeighbor)
	return req, nil
}

// EncodeGrpcRespBGPNeighbor encodes GRC response
func EncodeGrpcRespBGPNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBGPNeighbor decodes GRPC response
func DecodeGrpcRespBGPNeighbor(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEVPNConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEVPNConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req EVPNConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEVPNConfig encodes GRPC request
func EncodeGrpcReqEVPNConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EVPNConfig)
	return req, nil
}

// DecodeGrpcReqEVPNConfig decodes GRPC request
func DecodeGrpcReqEVPNConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EVPNConfig)
	return req, nil
}

// EncodeGrpcRespEVPNConfig encodes GRC response
func EncodeGrpcRespEVPNConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEVPNConfig decodes GRPC response
func DecodeGrpcRespEVPNConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRDSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRDSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RDSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRDSpec encodes GRPC request
func EncodeGrpcReqRDSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RDSpec)
	return req, nil
}

// DecodeGrpcReqRDSpec decodes GRPC request
func DecodeGrpcReqRDSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RDSpec)
	return req, nil
}

// EncodeGrpcRespRDSpec encodes GRC response
func EncodeGrpcRespRDSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRDSpec decodes GRPC response
func DecodeGrpcRespRDSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoute(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoute(_ context.Context, r *http.Request) (interface{}, error) {
	var req Route
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoute encodes GRPC request
func EncodeGrpcReqRoute(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Route)
	return req, nil
}

// DecodeGrpcReqRoute decodes GRPC request
func DecodeGrpcReqRoute(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Route)
	return req, nil
}

// EncodeGrpcRespRoute encodes GRC response
func EncodeGrpcRespRoute(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoute decodes GRPC response
func DecodeGrpcRespRoute(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteDistinguisher(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteDistinguisher(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteDistinguisher
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteDistinguisher encodes GRPC request
func EncodeGrpcReqRouteDistinguisher(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteDistinguisher)
	return req, nil
}

// DecodeGrpcReqRouteDistinguisher decodes GRPC request
func DecodeGrpcReqRouteDistinguisher(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteDistinguisher)
	return req, nil
}

// EncodeGrpcRespRouteDistinguisher encodes GRC response
func EncodeGrpcRespRouteDistinguisher(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteDistinguisher decodes GRPC response
func DecodeGrpcRespRouteDistinguisher(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteTable(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteTable(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteTable
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteTable encodes GRPC request
func EncodeGrpcReqRouteTable(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTable)
	return req, nil
}

// DecodeGrpcReqRouteTable decodes GRPC request
func DecodeGrpcReqRouteTable(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTable)
	return req, nil
}

// EncodeGrpcRespRouteTable encodes GRC response
func EncodeGrpcRespRouteTable(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteTable decodes GRPC response
func DecodeGrpcRespRouteTable(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteTableSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteTableSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteTableSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteTableSpec encodes GRPC request
func EncodeGrpcReqRouteTableSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableSpec)
	return req, nil
}

// DecodeGrpcReqRouteTableSpec decodes GRPC request
func DecodeGrpcReqRouteTableSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableSpec)
	return req, nil
}

// EncodeGrpcRespRouteTableSpec encodes GRC response
func EncodeGrpcRespRouteTableSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteTableSpec decodes GRPC response
func DecodeGrpcRespRouteTableSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRouteTableStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRouteTableStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RouteTableStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRouteTableStatus encodes GRPC request
func EncodeGrpcReqRouteTableStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableStatus)
	return req, nil
}

// DecodeGrpcReqRouteTableStatus decodes GRPC request
func DecodeGrpcReqRouteTableStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RouteTableStatus)
	return req, nil
}

// EncodeGrpcRespRouteTableStatus encodes GRC response
func EncodeGrpcRespRouteTableStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRouteTableStatus decodes GRPC response
func DecodeGrpcRespRouteTableStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoutingConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoutingConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoutingConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoutingConfig encodes GRPC request
func EncodeGrpcReqRoutingConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfig)
	return req, nil
}

// DecodeGrpcReqRoutingConfig decodes GRPC request
func DecodeGrpcReqRoutingConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfig)
	return req, nil
}

// EncodeGrpcRespRoutingConfig encodes GRC response
func EncodeGrpcRespRoutingConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoutingConfig decodes GRPC response
func DecodeGrpcRespRoutingConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoutingConfigSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoutingConfigSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoutingConfigSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoutingConfigSpec encodes GRPC request
func EncodeGrpcReqRoutingConfigSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigSpec)
	return req, nil
}

// DecodeGrpcReqRoutingConfigSpec decodes GRPC request
func DecodeGrpcReqRoutingConfigSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigSpec)
	return req, nil
}

// EncodeGrpcRespRoutingConfigSpec encodes GRC response
func EncodeGrpcRespRoutingConfigSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoutingConfigSpec decodes GRPC response
func DecodeGrpcRespRoutingConfigSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRoutingConfigStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRoutingConfigStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RoutingConfigStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRoutingConfigStatus encodes GRPC request
func EncodeGrpcReqRoutingConfigStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigStatus)
	return req, nil
}

// DecodeGrpcReqRoutingConfigStatus decodes GRPC request
func DecodeGrpcReqRoutingConfigStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RoutingConfigStatus)
	return req, nil
}

// EncodeGrpcRespRoutingConfigStatus encodes GRC response
func EncodeGrpcRespRoutingConfigStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRoutingConfigStatus decodes GRPC response
func DecodeGrpcRespRoutingConfigStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
