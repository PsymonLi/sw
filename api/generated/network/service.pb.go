// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type TLSServerPolicySpec_ClientAuthTypes int32

const (
	//
	TLSServerPolicySpec_Mandatory TLSServerPolicySpec_ClientAuthTypes = 0
	//
	TLSServerPolicySpec_Optional TLSServerPolicySpec_ClientAuthTypes = 1
	//
	TLSServerPolicySpec_None TLSServerPolicySpec_ClientAuthTypes = 2
)

var TLSServerPolicySpec_ClientAuthTypes_name = map[int32]string{
	0: "Mandatory",
	1: "Optional",
	2: "None",
}
var TLSServerPolicySpec_ClientAuthTypes_value = map[string]int32{
	"Mandatory": 0,
	"Optional":  1,
	"None":      2,
}

func (TLSServerPolicySpec_ClientAuthTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorService, []int{4, 0}
}

// Service represents a group of identical endpoints, such as servers in an app tier
type Service struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the Service.
	Spec ServiceSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the Service.
	Status ServiceStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *Service) GetSpec() ServiceSpec {
	if m != nil {
		return m.Spec
	}
	return ServiceSpec{}
}

func (m *Service) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus{}
}

// spec part of service object
type ServiceSpec struct {
	// FIXME: maps are not working. change this after its fixed
	// map<string, string> WorkloadSelector  = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "workload-labels,omitempty"];
	// workload selector for the service (list of labels to match)
	WorkloadSelector []string `protobuf:"bytes,1,rep,name=WorkloadSelector,json=workload-labels,omitempty" json:"workload-labels,omitempty"`
	// Virtual IP of the load balancer
	VirtualIp string `protobuf:"bytes,2,opt,name=VirtualIp,json=virtual-ip,omitempty,proto3" json:"virtual-ip,omitempty"`
	// load balancer port
	Ports string `protobuf:"bytes,3,opt,name=Ports,json=ports,omitempty,proto3" json:"ports,omitempty"`
	// load balancing policy (reference to LbPolicy object)
	LBPolicy string `protobuf:"bytes,4,opt,name=LBPolicy,json=lb-policy,omitempty,proto3" json:"lb-policy,omitempty"`
	// TLS configuration for inbound connections
	TLSServerPolicy *TLSServerPolicySpec `protobuf:"bytes,5,opt,name=TLSServerPolicy,json=tls-server-policy,omitempty" json:"tls-server-policy,omitempty"`
	// TLS configuration for outbound connections
	TLSClientPolicy *TLSClientPolicySpec `protobuf:"bytes,6,opt,name=TLSClientPolicy,json=tls-client-policy,omitempty" json:"tls-client-policy,omitempty"`
}

func (m *ServiceSpec) Reset()                    { *m = ServiceSpec{} }
func (m *ServiceSpec) String() string            { return proto.CompactTextString(m) }
func (*ServiceSpec) ProtoMessage()               {}
func (*ServiceSpec) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *ServiceSpec) GetWorkloadSelector() []string {
	if m != nil {
		return m.WorkloadSelector
	}
	return nil
}

func (m *ServiceSpec) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ServiceSpec) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *ServiceSpec) GetLBPolicy() string {
	if m != nil {
		return m.LBPolicy
	}
	return ""
}

func (m *ServiceSpec) GetTLSServerPolicy() *TLSServerPolicySpec {
	if m != nil {
		return m.TLSServerPolicy
	}
	return nil
}

func (m *ServiceSpec) GetTLSClientPolicy() *TLSClientPolicySpec {
	if m != nil {
		return m.TLSClientPolicy
	}
	return nil
}

// status part of service object
type ServiceStatus struct {
	// list of workloads that are backends of this service
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads,json=workloads,omitempty" json:"workloads,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *ServiceStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

// Service TLS configuration for connections initiated by the workload towards
// destinations inside or outside the cluster.
type TLSClientPolicySpec struct {
	// A map containing the certificate to use for a set of destinations.
	// The key is a selector for workloads that exist either inside or
	// outside the cluster. It can be based on labels, hostnames or "IP:port" pairs.
	// The value is the name of the certificate to use for the selected destinations.
	// The certificates "usage" field must contain "client".
	// TODO: replace the first "string" type with proper selector type when available.
	// A single "default" certificate which matches all destinations is allowed.
	// If a destination matches multiple non-default map keys, an error is returned.
	// If a destination does not match any map key (and there is no default),
	// the outbound connection is initiated without TLS.
	CertificatesSelector map[string]string `protobuf:"bytes,1,rep,name=CertificatesSelector,json=tls-client-certificates-selector,omitempty" json:"tls-client-certificates-selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The list of root certificates used to validate a trust chain presented by a server.
	// If the list is empty, all roots certificates in the tenant scope are considered.
	TrustRoots []string `protobuf:"bytes,2,rep,name=TrustRoots,json=tls-client-trust-roots,omitempty" json:"tls-client-trust-roots,omitempty"`
	// Valid DNS names or IP addresses that must appear in the server certificate
	// SubjAltName or Common Name (if SAN is not specified). If not specified,
	// client validates the IP address of the server.
	AllowedPeerId []string `protobuf:"bytes,3,rep,name=AllowedPeerId,json=tls-client-allowed-peer-id,omitempty" json:"tls-client-allowed-peer-id,omitempty"`
}

func (m *TLSClientPolicySpec) Reset()                    { *m = TLSClientPolicySpec{} }
func (m *TLSClientPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*TLSClientPolicySpec) ProtoMessage()               {}
func (*TLSClientPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *TLSClientPolicySpec) GetCertificatesSelector() map[string]string {
	if m != nil {
		return m.CertificatesSelector
	}
	return nil
}

func (m *TLSClientPolicySpec) GetTrustRoots() []string {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

func (m *TLSClientPolicySpec) GetAllowedPeerId() []string {
	if m != nil {
		return m.AllowedPeerId
	}
	return nil
}

// The Service TLS configuration for inbound connections.
// It is used on all ports specified in the Service spec.
// Multiple Service objects can select the same workload and provide different
// server TLS configurations for disjoint sets of ports.
type TLSServerPolicySpec struct {
	// List of names of certificates to present to clients.
	// The certificates "usage" field must contain "server".
	// If multiple certificates names are provided, system tries to choose the
	// correct one using SNI, otherwise it picks the first one in the list.
	Certificates []string `protobuf:"bytes,1,rep,name=Certificates,json=tls-server-certificates,omitempty" json:"tls-server-certificates,omitempty"`
	// Client authentication
	// "None" means that server does not request and will not validate a client certificate.
	// "Mandatory" means that server requests and validates client certificate.
	// "Optional" means that server requests client certificate but proceeds even
	// if client does not present it.
	// Default is "Mandatory".
	ClientAuthentication string `protobuf:"bytes,2,opt,name=ClientAuthentication,json=client-authentication,omitempty,proto3" json:"client-authentication,omitempty"`
	// The list of root certificates used to validate a trust chain presented by client.
	// If the list is empty, all roots certificates in the tenant scope are considered.
	TrustRoots []string `protobuf:"bytes,3,rep,name=TrustRoots,json=tls-server-trust-roots,omitempty" json:"tls-server-trust-roots,omitempty"`
	// Valid DNS names or IP addresses that must appear in the client certificate
	// SubjAltName or Common Name (if SAN is not specified).
	// If client auth is enabled and AllowedPeerId is not specified, server accepts any
	// client certificate as long as it is valid  (not expired and with a valid trust chain).
	AllowedPeerId []string `protobuf:"bytes,4,rep,name=AllowedPeerId,json=tls-server-allowed-peer-id,omitempty" json:"tls-server-allowed-peer-id,omitempty"`
}

func (m *TLSServerPolicySpec) Reset()                    { *m = TLSServerPolicySpec{} }
func (m *TLSServerPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*TLSServerPolicySpec) ProtoMessage()               {}
func (*TLSServerPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *TLSServerPolicySpec) GetCertificates() []string {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *TLSServerPolicySpec) GetClientAuthentication() string {
	if m != nil {
		return m.ClientAuthentication
	}
	return ""
}

func (m *TLSServerPolicySpec) GetTrustRoots() []string {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

func (m *TLSServerPolicySpec) GetAllowedPeerId() []string {
	if m != nil {
		return m.AllowedPeerId
	}
	return nil
}

func init() {
	proto.RegisterType((*Service)(nil), "network.Service")
	proto.RegisterType((*ServiceSpec)(nil), "network.ServiceSpec")
	proto.RegisterType((*ServiceStatus)(nil), "network.ServiceStatus")
	proto.RegisterType((*TLSClientPolicySpec)(nil), "network.TLSClientPolicySpec")
	proto.RegisterType((*TLSServerPolicySpec)(nil), "network.TLSServerPolicySpec")
	proto.RegisterEnum("network.TLSServerPolicySpec_ClientAuthTypes", TLSServerPolicySpec_ClientAuthTypes_name, TLSServerPolicySpec_ClientAuthTypes_value)
}
func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintService(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintService(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *ServiceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WorkloadSelector) > 0 {
		for _, s := range m.WorkloadSelector {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.Ports) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Ports)))
		i += copy(dAtA[i:], m.Ports)
	}
	if len(m.LBPolicy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.LBPolicy)))
		i += copy(dAtA[i:], m.LBPolicy)
	}
	if m.TLSServerPolicy != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TLSServerPolicy.Size()))
		n5, err := m.TLSServerPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TLSClientPolicy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TLSClientPolicy.Size()))
		n6, err := m.TLSClientPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TLSClientPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSClientPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CertificatesSelector) > 0 {
		for k, _ := range m.CertificatesSelector {
			dAtA[i] = 0xa
			i++
			v := m.CertificatesSelector[k]
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TLSServerPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSServerPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientAuthentication) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ClientAuthentication)))
		i += copy(dAtA[i:], m.ClientAuthentication)
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Service) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovService(uint64(l))
	return n
}

func (m *ServiceSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.WorkloadSelector) > 0 {
		for _, s := range m.WorkloadSelector {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Ports)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LBPolicy)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.TLSServerPolicy != nil {
		l = m.TLSServerPolicy.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TLSClientPolicy != nil {
		l = m.TLSClientPolicy.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *TLSClientPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.CertificatesSelector) > 0 {
		for k, v := range m.CertificatesSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *TLSServerPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Certificates) > 0 {
		for _, s := range m.Certificates {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.ClientAuthentication)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.TrustRoots) > 0 {
		for _, s := range m.TrustRoots {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.AllowedPeerId) > 0 {
		for _, s := range m.AllowedPeerId {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadSelector = append(m.WorkloadSelector, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LBPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LBPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSServerPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSServerPolicy == nil {
				m.TLSServerPolicy = &TLSServerPolicySpec{}
			}
			if err := m.TLSServerPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSClientPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSClientPolicy == nil {
				m.TLSClientPolicy = &TLSClientPolicySpec{}
			}
			if err := m.TLSClientPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSClientPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSClientPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSClientPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificatesSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertificatesSelector == nil {
				m.CertificatesSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CertificatesSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustRoots = append(m.TrustRoots, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPeerId = append(m.AllowedPeerId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSServerPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSServerPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSServerPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAuthentication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAuthentication = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustRoots = append(m.TrustRoots, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPeerId = append(m.AllowedPeerId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 885 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0xce, 0x0f, 0x4f, 0x6a, 0x62, 0x4d, 0xa2, 0xd6, 0xf9, 0xa1, 0x6c, 0x6a, 0x5a,
	0x29, 0xa0, 0xec, 0x2e, 0x2a, 0x52, 0xa9, 0x7a, 0xeb, 0x46, 0x01, 0x15, 0xb5, 0x24, 0xb2, 0xad,
	0x22, 0x71, 0x40, 0x1a, 0xaf, 0x5f, 0xdd, 0x21, 0xe3, 0x99, 0xd5, 0xce, 0x6c, 0x2c, 0x0b, 0x71,
	0x04, 0xee, 0x5c, 0xf9, 0x0f, 0x38, 0xf1, 0x57, 0xa0, 0x1c, 0x2b, 0xc4, 0xd9, 0x42, 0x39, 0x21,
	0xff, 0x15, 0x68, 0x67, 0xc7, 0x65, 0xfc, 0x9b, 0xde, 0x76, 0xde, 0xfb, 0xbe, 0xef, 0xbd, 0x79,
	0xef, 0xf3, 0x18, 0x95, 0x25, 0x24, 0xd7, 0x34, 0x02, 0x3f, 0x4e, 0x84, 0x12, 0x78, 0x83, 0x83,
	0xea, 0x89, 0xe4, 0x6a, 0xff, 0xb0, 0x23, 0x44, 0x87, 0x41, 0x40, 0x62, 0x1a, 0x10, 0xce, 0x85,
	0x22, 0x8a, 0x0a, 0x2e, 0x73, 0xd8, 0xfe, 0x79, 0x87, 0xaa, 0x37, 0x69, 0xcb, 0x8f, 0x44, 0x37,
	0x88, 0x81, 0x4b, 0xc2, 0xdb, 0x22, 0x90, 0xbd, 0xe0, 0x1a, 0x38, 0x8d, 0x20, 0x48, 0x15, 0x65,
	0x32, 0xa3, 0x76, 0x80, 0xdb, 0xec, 0x80, 0xf2, 0x88, 0xa5, 0x6d, 0x18, 0xc9, 0x78, 0x96, 0x4c,
	0x47, 0x74, 0x44, 0xa0, 0xc3, 0xad, 0xf4, 0xb5, 0x3e, 0xe9, 0x83, 0xfe, 0x32, 0xf0, 0x87, 0x73,
	0xaa, 0x66, 0x3d, 0x76, 0x41, 0x11, 0x03, 0xfb, 0x64, 0x01, 0x8c, 0x91, 0x16, 0x30, 0x19, 0x48,
	0x60, 0x10, 0x29, 0x91, 0xe4, 0x8c, 0xda, 0x1f, 0xab, 0x68, 0xa3, 0x91, 0xcf, 0x01, 0x3f, 0x46,
	0x4e, 0xb3, 0xea, 0x1c, 0x3b, 0x27, 0x5b, 0x8f, 0xca, 0x3e, 0x89, 0xa9, 0xdf, 0xec, 0xc7, 0xf0,
	0x12, 0x14, 0x09, 0x77, 0x6e, 0x06, 0xee, 0xca, 0xdb, 0x81, 0xeb, 0x0c, 0x07, 0xee, 0xc6, 0x29,
	0xe5, 0x8c, 0x72, 0xa8, 0x8f, 0x3e, 0xf0, 0xe7, 0xc8, 0xb9, 0xa8, 0xae, 0x6a, 0xde, 0xb6, 0xe6,
	0x5d, 0xb4, 0xbe, 0x83, 0x48, 0x69, 0xe6, 0xbe, 0xc5, 0xfc, 0x20, 0xeb, 0xf4, 0x54, 0x74, 0xa9,
	0x82, 0x6e, 0xac, 0xfa, 0xf5, 0x89, 0x33, 0xfe, 0x12, 0x15, 0x1b, 0x31, 0x44, 0xd5, 0x82, 0x96,
	0xda, 0xf5, 0xcd, 0x42, 0x7c, 0xd3, 0x5f, 0x96, 0x0b, 0xef, 0x66, 0x7a, 0x99, 0x96, 0x8c, 0x21,
	0xb2, 0xb5, 0xc6, 0xcf, 0xb8, 0x8e, 0xd6, 0x1b, 0x8a, 0xa8, 0x54, 0x56, 0x8b, 0x5a, 0xed, 0xee,
	0x94, 0x9a, 0xce, 0x86, 0x55, 0xa3, 0x57, 0x91, 0xfa, 0x6c, 0x29, 0x4e, 0x45, 0x9e, 0x1e, 0xfc,
	0xf9, 0xe3, 0xde, 0x3d, 0xb4, 0x15, 0x7c, 0x7f, 0xe1, 0x37, 0x81, 0x13, 0xae, 0x7e, 0xc0, 0x9b,
	0xc6, 0x43, 0xb2, 0xf6, 0x6b, 0x11, 0x6d, 0x59, 0x8d, 0xe2, 0x57, 0xa8, 0xf2, 0xb5, 0x48, 0xae,
	0x98, 0x20, 0xed, 0x86, 0x19, 0x79, 0xd5, 0x39, 0x2e, 0x9c, 0x94, 0xc2, 0xfb, 0x37, 0xf9, 0x38,
	0xf6, 0x7a, 0x26, 0xef, 0xe5, 0xab, 0xb1, 0x6a, 0xcf, 0x4f, 0xe1, 0x73, 0x54, 0x7a, 0x45, 0x13,
	0x95, 0x12, 0xf6, 0x3c, 0xd6, 0x43, 0x2f, 0x85, 0x87, 0x46, 0x70, 0xf7, 0x3a, 0x4f, 0x78, 0x34,
	0xb6, 0xb4, 0x66, 0x46, 0xf1, 0x67, 0x68, 0xed, 0x52, 0x24, 0x4a, 0xea, 0x61, 0x97, 0xc2, 0x7b,
	0x46, 0x62, 0x3b, 0xce, 0x82, 0x16, 0x7b, 0x32, 0x80, 0x43, 0xb4, 0xf9, 0x22, 0xbc, 0x14, 0x8c,
	0x46, 0x7d, 0x3d, 0xda, 0x52, 0x78, 0x60, 0xb8, 0x3b, 0xac, 0xe5, 0xc5, 0x3a, 0x61, 0xf1, 0x67,
	0x05, 0x71, 0x0f, 0x6d, 0x37, 0x5f, 0x34, 0xb2, 0x69, 0x41, 0x62, 0xa4, 0xd6, 0xf4, 0x96, 0x0e,
	0xdf, 0x6d, 0x69, 0x22, 0xaf, 0x77, 0xff, 0xa1, 0x29, 0x74, 0xa0, 0x98, 0xf4, 0xa4, 0xce, 0x4e,
	0x17, 0x5c, 0x94, 0x34, 0x85, 0xcf, 0x18, 0x05, 0xae, 0x4c, 0xe1, 0xf5, 0xe9, 0xc2, 0x76, 0x7e,
	0xba, 0x70, 0xa4, 0xb3, 0x73, 0x0a, 0xcf, 0x49, 0xd6, 0x9a, 0xa8, 0x3c, 0xe6, 0x3b, 0x7c, 0x86,
	0x4a, 0x23, 0x7b, 0x48, 0xe3, 0x8b, 0x77, 0x73, 0x1c, 0x2d, 0xdf, 0xde, 0xc3, 0xac, 0x60, 0xed,
	0xaf, 0x02, 0xda, 0x99, 0xd1, 0x2f, 0xfe, 0xdd, 0x41, 0xbb, 0x67, 0x90, 0x28, 0xfa, 0x9a, 0x46,
	0x44, 0x81, 0x1c, 0x33, 0xe0, 0xd6, 0xa3, 0xc7, 0x8b, 0x2e, 0xeb, 0xcf, 0x22, 0x9e, 0x73, 0x95,
	0xf4, 0x43, 0x7f, 0x38, 0x70, 0x3f, 0xb6, 0x6e, 0x19, 0x59, 0x48, 0x6f, 0xf4, 0xae, 0x58, 0x3d,
	0xbf, 0x07, 0x16, 0x7f, 0x83, 0x50, 0x33, 0x49, 0xa5, 0xaa, 0x0b, 0xa1, 0x64, 0x75, 0x55, 0x0f,
	0xe4, 0xc1, 0x70, 0xe0, 0x1e, 0x5b, 0x1a, 0x2a, 0x03, 0x78, 0x49, 0x86, 0xb0, 0xaa, 0x2c, 0x45,
	0x60, 0x40, 0xe5, 0x67, 0x8c, 0x89, 0x1e, 0xb4, 0x2f, 0x01, 0x92, 0xe7, 0xed, 0x6a, 0x41, 0xcb,
	0x9f, 0x0c, 0x07, 0xee, 0x03, 0x8b, 0x4c, 0x72, 0x8c, 0x17, 0x03, 0x24, 0x1e, 0x6d, 0x5b, 0x25,
	0xfe, 0x17, 0x6a, 0xff, 0x0b, 0xb4, 0x37, 0x77, 0x76, 0xb8, 0x82, 0x0a, 0x57, 0xd0, 0xd7, 0xaf,
	0x6b, 0xa9, 0x9e, 0x7d, 0xe2, 0x5d, 0xb4, 0x76, 0x4d, 0x58, 0x0a, 0xf9, 0x8f, 0xb8, 0x9e, 0x1f,
	0x9e, 0xae, 0x3e, 0x71, 0x6a, 0x3f, 0x17, 0xf5, 0x5a, 0x27, 0xfd, 0x8f, 0xbf, 0x45, 0x77, 0xec,
	0x02, 0xc6, 0x36, 0x0f, 0x87, 0x03, 0xf7, 0xbe, 0x65, 0x7a, 0x7b, 0xd2, 0xd6, 0x1d, 0x96, 0x43,
	0xf0, 0x2f, 0x99, 0x6d, 0xf4, 0x2d, 0x9f, 0xa5, 0xea, 0x0d, 0x70, 0x95, 0x21, 0xa8, 0xe0, 0xe6,
	0x99, 0x69, 0xfc, 0xf6, 0xd3, 0xde, 0x69, 0x43, 0x25, 0xe7, 0x3c, 0xed, 0x9e, 0xcc, 0xe8, 0xcf,
	0xff, 0x8f, 0x9b, 0xfd, 0x71, 0xc8, 0x8f, 0x86, 0x03, 0xd7, 0x1d, 0x4d, 0x6d, 0x4c, 0xd0, 0x6a,
	0x6b, 0x19, 0x60, 0xc2, 0x18, 0x85, 0x71, 0x63, 0x98, 0xfb, 0x2c, 0x30, 0xc6, 0x22, 0xc4, 0xb4,
	0x31, 0x8a, 0xe3, 0xc6, 0x30, 0xe4, 0x25, 0xc6, 0x58, 0x86, 0xaa, 0x3d, 0x41, 0xdb, 0x13, 0xa3,
	0xc1, 0x65, 0x54, 0x7a, 0x49, 0x78, 0x9b, 0x28, 0x91, 0xf4, 0x2b, 0x2b, 0xf8, 0x0e, 0xda, 0xbc,
	0x88, 0xb3, 0x8b, 0x13, 0x56, 0x71, 0xf0, 0x26, 0x2a, 0x7e, 0x25, 0x38, 0x54, 0x56, 0xc3, 0xca,
	0xcd, 0xed, 0x91, 0xf3, 0xf6, 0xf6, 0xc8, 0xf9, 0xfb, 0xf6, 0xc8, 0xf9, 0xe7, 0xf6, 0x68, 0xe5,
	0xd2, 0x69, 0xad, 0xeb, 0x3f, 0xee, 0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x13, 0x6e, 0xf2,
	0x0f, 0xbf, 0x08, 0x00, 0x00,
}
