// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: vr_peering_group.proto
*/
package network

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapVr_peering_group = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *VirtualRouterPeeringGroup) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "virtual-router-peering-groups/", m.Tenant, "/", m.Name)
}

func (m *VirtualRouterPeeringGroup) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/virtual-router-peering-groups/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringGroup) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringGroup
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringGroup{}
	} else {
		out, ok = into.(*VirtualRouterPeeringGroup)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringGroup))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringGroup) Defaults(ver string) bool {
	var ret bool
	m.Kind = "VirtualRouterPeeringGroup"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringGroupSpec) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringGroupSpec
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringGroupSpec{}
	} else {
		out, ok = into.(*VirtualRouterPeeringGroupSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringGroupSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringGroupSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		i := m.Items[k]
		ret = i.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringGroupStatus) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringGroupStatus
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringGroupStatus{}
	} else {
		out, ok = into.(*VirtualRouterPeeringGroupStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringGroupStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringGroupStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.RouteTables {
		if m.RouteTables[k] != nil {
			i := m.RouteTables[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringRoute) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringRoute
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringRoute{}
	} else {
		out, ok = into.(*VirtualRouterPeeringRoute)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringRoute))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringRoute) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringRouteTable) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringRouteTable
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringRouteTable{}
	} else {
		out, ok = into.(*VirtualRouterPeeringRouteTable)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringRouteTable))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringRouteTable) Defaults(ver string) bool {
	var ret bool
	for k := range m.Routes {
		i := m.Routes[k]
		ret = i.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterPeeringSpec) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterPeeringSpec
	var ok bool
	if into == nil {
		out = &VirtualRouterPeeringSpec{}
	} else {
		out, ok = into.(*VirtualRouterPeeringSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterPeeringSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterPeeringSpec) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Validators and Requirements

func (m *VirtualRouterPeeringGroup) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "status"

		m.Status.References(tenant, tag, resp)

	}
	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouterPeeringGroup) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for VirtualRouterPeeringGroup"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *VirtualRouterPeeringGroup) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *VirtualRouterPeeringGroupSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "items"

		for _, v := range m.Items {

			v.References(tenant, tag, resp)

		}
	}
}

func (m *VirtualRouterPeeringGroupSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *VirtualRouterPeeringGroupSpec) Normalize() {

	for k, v := range m.Items {
		v.Normalize()
		m.Items[k] = v

	}

}

func (m *VirtualRouterPeeringGroupStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "route-tables"

		for _, v := range m.RouteTables {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *VirtualRouterPeeringGroupStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.RouteTables {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sRouteTables[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *VirtualRouterPeeringGroupStatus) Normalize() {

	for k, v := range m.RouteTables {
		if v != nil {
			v.Normalize()
			m.RouteTables[k] = v
		}
	}

}

func (m *VirtualRouterPeeringRoute) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "dest-virtual-router"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("WeakRef"),
				RefKind: "VirtualRouter",
			}
		}

		if m.DestVirtualRouter != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/network/"+"virtualrouters/"+tenant+"/"+m.DestVirtualRouter)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouterPeeringRoute) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapVr_peering_group["VirtualRouterPeeringRoute"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapVr_peering_group["VirtualRouterPeeringRoute"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *VirtualRouterPeeringRoute) Normalize() {

}

func (m *VirtualRouterPeeringRouteTable) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "routes"

		for _, v := range m.Routes {

			v.References(tenant, tag, resp)

		}
	}
}

func (m *VirtualRouterPeeringRouteTable) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Routes {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sRoutes[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *VirtualRouterPeeringRouteTable) Normalize() {

	for k, v := range m.Routes {
		v.Normalize()
		m.Routes[k] = v

	}

}

func (m *VirtualRouterPeeringSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "virtual-router"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "VirtualRouter",
			}
		}

		if m.VirtualRouter != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/network/"+"virtualrouters/"+tenant+"/"+m.VirtualRouter)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouterPeeringSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapVr_peering_group["VirtualRouterPeeringSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapVr_peering_group["VirtualRouterPeeringSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *VirtualRouterPeeringSpec) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&VirtualRouterPeeringGroup{},
	)

	validatorMapVr_peering_group = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapVr_peering_group["VirtualRouterPeeringRoute"] = make(map[string][]func(string, interface{}) error)

	validatorMapVr_peering_group["VirtualRouterPeeringRoute"]["all"] = append(validatorMapVr_peering_group["VirtualRouterPeeringRoute"]["all"], func(path string, i interface{}) error {
		m := i.(*VirtualRouterPeeringRoute)
		if err := validators.CIDR(m.IPv4Prefix); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"IPv4Prefix", err.Error())
		}
		return nil
	})

	validatorMapVr_peering_group["VirtualRouterPeeringSpec"] = make(map[string][]func(string, interface{}) error)

	validatorMapVr_peering_group["VirtualRouterPeeringSpec"]["all"] = append(validatorMapVr_peering_group["VirtualRouterPeeringSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*VirtualRouterPeeringSpec)
		for k, v := range m.IPv4Prefixes {
			if err := validators.CIDR(v); err != nil {
				return fmt.Errorf("%v[%v] failed validation: %s", path+"."+"IPv4Prefixes", k, err.Error())
			}
		}

		return nil
	})

}
