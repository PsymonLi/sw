// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: vrf.proto
*/
package network

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// VirtualRouterSpec_VPCTypes_normal is a map of normalized values for the enum
var VirtualRouterSpec_VPCTypes_normal = map[string]string{
	"infra":   "infra",
	"tenant":  "tenant",
	"unknown": "unknown",
}

var VirtualRouterSpec_VPCTypes_vname = map[int32]string{
	0: "unknown",
	1: "tenant",
	2: "infra",
}

var VirtualRouterSpec_VPCTypes_vvalue = map[string]int32{
	"unknown": 0,
	"tenant":  1,
	"infra":   2,
}

func (x VirtualRouterSpec_VPCTypes) String() string {
	return VirtualRouterSpec_VPCTypes_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapVrf = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *VirtualRouter) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "virtualrouters/", m.Tenant, "/", m.Name)
}

func (m *VirtualRouter) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/virtualrouters/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouter) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouter
	var ok bool
	if into == nil {
		out = &VirtualRouter{}
	} else {
		out, ok = into.(*VirtualRouter)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouter))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouter) Defaults(ver string) bool {
	var ret bool
	m.Kind = "VirtualRouter"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterSpec) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterSpec
	var ok bool
	if into == nil {
		out = &VirtualRouterSpec{}
	} else {
		out, ok = into.(*VirtualRouterSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Type = "unknown"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *VirtualRouterStatus) Clone(into interface{}) (interface{}, error) {
	var out *VirtualRouterStatus
	var ok bool
	if into == nil {
		out = &VirtualRouterStatus{}
	} else {
		out, ok = into.(*VirtualRouterStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*VirtualRouterStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *VirtualRouterStatus) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *VirtualRouter) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "status"

		m.Status.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouter) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for VirtualRouter"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *VirtualRouter) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *VirtualRouterSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "default-ipam-policy"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "IPAMPolicy",
			}
		}

		if m.DefaultIPAMPolicy != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/network/"+"ipam-policies/"+tenant+"/"+m.DefaultIPAMPolicy)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouterSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.RouteImportExport != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "RouteImportExport"
			if errs := m.RouteImportExport.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapVrf["VirtualRouterSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapVrf["VirtualRouterSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *VirtualRouterSpec) Normalize() {

	if m.RouteImportExport != nil {
		m.RouteImportExport.Normalize()
	}

	m.Type = VirtualRouterSpec_VPCTypes_normal[strings.ToLower(m.Type)]

}

func (m *VirtualRouterStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "route-table"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "RouteTable",
			}
		}

		if m.RouteTable != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/network/"+"route-tables/"+tenant+"/"+m.RouteTable)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *VirtualRouterStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.RD != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "RD"
			if errs := m.RD.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *VirtualRouterStatus) Normalize() {

	if m.RD != nil {
		m.RD.Normalize()
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&VirtualRouter{},
	)

	validatorMapVrf = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapVrf["VirtualRouterSpec"] = make(map[string][]func(string, interface{}) error)

	validatorMapVrf["VirtualRouterSpec"]["all"] = append(validatorMapVrf["VirtualRouterSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*VirtualRouterSpec)
		if err := validators.EmptyOr(validators.MacAddr, m.RouterMACAddress, nil); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"RouterMACAddress", err.Error())
		}
		return nil
	})

	validatorMapVrf["VirtualRouterSpec"]["all"] = append(validatorMapVrf["VirtualRouterSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*VirtualRouterSpec)

		if _, ok := VirtualRouterSpec_VPCTypes_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range VirtualRouterSpec_VPCTypes_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapVrf["VirtualRouterSpec"]["all"] = append(validatorMapVrf["VirtualRouterSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*VirtualRouterSpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "16777215")

		if err := validators.IntRange(m.VxLanVNI, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"VxLanVNI", err.Error())
		}
		return nil
	})

}
