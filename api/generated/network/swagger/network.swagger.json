{
  "swagger": "2.0",
  "info": {
    "title": "Service name",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/tenants": {
      "get": {
        "operationId": "AutoListTenant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkTenantList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Tenant",
            "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "TenantV1"
        ]
      },
      "post": {
        "operationId": "AutoAddTenant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        ],
        "tags": [
          "TenantV1"
        ]
      }
    },
    "/tenants/{O.Name}": {
      "get": {
        "operationId": "AutoGetTenant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Tenant",
            "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.AdminUser",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TenantV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteTenant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TenantV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateTenant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkTenant"
            }
          }
        ],
        "tags": [
          "TenantV1"
        ]
      }
    },
    "/{O.Tenant}/endpoints": {
      "get": {
        "operationId": "AutoListEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkEndpointList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "EndpointV1"
        ]
      },
      "post": {
        "operationId": "AutoAddEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        ],
        "tags": [
          "EndpointV1"
        ]
      }
    },
    "/{O.Tenant}/endpoints/{O.Name}": {
      "get": {
        "operationId": "AutoGetEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Status.EndpointUUID",
            "description": "list of security groups this policy is attached to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.WorkloadUUID",
            "description": "Incoming rules.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.WorkloadName",
            "description": "Outgoing rules.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Network",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.HomingHostAddr",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.HomingHostName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.IPv4Address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.IPv4Gateway",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.IPv6Address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.IPv6Gateway",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.MacAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.NodeUUID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.EndpointState",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.SecurityGroups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.MicroSegmentVlan",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Status.WorkloadAttributes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "EndpointV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EndpointV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateEndpoint",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkEndpoint"
            }
          }
        ],
        "tags": [
          "EndpointV1"
        ]
      }
    },
    "/{O.Tenant}/lb-policy": {
      "get": {
        "operationId": "AutoListLbPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkLbPolicyList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "LbPolicyV1"
        ]
      },
      "post": {
        "operationId": "AutoAddLbPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        ],
        "tags": [
          "LbPolicyV1"
        ]
      }
    },
    "/{O.Tenant}/lb-policy/{O.Name}": {
      "get": {
        "operationId": "AutoGetLbPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.Type",
            "description": "A map containing the certificate to use for a set of destinations.\nThe key is a selector for workloads that exist either inside or\noutside the cluster. It can be based on labels, hostnames or \"IP:port\" pairs.\nThe value is the name of the certificate to use for the selected destinations.\nThe certificates \"usage\" field must contain \"client\".\nTODO: replace the first \"string\" type with proper selector type when available.\nA single \"default\" certificate which matches all destinations is allowed.\nIf a destination matches multiple non-default map keys, an error is returned.\nIf a destination does not match any map key (and there is no default),\nthe outbound connection is initiated without TLS.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Algorithm",
            "description": "The list of root certificates used to validate a trust chain presented by a server.\nIf the list is empty, all roots certificates in the tenant scope are considered.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.SessionAffinity",
            "description": "Valid DNS names or IP addresses that must appear in the server certificate\nSubjAltName or Common Name (if SAN is not specified). If not specified,\nclient validates the IP address of the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.HealthCheck.Interval",
            "description": "list of workloads in this group.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Spec.HealthCheck.ProbesPerInterval",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Spec.HealthCheck.ProbePortOrUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.HealthCheck.MaxTimeouts",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Spec.HealthCheck.DeclareHealthyCount",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Status.Services",
            "description": "FIXME: maps are not working. change this after its fixed\nmap\u003cstring, string\u003e WorkloadSelector  = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = \"workload-labels,omitempty\"];\nworkload selector for the service (list of labels to match).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "LbPolicyV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteLbPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LbPolicyV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateLbPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkLbPolicy"
            }
          }
        ],
        "tags": [
          "LbPolicyV1"
        ]
      }
    },
    "/{O.Tenant}/networks": {
      "get": {
        "operationId": "AutoListNetwork",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkNetworkList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "NetworkV1"
        ]
      },
      "post": {
        "operationId": "AutoAddNetwork",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        ],
        "tags": [
          "NetworkV1"
        ]
      }
    },
    "/{O.Tenant}/networks/{O.Name}": {
      "get": {
        "operationId": "AutoGetNetwork",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.Type",
            "description": "Health check interval.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.IPv4Subnet",
            "description": "# of probes per interval.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.IPv4Gateway",
            "description": "probe URL.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.IPv6Subnet",
            "description": "timeout for declaring backend down.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.IPv6Gateway",
            "description": "# of successful probes before we declare the backend back up.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.VlanID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Spec.VxlanVNI",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Status.Workloads",
            "description": "load balancing type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.AllocatedIPv4Addrs",
            "description": "load balancing algorithm.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "NetworkV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteNetwork",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "NetworkV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateNetwork",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkNetwork"
            }
          }
        ],
        "tags": [
          "NetworkV1"
        ]
      }
    },
    "/{O.Tenant}/security-groups": {
      "get": {
        "operationId": "AutoListSecurityGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSecurityGroupList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "SecurityGroupV1"
        ]
      },
      "post": {
        "operationId": "AutoAddSecurityGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        ],
        "tags": [
          "SecurityGroupV1"
        ]
      }
    },
    "/{O.Tenant}/security-groups/{O.Name}": {
      "get": {
        "operationId": "AutoGetSecurityGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.WorkloadSelector",
            "description": "endpoint UUID.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.ServiceSelector",
            "description": "VM or container UUID.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.MatchPrefixes",
            "description": "VM or container name.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.Workloads",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.Policies",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "SecurityGroupV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteSecurityGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SecurityGroupV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateSecurityGroup",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkSecurityGroup"
            }
          }
        ],
        "tags": [
          "SecurityGroupV1"
        ]
      }
    },
    "/{O.Tenant}/services": {
      "get": {
        "operationId": "AutoListService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkServiceList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "ServiceV1"
        ]
      },
      "post": {
        "operationId": "AutoAddService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        ],
        "tags": [
          "ServiceV1"
        ]
      }
    },
    "/{O.Tenant}/services/{O.Name}": {
      "get": {
        "operationId": "AutoGetService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.WorkloadSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.VirtualIp",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Ports",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.LBPolicy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.TLSServerPolicy.Certificates",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.TLSServerPolicy.ClientAuthentication",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.TLSServerPolicy.TrustRoots",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.TLSServerPolicy.AllowedPeerId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.TLSClientPolicy.TrustRoots",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Spec.TLSClientPolicy.AllowedPeerId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.Workloads",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ServiceV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateService",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkService"
            }
          }
        ],
        "tags": [
          "ServiceV1"
        ]
      }
    },
    "/{O.Tenant}/sgpolicy": {
      "get": {
        "operationId": "AutoListSgpolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSgpolicyList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "SgpolicyV1"
        ]
      },
      "post": {
        "operationId": "AutoAddSgpolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        ],
        "tags": [
          "SgpolicyV1"
        ]
      }
    },
    "/{O.Tenant}/sgpolicy/{O.Name}": {
      "get": {
        "operationId": "AutoGetSgpolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Spec.AttachGroups",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.Workloads",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "SgpolicyV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteSgpolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SgpolicyV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateSgpolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/networkSgpolicy"
            }
          }
        ],
        "tags": [
          "SgpolicyV1"
        ]
      }
    }
  },
  "definitions": {
    "apiListMeta": {
      "type": "object",
      "properties": {
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "LabelSelector": {
          "type": "string"
        },
        "FieldSelector": {
          "type": "string"
        },
        "PrefixWatch": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "Tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "UUID": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "CreationTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "CreationTime is the creation time of Object"
        },
        "ModTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "ModTime is the Last Modification time of Object"
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "APIVersion": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "networkAutoMsgEndpointWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "Tenant admin user"
        },
        "Object": {
          "$ref": "#/definitions/networkEndpoint"
        }
      },
      "title": "spec part of tenant object"
    },
    "networkAutoMsgLbPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/networkLbPolicy"
        }
      },
      "title": "status part of tenant object"
    },
    "networkAutoMsgNetworkWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/networkNetwork"
        }
      },
      "title": "Tenant represents an org or a tenant"
    },
    "networkAutoMsgSecurityGroupWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "type of network. (vlan/vxlan/routed etc)"
        },
        "Object": {
          "$ref": "#/definitions/networkSecurityGroup",
          "title": "IPv4 subnet CIDR"
        }
      },
      "title": "spec part of network object"
    },
    "networkAutoMsgServiceWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "list of all workloads in this network"
        },
        "Object": {
          "$ref": "#/definitions/networkService",
          "title": "allocated IPv4 addresses (bitmap)"
        }
      },
      "title": "status part of network object"
    },
    "networkAutoMsgSgpolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/networkSgpolicy"
        }
      },
      "title": "Network represents a subnet"
    },
    "networkAutoMsgTenantWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "Workload selector (list of labels)"
        },
        "Object": {
          "$ref": "#/definitions/networkTenant",
          "title": "Service object selector"
        }
      },
      "title": "security group configuration"
    },
    "networkEndpoint": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "list of workloads that are part of this security group"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta",
          "title": "list of all policies attached to this security group"
        },
        "Spec": {
          "$ref": "#/definitions/networkEndpointSpec"
        },
        "Status": {
          "$ref": "#/definitions/networkEndpointStatus"
        }
      },
      "title": "security group status"
    },
    "networkEndpointList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkEndpoint"
          },
          "description": "Spec contains the configuration of the security group."
        }
      },
      "title": "SecurityGroup represents a security zone or domain"
    },
    "networkEndpointSpec": {
      "type": "object"
    },
    "networkEndpointStatus": {
      "type": "object",
      "properties": {
        "EndpointUUID": {
          "type": "string",
          "title": "list of security groups this policy is attached to"
        },
        "WorkloadUUID": {
          "type": "string",
          "title": "Incoming rules"
        },
        "WorkloadName": {
          "type": "string",
          "title": "Outgoing rules"
        },
        "Network": {
          "type": "string"
        },
        "HomingHostAddr": {
          "type": "string"
        },
        "HomingHostName": {
          "type": "string"
        },
        "IPv4Address": {
          "type": "string"
        },
        "IPv4Gateway": {
          "type": "string"
        },
        "IPv6Address": {
          "type": "string"
        },
        "IPv6Gateway": {
          "type": "string"
        },
        "MacAddress": {
          "type": "string"
        },
        "NodeUUID": {
          "type": "string"
        },
        "EndpointState": {
          "type": "string"
        },
        "SecurityGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MicroSegmentVlan": {
          "type": "integer",
          "format": "int64"
        },
        "WorkloadAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "networkHealthCheckSpec": {
      "type": "object",
      "properties": {
        "Interval": {
          "type": "integer",
          "format": "int64",
          "title": "list of workloads in this group"
        },
        "ProbesPerInterval": {
          "type": "integer",
          "format": "int64"
        },
        "ProbePortOrUrl": {
          "type": "string"
        },
        "MaxTimeouts": {
          "type": "integer",
          "format": "int64"
        },
        "DeclareHealthyCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "networkLbPolicy": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkLbPolicySpec",
          "description": "Spec contains the configuration of the sgpolicy."
        },
        "Status": {
          "$ref": "#/definitions/networkLbPolicyStatus",
          "description": "Status contains the current state of the sgpolicy."
        }
      },
      "title": "Sgpolicy represents a security policy for security groups"
    },
    "networkLbPolicyList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "description": "List of names of certificates to present to clients.\nThe certificates \"usage\" field must contain \"server\".\nIf multiple certificates names are provided, system tries to choose the\ncorrect one using SNI, otherwise it picks the first one in the list."
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta",
          "description": "Client authentication\n\"None\" means that server does not request and will not validate a client certificate.\n\"Mandatory\" means that server requests and validates client certificate.\n\"Optional\" means that server requests client certificate but proceeds even\nif client does not present it.\nDefault is \"Mandatory\"."
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkLbPolicy"
          },
          "description": "The list of root certificates used to validate a trust chain presented by client.\nIf the list is empty, all roots certificates in the tenant scope are considered."
        }
      },
      "description": "The Service TLS configuration for inbound connections.\nIt is used on all ports specified in the Service spec.\nMultiple Service objects can select the same workload and provide different\nserver TLS configurations for disjoint sets of ports."
    },
    "networkLbPolicySpec": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "description": "A map containing the certificate to use for a set of destinations.\nThe key is a selector for workloads that exist either inside or\noutside the cluster. It can be based on labels, hostnames or \"IP:port\" pairs.\nThe value is the name of the certificate to use for the selected destinations.\nThe certificates \"usage\" field must contain \"client\".\nTODO: replace the first \"string\" type with proper selector type when available.\nA single \"default\" certificate which matches all destinations is allowed.\nIf a destination matches multiple non-default map keys, an error is returned.\nIf a destination does not match any map key (and there is no default),\nthe outbound connection is initiated without TLS."
        },
        "Algorithm": {
          "type": "string",
          "description": "The list of root certificates used to validate a trust chain presented by a server.\nIf the list is empty, all roots certificates in the tenant scope are considered."
        },
        "SessionAffinity": {
          "type": "string",
          "description": "Valid DNS names or IP addresses that must appear in the server certificate\nSubjAltName or Common Name (if SAN is not specified). If not specified,\nclient validates the IP address of the server."
        },
        "HealthCheck": {
          "$ref": "#/definitions/networkHealthCheckSpec"
        }
      },
      "description": "Service TLS configuration for connections initiated by the workload towards\ndestinations inside or outside the cluster."
    },
    "networkLbPolicyStatus": {
      "type": "object",
      "properties": {
        "Services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "FIXME: maps are not working. change this after its fixed\nmap\u003cstring, string\u003e WorkloadSelector  = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = \"workload-labels,omitempty\"];\nworkload selector for the service (list of labels to match)"
        }
      },
      "title": "spec part of service object"
    },
    "networkNetwork": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "list of workloads that are backends of this service"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkNetworkSpec"
        },
        "Status": {
          "$ref": "#/definitions/networkNetworkStatus"
        }
      },
      "title": "status part of service object"
    },
    "networkNetworkList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkNetwork"
          },
          "description": "Spec contains the configuration of the Service."
        }
      },
      "title": "Service represents a group of identical endpoints, such as servers in an app tier"
    },
    "networkNetworkSpec": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "Health check interval"
        },
        "IPv4Subnet": {
          "type": "string",
          "title": "# of probes per interval"
        },
        "IPv4Gateway": {
          "type": "string",
          "title": "probe URL"
        },
        "IPv6Subnet": {
          "type": "string",
          "title": "timeout for declaring backend down"
        },
        "IPv6Gateway": {
          "type": "string",
          "title": "# of successful probes before we declare the backend back up"
        },
        "VlanID": {
          "type": "integer",
          "format": "int64"
        },
        "VxlanVNI": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "networkNetworkStatus": {
      "type": "object",
      "properties": {
        "Workloads": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "load balancing type"
        },
        "AllocatedIPv4Addrs": {
          "type": "string",
          "format": "byte",
          "title": "load balancing algorithm"
        }
      }
    },
    "networkSGRule": {
      "type": "object",
      "properties": {
        "Ports": {
          "type": "string",
          "title": "list of service objects referring this lb-policy"
        },
        "Action": {
          "type": "string"
        },
        "PeerGroup": {
          "type": "string"
        },
        "Apps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AppUser": {
          "type": "string"
        },
        "AppUserGrp": {
          "type": "string"
        }
      }
    },
    "networkSecurityGroup": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkSecurityGroupSpec",
          "description": "Spec contains the configuration of the LbPolicy."
        },
        "Status": {
          "$ref": "#/definitions/networkSecurityGroupStatus",
          "description": "Status contains the current state of the LbPolicy."
        }
      },
      "title": "LbPolicy represents a load balancer policy"
    },
    "networkSecurityGroupList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkSecurityGroup"
          }
        }
      },
      "title": "spec part of Endpoint object"
    },
    "networkSecurityGroupSpec": {
      "type": "object",
      "properties": {
        "WorkloadSelector": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "endpoint UUID"
        },
        "ServiceSelector": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "VM or container UUID"
        },
        "MatchPrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "VM or container name"
        }
      },
      "title": "status part of Endpoint object"
    },
    "networkSecurityGroupStatus": {
      "type": "object",
      "properties": {
        "Workloads": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Endpoint represents a network endpoint"
    },
    "networkService": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkServiceSpec"
        },
        "Status": {
          "$ref": "#/definitions/networkServiceStatus"
        }
      }
    },
    "networkServiceList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkService"
          }
        }
      }
    },
    "networkServiceSpec": {
      "type": "object",
      "properties": {
        "WorkloadSelector": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "VirtualIp": {
          "type": "string"
        },
        "Ports": {
          "type": "string"
        },
        "LBPolicy": {
          "type": "string"
        },
        "TLSServerPolicy": {
          "$ref": "#/definitions/networkTLSServerPolicySpec"
        },
        "TLSClientPolicy": {
          "$ref": "#/definitions/networkTLSClientPolicySpec"
        }
      }
    },
    "networkServiceStatus": {
      "type": "object",
      "properties": {
        "Workloads": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "networkSgpolicy": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkSgpolicySpec"
        },
        "Status": {
          "$ref": "#/definitions/networkSgpolicyStatus"
        }
      }
    },
    "networkSgpolicyList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkSgpolicy"
          }
        }
      }
    },
    "networkSgpolicySpec": {
      "type": "object",
      "properties": {
        "AttachGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "InRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkSGRule"
          }
        },
        "OutRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkSGRule"
          }
        }
      }
    },
    "networkSgpolicyStatus": {
      "type": "object",
      "properties": {
        "Workloads": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "networkTLSClientPolicySpec": {
      "type": "object",
      "properties": {
        "CertificatesSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TrustRoots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowedPeerId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "networkTLSServerPolicySpec": {
      "type": "object",
      "properties": {
        "Certificates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ClientAuthentication": {
          "type": "string"
        },
        "TrustRoots": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "AllowedPeerId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "networkTenant": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/networkTenantSpec"
        },
        "Status": {
          "$ref": "#/definitions/networkTenantStatus"
        }
      }
    },
    "networkTenantList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/networkTenant"
          }
        }
      }
    },
    "networkTenantSpec": {
      "type": "object",
      "properties": {
        "AdminUser": {
          "type": "string"
        }
      }
    },
    "networkTenantStatus": {
      "type": "object"
    }
  }
}
