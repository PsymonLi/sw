// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: protos/network.proto
*/
package network

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapNetwork = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Endpoint) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "endpoints/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *LbPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "lb-policy/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Network) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "networks/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *SecurityGroup) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "security-groups/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Service) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "services/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Sgpolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "sgpolicy/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Tenant) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "tenants/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *EndpointList) MakeKey(prefix string) string {
	obj := Endpoint{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *LbPolicyList) MakeKey(prefix string) string {
	obj := LbPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *NetworkList) MakeKey(prefix string) string {
	obj := Network{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *SecurityGroupList) MakeKey(prefix string) string {
	obj := SecurityGroup{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *ServiceList) MakeKey(prefix string) string {
	obj := Service{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *SgpolicyList) MakeKey(prefix string) string {
	obj := Sgpolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *TenantList) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgEndpointWatchHelper) MakeKey(prefix string) string {
	obj := Endpoint{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgLbPolicyWatchHelper) MakeKey(prefix string) string {
	obj := LbPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgNetworkWatchHelper) MakeKey(prefix string) string {
	obj := Network{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSecurityGroupWatchHelper) MakeKey(prefix string) string {
	obj := SecurityGroup{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgServiceWatchHelper) MakeKey(prefix string) string {
	obj := Service{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSgpolicyWatchHelper) MakeKey(prefix string) string {
	obj := Sgpolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgTenantWatchHelper) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgEndpointWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgEndpointWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgEndpointWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgEndpointWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgEndpointWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgLbPolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgLbPolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgLbPolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgLbPolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgLbPolicyWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgNetworkWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgNetworkWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgNetworkWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgNetworkWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgNetworkWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgSecurityGroupWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgSecurityGroupWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgSecurityGroupWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgSecurityGroupWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgSecurityGroupWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgServiceWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgServiceWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgServiceWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgServiceWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgServiceWatchHelper) Defaults(ver string) bool {
	var ret bool
	for m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgSgpolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgSgpolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgSgpolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgSgpolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgSgpolicyWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgTenantWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgTenantWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgTenantWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgTenantWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgTenantWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Endpoint) Clone(into interface{}) (interface{}, error) {
	var out *Endpoint
	var ok bool
	if into == nil {
		out = &Endpoint{}
	} else {
		out, ok = into.(*Endpoint)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Endpoint) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *EndpointList) Clone(into interface{}) (interface{}, error) {
	var out *EndpointList
	var ok bool
	if into == nil {
		out = &EndpointList{}
	} else {
		out, ok = into.(*EndpointList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *EndpointList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *EndpointSpec) Clone(into interface{}) (interface{}, error) {
	var out *EndpointSpec
	var ok bool
	if into == nil {
		out = &EndpointSpec{}
	} else {
		out, ok = into.(*EndpointSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *EndpointSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *EndpointStatus) Clone(into interface{}) (interface{}, error) {
	var out *EndpointStatus
	var ok bool
	if into == nil {
		out = &EndpointStatus{}
	} else {
		out, ok = into.(*EndpointStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *EndpointStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *HealthCheckSpec) Clone(into interface{}) (interface{}, error) {
	var out *HealthCheckSpec
	var ok bool
	if into == nil {
		out = &HealthCheckSpec{}
	} else {
		out, ok = into.(*HealthCheckSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *HealthCheckSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicy) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicy
	var ok bool
	if into == nil {
		out = &LbPolicy{}
	} else {
		out, ok = into.(*LbPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicy) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicyList) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicyList
	var ok bool
	if into == nil {
		out = &LbPolicyList{}
	} else {
		out, ok = into.(*LbPolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicyList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicySpec
	var ok bool
	if into == nil {
		out = &LbPolicySpec{}
	} else {
		out, ok = into.(*LbPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *LbPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *LbPolicyStatus
	var ok bool
	if into == nil {
		out = &LbPolicyStatus{}
	} else {
		out, ok = into.(*LbPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *LbPolicyStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Network) Clone(into interface{}) (interface{}, error) {
	var out *Network
	var ok bool
	if into == nil {
		out = &Network{}
	} else {
		out, ok = into.(*Network)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Network) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkList) Clone(into interface{}) (interface{}, error) {
	var out *NetworkList
	var ok bool
	if into == nil {
		out = &NetworkList{}
	} else {
		out, ok = into.(*NetworkList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkSpec) Clone(into interface{}) (interface{}, error) {
	var out *NetworkSpec
	var ok bool
	if into == nil {
		out = &NetworkSpec{}
	} else {
		out, ok = into.(*NetworkSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkStatus) Clone(into interface{}) (interface{}, error) {
	var out *NetworkStatus
	var ok bool
	if into == nil {
		out = &NetworkStatus{}
	} else {
		out, ok = into.(*NetworkStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SGRule) Clone(into interface{}) (interface{}, error) {
	var out *SGRule
	var ok bool
	if into == nil {
		out = &SGRule{}
	} else {
		out, ok = into.(*SGRule)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGRule) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroup) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroup
	var ok bool
	if into == nil {
		out = &SecurityGroup{}
	} else {
		out, ok = into.(*SecurityGroup)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroup) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroupList) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroupList
	var ok bool
	if into == nil {
		out = &SecurityGroupList{}
	} else {
		out, ok = into.(*SecurityGroupList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroupList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroupSpec) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroupSpec
	var ok bool
	if into == nil {
		out = &SecurityGroupSpec{}
	} else {
		out, ok = into.(*SecurityGroupSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroupSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroupStatus) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroupStatus
	var ok bool
	if into == nil {
		out = &SecurityGroupStatus{}
	} else {
		out, ok = into.(*SecurityGroupStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroupStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Service) Clone(into interface{}) (interface{}, error) {
	var out *Service
	var ok bool
	if into == nil {
		out = &Service{}
	} else {
		out, ok = into.(*Service)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Service) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServiceList) Clone(into interface{}) (interface{}, error) {
	var out *ServiceList
	var ok bool
	if into == nil {
		out = &ServiceList{}
	} else {
		out, ok = into.(*ServiceList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServiceList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServiceSpec) Clone(into interface{}) (interface{}, error) {
	var out *ServiceSpec
	var ok bool
	if into == nil {
		out = &ServiceSpec{}
	} else {
		out, ok = into.(*ServiceSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServiceSpec) Defaults(ver string) bool {
	var ret bool
	for m.TLSServerPolicy != nil {
		ret = ret || m.TLSServerPolicy.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServiceStatus) Clone(into interface{}) (interface{}, error) {
	var out *ServiceStatus
	var ok bool
	if into == nil {
		out = &ServiceStatus{}
	} else {
		out, ok = into.(*ServiceStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServiceStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Sgpolicy) Clone(into interface{}) (interface{}, error) {
	var out *Sgpolicy
	var ok bool
	if into == nil {
		out = &Sgpolicy{}
	} else {
		out, ok = into.(*Sgpolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Sgpolicy) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SgpolicyList) Clone(into interface{}) (interface{}, error) {
	var out *SgpolicyList
	var ok bool
	if into == nil {
		out = &SgpolicyList{}
	} else {
		out, ok = into.(*SgpolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SgpolicyList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SgpolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *SgpolicySpec
	var ok bool
	if into == nil {
		out = &SgpolicySpec{}
	} else {
		out, ok = into.(*SgpolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SgpolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SgpolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *SgpolicyStatus
	var ok bool
	if into == nil {
		out = &SgpolicyStatus{}
	} else {
		out, ok = into.(*SgpolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SgpolicyStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TLSClientPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *TLSClientPolicySpec
	var ok bool
	if into == nil {
		out = &TLSClientPolicySpec{}
	} else {
		out, ok = into.(*TLSClientPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TLSClientPolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TLSServerPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *TLSServerPolicySpec
	var ok bool
	if into == nil {
		out = &TLSServerPolicySpec{}
	} else {
		out, ok = into.(*TLSServerPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TLSServerPolicySpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.ClientAuthentication = TLSServerPolicySpec_ClientAuthTypes_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Tenant) Clone(into interface{}) (interface{}, error) {
	var out *Tenant
	var ok bool
	if into == nil {
		out = &Tenant{}
	} else {
		out, ok = into.(*Tenant)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Tenant) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantList) Clone(into interface{}) (interface{}, error) {
	var out *TenantList
	var ok bool
	if into == nil {
		out = &TenantList{}
	} else {
		out, ok = into.(*TenantList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantSpec) Clone(into interface{}) (interface{}, error) {
	var out *TenantSpec
	var ok bool
	if into == nil {
		out = &TenantSpec{}
	} else {
		out, ok = into.(*TenantSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantStatus) Clone(into interface{}) (interface{}, error) {
	var out *TenantStatus
	var ok bool
	if into == nil {
		out = &TenantStatus{}
	} else {
		out, ok = into.(*TenantStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *AutoMsgEndpointWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgLbPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgNetworkWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgSecurityGroupWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgServiceWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgSgpolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgTenantWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Endpoint) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *HealthCheckSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Network) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SGRule) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SecurityGroup) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *SecurityGroupList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SecurityGroupSpec) Validate(ver string, ignoreStatus bool) bool {
	if m.WorkloadSelector != nil && !m.WorkloadSelector.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *SecurityGroupStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Service) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *ServiceSpec) Validate(ver string, ignoreStatus bool) bool {
	if m.TLSServerPolicy != nil && !m.TLSServerPolicy.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Sgpolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSClientPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSServerPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapNetwork["TLSServerPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapNetwork["TLSServerPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *Tenant) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	funcMapNetwork = make(map[string]map[string][]func(interface{}) bool)

	funcMapNetwork["TLSServerPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapNetwork["TLSServerPolicySpec"]["all"] = append(funcMapNetwork["TLSServerPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*TLSServerPolicySpec)

		if _, ok := TLSServerPolicySpec_ClientAuthTypes_value[m.ClientAuthentication]; !ok {
			return false
		}
		return true
	})

}
