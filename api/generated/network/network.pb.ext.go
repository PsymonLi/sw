// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: network.proto
*/
package network

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *Network) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "networks/", m.Tenant, "/", m.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Network) Clone(into interface{}) (interface{}, error) {
	var out *Network
	var ok bool
	if into == nil {
		out = &Network{}
	} else {
		out, ok = into.(*Network)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Network) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkSpec) Clone(into interface{}) (interface{}, error) {
	var out *NetworkSpec
	var ok bool
	if into == nil {
		out = &NetworkSpec{}
	} else {
		out, ok = into.(*NetworkSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NetworkStatus) Clone(into interface{}) (interface{}, error) {
	var out *NetworkStatus
	var ok bool
	if into == nil {
		out = &NetworkStatus{}
	} else {
		out, ok = into.(*NetworkStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NetworkStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *Network) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {

}
