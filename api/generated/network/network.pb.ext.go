// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: protos/network.proto
*/
package network

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapNetwork = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Endpoint) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "endpoint/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *LbPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "lb-policy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Network) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "network/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *SecurityGroup) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "security-group/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Service) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "service/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Sgpolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "sgpolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Tenant) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "tenant/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *EndpointList) MakeKey(prefix string) string {
	obj := Endpoint{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *LbPolicyList) MakeKey(prefix string) string {
	obj := LbPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *NetworkList) MakeKey(prefix string) string {
	obj := Network{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *SecurityGroupList) MakeKey(prefix string) string {
	obj := SecurityGroup{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *ServiceList) MakeKey(prefix string) string {
	obj := Service{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *SgpolicyList) MakeKey(prefix string) string {
	obj := Sgpolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *TenantList) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgEndpointWatchHelper) MakeKey(prefix string) string {
	obj := Endpoint{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgLbPolicyWatchHelper) MakeKey(prefix string) string {
	obj := LbPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgNetworkWatchHelper) MakeKey(prefix string) string {
	obj := Network{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSecurityGroupWatchHelper) MakeKey(prefix string) string {
	obj := SecurityGroup{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgServiceWatchHelper) MakeKey(prefix string) string {
	obj := Service{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSgpolicyWatchHelper) MakeKey(prefix string) string {
	obj := Sgpolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgTenantWatchHelper) MakeKey(prefix string) string {
	obj := Tenant{}
	return obj.MakeKey(prefix)
}

func (m *AutoMsgEndpointWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgEndpointWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgLbPolicyWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgLbPolicyWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgNetworkWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgNetworkWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgSecurityGroupWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgSecurityGroupWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgServiceWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgServiceWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgSgpolicyWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgSgpolicyWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgTenantWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgTenantWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Endpoint) Clone(into interface{}) error {
	out, ok := into.(*Endpoint)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *EndpointList) Clone(into interface{}) error {
	out, ok := into.(*EndpointList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *EndpointSpec) Clone(into interface{}) error {
	out, ok := into.(*EndpointSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *EndpointStatus) Clone(into interface{}) error {
	out, ok := into.(*EndpointStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *HealthCheckSpec) Clone(into interface{}) error {
	out, ok := into.(*HealthCheckSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *LbPolicy) Clone(into interface{}) error {
	out, ok := into.(*LbPolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *LbPolicyList) Clone(into interface{}) error {
	out, ok := into.(*LbPolicyList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *LbPolicySpec) Clone(into interface{}) error {
	out, ok := into.(*LbPolicySpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *LbPolicyStatus) Clone(into interface{}) error {
	out, ok := into.(*LbPolicyStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Network) Clone(into interface{}) error {
	out, ok := into.(*Network)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NetworkList) Clone(into interface{}) error {
	out, ok := into.(*NetworkList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NetworkSpec) Clone(into interface{}) error {
	out, ok := into.(*NetworkSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NetworkStatus) Clone(into interface{}) error {
	out, ok := into.(*NetworkStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SGRule) Clone(into interface{}) error {
	out, ok := into.(*SGRule)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SecurityGroup) Clone(into interface{}) error {
	out, ok := into.(*SecurityGroup)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SecurityGroupList) Clone(into interface{}) error {
	out, ok := into.(*SecurityGroupList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SecurityGroupSpec) Clone(into interface{}) error {
	out, ok := into.(*SecurityGroupSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SecurityGroupStatus) Clone(into interface{}) error {
	out, ok := into.(*SecurityGroupStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Service) Clone(into interface{}) error {
	out, ok := into.(*Service)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ServiceList) Clone(into interface{}) error {
	out, ok := into.(*ServiceList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ServiceSpec) Clone(into interface{}) error {
	out, ok := into.(*ServiceSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ServiceStatus) Clone(into interface{}) error {
	out, ok := into.(*ServiceStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Sgpolicy) Clone(into interface{}) error {
	out, ok := into.(*Sgpolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SgpolicyList) Clone(into interface{}) error {
	out, ok := into.(*SgpolicyList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SgpolicySpec) Clone(into interface{}) error {
	out, ok := into.(*SgpolicySpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SgpolicyStatus) Clone(into interface{}) error {
	out, ok := into.(*SgpolicyStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *TLSClientPolicySpec) Clone(into interface{}) error {
	out, ok := into.(*TLSClientPolicySpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *TLSServerPolicySpec) Clone(into interface{}) error {
	out, ok := into.(*TLSServerPolicySpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Tenant) Clone(into interface{}) error {
	out, ok := into.(*Tenant)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *TenantList) Clone(into interface{}) error {
	out, ok := into.(*TenantList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *TenantSpec) Clone(into interface{}) error {
	out, ok := into.(*TenantSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *TenantStatus) Clone(into interface{}) error {
	out, ok := into.(*TenantStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *AutoMsgEndpointWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgLbPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgNetworkWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgSecurityGroupWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgServiceWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgSgpolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgTenantWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Endpoint) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EndpointStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *HealthCheckSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *LbPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Network) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NetworkStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SGRule) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SecurityGroup) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *SecurityGroupList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SecurityGroupSpec) Validate(ver string, ignoreStatus bool) bool {
	if m.WorkloadSelector != nil && !m.WorkloadSelector.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *SecurityGroupStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Service) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *ServiceSpec) Validate(ver string, ignoreStatus bool) bool {
	if m.TLSServerPolicy != nil && !m.TLSServerPolicy.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *ServiceStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Sgpolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSClientPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TLSServerPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapNetwork["TLSServerPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapNetwork["TLSServerPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *Tenant) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	funcMapNetwork = make(map[string]map[string][]func(interface{}) bool)

	funcMapNetwork["TLSServerPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapNetwork["TLSServerPolicySpec"]["all"] = append(funcMapNetwork["TLSServerPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*TLSServerPolicySpec)

		if _, ok := TLSServerPolicySpec_ClientAuthTypes_value[m.ClientAuthentication]; !ok {
			return false
		}
		return true
	})

}
