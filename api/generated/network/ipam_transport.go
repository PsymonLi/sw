// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: ipam.proto
*/
package network

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPDHCPRelayPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDHCPRelayPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req DHCPRelayPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDHCPRelayPolicy encodes GRPC request
func EncodeGrpcReqDHCPRelayPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DHCPRelayPolicy)
	return req, nil
}

// DecodeGrpcReqDHCPRelayPolicy decodes GRPC request
func DecodeGrpcReqDHCPRelayPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DHCPRelayPolicy)
	return req, nil
}

// EncodeGrpcRespDHCPRelayPolicy encodes GRC response
func EncodeGrpcRespDHCPRelayPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDHCPRelayPolicy decodes GRPC response
func DecodeGrpcRespDHCPRelayPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDHCPServer(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDHCPServer(_ context.Context, r *http.Request) (interface{}, error) {
	var req DHCPServer
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDHCPServer encodes GRPC request
func EncodeGrpcReqDHCPServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DHCPServer)
	return req, nil
}

// DecodeGrpcReqDHCPServer decodes GRPC request
func DecodeGrpcReqDHCPServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DHCPServer)
	return req, nil
}

// EncodeGrpcRespDHCPServer encodes GRC response
func EncodeGrpcRespDHCPServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDHCPServer decodes GRPC response
func DecodeGrpcRespDHCPServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIPAMPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPAMPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPAMPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPAMPolicy encodes GRPC request
func EncodeGrpcReqIPAMPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicy)
	return req, nil
}

// DecodeGrpcReqIPAMPolicy decodes GRPC request
func DecodeGrpcReqIPAMPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicy)
	return req, nil
}

// EncodeGrpcRespIPAMPolicy encodes GRC response
func EncodeGrpcRespIPAMPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPAMPolicy decodes GRPC response
func DecodeGrpcRespIPAMPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIPAMPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPAMPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPAMPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPAMPolicySpec encodes GRPC request
func EncodeGrpcReqIPAMPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicySpec)
	return req, nil
}

// DecodeGrpcReqIPAMPolicySpec decodes GRPC request
func DecodeGrpcReqIPAMPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicySpec)
	return req, nil
}

// EncodeGrpcRespIPAMPolicySpec encodes GRC response
func EncodeGrpcRespIPAMPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPAMPolicySpec decodes GRPC response
func DecodeGrpcRespIPAMPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIPAMPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPAMPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPAMPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPAMPolicyStatus encodes GRPC request
func EncodeGrpcReqIPAMPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicyStatus)
	return req, nil
}

// DecodeGrpcReqIPAMPolicyStatus decodes GRPC request
func DecodeGrpcReqIPAMPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPAMPolicyStatus)
	return req, nil
}

// EncodeGrpcRespIPAMPolicyStatus encodes GRC response
func EncodeGrpcRespIPAMPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPAMPolicyStatus decodes GRPC response
func DecodeGrpcRespIPAMPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
