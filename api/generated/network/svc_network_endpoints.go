// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: svc_network.proto
*/
package network

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareNetworkV1Client add middleware to the client
type MiddlewareNetworkV1Client func(ServiceNetworkV1Client) ServiceNetworkV1Client

// EndpointsNetworkV1Client is the endpoints for the client
type EndpointsNetworkV1Client struct {
	Client                        NetworkV1Client
	AutoWatchSvcNetworkV1Endpoint endpoint.Endpoint

	AutoAddIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoAddLbPolicyEndpoint                     endpoint.Endpoint
	AutoAddNetworkEndpoint                      endpoint.Endpoint
	AutoAddNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoAddRouteTableEndpoint                   endpoint.Endpoint
	AutoAddRoutingConfigEndpoint                endpoint.Endpoint
	AutoAddServiceEndpoint                      endpoint.Endpoint
	AutoAddVirtualRouterEndpoint                endpoint.Endpoint
	AutoAddVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoDeleteIPAMPolicyEndpoint                endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint                  endpoint.Endpoint
	AutoDeleteNetworkEndpoint                   endpoint.Endpoint
	AutoDeleteNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoDeleteRouteTableEndpoint                endpoint.Endpoint
	AutoDeleteRoutingConfigEndpoint             endpoint.Endpoint
	AutoDeleteServiceEndpoint                   endpoint.Endpoint
	AutoDeleteVirtualRouterEndpoint             endpoint.Endpoint
	AutoDeleteVirtualRouterPeeringGroupEndpoint endpoint.Endpoint
	AutoGetIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoGetLbPolicyEndpoint                     endpoint.Endpoint
	AutoGetNetworkEndpoint                      endpoint.Endpoint
	AutoGetNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoGetRouteTableEndpoint                   endpoint.Endpoint
	AutoGetRoutingConfigEndpoint                endpoint.Endpoint
	AutoGetServiceEndpoint                      endpoint.Endpoint
	AutoGetVirtualRouterEndpoint                endpoint.Endpoint
	AutoGetVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoLabelIPAMPolicyEndpoint                 endpoint.Endpoint
	AutoLabelLbPolicyEndpoint                   endpoint.Endpoint
	AutoLabelNetworkEndpoint                    endpoint.Endpoint
	AutoLabelNetworkInterfaceEndpoint           endpoint.Endpoint
	AutoLabelRouteTableEndpoint                 endpoint.Endpoint
	AutoLabelRoutingConfigEndpoint              endpoint.Endpoint
	AutoLabelServiceEndpoint                    endpoint.Endpoint
	AutoLabelVirtualRouterEndpoint              endpoint.Endpoint
	AutoLabelVirtualRouterPeeringGroupEndpoint  endpoint.Endpoint
	AutoListIPAMPolicyEndpoint                  endpoint.Endpoint
	AutoListLbPolicyEndpoint                    endpoint.Endpoint
	AutoListNetworkEndpoint                     endpoint.Endpoint
	AutoListNetworkInterfaceEndpoint            endpoint.Endpoint
	AutoListRouteTableEndpoint                  endpoint.Endpoint
	AutoListRoutingConfigEndpoint               endpoint.Endpoint
	AutoListServiceEndpoint                     endpoint.Endpoint
	AutoListVirtualRouterEndpoint               endpoint.Endpoint
	AutoListVirtualRouterPeeringGroupEndpoint   endpoint.Endpoint
	AutoUpdateIPAMPolicyEndpoint                endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint                  endpoint.Endpoint
	AutoUpdateNetworkEndpoint                   endpoint.Endpoint
	AutoUpdateNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoUpdateRouteTableEndpoint                endpoint.Endpoint
	AutoUpdateRoutingConfigEndpoint             endpoint.Endpoint
	AutoUpdateServiceEndpoint                   endpoint.Endpoint
	AutoUpdateVirtualRouterEndpoint             endpoint.Endpoint
	AutoUpdateVirtualRouterPeeringGroupEndpoint endpoint.Endpoint
}

// EndpointsNetworkV1RestClient is the REST client
type EndpointsNetworkV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoAddLbPolicyEndpoint                     endpoint.Endpoint
	AutoAddNetworkEndpoint                      endpoint.Endpoint
	AutoAddNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoAddRouteTableEndpoint                   endpoint.Endpoint
	AutoAddRoutingConfigEndpoint                endpoint.Endpoint
	AutoAddServiceEndpoint                      endpoint.Endpoint
	AutoAddVirtualRouterEndpoint                endpoint.Endpoint
	AutoAddVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoDeleteIPAMPolicyEndpoint                endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint                  endpoint.Endpoint
	AutoDeleteNetworkEndpoint                   endpoint.Endpoint
	AutoDeleteNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoDeleteRouteTableEndpoint                endpoint.Endpoint
	AutoDeleteRoutingConfigEndpoint             endpoint.Endpoint
	AutoDeleteServiceEndpoint                   endpoint.Endpoint
	AutoDeleteVirtualRouterEndpoint             endpoint.Endpoint
	AutoDeleteVirtualRouterPeeringGroupEndpoint endpoint.Endpoint
	AutoGetIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoGetLbPolicyEndpoint                     endpoint.Endpoint
	AutoGetNetworkEndpoint                      endpoint.Endpoint
	AutoGetNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoGetRouteTableEndpoint                   endpoint.Endpoint
	AutoGetRoutingConfigEndpoint                endpoint.Endpoint
	AutoGetServiceEndpoint                      endpoint.Endpoint
	AutoGetVirtualRouterEndpoint                endpoint.Endpoint
	AutoGetVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoLabelIPAMPolicyEndpoint                 endpoint.Endpoint
	AutoLabelLbPolicyEndpoint                   endpoint.Endpoint
	AutoLabelNetworkEndpoint                    endpoint.Endpoint
	AutoLabelNetworkInterfaceEndpoint           endpoint.Endpoint
	AutoLabelRouteTableEndpoint                 endpoint.Endpoint
	AutoLabelRoutingConfigEndpoint              endpoint.Endpoint
	AutoLabelServiceEndpoint                    endpoint.Endpoint
	AutoLabelVirtualRouterEndpoint              endpoint.Endpoint
	AutoLabelVirtualRouterPeeringGroupEndpoint  endpoint.Endpoint
	AutoListIPAMPolicyEndpoint                  endpoint.Endpoint
	AutoListLbPolicyEndpoint                    endpoint.Endpoint
	AutoListNetworkEndpoint                     endpoint.Endpoint
	AutoListNetworkInterfaceEndpoint            endpoint.Endpoint
	AutoListRouteTableEndpoint                  endpoint.Endpoint
	AutoListRoutingConfigEndpoint               endpoint.Endpoint
	AutoListServiceEndpoint                     endpoint.Endpoint
	AutoListVirtualRouterEndpoint               endpoint.Endpoint
	AutoListVirtualRouterPeeringGroupEndpoint   endpoint.Endpoint
	AutoUpdateIPAMPolicyEndpoint                endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint                  endpoint.Endpoint
	AutoUpdateNetworkEndpoint                   endpoint.Endpoint
	AutoUpdateNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoUpdateRouteTableEndpoint                endpoint.Endpoint
	AutoUpdateRoutingConfigEndpoint             endpoint.Endpoint
	AutoUpdateServiceEndpoint                   endpoint.Endpoint
	AutoUpdateVirtualRouterEndpoint             endpoint.Endpoint
	AutoUpdateVirtualRouterPeeringGroupEndpoint endpoint.Endpoint
	AutoWatchIPAMPolicyEndpoint                 endpoint.Endpoint
	AutoWatchLbPolicyEndpoint                   endpoint.Endpoint
	AutoWatchNetworkEndpoint                    endpoint.Endpoint
	AutoWatchNetworkInterfaceEndpoint           endpoint.Endpoint
	AutoWatchRouteTableEndpoint                 endpoint.Endpoint
	AutoWatchRoutingConfigEndpoint              endpoint.Endpoint
	AutoWatchServiceEndpoint                    endpoint.Endpoint
	AutoWatchSvcNetworkV1Endpoint               endpoint.Endpoint
	AutoWatchVirtualRouterEndpoint              endpoint.Endpoint
	AutoWatchVirtualRouterPeeringGroupEndpoint  endpoint.Endpoint
}

// MiddlewareNetworkV1Server adds middle ware to the server
type MiddlewareNetworkV1Server func(ServiceNetworkV1Server) ServiceNetworkV1Server

// EndpointsNetworkV1Server is the server endpoints
type EndpointsNetworkV1Server struct {
	svcWatchHandlerNetworkV1 func(options *api.AggWatchOptions, stream grpc.ServerStream) error

	AutoAddIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoAddLbPolicyEndpoint                     endpoint.Endpoint
	AutoAddNetworkEndpoint                      endpoint.Endpoint
	AutoAddNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoAddRouteTableEndpoint                   endpoint.Endpoint
	AutoAddRoutingConfigEndpoint                endpoint.Endpoint
	AutoAddServiceEndpoint                      endpoint.Endpoint
	AutoAddVirtualRouterEndpoint                endpoint.Endpoint
	AutoAddVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoDeleteIPAMPolicyEndpoint                endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint                  endpoint.Endpoint
	AutoDeleteNetworkEndpoint                   endpoint.Endpoint
	AutoDeleteNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoDeleteRouteTableEndpoint                endpoint.Endpoint
	AutoDeleteRoutingConfigEndpoint             endpoint.Endpoint
	AutoDeleteServiceEndpoint                   endpoint.Endpoint
	AutoDeleteVirtualRouterEndpoint             endpoint.Endpoint
	AutoDeleteVirtualRouterPeeringGroupEndpoint endpoint.Endpoint
	AutoGetIPAMPolicyEndpoint                   endpoint.Endpoint
	AutoGetLbPolicyEndpoint                     endpoint.Endpoint
	AutoGetNetworkEndpoint                      endpoint.Endpoint
	AutoGetNetworkInterfaceEndpoint             endpoint.Endpoint
	AutoGetRouteTableEndpoint                   endpoint.Endpoint
	AutoGetRoutingConfigEndpoint                endpoint.Endpoint
	AutoGetServiceEndpoint                      endpoint.Endpoint
	AutoGetVirtualRouterEndpoint                endpoint.Endpoint
	AutoGetVirtualRouterPeeringGroupEndpoint    endpoint.Endpoint
	AutoLabelIPAMPolicyEndpoint                 endpoint.Endpoint
	AutoLabelLbPolicyEndpoint                   endpoint.Endpoint
	AutoLabelNetworkEndpoint                    endpoint.Endpoint
	AutoLabelNetworkInterfaceEndpoint           endpoint.Endpoint
	AutoLabelRouteTableEndpoint                 endpoint.Endpoint
	AutoLabelRoutingConfigEndpoint              endpoint.Endpoint
	AutoLabelServiceEndpoint                    endpoint.Endpoint
	AutoLabelVirtualRouterEndpoint              endpoint.Endpoint
	AutoLabelVirtualRouterPeeringGroupEndpoint  endpoint.Endpoint
	AutoListIPAMPolicyEndpoint                  endpoint.Endpoint
	AutoListLbPolicyEndpoint                    endpoint.Endpoint
	AutoListNetworkEndpoint                     endpoint.Endpoint
	AutoListNetworkInterfaceEndpoint            endpoint.Endpoint
	AutoListRouteTableEndpoint                  endpoint.Endpoint
	AutoListRoutingConfigEndpoint               endpoint.Endpoint
	AutoListServiceEndpoint                     endpoint.Endpoint
	AutoListVirtualRouterEndpoint               endpoint.Endpoint
	AutoListVirtualRouterPeeringGroupEndpoint   endpoint.Endpoint
	AutoUpdateIPAMPolicyEndpoint                endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint                  endpoint.Endpoint
	AutoUpdateNetworkEndpoint                   endpoint.Endpoint
	AutoUpdateNetworkInterfaceEndpoint          endpoint.Endpoint
	AutoUpdateRouteTableEndpoint                endpoint.Endpoint
	AutoUpdateRoutingConfigEndpoint             endpoint.Endpoint
	AutoUpdateServiceEndpoint                   endpoint.Endpoint
	AutoUpdateVirtualRouterEndpoint             endpoint.Endpoint
	AutoUpdateVirtualRouterPeeringGroupEndpoint endpoint.Endpoint

	watchHandlerNetwork                   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerService                   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerLbPolicy                  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerVirtualRouter             func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerNetworkInterface          func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerIPAMPolicy                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerRoutingConfig             func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerRouteTable                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerVirtualRouterPeeringGroup func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddIPAMPolicy is endpoint for AutoAddIPAMPolicy
func (e EndpointsNetworkV1Client) AutoAddIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	resp, err := e.AutoAddIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicy{}, err
	}
	return resp.(*IPAMPolicy), nil
}

type respNetworkV1AutoAddIPAMPolicy struct {
	V   IPAMPolicy
	Err error
}

// AutoAddLbPolicy is endpoint for AutoAddLbPolicy
func (e EndpointsNetworkV1Client) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoAddLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoAddLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoAddNetwork is endpoint for AutoAddNetwork
func (e EndpointsNetworkV1Client) AutoAddNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoAddNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoAddNetwork struct {
	V   Network
	Err error
}

// AutoAddNetworkInterface is endpoint for AutoAddNetworkInterface
func (e EndpointsNetworkV1Client) AutoAddNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	resp, err := e.AutoAddNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterface{}, err
	}
	return resp.(*NetworkInterface), nil
}

type respNetworkV1AutoAddNetworkInterface struct {
	V   NetworkInterface
	Err error
}

// AutoAddRouteTable is endpoint for AutoAddRouteTable
func (e EndpointsNetworkV1Client) AutoAddRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	resp, err := e.AutoAddRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTable{}, err
	}
	return resp.(*RouteTable), nil
}

type respNetworkV1AutoAddRouteTable struct {
	V   RouteTable
	Err error
}

// AutoAddRoutingConfig is endpoint for AutoAddRoutingConfig
func (e EndpointsNetworkV1Client) AutoAddRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	resp, err := e.AutoAddRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfig{}, err
	}
	return resp.(*RoutingConfig), nil
}

type respNetworkV1AutoAddRoutingConfig struct {
	V   RoutingConfig
	Err error
}

// AutoAddService is endpoint for AutoAddService
func (e EndpointsNetworkV1Client) AutoAddService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoAddServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoAddService struct {
	V   Service
	Err error
}

// AutoAddVirtualRouter is endpoint for AutoAddVirtualRouter
func (e EndpointsNetworkV1Client) AutoAddVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	resp, err := e.AutoAddVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouter{}, err
	}
	return resp.(*VirtualRouter), nil
}

type respNetworkV1AutoAddVirtualRouter struct {
	V   VirtualRouter
	Err error
}

// AutoAddVirtualRouterPeeringGroup is endpoint for AutoAddVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoAddVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoAddVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroup{}, err
	}
	return resp.(*VirtualRouterPeeringGroup), nil
}

type respNetworkV1AutoAddVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroup
	Err error
}

// AutoDeleteIPAMPolicy is endpoint for AutoDeleteIPAMPolicy
func (e EndpointsNetworkV1Client) AutoDeleteIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	resp, err := e.AutoDeleteIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicy{}, err
	}
	return resp.(*IPAMPolicy), nil
}

type respNetworkV1AutoDeleteIPAMPolicy struct {
	V   IPAMPolicy
	Err error
}

// AutoDeleteLbPolicy is endpoint for AutoDeleteLbPolicy
func (e EndpointsNetworkV1Client) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoDeleteLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoDeleteLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoDeleteNetwork is endpoint for AutoDeleteNetwork
func (e EndpointsNetworkV1Client) AutoDeleteNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoDeleteNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoDeleteNetwork struct {
	V   Network
	Err error
}

// AutoDeleteNetworkInterface is endpoint for AutoDeleteNetworkInterface
func (e EndpointsNetworkV1Client) AutoDeleteNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	resp, err := e.AutoDeleteNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterface{}, err
	}
	return resp.(*NetworkInterface), nil
}

type respNetworkV1AutoDeleteNetworkInterface struct {
	V   NetworkInterface
	Err error
}

// AutoDeleteRouteTable is endpoint for AutoDeleteRouteTable
func (e EndpointsNetworkV1Client) AutoDeleteRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	resp, err := e.AutoDeleteRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTable{}, err
	}
	return resp.(*RouteTable), nil
}

type respNetworkV1AutoDeleteRouteTable struct {
	V   RouteTable
	Err error
}

// AutoDeleteRoutingConfig is endpoint for AutoDeleteRoutingConfig
func (e EndpointsNetworkV1Client) AutoDeleteRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	resp, err := e.AutoDeleteRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfig{}, err
	}
	return resp.(*RoutingConfig), nil
}

type respNetworkV1AutoDeleteRoutingConfig struct {
	V   RoutingConfig
	Err error
}

// AutoDeleteService is endpoint for AutoDeleteService
func (e EndpointsNetworkV1Client) AutoDeleteService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoDeleteServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoDeleteService struct {
	V   Service
	Err error
}

// AutoDeleteVirtualRouter is endpoint for AutoDeleteVirtualRouter
func (e EndpointsNetworkV1Client) AutoDeleteVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	resp, err := e.AutoDeleteVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouter{}, err
	}
	return resp.(*VirtualRouter), nil
}

type respNetworkV1AutoDeleteVirtualRouter struct {
	V   VirtualRouter
	Err error
}

// AutoDeleteVirtualRouterPeeringGroup is endpoint for AutoDeleteVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoDeleteVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoDeleteVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroup{}, err
	}
	return resp.(*VirtualRouterPeeringGroup), nil
}

type respNetworkV1AutoDeleteVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroup
	Err error
}

// AutoGetIPAMPolicy is endpoint for AutoGetIPAMPolicy
func (e EndpointsNetworkV1Client) AutoGetIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	resp, err := e.AutoGetIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicy{}, err
	}
	return resp.(*IPAMPolicy), nil
}

type respNetworkV1AutoGetIPAMPolicy struct {
	V   IPAMPolicy
	Err error
}

// AutoGetLbPolicy is endpoint for AutoGetLbPolicy
func (e EndpointsNetworkV1Client) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoGetLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoGetLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoGetNetwork is endpoint for AutoGetNetwork
func (e EndpointsNetworkV1Client) AutoGetNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoGetNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoGetNetwork struct {
	V   Network
	Err error
}

// AutoGetNetworkInterface is endpoint for AutoGetNetworkInterface
func (e EndpointsNetworkV1Client) AutoGetNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	resp, err := e.AutoGetNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterface{}, err
	}
	return resp.(*NetworkInterface), nil
}

type respNetworkV1AutoGetNetworkInterface struct {
	V   NetworkInterface
	Err error
}

// AutoGetRouteTable is endpoint for AutoGetRouteTable
func (e EndpointsNetworkV1Client) AutoGetRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	resp, err := e.AutoGetRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTable{}, err
	}
	return resp.(*RouteTable), nil
}

type respNetworkV1AutoGetRouteTable struct {
	V   RouteTable
	Err error
}

// AutoGetRoutingConfig is endpoint for AutoGetRoutingConfig
func (e EndpointsNetworkV1Client) AutoGetRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	resp, err := e.AutoGetRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfig{}, err
	}
	return resp.(*RoutingConfig), nil
}

type respNetworkV1AutoGetRoutingConfig struct {
	V   RoutingConfig
	Err error
}

// AutoGetService is endpoint for AutoGetService
func (e EndpointsNetworkV1Client) AutoGetService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoGetServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoGetService struct {
	V   Service
	Err error
}

// AutoGetVirtualRouter is endpoint for AutoGetVirtualRouter
func (e EndpointsNetworkV1Client) AutoGetVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	resp, err := e.AutoGetVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouter{}, err
	}
	return resp.(*VirtualRouter), nil
}

type respNetworkV1AutoGetVirtualRouter struct {
	V   VirtualRouter
	Err error
}

// AutoGetVirtualRouterPeeringGroup is endpoint for AutoGetVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoGetVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoGetVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroup{}, err
	}
	return resp.(*VirtualRouterPeeringGroup), nil
}

type respNetworkV1AutoGetVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroup
	Err error
}

// AutoLabelIPAMPolicy is endpoint for AutoLabelIPAMPolicy
func (e EndpointsNetworkV1Client) AutoLabelIPAMPolicy(ctx context.Context, in *api.Label) (*IPAMPolicy, error) {
	resp, err := e.AutoLabelIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicy{}, err
	}
	return resp.(*IPAMPolicy), nil
}

type respNetworkV1AutoLabelIPAMPolicy struct {
	V   IPAMPolicy
	Err error
}

// AutoLabelLbPolicy is endpoint for AutoLabelLbPolicy
func (e EndpointsNetworkV1Client) AutoLabelLbPolicy(ctx context.Context, in *api.Label) (*LbPolicy, error) {
	resp, err := e.AutoLabelLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoLabelLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoLabelNetwork is endpoint for AutoLabelNetwork
func (e EndpointsNetworkV1Client) AutoLabelNetwork(ctx context.Context, in *api.Label) (*Network, error) {
	resp, err := e.AutoLabelNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoLabelNetwork struct {
	V   Network
	Err error
}

// AutoLabelNetworkInterface is endpoint for AutoLabelNetworkInterface
func (e EndpointsNetworkV1Client) AutoLabelNetworkInterface(ctx context.Context, in *api.Label) (*NetworkInterface, error) {
	resp, err := e.AutoLabelNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterface{}, err
	}
	return resp.(*NetworkInterface), nil
}

type respNetworkV1AutoLabelNetworkInterface struct {
	V   NetworkInterface
	Err error
}

// AutoLabelRouteTable is endpoint for AutoLabelRouteTable
func (e EndpointsNetworkV1Client) AutoLabelRouteTable(ctx context.Context, in *api.Label) (*RouteTable, error) {
	resp, err := e.AutoLabelRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTable{}, err
	}
	return resp.(*RouteTable), nil
}

type respNetworkV1AutoLabelRouteTable struct {
	V   RouteTable
	Err error
}

// AutoLabelRoutingConfig is endpoint for AutoLabelRoutingConfig
func (e EndpointsNetworkV1Client) AutoLabelRoutingConfig(ctx context.Context, in *api.Label) (*RoutingConfig, error) {
	resp, err := e.AutoLabelRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfig{}, err
	}
	return resp.(*RoutingConfig), nil
}

type respNetworkV1AutoLabelRoutingConfig struct {
	V   RoutingConfig
	Err error
}

// AutoLabelService is endpoint for AutoLabelService
func (e EndpointsNetworkV1Client) AutoLabelService(ctx context.Context, in *api.Label) (*Service, error) {
	resp, err := e.AutoLabelServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoLabelService struct {
	V   Service
	Err error
}

// AutoLabelVirtualRouter is endpoint for AutoLabelVirtualRouter
func (e EndpointsNetworkV1Client) AutoLabelVirtualRouter(ctx context.Context, in *api.Label) (*VirtualRouter, error) {
	resp, err := e.AutoLabelVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouter{}, err
	}
	return resp.(*VirtualRouter), nil
}

type respNetworkV1AutoLabelVirtualRouter struct {
	V   VirtualRouter
	Err error
}

// AutoLabelVirtualRouterPeeringGroup is endpoint for AutoLabelVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoLabelVirtualRouterPeeringGroup(ctx context.Context, in *api.Label) (*VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoLabelVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroup{}, err
	}
	return resp.(*VirtualRouterPeeringGroup), nil
}

type respNetworkV1AutoLabelVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroup
	Err error
}

// AutoListIPAMPolicy is endpoint for AutoListIPAMPolicy
func (e EndpointsNetworkV1Client) AutoListIPAMPolicy(ctx context.Context, in *api.ListWatchOptions) (*IPAMPolicyList, error) {
	resp, err := e.AutoListIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicyList{}, err
	}
	return resp.(*IPAMPolicyList), nil
}

type respNetworkV1AutoListIPAMPolicy struct {
	V   IPAMPolicyList
	Err error
}

// AutoListLbPolicy is endpoint for AutoListLbPolicy
func (e EndpointsNetworkV1Client) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions) (*LbPolicyList, error) {
	resp, err := e.AutoListLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicyList{}, err
	}
	return resp.(*LbPolicyList), nil
}

type respNetworkV1AutoListLbPolicy struct {
	V   LbPolicyList
	Err error
}

// AutoListNetwork is endpoint for AutoListNetwork
func (e EndpointsNetworkV1Client) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions) (*NetworkList, error) {
	resp, err := e.AutoListNetworkEndpoint(ctx, in)
	if err != nil {
		return &NetworkList{}, err
	}
	return resp.(*NetworkList), nil
}

type respNetworkV1AutoListNetwork struct {
	V   NetworkList
	Err error
}

// AutoListNetworkInterface is endpoint for AutoListNetworkInterface
func (e EndpointsNetworkV1Client) AutoListNetworkInterface(ctx context.Context, in *api.ListWatchOptions) (*NetworkInterfaceList, error) {
	resp, err := e.AutoListNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterfaceList{}, err
	}
	return resp.(*NetworkInterfaceList), nil
}

type respNetworkV1AutoListNetworkInterface struct {
	V   NetworkInterfaceList
	Err error
}

// AutoListRouteTable is endpoint for AutoListRouteTable
func (e EndpointsNetworkV1Client) AutoListRouteTable(ctx context.Context, in *api.ListWatchOptions) (*RouteTableList, error) {
	resp, err := e.AutoListRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTableList{}, err
	}
	return resp.(*RouteTableList), nil
}

type respNetworkV1AutoListRouteTable struct {
	V   RouteTableList
	Err error
}

// AutoListRoutingConfig is endpoint for AutoListRoutingConfig
func (e EndpointsNetworkV1Client) AutoListRoutingConfig(ctx context.Context, in *api.ListWatchOptions) (*RoutingConfigList, error) {
	resp, err := e.AutoListRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfigList{}, err
	}
	return resp.(*RoutingConfigList), nil
}

type respNetworkV1AutoListRoutingConfig struct {
	V   RoutingConfigList
	Err error
}

// AutoListService is endpoint for AutoListService
func (e EndpointsNetworkV1Client) AutoListService(ctx context.Context, in *api.ListWatchOptions) (*ServiceList, error) {
	resp, err := e.AutoListServiceEndpoint(ctx, in)
	if err != nil {
		return &ServiceList{}, err
	}
	return resp.(*ServiceList), nil
}

type respNetworkV1AutoListService struct {
	V   ServiceList
	Err error
}

// AutoListVirtualRouter is endpoint for AutoListVirtualRouter
func (e EndpointsNetworkV1Client) AutoListVirtualRouter(ctx context.Context, in *api.ListWatchOptions) (*VirtualRouterList, error) {
	resp, err := e.AutoListVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterList{}, err
	}
	return resp.(*VirtualRouterList), nil
}

type respNetworkV1AutoListVirtualRouter struct {
	V   VirtualRouterList
	Err error
}

// AutoListVirtualRouterPeeringGroup is endpoint for AutoListVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoListVirtualRouterPeeringGroup(ctx context.Context, in *api.ListWatchOptions) (*VirtualRouterPeeringGroupList, error) {
	resp, err := e.AutoListVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroupList{}, err
	}
	return resp.(*VirtualRouterPeeringGroupList), nil
}

type respNetworkV1AutoListVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroupList
	Err error
}

// AutoUpdateIPAMPolicy is endpoint for AutoUpdateIPAMPolicy
func (e EndpointsNetworkV1Client) AutoUpdateIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	resp, err := e.AutoUpdateIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return &IPAMPolicy{}, err
	}
	return resp.(*IPAMPolicy), nil
}

type respNetworkV1AutoUpdateIPAMPolicy struct {
	V   IPAMPolicy
	Err error
}

// AutoUpdateLbPolicy is endpoint for AutoUpdateLbPolicy
func (e EndpointsNetworkV1Client) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoUpdateLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoUpdateLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoUpdateNetwork is endpoint for AutoUpdateNetwork
func (e EndpointsNetworkV1Client) AutoUpdateNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoUpdateNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoUpdateNetwork struct {
	V   Network
	Err error
}

// AutoUpdateNetworkInterface is endpoint for AutoUpdateNetworkInterface
func (e EndpointsNetworkV1Client) AutoUpdateNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	resp, err := e.AutoUpdateNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return &NetworkInterface{}, err
	}
	return resp.(*NetworkInterface), nil
}

type respNetworkV1AutoUpdateNetworkInterface struct {
	V   NetworkInterface
	Err error
}

// AutoUpdateRouteTable is endpoint for AutoUpdateRouteTable
func (e EndpointsNetworkV1Client) AutoUpdateRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	resp, err := e.AutoUpdateRouteTableEndpoint(ctx, in)
	if err != nil {
		return &RouteTable{}, err
	}
	return resp.(*RouteTable), nil
}

type respNetworkV1AutoUpdateRouteTable struct {
	V   RouteTable
	Err error
}

// AutoUpdateRoutingConfig is endpoint for AutoUpdateRoutingConfig
func (e EndpointsNetworkV1Client) AutoUpdateRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	resp, err := e.AutoUpdateRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return &RoutingConfig{}, err
	}
	return resp.(*RoutingConfig), nil
}

type respNetworkV1AutoUpdateRoutingConfig struct {
	V   RoutingConfig
	Err error
}

// AutoUpdateService is endpoint for AutoUpdateService
func (e EndpointsNetworkV1Client) AutoUpdateService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoUpdateServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoUpdateService struct {
	V   Service
	Err error
}

// AutoUpdateVirtualRouter is endpoint for AutoUpdateVirtualRouter
func (e EndpointsNetworkV1Client) AutoUpdateVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	resp, err := e.AutoUpdateVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouter{}, err
	}
	return resp.(*VirtualRouter), nil
}

type respNetworkV1AutoUpdateVirtualRouter struct {
	V   VirtualRouter
	Err error
}

// AutoUpdateVirtualRouterPeeringGroup is endpoint for AutoUpdateVirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoUpdateVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoUpdateVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return &VirtualRouterPeeringGroup{}, err
	}
	return resp.(*VirtualRouterPeeringGroup), nil
}

type respNetworkV1AutoUpdateVirtualRouterPeeringGroup struct {
	V   VirtualRouterPeeringGroup
	Err error
}

func (e EndpointsNetworkV1Client) AutoWatchSvcNetworkV1(ctx context.Context, in *api.AggWatchOptions) (NetworkV1_AutoWatchSvcNetworkV1Client, error) {
	return e.Client.AutoWatchSvcNetworkV1(ctx, in)
}

// AutoWatchNetwork performs Watch for Network
func (e EndpointsNetworkV1Client) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchNetworkClient, error) {
	return e.Client.AutoWatchNetwork(ctx, in)
}

// AutoWatchService performs Watch for Service
func (e EndpointsNetworkV1Client) AutoWatchService(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchServiceClient, error) {
	return e.Client.AutoWatchService(ctx, in)
}

// AutoWatchLbPolicy performs Watch for LbPolicy
func (e EndpointsNetworkV1Client) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchLbPolicyClient, error) {
	return e.Client.AutoWatchLbPolicy(ctx, in)
}

// AutoWatchVirtualRouter performs Watch for VirtualRouter
func (e EndpointsNetworkV1Client) AutoWatchVirtualRouter(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchVirtualRouterClient, error) {
	return e.Client.AutoWatchVirtualRouter(ctx, in)
}

// AutoWatchNetworkInterface performs Watch for NetworkInterface
func (e EndpointsNetworkV1Client) AutoWatchNetworkInterface(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchNetworkInterfaceClient, error) {
	return e.Client.AutoWatchNetworkInterface(ctx, in)
}

// AutoWatchIPAMPolicy performs Watch for IPAMPolicy
func (e EndpointsNetworkV1Client) AutoWatchIPAMPolicy(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchIPAMPolicyClient, error) {
	return e.Client.AutoWatchIPAMPolicy(ctx, in)
}

// AutoWatchRoutingConfig performs Watch for RoutingConfig
func (e EndpointsNetworkV1Client) AutoWatchRoutingConfig(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchRoutingConfigClient, error) {
	return e.Client.AutoWatchRoutingConfig(ctx, in)
}

// AutoWatchRouteTable performs Watch for RouteTable
func (e EndpointsNetworkV1Client) AutoWatchRouteTable(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchRouteTableClient, error) {
	return e.Client.AutoWatchRouteTable(ctx, in)
}

// AutoWatchVirtualRouterPeeringGroup performs Watch for VirtualRouterPeeringGroup
func (e EndpointsNetworkV1Client) AutoWatchVirtualRouterPeeringGroup(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchVirtualRouterPeeringGroupClient, error) {
	return e.Client.AutoWatchVirtualRouterPeeringGroup(ctx, in)
}

// AutoAddIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddIPAMPolicy(ctx context.Context, in IPAMPolicy) (IPAMPolicy, error) {
	resp, err := e.AutoAddIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicy{}, err
	}
	return *resp.(*IPAMPolicy), nil
}

// MakeNetworkV1AutoAddIPAMPolicyEndpoint creates  AutoAddIPAMPolicy endpoints for the service
func MakeNetworkV1AutoAddIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*IPAMPolicy)
		v, err := s.AutoAddIPAMPolicy(ctx, *req)
		return respNetworkV1AutoAddIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddIPAMPolicy")(f)
}

// AutoAddLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoAddLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoAddLbPolicyEndpoint creates  AutoAddLbPolicy endpoints for the service
func MakeNetworkV1AutoAddLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoAddLbPolicy(ctx, *req)
		return respNetworkV1AutoAddLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddLbPolicy")(f)
}

// AutoAddNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoAddNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoAddNetworkEndpoint creates  AutoAddNetwork endpoints for the service
func MakeNetworkV1AutoAddNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoAddNetwork(ctx, *req)
		return respNetworkV1AutoAddNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddNetwork")(f)
}

// AutoAddNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddNetworkInterface(ctx context.Context, in NetworkInterface) (NetworkInterface, error) {
	resp, err := e.AutoAddNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterface{}, err
	}
	return *resp.(*NetworkInterface), nil
}

// MakeNetworkV1AutoAddNetworkInterfaceEndpoint creates  AutoAddNetworkInterface endpoints for the service
func MakeNetworkV1AutoAddNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkInterface)
		v, err := s.AutoAddNetworkInterface(ctx, *req)
		return respNetworkV1AutoAddNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddNetworkInterface")(f)
}

// AutoAddRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddRouteTable(ctx context.Context, in RouteTable) (RouteTable, error) {
	resp, err := e.AutoAddRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTable{}, err
	}
	return *resp.(*RouteTable), nil
}

// MakeNetworkV1AutoAddRouteTableEndpoint creates  AutoAddRouteTable endpoints for the service
func MakeNetworkV1AutoAddRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RouteTable)
		v, err := s.AutoAddRouteTable(ctx, *req)
		return respNetworkV1AutoAddRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddRouteTable")(f)
}

// AutoAddRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddRoutingConfig(ctx context.Context, in RoutingConfig) (RoutingConfig, error) {
	resp, err := e.AutoAddRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfig{}, err
	}
	return *resp.(*RoutingConfig), nil
}

// MakeNetworkV1AutoAddRoutingConfigEndpoint creates  AutoAddRoutingConfig endpoints for the service
func MakeNetworkV1AutoAddRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoutingConfig)
		v, err := s.AutoAddRoutingConfig(ctx, *req)
		return respNetworkV1AutoAddRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddRoutingConfig")(f)
}

// AutoAddService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoAddServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoAddServiceEndpoint creates  AutoAddService endpoints for the service
func MakeNetworkV1AutoAddServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoAddService(ctx, *req)
		return respNetworkV1AutoAddService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddService")(f)
}

// AutoAddVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddVirtualRouter(ctx context.Context, in VirtualRouter) (VirtualRouter, error) {
	resp, err := e.AutoAddVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouter{}, err
	}
	return *resp.(*VirtualRouter), nil
}

// MakeNetworkV1AutoAddVirtualRouterEndpoint creates  AutoAddVirtualRouter endpoints for the service
func MakeNetworkV1AutoAddVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouter)
		v, err := s.AutoAddVirtualRouter(ctx, *req)
		return respNetworkV1AutoAddVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddVirtualRouter")(f)
}

// AutoAddVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoAddVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroup{}, err
	}
	return *resp.(*VirtualRouterPeeringGroup), nil
}

// MakeNetworkV1AutoAddVirtualRouterPeeringGroupEndpoint creates  AutoAddVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoAddVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouterPeeringGroup)
		v, err := s.AutoAddVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoAddVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddVirtualRouterPeeringGroup")(f)
}

// AutoDeleteIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteIPAMPolicy(ctx context.Context, in IPAMPolicy) (IPAMPolicy, error) {
	resp, err := e.AutoDeleteIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicy{}, err
	}
	return *resp.(*IPAMPolicy), nil
}

// MakeNetworkV1AutoDeleteIPAMPolicyEndpoint creates  AutoDeleteIPAMPolicy endpoints for the service
func MakeNetworkV1AutoDeleteIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*IPAMPolicy)
		v, err := s.AutoDeleteIPAMPolicy(ctx, *req)
		return respNetworkV1AutoDeleteIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteIPAMPolicy")(f)
}

// AutoDeleteLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoDeleteLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoDeleteLbPolicyEndpoint creates  AutoDeleteLbPolicy endpoints for the service
func MakeNetworkV1AutoDeleteLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoDeleteLbPolicy(ctx, *req)
		return respNetworkV1AutoDeleteLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteLbPolicy")(f)
}

// AutoDeleteNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoDeleteNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoDeleteNetworkEndpoint creates  AutoDeleteNetwork endpoints for the service
func MakeNetworkV1AutoDeleteNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoDeleteNetwork(ctx, *req)
		return respNetworkV1AutoDeleteNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteNetwork")(f)
}

// AutoDeleteNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteNetworkInterface(ctx context.Context, in NetworkInterface) (NetworkInterface, error) {
	resp, err := e.AutoDeleteNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterface{}, err
	}
	return *resp.(*NetworkInterface), nil
}

// MakeNetworkV1AutoDeleteNetworkInterfaceEndpoint creates  AutoDeleteNetworkInterface endpoints for the service
func MakeNetworkV1AutoDeleteNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkInterface)
		v, err := s.AutoDeleteNetworkInterface(ctx, *req)
		return respNetworkV1AutoDeleteNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteNetworkInterface")(f)
}

// AutoDeleteRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteRouteTable(ctx context.Context, in RouteTable) (RouteTable, error) {
	resp, err := e.AutoDeleteRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTable{}, err
	}
	return *resp.(*RouteTable), nil
}

// MakeNetworkV1AutoDeleteRouteTableEndpoint creates  AutoDeleteRouteTable endpoints for the service
func MakeNetworkV1AutoDeleteRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RouteTable)
		v, err := s.AutoDeleteRouteTable(ctx, *req)
		return respNetworkV1AutoDeleteRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteRouteTable")(f)
}

// AutoDeleteRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteRoutingConfig(ctx context.Context, in RoutingConfig) (RoutingConfig, error) {
	resp, err := e.AutoDeleteRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfig{}, err
	}
	return *resp.(*RoutingConfig), nil
}

// MakeNetworkV1AutoDeleteRoutingConfigEndpoint creates  AutoDeleteRoutingConfig endpoints for the service
func MakeNetworkV1AutoDeleteRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoutingConfig)
		v, err := s.AutoDeleteRoutingConfig(ctx, *req)
		return respNetworkV1AutoDeleteRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteRoutingConfig")(f)
}

// AutoDeleteService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoDeleteServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoDeleteServiceEndpoint creates  AutoDeleteService endpoints for the service
func MakeNetworkV1AutoDeleteServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoDeleteService(ctx, *req)
		return respNetworkV1AutoDeleteService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteService")(f)
}

// AutoDeleteVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteVirtualRouter(ctx context.Context, in VirtualRouter) (VirtualRouter, error) {
	resp, err := e.AutoDeleteVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouter{}, err
	}
	return *resp.(*VirtualRouter), nil
}

// MakeNetworkV1AutoDeleteVirtualRouterEndpoint creates  AutoDeleteVirtualRouter endpoints for the service
func MakeNetworkV1AutoDeleteVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouter)
		v, err := s.AutoDeleteVirtualRouter(ctx, *req)
		return respNetworkV1AutoDeleteVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteVirtualRouter")(f)
}

// AutoDeleteVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoDeleteVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroup{}, err
	}
	return *resp.(*VirtualRouterPeeringGroup), nil
}

// MakeNetworkV1AutoDeleteVirtualRouterPeeringGroupEndpoint creates  AutoDeleteVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoDeleteVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouterPeeringGroup)
		v, err := s.AutoDeleteVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoDeleteVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteVirtualRouterPeeringGroup")(f)
}

// AutoGetIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetIPAMPolicy(ctx context.Context, in IPAMPolicy) (IPAMPolicy, error) {
	resp, err := e.AutoGetIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicy{}, err
	}
	return *resp.(*IPAMPolicy), nil
}

// MakeNetworkV1AutoGetIPAMPolicyEndpoint creates  AutoGetIPAMPolicy endpoints for the service
func MakeNetworkV1AutoGetIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*IPAMPolicy)
		v, err := s.AutoGetIPAMPolicy(ctx, *req)
		return respNetworkV1AutoGetIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetIPAMPolicy")(f)
}

// AutoGetLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoGetLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoGetLbPolicyEndpoint creates  AutoGetLbPolicy endpoints for the service
func MakeNetworkV1AutoGetLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoGetLbPolicy(ctx, *req)
		return respNetworkV1AutoGetLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetLbPolicy")(f)
}

// AutoGetNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoGetNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoGetNetworkEndpoint creates  AutoGetNetwork endpoints for the service
func MakeNetworkV1AutoGetNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoGetNetwork(ctx, *req)
		return respNetworkV1AutoGetNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetNetwork")(f)
}

// AutoGetNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetNetworkInterface(ctx context.Context, in NetworkInterface) (NetworkInterface, error) {
	resp, err := e.AutoGetNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterface{}, err
	}
	return *resp.(*NetworkInterface), nil
}

// MakeNetworkV1AutoGetNetworkInterfaceEndpoint creates  AutoGetNetworkInterface endpoints for the service
func MakeNetworkV1AutoGetNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkInterface)
		v, err := s.AutoGetNetworkInterface(ctx, *req)
		return respNetworkV1AutoGetNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetNetworkInterface")(f)
}

// AutoGetRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetRouteTable(ctx context.Context, in RouteTable) (RouteTable, error) {
	resp, err := e.AutoGetRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTable{}, err
	}
	return *resp.(*RouteTable), nil
}

// MakeNetworkV1AutoGetRouteTableEndpoint creates  AutoGetRouteTable endpoints for the service
func MakeNetworkV1AutoGetRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RouteTable)
		v, err := s.AutoGetRouteTable(ctx, *req)
		return respNetworkV1AutoGetRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetRouteTable")(f)
}

// AutoGetRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetRoutingConfig(ctx context.Context, in RoutingConfig) (RoutingConfig, error) {
	resp, err := e.AutoGetRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfig{}, err
	}
	return *resp.(*RoutingConfig), nil
}

// MakeNetworkV1AutoGetRoutingConfigEndpoint creates  AutoGetRoutingConfig endpoints for the service
func MakeNetworkV1AutoGetRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoutingConfig)
		v, err := s.AutoGetRoutingConfig(ctx, *req)
		return respNetworkV1AutoGetRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetRoutingConfig")(f)
}

// AutoGetService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoGetServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoGetServiceEndpoint creates  AutoGetService endpoints for the service
func MakeNetworkV1AutoGetServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoGetService(ctx, *req)
		return respNetworkV1AutoGetService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetService")(f)
}

// AutoGetVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetVirtualRouter(ctx context.Context, in VirtualRouter) (VirtualRouter, error) {
	resp, err := e.AutoGetVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouter{}, err
	}
	return *resp.(*VirtualRouter), nil
}

// MakeNetworkV1AutoGetVirtualRouterEndpoint creates  AutoGetVirtualRouter endpoints for the service
func MakeNetworkV1AutoGetVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouter)
		v, err := s.AutoGetVirtualRouter(ctx, *req)
		return respNetworkV1AutoGetVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetVirtualRouter")(f)
}

// AutoGetVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoGetVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroup{}, err
	}
	return *resp.(*VirtualRouterPeeringGroup), nil
}

// MakeNetworkV1AutoGetVirtualRouterPeeringGroupEndpoint creates  AutoGetVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoGetVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouterPeeringGroup)
		v, err := s.AutoGetVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoGetVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetVirtualRouterPeeringGroup")(f)
}

// AutoLabelIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelIPAMPolicy(ctx context.Context, in api.Label) (IPAMPolicy, error) {
	resp, err := e.AutoLabelIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicy{}, err
	}
	return *resp.(*IPAMPolicy), nil
}

// MakeNetworkV1AutoLabelIPAMPolicyEndpoint creates  AutoLabelIPAMPolicy endpoints for the service
func MakeNetworkV1AutoLabelIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelIPAMPolicy(ctx, *req)
		return respNetworkV1AutoLabelIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelIPAMPolicy")(f)
}

// AutoLabelLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelLbPolicy(ctx context.Context, in api.Label) (LbPolicy, error) {
	resp, err := e.AutoLabelLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoLabelLbPolicyEndpoint creates  AutoLabelLbPolicy endpoints for the service
func MakeNetworkV1AutoLabelLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelLbPolicy(ctx, *req)
		return respNetworkV1AutoLabelLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelLbPolicy")(f)
}

// AutoLabelNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelNetwork(ctx context.Context, in api.Label) (Network, error) {
	resp, err := e.AutoLabelNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoLabelNetworkEndpoint creates  AutoLabelNetwork endpoints for the service
func MakeNetworkV1AutoLabelNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelNetwork(ctx, *req)
		return respNetworkV1AutoLabelNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelNetwork")(f)
}

// AutoLabelNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelNetworkInterface(ctx context.Context, in api.Label) (NetworkInterface, error) {
	resp, err := e.AutoLabelNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterface{}, err
	}
	return *resp.(*NetworkInterface), nil
}

// MakeNetworkV1AutoLabelNetworkInterfaceEndpoint creates  AutoLabelNetworkInterface endpoints for the service
func MakeNetworkV1AutoLabelNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelNetworkInterface(ctx, *req)
		return respNetworkV1AutoLabelNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelNetworkInterface")(f)
}

// AutoLabelRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelRouteTable(ctx context.Context, in api.Label) (RouteTable, error) {
	resp, err := e.AutoLabelRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTable{}, err
	}
	return *resp.(*RouteTable), nil
}

// MakeNetworkV1AutoLabelRouteTableEndpoint creates  AutoLabelRouteTable endpoints for the service
func MakeNetworkV1AutoLabelRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelRouteTable(ctx, *req)
		return respNetworkV1AutoLabelRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelRouteTable")(f)
}

// AutoLabelRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelRoutingConfig(ctx context.Context, in api.Label) (RoutingConfig, error) {
	resp, err := e.AutoLabelRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfig{}, err
	}
	return *resp.(*RoutingConfig), nil
}

// MakeNetworkV1AutoLabelRoutingConfigEndpoint creates  AutoLabelRoutingConfig endpoints for the service
func MakeNetworkV1AutoLabelRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelRoutingConfig(ctx, *req)
		return respNetworkV1AutoLabelRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelRoutingConfig")(f)
}

// AutoLabelService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelService(ctx context.Context, in api.Label) (Service, error) {
	resp, err := e.AutoLabelServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoLabelServiceEndpoint creates  AutoLabelService endpoints for the service
func MakeNetworkV1AutoLabelServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelService(ctx, *req)
		return respNetworkV1AutoLabelService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelService")(f)
}

// AutoLabelVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelVirtualRouter(ctx context.Context, in api.Label) (VirtualRouter, error) {
	resp, err := e.AutoLabelVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouter{}, err
	}
	return *resp.(*VirtualRouter), nil
}

// MakeNetworkV1AutoLabelVirtualRouterEndpoint creates  AutoLabelVirtualRouter endpoints for the service
func MakeNetworkV1AutoLabelVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelVirtualRouter(ctx, *req)
		return respNetworkV1AutoLabelVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelVirtualRouter")(f)
}

// AutoLabelVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoLabelVirtualRouterPeeringGroup(ctx context.Context, in api.Label) (VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoLabelVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroup{}, err
	}
	return *resp.(*VirtualRouterPeeringGroup), nil
}

// MakeNetworkV1AutoLabelVirtualRouterPeeringGroupEndpoint creates  AutoLabelVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoLabelVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoLabelVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoLabelVirtualRouterPeeringGroup")(f)
}

// AutoListIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListIPAMPolicy(ctx context.Context, in api.ListWatchOptions) (IPAMPolicyList, error) {
	resp, err := e.AutoListIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicyList{}, err
	}
	return *resp.(*IPAMPolicyList), nil
}

// MakeNetworkV1AutoListIPAMPolicyEndpoint creates  AutoListIPAMPolicy endpoints for the service
func MakeNetworkV1AutoListIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListIPAMPolicy(ctx, *req)
		return respNetworkV1AutoListIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListIPAMPolicy")(f)
}

// AutoListLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListLbPolicy(ctx context.Context, in api.ListWatchOptions) (LbPolicyList, error) {
	resp, err := e.AutoListLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicyList{}, err
	}
	return *resp.(*LbPolicyList), nil
}

// MakeNetworkV1AutoListLbPolicyEndpoint creates  AutoListLbPolicy endpoints for the service
func MakeNetworkV1AutoListLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListLbPolicy(ctx, *req)
		return respNetworkV1AutoListLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListLbPolicy")(f)
}

// AutoListNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListNetwork(ctx context.Context, in api.ListWatchOptions) (NetworkList, error) {
	resp, err := e.AutoListNetworkEndpoint(ctx, in)
	if err != nil {
		return NetworkList{}, err
	}
	return *resp.(*NetworkList), nil
}

// MakeNetworkV1AutoListNetworkEndpoint creates  AutoListNetwork endpoints for the service
func MakeNetworkV1AutoListNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNetwork(ctx, *req)
		return respNetworkV1AutoListNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListNetwork")(f)
}

// AutoListNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListNetworkInterface(ctx context.Context, in api.ListWatchOptions) (NetworkInterfaceList, error) {
	resp, err := e.AutoListNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterfaceList{}, err
	}
	return *resp.(*NetworkInterfaceList), nil
}

// MakeNetworkV1AutoListNetworkInterfaceEndpoint creates  AutoListNetworkInterface endpoints for the service
func MakeNetworkV1AutoListNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNetworkInterface(ctx, *req)
		return respNetworkV1AutoListNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListNetworkInterface")(f)
}

// AutoListRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListRouteTable(ctx context.Context, in api.ListWatchOptions) (RouteTableList, error) {
	resp, err := e.AutoListRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTableList{}, err
	}
	return *resp.(*RouteTableList), nil
}

// MakeNetworkV1AutoListRouteTableEndpoint creates  AutoListRouteTable endpoints for the service
func MakeNetworkV1AutoListRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRouteTable(ctx, *req)
		return respNetworkV1AutoListRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListRouteTable")(f)
}

// AutoListRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListRoutingConfig(ctx context.Context, in api.ListWatchOptions) (RoutingConfigList, error) {
	resp, err := e.AutoListRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfigList{}, err
	}
	return *resp.(*RoutingConfigList), nil
}

// MakeNetworkV1AutoListRoutingConfigEndpoint creates  AutoListRoutingConfig endpoints for the service
func MakeNetworkV1AutoListRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRoutingConfig(ctx, *req)
		return respNetworkV1AutoListRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListRoutingConfig")(f)
}

// AutoListService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListService(ctx context.Context, in api.ListWatchOptions) (ServiceList, error) {
	resp, err := e.AutoListServiceEndpoint(ctx, in)
	if err != nil {
		return ServiceList{}, err
	}
	return *resp.(*ServiceList), nil
}

// MakeNetworkV1AutoListServiceEndpoint creates  AutoListService endpoints for the service
func MakeNetworkV1AutoListServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListService(ctx, *req)
		return respNetworkV1AutoListService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListService")(f)
}

// AutoListVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListVirtualRouter(ctx context.Context, in api.ListWatchOptions) (VirtualRouterList, error) {
	resp, err := e.AutoListVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterList{}, err
	}
	return *resp.(*VirtualRouterList), nil
}

// MakeNetworkV1AutoListVirtualRouterEndpoint creates  AutoListVirtualRouter endpoints for the service
func MakeNetworkV1AutoListVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListVirtualRouter(ctx, *req)
		return respNetworkV1AutoListVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListVirtualRouter")(f)
}

// AutoListVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListVirtualRouterPeeringGroup(ctx context.Context, in api.ListWatchOptions) (VirtualRouterPeeringGroupList, error) {
	resp, err := e.AutoListVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroupList{}, err
	}
	return *resp.(*VirtualRouterPeeringGroupList), nil
}

// MakeNetworkV1AutoListVirtualRouterPeeringGroupEndpoint creates  AutoListVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoListVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoListVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListVirtualRouterPeeringGroup")(f)
}

// AutoUpdateIPAMPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateIPAMPolicy(ctx context.Context, in IPAMPolicy) (IPAMPolicy, error) {
	resp, err := e.AutoUpdateIPAMPolicyEndpoint(ctx, in)
	if err != nil {
		return IPAMPolicy{}, err
	}
	return *resp.(*IPAMPolicy), nil
}

// MakeNetworkV1AutoUpdateIPAMPolicyEndpoint creates  AutoUpdateIPAMPolicy endpoints for the service
func MakeNetworkV1AutoUpdateIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*IPAMPolicy)
		v, err := s.AutoUpdateIPAMPolicy(ctx, *req)
		return respNetworkV1AutoUpdateIPAMPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateIPAMPolicy")(f)
}

// AutoUpdateLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoUpdateLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoUpdateLbPolicyEndpoint creates  AutoUpdateLbPolicy endpoints for the service
func MakeNetworkV1AutoUpdateLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoUpdateLbPolicy(ctx, *req)
		return respNetworkV1AutoUpdateLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateLbPolicy")(f)
}

// AutoUpdateNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoUpdateNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoUpdateNetworkEndpoint creates  AutoUpdateNetwork endpoints for the service
func MakeNetworkV1AutoUpdateNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoUpdateNetwork(ctx, *req)
		return respNetworkV1AutoUpdateNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateNetwork")(f)
}

// AutoUpdateNetworkInterface implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateNetworkInterface(ctx context.Context, in NetworkInterface) (NetworkInterface, error) {
	resp, err := e.AutoUpdateNetworkInterfaceEndpoint(ctx, in)
	if err != nil {
		return NetworkInterface{}, err
	}
	return *resp.(*NetworkInterface), nil
}

// MakeNetworkV1AutoUpdateNetworkInterfaceEndpoint creates  AutoUpdateNetworkInterface endpoints for the service
func MakeNetworkV1AutoUpdateNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkInterface)
		v, err := s.AutoUpdateNetworkInterface(ctx, *req)
		return respNetworkV1AutoUpdateNetworkInterface{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateNetworkInterface")(f)
}

// AutoUpdateRouteTable implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateRouteTable(ctx context.Context, in RouteTable) (RouteTable, error) {
	resp, err := e.AutoUpdateRouteTableEndpoint(ctx, in)
	if err != nil {
		return RouteTable{}, err
	}
	return *resp.(*RouteTable), nil
}

// MakeNetworkV1AutoUpdateRouteTableEndpoint creates  AutoUpdateRouteTable endpoints for the service
func MakeNetworkV1AutoUpdateRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RouteTable)
		v, err := s.AutoUpdateRouteTable(ctx, *req)
		return respNetworkV1AutoUpdateRouteTable{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateRouteTable")(f)
}

// AutoUpdateRoutingConfig implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateRoutingConfig(ctx context.Context, in RoutingConfig) (RoutingConfig, error) {
	resp, err := e.AutoUpdateRoutingConfigEndpoint(ctx, in)
	if err != nil {
		return RoutingConfig{}, err
	}
	return *resp.(*RoutingConfig), nil
}

// MakeNetworkV1AutoUpdateRoutingConfigEndpoint creates  AutoUpdateRoutingConfig endpoints for the service
func MakeNetworkV1AutoUpdateRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RoutingConfig)
		v, err := s.AutoUpdateRoutingConfig(ctx, *req)
		return respNetworkV1AutoUpdateRoutingConfig{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateRoutingConfig")(f)
}

// AutoUpdateService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoUpdateServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoUpdateServiceEndpoint creates  AutoUpdateService endpoints for the service
func MakeNetworkV1AutoUpdateServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoUpdateService(ctx, *req)
		return respNetworkV1AutoUpdateService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateService")(f)
}

// AutoUpdateVirtualRouter implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateVirtualRouter(ctx context.Context, in VirtualRouter) (VirtualRouter, error) {
	resp, err := e.AutoUpdateVirtualRouterEndpoint(ctx, in)
	if err != nil {
		return VirtualRouter{}, err
	}
	return *resp.(*VirtualRouter), nil
}

// MakeNetworkV1AutoUpdateVirtualRouterEndpoint creates  AutoUpdateVirtualRouter endpoints for the service
func MakeNetworkV1AutoUpdateVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouter)
		v, err := s.AutoUpdateVirtualRouter(ctx, *req)
		return respNetworkV1AutoUpdateVirtualRouter{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateVirtualRouter")(f)
}

// AutoUpdateVirtualRouterPeeringGroup implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (VirtualRouterPeeringGroup, error) {
	resp, err := e.AutoUpdateVirtualRouterPeeringGroupEndpoint(ctx, in)
	if err != nil {
		return VirtualRouterPeeringGroup{}, err
	}
	return *resp.(*VirtualRouterPeeringGroup), nil
}

// MakeNetworkV1AutoUpdateVirtualRouterPeeringGroupEndpoint creates  AutoUpdateVirtualRouterPeeringGroup endpoints for the service
func MakeNetworkV1AutoUpdateVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*VirtualRouterPeeringGroup)
		v, err := s.AutoUpdateVirtualRouterPeeringGroup(ctx, *req)
		return respNetworkV1AutoUpdateVirtualRouterPeeringGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateVirtualRouterPeeringGroup")(f)
}

func (e EndpointsNetworkV1Server) AutoWatchSvcNetworkV1(in *api.AggWatchOptions, stream NetworkV1_AutoWatchSvcNetworkV1Server) error {
	return e.svcWatchHandlerNetworkV1(in, stream)
}

// MakeAutoWatchSvcNetworkV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcNetworkV1Endpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchSvcNetworkV1Server)
		return s.AutoWatchSvcNetworkV1(options, wstream)
	}
}

// AutoWatchNetwork is the watch handler for Network on the server side.
func (e EndpointsNetworkV1Server) AutoWatchNetwork(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkServer) error {
	return e.watchHandlerNetwork(in, stream)
}

// MakeAutoWatchNetworkEndpoint creates the Watch endpoint
func MakeAutoWatchNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchNetworkServer)
		return s.AutoWatchNetwork(options, wstream)
	}
}

// AutoWatchService is the watch handler for Service on the server side.
func (e EndpointsNetworkV1Server) AutoWatchService(in *api.ListWatchOptions, stream NetworkV1_AutoWatchServiceServer) error {
	return e.watchHandlerService(in, stream)
}

// MakeAutoWatchServiceEndpoint creates the Watch endpoint
func MakeAutoWatchServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchServiceServer)
		return s.AutoWatchService(options, wstream)
	}
}

// AutoWatchLbPolicy is the watch handler for LbPolicy on the server side.
func (e EndpointsNetworkV1Server) AutoWatchLbPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchLbPolicyServer) error {
	return e.watchHandlerLbPolicy(in, stream)
}

// MakeAutoWatchLbPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchLbPolicyServer)
		return s.AutoWatchLbPolicy(options, wstream)
	}
}

// AutoWatchVirtualRouter is the watch handler for VirtualRouter on the server side.
func (e EndpointsNetworkV1Server) AutoWatchVirtualRouter(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterServer) error {
	return e.watchHandlerVirtualRouter(in, stream)
}

// MakeAutoWatchVirtualRouterEndpoint creates the Watch endpoint
func MakeAutoWatchVirtualRouterEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchVirtualRouterServer)
		return s.AutoWatchVirtualRouter(options, wstream)
	}
}

// AutoWatchNetworkInterface is the watch handler for NetworkInterface on the server side.
func (e EndpointsNetworkV1Server) AutoWatchNetworkInterface(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkInterfaceServer) error {
	return e.watchHandlerNetworkInterface(in, stream)
}

// MakeAutoWatchNetworkInterfaceEndpoint creates the Watch endpoint
func MakeAutoWatchNetworkInterfaceEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchNetworkInterfaceServer)
		return s.AutoWatchNetworkInterface(options, wstream)
	}
}

// AutoWatchIPAMPolicy is the watch handler for IPAMPolicy on the server side.
func (e EndpointsNetworkV1Server) AutoWatchIPAMPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchIPAMPolicyServer) error {
	return e.watchHandlerIPAMPolicy(in, stream)
}

// MakeAutoWatchIPAMPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchIPAMPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchIPAMPolicyServer)
		return s.AutoWatchIPAMPolicy(options, wstream)
	}
}

// AutoWatchRoutingConfig is the watch handler for RoutingConfig on the server side.
func (e EndpointsNetworkV1Server) AutoWatchRoutingConfig(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRoutingConfigServer) error {
	return e.watchHandlerRoutingConfig(in, stream)
}

// MakeAutoWatchRoutingConfigEndpoint creates the Watch endpoint
func MakeAutoWatchRoutingConfigEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchRoutingConfigServer)
		return s.AutoWatchRoutingConfig(options, wstream)
	}
}

// AutoWatchRouteTable is the watch handler for RouteTable on the server side.
func (e EndpointsNetworkV1Server) AutoWatchRouteTable(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRouteTableServer) error {
	return e.watchHandlerRouteTable(in, stream)
}

// MakeAutoWatchRouteTableEndpoint creates the Watch endpoint
func MakeAutoWatchRouteTableEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchRouteTableServer)
		return s.AutoWatchRouteTable(options, wstream)
	}
}

// AutoWatchVirtualRouterPeeringGroup is the watch handler for VirtualRouterPeeringGroup on the server side.
func (e EndpointsNetworkV1Server) AutoWatchVirtualRouterPeeringGroup(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterPeeringGroupServer) error {
	return e.watchHandlerVirtualRouterPeeringGroup(in, stream)
}

// MakeAutoWatchVirtualRouterPeeringGroupEndpoint creates the Watch endpoint
func MakeAutoWatchVirtualRouterPeeringGroupEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchVirtualRouterPeeringGroupServer)
		return s.AutoWatchVirtualRouterPeeringGroup(options, wstream)
	}
}

// MakeNetworkV1ServerEndpoints creates server endpoints
func MakeNetworkV1ServerEndpoints(s ServiceNetworkV1Server, logger log.Logger) EndpointsNetworkV1Server {
	return EndpointsNetworkV1Server{
		svcWatchHandlerNetworkV1: MakeAutoWatchSvcNetworkV1Endpoint(s, logger),

		AutoAddIPAMPolicyEndpoint:                   MakeNetworkV1AutoAddIPAMPolicyEndpoint(s, logger),
		AutoAddLbPolicyEndpoint:                     MakeNetworkV1AutoAddLbPolicyEndpoint(s, logger),
		AutoAddNetworkEndpoint:                      MakeNetworkV1AutoAddNetworkEndpoint(s, logger),
		AutoAddNetworkInterfaceEndpoint:             MakeNetworkV1AutoAddNetworkInterfaceEndpoint(s, logger),
		AutoAddRouteTableEndpoint:                   MakeNetworkV1AutoAddRouteTableEndpoint(s, logger),
		AutoAddRoutingConfigEndpoint:                MakeNetworkV1AutoAddRoutingConfigEndpoint(s, logger),
		AutoAddServiceEndpoint:                      MakeNetworkV1AutoAddServiceEndpoint(s, logger),
		AutoAddVirtualRouterEndpoint:                MakeNetworkV1AutoAddVirtualRouterEndpoint(s, logger),
		AutoAddVirtualRouterPeeringGroupEndpoint:    MakeNetworkV1AutoAddVirtualRouterPeeringGroupEndpoint(s, logger),
		AutoDeleteIPAMPolicyEndpoint:                MakeNetworkV1AutoDeleteIPAMPolicyEndpoint(s, logger),
		AutoDeleteLbPolicyEndpoint:                  MakeNetworkV1AutoDeleteLbPolicyEndpoint(s, logger),
		AutoDeleteNetworkEndpoint:                   MakeNetworkV1AutoDeleteNetworkEndpoint(s, logger),
		AutoDeleteNetworkInterfaceEndpoint:          MakeNetworkV1AutoDeleteNetworkInterfaceEndpoint(s, logger),
		AutoDeleteRouteTableEndpoint:                MakeNetworkV1AutoDeleteRouteTableEndpoint(s, logger),
		AutoDeleteRoutingConfigEndpoint:             MakeNetworkV1AutoDeleteRoutingConfigEndpoint(s, logger),
		AutoDeleteServiceEndpoint:                   MakeNetworkV1AutoDeleteServiceEndpoint(s, logger),
		AutoDeleteVirtualRouterEndpoint:             MakeNetworkV1AutoDeleteVirtualRouterEndpoint(s, logger),
		AutoDeleteVirtualRouterPeeringGroupEndpoint: MakeNetworkV1AutoDeleteVirtualRouterPeeringGroupEndpoint(s, logger),
		AutoGetIPAMPolicyEndpoint:                   MakeNetworkV1AutoGetIPAMPolicyEndpoint(s, logger),
		AutoGetLbPolicyEndpoint:                     MakeNetworkV1AutoGetLbPolicyEndpoint(s, logger),
		AutoGetNetworkEndpoint:                      MakeNetworkV1AutoGetNetworkEndpoint(s, logger),
		AutoGetNetworkInterfaceEndpoint:             MakeNetworkV1AutoGetNetworkInterfaceEndpoint(s, logger),
		AutoGetRouteTableEndpoint:                   MakeNetworkV1AutoGetRouteTableEndpoint(s, logger),
		AutoGetRoutingConfigEndpoint:                MakeNetworkV1AutoGetRoutingConfigEndpoint(s, logger),
		AutoGetServiceEndpoint:                      MakeNetworkV1AutoGetServiceEndpoint(s, logger),
		AutoGetVirtualRouterEndpoint:                MakeNetworkV1AutoGetVirtualRouterEndpoint(s, logger),
		AutoGetVirtualRouterPeeringGroupEndpoint:    MakeNetworkV1AutoGetVirtualRouterPeeringGroupEndpoint(s, logger),
		AutoLabelIPAMPolicyEndpoint:                 MakeNetworkV1AutoLabelIPAMPolicyEndpoint(s, logger),
		AutoLabelLbPolicyEndpoint:                   MakeNetworkV1AutoLabelLbPolicyEndpoint(s, logger),
		AutoLabelNetworkEndpoint:                    MakeNetworkV1AutoLabelNetworkEndpoint(s, logger),
		AutoLabelNetworkInterfaceEndpoint:           MakeNetworkV1AutoLabelNetworkInterfaceEndpoint(s, logger),
		AutoLabelRouteTableEndpoint:                 MakeNetworkV1AutoLabelRouteTableEndpoint(s, logger),
		AutoLabelRoutingConfigEndpoint:              MakeNetworkV1AutoLabelRoutingConfigEndpoint(s, logger),
		AutoLabelServiceEndpoint:                    MakeNetworkV1AutoLabelServiceEndpoint(s, logger),
		AutoLabelVirtualRouterEndpoint:              MakeNetworkV1AutoLabelVirtualRouterEndpoint(s, logger),
		AutoLabelVirtualRouterPeeringGroupEndpoint:  MakeNetworkV1AutoLabelVirtualRouterPeeringGroupEndpoint(s, logger),
		AutoListIPAMPolicyEndpoint:                  MakeNetworkV1AutoListIPAMPolicyEndpoint(s, logger),
		AutoListLbPolicyEndpoint:                    MakeNetworkV1AutoListLbPolicyEndpoint(s, logger),
		AutoListNetworkEndpoint:                     MakeNetworkV1AutoListNetworkEndpoint(s, logger),
		AutoListNetworkInterfaceEndpoint:            MakeNetworkV1AutoListNetworkInterfaceEndpoint(s, logger),
		AutoListRouteTableEndpoint:                  MakeNetworkV1AutoListRouteTableEndpoint(s, logger),
		AutoListRoutingConfigEndpoint:               MakeNetworkV1AutoListRoutingConfigEndpoint(s, logger),
		AutoListServiceEndpoint:                     MakeNetworkV1AutoListServiceEndpoint(s, logger),
		AutoListVirtualRouterEndpoint:               MakeNetworkV1AutoListVirtualRouterEndpoint(s, logger),
		AutoListVirtualRouterPeeringGroupEndpoint:   MakeNetworkV1AutoListVirtualRouterPeeringGroupEndpoint(s, logger),
		AutoUpdateIPAMPolicyEndpoint:                MakeNetworkV1AutoUpdateIPAMPolicyEndpoint(s, logger),
		AutoUpdateLbPolicyEndpoint:                  MakeNetworkV1AutoUpdateLbPolicyEndpoint(s, logger),
		AutoUpdateNetworkEndpoint:                   MakeNetworkV1AutoUpdateNetworkEndpoint(s, logger),
		AutoUpdateNetworkInterfaceEndpoint:          MakeNetworkV1AutoUpdateNetworkInterfaceEndpoint(s, logger),
		AutoUpdateRouteTableEndpoint:                MakeNetworkV1AutoUpdateRouteTableEndpoint(s, logger),
		AutoUpdateRoutingConfigEndpoint:             MakeNetworkV1AutoUpdateRoutingConfigEndpoint(s, logger),
		AutoUpdateServiceEndpoint:                   MakeNetworkV1AutoUpdateServiceEndpoint(s, logger),
		AutoUpdateVirtualRouterEndpoint:             MakeNetworkV1AutoUpdateVirtualRouterEndpoint(s, logger),
		AutoUpdateVirtualRouterPeeringGroupEndpoint: MakeNetworkV1AutoUpdateVirtualRouterPeeringGroupEndpoint(s, logger),

		watchHandlerNetwork:                   MakeAutoWatchNetworkEndpoint(s, logger),
		watchHandlerService:                   MakeAutoWatchServiceEndpoint(s, logger),
		watchHandlerLbPolicy:                  MakeAutoWatchLbPolicyEndpoint(s, logger),
		watchHandlerVirtualRouter:             MakeAutoWatchVirtualRouterEndpoint(s, logger),
		watchHandlerNetworkInterface:          MakeAutoWatchNetworkInterfaceEndpoint(s, logger),
		watchHandlerIPAMPolicy:                MakeAutoWatchIPAMPolicyEndpoint(s, logger),
		watchHandlerRoutingConfig:             MakeAutoWatchRoutingConfigEndpoint(s, logger),
		watchHandlerRouteTable:                MakeAutoWatchRouteTableEndpoint(s, logger),
		watchHandlerVirtualRouterPeeringGroup: MakeAutoWatchVirtualRouterPeeringGroupEndpoint(s, logger),
	}
}

// LoggingNetworkV1MiddlewareClient adds middleware for the client
func LoggingNetworkV1MiddlewareClient(logger log.Logger) MiddlewareNetworkV1Client {
	return func(next ServiceNetworkV1Client) ServiceNetworkV1Client {
		return loggingNetworkV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingNetworkV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceNetworkV1Client
}

// LoggingNetworkV1MiddlewareServer adds middleware for the client
func LoggingNetworkV1MiddlewareServer(logger log.Logger) MiddlewareNetworkV1Server {
	return func(next ServiceNetworkV1Server) ServiceNetworkV1Server {
		return loggingNetworkV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingNetworkV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceNetworkV1Server
}

func (m loggingNetworkV1MiddlewareClient) AutoAddIPAMPolicy(ctx context.Context, in *IPAMPolicy) (resp *IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddNetworkInterface(ctx context.Context, in *NetworkInterface) (resp *NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddRouteTable(ctx context.Context, in *RouteTable) (resp *RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddRoutingConfig(ctx context.Context, in *RoutingConfig) (resp *RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddVirtualRouter(ctx context.Context, in *VirtualRouter) (resp *VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (resp *VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteIPAMPolicy(ctx context.Context, in *IPAMPolicy) (resp *IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteNetworkInterface(ctx context.Context, in *NetworkInterface) (resp *NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteRouteTable(ctx context.Context, in *RouteTable) (resp *RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteRoutingConfig(ctx context.Context, in *RoutingConfig) (resp *RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteVirtualRouter(ctx context.Context, in *VirtualRouter) (resp *VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (resp *VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetIPAMPolicy(ctx context.Context, in *IPAMPolicy) (resp *IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetNetworkInterface(ctx context.Context, in *NetworkInterface) (resp *NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetRouteTable(ctx context.Context, in *RouteTable) (resp *RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetRoutingConfig(ctx context.Context, in *RoutingConfig) (resp *RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetVirtualRouter(ctx context.Context, in *VirtualRouter) (resp *VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (resp *VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelIPAMPolicy(ctx context.Context, in *api.Label) (resp *IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelLbPolicy(ctx context.Context, in *api.Label) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelNetwork(ctx context.Context, in *api.Label) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelNetworkInterface(ctx context.Context, in *api.Label) (resp *NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelRouteTable(ctx context.Context, in *api.Label) (resp *RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelRoutingConfig(ctx context.Context, in *api.Label) (resp *RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelService(ctx context.Context, in *api.Label) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelVirtualRouter(ctx context.Context, in *api.Label) (resp *VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoLabelVirtualRouterPeeringGroup(ctx context.Context, in *api.Label) (resp *VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListIPAMPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *IPAMPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *LbPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions) (resp *NetworkList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListNetworkInterface(ctx context.Context, in *api.ListWatchOptions) (resp *NetworkInterfaceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListRouteTable(ctx context.Context, in *api.ListWatchOptions) (resp *RouteTableList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListRoutingConfig(ctx context.Context, in *api.ListWatchOptions) (resp *RoutingConfigList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListService(ctx context.Context, in *api.ListWatchOptions) (resp *ServiceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListVirtualRouter(ctx context.Context, in *api.ListWatchOptions) (resp *VirtualRouterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListVirtualRouterPeeringGroup(ctx context.Context, in *api.ListWatchOptions) (resp *VirtualRouterPeeringGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateIPAMPolicy(ctx context.Context, in *IPAMPolicy) (resp *IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateNetworkInterface(ctx context.Context, in *NetworkInterface) (resp *NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateRouteTable(ctx context.Context, in *RouteTable) (resp *RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateRoutingConfig(ctx context.Context, in *RoutingConfig) (resp *RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateVirtualRouter(ctx context.Context, in *VirtualRouter) (resp *VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (resp *VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateVirtualRouterPeeringGroup(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareClient) AutoWatchSvcNetworkV1(ctx context.Context, in *api.AggWatchOptions) (resp NetworkV1_AutoWatchSvcNetworkV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchSvcNetworkV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcNetworkV1(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareClient) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchNetworkClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchService(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchServiceClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchLbPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchVirtualRouter(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchVirtualRouterClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchVirtualRouter", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchNetworkInterface(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchNetworkInterfaceClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchNetworkInterface", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchIPAMPolicy(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchIPAMPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchIPAMPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchRoutingConfig(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchRoutingConfigClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchRoutingConfig", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchRouteTable(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchRouteTableClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchRouteTable", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchVirtualRouterPeeringGroup(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchVirtualRouterPeeringGroupClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchVirtualRouterPeeringGroup(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoAddIPAMPolicy(ctx context.Context, in IPAMPolicy) (resp IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddNetworkInterface(ctx context.Context, in NetworkInterface) (resp NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddRouteTable(ctx context.Context, in RouteTable) (resp RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddRoutingConfig(ctx context.Context, in RoutingConfig) (resp RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddVirtualRouter(ctx context.Context, in VirtualRouter) (resp VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (resp VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteIPAMPolicy(ctx context.Context, in IPAMPolicy) (resp IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteNetworkInterface(ctx context.Context, in NetworkInterface) (resp NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteRouteTable(ctx context.Context, in RouteTable) (resp RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteRoutingConfig(ctx context.Context, in RoutingConfig) (resp RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteVirtualRouter(ctx context.Context, in VirtualRouter) (resp VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (resp VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetIPAMPolicy(ctx context.Context, in IPAMPolicy) (resp IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetNetworkInterface(ctx context.Context, in NetworkInterface) (resp NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetRouteTable(ctx context.Context, in RouteTable) (resp RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetRoutingConfig(ctx context.Context, in RoutingConfig) (resp RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetVirtualRouter(ctx context.Context, in VirtualRouter) (resp VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (resp VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelIPAMPolicy(ctx context.Context, in api.Label) (resp IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelLbPolicy(ctx context.Context, in api.Label) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelNetwork(ctx context.Context, in api.Label) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelNetworkInterface(ctx context.Context, in api.Label) (resp NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelRouteTable(ctx context.Context, in api.Label) (resp RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelRoutingConfig(ctx context.Context, in api.Label) (resp RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelService(ctx context.Context, in api.Label) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelVirtualRouter(ctx context.Context, in api.Label) (resp VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoLabelVirtualRouterPeeringGroup(ctx context.Context, in api.Label) (resp VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoLabelVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListIPAMPolicy(ctx context.Context, in api.ListWatchOptions) (resp IPAMPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListLbPolicy(ctx context.Context, in api.ListWatchOptions) (resp LbPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListNetwork(ctx context.Context, in api.ListWatchOptions) (resp NetworkList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListNetworkInterface(ctx context.Context, in api.ListWatchOptions) (resp NetworkInterfaceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListRouteTable(ctx context.Context, in api.ListWatchOptions) (resp RouteTableList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListRoutingConfig(ctx context.Context, in api.ListWatchOptions) (resp RoutingConfigList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListService(ctx context.Context, in api.ListWatchOptions) (resp ServiceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListVirtualRouter(ctx context.Context, in api.ListWatchOptions) (resp VirtualRouterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListVirtualRouterPeeringGroup(ctx context.Context, in api.ListWatchOptions) (resp VirtualRouterPeeringGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListVirtualRouterPeeringGroup(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateIPAMPolicy(ctx context.Context, in IPAMPolicy) (resp IPAMPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateIPAMPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateNetworkInterface(ctx context.Context, in NetworkInterface) (resp NetworkInterface, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNetworkInterface(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateRouteTable(ctx context.Context, in RouteTable) (resp RouteTable, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRouteTable(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateRoutingConfig(ctx context.Context, in RoutingConfig) (resp RoutingConfig, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRoutingConfig(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateVirtualRouter(ctx context.Context, in VirtualRouter) (resp VirtualRouter, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateVirtualRouter(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateVirtualRouterPeeringGroup(ctx context.Context, in VirtualRouterPeeringGroup) (resp VirtualRouterPeeringGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateVirtualRouterPeeringGroup(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoWatchSvcNetworkV1(in *api.AggWatchOptions, stream NetworkV1_AutoWatchSvcNetworkV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchSvcNetworkV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcNetworkV1(in, stream)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoWatchNetwork(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNetwork(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchService(in *api.ListWatchOptions, stream NetworkV1_AutoWatchServiceServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchService(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchLbPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchLbPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchLbPolicy(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchVirtualRouter(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchVirtualRouter", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchVirtualRouter(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchNetworkInterface(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkInterfaceServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchNetworkInterface", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNetworkInterface(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchIPAMPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchIPAMPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchIPAMPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchIPAMPolicy(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchRoutingConfig(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRoutingConfigServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchRoutingConfig", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRoutingConfig(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchRouteTable(in *api.ListWatchOptions, stream NetworkV1_AutoWatchRouteTableServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchRouteTable", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRouteTable(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchVirtualRouterPeeringGroup(in *api.ListWatchOptions, stream NetworkV1_AutoWatchVirtualRouterPeeringGroupServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchVirtualRouterPeeringGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchVirtualRouterPeeringGroup(in, stream)
	return
}

func (r *EndpointsNetworkV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsNetworkV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURINetworkV1AutoAddIPAMPolicyCreateOper(in *IPAMPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies")
}

//
func makeURINetworkV1AutoAddLbPolicyCreateOper(in *LbPolicy) string {
	return ""

}

//
func makeURINetworkV1AutoAddNetworkCreateOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoAddNetworkInterfaceCreateOper(in *NetworkInterface) string {
	return ""

}

//
func makeURINetworkV1AutoAddRouteTableCreateOper(in *RouteTable) string {
	return ""

}

//
func makeURINetworkV1AutoAddRoutingConfigCreateOper(in *RoutingConfig) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config")
}

//
func makeURINetworkV1AutoAddServiceCreateOper(in *Service) string {
	return ""

}

//
func makeURINetworkV1AutoAddVirtualRouterCreateOper(in *VirtualRouter) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters")
}

//
func makeURINetworkV1AutoAddVirtualRouterPeeringGroupCreateOper(in *VirtualRouterPeeringGroup) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups")
}

//
func makeURINetworkV1AutoDeleteIPAMPolicyDeleteOper(in *IPAMPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies/", in.Name)
}

//
func makeURINetworkV1AutoDeleteLbPolicyDeleteOper(in *LbPolicy) string {
	return ""

}

//
func makeURINetworkV1AutoDeleteNetworkDeleteOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoDeleteNetworkInterfaceDeleteOper(in *NetworkInterface) string {
	return ""

}

//
func makeURINetworkV1AutoDeleteRouteTableDeleteOper(in *RouteTable) string {
	return ""

}

//
func makeURINetworkV1AutoDeleteRoutingConfigDeleteOper(in *RoutingConfig) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config/", in.Name)
}

//
func makeURINetworkV1AutoDeleteServiceDeleteOper(in *Service) string {
	return ""

}

//
func makeURINetworkV1AutoDeleteVirtualRouterDeleteOper(in *VirtualRouter) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters/", in.Name)
}

//
func makeURINetworkV1AutoDeleteVirtualRouterPeeringGroupDeleteOper(in *VirtualRouterPeeringGroup) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups/", in.Name)
}

//
func makeURINetworkV1AutoGetIPAMPolicyGetOper(in *IPAMPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies/", in.Name)
}

//
func makeURINetworkV1AutoGetLbPolicyGetOper(in *LbPolicy) string {
	return ""

}

//
func makeURINetworkV1AutoGetNetworkGetOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoGetNetworkInterfaceGetOper(in *NetworkInterface) string {
	return fmt.Sprint("/configs/network/v1", "/networkinterfaces/", in.Name)
}

//
func makeURINetworkV1AutoGetRouteTableGetOper(in *RouteTable) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/route-tables/", in.Name)
}

//
func makeURINetworkV1AutoGetRoutingConfigGetOper(in *RoutingConfig) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config/", in.Name)
}

//
func makeURINetworkV1AutoGetServiceGetOper(in *Service) string {
	return ""

}

//
func makeURINetworkV1AutoGetVirtualRouterGetOper(in *VirtualRouter) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters/", in.Name)
}

//
func makeURINetworkV1AutoGetVirtualRouterPeeringGroupGetOper(in *VirtualRouterPeeringGroup) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups/", in.Name)
}

//
func makeURINetworkV1AutoLabelIPAMPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies/", in.Name, "/label")
}

//
func makeURINetworkV1AutoLabelLbPolicyLabelOper(in *api.Label) string {
	return ""

}

//
func makeURINetworkV1AutoLabelNetworkLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name, "/label")
}

//
func makeURINetworkV1AutoLabelNetworkInterfaceLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/networkinterfaces/", in.Name, "/label")
}

//
func makeURINetworkV1AutoLabelRouteTableLabelOper(in *api.Label) string {
	return ""

}

//
func makeURINetworkV1AutoLabelRoutingConfigLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config/", in.Name, "/label")
}

//
func makeURINetworkV1AutoLabelServiceLabelOper(in *api.Label) string {
	return ""

}

//
func makeURINetworkV1AutoLabelVirtualRouterLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters/", in.Name, "/label")
}

//
func makeURINetworkV1AutoLabelVirtualRouterPeeringGroupLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups/", in.Name, "/label")
}

//
func makeURINetworkV1AutoListIPAMPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies")
}

//
func makeURINetworkV1AutoListLbPolicyListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURINetworkV1AutoListNetworkListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoListNetworkInterfaceListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/networkinterfaces")
}

//
func makeURINetworkV1AutoListRouteTableListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/route-tables")
}

//
func makeURINetworkV1AutoListRoutingConfigListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config")
}

//
func makeURINetworkV1AutoListServiceListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURINetworkV1AutoListVirtualRouterListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters")
}

//
func makeURINetworkV1AutoListVirtualRouterPeeringGroupListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups")
}

//
func makeURINetworkV1AutoUpdateIPAMPolicyUpdateOper(in *IPAMPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/ipam-policies/", in.Name)
}

//
func makeURINetworkV1AutoUpdateLbPolicyUpdateOper(in *LbPolicy) string {
	return ""

}

//
func makeURINetworkV1AutoUpdateNetworkUpdateOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoUpdateNetworkInterfaceUpdateOper(in *NetworkInterface) string {
	return fmt.Sprint("/configs/network/v1", "/networkinterfaces/", in.Name)
}

//
func makeURINetworkV1AutoUpdateRouteTableUpdateOper(in *RouteTable) string {
	return ""

}

//
func makeURINetworkV1AutoUpdateRoutingConfigUpdateOper(in *RoutingConfig) string {
	return fmt.Sprint("/configs/network/v1", "/routing-config/", in.Name)
}

//
func makeURINetworkV1AutoUpdateServiceUpdateOper(in *Service) string {
	return ""

}

//
func makeURINetworkV1AutoUpdateVirtualRouterUpdateOper(in *VirtualRouter) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtualrouters/", in.Name)
}

//
func makeURINetworkV1AutoUpdateVirtualRouterPeeringGroupUpdateOper(in *VirtualRouterPeeringGroup) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/virtual-router-peering-groups/", in.Name)
}

//
func makeURINetworkV1AutoWatchIPAMPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/ipam-policies")
}

//
func makeURINetworkV1AutoWatchLbPolicyWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURINetworkV1AutoWatchNetworkWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoWatchNetworkInterfaceWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/networkinterfaces")
}

//
func makeURINetworkV1AutoWatchRouteTableWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/route-tables")
}

//
func makeURINetworkV1AutoWatchRoutingConfigWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/routing-config")
}

//
func makeURINetworkV1AutoWatchServiceWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURINetworkV1AutoWatchSvcNetworkV1WatchOper(in *api.AggWatchOptions) string {
	return ""

}

//
func makeURINetworkV1AutoWatchVirtualRouterWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/virtualrouters")
}

//
func makeURINetworkV1AutoWatchVirtualRouterPeeringGroupWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/virtual-router-peering-groups")
}

// AutoAddNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoAddNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoAddNetworkCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddNetwork(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), nil
}

// AutoUpdateNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoUpdateNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoUpdateNetworkUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoLabelNetwork label method for Network
func (r *EndpointsNetworkV1RestClient) AutoLabelNetwork(ctx context.Context, in *api.Label) (*Network, error) {
	path := makeURINetworkV1AutoLabelNetworkLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoGetNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoGetNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoGetNetworkGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoDeleteNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoDeleteNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoDeleteNetworkDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoListNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoListNetwork(ctx context.Context, options *api.ListWatchOptions) (*NetworkList, error) {
	path := makeURINetworkV1AutoListNetworkListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkList), err
}

// AutoWatchNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoWatchNetwork(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchNetworkWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNetworkWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoAddService(ctx context.Context, in *Service) (*Service, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoUpdateService(ctx context.Context, in *Service) (*Service, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelService label method for Service
func (r *EndpointsNetworkV1RestClient) AutoLabelService(ctx context.Context, in *api.Label) (*Service, error) {
	return nil, errors.New("not allowed")
}

// AutoGetService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoGetService(ctx context.Context, in *Service) (*Service, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoDeleteService(ctx context.Context, in *Service) (*Service, error) {
	return nil, errors.New("not allowed")
}

// AutoListService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoListService(ctx context.Context, options *api.ListWatchOptions) (*ServiceList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoWatchService(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchServiceWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgServiceWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelLbPolicy label method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoLabelLbPolicy(ctx context.Context, in *api.Label) (*LbPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoGetLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoListLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoListLbPolicy(ctx context.Context, options *api.ListWatchOptions) (*LbPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoWatchLbPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchLbPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgLbPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoAddVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	path := makeURINetworkV1AutoAddVirtualRouterCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddVirtualRouter(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouter), nil
}

// AutoUpdateVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoUpdateVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	path := makeURINetworkV1AutoUpdateVirtualRouterUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateVirtualRouter(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouter), err
}

// AutoLabelVirtualRouter label method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoLabelVirtualRouter(ctx context.Context, in *api.Label) (*VirtualRouter, error) {
	path := makeURINetworkV1AutoLabelVirtualRouterLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelVirtualRouter(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouter), err
}

// AutoGetVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoGetVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	path := makeURINetworkV1AutoGetVirtualRouterGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetVirtualRouter(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouter), err
}

// AutoDeleteVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoDeleteVirtualRouter(ctx context.Context, in *VirtualRouter) (*VirtualRouter, error) {
	path := makeURINetworkV1AutoDeleteVirtualRouterDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteVirtualRouter(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouter), err
}

// AutoListVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoListVirtualRouter(ctx context.Context, options *api.ListWatchOptions) (*VirtualRouterList, error) {
	path := makeURINetworkV1AutoListVirtualRouterListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListVirtualRouter(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterList), err
}

// AutoWatchVirtualRouter CRUD method for VirtualRouter
func (r *EndpointsNetworkV1RestClient) AutoWatchVirtualRouter(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchVirtualRouterWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgVirtualRouterWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoAddNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoUpdateNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	path := makeURINetworkV1AutoUpdateNetworkInterfaceUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateNetworkInterface(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkInterface), err
}

// AutoLabelNetworkInterface label method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoLabelNetworkInterface(ctx context.Context, in *api.Label) (*NetworkInterface, error) {
	path := makeURINetworkV1AutoLabelNetworkInterfaceLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelNetworkInterface(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkInterface), err
}

// AutoGetNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoGetNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	path := makeURINetworkV1AutoGetNetworkInterfaceGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetNetworkInterface(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkInterface), err
}

// AutoDeleteNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoDeleteNetworkInterface(ctx context.Context, in *NetworkInterface) (*NetworkInterface, error) {
	return nil, errors.New("not allowed")
}

// AutoListNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoListNetworkInterface(ctx context.Context, options *api.ListWatchOptions) (*NetworkInterfaceList, error) {
	path := makeURINetworkV1AutoListNetworkInterfaceListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListNetworkInterface(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkInterfaceList), err
}

// AutoWatchNetworkInterface CRUD method for NetworkInterface
func (r *EndpointsNetworkV1RestClient) AutoWatchNetworkInterface(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchNetworkInterfaceWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNetworkInterfaceWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoAddIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	path := makeURINetworkV1AutoAddIPAMPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddIPAMPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicy), nil
}

// AutoUpdateIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoUpdateIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	path := makeURINetworkV1AutoUpdateIPAMPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateIPAMPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicy), err
}

// AutoLabelIPAMPolicy label method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoLabelIPAMPolicy(ctx context.Context, in *api.Label) (*IPAMPolicy, error) {
	path := makeURINetworkV1AutoLabelIPAMPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelIPAMPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicy), err
}

// AutoGetIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoGetIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	path := makeURINetworkV1AutoGetIPAMPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetIPAMPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicy), err
}

// AutoDeleteIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoDeleteIPAMPolicy(ctx context.Context, in *IPAMPolicy) (*IPAMPolicy, error) {
	path := makeURINetworkV1AutoDeleteIPAMPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteIPAMPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicy), err
}

// AutoListIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoListIPAMPolicy(ctx context.Context, options *api.ListWatchOptions) (*IPAMPolicyList, error) {
	path := makeURINetworkV1AutoListIPAMPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListIPAMPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*IPAMPolicyList), err
}

// AutoWatchIPAMPolicy CRUD method for IPAMPolicy
func (r *EndpointsNetworkV1RestClient) AutoWatchIPAMPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchIPAMPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgIPAMPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoAddRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	path := makeURINetworkV1AutoAddRoutingConfigCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddRoutingConfig(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfig), nil
}

// AutoUpdateRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoUpdateRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	path := makeURINetworkV1AutoUpdateRoutingConfigUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateRoutingConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfig), err
}

// AutoLabelRoutingConfig label method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoLabelRoutingConfig(ctx context.Context, in *api.Label) (*RoutingConfig, error) {
	path := makeURINetworkV1AutoLabelRoutingConfigLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelRoutingConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfig), err
}

// AutoGetRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoGetRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	path := makeURINetworkV1AutoGetRoutingConfigGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetRoutingConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfig), err
}

// AutoDeleteRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoDeleteRoutingConfig(ctx context.Context, in *RoutingConfig) (*RoutingConfig, error) {
	path := makeURINetworkV1AutoDeleteRoutingConfigDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteRoutingConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfig), err
}

// AutoListRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoListRoutingConfig(ctx context.Context, options *api.ListWatchOptions) (*RoutingConfigList, error) {
	path := makeURINetworkV1AutoListRoutingConfigListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListRoutingConfig(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RoutingConfigList), err
}

// AutoWatchRoutingConfig CRUD method for RoutingConfig
func (r *EndpointsNetworkV1RestClient) AutoWatchRoutingConfig(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchRoutingConfigWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRoutingConfigWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoAddRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoUpdateRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelRouteTable label method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoLabelRouteTable(ctx context.Context, in *api.Label) (*RouteTable, error) {
	return nil, errors.New("not allowed")
}

// AutoGetRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoGetRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	path := makeURINetworkV1AutoGetRouteTableGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetRouteTable(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RouteTable), err
}

// AutoDeleteRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoDeleteRouteTable(ctx context.Context, in *RouteTable) (*RouteTable, error) {
	return nil, errors.New("not allowed")
}

// AutoListRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoListRouteTable(ctx context.Context, options *api.ListWatchOptions) (*RouteTableList, error) {
	path := makeURINetworkV1AutoListRouteTableListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListRouteTable(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RouteTableList), err
}

// AutoWatchRouteTable CRUD method for RouteTable
func (r *EndpointsNetworkV1RestClient) AutoWatchRouteTable(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchRouteTableWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRouteTableWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoAddVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	path := makeURINetworkV1AutoAddVirtualRouterPeeringGroupCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddVirtualRouterPeeringGroup(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroup), nil
}

// AutoUpdateVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoUpdateVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	path := makeURINetworkV1AutoUpdateVirtualRouterPeeringGroupUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateVirtualRouterPeeringGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroup), err
}

// AutoLabelVirtualRouterPeeringGroup label method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoLabelVirtualRouterPeeringGroup(ctx context.Context, in *api.Label) (*VirtualRouterPeeringGroup, error) {
	path := makeURINetworkV1AutoLabelVirtualRouterPeeringGroupLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoLabelVirtualRouterPeeringGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroup), err
}

// AutoGetVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoGetVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	path := makeURINetworkV1AutoGetVirtualRouterPeeringGroupGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetVirtualRouterPeeringGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroup), err
}

// AutoDeleteVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoDeleteVirtualRouterPeeringGroup(ctx context.Context, in *VirtualRouterPeeringGroup) (*VirtualRouterPeeringGroup, error) {
	path := makeURINetworkV1AutoDeleteVirtualRouterPeeringGroupDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteVirtualRouterPeeringGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroup), err
}

// AutoListVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoListVirtualRouterPeeringGroup(ctx context.Context, options *api.ListWatchOptions) (*VirtualRouterPeeringGroupList, error) {
	path := makeURINetworkV1AutoListVirtualRouterPeeringGroupListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListVirtualRouterPeeringGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*VirtualRouterPeeringGroupList), err
}

// AutoWatchVirtualRouterPeeringGroup CRUD method for VirtualRouterPeeringGroup
func (r *EndpointsNetworkV1RestClient) AutoWatchVirtualRouterPeeringGroup(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchVirtualRouterPeeringGroupWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgVirtualRouterPeeringGroupWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeNetworkV1RestClientEndpoints make REST client endpoints
func MakeNetworkV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsNetworkV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsNetworkV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeNetworkV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeNetworkV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsNetworkV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsNetworkV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
