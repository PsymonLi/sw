// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: svc_network.proto
*/
package network

import (
	"context"
	"crypto/tls"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareNetworkV1Client add middleware to the client
type MiddlewareNetworkV1Client func(ServiceNetworkV1Client) ServiceNetworkV1Client

// EndpointsNetworkV1Client is the endpoints for the client
type EndpointsNetworkV1Client struct {
	Client                        NetworkV1Client
	AutoWatchSvcNetworkV1Endpoint endpoint.Endpoint

	AutoAddLbPolicyEndpoint    endpoint.Endpoint
	AutoAddNetworkEndpoint     endpoint.Endpoint
	AutoAddServiceEndpoint     endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint endpoint.Endpoint
	AutoDeleteNetworkEndpoint  endpoint.Endpoint
	AutoDeleteServiceEndpoint  endpoint.Endpoint
	AutoGetLbPolicyEndpoint    endpoint.Endpoint
	AutoGetNetworkEndpoint     endpoint.Endpoint
	AutoGetServiceEndpoint     endpoint.Endpoint
	AutoListLbPolicyEndpoint   endpoint.Endpoint
	AutoListNetworkEndpoint    endpoint.Endpoint
	AutoListServiceEndpoint    endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint endpoint.Endpoint
	AutoUpdateNetworkEndpoint  endpoint.Endpoint
	AutoUpdateServiceEndpoint  endpoint.Endpoint
}

// EndpointsNetworkV1RestClient is the REST client
type EndpointsNetworkV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddLbPolicyEndpoint       endpoint.Endpoint
	AutoAddNetworkEndpoint        endpoint.Endpoint
	AutoAddServiceEndpoint        endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint    endpoint.Endpoint
	AutoDeleteNetworkEndpoint     endpoint.Endpoint
	AutoDeleteServiceEndpoint     endpoint.Endpoint
	AutoGetLbPolicyEndpoint       endpoint.Endpoint
	AutoGetNetworkEndpoint        endpoint.Endpoint
	AutoGetServiceEndpoint        endpoint.Endpoint
	AutoListLbPolicyEndpoint      endpoint.Endpoint
	AutoListNetworkEndpoint       endpoint.Endpoint
	AutoListServiceEndpoint       endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint    endpoint.Endpoint
	AutoUpdateNetworkEndpoint     endpoint.Endpoint
	AutoUpdateServiceEndpoint     endpoint.Endpoint
	AutoWatchLbPolicyEndpoint     endpoint.Endpoint
	AutoWatchNetworkEndpoint      endpoint.Endpoint
	AutoWatchServiceEndpoint      endpoint.Endpoint
	AutoWatchSvcNetworkV1Endpoint endpoint.Endpoint
}

// MiddlewareNetworkV1Server adds middle ware to the server
type MiddlewareNetworkV1Server func(ServiceNetworkV1Server) ServiceNetworkV1Server

// EndpointsNetworkV1Server is the server endpoints
type EndpointsNetworkV1Server struct {
	svcWatchHandlerNetworkV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddLbPolicyEndpoint    endpoint.Endpoint
	AutoAddNetworkEndpoint     endpoint.Endpoint
	AutoAddServiceEndpoint     endpoint.Endpoint
	AutoDeleteLbPolicyEndpoint endpoint.Endpoint
	AutoDeleteNetworkEndpoint  endpoint.Endpoint
	AutoDeleteServiceEndpoint  endpoint.Endpoint
	AutoGetLbPolicyEndpoint    endpoint.Endpoint
	AutoGetNetworkEndpoint     endpoint.Endpoint
	AutoGetServiceEndpoint     endpoint.Endpoint
	AutoListLbPolicyEndpoint   endpoint.Endpoint
	AutoListNetworkEndpoint    endpoint.Endpoint
	AutoListServiceEndpoint    endpoint.Endpoint
	AutoUpdateLbPolicyEndpoint endpoint.Endpoint
	AutoUpdateNetworkEndpoint  endpoint.Endpoint
	AutoUpdateServiceEndpoint  endpoint.Endpoint

	watchHandlerNetwork  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerService  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerLbPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddLbPolicy is endpoint for AutoAddLbPolicy
func (e EndpointsNetworkV1Client) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoAddLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoAddLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoAddNetwork is endpoint for AutoAddNetwork
func (e EndpointsNetworkV1Client) AutoAddNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoAddNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoAddNetwork struct {
	V   Network
	Err error
}

// AutoAddService is endpoint for AutoAddService
func (e EndpointsNetworkV1Client) AutoAddService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoAddServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoAddService struct {
	V   Service
	Err error
}

// AutoDeleteLbPolicy is endpoint for AutoDeleteLbPolicy
func (e EndpointsNetworkV1Client) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoDeleteLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoDeleteLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoDeleteNetwork is endpoint for AutoDeleteNetwork
func (e EndpointsNetworkV1Client) AutoDeleteNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoDeleteNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoDeleteNetwork struct {
	V   Network
	Err error
}

// AutoDeleteService is endpoint for AutoDeleteService
func (e EndpointsNetworkV1Client) AutoDeleteService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoDeleteServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoDeleteService struct {
	V   Service
	Err error
}

// AutoGetLbPolicy is endpoint for AutoGetLbPolicy
func (e EndpointsNetworkV1Client) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoGetLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoGetLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoGetNetwork is endpoint for AutoGetNetwork
func (e EndpointsNetworkV1Client) AutoGetNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoGetNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoGetNetwork struct {
	V   Network
	Err error
}

// AutoGetService is endpoint for AutoGetService
func (e EndpointsNetworkV1Client) AutoGetService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoGetServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoGetService struct {
	V   Service
	Err error
}

// AutoListLbPolicy is endpoint for AutoListLbPolicy
func (e EndpointsNetworkV1Client) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions) (*LbPolicyList, error) {
	resp, err := e.AutoListLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicyList{}, err
	}
	return resp.(*LbPolicyList), nil
}

type respNetworkV1AutoListLbPolicy struct {
	V   LbPolicyList
	Err error
}

// AutoListNetwork is endpoint for AutoListNetwork
func (e EndpointsNetworkV1Client) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions) (*NetworkList, error) {
	resp, err := e.AutoListNetworkEndpoint(ctx, in)
	if err != nil {
		return &NetworkList{}, err
	}
	return resp.(*NetworkList), nil
}

type respNetworkV1AutoListNetwork struct {
	V   NetworkList
	Err error
}

// AutoListService is endpoint for AutoListService
func (e EndpointsNetworkV1Client) AutoListService(ctx context.Context, in *api.ListWatchOptions) (*ServiceList, error) {
	resp, err := e.AutoListServiceEndpoint(ctx, in)
	if err != nil {
		return &ServiceList{}, err
	}
	return resp.(*ServiceList), nil
}

type respNetworkV1AutoListService struct {
	V   ServiceList
	Err error
}

// AutoUpdateLbPolicy is endpoint for AutoUpdateLbPolicy
func (e EndpointsNetworkV1Client) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	resp, err := e.AutoUpdateLbPolicyEndpoint(ctx, in)
	if err != nil {
		return &LbPolicy{}, err
	}
	return resp.(*LbPolicy), nil
}

type respNetworkV1AutoUpdateLbPolicy struct {
	V   LbPolicy
	Err error
}

// AutoUpdateNetwork is endpoint for AutoUpdateNetwork
func (e EndpointsNetworkV1Client) AutoUpdateNetwork(ctx context.Context, in *Network) (*Network, error) {
	resp, err := e.AutoUpdateNetworkEndpoint(ctx, in)
	if err != nil {
		return &Network{}, err
	}
	return resp.(*Network), nil
}

type respNetworkV1AutoUpdateNetwork struct {
	V   Network
	Err error
}

// AutoUpdateService is endpoint for AutoUpdateService
func (e EndpointsNetworkV1Client) AutoUpdateService(ctx context.Context, in *Service) (*Service, error) {
	resp, err := e.AutoUpdateServiceEndpoint(ctx, in)
	if err != nil {
		return &Service{}, err
	}
	return resp.(*Service), nil
}

type respNetworkV1AutoUpdateService struct {
	V   Service
	Err error
}

func (e EndpointsNetworkV1Client) AutoWatchSvcNetworkV1(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchSvcNetworkV1Client, error) {
	return e.Client.AutoWatchSvcNetworkV1(ctx, in)
}

// AutoWatchNetwork performs Watch for Network
func (e EndpointsNetworkV1Client) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchNetworkClient, error) {
	return e.Client.AutoWatchNetwork(ctx, in)
}

// AutoWatchService performs Watch for Service
func (e EndpointsNetworkV1Client) AutoWatchService(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchServiceClient, error) {
	return e.Client.AutoWatchService(ctx, in)
}

// AutoWatchLbPolicy performs Watch for LbPolicy
func (e EndpointsNetworkV1Client) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions) (NetworkV1_AutoWatchLbPolicyClient, error) {
	return e.Client.AutoWatchLbPolicy(ctx, in)
}

// AutoAddLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoAddLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoAddLbPolicyEndpoint creates  AutoAddLbPolicy endpoints for the service
func MakeNetworkV1AutoAddLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoAddLbPolicy(ctx, *req)
		return respNetworkV1AutoAddLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddLbPolicy")(f)
}

// AutoAddNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoAddNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoAddNetworkEndpoint creates  AutoAddNetwork endpoints for the service
func MakeNetworkV1AutoAddNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoAddNetwork(ctx, *req)
		return respNetworkV1AutoAddNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddNetwork")(f)
}

// AutoAddService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoAddService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoAddServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoAddServiceEndpoint creates  AutoAddService endpoints for the service
func MakeNetworkV1AutoAddServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoAddService(ctx, *req)
		return respNetworkV1AutoAddService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoAddService")(f)
}

// AutoDeleteLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoDeleteLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoDeleteLbPolicyEndpoint creates  AutoDeleteLbPolicy endpoints for the service
func MakeNetworkV1AutoDeleteLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoDeleteLbPolicy(ctx, *req)
		return respNetworkV1AutoDeleteLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteLbPolicy")(f)
}

// AutoDeleteNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoDeleteNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoDeleteNetworkEndpoint creates  AutoDeleteNetwork endpoints for the service
func MakeNetworkV1AutoDeleteNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoDeleteNetwork(ctx, *req)
		return respNetworkV1AutoDeleteNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteNetwork")(f)
}

// AutoDeleteService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoDeleteService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoDeleteServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoDeleteServiceEndpoint creates  AutoDeleteService endpoints for the service
func MakeNetworkV1AutoDeleteServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoDeleteService(ctx, *req)
		return respNetworkV1AutoDeleteService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoDeleteService")(f)
}

// AutoGetLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoGetLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoGetLbPolicyEndpoint creates  AutoGetLbPolicy endpoints for the service
func MakeNetworkV1AutoGetLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoGetLbPolicy(ctx, *req)
		return respNetworkV1AutoGetLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetLbPolicy")(f)
}

// AutoGetNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoGetNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoGetNetworkEndpoint creates  AutoGetNetwork endpoints for the service
func MakeNetworkV1AutoGetNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoGetNetwork(ctx, *req)
		return respNetworkV1AutoGetNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetNetwork")(f)
}

// AutoGetService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoGetService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoGetServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoGetServiceEndpoint creates  AutoGetService endpoints for the service
func MakeNetworkV1AutoGetServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoGetService(ctx, *req)
		return respNetworkV1AutoGetService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoGetService")(f)
}

// AutoListLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListLbPolicy(ctx context.Context, in api.ListWatchOptions) (LbPolicyList, error) {
	resp, err := e.AutoListLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicyList{}, err
	}
	return *resp.(*LbPolicyList), nil
}

// MakeNetworkV1AutoListLbPolicyEndpoint creates  AutoListLbPolicy endpoints for the service
func MakeNetworkV1AutoListLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListLbPolicy(ctx, *req)
		return respNetworkV1AutoListLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListLbPolicy")(f)
}

// AutoListNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListNetwork(ctx context.Context, in api.ListWatchOptions) (NetworkList, error) {
	resp, err := e.AutoListNetworkEndpoint(ctx, in)
	if err != nil {
		return NetworkList{}, err
	}
	return *resp.(*NetworkList), nil
}

// MakeNetworkV1AutoListNetworkEndpoint creates  AutoListNetwork endpoints for the service
func MakeNetworkV1AutoListNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNetwork(ctx, *req)
		return respNetworkV1AutoListNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListNetwork")(f)
}

// AutoListService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoListService(ctx context.Context, in api.ListWatchOptions) (ServiceList, error) {
	resp, err := e.AutoListServiceEndpoint(ctx, in)
	if err != nil {
		return ServiceList{}, err
	}
	return *resp.(*ServiceList), nil
}

// MakeNetworkV1AutoListServiceEndpoint creates  AutoListService endpoints for the service
func MakeNetworkV1AutoListServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListService(ctx, *req)
		return respNetworkV1AutoListService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoListService")(f)
}

// AutoUpdateLbPolicy implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateLbPolicy(ctx context.Context, in LbPolicy) (LbPolicy, error) {
	resp, err := e.AutoUpdateLbPolicyEndpoint(ctx, in)
	if err != nil {
		return LbPolicy{}, err
	}
	return *resp.(*LbPolicy), nil
}

// MakeNetworkV1AutoUpdateLbPolicyEndpoint creates  AutoUpdateLbPolicy endpoints for the service
func MakeNetworkV1AutoUpdateLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*LbPolicy)
		v, err := s.AutoUpdateLbPolicy(ctx, *req)
		return respNetworkV1AutoUpdateLbPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateLbPolicy")(f)
}

// AutoUpdateNetwork implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateNetwork(ctx context.Context, in Network) (Network, error) {
	resp, err := e.AutoUpdateNetworkEndpoint(ctx, in)
	if err != nil {
		return Network{}, err
	}
	return *resp.(*Network), nil
}

// MakeNetworkV1AutoUpdateNetworkEndpoint creates  AutoUpdateNetwork endpoints for the service
func MakeNetworkV1AutoUpdateNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Network)
		v, err := s.AutoUpdateNetwork(ctx, *req)
		return respNetworkV1AutoUpdateNetwork{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateNetwork")(f)
}

// AutoUpdateService implementation on server Endpoint
func (e EndpointsNetworkV1Server) AutoUpdateService(ctx context.Context, in Service) (Service, error) {
	resp, err := e.AutoUpdateServiceEndpoint(ctx, in)
	if err != nil {
		return Service{}, err
	}
	return *resp.(*Service), nil
}

// MakeNetworkV1AutoUpdateServiceEndpoint creates  AutoUpdateService endpoints for the service
func MakeNetworkV1AutoUpdateServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Service)
		v, err := s.AutoUpdateService(ctx, *req)
		return respNetworkV1AutoUpdateService{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("NetworkV1:AutoUpdateService")(f)
}

func (e EndpointsNetworkV1Server) AutoWatchSvcNetworkV1(in *api.ListWatchOptions, stream NetworkV1_AutoWatchSvcNetworkV1Server) error {
	return e.svcWatchHandlerNetworkV1(in, stream)
}

// MakeAutoWatchSvcNetworkV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcNetworkV1Endpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchSvcNetworkV1Server)
		return s.AutoWatchSvcNetworkV1(options, wstream)
	}
}

// AutoWatchNetwork is the watch handler for Network on the server side.
func (e EndpointsNetworkV1Server) AutoWatchNetwork(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkServer) error {
	return e.watchHandlerNetwork(in, stream)
}

// MakeAutoWatchNetworkEndpoint creates the Watch endpoint
func MakeAutoWatchNetworkEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchNetworkServer)
		return s.AutoWatchNetwork(options, wstream)
	}
}

// AutoWatchService is the watch handler for Service on the server side.
func (e EndpointsNetworkV1Server) AutoWatchService(in *api.ListWatchOptions, stream NetworkV1_AutoWatchServiceServer) error {
	return e.watchHandlerService(in, stream)
}

// MakeAutoWatchServiceEndpoint creates the Watch endpoint
func MakeAutoWatchServiceEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchServiceServer)
		return s.AutoWatchService(options, wstream)
	}
}

// AutoWatchLbPolicy is the watch handler for LbPolicy on the server side.
func (e EndpointsNetworkV1Server) AutoWatchLbPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchLbPolicyServer) error {
	return e.watchHandlerLbPolicy(in, stream)
}

// MakeAutoWatchLbPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchLbPolicyEndpoint(s ServiceNetworkV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(NetworkV1_AutoWatchLbPolicyServer)
		return s.AutoWatchLbPolicy(options, wstream)
	}
}

// MakeNetworkV1ServerEndpoints creates server endpoints
func MakeNetworkV1ServerEndpoints(s ServiceNetworkV1Server, logger log.Logger) EndpointsNetworkV1Server {
	return EndpointsNetworkV1Server{
		svcWatchHandlerNetworkV1: MakeAutoWatchSvcNetworkV1Endpoint(s, logger),

		AutoAddLbPolicyEndpoint:    MakeNetworkV1AutoAddLbPolicyEndpoint(s, logger),
		AutoAddNetworkEndpoint:     MakeNetworkV1AutoAddNetworkEndpoint(s, logger),
		AutoAddServiceEndpoint:     MakeNetworkV1AutoAddServiceEndpoint(s, logger),
		AutoDeleteLbPolicyEndpoint: MakeNetworkV1AutoDeleteLbPolicyEndpoint(s, logger),
		AutoDeleteNetworkEndpoint:  MakeNetworkV1AutoDeleteNetworkEndpoint(s, logger),
		AutoDeleteServiceEndpoint:  MakeNetworkV1AutoDeleteServiceEndpoint(s, logger),
		AutoGetLbPolicyEndpoint:    MakeNetworkV1AutoGetLbPolicyEndpoint(s, logger),
		AutoGetNetworkEndpoint:     MakeNetworkV1AutoGetNetworkEndpoint(s, logger),
		AutoGetServiceEndpoint:     MakeNetworkV1AutoGetServiceEndpoint(s, logger),
		AutoListLbPolicyEndpoint:   MakeNetworkV1AutoListLbPolicyEndpoint(s, logger),
		AutoListNetworkEndpoint:    MakeNetworkV1AutoListNetworkEndpoint(s, logger),
		AutoListServiceEndpoint:    MakeNetworkV1AutoListServiceEndpoint(s, logger),
		AutoUpdateLbPolicyEndpoint: MakeNetworkV1AutoUpdateLbPolicyEndpoint(s, logger),
		AutoUpdateNetworkEndpoint:  MakeNetworkV1AutoUpdateNetworkEndpoint(s, logger),
		AutoUpdateServiceEndpoint:  MakeNetworkV1AutoUpdateServiceEndpoint(s, logger),

		watchHandlerNetwork:  MakeAutoWatchNetworkEndpoint(s, logger),
		watchHandlerService:  MakeAutoWatchServiceEndpoint(s, logger),
		watchHandlerLbPolicy: MakeAutoWatchLbPolicyEndpoint(s, logger),
	}
}

// LoggingNetworkV1MiddlewareClient adds middleware for the client
func LoggingNetworkV1MiddlewareClient(logger log.Logger) MiddlewareNetworkV1Client {
	return func(next ServiceNetworkV1Client) ServiceNetworkV1Client {
		return loggingNetworkV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingNetworkV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceNetworkV1Client
}

// LoggingNetworkV1MiddlewareServer adds middleware for the client
func LoggingNetworkV1MiddlewareServer(logger log.Logger) MiddlewareNetworkV1Server {
	return func(next ServiceNetworkV1Server) ServiceNetworkV1Server {
		return loggingNetworkV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingNetworkV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceNetworkV1Server
}

func (m loggingNetworkV1MiddlewareClient) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoAddService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoDeleteService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoGetService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListLbPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *LbPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListNetwork(ctx context.Context, in *api.ListWatchOptions) (resp *NetworkList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoListService(ctx context.Context, in *api.ListWatchOptions) (resp *ServiceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (resp *LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateNetwork(ctx context.Context, in *Network) (resp *Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoUpdateService(ctx context.Context, in *Service) (resp *Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateService(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareClient) AutoWatchSvcNetworkV1(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchSvcNetworkV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchSvcNetworkV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcNetworkV1(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareClient) AutoWatchNetwork(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchNetworkClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchNetwork", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchService(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchServiceClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchService", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareClient) AutoWatchLbPolicy(ctx context.Context, in *api.ListWatchOptions) (resp NetworkV1_AutoWatchLbPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoWatchLbPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchLbPolicy(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoAddLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoAddService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoAddService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoDeleteService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoDeleteService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoGetService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoGetService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListLbPolicy(ctx context.Context, in api.ListWatchOptions) (resp LbPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListNetwork(ctx context.Context, in api.ListWatchOptions) (resp NetworkList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoListService(ctx context.Context, in api.ListWatchOptions) (resp ServiceList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoListService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListService(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateLbPolicy(ctx context.Context, in LbPolicy) (resp LbPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateLbPolicy(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateNetwork(ctx context.Context, in Network) (resp Network, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNetwork(ctx, in)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoUpdateService(ctx context.Context, in Service) (resp Service, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "NetworkV1", "method", "AutoUpdateService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateService(ctx, in)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoWatchSvcNetworkV1(in *api.ListWatchOptions, stream NetworkV1_AutoWatchSvcNetworkV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchSvcNetworkV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcNetworkV1(in, stream)
	return
}

func (m loggingNetworkV1MiddlewareServer) AutoWatchNetwork(in *api.ListWatchOptions, stream NetworkV1_AutoWatchNetworkServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchNetwork", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNetwork(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchService(in *api.ListWatchOptions, stream NetworkV1_AutoWatchServiceServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchService", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchService(in, stream)
	return
}
func (m loggingNetworkV1MiddlewareServer) AutoWatchLbPolicy(in *api.ListWatchOptions, stream NetworkV1_AutoWatchLbPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "NetworkV1", "method", "AutoWatchLbPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchLbPolicy(in, stream)
	return
}

func (r *EndpointsNetworkV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsNetworkV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURINetworkV1AutoAddLbPolicyCreateOper(in *LbPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/lb-policy")
}

//
func makeURINetworkV1AutoAddNetworkCreateOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoAddServiceCreateOper(in *Service) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/services")
}

//
func makeURINetworkV1AutoDeleteLbPolicyDeleteOper(in *LbPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/lb-policy/", in.Name)
}

//
func makeURINetworkV1AutoDeleteNetworkDeleteOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoDeleteServiceDeleteOper(in *Service) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/services/", in.Name)
}

//
func makeURINetworkV1AutoGetLbPolicyGetOper(in *LbPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/lb-policy/", in.Name)
}

//
func makeURINetworkV1AutoGetNetworkGetOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoGetServiceGetOper(in *Service) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/services/", in.Name)
}

//
func makeURINetworkV1AutoListLbPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/lb-policy")
}

//
func makeURINetworkV1AutoListNetworkListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoListServiceListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/services")
}

//
func makeURINetworkV1AutoUpdateLbPolicyUpdateOper(in *LbPolicy) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/lb-policy/", in.Name)
}

//
func makeURINetworkV1AutoUpdateNetworkUpdateOper(in *Network) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/networks/", in.Name)
}

//
func makeURINetworkV1AutoUpdateServiceUpdateOper(in *Service) string {
	return fmt.Sprint("/configs/network/v1", "/tenant/", in.Tenant, "/services/", in.Name)
}

//
func makeURINetworkV1AutoWatchLbPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/lb-policy")
}

//
func makeURINetworkV1AutoWatchNetworkWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/networks")
}

//
func makeURINetworkV1AutoWatchServiceWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/network/v1", "/watch/tenant/", in.Tenant, "/services")
}

//
func makeURINetworkV1AutoWatchSvcNetworkV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

// AutoAddNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoAddNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoAddNetworkCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddNetwork(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), nil
}

// AutoUpdateNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoUpdateNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoUpdateNetworkUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoGetNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoGetNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoGetNetworkGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoDeleteNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoDeleteNetwork(ctx context.Context, in *Network) (*Network, error) {
	path := makeURINetworkV1AutoDeleteNetworkDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Network), err
}

// AutoListNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoListNetwork(ctx context.Context, options *api.ListWatchOptions) (*NetworkList, error) {
	path := makeURINetworkV1AutoListNetworkListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListNetwork(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkList), err
}

// AutoWatchNetwork CRUD method for Network
func (r *EndpointsNetworkV1RestClient) AutoWatchNetwork(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchNetworkWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNetworkWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoAddService(ctx context.Context, in *Service) (*Service, error) {
	path := makeURINetworkV1AutoAddServiceCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddService(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Service), nil
}

// AutoUpdateService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoUpdateService(ctx context.Context, in *Service) (*Service, error) {
	path := makeURINetworkV1AutoUpdateServiceUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateService(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Service), err
}

// AutoGetService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoGetService(ctx context.Context, in *Service) (*Service, error) {
	path := makeURINetworkV1AutoGetServiceGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetService(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Service), err
}

// AutoDeleteService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoDeleteService(ctx context.Context, in *Service) (*Service, error) {
	path := makeURINetworkV1AutoDeleteServiceDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteService(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Service), err
}

// AutoListService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoListService(ctx context.Context, options *api.ListWatchOptions) (*ServiceList, error) {
	path := makeURINetworkV1AutoListServiceListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListService(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ServiceList), err
}

// AutoWatchService CRUD method for Service
func (r *EndpointsNetworkV1RestClient) AutoWatchService(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchServiceWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgServiceWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoAddLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	path := makeURINetworkV1AutoAddLbPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoAddLbPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*LbPolicy), nil
}

// AutoUpdateLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoUpdateLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	path := makeURINetworkV1AutoUpdateLbPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoUpdateLbPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*LbPolicy), err
}

// AutoGetLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoGetLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	path := makeURINetworkV1AutoGetLbPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoGetLbPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*LbPolicy), err
}

// AutoDeleteLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoDeleteLbPolicy(ctx context.Context, in *LbPolicy) (*LbPolicy, error) {
	path := makeURINetworkV1AutoDeleteLbPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoDeleteLbPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*LbPolicy), err
}

// AutoListLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoListLbPolicy(ctx context.Context, options *api.ListWatchOptions) (*LbPolicyList, error) {
	path := makeURINetworkV1AutoListLbPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespNetworkV1AutoListLbPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*LbPolicyList), err
}

// AutoWatchLbPolicy CRUD method for LbPolicy
func (r *EndpointsNetworkV1RestClient) AutoWatchLbPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURINetworkV1AutoWatchLbPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgLbPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeNetworkV1RestClientEndpoints make REST client endpoints
func MakeNetworkV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsNetworkV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsNetworkV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeNetworkV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeNetworkV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsNetworkV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsNetworkV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
