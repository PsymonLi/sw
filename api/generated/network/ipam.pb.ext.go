// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package network is a auto generated package.
Input file: ipam.proto
*/
package network

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// IPAMPolicySpec_IPAMType_normal is a map of normalized values for the enum
var IPAMPolicySpec_IPAMType_normal = map[string]string{
	"dhcp-relay": "dhcp-relay",
}

var IPAMPolicySpec_IPAMType_vname = map[int32]string{
	0: "dhcp-relay",
}

var IPAMPolicySpec_IPAMType_vvalue = map[string]int32{
	"dhcp-relay": 0,
}

func (x IPAMPolicySpec_IPAMType) String() string {
	return IPAMPolicySpec_IPAMType_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapIpam = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *IPAMPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "ipam-policies/", m.Tenant, "/", m.Name)
}

func (m *IPAMPolicy) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/ipam-policies/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *DHCPRelayPolicy) Clone(into interface{}) (interface{}, error) {
	var out *DHCPRelayPolicy
	var ok bool
	if into == nil {
		out = &DHCPRelayPolicy{}
	} else {
		out, ok = into.(*DHCPRelayPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*DHCPRelayPolicy))
	return out, nil
}

// Default sets up the defaults for the object
func (m *DHCPRelayPolicy) Defaults(ver string) bool {
	var ret bool
	for k := range m.Servers {
		if m.Servers[k] != nil {
			i := m.Servers[k]
			ret = i.Defaults(ver) || ret
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *DHCPServer) Clone(into interface{}) (interface{}, error) {
	var out *DHCPServer
	var ok bool
	if into == nil {
		out = &DHCPServer{}
	} else {
		out, ok = into.(*DHCPServer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*DHCPServer))
	return out, nil
}

// Default sets up the defaults for the object
func (m *DHCPServer) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *IPAMPolicy) Clone(into interface{}) (interface{}, error) {
	var out *IPAMPolicy
	var ok bool
	if into == nil {
		out = &IPAMPolicy{}
	} else {
		out, ok = into.(*IPAMPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*IPAMPolicy))
	return out, nil
}

// Default sets up the defaults for the object
func (m *IPAMPolicy) Defaults(ver string) bool {
	var ret bool
	m.Kind = "IPAMPolicy"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *IPAMPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *IPAMPolicySpec
	var ok bool
	if into == nil {
		out = &IPAMPolicySpec{}
	} else {
		out, ok = into.(*IPAMPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*IPAMPolicySpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *IPAMPolicySpec) Defaults(ver string) bool {
	var ret bool
	if m.DHCPRelay != nil {
		ret = m.DHCPRelay.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.Type = "dhcp-relay"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *IPAMPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *IPAMPolicyStatus
	var ok bool
	if into == nil {
		out = &IPAMPolicyStatus{}
	} else {
		out, ok = into.(*IPAMPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*IPAMPolicyStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *IPAMPolicyStatus) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *DHCPRelayPolicy) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "relay-servers"

		for _, v := range m.Servers {
			if v != nil {
				v.References(tenant, tag, resp)
			}
		}
	}
}

func (m *DHCPRelayPolicy) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Servers {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sServers[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *DHCPRelayPolicy) Normalize() {

	for k, v := range m.Servers {
		if v != nil {
			v.Normalize()
			m.Servers[k] = v
		}
	}

}

func (m *DHCPServer) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "virtual-router"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.VirtualRouter != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/network/"+"virtualrouters/"+tenant+"/"+m.VirtualRouter)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *DHCPServer) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapIpam["DHCPServer"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapIpam["DHCPServer"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *DHCPServer) Normalize() {

}

func (m *IPAMPolicy) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *IPAMPolicy) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for IPAMPolicy"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *IPAMPolicy) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *IPAMPolicySpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "dhcp-relay"

		if m.DHCPRelay != nil {
			m.DHCPRelay.References(tenant, tag, resp)
		}

	}
}

func (m *IPAMPolicySpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.DHCPRelay != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "DHCPRelay"
			if errs := m.DHCPRelay.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapIpam["IPAMPolicySpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapIpam["IPAMPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *IPAMPolicySpec) Normalize() {

	if m.DHCPRelay != nil {
		m.DHCPRelay.Normalize()
	}

	m.Type = IPAMPolicySpec_IPAMType_normal[strings.ToLower(m.Type)]

}

func (m *IPAMPolicyStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *IPAMPolicyStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *IPAMPolicyStatus) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&IPAMPolicy{},
	)

	validatorMapIpam = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapIpam["DHCPServer"] = make(map[string][]func(string, interface{}) error)

	validatorMapIpam["DHCPServer"]["all"] = append(validatorMapIpam["DHCPServer"]["all"], func(path string, i interface{}) error {
		m := i.(*DHCPServer)
		if err := validators.IPAddr(m.IPAddress); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"IPAddress", err.Error())
		}
		return nil
	})

	validatorMapIpam["IPAMPolicySpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapIpam["IPAMPolicySpec"]["all"] = append(validatorMapIpam["IPAMPolicySpec"]["all"], func(path string, i interface{}) error {
		m := i.(*IPAMPolicySpec)

		if _, ok := IPAMPolicySpec_IPAMType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range IPAMPolicySpec_IPAMType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

}
