// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networkinterface.proto

package network

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import cluster2 "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type IFStatus int32

const (
	//
	IFStatus_UP IFStatus = 0
	//
	IFStatus_DOWN IFStatus = 1
)

var IFStatus_name = map[int32]string{
	0: "UP",
	1: "DOWN",
}
var IFStatus_value = map[string]int32{
	"UP":   0,
	"DOWN": 1,
}

func (IFStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{0} }

//
type PauseType int32

const (
	//
	PauseType_DISABLE PauseType = 0
	//
	PauseType_LINK PauseType = 1
	//
	PauseType_PRIORITY PauseType = 2
)

var PauseType_name = map[int32]string{
	0: "DISABLE",
	1: "LINK",
	2: "PRIORITY",
}
var PauseType_value = map[string]int32{
	"DISABLE":  0,
	"LINK":     1,
	"PRIORITY": 2,
}

func (PauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{1} }

//
type IFType int32

const (
	//
	IFType_NONE IFType = 0
	//
	IFType_HOST_PF IFType = 1
	//
	IFType_UPLINK_ETH IFType = 3
	//
	IFType_UPLINK_MGMT IFType = 4
	//
	IFType_LOOPBACK_TEP IFType = 5
)

var IFType_name = map[int32]string{
	0: "NONE",
	1: "HOST_PF",
	3: "UPLINK_ETH",
	4: "UPLINK_MGMT",
	5: "LOOPBACK_TEP",
}
var IFType_value = map[string]int32{
	"NONE":         0,
	"HOST_PF":      1,
	"UPLINK_ETH":   3,
	"UPLINK_MGMT":  4,
	"LOOPBACK_TEP": 5,
}

func (IFType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{2} }

//
type IPAllocTypes int32

const (
	//
	IPAllocTypes_None IPAllocTypes = 0
	//
	IPAllocTypes_Static IPAllocTypes = 1
	//
	IPAllocTypes_DHCP IPAllocTypes = 2
)

var IPAllocTypes_name = map[int32]string{
	0: "None",
	1: "Static",
	2: "DHCP",
}
var IPAllocTypes_value = map[string]int32{
	"None":   0,
	"Static": 1,
	"DHCP":   2,
}

func (IPAllocTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{3} }

//
type NetworkInterfaceStatus_IFType int32

const (
	//
	NetworkInterfaceStatus_NONE NetworkInterfaceStatus_IFType = 0
	//
	NetworkInterfaceStatus_HOST_PF NetworkInterfaceStatus_IFType = 1
	//
	NetworkInterfaceStatus_UPLINK_ETH NetworkInterfaceStatus_IFType = 3
	//
	NetworkInterfaceStatus_UPLINK_MGMT NetworkInterfaceStatus_IFType = 4
	//
	NetworkInterfaceStatus_LOOPBACK_TEP NetworkInterfaceStatus_IFType = 5
)

var NetworkInterfaceStatus_IFType_name = map[int32]string{
	0: "NONE",
	1: "HOST_PF",
	3: "UPLINK_ETH",
	4: "UPLINK_MGMT",
	5: "LOOPBACK_TEP",
}
var NetworkInterfaceStatus_IFType_value = map[string]int32{
	"NONE":         0,
	"HOST_PF":      1,
	"UPLINK_ETH":   3,
	"UPLINK_MGMT":  4,
	"LOOPBACK_TEP": 5,
}

func (NetworkInterfaceStatus_IFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{3, 0}
}

//
type TransceiverStatus_State int32

const (
	//
	TransceiverStatus_STATE_NA TransceiverStatus_State = 0
	//
	TransceiverStatus_STATE_REMOVED TransceiverStatus_State = 1
	//
	TransceiverStatus_STATE_INSERTED TransceiverStatus_State = 2
	//
	TransceiverStatus_STATE_PENDING TransceiverStatus_State = 3
	//
	TransceiverStatus_STATE_SPROM_READ TransceiverStatus_State = 4
	//
	TransceiverStatus_STATE_SPROM_READ_ERR TransceiverStatus_State = 5
)

var TransceiverStatus_State_name = map[int32]string{
	0: "STATE_NA",
	1: "STATE_REMOVED",
	2: "STATE_INSERTED",
	3: "STATE_PENDING",
	4: "STATE_SPROM_READ",
	5: "STATE_SPROM_READ_ERR",
}
var TransceiverStatus_State_value = map[string]int32{
	"STATE_NA":             0,
	"STATE_REMOVED":        1,
	"STATE_INSERTED":       2,
	"STATE_PENDING":        3,
	"STATE_SPROM_READ":     4,
	"STATE_SPROM_READ_ERR": 5,
}

func (TransceiverStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{6, 0}
}

//
type TransceiverStatus_CableType int32

const (
	//
	TransceiverStatus_NONE TransceiverStatus_CableType = 0
	//
	TransceiverStatus_COPPER TransceiverStatus_CableType = 1
	//
	TransceiverStatus_FIBER TransceiverStatus_CableType = 2
)

var TransceiverStatus_CableType_name = map[int32]string{
	0: "NONE",
	1: "COPPER",
	2: "FIBER",
}
var TransceiverStatus_CableType_value = map[string]int32{
	"NONE":   0,
	"COPPER": 1,
	"FIBER":  2,
}

func (TransceiverStatus_CableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{6, 1}
}

//
type TransceiverStatus_Pid int32

const (
	//
	TransceiverStatus_UNKNOWN TransceiverStatus_Pid = 0
	// CU
	TransceiverStatus_QSFP_100G_CR4 TransceiverStatus_Pid = 1
	//
	TransceiverStatus_QSFP_40GBASE_CR4 TransceiverStatus_Pid = 2
	//
	TransceiverStatus_SFP_25GBASE_CR_S TransceiverStatus_Pid = 3
	//
	TransceiverStatus_SFP_25GBASE_CR_L TransceiverStatus_Pid = 4
	//
	TransceiverStatus_SFP_25GBASE_CR_N TransceiverStatus_Pid = 5
	// Fiber, grouping all together
	TransceiverStatus_QSFP_100G_AOC TransceiverStatus_Pid = 50
	//
	TransceiverStatus_QSFP_100G_ACC TransceiverStatus_Pid = 51
	//
	TransceiverStatus_QSFP_100G_SR4 TransceiverStatus_Pid = 52
	//
	TransceiverStatus_QSFP_100G_LR4 TransceiverStatus_Pid = 53
	//
	TransceiverStatus_QSFP_100G_ER4 TransceiverStatus_Pid = 54
	//
	TransceiverStatus_QSFP_40GBASE_ER4 TransceiverStatus_Pid = 55
	//
	TransceiverStatus_QSFP_40GBASE_SR4 TransceiverStatus_Pid = 56
	//
	TransceiverStatus_QSFP_40GBASE_LR4 TransceiverStatus_Pid = 57
	//
	TransceiverStatus_QSFP_40GBASE_AOC TransceiverStatus_Pid = 58
	//
	TransceiverStatus_SFP_25GBASE_SR TransceiverStatus_Pid = 59
	//
	TransceiverStatus_SFP_25GBASE_LR TransceiverStatus_Pid = 60
	//
	TransceiverStatus_SFP_25GBASE_ER TransceiverStatus_Pid = 61
	//
	TransceiverStatus_SFP_25GBASE_AOC TransceiverStatus_Pid = 62
	//
	TransceiverStatus_SFP_10GBASE_SR TransceiverStatus_Pid = 63
	//
	TransceiverStatus_SFP_10GBASE_LR TransceiverStatus_Pid = 64
	//
	TransceiverStatus_SFP_10GBASE_LRM TransceiverStatus_Pid = 65
	//
	TransceiverStatus_SFP_10GBASE_ER TransceiverStatus_Pid = 66
	//
	TransceiverStatus_SFP_10GBASE_AOC TransceiverStatus_Pid = 67
	//
	TransceiverStatus_SFP_10GBASE_CU TransceiverStatus_Pid = 68
	//
	TransceiverStatus_QSFP_100G_CWDM4 TransceiverStatus_Pid = 69
	//
	TransceiverStatus_QSFP_100G_PSM4 TransceiverStatus_Pid = 70
	//
	TransceiverStatus_PID_NA TransceiverStatus_Pid = 1000
)

var TransceiverStatus_Pid_name = map[int32]string{
	0:    "UNKNOWN",
	1:    "QSFP_100G_CR4",
	2:    "QSFP_40GBASE_CR4",
	3:    "SFP_25GBASE_CR_S",
	4:    "SFP_25GBASE_CR_L",
	5:    "SFP_25GBASE_CR_N",
	50:   "QSFP_100G_AOC",
	51:   "QSFP_100G_ACC",
	52:   "QSFP_100G_SR4",
	53:   "QSFP_100G_LR4",
	54:   "QSFP_100G_ER4",
	55:   "QSFP_40GBASE_ER4",
	56:   "QSFP_40GBASE_SR4",
	57:   "QSFP_40GBASE_LR4",
	58:   "QSFP_40GBASE_AOC",
	59:   "SFP_25GBASE_SR",
	60:   "SFP_25GBASE_LR",
	61:   "SFP_25GBASE_ER",
	62:   "SFP_25GBASE_AOC",
	63:   "SFP_10GBASE_SR",
	64:   "SFP_10GBASE_LR",
	65:   "SFP_10GBASE_LRM",
	66:   "SFP_10GBASE_ER",
	67:   "SFP_10GBASE_AOC",
	68:   "SFP_10GBASE_CU",
	69:   "QSFP_100G_CWDM4",
	70:   "QSFP_100G_PSM4",
	1000: "PID_NA",
}
var TransceiverStatus_Pid_value = map[string]int32{
	"UNKNOWN":          0,
	"QSFP_100G_CR4":    1,
	"QSFP_40GBASE_CR4": 2,
	"SFP_25GBASE_CR_S": 3,
	"SFP_25GBASE_CR_L": 4,
	"SFP_25GBASE_CR_N": 5,
	"QSFP_100G_AOC":    50,
	"QSFP_100G_ACC":    51,
	"QSFP_100G_SR4":    52,
	"QSFP_100G_LR4":    53,
	"QSFP_100G_ER4":    54,
	"QSFP_40GBASE_ER4": 55,
	"QSFP_40GBASE_SR4": 56,
	"QSFP_40GBASE_LR4": 57,
	"QSFP_40GBASE_AOC": 58,
	"SFP_25GBASE_SR":   59,
	"SFP_25GBASE_LR":   60,
	"SFP_25GBASE_ER":   61,
	"SFP_25GBASE_AOC":  62,
	"SFP_10GBASE_SR":   63,
	"SFP_10GBASE_LR":   64,
	"SFP_10GBASE_LRM":  65,
	"SFP_10GBASE_ER":   66,
	"SFP_10GBASE_AOC":  67,
	"SFP_10GBASE_CU":   68,
	"QSFP_100G_CWDM4":  69,
	"QSFP_100G_PSM4":   70,
	"PID_NA":           1000,
}

func (TransceiverStatus_Pid) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{6, 2}
}

//
type NetworkInterface struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	// Object name is Serial-Number of the SmartNIC
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// NetworkInterfaceSpec contains the configuration of the network adapter.
	Spec NetworkInterfaceSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// NetworkInterfaceStatus contains the current state of the network adapter.
	Status NetworkInterfaceStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *NetworkInterface) Reset()                    { *m = NetworkInterface{} }
func (m *NetworkInterface) String() string            { return proto.CompactTextString(m) }
func (*NetworkInterface) ProtoMessage()               {}
func (*NetworkInterface) Descriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{0} }

func (m *NetworkInterface) GetSpec() NetworkInterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return NetworkInterfaceSpec{}
}

func (m *NetworkInterface) GetStatus() NetworkInterfaceStatus {
	if m != nil {
		return m.Status
	}
	return NetworkInterfaceStatus{}
}

// NetworkInterfaceHostStatus is populated for PF and VF
type NetworkInterfaceHostStatus struct {
	// interface name seen by the host driver.
	HostIfName string `protobuf:"bytes,1,opt,name=HostIfName,json=host-ifname,omitempty,proto3" json:"host-ifname,omitempty"`
	// PCIE Device ID.
	DeviceID string `protobuf:"bytes,2,opt,name=DeviceID,json=device-id,omitempty,proto3" json:"device-id,omitempty"`
}

func (m *NetworkInterfaceHostStatus) Reset()         { *m = NetworkInterfaceHostStatus{} }
func (m *NetworkInterfaceHostStatus) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceHostStatus) ProtoMessage()    {}
func (*NetworkInterfaceHostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{1}
}

func (m *NetworkInterfaceHostStatus) GetHostIfName() string {
	if m != nil {
		return m.HostIfName
	}
	return ""
}

func (m *NetworkInterfaceHostStatus) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

// NetworkInterfaceSpec
type NetworkInterfaceSpec struct {
	// desired Admin state of the port
	AdminStatus string `protobuf:"bytes,1,opt,name=AdminStatus,json=admin-status,omitempty,proto3" json:"admin-status,omitempty"`
	// Intefaae speed
	Speed string `protobuf:"bytes,2,opt,name=Speed,json=speed,omitempty,proto3" json:"speed,omitempty"`
	// Mtu of the interface
	MTU uint32 `protobuf:"varint,3,opt,name=MTU,json=mtu,omitempty,proto3" json:"mtu,omitempty"`
	// Pause Spec
	Pause *PauseSpec `protobuf:"bytes,4,opt,name=Pause,json=pause,omitempty" json:"pause,omitempty"`
	// Type specifies the type of interface
	Type string `protobuf:"bytes,5,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	//
	AttachTenant string `protobuf:"bytes,6,opt,name=AttachTenant,json=attach-tenant,omitempty,proto3" json:"attach-tenant,omitempty"`
	// AttachNetwork associates the interface with a Network. This is only valid for HOST_PF type.
	AttachNetwork string `protobuf:"bytes,7,opt,name=AttachNetwork,json=attach-network,omitempty,proto3" json:"attach-network,omitempty"`
	//
	IPAllocType string `protobuf:"bytes,8,opt,name=IPAllocType,json=ip-alloc-type,omitempty,proto3" json:"ip-alloc-type,omitempty"`
	// Interface IP Configuration if any.
	IPConfig *cluster2.IPConfig `protobuf:"bytes,9,opt,name=IPConfig,json=ip-config,omitempty" json:"ip-config,omitempty"`
	// Override system allocated MAC address
	MACAddress string `protobuf:"bytes,10,opt,name=MACAddress,json=mac-address,omitempty,proto3" json:"mac-address,omitempty"`
}

func (m *NetworkInterfaceSpec) Reset()         { *m = NetworkInterfaceSpec{} }
func (m *NetworkInterfaceSpec) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceSpec) ProtoMessage()    {}
func (*NetworkInterfaceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{2}
}

func (m *NetworkInterfaceSpec) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetSpeed() string {
	if m != nil {
		return m.Speed
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *NetworkInterfaceSpec) GetPause() *PauseSpec {
	if m != nil {
		return m.Pause
	}
	return nil
}

func (m *NetworkInterfaceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetAttachTenant() string {
	if m != nil {
		return m.AttachTenant
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetAttachNetwork() string {
	if m != nil {
		return m.AttachNetwork
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetIPAllocType() string {
	if m != nil {
		return m.IPAllocType
	}
	return ""
}

func (m *NetworkInterfaceSpec) GetIPConfig() *cluster2.IPConfig {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

func (m *NetworkInterfaceSpec) GetMACAddress() string {
	if m != nil {
		return m.MACAddress
	}
	return ""
}

// NetworkInterfaceStatus
type NetworkInterfaceStatus struct {
	//
	Name string `protobuf:"bytes,1,opt,name=Name,json=dsc,omitempty,proto3" json:"dsc,omitempty"`
	//
	DSC string `protobuf:"bytes,2,opt,name=DSC,json=dsc,omitempty,proto3" json:"dsc,omitempty"`
	//
	Type string `protobuf:"bytes,3,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	//
	OperStatus string `protobuf:"bytes,4,opt,name=OperStatus,json=oper-status,omitempty,proto3" json:"oper-status,omitempty"`
	//
	PrimaryMac string `protobuf:"bytes,5,opt,name=PrimaryMac,json=primary-mac,omitempty,proto3" json:"primary-mac,omitempty"`
	//
	IFHostStatus *NetworkInterfaceHostStatus `protobuf:"bytes,6,opt,name=IFHostStatus,json=if-host-status,omitempty" json:"if-host-status,omitempty"`
	//
	IFUplinkStatus *NetworkInterfaceUplinkStatus `protobuf:"bytes,7,opt,name=IFUplinkStatus,json=if-uplink-status,omitempty" json:"if-uplink-status,omitempty"`
	//
	MirrorEnabled bool `protobuf:"varint,8,opt,name=MirrorEnabled,json=mirror-enabled,omitempty,proto3" json:"mirror-enabled,omitempty"`
	// Set only if interface is on Venice Node.
	ClusterNode string `protobuf:"bytes,9,opt,name=ClusterNode,json=cluster-node,omitempty,proto3" json:"cluster-node,omitempty"`
}

func (m *NetworkInterfaceStatus) Reset()         { *m = NetworkInterfaceStatus{} }
func (m *NetworkInterfaceStatus) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceStatus) ProtoMessage()    {}
func (*NetworkInterfaceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{3}
}

func (m *NetworkInterfaceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkInterfaceStatus) GetDSC() string {
	if m != nil {
		return m.DSC
	}
	return ""
}

func (m *NetworkInterfaceStatus) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkInterfaceStatus) GetOperStatus() string {
	if m != nil {
		return m.OperStatus
	}
	return ""
}

func (m *NetworkInterfaceStatus) GetPrimaryMac() string {
	if m != nil {
		return m.PrimaryMac
	}
	return ""
}

func (m *NetworkInterfaceStatus) GetIFHostStatus() *NetworkInterfaceHostStatus {
	if m != nil {
		return m.IFHostStatus
	}
	return nil
}

func (m *NetworkInterfaceStatus) GetIFUplinkStatus() *NetworkInterfaceUplinkStatus {
	if m != nil {
		return m.IFUplinkStatus
	}
	return nil
}

func (m *NetworkInterfaceStatus) GetMirrorEnabled() bool {
	if m != nil {
		return m.MirrorEnabled
	}
	return false
}

func (m *NetworkInterfaceStatus) GetClusterNode() string {
	if m != nil {
		return m.ClusterNode
	}
	return ""
}

//
type NetworkInterfaceUplinkStatus struct {
	// LinkSpeed auto-negotiated
	LinkSpeed string `protobuf:"bytes,1,opt,name=LinkSpeed,json=link-speed,omitempty,proto3" json:"link-speed,omitempty"`
	//
	TransceiverStatus *TransceiverStatus `protobuf:"bytes,2,opt,name=TransceiverStatus,json=transceiver-status,omitempty" json:"transceiver-status,omitempty"`
}

func (m *NetworkInterfaceUplinkStatus) Reset()         { *m = NetworkInterfaceUplinkStatus{} }
func (m *NetworkInterfaceUplinkStatus) String() string { return proto.CompactTextString(m) }
func (*NetworkInterfaceUplinkStatus) ProtoMessage()    {}
func (*NetworkInterfaceUplinkStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{4}
}

func (m *NetworkInterfaceUplinkStatus) GetLinkSpeed() string {
	if m != nil {
		return m.LinkSpeed
	}
	return ""
}

func (m *NetworkInterfaceUplinkStatus) GetTransceiverStatus() *TransceiverStatus {
	if m != nil {
		return m.TransceiverStatus
	}
	return nil
}

//
type PauseSpec struct {
	// Pause type
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	// TX Pause enabled
	TxPauseEnabled bool `protobuf:"varint,2,opt,name=TxPauseEnabled,json=tx-pause-enabled,omitempty,proto3" json:"tx-pause-enabled,omitempty"`
	// RX Pause enabled
	RxPauseEnabled bool `protobuf:"varint,3,opt,name=RxPauseEnabled,json=rx-pause-enabled,omitempty,proto3" json:"rx-pause-enabled,omitempty"`
}

func (m *PauseSpec) Reset()                    { *m = PauseSpec{} }
func (m *PauseSpec) String() string            { return proto.CompactTextString(m) }
func (*PauseSpec) ProtoMessage()               {}
func (*PauseSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetworkinterface, []int{5} }

func (m *PauseSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PauseSpec) GetTxPauseEnabled() bool {
	if m != nil {
		return m.TxPauseEnabled
	}
	return false
}

func (m *PauseSpec) GetRxPauseEnabled() bool {
	if m != nil {
		return m.RxPauseEnabled
	}
	return false
}

//
type TransceiverStatus struct {
	//
	TransceiverState string `protobuf:"bytes,1,opt,name=TransceiverState,json=state,omitempty,proto3" json:"state,omitempty"`
	//
	TranceiverCableType string `protobuf:"bytes,2,opt,name=TranceiverCableType,json=cable-type,omitempty,proto3" json:"cable-type,omitempty"`
	//
	TranceiverPid string `protobuf:"bytes,3,opt,name=TranceiverPid,json=pid,omitempty,proto3" json:"pid,omitempty"`
}

func (m *TransceiverStatus) Reset()         { *m = TransceiverStatus{} }
func (m *TransceiverStatus) String() string { return proto.CompactTextString(m) }
func (*TransceiverStatus) ProtoMessage()    {}
func (*TransceiverStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorNetworkinterface, []int{6}
}

func (m *TransceiverStatus) GetTransceiverState() string {
	if m != nil {
		return m.TransceiverState
	}
	return ""
}

func (m *TransceiverStatus) GetTranceiverCableType() string {
	if m != nil {
		return m.TranceiverCableType
	}
	return ""
}

func (m *TransceiverStatus) GetTranceiverPid() string {
	if m != nil {
		return m.TranceiverPid
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkInterface)(nil), "network.NetworkInterface")
	proto.RegisterType((*NetworkInterfaceHostStatus)(nil), "network.NetworkInterfaceHostStatus")
	proto.RegisterType((*NetworkInterfaceSpec)(nil), "network.NetworkInterfaceSpec")
	proto.RegisterType((*NetworkInterfaceStatus)(nil), "network.NetworkInterfaceStatus")
	proto.RegisterType((*NetworkInterfaceUplinkStatus)(nil), "network.NetworkInterfaceUplinkStatus")
	proto.RegisterType((*PauseSpec)(nil), "network.PauseSpec")
	proto.RegisterType((*TransceiverStatus)(nil), "network.TransceiverStatus")
	proto.RegisterEnum("network.IFStatus", IFStatus_name, IFStatus_value)
	proto.RegisterEnum("network.PauseType", PauseType_name, PauseType_value)
	proto.RegisterEnum("network.IFType", IFType_name, IFType_value)
	proto.RegisterEnum("network.IPAllocTypes", IPAllocTypes_name, IPAllocTypes_value)
	proto.RegisterEnum("network.NetworkInterfaceStatus_IFType", NetworkInterfaceStatus_IFType_name, NetworkInterfaceStatus_IFType_value)
	proto.RegisterEnum("network.TransceiverStatus_State", TransceiverStatus_State_name, TransceiverStatus_State_value)
	proto.RegisterEnum("network.TransceiverStatus_CableType", TransceiverStatus_CableType_name, TransceiverStatus_CableType_value)
	proto.RegisterEnum("network.TransceiverStatus_Pid", TransceiverStatus_Pid_name, TransceiverStatus_Pid_value)
}
func (m *NetworkInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkinterface(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkinterface(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetworkinterface(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetworkinterface(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NetworkInterfaceHostStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterfaceHostStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostIfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.HostIfName)))
		i += copy(dAtA[i:], m.HostIfName)
	}
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	return i, nil
}

func (m *NetworkInterfaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterfaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdminStatus) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.AdminStatus)))
		i += copy(dAtA[i:], m.AdminStatus)
	}
	if len(m.Speed) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.Speed)))
		i += copy(dAtA[i:], m.Speed)
	}
	if m.MTU != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.MTU))
	}
	if m.Pause != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.Pause.Size()))
		n5, err := m.Pause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.AttachTenant) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.AttachTenant)))
		i += copy(dAtA[i:], m.AttachTenant)
	}
	if len(m.AttachNetwork) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.AttachNetwork)))
		i += copy(dAtA[i:], m.AttachNetwork)
	}
	if len(m.IPAllocType) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.IPAllocType)))
		i += copy(dAtA[i:], m.IPAllocType)
	}
	if m.IPConfig != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.IPConfig.Size()))
		n6, err := m.IPConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.MACAddress) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.MACAddress)))
		i += copy(dAtA[i:], m.MACAddress)
	}
	return i, nil
}

func (m *NetworkInterfaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterfaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DSC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.DSC)))
		i += copy(dAtA[i:], m.DSC)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.OperStatus) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.OperStatus)))
		i += copy(dAtA[i:], m.OperStatus)
	}
	if len(m.PrimaryMac) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.PrimaryMac)))
		i += copy(dAtA[i:], m.PrimaryMac)
	}
	if m.IFHostStatus != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.IFHostStatus.Size()))
		n7, err := m.IFHostStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.IFUplinkStatus != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.IFUplinkStatus.Size()))
		n8, err := m.IFUplinkStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.MirrorEnabled {
		dAtA[i] = 0x40
		i++
		if m.MirrorEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ClusterNode) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.ClusterNode)))
		i += copy(dAtA[i:], m.ClusterNode)
	}
	return i, nil
}

func (m *NetworkInterfaceUplinkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkInterfaceUplinkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LinkSpeed) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.LinkSpeed)))
		i += copy(dAtA[i:], m.LinkSpeed)
	}
	if m.TransceiverStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(m.TransceiverStatus.Size()))
		n9, err := m.TransceiverStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *PauseSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.TxPauseEnabled {
		dAtA[i] = 0x10
		i++
		if m.TxPauseEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RxPauseEnabled {
		dAtA[i] = 0x18
		i++
		if m.RxPauseEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TransceiverStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransceiverStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TransceiverState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.TransceiverState)))
		i += copy(dAtA[i:], m.TransceiverState)
	}
	if len(m.TranceiverCableType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.TranceiverCableType)))
		i += copy(dAtA[i:], m.TranceiverCableType)
	}
	if len(m.TranceiverPid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetworkinterface(dAtA, i, uint64(len(m.TranceiverPid)))
		i += copy(dAtA[i:], m.TranceiverPid)
	}
	return i, nil
}

func encodeVarintNetworkinterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkInterface) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetworkinterface(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetworkinterface(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetworkinterface(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetworkinterface(uint64(l))
	return n
}

func (m *NetworkInterfaceHostStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostIfName)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	return n
}

func (m *NetworkInterfaceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdminStatus)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.Speed)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.MTU != 0 {
		n += 1 + sovNetworkinterface(uint64(m.MTU))
	}
	if m.Pause != nil {
		l = m.Pause.Size()
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.AttachTenant)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.AttachNetwork)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.IPAllocType)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.IPConfig != nil {
		l = m.IPConfig.Size()
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.MACAddress)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	return n
}

func (m *NetworkInterfaceStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.DSC)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.OperStatus)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.PrimaryMac)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.IFHostStatus != nil {
		l = m.IFHostStatus.Size()
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.IFUplinkStatus != nil {
		l = m.IFUplinkStatus.Size()
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.MirrorEnabled {
		n += 2
	}
	l = len(m.ClusterNode)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	return n
}

func (m *NetworkInterfaceUplinkStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.LinkSpeed)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.TransceiverStatus != nil {
		l = m.TransceiverStatus.Size()
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	return n
}

func (m *PauseSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	if m.TxPauseEnabled {
		n += 2
	}
	if m.RxPauseEnabled {
		n += 2
	}
	return n
}

func (m *TransceiverStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.TransceiverState)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.TranceiverCableType)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	l = len(m.TranceiverPid)
	if l > 0 {
		n += 1 + l + sovNetworkinterface(uint64(l))
	}
	return n
}

func sovNetworkinterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkinterface(x uint64) (n int) {
	return sovNetworkinterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterfaceHostStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterfaceHostStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterfaceHostStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterfaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterfaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterfaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Speed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pause == nil {
				m.Pause = &PauseSpec{}
			}
			if err := m.Pause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachTenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachTenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAllocType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAllocType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPConfig == nil {
				m.IPConfig = &cluster2.IPConfig{}
			}
			if err := m.IPConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterfaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterfaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterfaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DSC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryMac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryMac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFHostStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IFHostStatus == nil {
				m.IFHostStatus = &NetworkInterfaceHostStatus{}
			}
			if err := m.IFHostStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IFUplinkStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IFUplinkStatus == nil {
				m.IFUplinkStatus = &NetworkInterfaceUplinkStatus{}
			}
			if err := m.IFUplinkStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MirrorEnabled = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkInterfaceUplinkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkInterfaceUplinkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkInterfaceUplinkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkSpeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkSpeed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransceiverStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransceiverStatus == nil {
				m.TransceiverStatus = &TransceiverStatus{}
			}
			if err := m.TransceiverStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPauseEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPauseEnabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPauseEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxPauseEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransceiverStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransceiverStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransceiverStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransceiverState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransceiverState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranceiverCableType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranceiverCableType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranceiverPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranceiverPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkinterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkinterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkinterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkinterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkinterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkinterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkinterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkinterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkinterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkinterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("networkinterface.proto", fileDescriptorNetworkinterface) }

var fileDescriptorNetworkinterface = []byte{
	// 1730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4b, 0x73, 0x22, 0xd7,
	0x15, 0x56, 0x23, 0x24, 0xe0, 0xa0, 0xc7, 0xd5, 0x95, 0x34, 0x02, 0x4a, 0x11, 0x53, 0x24, 0x93,
	0xd2, 0x4c, 0x4d, 0xc3, 0x3c, 0xb0, 0x1d, 0x3b, 0x8e, 0x63, 0x1e, 0x8d, 0x86, 0x1a, 0x01, 0xed,
	0x6e, 0x64, 0xd7, 0x38, 0xa9, 0xa2, 0x5a, 0xcd, 0x45, 0xea, 0x0c, 0xfd, 0x48, 0x77, 0x33, 0xb6,
	0x56, 0x59, 0xa4, 0xa2, 0xd2, 0x3a, 0x3f, 0xc1, 0x55, 0xd9, 0x68, 0x91, 0x5d, 0x36, 0xf9, 0x05,
	0xb3, 0x74, 0x65, 0x95, 0x4d, 0xa8, 0x94, 0x56, 0x2e, 0x7e, 0x45, 0xea, 0xde, 0x6e, 0xa0, 0x69,
	0x40, 0xf1, 0xd2, 0x3b, 0xce, 0x77, 0xbe, 0xf3, 0xb8, 0xe7, 0x9e, 0x73, 0x6e, 0x17, 0xf0, 0xc0,
	0x20, 0xee, 0x37, 0xa6, 0xfd, 0x56, 0x33, 0x5c, 0x62, 0xf7, 0x14, 0x95, 0xe4, 0x2d, 0xdb, 0x74,
	0x4d, 0x1c, 0xf3, 0xf1, 0xcc, 0xe1, 0x85, 0x69, 0x5e, 0xf4, 0x49, 0x41, 0xb1, 0xb4, 0x82, 0x62,
	0x18, 0xa6, 0xab, 0xb8, 0x9a, 0x69, 0x38, 0x1e, 0x2d, 0x23, 0x5c, 0x68, 0xee, 0xe5, 0xe0, 0x3c,
	0xaf, 0x9a, 0x7a, 0xc1, 0x22, 0x86, 0xa3, 0x18, 0x5d, 0xb3, 0xe0, 0x7c, 0x53, 0x78, 0x47, 0x0c,
	0x4d, 0x25, 0x85, 0x81, 0xab, 0xf5, 0x1d, 0x6a, 0x7a, 0x41, 0x8c, 0xa0, 0x75, 0x41, 0x33, 0xd4,
	0xfe, 0xa0, 0x4b, 0xc6, 0x6e, 0xf8, 0x80, 0x9b, 0x0b, 0xf3, 0xc2, 0x2c, 0x30, 0xf8, 0x7c, 0xd0,
	0x63, 0x12, 0x13, 0xd8, 0x2f, 0x9f, 0xfe, 0x68, 0x49, 0x54, 0x9a, 0xa3, 0x4e, 0x5c, 0xc5, 0xa7,
	0x25, 0xde, 0xd9, 0x3d, 0xff, 0xe7, 0x96, 0xa3, 0x2b, 0xb6, 0x6b, 0x68, 0xaa, 0x27, 0xe7, 0xfe,
	0x13, 0x01, 0xd4, 0xf4, 0x4e, 0x58, 0x1f, 0x9f, 0x1c, 0x7f, 0x08, 0x5c, 0x3b, 0xc5, 0x3d, 0xe4,
	0x8e, 0x93, 0x2f, 0x36, 0xf3, 0x8a, 0xa5, 0xe5, 0xdb, 0x57, 0x16, 0x69, 0x10, 0x57, 0x29, 0xef,
	0xbe, 0x1f, 0x66, 0x57, 0xbe, 0x1f, 0x66, 0xb9, 0xd1, 0x30, 0x1b, 0x7b, 0xaa, 0x19, 0x7d, 0xcd,
	0x20, 0xd2, 0xf8, 0x07, 0xae, 0x01, 0xd7, 0x4a, 0x45, 0x98, 0xdd, 0x36, 0xb3, 0x6b, 0x9d, 0xff,
	0x81, 0xa8, 0x2e, 0xb3, 0xcc, 0x04, 0x2c, 0xb7, 0x68, 0x6e, 0x4f, 0x4d, 0x5d, 0x73, 0x89, 0x6e,
	0xb9, 0x57, 0x52, 0x48, 0xc6, 0x32, 0x44, 0x65, 0x8b, 0xa8, 0xa9, 0x55, 0xe6, 0xea, 0x67, 0x79,
	0xff, 0x0a, 0xf2, 0xe1, 0x44, 0x29, 0xa9, 0xfc, 0x80, 0x3a, 0xa6, 0x4e, 0x1d, 0x8b, 0xa8, 0x41,
	0xa7, 0xb3, 0x32, 0xfe, 0x1d, 0xac, 0xcb, 0xae, 0xe2, 0x0e, 0x9c, 0x54, 0x94, 0xb9, 0xcd, 0x2e,
	0x77, 0xcb, 0x68, 0xe5, 0x94, 0xef, 0x18, 0x39, 0x4c, 0x0e, 0xb8, 0x9e, 0x43, 0x3e, 0x39, 0xf8,
	0xd7, 0x5f, 0xd2, 0xbb, 0x78, 0x27, 0xdc, 0x43, 0x4e, 0xee, 0x3b, 0x0e, 0x32, 0x61, 0xff, 0xaf,
	0x4c, 0xc7, 0xf5, 0x62, 0xe0, 0x2a, 0x00, 0x95, 0xea, 0xbd, 0xa6, 0xa2, 0x13, 0x56, 0xf2, 0x44,
	0x39, 0x3d, 0x1a, 0x66, 0xf7, 0x2f, 0x4d, 0xc7, 0xe5, 0xb5, 0x9e, 0xa1, 0xe8, 0x24, 0x10, 0x78,
	0x31, 0x8c, 0x3f, 0x83, 0x78, 0x95, 0xbc, 0xd3, 0x54, 0x52, 0xaf, 0xb2, 0xf2, 0x27, 0xca, 0x07,
	0xa3, 0x61, 0x76, 0xb7, 0xcb, 0x30, 0x5e, 0xeb, 0x06, 0x3c, 0x2c, 0x02, 0x73, 0xff, 0x5c, 0x87,
	0xbd, 0x45, 0xb5, 0xc5, 0xbf, 0x87, 0x64, 0xa9, 0xab, 0x6b, 0x86, 0x5f, 0x38, 0x2f, 0xbf, 0xc2,
	0xed, 0x75, 0x7a, 0x47, 0x76, 0x6d, 0xc1, 0x18, 0xe8, 0xc7, 0xf5, 0x9a, 0xa7, 0x7b, 0x3c, 0x1a,
	0x66, 0x1f, 0x28, 0x94, 0xcb, 0xcf, 0x95, 0x6b, 0x09, 0x8e, 0x5f, 0xc2, 0x9a, 0x6c, 0x11, 0xd2,
	0xf5, 0x73, 0xde, 0x1d, 0x0d, 0xb3, 0xdb, 0x0e, 0x05, 0x02, 0xb6, 0x61, 0x00, 0x3f, 0x87, 0xd5,
	0x46, 0xfb, 0x8c, 0xb5, 0xc6, 0x66, 0x79, 0xff, 0xbd, 0xd7, 0x50, 0x9b, 0xba, 0x3b, 0x08, 0x18,
	0xcd, 0x8a, 0xf8, 0x35, 0xac, 0x89, 0xca, 0xc0, 0x21, 0xfe, 0xc5, 0xe3, 0xc9, 0xc5, 0x33, 0x94,
	0x35, 0xd1, 0x81, 0xef, 0x68, 0xdb, 0xa2, 0x50, 0x30, 0x7e, 0x08, 0xc0, 0x15, 0x88, 0xd2, 0x69,
	0x48, 0xad, 0xb1, 0x9c, 0x1f, 0xdd, 0x5e, 0xa7, 0xb7, 0xa7, 0xb5, 0xa0, 0x1a, 0x5a, 0x89, 0x2d,
	0xf7, 0xca, 0x0a, 0x7a, 0x09, 0xc9, 0xf8, 0x12, 0x36, 0x4a, 0xae, 0xab, 0xa8, 0x97, 0x6d, 0x62,
	0x28, 0x86, 0x9b, 0x5a, 0x67, 0xce, 0x3e, 0xfe, 0xee, 0x3a, 0x9d, 0x81, 0x38, 0x6d, 0x85, 0xae,
	0x44, 0x7a, 0x78, 0x4b, 0xed, 0x0f, 0x1c, 0x97, 0xd8, 0x05, 0x8f, 0x35, 0x1a, 0x66, 0x0f, 0x14,
	0x66, 0xc5, 0xbb, 0x0c, 0x08, 0x04, 0x58, 0xa6, 0xc0, 0x0d, 0xd8, 0xf4, 0x22, 0xf9, 0xf7, 0x9b,
	0x8a, 0xb1, 0x50, 0x87, 0xa3, 0x61, 0x36, 0xe5, 0xdb, 0xf8, 0xd5, 0x08, 0x78, 0x5b, 0xaa, 0xc1,
	0xe7, 0x90, 0xac, 0x8b, 0xa5, 0x7e, 0xdf, 0x54, 0x59, 0x11, 0xe2, 0xcc, 0x59, 0xf1, 0xf6, 0x3a,
	0xbd, 0x3f, 0x29, 0xc2, 0x54, 0xcd, 0x9a, 0xe2, 0x40, 0xb3, 0x78, 0x85, 0x22, 0x7c, 0xa8, 0x26,
	0xcb, 0x14, 0xf8, 0x0b, 0x88, 0xd7, 0xc5, 0x8a, 0x69, 0xf4, 0xb4, 0x8b, 0x54, 0x82, 0xdd, 0xd8,
	0x4e, 0xde, 0xaf, 0x44, 0x7e, 0xac, 0xf0, 0x1a, 0x5c, 0xb3, 0x78, 0x95, 0x89, 0xc1, 0x06, 0x5f,
	0x00, 0xe2, 0xaf, 0x01, 0x1a, 0xa5, 0x4a, 0xa9, 0xdb, 0xb5, 0x89, 0xe3, 0xa4, 0x60, 0xd2, 0xc6,
	0x58, 0xa0, 0xea, 0x96, 0x7d, 0xdc, 0x50, 0x54, 0xaa, 0x3d, 0x7e, 0x4c, 0x53, 0xde, 0xd7, 0x15,
	0x95, 0x57, 0x3c, 0x72, 0x70, 0xf8, 0x16, 0xc2, 0xb9, 0xbf, 0xc5, 0xe0, 0xc1, 0xe2, 0x0d, 0x82,
	0xf3, 0x10, 0x0d, 0xcc, 0xf5, 0x0e, 0x6d, 0xd4, 0xae, 0x13, 0xdc, 0x51, 0xb3, 0x22, 0xe6, 0x61,
	0xb5, 0x2a, 0x57, 0xfc, 0x71, 0xf8, 0xff, 0xf4, 0xaf, 0xfd, 0x56, 0x5c, 0x65, 0xfc, 0x4f, 0x6f,
	0xaf, 0xd3, 0xbf, 0x1c, 0xdf, 0xc2, 0xe2, 0x84, 0xf2, 0x3f, 0xbe, 0x43, 0xdf, 0x00, 0xb4, 0x2c,
	0x62, 0x07, 0x36, 0x66, 0xa2, 0x9c, 0x5f, 0x36, 0xf8, 0xfb, 0xa6, 0x45, 0xec, 0xf9, 0xb9, 0x5f,
	0x0c, 0xd3, 0xcb, 0x10, 0x6d, 0x4d, 0x57, 0xec, 0xab, 0x86, 0xa2, 0xfa, 0x73, 0x74, 0xcf, 0x65,
	0x58, 0x1e, 0x97, 0xd7, 0x95, 0x60, 0x29, 0x16, 0xc3, 0xf8, 0x8f, 0xb0, 0x51, 0xaf, 0x4d, 0xf7,
	0x2b, 0x1b, 0xac, 0xe4, 0x8b, 0x9f, 0x2f, 0x5d, 0xf5, 0x53, 0xaa, 0x37, 0x12, 0x5a, 0x8f, 0x67,
	0x2b, 0x76, 0xee, 0x2c, 0x4b, 0x35, 0xf8, 0x0a, 0xb6, 0xea, 0xb5, 0x33, 0xab, 0xaf, 0x19, 0x6f,
	0xfd, 0xa0, 0x31, 0x16, 0xf4, 0xd1, 0xd2, 0xa0, 0x41, 0x72, 0xf9, 0x68, 0x34, 0xcc, 0x66, 0xb4,
	0x1e, 0x3f, 0x60, 0xe0, 0x7c, 0xe0, 0x7b, 0x74, 0x74, 0xb8, 0x1b, 0x9a, 0x6d, 0x9b, 0xb6, 0x60,
	0x28, 0xe7, 0x7d, 0xd2, 0x65, 0xf3, 0x18, 0xf7, 0x4e, 0xa2, 0x33, 0x05, 0x4f, 0x3c, 0x4d, 0xf0,
	0x24, 0xcb, 0x34, 0xf8, 0x04, 0x92, 0x15, 0x6f, 0xce, 0x9a, 0x66, 0x97, 0xb0, 0xd9, 0x4b, 0x94,
	0x33, 0x74, 0xb1, 0xfb, 0xe3, 0xc7, 0x1b, 0x66, 0x37, 0xd8, 0x34, 0x4b, 0xf0, 0xdc, 0x5f, 0x39,
	0x58, 0xf7, 0x5a, 0x0d, 0xc7, 0x21, 0xda, 0x6c, 0x35, 0x05, 0xb4, 0x82, 0x53, 0x10, 0x7b, 0xd5,
	0x92, 0xdb, 0x1d, 0xb1, 0x86, 0xb8, 0x4c, 0xf2, 0xee, 0x26, 0x1d, 0x63, 0xf5, 0xb4, 0x7a, 0xf8,
	0x08, 0xe0, 0x4c, 0x3c, 0xad, 0x37, 0x5f, 0x77, 0x84, 0xf6, 0x2b, 0xb4, 0x9a, 0xd9, 0xba, 0xbb,
	0x49, 0x83, 0x7f, 0x66, 0xe2, 0x5e, 0xe2, 0x87, 0x90, 0xf4, 0xf5, 0x8d, 0x93, 0x46, 0x1b, 0x45,
	0x33, 0xdb, 0x77, 0x37, 0xe9, 0xa4, 0x4f, 0xd0, 0x2f, 0x74, 0x17, 0xe7, 0x60, 0xe3, 0xb4, 0xd5,
	0x12, 0xcb, 0xa5, 0xca, 0xeb, 0x4e, 0x5b, 0x10, 0xd1, 0x5a, 0x06, 0xdd, 0xdd, 0xa4, 0x37, 0xfa,
	0xa6, 0x69, 0x9d, 0x2b, 0xea, 0x5b, 0xde, 0x25, 0x56, 0xee, 0xdf, 0x1c, 0x1c, 0xde, 0x77, 0x13,
	0xb8, 0x04, 0x89, 0x53, 0x2a, 0xb1, 0x27, 0xc9, 0x1b, 0xd9, 0xd4, 0x68, 0x98, 0xdd, 0xf3, 0x6a,
	0x1f, 0x7a, 0x97, 0x16, 0xa2, 0x78, 0x00, 0x3b, 0x6d, 0x5b, 0x31, 0x1c, 0x95, 0x68, 0xef, 0x26,
	0xc3, 0xe3, 0x7d, 0x10, 0x65, 0x26, 0xed, 0x30, 0xc7, 0x28, 0x3f, 0x1c, 0x0d, 0xb3, 0x87, 0xee,
	0x14, 0x9e, 0xef, 0x82, 0x7b, 0xb5, 0xb9, 0x3f, 0x47, 0x20, 0x31, 0x79, 0xcb, 0x70, 0xcd, 0x5f,
	0x0b, 0xde, 0x11, 0x8e, 0xe9, 0x64, 0x8d, 0x87, 0x96, 0x91, 0x7e, 0xec, 0x0a, 0xf8, 0x12, 0xb6,
	0xda, 0xdf, 0x32, 0x8b, 0x71, 0x7b, 0x45, 0x58, 0x7b, 0xe5, 0xfc, 0xb7, 0x32, 0xe3, 0x7e, 0xcb,
	0xb3, 0xd7, 0x71, 0x41, 0x93, 0xdd, 0xa3, 0xa3, 0x7e, 0xa5, 0x59, 0xbf, 0xab, 0xb3, 0x7e, 0xed,
	0x7b, 0xfc, 0x2e, 0xd7, 0xe5, 0xfe, 0x1e, 0x5f, 0x50, 0x7d, 0x7c, 0x0e, 0x28, 0x04, 0x8e, 0x2b,
	0xf3, 0xd1, 0xed, 0x75, 0xfa, 0xe1, 0xb8, 0x32, 0x73, 0x86, 0x79, 0x46, 0x7d, 0xcc, 0xbe, 0x49,
	0xe8, 0xaf, 0x99, 0x6f, 0x92, 0x59, 0x00, 0x3b, 0xb0, 0x4b, 0xed, 0x3d, 0xf3, 0x0a, 0xcd, 0x8b,
	0x5d, 0x80, 0xb7, 0xc7, 0x3f, 0xbf, 0xbd, 0x4e, 0xff, 0x62, 0x79, 0x98, 0x09, 0x9d, 0x86, 0xda,
	0x53, 0xa9, 0x14, 0x7e, 0x29, 0x17, 0xa2, 0xf8, 0x0d, 0x6c, 0x4e, 0x83, 0x8a, 0x5a, 0xd7, 0x7f,
	0x06, 0x5e, 0xde, 0x5e, 0xa7, 0x8f, 0x96, 0x87, 0x13, 0xb5, 0x2e, 0x0d, 0xb4, 0x69, 0xcd, 0x7c,
	0x15, 0xce, 0x8a, 0xb9, 0x3f, 0xc1, 0x1a, 0x3b, 0x3d, 0xde, 0x80, 0xb8, 0xdc, 0x2e, 0xb5, 0x85,
	0x4e, 0xb3, 0x84, 0x56, 0xf0, 0x0e, 0x6c, 0x7a, 0x92, 0x24, 0x34, 0x5a, 0x5f, 0x0a, 0x55, 0xc4,
	0x61, 0x0c, 0x5b, 0x1e, 0x54, 0x6f, 0xca, 0x82, 0xd4, 0x16, 0xaa, 0x28, 0x32, 0xa5, 0x89, 0x42,
	0xb3, 0x5a, 0x6f, 0x9e, 0xa0, 0x55, 0xbc, 0x07, 0xc8, 0x83, 0x64, 0x51, 0x6a, 0x35, 0x3a, 0x92,
	0x50, 0xaa, 0xa2, 0x28, 0x4e, 0xc1, 0x5e, 0x18, 0xed, 0x08, 0x92, 0x84, 0xd6, 0x72, 0x4f, 0x21,
	0x31, 0xa9, 0x4b, 0x60, 0x85, 0x00, 0xac, 0x57, 0x5a, 0xa2, 0x28, 0x48, 0x88, 0xc3, 0x09, 0x58,
	0xab, 0xd5, 0xcb, 0x82, 0x84, 0x22, 0xb9, 0x7f, 0x44, 0x61, 0x55, 0xd4, 0xba, 0x38, 0x09, 0xb1,
	0xb3, 0xe6, 0xeb, 0x66, 0xeb, 0xab, 0xa6, 0x97, 0xec, 0x17, 0x72, 0x4d, 0xec, 0x3c, 0x7f, 0xf6,
	0xec, 0xa4, 0x53, 0x91, 0x8a, 0x88, 0xa3, 0x59, 0x30, 0xa8, 0xf8, 0xec, 0xa4, 0x5c, 0x92, 0x05,
	0x86, 0x46, 0x58, 0x6e, 0x35, 0xb1, 0xf3, 0xe2, 0x83, 0x31, 0xd8, 0x91, 0xfd, 0x8c, 0x67, 0xd1,
	0x53, 0x14, 0x5d, 0x80, 0x36, 0xd1, 0xda, 0x6c, 0xa8, 0x52, 0xab, 0x82, 0x5e, 0x84, 0xa0, 0x4a,
	0x05, 0xbd, 0x9c, 0x85, 0x64, 0xa9, 0x88, 0x8a, 0xb3, 0xd0, 0xa9, 0x54, 0x44, 0x1f, 0xcc, 0x42,
	0x82, 0x54, 0x44, 0x1f, 0xce, 0xa5, 0x4d, 0xd1, 0x8f, 0xe6, 0x50, 0xea, 0xf1, 0x57, 0x73, 0x28,
	0x75, 0xfa, 0xf1, 0x1c, 0x4a, 0x73, 0xfc, 0x84, 0xdd, 0x5d, 0xe0, 0x30, 0xb2, 0x84, 0x7e, 0x1d,
	0xc6, 0x4e, 0x25, 0xf4, 0x69, 0x18, 0x13, 0x24, 0xf4, 0x1b, 0xbc, 0x0b, 0xdb, 0x41, 0x8c, 0x3a,
	0xfc, 0x6c, 0x4c, 0x7c, 0x3e, 0xc9, 0x08, 0xfd, 0x36, 0x8c, 0x9d, 0x4a, 0xe8, 0xf3, 0xb1, 0xf1,
	0x14, 0x6b, 0xa0, 0x52, 0x98, 0x28, 0x48, 0xa8, 0x1c, 0x26, 0xd2, 0x28, 0x95, 0x30, 0xb1, 0x72,
	0x86, 0xaa, 0x94, 0x18, 0xb8, 0xec, 0xaf, 0xaa, 0x8d, 0x22, 0x12, 0x28, 0x71, 0x0a, 0x8a, 0x72,
	0xa3, 0x88, 0x6a, 0x38, 0x09, 0xeb, 0x62, 0xbd, 0x4a, 0xdb, 0xf9, 0x87, 0xd8, 0x93, 0x43, 0x88,
	0x8f, 0xbf, 0x62, 0xf0, 0x3a, 0x44, 0xce, 0x44, 0xb4, 0x42, 0x9b, 0xad, 0x4a, 0x1b, 0x88, 0x7b,
	0xf2, 0xcc, 0xdf, 0xa9, 0xac, 0x07, 0x93, 0x10, 0xab, 0xd6, 0xe5, 0x52, 0xf9, 0x54, 0xf0, 0x38,
	0xf4, 0x35, 0x42, 0x1c, 0x9d, 0x0f, 0x51, 0xaa, 0xb7, 0xa4, 0x7a, 0xfb, 0x0d, 0x8a, 0x3c, 0xf9,
	0x29, 0x3e, 0x7b, 0x4f, 0xf2, 0xb0, 0x11, 0xfc, 0x24, 0x67, 0x99, 0x99, 0x06, 0xf1, 0xa6, 0x89,
	0x1e, 0x5e, 0x53, 0x11, 0xc7, 0x8e, 0xfd, 0xaa, 0x22, 0xa2, 0x48, 0x19, 0xbd, 0xbf, 0x3b, 0xe2,
	0xbe, 0xbf, 0x3b, 0xe2, 0xfe, 0x7b, 0x77, 0xc4, 0xfd, 0x70, 0x77, 0xb4, 0x22, 0x72, 0xe7, 0xeb,
	0xec, 0xbf, 0x82, 0x97, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xb6, 0x1a, 0x22, 0x24, 0x11,
	0x00, 0x00,
}
