// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package rolloutCliUtilsBackend is a auto generated package.
Input file: svc_rollout.proto
*/
package cli

import (
	"context"
	"fmt"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/rollout"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/cli/gen"
)

func restGetRollout(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*rollout.Rollout); ok {
		nv, err := restcl.RolloutV1().Rollout().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*rollout.RolloutList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.RolloutV1().Rollout().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteRollout(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*rollout.Rollout); ok {
		nv, err := restcl.RolloutV1().Rollout().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostRollout(hostname, token string, obj interface{}) error {
	return fmt.Errorf("create operation not supported for Rollout object")
}

func restPutRollout(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for Rollout object")
}

func restGetRolloutAction(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*rollout.RolloutAction); ok {
		nv, err := restcl.RolloutV1().RolloutAction().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*rollout.RolloutActionList); ok {
		objMeta := api.ObjectMeta{}
		nv, err := restcl.RolloutV1().RolloutAction().Get(loginCtx, &objMeta)
		if err != nil {
			return err
		}
		v.Items = append(v.Items, nv)
	}
	return nil

}

func restDeleteRolloutAction(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*rollout.RolloutAction); ok {
		nv, err := restcl.RolloutV1().RolloutAction().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostRolloutAction(hostname, token string, obj interface{}) error {
	return fmt.Errorf("create operation not supported for RolloutAction object")
}

func restPutRolloutAction(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for RolloutAction object")
}

func init() {
	cl := gen.GetInfo()
	if cl == nil {
		return
	}

	cl.AddRestDeleteFunc("rollout.Rollout", "v1", restDeleteRollout)

	cl.AddRestGetFunc("rollout.Rollout", "v1", restGetRollout)

	cl.AddRestDeleteFunc("rollout.RolloutAction", "v1", restDeleteRolloutAction)

	cl.AddRestGetFunc("rollout.RolloutAction", "v1", restGetRolloutAction)

}
