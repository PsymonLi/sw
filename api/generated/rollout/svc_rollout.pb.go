// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_rollout.proto

package rollout

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoMsgRolloutWatchHelper is a wrapper object for watch events for Rollout objects
type AutoMsgRolloutWatchHelper struct {
	Events []*AutoMsgRolloutWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgRolloutWatchHelper) Reset()         { *m = AutoMsgRolloutWatchHelper{} }
func (m *AutoMsgRolloutWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRolloutWatchHelper) ProtoMessage()    {}
func (*AutoMsgRolloutWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcRollout, []int{0}
}

func (m *AutoMsgRolloutWatchHelper) GetEvents() []*AutoMsgRolloutWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgRolloutWatchHelper_WatchEvent struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Rollout `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) Reset()         { *m = AutoMsgRolloutWatchHelper_WatchEvent{} }
func (m *AutoMsgRolloutWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRolloutWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgRolloutWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcRollout, []int{0, 0}
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) GetObject() *Rollout {
	if m != nil {
		return m.Object
	}
	return nil
}

// RolloutList is a container object for list of Rollout objects
type RolloutList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Rollout objects
	Items []*Rollout `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *RolloutList) Reset()                    { *m = RolloutList{} }
func (m *RolloutList) String() string            { return proto.CompactTextString(m) }
func (*RolloutList) ProtoMessage()               {}
func (*RolloutList) Descriptor() ([]byte, []int) { return fileDescriptorSvcRollout, []int{1} }

func (m *RolloutList) GetItems() []*Rollout {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgRolloutWatchHelper)(nil), "rollout.AutoMsgRolloutWatchHelper")
	proto.RegisterType((*AutoMsgRolloutWatchHelper_WatchEvent)(nil), "rollout.AutoMsgRolloutWatchHelper.WatchEvent")
	proto.RegisterType((*RolloutList)(nil), "rollout.RolloutList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RolloutV1 service

type RolloutV1Client interface {
	// Create Rollout object
	AutoAddRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error)
	// Delete Rollout object
	AutoDeleteRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error)
	// Get Rollout object
	AutoGetRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error)
	// List Rollout objects
	AutoListRollout(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RolloutList, error)
	// Update Rollout object
	AutoUpdateRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error)
	// Watch Rollout objects
	AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RolloutV1_AutoWatchRolloutClient, error)
	AutoWatchSvcRolloutV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RolloutV1_AutoWatchSvcRolloutV1Client, error)
}

type rolloutV1Client struct {
	cc *grpc.ClientConn
}

func NewRolloutV1Client(cc *grpc.ClientConn) RolloutV1Client {
	return &rolloutV1Client{cc}
}

func (c *rolloutV1Client) AutoAddRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error) {
	out := new(Rollout)
	err := grpc.Invoke(ctx, "/rollout.RolloutV1/AutoAddRollout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutV1Client) AutoDeleteRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error) {
	out := new(Rollout)
	err := grpc.Invoke(ctx, "/rollout.RolloutV1/AutoDeleteRollout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutV1Client) AutoGetRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error) {
	out := new(Rollout)
	err := grpc.Invoke(ctx, "/rollout.RolloutV1/AutoGetRollout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutV1Client) AutoListRollout(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RolloutList, error) {
	out := new(RolloutList)
	err := grpc.Invoke(ctx, "/rollout.RolloutV1/AutoListRollout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutV1Client) AutoUpdateRollout(ctx context.Context, in *Rollout, opts ...grpc.CallOption) (*Rollout, error) {
	out := new(Rollout)
	err := grpc.Invoke(ctx, "/rollout.RolloutV1/AutoUpdateRollout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutV1Client) AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RolloutV1_AutoWatchRolloutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RolloutV1_serviceDesc.Streams[0], c.cc, "/rollout.RolloutV1/AutoWatchRollout", opts...)
	if err != nil {
		return nil, err
	}
	x := &rolloutV1AutoWatchRolloutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolloutV1_AutoWatchRolloutClient interface {
	Recv() (*AutoMsgRolloutWatchHelper, error)
	grpc.ClientStream
}

type rolloutV1AutoWatchRolloutClient struct {
	grpc.ClientStream
}

func (x *rolloutV1AutoWatchRolloutClient) Recv() (*AutoMsgRolloutWatchHelper, error) {
	m := new(AutoMsgRolloutWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolloutV1Client) AutoWatchSvcRolloutV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RolloutV1_AutoWatchSvcRolloutV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_RolloutV1_serviceDesc.Streams[1], c.cc, "/rollout.RolloutV1/AutoWatchSvcRolloutV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &rolloutV1AutoWatchSvcRolloutV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolloutV1_AutoWatchSvcRolloutV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type rolloutV1AutoWatchSvcRolloutV1Client struct {
	grpc.ClientStream
}

func (x *rolloutV1AutoWatchSvcRolloutV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RolloutV1 service

type RolloutV1Server interface {
	// Create Rollout object
	AutoAddRollout(context.Context, *Rollout) (*Rollout, error)
	// Delete Rollout object
	AutoDeleteRollout(context.Context, *Rollout) (*Rollout, error)
	// Get Rollout object
	AutoGetRollout(context.Context, *Rollout) (*Rollout, error)
	// List Rollout objects
	AutoListRollout(context.Context, *api.ListWatchOptions) (*RolloutList, error)
	// Update Rollout object
	AutoUpdateRollout(context.Context, *Rollout) (*Rollout, error)
	// Watch Rollout objects
	AutoWatchRollout(*api.ListWatchOptions, RolloutV1_AutoWatchRolloutServer) error
	AutoWatchSvcRolloutV1(*api.ListWatchOptions, RolloutV1_AutoWatchSvcRolloutV1Server) error
}

func RegisterRolloutV1Server(s *grpc.Server, srv RolloutV1Server) {
	s.RegisterService(&_RolloutV1_serviceDesc, srv)
}

func _RolloutV1_AutoAddRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rollout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutV1Server).AutoAddRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutV1/AutoAddRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutV1Server).AutoAddRollout(ctx, req.(*Rollout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutV1_AutoDeleteRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rollout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutV1Server).AutoDeleteRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutV1/AutoDeleteRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutV1Server).AutoDeleteRollout(ctx, req.(*Rollout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutV1_AutoGetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rollout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutV1Server).AutoGetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutV1/AutoGetRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutV1Server).AutoGetRollout(ctx, req.(*Rollout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutV1_AutoListRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutV1Server).AutoListRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutV1/AutoListRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutV1Server).AutoListRollout(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutV1_AutoUpdateRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rollout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutV1Server).AutoUpdateRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutV1/AutoUpdateRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutV1Server).AutoUpdateRollout(ctx, req.(*Rollout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutV1_AutoWatchRollout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolloutV1Server).AutoWatchRollout(m, &rolloutV1AutoWatchRolloutServer{stream})
}

type RolloutV1_AutoWatchRolloutServer interface {
	Send(*AutoMsgRolloutWatchHelper) error
	grpc.ServerStream
}

type rolloutV1AutoWatchRolloutServer struct {
	grpc.ServerStream
}

func (x *rolloutV1AutoWatchRolloutServer) Send(m *AutoMsgRolloutWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _RolloutV1_AutoWatchSvcRolloutV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolloutV1Server).AutoWatchSvcRolloutV1(m, &rolloutV1AutoWatchSvcRolloutV1Server{stream})
}

type RolloutV1_AutoWatchSvcRolloutV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type rolloutV1AutoWatchSvcRolloutV1Server struct {
	grpc.ServerStream
}

func (x *rolloutV1AutoWatchSvcRolloutV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _RolloutV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollout.RolloutV1",
	HandlerType: (*RolloutV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddRollout",
			Handler:    _RolloutV1_AutoAddRollout_Handler,
		},
		{
			MethodName: "AutoDeleteRollout",
			Handler:    _RolloutV1_AutoDeleteRollout_Handler,
		},
		{
			MethodName: "AutoGetRollout",
			Handler:    _RolloutV1_AutoGetRollout_Handler,
		},
		{
			MethodName: "AutoListRollout",
			Handler:    _RolloutV1_AutoListRollout_Handler,
		},
		{
			MethodName: "AutoUpdateRollout",
			Handler:    _RolloutV1_AutoUpdateRollout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchRollout",
			Handler:       _RolloutV1_AutoWatchRollout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcRolloutV1",
			Handler:       _RolloutV1_AutoWatchSvcRolloutV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_rollout.proto",
}

func (m *AutoMsgRolloutWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRolloutWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcRollout(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcRollout(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RolloutList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcRollout(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcRollout(dAtA, i, uint64(m.ListMeta.Size()))
	n3, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcRollout(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgRolloutWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcRollout(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgRolloutWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcRollout(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcRollout(uint64(l))
	}
	return n
}

func (m *RolloutList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcRollout(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcRollout(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcRollout(uint64(l))
		}
	}
	return n
}

func sovSvcRollout(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcRollout(x uint64) (n int) {
	return sovSvcRollout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgRolloutWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRolloutWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRolloutWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgRolloutWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRolloutWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Rollout{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Rollout{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcRollout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcRollout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcRollout
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcRollout
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcRollout(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcRollout = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcRollout   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_rollout.proto", fileDescriptorSvcRollout) }

var fileDescriptorSvcRollout = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xb4, 0x14, 0x98, 0xfe, 0x28, 0xed, 0x00, 0xf9, 0x75, 0x36, 0x86, 0x6d, 0x36,
	0x1a, 0x09, 0xc2, 0x2e, 0x60, 0xc2, 0xa1, 0x37, 0x1a, 0x8d, 0x9a, 0x08, 0x8d, 0x15, 0x5f, 0x2e,
	0xc6, 0x6c, 0xdb, 0xb1, 0x5d, 0xb3, 0x2f, 0x93, 0xee, 0xb4, 0x84, 0xa8, 0x17, 0xbb, 0xfc, 0x03,
	0x7a, 0xf3, 0xe8, 0xd1, 0x9b, 0x3d, 0x79, 0xf4, 0xc8, 0x91, 0xc4, 0x93, 0x1c, 0x36, 0x86, 0x98,
	0x98, 0xf4, 0xaf, 0x30, 0x33, 0xbb, 0x4b, 0xa9, 0x0b, 0x21, 0xbd, 0x74, 0x67, 0x9e, 0x3e, 0xdf,
	0xe7, 0xf3, 0xbc, 0xcc, 0x0c, 0xcc, 0xbb, 0xdd, 0xfa, 0xcb, 0xb6, 0x63, 0x9a, 0x4e, 0x87, 0xa9,
	0xb4, 0xed, 0x30, 0x07, 0x4d, 0x85, 0x5b, 0x69, 0x76, 0xc4, 0x2e, 0xdd, 0x68, 0x1a, 0xac, 0xd5,
	0xa9, 0xa9, 0x75, 0xc7, 0xd2, 0x28, 0xb1, 0x5d, 0xdd, 0x6e, 0x38, 0x9a, 0xbb, 0xaf, 0xe9, 0xd4,
	0xd0, 0x2c, 0xc2, 0xf4, 0xc0, 0x4d, 0xf9, 0x03, 0x20, 0xde, 0xee, 0x30, 0x67, 0xc7, 0x6d, 0x56,
	0x03, 0xfd, 0x33, 0x9d, 0xd5, 0x5b, 0xf7, 0x89, 0x49, 0x49, 0x1b, 0x3d, 0x82, 0xe9, 0xbb, 0x5d,
	0x62, 0x33, 0xb7, 0x00, 0x8a, 0xc9, 0xe5, 0xcc, 0xe6, 0x9a, 0x1a, 0x41, 0x2e, 0xd5, 0xa8, 0x62,
	0x2d, 0x54, 0x65, 0x38, 0xf0, 0xe5, 0x34, 0x11, 0x01, 0xaa, 0xe1, 0x57, 0x7a, 0x05, 0xe1, 0xd0,
	0x03, 0x15, 0x61, 0x6a, 0xef, 0x80, 0x92, 0x02, 0x28, 0x82, 0xe5, 0x99, 0x32, 0x1a, 0xf8, 0x72,
	0x96, 0x1d, 0x50, 0xb2, 0xea, 0x58, 0x06, 0x23, 0x16, 0x65, 0x07, 0x68, 0x0b, 0xa6, 0x2b, 0xb5,
	0xd7, 0xa4, 0xce, 0x0a, 0x13, 0x45, 0xb0, 0x9c, 0xd9, 0xcc, 0x9d, 0xa5, 0x10, 0xb2, 0xcb, 0x0b,
	0x03, 0x5f, 0xce, 0x39, 0xc2, 0x67, 0xa8, 0x2b, 0xcd, 0x9d, 0x1c, 0xe2, 0xcc, 0x3e, 0x27, 0xb5,
	0x44, 0x5e, 0xca, 0x4f, 0x00, 0x33, 0xa1, 0xe4, 0xa1, 0xe1, 0x32, 0xb4, 0x05, 0xc1, 0x5e, 0x18,
	0x73, 0x56, 0xd5, 0xa9, 0xa1, 0xf2, 0x44, 0x76, 0x08, 0xd3, 0xcb, 0xf3, 0x47, 0xbe, 0x9c, 0x38,
	0xf6, 0x65, 0x30, 0xf0, 0xe5, 0xa9, 0x55, 0xc3, 0x36, 0x0d, 0x9b, 0x54, 0xa3, 0x05, 0xaa, 0xc0,
	0x69, 0xae, 0xe7, 0x9e, 0x85, 0xe4, 0x39, 0x79, 0x64, 0x2c, 0x5f, 0x3b, 0x27, 0xcf, 0x99, 0x86,
	0xcb, 0xd6, 0x78, 0xbf, 0xa3, 0x38, 0x31, 0x0b, 0xda, 0x80, 0x93, 0x0f, 0x18, 0xb1, 0xdc, 0x42,
	0x4a, 0xf4, 0x38, 0x5e, 0xe0, 0xcc, 0xc0, 0x97, 0x27, 0x79, 0x5d, 0x6e, 0x35, 0xf8, 0x94, 0xb2,
	0x27, 0x87, 0x18, 0xf2, 0x40, 0x41, 0x6d, 0x9b, 0x5f, 0xd3, 0x70, 0x26, 0xf4, 0x7e, 0xba, 0x81,
	0x5e, 0xc0, 0x2c, 0x1f, 0xcf, 0x76, 0xa3, 0x11, 0xda, 0x50, 0x2c, 0xa6, 0x14, 0xb3, 0x28, 0x37,
	0xfb, 0x1e, 0x4e, 0xd7, 0xdb, 0x44, 0x67, 0xe4, 0x9b, 0x87, 0xc1, 0x77, 0x0f, 0x27, 0xde, 0xff,
	0xf8, 0xfd, 0x71, 0x62, 0x0e, 0x26, 0x4a, 0x60, 0x45, 0x99, 0xd6, 0x42, 0x01, 0x6a, 0xc1, 0x3c,
	0x0f, 0x7f, 0x87, 0x98, 0x84, 0x91, 0x71, 0x08, 0x1a, 0x27, 0x34, 0x84, 0x6c, 0x84, 0xf0, 0x3f,
	0x4c, 0x94, 0x12, 0x2b, 0xf9, 0x08, 0xa0, 0xbd, 0xa9, 0xa8, 0xbb, 0xba, 0x45, 0xde, 0xa1, 0x5a,
	0x50, 0xc8, 0x3d, 0xc2, 0xc6, 0xc1, 0xac, 0xf6, 0x3d, 0x9c, 0x6c, 0x12, 0x16, 0x67, 0xa0, 0x0b,
	0x18, 0x0d, 0x38, 0xc7, 0x19, 0x7c, 0x7a, 0x11, 0x64, 0xf1, 0x6c, 0x9e, 0xe2, 0xa4, 0x56, 0x28,
	0x33, 0x1c, 0xdb, 0x95, 0x16, 0xfe, 0x25, 0x71, 0x0f, 0xe5, 0x7a, 0xdf, 0xc3, 0x29, 0x3e, 0x8a,
	0x11, 0x5c, 0x56, 0xe0, 0x86, 0x3d, 0x33, 0x82, 0x9e, 0x3d, 0xa1, 0x0d, 0x7d, 0xbc, 0x9e, 0xad,
	0xf3, 0x9e, 0x75, 0x84, 0x6c, 0x04, 0x50, 0x10, 0x53, 0x91, 0x2e, 0x28, 0xe8, 0x2d, 0xcc, 0x71,
	0x94, 0x48, 0xfd, 0x8a, 0x8a, 0x94, 0xab, 0xaf, 0xb3, 0x72, 0xab, 0xef, 0xe1, 0x49, 0x71, 0x8f,
	0x46, 0xf8, 0x0b, 0xa2, 0xc0, 0xac, 0x26, 0xfe, 0x89, 0x92, 0x58, 0x07, 0xe8, 0x39, 0x5c, 0x3c,
	0xa3, 0x3f, 0xee, 0xd6, 0x87, 0x87, 0xf2, 0x92, 0x14, 0xe6, 0x85, 0x79, 0xf8, 0x22, 0x88, 0x9e,
	0xe6, 0x63, 0xcc, 0x75, 0x20, 0xed, 0x7e, 0xe8, 0xe1, 0x89, 0xee, 0xc6, 0xa7, 0x1e, 0x8e, 0x9e,
	0xbc, 0xcf, 0x3d, 0x3c, 0x15, 0x02, 0xbe, 0xf4, 0xb0, 0x0a, 0xa3, 0x0d, 0x4a, 0x52, 0xfe, 0xd3,
	0x24, 0x0c, 0x85, 0xc7, 0x0d, 0xa5, 0xa8, 0xe3, 0x32, 0x24, 0xe6, 0x84, 0x82, 0xc8, 0xe5, 0xff,
	0x8e, 0x4e, 0x97, 0xc0, 0xf1, 0xe9, 0x12, 0xf8, 0x75, 0xba, 0x04, 0x6a, 0x69, 0xf1, 0x1c, 0xde,
	0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x43, 0x49, 0x71, 0x8a, 0x62, 0x05, 0x00, 0x00,
}
