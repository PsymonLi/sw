// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package rollout is a auto generated package.
Input file: svc_rollout.proto
*/
package rollout

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareRolloutV1Client add middleware to the client
type MiddlewareRolloutV1Client func(ServiceRolloutV1Client) ServiceRolloutV1Client

// EndpointsRolloutV1Client is the endpoints for the client
type EndpointsRolloutV1Client struct {
	Client                        RolloutV1Client
	AutoWatchSvcRolloutV1Endpoint endpoint.Endpoint

	AutoAddRolloutEndpoint          endpoint.Endpoint
	AutoAddRolloutActionEndpoint    endpoint.Endpoint
	AutoDeleteRolloutEndpoint       endpoint.Endpoint
	AutoDeleteRolloutActionEndpoint endpoint.Endpoint
	AutoGetRolloutEndpoint          endpoint.Endpoint
	AutoGetRolloutActionEndpoint    endpoint.Endpoint
	AutoLabelRolloutEndpoint        endpoint.Endpoint
	AutoLabelRolloutActionEndpoint  endpoint.Endpoint
	AutoListRolloutEndpoint         endpoint.Endpoint
	AutoListRolloutActionEndpoint   endpoint.Endpoint
	AutoUpdateRolloutEndpoint       endpoint.Endpoint
	AutoUpdateRolloutActionEndpoint endpoint.Endpoint
	CreateRolloutEndpoint           endpoint.Endpoint
	RemoveRolloutEndpoint           endpoint.Endpoint
	StopRolloutEndpoint             endpoint.Endpoint
	UpdateRolloutEndpoint           endpoint.Endpoint
}

// EndpointsRolloutV1RestClient is the REST client
type EndpointsRolloutV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddRolloutEndpoint          endpoint.Endpoint
	AutoAddRolloutActionEndpoint    endpoint.Endpoint
	AutoDeleteRolloutEndpoint       endpoint.Endpoint
	AutoDeleteRolloutActionEndpoint endpoint.Endpoint
	AutoGetRolloutEndpoint          endpoint.Endpoint
	AutoGetRolloutActionEndpoint    endpoint.Endpoint
	AutoLabelRolloutEndpoint        endpoint.Endpoint
	AutoLabelRolloutActionEndpoint  endpoint.Endpoint
	AutoListRolloutEndpoint         endpoint.Endpoint
	AutoListRolloutActionEndpoint   endpoint.Endpoint
	AutoUpdateRolloutEndpoint       endpoint.Endpoint
	AutoUpdateRolloutActionEndpoint endpoint.Endpoint
	AutoWatchRolloutEndpoint        endpoint.Endpoint
	AutoWatchRolloutActionEndpoint  endpoint.Endpoint
	AutoWatchSvcRolloutV1Endpoint   endpoint.Endpoint
	CreateRolloutEndpoint           endpoint.Endpoint
	RemoveRolloutEndpoint           endpoint.Endpoint
	StopRolloutEndpoint             endpoint.Endpoint
	UpdateRolloutEndpoint           endpoint.Endpoint
}

// MiddlewareRolloutV1Server adds middle ware to the server
type MiddlewareRolloutV1Server func(ServiceRolloutV1Server) ServiceRolloutV1Server

// EndpointsRolloutV1Server is the server endpoints
type EndpointsRolloutV1Server struct {
	svcWatchHandlerRolloutV1 func(options *api.AggWatchOptions, stream grpc.ServerStream) error

	AutoAddRolloutEndpoint          endpoint.Endpoint
	AutoAddRolloutActionEndpoint    endpoint.Endpoint
	AutoDeleteRolloutEndpoint       endpoint.Endpoint
	AutoDeleteRolloutActionEndpoint endpoint.Endpoint
	AutoGetRolloutEndpoint          endpoint.Endpoint
	AutoGetRolloutActionEndpoint    endpoint.Endpoint
	AutoLabelRolloutEndpoint        endpoint.Endpoint
	AutoLabelRolloutActionEndpoint  endpoint.Endpoint
	AutoListRolloutEndpoint         endpoint.Endpoint
	AutoListRolloutActionEndpoint   endpoint.Endpoint
	AutoUpdateRolloutEndpoint       endpoint.Endpoint
	AutoUpdateRolloutActionEndpoint endpoint.Endpoint
	CreateRolloutEndpoint           endpoint.Endpoint
	RemoveRolloutEndpoint           endpoint.Endpoint
	StopRolloutEndpoint             endpoint.Endpoint
	UpdateRolloutEndpoint           endpoint.Endpoint

	watchHandlerRollout       func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerRolloutAction func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddRollout is endpoint for AutoAddRollout
func (e EndpointsRolloutV1Client) AutoAddRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoAddRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoAddRollout struct {
	V   Rollout
	Err error
}

// AutoAddRolloutAction is endpoint for AutoAddRolloutAction
func (e EndpointsRolloutV1Client) AutoAddRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	resp, err := e.AutoAddRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutAction{}, err
	}
	return resp.(*RolloutAction), nil
}

type respRolloutV1AutoAddRolloutAction struct {
	V   RolloutAction
	Err error
}

// AutoDeleteRollout is endpoint for AutoDeleteRollout
func (e EndpointsRolloutV1Client) AutoDeleteRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoDeleteRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoDeleteRollout struct {
	V   Rollout
	Err error
}

// AutoDeleteRolloutAction is endpoint for AutoDeleteRolloutAction
func (e EndpointsRolloutV1Client) AutoDeleteRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	resp, err := e.AutoDeleteRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutAction{}, err
	}
	return resp.(*RolloutAction), nil
}

type respRolloutV1AutoDeleteRolloutAction struct {
	V   RolloutAction
	Err error
}

// AutoGetRollout is endpoint for AutoGetRollout
func (e EndpointsRolloutV1Client) AutoGetRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoGetRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoGetRollout struct {
	V   Rollout
	Err error
}

// AutoGetRolloutAction is endpoint for AutoGetRolloutAction
func (e EndpointsRolloutV1Client) AutoGetRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	resp, err := e.AutoGetRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutAction{}, err
	}
	return resp.(*RolloutAction), nil
}

type respRolloutV1AutoGetRolloutAction struct {
	V   RolloutAction
	Err error
}

// AutoLabelRollout is endpoint for AutoLabelRollout
func (e EndpointsRolloutV1Client) AutoLabelRollout(ctx context.Context, in *api.Label) (*Rollout, error) {
	resp, err := e.AutoLabelRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoLabelRollout struct {
	V   Rollout
	Err error
}

// AutoLabelRolloutAction is endpoint for AutoLabelRolloutAction
func (e EndpointsRolloutV1Client) AutoLabelRolloutAction(ctx context.Context, in *api.Label) (*RolloutAction, error) {
	resp, err := e.AutoLabelRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutAction{}, err
	}
	return resp.(*RolloutAction), nil
}

type respRolloutV1AutoLabelRolloutAction struct {
	V   RolloutAction
	Err error
}

// AutoListRollout is endpoint for AutoListRollout
func (e EndpointsRolloutV1Client) AutoListRollout(ctx context.Context, in *api.ListWatchOptions) (*RolloutList, error) {
	resp, err := e.AutoListRolloutEndpoint(ctx, in)
	if err != nil {
		return &RolloutList{}, err
	}
	return resp.(*RolloutList), nil
}

type respRolloutV1AutoListRollout struct {
	V   RolloutList
	Err error
}

// AutoListRolloutAction is endpoint for AutoListRolloutAction
func (e EndpointsRolloutV1Client) AutoListRolloutAction(ctx context.Context, in *api.ListWatchOptions) (*RolloutActionList, error) {
	resp, err := e.AutoListRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutActionList{}, err
	}
	return resp.(*RolloutActionList), nil
}

type respRolloutV1AutoListRolloutAction struct {
	V   RolloutActionList
	Err error
}

// AutoUpdateRollout is endpoint for AutoUpdateRollout
func (e EndpointsRolloutV1Client) AutoUpdateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoUpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoUpdateRollout struct {
	V   Rollout
	Err error
}

// AutoUpdateRolloutAction is endpoint for AutoUpdateRolloutAction
func (e EndpointsRolloutV1Client) AutoUpdateRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	resp, err := e.AutoUpdateRolloutActionEndpoint(ctx, in)
	if err != nil {
		return &RolloutAction{}, err
	}
	return resp.(*RolloutAction), nil
}

type respRolloutV1AutoUpdateRolloutAction struct {
	V   RolloutAction
	Err error
}

// CreateRollout is endpoint for CreateRollout
func (e EndpointsRolloutV1Client) CreateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.CreateRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1CreateRollout struct {
	V   Rollout
	Err error
}

// RemoveRollout is endpoint for RemoveRollout
func (e EndpointsRolloutV1Client) RemoveRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.RemoveRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1RemoveRollout struct {
	V   Rollout
	Err error
}

// StopRollout is endpoint for StopRollout
func (e EndpointsRolloutV1Client) StopRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.StopRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1StopRollout struct {
	V   Rollout
	Err error
}

// UpdateRollout is endpoint for UpdateRollout
func (e EndpointsRolloutV1Client) UpdateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.UpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1UpdateRollout struct {
	V   Rollout
	Err error
}

func (e EndpointsRolloutV1Client) AutoWatchSvcRolloutV1(ctx context.Context, in *api.AggWatchOptions) (RolloutV1_AutoWatchSvcRolloutV1Client, error) {
	return e.Client.AutoWatchSvcRolloutV1(ctx, in)
}

// AutoWatchRollout performs Watch for Rollout
func (e EndpointsRolloutV1Client) AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions) (RolloutV1_AutoWatchRolloutClient, error) {
	return e.Client.AutoWatchRollout(ctx, in)
}

// AutoWatchRolloutAction performs Watch for RolloutAction
func (e EndpointsRolloutV1Client) AutoWatchRolloutAction(ctx context.Context, in *api.ListWatchOptions) (RolloutV1_AutoWatchRolloutActionClient, error) {
	return e.Client.AutoWatchRolloutAction(ctx, in)
}

// AutoAddRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoAddRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoAddRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoAddRolloutEndpoint creates  AutoAddRollout endpoints for the service
func MakeRolloutV1AutoAddRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoAddRollout(ctx, *req)
		return respRolloutV1AutoAddRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoAddRollout")(f)
}

// AutoAddRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoAddRolloutAction(ctx context.Context, in RolloutAction) (RolloutAction, error) {
	resp, err := e.AutoAddRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutAction{}, err
	}
	return *resp.(*RolloutAction), nil
}

// MakeRolloutV1AutoAddRolloutActionEndpoint creates  AutoAddRolloutAction endpoints for the service
func MakeRolloutV1AutoAddRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RolloutAction)
		v, err := s.AutoAddRolloutAction(ctx, *req)
		return respRolloutV1AutoAddRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoAddRolloutAction")(f)
}

// AutoDeleteRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoDeleteRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoDeleteRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoDeleteRolloutEndpoint creates  AutoDeleteRollout endpoints for the service
func MakeRolloutV1AutoDeleteRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoDeleteRollout(ctx, *req)
		return respRolloutV1AutoDeleteRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoDeleteRollout")(f)
}

// AutoDeleteRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoDeleteRolloutAction(ctx context.Context, in RolloutAction) (RolloutAction, error) {
	resp, err := e.AutoDeleteRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutAction{}, err
	}
	return *resp.(*RolloutAction), nil
}

// MakeRolloutV1AutoDeleteRolloutActionEndpoint creates  AutoDeleteRolloutAction endpoints for the service
func MakeRolloutV1AutoDeleteRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RolloutAction)
		v, err := s.AutoDeleteRolloutAction(ctx, *req)
		return respRolloutV1AutoDeleteRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoDeleteRolloutAction")(f)
}

// AutoGetRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoGetRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoGetRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoGetRolloutEndpoint creates  AutoGetRollout endpoints for the service
func MakeRolloutV1AutoGetRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoGetRollout(ctx, *req)
		return respRolloutV1AutoGetRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoGetRollout")(f)
}

// AutoGetRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoGetRolloutAction(ctx context.Context, in RolloutAction) (RolloutAction, error) {
	resp, err := e.AutoGetRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutAction{}, err
	}
	return *resp.(*RolloutAction), nil
}

// MakeRolloutV1AutoGetRolloutActionEndpoint creates  AutoGetRolloutAction endpoints for the service
func MakeRolloutV1AutoGetRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RolloutAction)
		v, err := s.AutoGetRolloutAction(ctx, *req)
		return respRolloutV1AutoGetRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoGetRolloutAction")(f)
}

// AutoLabelRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoLabelRollout(ctx context.Context, in api.Label) (Rollout, error) {
	resp, err := e.AutoLabelRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoLabelRolloutEndpoint creates  AutoLabelRollout endpoints for the service
func MakeRolloutV1AutoLabelRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelRollout(ctx, *req)
		return respRolloutV1AutoLabelRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoLabelRollout")(f)
}

// AutoLabelRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoLabelRolloutAction(ctx context.Context, in api.Label) (RolloutAction, error) {
	resp, err := e.AutoLabelRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutAction{}, err
	}
	return *resp.(*RolloutAction), nil
}

// MakeRolloutV1AutoLabelRolloutActionEndpoint creates  AutoLabelRolloutAction endpoints for the service
func MakeRolloutV1AutoLabelRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelRolloutAction(ctx, *req)
		return respRolloutV1AutoLabelRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoLabelRolloutAction")(f)
}

// AutoListRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoListRollout(ctx context.Context, in api.ListWatchOptions) (RolloutList, error) {
	resp, err := e.AutoListRolloutEndpoint(ctx, in)
	if err != nil {
		return RolloutList{}, err
	}
	return *resp.(*RolloutList), nil
}

// MakeRolloutV1AutoListRolloutEndpoint creates  AutoListRollout endpoints for the service
func MakeRolloutV1AutoListRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRollout(ctx, *req)
		return respRolloutV1AutoListRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoListRollout")(f)
}

// AutoListRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoListRolloutAction(ctx context.Context, in api.ListWatchOptions) (RolloutActionList, error) {
	resp, err := e.AutoListRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutActionList{}, err
	}
	return *resp.(*RolloutActionList), nil
}

// MakeRolloutV1AutoListRolloutActionEndpoint creates  AutoListRolloutAction endpoints for the service
func MakeRolloutV1AutoListRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRolloutAction(ctx, *req)
		return respRolloutV1AutoListRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoListRolloutAction")(f)
}

// AutoUpdateRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoUpdateRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoUpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoUpdateRolloutEndpoint creates  AutoUpdateRollout endpoints for the service
func MakeRolloutV1AutoUpdateRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoUpdateRollout(ctx, *req)
		return respRolloutV1AutoUpdateRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoUpdateRollout")(f)
}

// AutoUpdateRolloutAction implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoUpdateRolloutAction(ctx context.Context, in RolloutAction) (RolloutAction, error) {
	resp, err := e.AutoUpdateRolloutActionEndpoint(ctx, in)
	if err != nil {
		return RolloutAction{}, err
	}
	return *resp.(*RolloutAction), nil
}

// MakeRolloutV1AutoUpdateRolloutActionEndpoint creates  AutoUpdateRolloutAction endpoints for the service
func MakeRolloutV1AutoUpdateRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RolloutAction)
		v, err := s.AutoUpdateRolloutAction(ctx, *req)
		return respRolloutV1AutoUpdateRolloutAction{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoUpdateRolloutAction")(f)
}

// CreateRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) CreateRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.CreateRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1CreateRolloutEndpoint creates  CreateRollout endpoints for the service
func MakeRolloutV1CreateRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.CreateRollout(ctx, *req)
		return respRolloutV1CreateRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:CreateRollout")(f)
}

// RemoveRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) RemoveRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.RemoveRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1RemoveRolloutEndpoint creates  RemoveRollout endpoints for the service
func MakeRolloutV1RemoveRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.RemoveRollout(ctx, *req)
		return respRolloutV1RemoveRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:RemoveRollout")(f)
}

// StopRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) StopRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.StopRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1StopRolloutEndpoint creates  StopRollout endpoints for the service
func MakeRolloutV1StopRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.StopRollout(ctx, *req)
		return respRolloutV1StopRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:StopRollout")(f)
}

// UpdateRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) UpdateRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.UpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1UpdateRolloutEndpoint creates  UpdateRollout endpoints for the service
func MakeRolloutV1UpdateRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.UpdateRollout(ctx, *req)
		return respRolloutV1UpdateRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:UpdateRollout")(f)
}

func (e EndpointsRolloutV1Server) AutoWatchSvcRolloutV1(in *api.AggWatchOptions, stream RolloutV1_AutoWatchSvcRolloutV1Server) error {
	return e.svcWatchHandlerRolloutV1(in, stream)
}

// MakeAutoWatchSvcRolloutV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcRolloutV1Endpoint(s ServiceRolloutV1Server, logger log.Logger) func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RolloutV1_AutoWatchSvcRolloutV1Server)
		return s.AutoWatchSvcRolloutV1(options, wstream)
	}
}

// AutoWatchRollout is the watch handler for Rollout on the server side.
func (e EndpointsRolloutV1Server) AutoWatchRollout(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutServer) error {
	return e.watchHandlerRollout(in, stream)
}

// MakeAutoWatchRolloutEndpoint creates the Watch endpoint
func MakeAutoWatchRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RolloutV1_AutoWatchRolloutServer)
		return s.AutoWatchRollout(options, wstream)
	}
}

// AutoWatchRolloutAction is the watch handler for RolloutAction on the server side.
func (e EndpointsRolloutV1Server) AutoWatchRolloutAction(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutActionServer) error {
	return e.watchHandlerRolloutAction(in, stream)
}

// MakeAutoWatchRolloutActionEndpoint creates the Watch endpoint
func MakeAutoWatchRolloutActionEndpoint(s ServiceRolloutV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RolloutV1_AutoWatchRolloutActionServer)
		return s.AutoWatchRolloutAction(options, wstream)
	}
}

// MakeRolloutV1ServerEndpoints creates server endpoints
func MakeRolloutV1ServerEndpoints(s ServiceRolloutV1Server, logger log.Logger) EndpointsRolloutV1Server {
	return EndpointsRolloutV1Server{
		svcWatchHandlerRolloutV1: MakeAutoWatchSvcRolloutV1Endpoint(s, logger),

		AutoAddRolloutEndpoint:          MakeRolloutV1AutoAddRolloutEndpoint(s, logger),
		AutoAddRolloutActionEndpoint:    MakeRolloutV1AutoAddRolloutActionEndpoint(s, logger),
		AutoDeleteRolloutEndpoint:       MakeRolloutV1AutoDeleteRolloutEndpoint(s, logger),
		AutoDeleteRolloutActionEndpoint: MakeRolloutV1AutoDeleteRolloutActionEndpoint(s, logger),
		AutoGetRolloutEndpoint:          MakeRolloutV1AutoGetRolloutEndpoint(s, logger),
		AutoGetRolloutActionEndpoint:    MakeRolloutV1AutoGetRolloutActionEndpoint(s, logger),
		AutoLabelRolloutEndpoint:        MakeRolloutV1AutoLabelRolloutEndpoint(s, logger),
		AutoLabelRolloutActionEndpoint:  MakeRolloutV1AutoLabelRolloutActionEndpoint(s, logger),
		AutoListRolloutEndpoint:         MakeRolloutV1AutoListRolloutEndpoint(s, logger),
		AutoListRolloutActionEndpoint:   MakeRolloutV1AutoListRolloutActionEndpoint(s, logger),
		AutoUpdateRolloutEndpoint:       MakeRolloutV1AutoUpdateRolloutEndpoint(s, logger),
		AutoUpdateRolloutActionEndpoint: MakeRolloutV1AutoUpdateRolloutActionEndpoint(s, logger),
		CreateRolloutEndpoint:           MakeRolloutV1CreateRolloutEndpoint(s, logger),
		RemoveRolloutEndpoint:           MakeRolloutV1RemoveRolloutEndpoint(s, logger),
		StopRolloutEndpoint:             MakeRolloutV1StopRolloutEndpoint(s, logger),
		UpdateRolloutEndpoint:           MakeRolloutV1UpdateRolloutEndpoint(s, logger),

		watchHandlerRollout:       MakeAutoWatchRolloutEndpoint(s, logger),
		watchHandlerRolloutAction: MakeAutoWatchRolloutActionEndpoint(s, logger),
	}
}

// LoggingRolloutV1MiddlewareClient adds middleware for the client
func LoggingRolloutV1MiddlewareClient(logger log.Logger) MiddlewareRolloutV1Client {
	return func(next ServiceRolloutV1Client) ServiceRolloutV1Client {
		return loggingRolloutV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRolloutV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceRolloutV1Client
}

// LoggingRolloutV1MiddlewareServer adds middleware for the client
func LoggingRolloutV1MiddlewareServer(logger log.Logger) MiddlewareRolloutV1Server {
	return func(next ServiceRolloutV1Server) ServiceRolloutV1Server {
		return loggingRolloutV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRolloutV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceRolloutV1Server
}

func (m loggingRolloutV1MiddlewareClient) AutoAddRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoAddRolloutAction(ctx context.Context, in *RolloutAction) (resp *RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoDeleteRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoDeleteRolloutAction(ctx context.Context, in *RolloutAction) (resp *RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoGetRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoGetRolloutAction(ctx context.Context, in *RolloutAction) (resp *RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoLabelRollout(ctx context.Context, in *api.Label) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoLabelRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoLabelRolloutAction(ctx context.Context, in *api.Label) (resp *RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoLabelRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoListRollout(ctx context.Context, in *api.ListWatchOptions) (resp *RolloutList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoListRolloutAction(ctx context.Context, in *api.ListWatchOptions) (resp *RolloutActionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoUpdateRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoUpdateRolloutAction(ctx context.Context, in *RolloutAction) (resp *RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) CreateRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "CreateRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.CreateRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) RemoveRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "RemoveRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.RemoveRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) StopRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "StopRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.StopRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) UpdateRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "UpdateRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.UpdateRollout(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareClient) AutoWatchSvcRolloutV1(ctx context.Context, in *api.AggWatchOptions) (resp RolloutV1_AutoWatchSvcRolloutV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoWatchSvcRolloutV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcRolloutV1(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareClient) AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions) (resp RolloutV1_AutoWatchRolloutClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoWatchRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoWatchRolloutAction(ctx context.Context, in *api.ListWatchOptions) (resp RolloutV1_AutoWatchRolloutActionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoWatchRolloutAction", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRolloutAction(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoAddRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoAddRolloutAction(ctx context.Context, in RolloutAction) (resp RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoDeleteRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoDeleteRolloutAction(ctx context.Context, in RolloutAction) (resp RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoGetRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoGetRolloutAction(ctx context.Context, in RolloutAction) (resp RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoLabelRollout(ctx context.Context, in api.Label) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoLabelRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoLabelRolloutAction(ctx context.Context, in api.Label) (resp RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoLabelRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoListRollout(ctx context.Context, in api.ListWatchOptions) (resp RolloutList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoListRolloutAction(ctx context.Context, in api.ListWatchOptions) (resp RolloutActionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoUpdateRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoUpdateRolloutAction(ctx context.Context, in RolloutAction) (resp RolloutAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRolloutAction(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) CreateRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "CreateRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.CreateRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) RemoveRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "RemoveRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.RemoveRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) StopRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "StopRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.StopRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) UpdateRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "UpdateRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.UpdateRollout(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoWatchSvcRolloutV1(in *api.AggWatchOptions, stream RolloutV1_AutoWatchSvcRolloutV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RolloutV1", "method", "AutoWatchSvcRolloutV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcRolloutV1(in, stream)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoWatchRollout(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RolloutV1", "method", "AutoWatchRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRollout(in, stream)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoWatchRolloutAction(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutActionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RolloutV1", "method", "AutoWatchRolloutAction", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRolloutAction(in, stream)
	return
}

func (r *EndpointsRolloutV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsRolloutV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIRolloutV1AutoAddRolloutCreateOper(in *Rollout) string {
	return ""

}

//
func makeURIRolloutV1AutoAddRolloutActionCreateOper(in *RolloutAction) string {
	return ""

}

//
func makeURIRolloutV1AutoDeleteRolloutDeleteOper(in *Rollout) string {
	return ""

}

//
func makeURIRolloutV1AutoDeleteRolloutActionDeleteOper(in *RolloutAction) string {
	return ""

}

//
func makeURIRolloutV1AutoGetRolloutGetOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/", in.Name)
}

//
func makeURIRolloutV1AutoGetRolloutActionGetOper(in *RolloutAction) string {
	return ""

}

//
func makeURIRolloutV1AutoLabelRolloutLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIRolloutV1AutoLabelRolloutActionLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIRolloutV1AutoListRolloutListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout")
}

//
func makeURIRolloutV1AutoListRolloutActionListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIRolloutV1AutoUpdateRolloutUpdateOper(in *Rollout) string {
	return ""

}

//
func makeURIRolloutV1AutoUpdateRolloutActionUpdateOper(in *RolloutAction) string {
	return ""

}

//
func makeURIRolloutV1AutoWatchRolloutWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/rollout/v1", "/watch/rollout")
}

//
func makeURIRolloutV1AutoWatchRolloutActionWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIRolloutV1AutoWatchSvcRolloutV1WatchOper(in *api.AggWatchOptions) string {
	return ""

}

//
func makeURIRolloutV1CreateRolloutCreateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/CreateRollout")
}

//
func makeURIRolloutV1RemoveRolloutCreateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/RemoveRollout")
}

//
func makeURIRolloutV1StopRolloutCreateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/StopRollout")
}

//
func makeURIRolloutV1UpdateRolloutCreateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/UpdateRollout")
}

// AutoAddRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoAddRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoUpdateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelRollout label method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoLabelRollout(ctx context.Context, in *api.Label) (*Rollout, error) {
	return nil, errors.New("not allowed")
}

// AutoGetRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoGetRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	path := makeURIRolloutV1AutoGetRolloutGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1AutoGetRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

// AutoDeleteRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoDeleteRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	return nil, errors.New("not allowed")
}

// AutoListRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoListRollout(ctx context.Context, options *api.ListWatchOptions) (*RolloutList, error) {
	path := makeURIRolloutV1AutoListRolloutListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1AutoListRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RolloutList), err
}

// AutoWatchRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoWatchRollout(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIRolloutV1AutoWatchRolloutWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRolloutWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsRolloutV1RestClient) CreateRolloutRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIRolloutV1CreateRolloutCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1CreateRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

func (r *EndpointsRolloutV1RestClient) UpdateRolloutRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIRolloutV1UpdateRolloutCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1UpdateRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

func (r *EndpointsRolloutV1RestClient) StopRolloutRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIRolloutV1StopRolloutCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1StopRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

func (r *EndpointsRolloutV1RestClient) RemoveRolloutRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIRolloutV1RemoveRolloutCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespRolloutV1RemoveRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

// AutoAddRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoAddRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoUpdateRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelRolloutAction label method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoLabelRolloutAction(ctx context.Context, in *api.Label) (*RolloutAction, error) {
	return nil, errors.New("not allowed")
}

// AutoGetRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoGetRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoDeleteRolloutAction(ctx context.Context, in *RolloutAction) (*RolloutAction, error) {
	return nil, errors.New("not allowed")
}

// AutoListRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoListRolloutAction(ctx context.Context, options *api.ListWatchOptions) (*RolloutActionList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchRolloutAction CRUD method for RolloutAction
func (r *EndpointsRolloutV1RestClient) AutoWatchRolloutAction(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIRolloutV1AutoWatchRolloutActionWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRolloutActionWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeRolloutV1RestClientEndpoints make REST client endpoints
func MakeRolloutV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsRolloutV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsRolloutV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeRolloutV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeRolloutV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsRolloutV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsRolloutV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
