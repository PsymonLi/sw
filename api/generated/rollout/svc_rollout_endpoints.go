// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package rollout is a auto generated package.
Input file: svc_rollout.proto
*/
package rollout

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareRolloutV1Client add middleware to the client
type MiddlewareRolloutV1Client func(ServiceRolloutV1Client) ServiceRolloutV1Client

// EndpointsRolloutV1Client is the endpoints for the client
type EndpointsRolloutV1Client struct {
	Client                        RolloutV1Client
	AutoWatchSvcRolloutV1Endpoint endpoint.Endpoint

	AutoAddRolloutEndpoint    endpoint.Endpoint
	AutoDeleteRolloutEndpoint endpoint.Endpoint
	AutoGetRolloutEndpoint    endpoint.Endpoint
	AutoListRolloutEndpoint   endpoint.Endpoint
	AutoUpdateRolloutEndpoint endpoint.Endpoint
}

// EndpointsRolloutV1RestClient is the REST client
type EndpointsRolloutV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddRolloutEndpoint        endpoint.Endpoint
	AutoDeleteRolloutEndpoint     endpoint.Endpoint
	AutoGetRolloutEndpoint        endpoint.Endpoint
	AutoListRolloutEndpoint       endpoint.Endpoint
	AutoUpdateRolloutEndpoint     endpoint.Endpoint
	AutoWatchRolloutEndpoint      endpoint.Endpoint
	AutoWatchSvcRolloutV1Endpoint endpoint.Endpoint
}

// MiddlewareRolloutV1Server adds middle ware to the server
type MiddlewareRolloutV1Server func(ServiceRolloutV1Server) ServiceRolloutV1Server

// EndpointsRolloutV1Server is the server endpoints
type EndpointsRolloutV1Server struct {
	svcWatchHandlerRolloutV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddRolloutEndpoint    endpoint.Endpoint
	AutoDeleteRolloutEndpoint endpoint.Endpoint
	AutoGetRolloutEndpoint    endpoint.Endpoint
	AutoListRolloutEndpoint   endpoint.Endpoint
	AutoUpdateRolloutEndpoint endpoint.Endpoint

	watchHandlerRollout func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddRollout is endpoint for AutoAddRollout
func (e EndpointsRolloutV1Client) AutoAddRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoAddRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoAddRollout struct {
	V   Rollout
	Err error
}

// AutoDeleteRollout is endpoint for AutoDeleteRollout
func (e EndpointsRolloutV1Client) AutoDeleteRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoDeleteRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoDeleteRollout struct {
	V   Rollout
	Err error
}

// AutoGetRollout is endpoint for AutoGetRollout
func (e EndpointsRolloutV1Client) AutoGetRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoGetRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoGetRollout struct {
	V   Rollout
	Err error
}

// AutoListRollout is endpoint for AutoListRollout
func (e EndpointsRolloutV1Client) AutoListRollout(ctx context.Context, in *api.ListWatchOptions) (*RolloutList, error) {
	resp, err := e.AutoListRolloutEndpoint(ctx, in)
	if err != nil {
		return &RolloutList{}, err
	}
	return resp.(*RolloutList), nil
}

type respRolloutV1AutoListRollout struct {
	V   RolloutList
	Err error
}

// AutoUpdateRollout is endpoint for AutoUpdateRollout
func (e EndpointsRolloutV1Client) AutoUpdateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	resp, err := e.AutoUpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return &Rollout{}, err
	}
	return resp.(*Rollout), nil
}

type respRolloutV1AutoUpdateRollout struct {
	V   Rollout
	Err error
}

func (e EndpointsRolloutV1Client) AutoWatchSvcRolloutV1(ctx context.Context, in *api.ListWatchOptions) (RolloutV1_AutoWatchSvcRolloutV1Client, error) {
	return e.Client.AutoWatchSvcRolloutV1(ctx, in)
}

// AutoWatchRollout performs Watch for Rollout
func (e EndpointsRolloutV1Client) AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions) (RolloutV1_AutoWatchRolloutClient, error) {
	return e.Client.AutoWatchRollout(ctx, in)
}

// AutoAddRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoAddRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoAddRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoAddRolloutEndpoint creates  AutoAddRollout endpoints for the service
func MakeRolloutV1AutoAddRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoAddRollout(ctx, *req)
		return respRolloutV1AutoAddRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoAddRollout")(f)
}

// AutoDeleteRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoDeleteRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoDeleteRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoDeleteRolloutEndpoint creates  AutoDeleteRollout endpoints for the service
func MakeRolloutV1AutoDeleteRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoDeleteRollout(ctx, *req)
		return respRolloutV1AutoDeleteRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoDeleteRollout")(f)
}

// AutoGetRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoGetRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoGetRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoGetRolloutEndpoint creates  AutoGetRollout endpoints for the service
func MakeRolloutV1AutoGetRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoGetRollout(ctx, *req)
		return respRolloutV1AutoGetRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoGetRollout")(f)
}

// AutoListRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoListRollout(ctx context.Context, in api.ListWatchOptions) (RolloutList, error) {
	resp, err := e.AutoListRolloutEndpoint(ctx, in)
	if err != nil {
		return RolloutList{}, err
	}
	return *resp.(*RolloutList), nil
}

// MakeRolloutV1AutoListRolloutEndpoint creates  AutoListRollout endpoints for the service
func MakeRolloutV1AutoListRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRollout(ctx, *req)
		return respRolloutV1AutoListRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoListRollout")(f)
}

// AutoUpdateRollout implementation on server Endpoint
func (e EndpointsRolloutV1Server) AutoUpdateRollout(ctx context.Context, in Rollout) (Rollout, error) {
	resp, err := e.AutoUpdateRolloutEndpoint(ctx, in)
	if err != nil {
		return Rollout{}, err
	}
	return *resp.(*Rollout), nil
}

// MakeRolloutV1AutoUpdateRolloutEndpoint creates  AutoUpdateRollout endpoints for the service
func MakeRolloutV1AutoUpdateRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Rollout)
		v, err := s.AutoUpdateRollout(ctx, *req)
		return respRolloutV1AutoUpdateRollout{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RolloutV1:AutoUpdateRollout")(f)
}

func (e EndpointsRolloutV1Server) AutoWatchSvcRolloutV1(in *api.ListWatchOptions, stream RolloutV1_AutoWatchSvcRolloutV1Server) error {
	return e.svcWatchHandlerRolloutV1(in, stream)
}

// MakeAutoWatchSvcRolloutV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcRolloutV1Endpoint(s ServiceRolloutV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RolloutV1_AutoWatchSvcRolloutV1Server)
		return s.AutoWatchSvcRolloutV1(options, wstream)
	}
}

// AutoWatchRollout is the watch handler for Rollout on the server side.
func (e EndpointsRolloutV1Server) AutoWatchRollout(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutServer) error {
	return e.watchHandlerRollout(in, stream)
}

// MakeAutoWatchRolloutEndpoint creates the Watch endpoint
func MakeAutoWatchRolloutEndpoint(s ServiceRolloutV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RolloutV1_AutoWatchRolloutServer)
		return s.AutoWatchRollout(options, wstream)
	}
}

// MakeRolloutV1ServerEndpoints creates server endpoints
func MakeRolloutV1ServerEndpoints(s ServiceRolloutV1Server, logger log.Logger) EndpointsRolloutV1Server {
	return EndpointsRolloutV1Server{
		svcWatchHandlerRolloutV1: MakeAutoWatchSvcRolloutV1Endpoint(s, logger),

		AutoAddRolloutEndpoint:    MakeRolloutV1AutoAddRolloutEndpoint(s, logger),
		AutoDeleteRolloutEndpoint: MakeRolloutV1AutoDeleteRolloutEndpoint(s, logger),
		AutoGetRolloutEndpoint:    MakeRolloutV1AutoGetRolloutEndpoint(s, logger),
		AutoListRolloutEndpoint:   MakeRolloutV1AutoListRolloutEndpoint(s, logger),
		AutoUpdateRolloutEndpoint: MakeRolloutV1AutoUpdateRolloutEndpoint(s, logger),

		watchHandlerRollout: MakeAutoWatchRolloutEndpoint(s, logger),
	}
}

// LoggingRolloutV1MiddlewareClient adds middleware for the client
func LoggingRolloutV1MiddlewareClient(logger log.Logger) MiddlewareRolloutV1Client {
	return func(next ServiceRolloutV1Client) ServiceRolloutV1Client {
		return loggingRolloutV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRolloutV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceRolloutV1Client
}

// LoggingRolloutV1MiddlewareServer adds middleware for the client
func LoggingRolloutV1MiddlewareServer(logger log.Logger) MiddlewareRolloutV1Server {
	return func(next ServiceRolloutV1Server) ServiceRolloutV1Server {
		return loggingRolloutV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRolloutV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceRolloutV1Server
}

func (m loggingRolloutV1MiddlewareClient) AutoAddRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoDeleteRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoGetRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoListRollout(ctx context.Context, in *api.ListWatchOptions) (resp *RolloutList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareClient) AutoUpdateRollout(ctx context.Context, in *Rollout) (resp *Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateRollout(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareClient) AutoWatchSvcRolloutV1(ctx context.Context, in *api.ListWatchOptions) (resp RolloutV1_AutoWatchSvcRolloutV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoWatchSvcRolloutV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcRolloutV1(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareClient) AutoWatchRollout(ctx context.Context, in *api.ListWatchOptions) (resp RolloutV1_AutoWatchRolloutClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoWatchRollout", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchRollout(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoAddRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoAddRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoDeleteRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoDeleteRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoGetRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoGetRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoListRollout(ctx context.Context, in api.ListWatchOptions) (resp RolloutList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoListRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRollout(ctx, in)
	return
}
func (m loggingRolloutV1MiddlewareServer) AutoUpdateRollout(ctx context.Context, in Rollout) (resp Rollout, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RolloutV1", "method", "AutoUpdateRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRollout(ctx, in)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoWatchSvcRolloutV1(in *api.ListWatchOptions, stream RolloutV1_AutoWatchSvcRolloutV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RolloutV1", "method", "AutoWatchSvcRolloutV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcRolloutV1(in, stream)
	return
}

func (m loggingRolloutV1MiddlewareServer) AutoWatchRollout(in *api.ListWatchOptions, stream RolloutV1_AutoWatchRolloutServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RolloutV1", "method", "AutoWatchRollout", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRollout(in, stream)
	return
}

func (r *EndpointsRolloutV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsRolloutV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIRolloutV1AutoAddRolloutCreateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout")
}

//
func makeURIRolloutV1AutoDeleteRolloutDeleteOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/", in.Name)
}

//
func makeURIRolloutV1AutoGetRolloutGetOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/", in.Name)
}

//
func makeURIRolloutV1AutoListRolloutListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout")
}

//
func makeURIRolloutV1AutoUpdateRolloutUpdateOper(in *Rollout) string {
	return fmt.Sprint("/configs/rollout/v1", "/rollout/", in.Name)
}

//
func makeURIRolloutV1AutoWatchRolloutWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/rollout/v1", "/watch/rollout")
}

//
func makeURIRolloutV1AutoWatchSvcRolloutV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

// AutoAddRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoAddRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	path := makeURIRolloutV1AutoAddRolloutCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRolloutV1AutoAddRollout(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), nil
}

// AutoUpdateRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoUpdateRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	path := makeURIRolloutV1AutoUpdateRolloutUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRolloutV1AutoUpdateRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

// AutoGetRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoGetRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	path := makeURIRolloutV1AutoGetRolloutGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRolloutV1AutoGetRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

// AutoDeleteRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoDeleteRollout(ctx context.Context, in *Rollout) (*Rollout, error) {
	path := makeURIRolloutV1AutoDeleteRolloutDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRolloutV1AutoDeleteRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Rollout), err
}

// AutoListRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoListRollout(ctx context.Context, options *api.ListWatchOptions) (*RolloutList, error) {
	path := makeURIRolloutV1AutoListRolloutListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRolloutV1AutoListRollout(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RolloutList), err
}

// AutoWatchRollout CRUD method for Rollout
func (r *EndpointsRolloutV1RestClient) AutoWatchRollout(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIRolloutV1AutoWatchRolloutWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	conn, hresp, err := websocket.DefaultDialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgRolloutWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeRolloutV1RestClientEndpoints make REST client endpoints
func MakeRolloutV1RestClientEndpoints(instance string) (EndpointsRolloutV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsRolloutV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MakeRolloutV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeRolloutV1StagedRestClientEndpoints(instance string, bufferId string) (EndpointsRolloutV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsRolloutV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   http.DefaultClient,
	}, nil
}
