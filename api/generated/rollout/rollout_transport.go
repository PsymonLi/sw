// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package rollout is a auto generated package.
Input file: rollout.proto
*/
package rollout

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPRollout(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRollout(_ context.Context, r *http.Request) (interface{}, error) {
	var req Rollout
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRollout encodes GRPC request
func EncodeGrpcReqRollout(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Rollout)
	return req, nil
}

// DecodeGrpcReqRollout decodes GRPC request
func DecodeGrpcReqRollout(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Rollout)
	return req, nil
}

// EncodeGrpcRespRollout encodes GRC response
func EncodeGrpcRespRollout(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRollout decodes GRPC response
func DecodeGrpcRespRollout(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRolloutPhase(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRolloutPhase(_ context.Context, r *http.Request) (interface{}, error) {
	var req RolloutPhase
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRolloutPhase encodes GRPC request
func EncodeGrpcReqRolloutPhase(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutPhase)
	return req, nil
}

// DecodeGrpcReqRolloutPhase decodes GRPC request
func DecodeGrpcReqRolloutPhase(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutPhase)
	return req, nil
}

// EncodeGrpcRespRolloutPhase encodes GRC response
func EncodeGrpcRespRolloutPhase(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRolloutPhase decodes GRPC response
func DecodeGrpcRespRolloutPhase(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRolloutSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRolloutSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RolloutSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRolloutSpec encodes GRPC request
func EncodeGrpcReqRolloutSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutSpec)
	return req, nil
}

// DecodeGrpcReqRolloutSpec decodes GRPC request
func DecodeGrpcReqRolloutSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutSpec)
	return req, nil
}

// EncodeGrpcRespRolloutSpec encodes GRC response
func EncodeGrpcRespRolloutSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRolloutSpec decodes GRPC response
func DecodeGrpcRespRolloutSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRolloutStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRolloutStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RolloutStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRolloutStatus encodes GRPC request
func EncodeGrpcReqRolloutStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutStatus)
	return req, nil
}

// DecodeGrpcReqRolloutStatus decodes GRPC request
func DecodeGrpcReqRolloutStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RolloutStatus)
	return req, nil
}

// EncodeGrpcRespRolloutStatus encodes GRC response
func EncodeGrpcRespRolloutStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRolloutStatus decodes GRPC response
func DecodeGrpcRespRolloutStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
