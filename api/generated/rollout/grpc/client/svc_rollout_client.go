// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	rollout "github.com/pensando/sw/api/generated/rollout"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewRolloutV1 sets up a new client for RolloutV1
func NewRolloutV1(conn *grpc.ClientConn, logger log.Logger) rollout.ServiceRolloutV1Client {

	var lAutoAddRolloutEndpoint endpoint.Endpoint
	{
		lAutoAddRolloutEndpoint = grpctransport.NewClient(
			conn,
			"rollout.RolloutV1",
			"AutoAddRollout",
			rollout.EncodeGrpcReqRollout,
			rollout.DecodeGrpcRespRollout,
			&rollout.Rollout{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddRolloutEndpoint = trace.ClientEndPoint("RolloutV1:AutoAddRollout")(lAutoAddRolloutEndpoint)
	}
	var lAutoDeleteRolloutEndpoint endpoint.Endpoint
	{
		lAutoDeleteRolloutEndpoint = grpctransport.NewClient(
			conn,
			"rollout.RolloutV1",
			"AutoDeleteRollout",
			rollout.EncodeGrpcReqRollout,
			rollout.DecodeGrpcRespRollout,
			&rollout.Rollout{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteRolloutEndpoint = trace.ClientEndPoint("RolloutV1:AutoDeleteRollout")(lAutoDeleteRolloutEndpoint)
	}
	var lAutoGetRolloutEndpoint endpoint.Endpoint
	{
		lAutoGetRolloutEndpoint = grpctransport.NewClient(
			conn,
			"rollout.RolloutV1",
			"AutoGetRollout",
			rollout.EncodeGrpcReqRollout,
			rollout.DecodeGrpcRespRollout,
			&rollout.Rollout{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetRolloutEndpoint = trace.ClientEndPoint("RolloutV1:AutoGetRollout")(lAutoGetRolloutEndpoint)
	}
	var lAutoListRolloutEndpoint endpoint.Endpoint
	{
		lAutoListRolloutEndpoint = grpctransport.NewClient(
			conn,
			"rollout.RolloutV1",
			"AutoListRollout",
			rollout.EncodeGrpcReqListWatchOptions,
			rollout.DecodeGrpcRespRolloutList,
			&rollout.RolloutList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListRolloutEndpoint = trace.ClientEndPoint("RolloutV1:AutoListRollout")(lAutoListRolloutEndpoint)
	}
	var lAutoUpdateRolloutEndpoint endpoint.Endpoint
	{
		lAutoUpdateRolloutEndpoint = grpctransport.NewClient(
			conn,
			"rollout.RolloutV1",
			"AutoUpdateRollout",
			rollout.EncodeGrpcReqRollout,
			rollout.DecodeGrpcRespRollout,
			&rollout.Rollout{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateRolloutEndpoint = trace.ClientEndPoint("RolloutV1:AutoUpdateRollout")(lAutoUpdateRolloutEndpoint)
	}
	return rollout.EndpointsRolloutV1Client{
		Client: rollout.NewRolloutV1Client(conn),

		AutoAddRolloutEndpoint:    lAutoAddRolloutEndpoint,
		AutoDeleteRolloutEndpoint: lAutoDeleteRolloutEndpoint,
		AutoGetRolloutEndpoint:    lAutoGetRolloutEndpoint,
		AutoListRolloutEndpoint:   lAutoListRolloutEndpoint,
		AutoUpdateRolloutEndpoint: lAutoUpdateRolloutEndpoint,
	}
}

// NewRolloutV1Backend creates an instrumented client with middleware
func NewRolloutV1Backend(conn *grpc.ClientConn, logger log.Logger) rollout.ServiceRolloutV1Client {
	cl := NewRolloutV1(conn, logger)
	cl = rollout.LoggingRolloutV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjRolloutV1Rollout struct {
	logger log.Logger
	client rollout.ServiceRolloutV1Client
}

func (a *grpcObjRolloutV1Rollout) Create(ctx context.Context, in *rollout.Rollout) (*rollout.Rollout, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddRollout(nctx, in)
}

func (a *grpcObjRolloutV1Rollout) Update(ctx context.Context, in *rollout.Rollout) (*rollout.Rollout, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateRollout(nctx, in)
}

func (a *grpcObjRolloutV1Rollout) Get(ctx context.Context, objMeta *api.ObjectMeta) (*rollout.Rollout, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := rollout.Rollout{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetRollout(nctx, &in)
}

func (a *grpcObjRolloutV1Rollout) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*rollout.Rollout, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := rollout.Rollout{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteRollout(nctx, &in)
}

func (a *grpcObjRolloutV1Rollout) List(ctx context.Context, options *api.ListWatchOptions) ([]*rollout.Rollout, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListRollout(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjRolloutV1Rollout) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "Rollout", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchRollout(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(rollout.RolloutV1_AutoWatchRolloutClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjRolloutV1Rollout) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjRolloutV1Rollout struct {
	endpoints rollout.EndpointsRolloutV1RestClient
	instance  string
}

func (a *restObjRolloutV1Rollout) Create(ctx context.Context, in *rollout.Rollout) (*rollout.Rollout, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddRollout(ctx, in)
}

func (a *restObjRolloutV1Rollout) Update(ctx context.Context, in *rollout.Rollout) (*rollout.Rollout, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateRollout(ctx, in)
}

func (a *restObjRolloutV1Rollout) Get(ctx context.Context, objMeta *api.ObjectMeta) (*rollout.Rollout, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := rollout.Rollout{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetRollout(ctx, &in)
}

func (a *restObjRolloutV1Rollout) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*rollout.Rollout, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := rollout.Rollout{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteRollout(ctx, &in)
}

func (a *restObjRolloutV1Rollout) List(ctx context.Context, options *api.ListWatchOptions) ([]*rollout.Rollout, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}

	r, err := a.endpoints.AutoListRollout(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjRolloutV1Rollout) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	// XXX-TODO(sanjayt): add rest client handler for chunked stream
	return nil, nil
}

func (a *restObjRolloutV1Rollout) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return true
	case apiserver.WatchOper:
		return true
	default:
		return false
	}
}

type crudClientRolloutV1 struct {
	logger log.Logger
	client rollout.ServiceRolloutV1Client

	grpcRollout rollout.RolloutV1RolloutInterface
}

// NewGrpcCrudClientRolloutV1 creates a GRPC client for the service
func NewGrpcCrudClientRolloutV1(conn *grpc.ClientConn, logger log.Logger) rollout.RolloutV1Interface {
	client := NewRolloutV1Backend(conn, logger)
	return &crudClientRolloutV1{
		logger: logger,
		client: client,

		grpcRollout: &grpcObjRolloutV1Rollout{client: client, logger: logger},
	}
}

func (a *crudClientRolloutV1) Rollout() rollout.RolloutV1RolloutInterface {
	return a.grpcRollout
}

func (a *crudClientRolloutV1) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "RolloutV1", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchSvcRolloutV1(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(rollout.RolloutV1_AutoWatchSvcRolloutV1Client)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			for _, e := range r.Events {
				ev := kvstore.WatchEvent{Type: kvstore.WatchEventType(e.Type)}
				robj, err := listerwatcher.GetObject(e)
				if err != nil {
					a.logger.ErrorLog("msg", "error on receive unmarshall", "error", err)
					close(lw.OutCh)
					return
				}
				ev.Object = robj
				select {
				case lw.OutCh <- &ev:
				case <-wstream.Context().Done():
					close(lw.OutCh)
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

type crudRestClientRolloutV1 struct {
	restRollout rollout.RolloutV1RolloutInterface
}

// NewRestCrudClientRolloutV1 creates a REST client for the service.
func NewRestCrudClientRolloutV1(url string) rollout.RolloutV1Interface {
	endpoints, err := rollout.MakeRolloutV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientRolloutV1{

		restRollout: &restObjRolloutV1Rollout{endpoints: endpoints, instance: url},
	}
}

// NewStagedRestCrudClientRolloutV1 creates a REST client for the service.
func NewStagedRestCrudClientRolloutV1(url string, id string) rollout.RolloutV1Interface {
	endpoints, err := rollout.MakeRolloutV1StagedRestClientEndpoints(url, id)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientRolloutV1{

		restRollout: &restObjRolloutV1Rollout{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientRolloutV1) Rollout() rollout.RolloutV1RolloutInterface {
	return a.restRollout
}

func (a *crudRestClientRolloutV1) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
