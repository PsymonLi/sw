// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package rollout is a auto generated package.
Input file: rollout.proto
*/
package rollout

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// RolloutPhase_Phases_normal is a map of normalized values for the enum
var RolloutPhase_Phases_normal = map[string]string{
	"complete":           "complete",
	"dependencies-check": "dependencies-check",
	"fail":               "fail",
	"pre-check":          "pre-check",
	"progressing":        "progressing",
	"waiting-for-turn":   "waiting-for-turn",
}

var RolloutPhase_Phases_vname = map[int32]string{
	0: "pre-check",
	1: "dependencies-check",
	2: "waiting-for-turn",
	3: "progressing",
	4: "complete",
	5: "fail",
}

var RolloutPhase_Phases_vvalue = map[string]int32{
	"pre-check":          0,
	"dependencies-check": 1,
	"waiting-for-turn":   2,
	"progressing":        3,
	"complete":           4,
	"fail":               5,
}

func (x RolloutPhase_Phases) String() string {
	return RolloutPhase_Phases_vname[int32(x)]
}

// RolloutSpec_StrategyType_normal is a map of normalized values for the enum
var RolloutSpec_StrategyType_normal = map[string]string{
	"exponential": "exponential",
	"linear":      "linear",
}

var RolloutSpec_StrategyType_vname = map[int32]string{
	0: "linear",
	1: "exponential",
}

var RolloutSpec_StrategyType_vvalue = map[string]int32{
	"linear":      0,
	"exponential": 1,
}

func (x RolloutSpec_StrategyType) String() string {
	return RolloutSpec_StrategyType_vname[int32(x)]
}

// RolloutSpec_DSCUpgradeType_normal is a map of normalized values for the enum
var RolloutSpec_DSCUpgradeType_normal = map[string]string{
	"disruptive":     "disruptive",
	"on-next-reboot": "on-next-reboot",
}

var RolloutSpec_DSCUpgradeType_vname = map[int32]string{
	0: "disruptive",
	1: "on-next-reboot",
}

var RolloutSpec_DSCUpgradeType_vvalue = map[string]int32{
	"disruptive":     0,
	"on-next-reboot": 1,
}

func (x RolloutSpec_DSCUpgradeType) String() string {
	return RolloutSpec_DSCUpgradeType_vname[int32(x)]
}

// RolloutStatus_RolloutOperationalState_normal is a map of normalized values for the enum
var RolloutStatus_RolloutOperationalState_normal = map[string]string{
	"deadline-exceeded":    "deadline-exceeded",
	"failure":              "failure",
	"precheck-in-progress": "precheck-in-progress",
	"progressing":          "progressing",
	"scheduled":            "scheduled",
	"scheduled-for-retry":  "scheduled-for-retry",
	"success":              "success",
	"suspend-in-progress":  "suspend-in-progress",
	"suspended":            "suspended",
}

var RolloutStatus_RolloutOperationalState_vname = map[int32]string{
	0: "progressing",
	1: "failure",
	2: "success",
	3: "scheduled",
	4: "suspended",
	5: "suspend-in-progress",
	6: "deadline-exceeded",
	7: "precheck-in-progress",
	8: "scheduled-for-retry",
}

var RolloutStatus_RolloutOperationalState_vvalue = map[string]int32{
	"progressing":          0,
	"failure":              1,
	"success":              2,
	"scheduled":            3,
	"suspended":            4,
	"suspend-in-progress":  5,
	"deadline-exceeded":    6,
	"precheck-in-progress": 7,
	"scheduled-for-retry":  8,
}

func (x RolloutStatus_RolloutOperationalState) String() string {
	return RolloutStatus_RolloutOperationalState_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapRollout = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Rollout) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "rollout/", m.Name)
}

func (m *Rollout) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/rollout/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *RolloutAction) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "rolloutAction", "/Singleton")
}

func (m *RolloutAction) MakeURI(cat, ver, prefix string) string {
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/rolloutAction")
}

// Clone clones the object into into or creates one of into is nil
func (m *Rollout) Clone(into interface{}) (interface{}, error) {
	var out *Rollout
	var ok bool
	if into == nil {
		out = &Rollout{}
	} else {
		out, ok = into.(*Rollout)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Rollout))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Rollout) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Rollout"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RolloutAction) Clone(into interface{}) (interface{}, error) {
	var out *RolloutAction
	var ok bool
	if into == nil {
		out = &RolloutAction{}
	} else {
		out, ok = into.(*RolloutAction)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RolloutAction))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RolloutAction) Defaults(ver string) bool {
	var ret bool
	m.Kind = "RolloutAction"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RolloutActionStatus) Clone(into interface{}) (interface{}, error) {
	var out *RolloutActionStatus
	var ok bool
	if into == nil {
		out = &RolloutActionStatus{}
	} else {
		out, ok = into.(*RolloutActionStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RolloutActionStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RolloutActionStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.OperationalState = "progressing"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RolloutPhase) Clone(into interface{}) (interface{}, error) {
	var out *RolloutPhase
	var ok bool
	if into == nil {
		out = &RolloutPhase{}
	} else {
		out, ok = into.(*RolloutPhase)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RolloutPhase))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RolloutPhase) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.NumberOfRetries = 0
		m.Phase = "pre-check"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RolloutSpec) Clone(into interface{}) (interface{}, error) {
	var out *RolloutSpec
	var ok bool
	if into == nil {
		out = &RolloutSpec{}
	} else {
		out, ok = into.(*RolloutSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RolloutSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RolloutSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.MaxParallel = 2
		m.Strategy = "linear"
		m.UpgradeType = "disruptive"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *RolloutStatus) Clone(into interface{}) (interface{}, error) {
	var out *RolloutStatus
	var ok bool
	if into == nil {
		out = &RolloutStatus{}
	} else {
		out, ok = into.(*RolloutStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*RolloutStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *RolloutStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.ControllerNodesStatus {
		if m.ControllerNodesStatus[k] != nil {
			i := m.ControllerNodesStatus[k]
			ret = i.Defaults(ver) || ret
		}
	}
	for k := range m.ControllerServicesStatus {
		if m.ControllerServicesStatus[k] != nil {
			i := m.ControllerServicesStatus[k]
			ret = i.Defaults(ver) || ret
		}
	}
	for k := range m.DSCsStatus {
		if m.DSCsStatus[k] != nil {
			i := m.DSCsStatus[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.OperationalState = "progressing"
	}
	return ret
}

// Validators and Requirements

func (m *Rollout) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Rollout) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Rollout"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Rollout"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Rollout) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *RolloutAction) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RolloutAction) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for RolloutAction"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for RolloutAction"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *RolloutAction) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *RolloutActionStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RolloutActionStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapRollout["RolloutActionStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRollout["RolloutActionStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RolloutActionStatus) Normalize() {

	m.OperationalState = RolloutStatus_RolloutOperationalState_normal[strings.ToLower(m.OperationalState)]

}

func (m *RolloutPhase) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RolloutPhase) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapRollout["RolloutPhase"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRollout["RolloutPhase"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RolloutPhase) Normalize() {

	m.Phase = RolloutPhase_Phases_normal[strings.ToLower(m.Phase)]

}

func (m *RolloutSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RolloutSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.OrderConstraints {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sOrderConstraints[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapRollout["RolloutSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRollout["RolloutSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RolloutSpec) Normalize() {

	for k, v := range m.OrderConstraints {
		if v != nil {
			v.Normalize()
			m.OrderConstraints[k] = v
		}
	}

	m.Strategy = RolloutSpec_StrategyType_normal[strings.ToLower(m.Strategy)]

	m.UpgradeType = RolloutSpec_DSCUpgradeType_normal[strings.ToLower(m.UpgradeType)]

}

func (m *RolloutStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *RolloutStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.ControllerNodesStatus {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sControllerNodesStatus[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	for k, v := range m.ControllerServicesStatus {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sControllerServicesStatus[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	for k, v := range m.DSCsStatus {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sDSCsStatus[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapRollout["RolloutStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapRollout["RolloutStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *RolloutStatus) Normalize() {

	for k, v := range m.ControllerNodesStatus {
		if v != nil {
			v.Normalize()
			m.ControllerNodesStatus[k] = v
		}
	}

	for k, v := range m.ControllerServicesStatus {
		if v != nil {
			v.Normalize()
			m.ControllerServicesStatus[k] = v
		}
	}

	for k, v := range m.DSCsStatus {
		if v != nil {
			v.Normalize()
			m.DSCsStatus[k] = v
		}
	}

	m.OperationalState = RolloutStatus_RolloutOperationalState_normal[strings.ToLower(m.OperationalState)]

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Rollout{},
		&RolloutAction{},
	)

	validatorMapRollout = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapRollout["RolloutActionStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapRollout["RolloutActionStatus"]["all"] = append(validatorMapRollout["RolloutActionStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutActionStatus)

		if _, ok := RolloutStatus_RolloutOperationalState_vvalue[m.OperationalState]; !ok {
			vals := []string{}
			for k1, _ := range RolloutStatus_RolloutOperationalState_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"OperationalState", vals)
		}
		return nil
	})

	validatorMapRollout["RolloutPhase"] = make(map[string][]func(string, interface{}) error)
	validatorMapRollout["RolloutPhase"]["all"] = append(validatorMapRollout["RolloutPhase"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutPhase)

		if _, ok := RolloutPhase_Phases_vvalue[m.Phase]; !ok {
			vals := []string{}
			for k1, _ := range RolloutPhase_Phases_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Phase", vals)
		}
		return nil
	})

	validatorMapRollout["RolloutSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapRollout["RolloutSpec"]["all"] = append(validatorMapRollout["RolloutSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutSpec)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "0")

		if err := validators.EmptyOr(validators.Duration, m.Duration, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Duration", err.Error())
		}
		return nil
	})

	validatorMapRollout["RolloutSpec"]["all"] = append(validatorMapRollout["RolloutSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutSpec)

		if _, ok := RolloutSpec_StrategyType_vvalue[m.Strategy]; !ok {
			vals := []string{}
			for k1, _ := range RolloutSpec_StrategyType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Strategy", vals)
		}
		return nil
	})

	validatorMapRollout["RolloutSpec"]["all"] = append(validatorMapRollout["RolloutSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutSpec)

		if _, ok := RolloutSpec_DSCUpgradeType_vvalue[m.UpgradeType]; !ok {
			vals := []string{}
			for k1, _ := range RolloutSpec_DSCUpgradeType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"UpgradeType", vals)
		}
		return nil
	})

	validatorMapRollout["RolloutStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapRollout["RolloutStatus"]["all"] = append(validatorMapRollout["RolloutStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*RolloutStatus)

		if _, ok := RolloutStatus_RolloutOperationalState_vvalue[m.OperationalState]; !ok {
			vals := []string{}
			for k1, _ := range RolloutStatus_RolloutOperationalState_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"OperationalState", vals)
		}
		return nil
	})

}
