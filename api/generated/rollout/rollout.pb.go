// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollout.proto

/*
	Package rollout is a generated protocol buffer package.

	Service name

	It is generated from these files:
		rollout.proto
		svc_rollout.proto

	It has these top-level messages:
		Rollout
		RolloutPhase
		RolloutSpec
		RolloutStatus
		AutoMsgRolloutWatchHelper
		RolloutList
*/
package rollout

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import labels "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// These are valid conditions of rollout component (node or service)
type RolloutPhase_Phases int32

const (
	// Pre rollout check (enough disk space, image download, validation,)
	// ui-hint: PreCheck
	RolloutPhase_PRE_CHECK RolloutPhase_Phases = 0
	// The dependencies are met (dependent nodes/services are at needed versions)
	// ui-hint: DependenciesCheck
	RolloutPhase_DEPENDENCIES_CHECK RolloutPhase_Phases = 1
	// Among the various nodes getting upgraded in parallel, waiting for this node's turn.
	// ui-hint: WaitingForTurn
	RolloutPhase_WAITING_FOR_TURN RolloutPhase_Phases = 2
	// Component is undergoing rollout - Either node is rebooting or service is restarting
	// ui-hint: Processing
	RolloutPhase_PROGRESSING RolloutPhase_Phases = 3
	// new revision is ready and available for service
	// ui-hint: Complete
	RolloutPhase_COMPLETE RolloutPhase_Phases = 4
	// Node/Component is in failure state
	// ui-hint: Fail
	RolloutPhase_FAIL RolloutPhase_Phases = 5
)

var RolloutPhase_Phases_name = map[int32]string{
	0: "PRE_CHECK",
	1: "DEPENDENCIES_CHECK",
	2: "WAITING_FOR_TURN",
	3: "PROGRESSING",
	4: "COMPLETE",
	5: "FAIL",
}
var RolloutPhase_Phases_value = map[string]int32{
	"PRE_CHECK":          0,
	"DEPENDENCIES_CHECK": 1,
	"WAITING_FOR_TURN":   2,
	"PROGRESSING":        3,
	"COMPLETE":           4,
	"FAIL":               5,
}

func (x RolloutPhase_Phases) String() string {
	return proto.EnumName(RolloutPhase_Phases_name, int32(x))
}
func (RolloutPhase_Phases) EnumDescriptor() ([]byte, []int) { return fileDescriptorRollout, []int{1, 0} }

// Strategy in which the nodes are upgraded - subject to other constraints below
type RolloutSpec_StrategyType int32

const (
	// fixed number of Nodes are upgraded in parallel
	// ui-hint: Linear
	RolloutSpec_LINEAR RolloutSpec_StrategyType = 0
	// Start off with small number of node upgrade. As upgrades progress, increase the
	// number of nodes getting upgraded exponentially still maintaining the maximum number
	// of nodes that are getting updated within limits below
	// ui-hint: Exponential
	RolloutSpec_EXPONENTIAL RolloutSpec_StrategyType = 1
)

var RolloutSpec_StrategyType_name = map[int32]string{
	0: "LINEAR",
	1: "EXPONENTIAL",
}
var RolloutSpec_StrategyType_value = map[string]int32{
	"LINEAR":      0,
	"EXPONENTIAL": 1,
}

func (x RolloutSpec_StrategyType) String() string {
	return proto.EnumName(RolloutSpec_StrategyType_name, int32(x))
}
func (RolloutSpec_StrategyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRollout, []int{2, 0}
}

// By default the upgrade is Disruptive. However the API can specify the type of upgrade
type RolloutSpec_SmartNICUpgradeType int32

const (
	// ui-hint: Disruptive
	RolloutSpec_Disruptive RolloutSpec_SmartNICUpgradeType = 0
	// ui-hint: OnNextHostReboot
	RolloutSpec_OnNextHostReboot RolloutSpec_SmartNICUpgradeType = 1
)

var RolloutSpec_SmartNICUpgradeType_name = map[int32]string{
	0: "Disruptive",
	1: "OnNextHostReboot",
}
var RolloutSpec_SmartNICUpgradeType_value = map[string]int32{
	"Disruptive":       0,
	"OnNextHostReboot": 1,
}

func (x RolloutSpec_SmartNICUpgradeType) String() string {
	return proto.EnumName(RolloutSpec_SmartNICUpgradeType_name, int32(x))
}
func (RolloutSpec_SmartNICUpgradeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRollout, []int{2, 1}
}

// Current overall state of rollout
type RolloutStatus_RolloutOperationalState int32

const (
	//
	RolloutStatus_PROGRESSING RolloutStatus_RolloutOperationalState = 0
	//
	RolloutStatus_FAILURE RolloutStatus_RolloutOperationalState = 1
	//
	RolloutStatus_SUCCESS RolloutStatus_RolloutOperationalState = 2
	//
	RolloutStatus_SCHEDULED RolloutStatus_RolloutOperationalState = 3
	//
	RolloutStatus_SUSPENDED RolloutStatus_RolloutOperationalState = 4
	//
	RolloutStatus_SUSPEND_IN_PROGRESS RolloutStatus_RolloutOperationalState = 5
	//
	RolloutStatus_DEADLINE_EXCEEDED RolloutStatus_RolloutOperationalState = 6
)

var RolloutStatus_RolloutOperationalState_name = map[int32]string{
	0: "PROGRESSING",
	1: "FAILURE",
	2: "SUCCESS",
	3: "SCHEDULED",
	4: "SUSPENDED",
	5: "SUSPEND_IN_PROGRESS",
	6: "DEADLINE_EXCEEDED",
}
var RolloutStatus_RolloutOperationalState_value = map[string]int32{
	"PROGRESSING":         0,
	"FAILURE":             1,
	"SUCCESS":             2,
	"SCHEDULED":           3,
	"SUSPENDED":           4,
	"SUSPEND_IN_PROGRESS": 5,
	"DEADLINE_EXCEEDED":   6,
}

func (x RolloutStatus_RolloutOperationalState) String() string {
	return proto.EnumName(RolloutStatus_RolloutOperationalState_name, int32(x))
}
func (RolloutStatus_RolloutOperationalState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRollout, []int{3, 0}
}

// Rollout object captures the admin's intent and status of the software version running on the cluster
//  It is incorrect to have two different Rollouts active at the same time
type Rollout struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec RolloutSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status RolloutStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Rollout) Reset()                    { *m = Rollout{} }
func (m *Rollout) String() string            { return proto.CompactTextString(m) }
func (*Rollout) ProtoMessage()               {}
func (*Rollout) Descriptor() ([]byte, []int) { return fileDescriptorRollout, []int{0} }

func (m *Rollout) GetSpec() RolloutSpec {
	if m != nil {
		return m.Spec
	}
	return RolloutSpec{}
}

func (m *Rollout) GetStatus() RolloutStatus {
	if m != nil {
		return m.Status
	}
	return RolloutStatus{}
}

// RolloutPhase gives details of status of Rollout on each Node/Service/SmartNIC
type RolloutPhase struct {
	// Name of the Node, Service or SmartNIC
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,inline,proto3" json:"name,inline"`
	// Phase indicates a certain rollout phase/condition
	Phase string `protobuf:"bytes,2,opt,name=Phase,json=phase,omitempty,proto3" json:"phase,omitempty"`
	// The time of starting the rollout for this node/service.
	// This does not include the pre-check which can happen way before the actual rollout.
	StartTime *api.Timestamp `protobuf:"bytes,3,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// Time at which rollout completed for this node/service
	EndTime *api.Timestamp `protobuf:"bytes,4,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	// The reason for the Phase last transition, if any
	Reason string `protobuf:"bytes,5,opt,name=Reason,json=reason,omitempty,proto3" json:"reason,omitempty"`
	// A detailed message indicating details about the transition.
	Message string `protobuf:"bytes,6,opt,name=Message,json=message,omitempty,proto3" json:"message,omitempty"`
}

func (m *RolloutPhase) Reset()                    { *m = RolloutPhase{} }
func (m *RolloutPhase) String() string            { return proto.CompactTextString(m) }
func (*RolloutPhase) ProtoMessage()               {}
func (*RolloutPhase) Descriptor() ([]byte, []int) { return fileDescriptorRollout, []int{1} }

func (m *RolloutPhase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RolloutPhase) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *RolloutPhase) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RolloutPhase) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *RolloutPhase) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RolloutPhase) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// RolloutSpec is the Spec of a Rollout
type RolloutSpec struct {
	//  New Version of the image to rollout to
	Version string `protobuf:"bytes,1,opt,name=Version,json=version,inline,proto3" json:"version,inline"`
	// Time, if specified, at which the rollout is supposed to start
	ScheduledStartTime *api.Timestamp `protobuf:"bytes,2,opt,name=ScheduledStartTime,json=scheduled-start-time,omitempty" json:"scheduled-start-time,omitempty"`
	// Duration, if specified, after which the rollout is supposed to stop, if not completed by that time
	// Typically represents the end of Maintenance window
	Duration string `protobuf:"bytes,3,opt,name=Duration,json=duration,omitempty,proto3" json:"duration,omitempty"`
	//
	Strategy string `protobuf:"bytes,4,opt,name=Strategy,json=strategy,proto3" json:"strategy"`
	// MaxParallel is the maximum number of nodes getting updated at any time
	// This setting is applicable only to SmartNICs.
	// Controller nodes are always upgraded one after another.
	MaxParallel uint32 `protobuf:"varint,5,opt,name=MaxParallel,json=max-parallel,proto3" json:"max-parallel"`
	// After these many failures are observed during NIC upgrade, the rollout process stops
	// This setting applies to smartNICs only.
	// The controller nodes are rollout first and any failure there stops the rollout of SmartNICs
	MaxNICFailuresBeforeAbort uint32 `protobuf:"varint,6,opt,name=MaxNICFailuresBeforeAbort,json=max-nic-failures-before-abort,proto3" json:"max-nic-failures-before-abort"`
	// If specified, this is the sequence in which the SmartNICs are upgraded based on their labels.
	// if a SmartNIC matches multiple constraints, the first one is used.
	//  Any SmartNIC which does not match the constraints is upgraded at the end.
	// This order is mainly for the smartNICs on Hosts
	// Controller nodes are always rollout one after other
	OrderConstraints []*labels.Selector `protobuf:"bytes,7,rep,name=OrderConstraints,json=order-constraints,omitempty" json:"order-constraints,omitempty"`
	// When Set to true, the current rollout is suspended. Existing Nodes/Services/SmartNICs in the middle of rollout continue
	//  rollout execution but any Nodes/Services/SmartNICs which has not started Rollout will not be scheduled one.
	Suspend bool `protobuf:"varint,8,opt,name=Suspend,json=suspend,omitempty,proto3" json:"suspend,omitempty"`
	// Dont upgrade Controller but only upgrade SmartNICs
	SmartNICsOnly bool `protobuf:"varint,9,opt,name=SmartNICsOnly,json=smartnics-only,omitempty,proto3" json:"smartnics-only,omitempty"`
	// When SmartNICMustMatchConstraint is true, Any smartNIC which does not match OrderConstraints does not go through rollout
	SmartNICMustMatchConstraint bool `protobuf:"varint,10,opt,name=SmartNICMustMatchConstraint,json=smartnic-must-match-constraint,omitempty,proto3" json:"smartnic-must-match-constraint,omitempty"`
	//
	UpgradeType string `protobuf:"bytes,11,opt,name=UpgradeType,json=upgrade-type,proto3" json:"upgrade-type"`
}

func (m *RolloutSpec) Reset()                    { *m = RolloutSpec{} }
func (m *RolloutSpec) String() string            { return proto.CompactTextString(m) }
func (*RolloutSpec) ProtoMessage()               {}
func (*RolloutSpec) Descriptor() ([]byte, []int) { return fileDescriptorRollout, []int{2} }

func (m *RolloutSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RolloutSpec) GetScheduledStartTime() *api.Timestamp {
	if m != nil {
		return m.ScheduledStartTime
	}
	return nil
}

func (m *RolloutSpec) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *RolloutSpec) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *RolloutSpec) GetMaxParallel() uint32 {
	if m != nil {
		return m.MaxParallel
	}
	return 0
}

func (m *RolloutSpec) GetMaxNICFailuresBeforeAbort() uint32 {
	if m != nil {
		return m.MaxNICFailuresBeforeAbort
	}
	return 0
}

func (m *RolloutSpec) GetOrderConstraints() []*labels.Selector {
	if m != nil {
		return m.OrderConstraints
	}
	return nil
}

func (m *RolloutSpec) GetSuspend() bool {
	if m != nil {
		return m.Suspend
	}
	return false
}

func (m *RolloutSpec) GetSmartNICsOnly() bool {
	if m != nil {
		return m.SmartNICsOnly
	}
	return false
}

func (m *RolloutSpec) GetSmartNICMustMatchConstraint() bool {
	if m != nil {
		return m.SmartNICMustMatchConstraint
	}
	return false
}

func (m *RolloutSpec) GetUpgradeType() string {
	if m != nil {
		return m.UpgradeType
	}
	return ""
}

// Rollout Status gives the status of the rollout at the top level as well as details of
//  individual components
type RolloutStatus struct {
	// Rollout status of Controller Node
	ControllerNodesStatus []*RolloutPhase `protobuf:"bytes,1,rep,name=ControllerNodesStatus,json=controller-nodes-status,omitempty" json:"controller-nodes-status,omitempty"`
	// Rollout status of Various Controller Services
	ControllerServicesStatus []*RolloutPhase `protobuf:"bytes,2,rep,name=ControllerServicesStatus,json=controller-services-status,omitempty" json:"controller-services-status,omitempty"`
	// Rollout status of SmartNICs in the cluster. Has entries for SmartNICs on Controller nodes as well as workload nodes
	// The entries are group by parallelism based on the order-constraints and max-parallel specified by the user.
	SmartNICsStatus []*RolloutPhase `protobuf:"bytes,3,rep,name=SmartNICsStatus,json=smartnics-status,omitempty" json:"smartnics-status,omitempty"`
	//
	OperationalState string `protobuf:"bytes,4,opt,name=OperationalState,json=state,omitempty,proto3" json:"state,omitempty"`
	// Heuristic value of percentage completion of the rollout
	CompletionPercentage uint32 `protobuf:"varint,5,opt,name=CompletionPercentage,json=completion-percent,omitempty,proto3" json:"completion-percent,omitempty"`
	// Start time of Rollout
	StartTime *api.Timestamp `protobuf:"bytes,6,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// End time of Rollout
	EndTime *api.Timestamp `protobuf:"bytes,7,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	// Version of the cluster before the start of rollout
	PreviousVersion string `protobuf:"bytes,8,opt,name=PreviousVersion,json=prev-version,omitempty,proto3" json:"prev-version,omitempty"`
}

func (m *RolloutStatus) Reset()                    { *m = RolloutStatus{} }
func (m *RolloutStatus) String() string            { return proto.CompactTextString(m) }
func (*RolloutStatus) ProtoMessage()               {}
func (*RolloutStatus) Descriptor() ([]byte, []int) { return fileDescriptorRollout, []int{3} }

func (m *RolloutStatus) GetControllerNodesStatus() []*RolloutPhase {
	if m != nil {
		return m.ControllerNodesStatus
	}
	return nil
}

func (m *RolloutStatus) GetControllerServicesStatus() []*RolloutPhase {
	if m != nil {
		return m.ControllerServicesStatus
	}
	return nil
}

func (m *RolloutStatus) GetSmartNICsStatus() []*RolloutPhase {
	if m != nil {
		return m.SmartNICsStatus
	}
	return nil
}

func (m *RolloutStatus) GetOperationalState() string {
	if m != nil {
		return m.OperationalState
	}
	return ""
}

func (m *RolloutStatus) GetCompletionPercentage() uint32 {
	if m != nil {
		return m.CompletionPercentage
	}
	return 0
}

func (m *RolloutStatus) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RolloutStatus) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *RolloutStatus) GetPreviousVersion() string {
	if m != nil {
		return m.PreviousVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*Rollout)(nil), "rollout.Rollout")
	proto.RegisterType((*RolloutPhase)(nil), "rollout.RolloutPhase")
	proto.RegisterType((*RolloutSpec)(nil), "rollout.RolloutSpec")
	proto.RegisterType((*RolloutStatus)(nil), "rollout.RolloutStatus")
	proto.RegisterEnum("rollout.RolloutPhase_Phases", RolloutPhase_Phases_name, RolloutPhase_Phases_value)
	proto.RegisterEnum("rollout.RolloutSpec_StrategyType", RolloutSpec_StrategyType_name, RolloutSpec_StrategyType_value)
	proto.RegisterEnum("rollout.RolloutSpec_SmartNICUpgradeType", RolloutSpec_SmartNICUpgradeType_name, RolloutSpec_SmartNICUpgradeType_value)
	proto.RegisterEnum("rollout.RolloutStatus_RolloutOperationalState", RolloutStatus_RolloutOperationalState_name, RolloutStatus_RolloutOperationalState_value)
}
func (m *Rollout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintRollout(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *RolloutPhase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutPhase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Phase) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Phase)))
		i += copy(dAtA[i:], m.Phase)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.StartTime.Size()))
		n5, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.EndTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.EndTime.Size()))
		n6, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *RolloutSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.ScheduledStartTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.ScheduledStartTime.Size()))
		n7, err := m.ScheduledStartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Duration) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Duration)))
		i += copy(dAtA[i:], m.Duration)
	}
	if len(m.Strategy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Strategy)))
		i += copy(dAtA[i:], m.Strategy)
	}
	if m.MaxParallel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.MaxParallel))
	}
	if m.MaxNICFailuresBeforeAbort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.MaxNICFailuresBeforeAbort))
	}
	if len(m.OrderConstraints) > 0 {
		for _, msg := range m.OrderConstraints {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Suspend {
		dAtA[i] = 0x40
		i++
		if m.Suspend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SmartNICsOnly {
		dAtA[i] = 0x48
		i++
		if m.SmartNICsOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SmartNICMustMatchConstraint {
		dAtA[i] = 0x50
		i++
		if m.SmartNICMustMatchConstraint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UpgradeType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.UpgradeType)))
		i += copy(dAtA[i:], m.UpgradeType)
	}
	return i, nil
}

func (m *RolloutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControllerNodesStatus) > 0 {
		for _, msg := range m.ControllerNodesStatus {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ControllerServicesStatus) > 0 {
		for _, msg := range m.ControllerServicesStatus {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SmartNICsStatus) > 0 {
		for _, msg := range m.SmartNICsStatus {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRollout(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OperationalState) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.OperationalState)))
		i += copy(dAtA[i:], m.OperationalState)
	}
	if m.CompletionPercentage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.CompletionPercentage))
	}
	if m.StartTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.StartTime.Size()))
		n8, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.EndTime != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRollout(dAtA, i, uint64(m.EndTime.Size()))
		n9, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.PreviousVersion) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRollout(dAtA, i, uint64(len(m.PreviousVersion)))
		i += copy(dAtA[i:], m.PreviousVersion)
	}
	return i, nil
}

func encodeVarintRollout(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Rollout) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRollout(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRollout(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRollout(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRollout(uint64(l))
	return n
}

func (m *RolloutPhase) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	return n
}

func (m *RolloutSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.ScheduledStartTime != nil {
		l = m.ScheduledStartTime.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.MaxParallel != 0 {
		n += 1 + sovRollout(uint64(m.MaxParallel))
	}
	if m.MaxNICFailuresBeforeAbort != 0 {
		n += 1 + sovRollout(uint64(m.MaxNICFailuresBeforeAbort))
	}
	if len(m.OrderConstraints) > 0 {
		for _, e := range m.OrderConstraints {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	if m.Suspend {
		n += 2
	}
	if m.SmartNICsOnly {
		n += 2
	}
	if m.SmartNICMustMatchConstraint {
		n += 2
	}
	l = len(m.UpgradeType)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	return n
}

func (m *RolloutStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.ControllerNodesStatus) > 0 {
		for _, e := range m.ControllerNodesStatus {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	if len(m.ControllerServicesStatus) > 0 {
		for _, e := range m.ControllerServicesStatus {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	if len(m.SmartNICsStatus) > 0 {
		for _, e := range m.SmartNICsStatus {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	l = len(m.OperationalState)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.CompletionPercentage != 0 {
		n += 1 + sovRollout(uint64(m.CompletionPercentage))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.PreviousVersion)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	return n
}

func sovRollout(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRollout(x uint64) (n int) {
	return sovRollout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rollout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutPhase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutPhase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutPhase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledStartTime == nil {
				m.ScheduledStartTime = &api.Timestamp{}
			}
			if err := m.ScheduledStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNICFailuresBeforeAbort", wireType)
			}
			m.MaxNICFailuresBeforeAbort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNICFailuresBeforeAbort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderConstraints = append(m.OrderConstraints, &labels.Selector{})
			if err := m.OrderConstraints[len(m.OrderConstraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspend = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNICsOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmartNICsOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNICMustMatchConstraint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SmartNICMustMatchConstraint = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgradeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerNodesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerNodesStatus = append(m.ControllerNodesStatus, &RolloutPhase{})
			if err := m.ControllerNodesStatus[len(m.ControllerNodesStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerServicesStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerServicesStatus = append(m.ControllerServicesStatus, &RolloutPhase{})
			if err := m.ControllerServicesStatus[len(m.ControllerServicesStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNICsStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartNICsStatus = append(m.SmartNICsStatus, &RolloutPhase{})
			if err := m.SmartNICsStatus[len(m.SmartNICsStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationalState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationalState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionPercentage", wireType)
			}
			m.CompletionPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionPercentage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRollout
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRollout
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRollout(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRollout = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollout   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rollout.proto", fileDescriptorRollout) }

var fileDescriptorRollout = []byte{
	// 1397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x36, 0x6d, 0x59, 0x3f, 0x23, 0x2b, 0x66, 0x26, 0xb6, 0x43, 0x39, 0xbe, 0x96, 0x23, 0xdc,
	0x0b, 0x28, 0xf7, 0x9a, 0x92, 0x6f, 0x02, 0xb4, 0x68, 0xda, 0x2e, 0x4c, 0x89, 0x4e, 0xd4, 0x58,
	0x3f, 0x25, 0xed, 0x24, 0x8b, 0x02, 0x06, 0x45, 0x4d, 0x64, 0x16, 0xe4, 0x0c, 0xc1, 0x19, 0xba,
	0x36, 0xba, 0x2b, 0x50, 0x6f, 0xba, 0xeb, 0x43, 0x74, 0xe1, 0x4d, 0xb7, 0x7d, 0x84, 0x2c, 0x83,
	0x3e, 0x80, 0x50, 0x04, 0x5d, 0xe9, 0x29, 0x8a, 0x19, 0x91, 0x36, 0x2d, 0xc9, 0x4e, 0xb2, 0x31,
	0x74, 0x7e, 0xbe, 0x6f, 0x0e, 0xcf, 0x7c, 0x3e, 0x67, 0x40, 0x21, 0x20, 0xae, 0x4b, 0x42, 0x56,
	0xf5, 0x03, 0xc2, 0x08, 0xcc, 0x44, 0xe6, 0xfa, 0xc6, 0x80, 0x90, 0x81, 0x8b, 0x6a, 0x96, 0xef,
	0xd4, 0x2c, 0x8c, 0x09, 0xb3, 0x98, 0x43, 0x30, 0x1d, 0xa7, 0xad, 0xeb, 0x03, 0x87, 0x1d, 0x87,
	0xbd, 0xaa, 0x4d, 0xbc, 0x9a, 0x8f, 0x30, 0xb5, 0x70, 0x9f, 0xd4, 0xe8, 0x0f, 0xb5, 0x13, 0x84,
	0x1d, 0x1b, 0xd5, 0x42, 0xe6, 0xb8, 0x94, 0x43, 0x07, 0x08, 0x27, 0xd1, 0x35, 0x07, 0xdb, 0x6e,
	0xd8, 0x47, 0x31, 0x8d, 0x9a, 0xa0, 0x19, 0x90, 0x01, 0xa9, 0x09, 0x77, 0x2f, 0x7c, 0x23, 0x2c,
	0x61, 0x88, 0x5f, 0x51, 0xfa, 0x7f, 0x6e, 0x38, 0x95, 0xd7, 0xe8, 0x21, 0x66, 0x45, 0x69, 0x3b,
	0xb7, 0xa4, 0xb9, 0x56, 0x0f, 0xb9, 0xb4, 0x46, 0x91, 0x8b, 0x6c, 0x46, 0x82, 0x31, 0xa2, 0xfc,
	0xc7, 0x3c, 0xc8, 0x18, 0xe3, 0x0f, 0x87, 0x9f, 0x01, 0xe9, 0x40, 0x91, 0xb6, 0xa4, 0x4a, 0xfe,
	0x71, 0xa1, 0x6a, 0xf9, 0x4e, 0xf5, 0xe0, 0xcc, 0x47, 0x2d, 0xc4, 0x2c, 0xed, 0xde, 0xdb, 0x61,
	0x69, 0xee, 0xdd, 0xb0, 0x24, 0x8d, 0x86, 0xa5, 0xcc, 0xb6, 0x83, 0x5d, 0x07, 0x23, 0x23, 0xfe,
	0x01, 0xf7, 0x80, 0xd4, 0x51, 0xe6, 0x05, 0x6e, 0x59, 0xe0, 0x3a, 0xbd, 0xef, 0x91, 0xcd, 0x04,
	0x72, 0x3d, 0x81, 0xbc, 0xc3, 0x2b, 0xdd, 0x26, 0x9e, 0xc3, 0x90, 0xe7, 0xb3, 0x33, 0x63, 0xc2,
	0x86, 0xdf, 0x80, 0x94, 0xe9, 0x23, 0x5b, 0x59, 0x10, 0x54, 0x2b, 0xd5, 0xf8, 0x7e, 0xa2, 0xfa,
	0x78, 0x4c, 0x5b, 0xe3, 0x7c, 0x9c, 0x8b, 0xfa, 0xc8, 0x4e, 0x72, 0x5d, 0xb7, 0xa1, 0x01, 0xd2,
	0x26, 0xb3, 0x58, 0x48, 0x95, 0x94, 0x60, 0x5b, 0x9b, 0x62, 0x13, 0x51, 0x4d, 0x89, 0xf8, 0x64,
	0x2a, 0xec, 0x04, 0xe3, 0x94, 0xe7, 0x69, 0xe1, 0xcf, 0x9f, 0x8b, 0xb9, 0x4b, 0x9d, 0x94, 0x7f,
	0x4b, 0x81, 0xa5, 0x88, 0xac, 0x7b, 0x6c, 0x51, 0x04, 0xff, 0x0b, 0x52, 0x6d, 0xcb, 0x43, 0xa2,
	0x85, 0x39, 0x6d, 0x79, 0x34, 0x2c, 0xe5, 0xb1, 0xe5, 0xa1, 0xb8, 0x5f, 0x49, 0x03, 0xbe, 0x02,
	0x8b, 0x02, 0x24, 0xfa, 0x96, 0xd3, 0x3e, 0xbf, 0x38, 0x2f, 0x6e, 0x98, 0x2c, 0xd0, 0x71, 0xe8,
	0x55, 0x92, 0xa4, 0x55, 0xf1, 0x97, 0x3e, 0x7a, 0x3b, 0x6e, 0xe1, 0xb2, 0xcf, 0xcd, 0x44, 0x95,
	0x93, 0x0e, 0x78, 0x08, 0x72, 0x26, 0xb3, 0x02, 0x76, 0xe0, 0x78, 0x28, 0xea, 0xe4, 0x9d, 0xf1,
	0x65, 0x3a, 0x1e, 0xa2, 0xcc, 0xf2, 0x7c, 0x6d, 0x23, 0x22, 0x5b, 0xa1, 0x3c, 0x51, 0x65, 0x8e,
	0x97, 0x64, 0x9c, 0xe9, 0x85, 0x1d, 0x90, 0xd1, 0x71, 0x5f, 0x90, 0xa6, 0x66, 0x92, 0xae, 0x47,
	0xa4, 0x10, 0xe1, 0xfe, 0x24, 0xe5, 0x0c, 0x1f, 0x7c, 0x0a, 0xd2, 0x06, 0xb2, 0x28, 0xc1, 0xca,
	0xa2, 0xe8, 0x80, 0x12, 0xe1, 0xe5, 0x40, 0x78, 0x93, 0x17, 0x31, 0xe9, 0x81, 0x5f, 0x83, 0x4c,
	0x0b, 0x51, 0x6a, 0x0d, 0x90, 0x92, 0x16, 0xe0, 0x62, 0x04, 0xbe, 0xeb, 0x8d, 0xdd, 0x09, 0xf4,
	0xb4, 0xab, 0x8c, 0x41, 0x7a, 0xdc, 0x55, 0x58, 0x00, 0xb9, 0xae, 0xa1, 0x1f, 0xd5, 0x9f, 0xeb,
	0xf5, 0x17, 0xf2, 0x1c, 0x5c, 0x03, 0xb0, 0xa1, 0x77, 0xf5, 0x76, 0x43, 0x6f, 0xd7, 0x9b, 0xba,
	0x19, 0xf9, 0x25, 0xb8, 0x02, 0xe4, 0x57, 0xbb, 0xcd, 0x83, 0x66, 0xfb, 0xd9, 0xd1, 0x5e, 0xc7,
	0x38, 0x3a, 0x38, 0x34, 0xda, 0xf2, 0x3c, 0x5c, 0x06, 0xf9, 0xae, 0xd1, 0x79, 0x66, 0xe8, 0xa6,
	0xd9, 0x6c, 0x3f, 0x93, 0x17, 0xe0, 0x12, 0xc8, 0xd6, 0x3b, 0xad, 0xee, 0xbe, 0x7e, 0xa0, 0xcb,
	0x29, 0x98, 0x05, 0xa9, 0xbd, 0xdd, 0xe6, 0xbe, 0xbc, 0x58, 0xfe, 0x3d, 0x0b, 0xf2, 0x09, 0x0d,
	0xc3, 0x27, 0x20, 0xf3, 0x12, 0x05, 0xd4, 0x21, 0x38, 0x92, 0x0a, 0xe4, 0x82, 0x3e, 0x19, 0xbb,
	0x62, 0xb5, 0x4c, 0xd8, 0x10, 0x03, 0x68, 0xda, 0xc7, 0xa8, 0x1f, 0xba, 0xa8, 0x7f, 0x75, 0xc1,
	0xf3, 0x33, 0xef, 0xa2, 0x3c, 0x1a, 0x96, 0x36, 0x69, 0x9c, 0xad, 0xce, 0xbc, 0xe6, 0x0f, 0xc4,
	0xe1, 0x4b, 0x90, 0x6d, 0x84, 0x81, 0x18, 0x5e, 0x42, 0x46, 0x39, 0x6d, 0xe7, 0xe2, 0xbc, 0xb8,
	0xa6, 0xf3, 0x60, 0x27, 0xa8, 0xc4, 0xb1, 0xca, 0xce, 0xf6, 0xce, 0xa3, 0x47, 0xfc, 0xde, 0xfb,
	0x91, 0x27, 0x79, 0xef, 0xd3, 0x3e, 0xd8, 0x02, 0x59, 0x93, 0x05, 0x16, 0x43, 0x83, 0x33, 0xa1,
	0xa4, 0x9c, 0xf6, 0xff, 0x8b, 0xf3, 0xe2, 0xc3, 0x09, 0xed, 0xf3, 0x3e, 0x55, 0xe3, 0x3c, 0x3e,
	0x86, 0xf8, 0x11, 0x59, 0x1a, 0x39, 0x8c, 0xcb, 0x5f, 0xf0, 0x09, 0xc8, 0xb7, 0xac, 0xd3, 0xae,
	0x15, 0x58, 0xae, 0x8b, 0x5c, 0xa1, 0xa5, 0x82, 0x26, 0x8f, 0x86, 0xa5, 0x25, 0xcf, 0x3a, 0x55,
	0xfd, 0xc8, 0x6f, 0x5c, 0xb3, 0xa0, 0x0d, 0x8a, 0x2d, 0xeb, 0xb4, 0xdd, 0xac, 0xef, 0x59, 0x8e,
	0x1b, 0x06, 0x88, 0x6a, 0xe8, 0x0d, 0x09, 0xd0, 0x6e, 0x8f, 0x04, 0x4c, 0x28, 0xaa, 0xa0, 0x3d,
	0x1c, 0x0d, 0x4b, 0xff, 0xe2, 0x20, 0xec, 0xd8, 0xea, 0x9b, 0x28, 0x4d, 0xed, 0x89, 0x3c, 0xd5,
	0xe2, 0x89, 0xc6, 0xed, 0x61, 0x78, 0x0c, 0xe4, 0x4e, 0xd0, 0x47, 0x41, 0x9d, 0x60, 0x5e, 0xad,
	0x83, 0x19, 0x55, 0x32, 0x5b, 0x0b, 0x95, 0xfc, 0x63, 0xb9, 0x3a, 0x9e, 0xc5, 0x55, 0x33, 0x9a,
	0xc5, 0x5a, 0x69, 0x34, 0x2c, 0x3d, 0x20, 0x3c, 0x5b, 0xb5, 0xaf, 0xd2, 0x13, 0x9d, 0xbc, 0x2d,
	0x08, 0xbf, 0x00, 0x19, 0x33, 0xa4, 0x3e, 0xc2, 0x7d, 0x25, 0xbb, 0x25, 0x55, 0xb2, 0xda, 0x2a,
	0xff, 0x57, 0xa0, 0x63, 0x57, 0xf2, 0x5f, 0x61, 0xca, 0x05, 0x5b, 0xa0, 0x60, 0x7a, 0x56, 0xc0,
	0xda, 0xcd, 0x3a, 0xed, 0x60, 0xf7, 0x4c, 0xc9, 0x09, 0x82, 0x8d, 0xd1, 0xb0, 0xa4, 0x50, 0x1e,
	0xc0, 0x8e, 0x4d, 0x55, 0x82, 0xdd, 0xb3, 0x04, 0xcf, 0x8d, 0x11, 0xf8, 0x23, 0x78, 0x10, 0xd3,
	0xb5, 0x42, 0xca, 0x5a, 0x16, 0xb3, 0x8f, 0xaf, 0xbe, 0x5f, 0x01, 0x82, 0x7c, 0x7b, 0x34, 0x2c,
	0x55, 0x62, 0x0a, 0xd5, 0x0b, 0x29, 0x53, 0x3d, 0x9e, 0x98, 0xf8, 0xba, 0xc4, 0x61, 0x1f, 0x9d,
	0x09, 0x8f, 0x40, 0xfe, 0xd0, 0x1f, 0x04, 0x56, 0x1f, 0x71, 0xc1, 0x28, 0x79, 0x21, 0xae, 0xaf,
	0x2e, 0xce, 0x8b, 0x95, 0x99, 0xe2, 0x8a, 0xea, 0x4c, 0x40, 0xb8, 0xc6, 0x96, 0xc2, 0xb1, 0xad,
	0xb2, 0x33, 0x1f, 0x19, 0xd7, 0xac, 0xf2, 0xff, 0xc0, 0x52, 0x52, 0x92, 0x10, 0x80, 0xf4, 0x7e,
	0xb3, 0xad, 0xef, 0x1a, 0xf2, 0x1c, 0x1f, 0x06, 0xfa, 0xeb, 0x6e, 0xa7, 0xad, 0xb7, 0x0f, 0x9a,
	0xbb, 0xfb, 0xb2, 0x54, 0xfe, 0x12, 0xdc, 0x9b, 0x71, 0x04, 0xbc, 0x03, 0x40, 0xc3, 0xa1, 0x41,
	0xe8, 0x33, 0xe7, 0x04, 0xc9, 0x73, 0x7c, 0xb4, 0x74, 0x70, 0x1b, 0x9d, 0xb2, 0xe7, 0x84, 0x32,
	0x03, 0xf5, 0x08, 0x61, 0xb2, 0x54, 0xfe, 0x3b, 0x03, 0x0a, 0xd7, 0xf6, 0x14, 0xfc, 0x49, 0x02,
	0xab, 0x75, 0x82, 0x19, 0x5f, 0x3e, 0x28, 0x68, 0x93, 0x3e, 0xa2, 0xd1, 0x7e, 0x93, 0x84, 0xa6,
	0x56, 0x27, 0xf7, 0x9b, 0x98, 0x70, 0x5a, 0xbc, 0x37, 0x1e, 0xda, 0x97, 0x58, 0x15, 0x73, 0xb0,
	0x3a, 0xb5, 0xef, 0x3e, 0x9c, 0x02, 0x7f, 0x91, 0x80, 0x72, 0x55, 0x84, 0x89, 0x82, 0x13, 0xc7,
	0xbe, 0xac, 0x63, 0xfe, 0xb6, 0x3a, 0xb6, 0xa3, 0x3a, 0xfe, 0x9d, 0x38, 0x84, 0x46, 0xf8, 0xe9,
	0x52, 0x3e, 0x2a, 0x0b, 0x62, 0xb0, 0x7c, 0xa9, 0xdd, 0xa8, 0x86, 0x85, 0xdb, 0x6a, 0x28, 0x47,
	0x35, 0xac, 0x5f, 0xc9, 0x77, 0xea, 0xe4, 0x5b, 0x62, 0xd0, 0x07, 0x72, 0xc7, 0x47, 0xe3, 0x81,
	0x66, 0xb9, 0xfc, 0x44, 0x14, 0x4d, 0x30, 0xfd, 0xe2, 0xbc, 0x58, 0x9d, 0x14, 0x99, 0x80, 0xc7,
	0x15, 0x4c, 0x02, 0xb9, 0xd4, 0x96, 0xf9, 0x09, 0xd7, 0x76, 0xf9, 0x84, 0x03, 0x7e, 0x07, 0x56,
	0xea, 0xc4, 0xf3, 0x5d, 0xc4, 0x91, 0x5d, 0x14, 0xd8, 0x08, 0x33, 0xbe, 0xf4, 0xc6, 0x53, 0x6e,
	0x6b, 0x34, 0x2c, 0x6d, 0xd8, 0x97, 0x71, 0xd5, 0x1f, 0x27, 0x24, 0x08, 0x6f, 0x8d, 0xc2, 0x6f,
	0x93, 0x2f, 0x85, 0xf4, 0xcc, 0x45, 0xa2, 0x7c, 0xe2, 0x2b, 0xe1, 0xc5, 0xd5, 0x2b, 0x21, 0x33,
	0x93, 0x70, 0xed, 0x13, 0x5e, 0x08, 0x2f, 0xc0, 0x72, 0x37, 0x40, 0x27, 0x0e, 0x09, 0x69, 0xbc,
	0x2e, 0xb3, 0xa2, 0xdd, 0xeb, 0xa3, 0x61, 0x69, 0xcd, 0x0f, 0xd0, 0x89, 0x1a, 0xef, 0xc8, 0x2b,
	0xa2, 0x1b, 0xfc, 0xe5, 0x5f, 0x25, 0x70, 0xff, 0x86, 0xbb, 0x98, 0x5c, 0xe4, 0x73, 0x30, 0x0f,
	0x32, 0x7c, 0x75, 0x1f, 0x1a, 0xba, 0x2c, 0x71, 0xc3, 0x3c, 0xac, 0xd7, 0x75, 0xd3, 0x94, 0xe7,
	0xf9, 0x83, 0xc1, 0xac, 0x3f, 0xd7, 0x1b, 0x87, 0xfb, 0x7a, 0x43, 0x5e, 0x10, 0xe6, 0xa1, 0x29,
	0x5e, 0x0c, 0x0d, 0x39, 0x05, 0xef, 0x83, 0x7b, 0x91, 0x79, 0xd4, 0x6c, 0x1f, 0xc5, 0x9c, 0xf2,
	0x22, 0x5c, 0x05, 0x77, 0x1b, 0xfa, 0x6e, 0x83, 0x4f, 0x8b, 0x23, 0xfd, 0x75, 0x5d, 0xd7, 0x79,
	0x7e, 0x5a, 0x5b, 0x7a, 0xfb, 0x7e, 0x53, 0x7a, 0xf7, 0x7e, 0x53, 0xfa, 0xeb, 0xfd, 0xa6, 0xd4,
	0x95, 0x7a, 0x69, 0xf1, 0x26, 0x7f, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xde, 0xec,
	0xe2, 0x9a, 0x0c, 0x00, 0x00,
}
