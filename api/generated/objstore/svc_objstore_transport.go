// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: svc_objstore.proto
*/
package objstore

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerObjstoreV1 struct {
	Endpoints EndpointsObjstoreV1Server

	AutoAddBucketHdlr    grpctransport.Handler
	AutoAddObjectHdlr    grpctransport.Handler
	AutoDeleteBucketHdlr grpctransport.Handler
	AutoDeleteObjectHdlr grpctransport.Handler
	AutoGetBucketHdlr    grpctransport.Handler
	AutoGetObjectHdlr    grpctransport.Handler
	AutoListBucketHdlr   grpctransport.Handler
	AutoListObjectHdlr   grpctransport.Handler
	AutoUpdateBucketHdlr grpctransport.Handler
	AutoUpdateObjectHdlr grpctransport.Handler
}

// MakeGRPCServerObjstoreV1 creates a GRPC server for ObjstoreV1 service
func MakeGRPCServerObjstoreV1(ctx context.Context, endpoints EndpointsObjstoreV1Server, logger log.Logger) ObjstoreV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerObjstoreV1{
		Endpoints: endpoints,
		AutoAddBucketHdlr: grpctransport.NewServer(
			endpoints.AutoAddBucketEndpoint,
			DecodeGrpcReqBucket,
			EncodeGrpcRespBucket,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddBucket", logger)))...,
		),

		AutoAddObjectHdlr: grpctransport.NewServer(
			endpoints.AutoAddObjectEndpoint,
			DecodeGrpcReqObject,
			EncodeGrpcRespObject,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddObject", logger)))...,
		),

		AutoDeleteBucketHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteBucketEndpoint,
			DecodeGrpcReqBucket,
			EncodeGrpcRespBucket,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteBucket", logger)))...,
		),

		AutoDeleteObjectHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteObjectEndpoint,
			DecodeGrpcReqObject,
			EncodeGrpcRespObject,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteObject", logger)))...,
		),

		AutoGetBucketHdlr: grpctransport.NewServer(
			endpoints.AutoGetBucketEndpoint,
			DecodeGrpcReqBucket,
			EncodeGrpcRespBucket,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetBucket", logger)))...,
		),

		AutoGetObjectHdlr: grpctransport.NewServer(
			endpoints.AutoGetObjectEndpoint,
			DecodeGrpcReqObject,
			EncodeGrpcRespObject,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetObject", logger)))...,
		),

		AutoListBucketHdlr: grpctransport.NewServer(
			endpoints.AutoListBucketEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespBucketList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListBucket", logger)))...,
		),

		AutoListObjectHdlr: grpctransport.NewServer(
			endpoints.AutoListObjectEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespObjectList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListObject", logger)))...,
		),

		AutoUpdateBucketHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateBucketEndpoint,
			DecodeGrpcReqBucket,
			EncodeGrpcRespBucket,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateBucket", logger)))...,
		),

		AutoUpdateObjectHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateObjectEndpoint,
			DecodeGrpcReqObject,
			EncodeGrpcRespObject,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateObject", logger)))...,
		),
	}
}

func (s *grpcServerObjstoreV1) AutoAddBucket(ctx oldcontext.Context, req *Bucket) (*Bucket, error) {
	_, resp, err := s.AutoAddBucketHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoAddBucket).V
	return &r, resp.(respObjstoreV1AutoAddBucket).Err
}

func decodeHTTPrespObjstoreV1AutoAddBucket(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Bucket
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoAddObject(ctx oldcontext.Context, req *Object) (*Object, error) {
	_, resp, err := s.AutoAddObjectHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoAddObject).V
	return &r, resp.(respObjstoreV1AutoAddObject).Err
}

func decodeHTTPrespObjstoreV1AutoAddObject(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Object
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoDeleteBucket(ctx oldcontext.Context, req *Bucket) (*Bucket, error) {
	_, resp, err := s.AutoDeleteBucketHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoDeleteBucket).V
	return &r, resp.(respObjstoreV1AutoDeleteBucket).Err
}

func decodeHTTPrespObjstoreV1AutoDeleteBucket(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Bucket
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoDeleteObject(ctx oldcontext.Context, req *Object) (*Object, error) {
	_, resp, err := s.AutoDeleteObjectHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoDeleteObject).V
	return &r, resp.(respObjstoreV1AutoDeleteObject).Err
}

func decodeHTTPrespObjstoreV1AutoDeleteObject(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Object
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoGetBucket(ctx oldcontext.Context, req *Bucket) (*Bucket, error) {
	_, resp, err := s.AutoGetBucketHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoGetBucket).V
	return &r, resp.(respObjstoreV1AutoGetBucket).Err
}

func decodeHTTPrespObjstoreV1AutoGetBucket(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Bucket
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoGetObject(ctx oldcontext.Context, req *Object) (*Object, error) {
	_, resp, err := s.AutoGetObjectHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoGetObject).V
	return &r, resp.(respObjstoreV1AutoGetObject).Err
}

func decodeHTTPrespObjstoreV1AutoGetObject(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Object
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoListBucket(ctx oldcontext.Context, req *api.ListWatchOptions) (*BucketList, error) {
	_, resp, err := s.AutoListBucketHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoListBucket).V
	return &r, resp.(respObjstoreV1AutoListBucket).Err
}

func decodeHTTPrespObjstoreV1AutoListBucket(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp BucketList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoListObject(ctx oldcontext.Context, req *api.ListWatchOptions) (*ObjectList, error) {
	_, resp, err := s.AutoListObjectHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoListObject).V
	return &r, resp.(respObjstoreV1AutoListObject).Err
}

func decodeHTTPrespObjstoreV1AutoListObject(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ObjectList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoUpdateBucket(ctx oldcontext.Context, req *Bucket) (*Bucket, error) {
	_, resp, err := s.AutoUpdateBucketHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoUpdateBucket).V
	return &r, resp.(respObjstoreV1AutoUpdateBucket).Err
}

func decodeHTTPrespObjstoreV1AutoUpdateBucket(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Bucket
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoUpdateObject(ctx oldcontext.Context, req *Object) (*Object, error) {
	_, resp, err := s.AutoUpdateObjectHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respObjstoreV1AutoUpdateObject).V
	return &r, resp.(respObjstoreV1AutoUpdateObject).Err
}

func decodeHTTPrespObjstoreV1AutoUpdateObject(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Object
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerObjstoreV1) AutoWatchSvcObjstoreV1(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchSvcObjstoreV1Server) error {
	return s.Endpoints.AutoWatchSvcObjstoreV1(in, stream)
}

func (s *grpcServerObjstoreV1) AutoWatchBucket(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchBucketServer) error {
	return s.Endpoints.AutoWatchBucket(in, stream)
}

func (s *grpcServerObjstoreV1) AutoWatchObject(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchObjectServer) error {
	return s.Endpoints.AutoWatchObject(in, stream)
}

func (s *grpcServerObjstoreV1) DownloadFile(in *Object, stream ObjstoreV1_DownloadFileServer) error {
	return s.Endpoints.DownloadFile(in, stream)
}

func encodeHTTPBucketList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBucketList(_ context.Context, r *http.Request) (interface{}, error) {
	var req BucketList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBucketList encodes GRPC request
func EncodeGrpcReqBucketList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketList)
	return req, nil
}

// DecodeGrpcReqBucketList decodes GRPC request
func DecodeGrpcReqBucketList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketList)
	return req, nil
}

// EncodeGrpcRespBucketList endodes the GRPC response
func EncodeGrpcRespBucketList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBucketList decodes the GRPC response
func DecodeGrpcRespBucketList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPObjectList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPObjectList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ObjectList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqObjectList encodes GRPC request
func EncodeGrpcReqObjectList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectList)
	return req, nil
}

// DecodeGrpcReqObjectList decodes GRPC request
func DecodeGrpcReqObjectList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectList)
	return req, nil
}

// EncodeGrpcRespObjectList endodes the GRPC response
func EncodeGrpcRespObjectList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespObjectList decodes the GRPC response
func DecodeGrpcRespObjectList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
