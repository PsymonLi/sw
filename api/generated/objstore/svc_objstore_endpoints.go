// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: svc_objstore.proto
*/
package objstore

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareObjstoreV1Client add middleware to the client
type MiddlewareObjstoreV1Client func(ServiceObjstoreV1Client) ServiceObjstoreV1Client

// EndpointsObjstoreV1Client is the endpoints for the client
type EndpointsObjstoreV1Client struct {
	Client                         ObjstoreV1Client
	AutoWatchSvcObjstoreV1Endpoint endpoint.Endpoint

	AutoAddBucketEndpoint    endpoint.Endpoint
	AutoAddObjectEndpoint    endpoint.Endpoint
	AutoDeleteBucketEndpoint endpoint.Endpoint
	AutoDeleteObjectEndpoint endpoint.Endpoint
	AutoGetBucketEndpoint    endpoint.Endpoint
	AutoGetObjectEndpoint    endpoint.Endpoint
	AutoListBucketEndpoint   endpoint.Endpoint
	AutoListObjectEndpoint   endpoint.Endpoint
	AutoUpdateBucketEndpoint endpoint.Endpoint
	AutoUpdateObjectEndpoint endpoint.Endpoint
}

// EndpointsObjstoreV1RestClient is the REST client
type EndpointsObjstoreV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddBucketEndpoint          endpoint.Endpoint
	AutoAddObjectEndpoint          endpoint.Endpoint
	AutoDeleteBucketEndpoint       endpoint.Endpoint
	AutoDeleteObjectEndpoint       endpoint.Endpoint
	AutoGetBucketEndpoint          endpoint.Endpoint
	AutoGetObjectEndpoint          endpoint.Endpoint
	AutoListBucketEndpoint         endpoint.Endpoint
	AutoListObjectEndpoint         endpoint.Endpoint
	AutoUpdateBucketEndpoint       endpoint.Endpoint
	AutoUpdateObjectEndpoint       endpoint.Endpoint
	AutoWatchBucketEndpoint        endpoint.Endpoint
	AutoWatchObjectEndpoint        endpoint.Endpoint
	AutoWatchSvcObjstoreV1Endpoint endpoint.Endpoint
	DownloadFileEndpoint           endpoint.Endpoint
	DownloadFileByPrefixEndpoint   endpoint.Endpoint
}

// MiddlewareObjstoreV1Server adds middle ware to the server
type MiddlewareObjstoreV1Server func(ServiceObjstoreV1Server) ServiceObjstoreV1Server

// EndpointsObjstoreV1Server is the server endpoints
type EndpointsObjstoreV1Server struct {
	svcWatchHandlerObjstoreV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddBucketEndpoint    endpoint.Endpoint
	AutoAddObjectEndpoint    endpoint.Endpoint
	AutoDeleteBucketEndpoint endpoint.Endpoint
	AutoDeleteObjectEndpoint endpoint.Endpoint
	AutoGetBucketEndpoint    endpoint.Endpoint
	AutoGetObjectEndpoint    endpoint.Endpoint
	AutoListBucketEndpoint   endpoint.Endpoint
	AutoListObjectEndpoint   endpoint.Endpoint
	AutoUpdateBucketEndpoint endpoint.Endpoint
	AutoUpdateObjectEndpoint endpoint.Endpoint

	watchHandlerBucket func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerObject func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddBucket is endpoint for AutoAddBucket
func (e EndpointsObjstoreV1Client) AutoAddBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	resp, err := e.AutoAddBucketEndpoint(ctx, in)
	if err != nil {
		return &Bucket{}, err
	}
	return resp.(*Bucket), nil
}

type respObjstoreV1AutoAddBucket struct {
	V   Bucket
	Err error
}

// AutoAddObject is endpoint for AutoAddObject
func (e EndpointsObjstoreV1Client) AutoAddObject(ctx context.Context, in *Object) (*Object, error) {
	resp, err := e.AutoAddObjectEndpoint(ctx, in)
	if err != nil {
		return &Object{}, err
	}
	return resp.(*Object), nil
}

type respObjstoreV1AutoAddObject struct {
	V   Object
	Err error
}

// AutoDeleteBucket is endpoint for AutoDeleteBucket
func (e EndpointsObjstoreV1Client) AutoDeleteBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	resp, err := e.AutoDeleteBucketEndpoint(ctx, in)
	if err != nil {
		return &Bucket{}, err
	}
	return resp.(*Bucket), nil
}

type respObjstoreV1AutoDeleteBucket struct {
	V   Bucket
	Err error
}

// AutoDeleteObject is endpoint for AutoDeleteObject
func (e EndpointsObjstoreV1Client) AutoDeleteObject(ctx context.Context, in *Object) (*Object, error) {
	resp, err := e.AutoDeleteObjectEndpoint(ctx, in)
	if err != nil {
		return &Object{}, err
	}
	return resp.(*Object), nil
}

type respObjstoreV1AutoDeleteObject struct {
	V   Object
	Err error
}

// AutoGetBucket is endpoint for AutoGetBucket
func (e EndpointsObjstoreV1Client) AutoGetBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	resp, err := e.AutoGetBucketEndpoint(ctx, in)
	if err != nil {
		return &Bucket{}, err
	}
	return resp.(*Bucket), nil
}

type respObjstoreV1AutoGetBucket struct {
	V   Bucket
	Err error
}

// AutoGetObject is endpoint for AutoGetObject
func (e EndpointsObjstoreV1Client) AutoGetObject(ctx context.Context, in *Object) (*Object, error) {
	resp, err := e.AutoGetObjectEndpoint(ctx, in)
	if err != nil {
		return &Object{}, err
	}
	return resp.(*Object), nil
}

type respObjstoreV1AutoGetObject struct {
	V   Object
	Err error
}

// AutoListBucket is endpoint for AutoListBucket
func (e EndpointsObjstoreV1Client) AutoListBucket(ctx context.Context, in *api.ListWatchOptions) (*BucketList, error) {
	resp, err := e.AutoListBucketEndpoint(ctx, in)
	if err != nil {
		return &BucketList{}, err
	}
	return resp.(*BucketList), nil
}

type respObjstoreV1AutoListBucket struct {
	V   BucketList
	Err error
}

// AutoListObject is endpoint for AutoListObject
func (e EndpointsObjstoreV1Client) AutoListObject(ctx context.Context, in *api.ListWatchOptions) (*ObjectList, error) {
	resp, err := e.AutoListObjectEndpoint(ctx, in)
	if err != nil {
		return &ObjectList{}, err
	}
	return resp.(*ObjectList), nil
}

type respObjstoreV1AutoListObject struct {
	V   ObjectList
	Err error
}

// AutoUpdateBucket is endpoint for AutoUpdateBucket
func (e EndpointsObjstoreV1Client) AutoUpdateBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	resp, err := e.AutoUpdateBucketEndpoint(ctx, in)
	if err != nil {
		return &Bucket{}, err
	}
	return resp.(*Bucket), nil
}

type respObjstoreV1AutoUpdateBucket struct {
	V   Bucket
	Err error
}

// AutoUpdateObject is endpoint for AutoUpdateObject
func (e EndpointsObjstoreV1Client) AutoUpdateObject(ctx context.Context, in *Object) (*Object, error) {
	resp, err := e.AutoUpdateObjectEndpoint(ctx, in)
	if err != nil {
		return &Object{}, err
	}
	return resp.(*Object), nil
}

type respObjstoreV1AutoUpdateObject struct {
	V   Object
	Err error
}

func (e EndpointsObjstoreV1Client) AutoWatchSvcObjstoreV1(ctx context.Context, in *api.ListWatchOptions) (ObjstoreV1_AutoWatchSvcObjstoreV1Client, error) {
	return e.Client.AutoWatchSvcObjstoreV1(ctx, in)
}

// AutoWatchBucket performs Watch for Bucket
func (e EndpointsObjstoreV1Client) AutoWatchBucket(ctx context.Context, in *api.ListWatchOptions) (ObjstoreV1_AutoWatchBucketClient, error) {
	return e.Client.AutoWatchBucket(ctx, in)
}

// AutoWatchObject performs Watch for Object
func (e EndpointsObjstoreV1Client) AutoWatchObject(ctx context.Context, in *api.ListWatchOptions) (ObjstoreV1_AutoWatchObjectClient, error) {
	return e.Client.AutoWatchObject(ctx, in)
}

func (e EndpointsObjstoreV1Client) DownloadFile(ctx context.Context, in *Object) (ObjstoreV1_DownloadFileClient, error) {
	return e.Client.DownloadFile(ctx, in)
}
func (e EndpointsObjstoreV1Client) DownloadFileByPrefix(ctx context.Context, in *Object) (ObjstoreV1_DownloadFileByPrefixClient, error) {
	return e.Client.DownloadFileByPrefix(ctx, in)
}

// AutoAddBucket implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoAddBucket(ctx context.Context, in Bucket) (Bucket, error) {
	resp, err := e.AutoAddBucketEndpoint(ctx, in)
	if err != nil {
		return Bucket{}, err
	}
	return *resp.(*Bucket), nil
}

// MakeObjstoreV1AutoAddBucketEndpoint creates  AutoAddBucket endpoints for the service
func MakeObjstoreV1AutoAddBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Bucket)
		v, err := s.AutoAddBucket(ctx, *req)
		return respObjstoreV1AutoAddBucket{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoAddBucket")(f)
}

// AutoAddObject implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoAddObject(ctx context.Context, in Object) (Object, error) {
	resp, err := e.AutoAddObjectEndpoint(ctx, in)
	if err != nil {
		return Object{}, err
	}
	return *resp.(*Object), nil
}

// MakeObjstoreV1AutoAddObjectEndpoint creates  AutoAddObject endpoints for the service
func MakeObjstoreV1AutoAddObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Object)
		v, err := s.AutoAddObject(ctx, *req)
		return respObjstoreV1AutoAddObject{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoAddObject")(f)
}

// AutoDeleteBucket implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoDeleteBucket(ctx context.Context, in Bucket) (Bucket, error) {
	resp, err := e.AutoDeleteBucketEndpoint(ctx, in)
	if err != nil {
		return Bucket{}, err
	}
	return *resp.(*Bucket), nil
}

// MakeObjstoreV1AutoDeleteBucketEndpoint creates  AutoDeleteBucket endpoints for the service
func MakeObjstoreV1AutoDeleteBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Bucket)
		v, err := s.AutoDeleteBucket(ctx, *req)
		return respObjstoreV1AutoDeleteBucket{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoDeleteBucket")(f)
}

// AutoDeleteObject implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoDeleteObject(ctx context.Context, in Object) (Object, error) {
	resp, err := e.AutoDeleteObjectEndpoint(ctx, in)
	if err != nil {
		return Object{}, err
	}
	return *resp.(*Object), nil
}

// MakeObjstoreV1AutoDeleteObjectEndpoint creates  AutoDeleteObject endpoints for the service
func MakeObjstoreV1AutoDeleteObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Object)
		v, err := s.AutoDeleteObject(ctx, *req)
		return respObjstoreV1AutoDeleteObject{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoDeleteObject")(f)
}

// AutoGetBucket implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoGetBucket(ctx context.Context, in Bucket) (Bucket, error) {
	resp, err := e.AutoGetBucketEndpoint(ctx, in)
	if err != nil {
		return Bucket{}, err
	}
	return *resp.(*Bucket), nil
}

// MakeObjstoreV1AutoGetBucketEndpoint creates  AutoGetBucket endpoints for the service
func MakeObjstoreV1AutoGetBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Bucket)
		v, err := s.AutoGetBucket(ctx, *req)
		return respObjstoreV1AutoGetBucket{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoGetBucket")(f)
}

// AutoGetObject implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoGetObject(ctx context.Context, in Object) (Object, error) {
	resp, err := e.AutoGetObjectEndpoint(ctx, in)
	if err != nil {
		return Object{}, err
	}
	return *resp.(*Object), nil
}

// MakeObjstoreV1AutoGetObjectEndpoint creates  AutoGetObject endpoints for the service
func MakeObjstoreV1AutoGetObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Object)
		v, err := s.AutoGetObject(ctx, *req)
		return respObjstoreV1AutoGetObject{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoGetObject")(f)
}

// AutoListBucket implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoListBucket(ctx context.Context, in api.ListWatchOptions) (BucketList, error) {
	resp, err := e.AutoListBucketEndpoint(ctx, in)
	if err != nil {
		return BucketList{}, err
	}
	return *resp.(*BucketList), nil
}

// MakeObjstoreV1AutoListBucketEndpoint creates  AutoListBucket endpoints for the service
func MakeObjstoreV1AutoListBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListBucket(ctx, *req)
		return respObjstoreV1AutoListBucket{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoListBucket")(f)
}

// AutoListObject implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoListObject(ctx context.Context, in api.ListWatchOptions) (ObjectList, error) {
	resp, err := e.AutoListObjectEndpoint(ctx, in)
	if err != nil {
		return ObjectList{}, err
	}
	return *resp.(*ObjectList), nil
}

// MakeObjstoreV1AutoListObjectEndpoint creates  AutoListObject endpoints for the service
func MakeObjstoreV1AutoListObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListObject(ctx, *req)
		return respObjstoreV1AutoListObject{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoListObject")(f)
}

// AutoUpdateBucket implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoUpdateBucket(ctx context.Context, in Bucket) (Bucket, error) {
	resp, err := e.AutoUpdateBucketEndpoint(ctx, in)
	if err != nil {
		return Bucket{}, err
	}
	return *resp.(*Bucket), nil
}

// MakeObjstoreV1AutoUpdateBucketEndpoint creates  AutoUpdateBucket endpoints for the service
func MakeObjstoreV1AutoUpdateBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Bucket)
		v, err := s.AutoUpdateBucket(ctx, *req)
		return respObjstoreV1AutoUpdateBucket{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoUpdateBucket")(f)
}

// AutoUpdateObject implementation on server Endpoint
func (e EndpointsObjstoreV1Server) AutoUpdateObject(ctx context.Context, in Object) (Object, error) {
	resp, err := e.AutoUpdateObjectEndpoint(ctx, in)
	if err != nil {
		return Object{}, err
	}
	return *resp.(*Object), nil
}

// MakeObjstoreV1AutoUpdateObjectEndpoint creates  AutoUpdateObject endpoints for the service
func MakeObjstoreV1AutoUpdateObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Object)
		v, err := s.AutoUpdateObject(ctx, *req)
		return respObjstoreV1AutoUpdateObject{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("ObjstoreV1:AutoUpdateObject")(f)
}

func (e EndpointsObjstoreV1Server) AutoWatchSvcObjstoreV1(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchSvcObjstoreV1Server) error {
	return e.svcWatchHandlerObjstoreV1(in, stream)
}

// MakeAutoWatchSvcObjstoreV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcObjstoreV1Endpoint(s ServiceObjstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ObjstoreV1_AutoWatchSvcObjstoreV1Server)
		return s.AutoWatchSvcObjstoreV1(options, wstream)
	}
}

// AutoWatchBucket is the watch handler for Bucket on the server side.
func (e EndpointsObjstoreV1Server) AutoWatchBucket(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchBucketServer) error {
	return e.watchHandlerBucket(in, stream)
}

// MakeAutoWatchBucketEndpoint creates the Watch endpoint
func MakeAutoWatchBucketEndpoint(s ServiceObjstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ObjstoreV1_AutoWatchBucketServer)
		return s.AutoWatchBucket(options, wstream)
	}
}

// AutoWatchObject is the watch handler for Object on the server side.
func (e EndpointsObjstoreV1Server) AutoWatchObject(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchObjectServer) error {
	return e.watchHandlerObject(in, stream)
}

// MakeAutoWatchObjectEndpoint creates the Watch endpoint
func MakeAutoWatchObjectEndpoint(s ServiceObjstoreV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ObjstoreV1_AutoWatchObjectServer)
		return s.AutoWatchObject(options, wstream)
	}
}

func (e EndpointsObjstoreV1Server) DownloadFile(in *Object, stream ObjstoreV1_DownloadFileServer) error {
	return errors.New("not implemented")
}
func (e EndpointsObjstoreV1Server) DownloadFileByPrefix(in *Object, stream ObjstoreV1_DownloadFileByPrefixServer) error {
	return errors.New("not implemented")
}

// MakeObjstoreV1ServerEndpoints creates server endpoints
func MakeObjstoreV1ServerEndpoints(s ServiceObjstoreV1Server, logger log.Logger) EndpointsObjstoreV1Server {
	return EndpointsObjstoreV1Server{
		svcWatchHandlerObjstoreV1: MakeAutoWatchSvcObjstoreV1Endpoint(s, logger),

		AutoAddBucketEndpoint:    MakeObjstoreV1AutoAddBucketEndpoint(s, logger),
		AutoAddObjectEndpoint:    MakeObjstoreV1AutoAddObjectEndpoint(s, logger),
		AutoDeleteBucketEndpoint: MakeObjstoreV1AutoDeleteBucketEndpoint(s, logger),
		AutoDeleteObjectEndpoint: MakeObjstoreV1AutoDeleteObjectEndpoint(s, logger),
		AutoGetBucketEndpoint:    MakeObjstoreV1AutoGetBucketEndpoint(s, logger),
		AutoGetObjectEndpoint:    MakeObjstoreV1AutoGetObjectEndpoint(s, logger),
		AutoListBucketEndpoint:   MakeObjstoreV1AutoListBucketEndpoint(s, logger),
		AutoListObjectEndpoint:   MakeObjstoreV1AutoListObjectEndpoint(s, logger),
		AutoUpdateBucketEndpoint: MakeObjstoreV1AutoUpdateBucketEndpoint(s, logger),
		AutoUpdateObjectEndpoint: MakeObjstoreV1AutoUpdateObjectEndpoint(s, logger),

		watchHandlerBucket: MakeAutoWatchBucketEndpoint(s, logger),
		watchHandlerObject: MakeAutoWatchObjectEndpoint(s, logger),
	}
}

// LoggingObjstoreV1MiddlewareClient adds middleware for the client
func LoggingObjstoreV1MiddlewareClient(logger log.Logger) MiddlewareObjstoreV1Client {
	return func(next ServiceObjstoreV1Client) ServiceObjstoreV1Client {
		return loggingObjstoreV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingObjstoreV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceObjstoreV1Client
}

// LoggingObjstoreV1MiddlewareServer adds middleware for the client
func LoggingObjstoreV1MiddlewareServer(logger log.Logger) MiddlewareObjstoreV1Server {
	return func(next ServiceObjstoreV1Server) ServiceObjstoreV1Server {
		return loggingObjstoreV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingObjstoreV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceObjstoreV1Server
}

func (m loggingObjstoreV1MiddlewareClient) AutoAddBucket(ctx context.Context, in *Bucket) (resp *Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoAddBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoAddObject(ctx context.Context, in *Object) (resp *Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoAddObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoDeleteBucket(ctx context.Context, in *Bucket) (resp *Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoDeleteBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoDeleteObject(ctx context.Context, in *Object) (resp *Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoDeleteObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoGetBucket(ctx context.Context, in *Bucket) (resp *Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoGetBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoGetObject(ctx context.Context, in *Object) (resp *Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoGetObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoListBucket(ctx context.Context, in *api.ListWatchOptions) (resp *BucketList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoListBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoListObject(ctx context.Context, in *api.ListWatchOptions) (resp *ObjectList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoListObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoUpdateBucket(ctx context.Context, in *Bucket) (resp *Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoUpdateBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoUpdateObject(ctx context.Context, in *Object) (resp *Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoUpdateObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateObject(ctx, in)
	return
}

func (m loggingObjstoreV1MiddlewareClient) AutoWatchSvcObjstoreV1(ctx context.Context, in *api.ListWatchOptions) (resp ObjstoreV1_AutoWatchSvcObjstoreV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoWatchSvcObjstoreV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcObjstoreV1(ctx, in)
	return
}

func (m loggingObjstoreV1MiddlewareClient) AutoWatchBucket(ctx context.Context, in *api.ListWatchOptions) (resp ObjstoreV1_AutoWatchBucketClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoWatchBucket", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) AutoWatchObject(ctx context.Context, in *api.ListWatchOptions) (resp ObjstoreV1_AutoWatchObjectClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoWatchObject", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchObject(ctx, in)
	return
}

func (m loggingObjstoreV1MiddlewareClient) DownloadFile(ctx context.Context, in *Object) (resp ObjstoreV1_DownloadFileClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "DownloadFile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.DownloadFile(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareClient) DownloadFileByPrefix(ctx context.Context, in *Object) (resp ObjstoreV1_DownloadFileByPrefixClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "DownloadFileByPrefix", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.DownloadFileByPrefix(ctx, in)
	return
}

func (m loggingObjstoreV1MiddlewareServer) AutoAddBucket(ctx context.Context, in Bucket) (resp Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoAddBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoAddObject(ctx context.Context, in Object) (resp Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoAddObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoDeleteBucket(ctx context.Context, in Bucket) (resp Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoDeleteBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoDeleteObject(ctx context.Context, in Object) (resp Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoDeleteObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoGetBucket(ctx context.Context, in Bucket) (resp Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoGetBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoGetObject(ctx context.Context, in Object) (resp Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoGetObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoListBucket(ctx context.Context, in api.ListWatchOptions) (resp BucketList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoListBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoListObject(ctx context.Context, in api.ListWatchOptions) (resp ObjectList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoListObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListObject(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoUpdateBucket(ctx context.Context, in Bucket) (resp Bucket, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoUpdateBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBucket(ctx, in)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoUpdateObject(ctx context.Context, in Object) (resp Object, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ObjstoreV1", "method", "AutoUpdateObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateObject(ctx, in)
	return
}

func (m loggingObjstoreV1MiddlewareServer) AutoWatchSvcObjstoreV1(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchSvcObjstoreV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ObjstoreV1", "method", "AutoWatchSvcObjstoreV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcObjstoreV1(in, stream)
	return
}

func (m loggingObjstoreV1MiddlewareServer) AutoWatchBucket(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchBucketServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ObjstoreV1", "method", "AutoWatchBucket", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchBucket(in, stream)
	return
}
func (m loggingObjstoreV1MiddlewareServer) AutoWatchObject(in *api.ListWatchOptions, stream ObjstoreV1_AutoWatchObjectServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ObjstoreV1", "method", "AutoWatchObject", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchObject(in, stream)
	return
}

func (m loggingObjstoreV1MiddlewareServer) DownloadFile(in *Object, stream ObjstoreV1_DownloadFileServer) error {
	return errors.New("not implemented")
}
func (m loggingObjstoreV1MiddlewareServer) DownloadFileByPrefix(in *Object, stream ObjstoreV1_DownloadFileByPrefixServer) error {
	return errors.New("not implemented")
}

func (r *EndpointsObjstoreV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsObjstoreV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIObjstoreV1AutoAddBucketCreateOper(in *Bucket) string {
	return ""

}

//
func makeURIObjstoreV1AutoAddObjectCreateOper(in *Object) string {
	return fmt.Sprint("/objstore/v1", "/tenant/", in.Tenant, "/", in.Namespace, "/objects")
}

//
func makeURIObjstoreV1AutoDeleteBucketDeleteOper(in *Bucket) string {
	return ""

}

//
func makeURIObjstoreV1AutoDeleteObjectDeleteOper(in *Object) string {
	return fmt.Sprint("/objstore/v1", "/tenant/", in.Tenant, "/", in.Namespace, "/objects/", in.Name)
}

//
func makeURIObjstoreV1AutoGetBucketGetOper(in *Bucket) string {
	return ""

}

//
func makeURIObjstoreV1AutoGetObjectGetOper(in *Object) string {
	return fmt.Sprint("/objstore/v1", "/tenant/", in.Tenant, "/", in.Namespace, "/objects/", in.Name)
}

//
func makeURIObjstoreV1AutoListBucketListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIObjstoreV1AutoListObjectListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/objstore/v1", "/tenant/", in.Tenant, "/", in.Namespace, "/objects")
}

//
func makeURIObjstoreV1AutoUpdateBucketUpdateOper(in *Bucket) string {
	return ""

}

//
func makeURIObjstoreV1AutoUpdateObjectUpdateOper(in *Object) string {
	return ""

}

//
func makeURIObjstoreV1AutoWatchBucketWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIObjstoreV1AutoWatchObjectWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/objstore/v1", "/watch/tenant/", in.Tenant, "/", in.Namespace, "/objects")
}

//
func makeURIObjstoreV1AutoWatchSvcObjstoreV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

// AutoAddBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoAddBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoUpdateBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	return nil, errors.New("not allowed")
}

// AutoGetBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoGetBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoDeleteBucket(ctx context.Context, in *Bucket) (*Bucket, error) {
	return nil, errors.New("not allowed")
}

// AutoListBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoListBucket(ctx context.Context, options *api.ListWatchOptions) (*BucketList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchBucket CRUD method for Bucket
func (r *EndpointsObjstoreV1RestClient) AutoWatchBucket(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIObjstoreV1AutoWatchBucketWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgBucketWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoAddObject(ctx context.Context, in *Object) (*Object, error) {
	path := makeURIObjstoreV1AutoAddObjectCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespObjstoreV1AutoAddObject(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Object), nil
}

// AutoUpdateObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoUpdateObject(ctx context.Context, in *Object) (*Object, error) {
	return nil, errors.New("not allowed")
}

// AutoGetObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoGetObject(ctx context.Context, in *Object) (*Object, error) {
	path := makeURIObjstoreV1AutoGetObjectGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespObjstoreV1AutoGetObject(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Object), err
}

// AutoDeleteObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoDeleteObject(ctx context.Context, in *Object) (*Object, error) {
	path := makeURIObjstoreV1AutoDeleteObjectDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespObjstoreV1AutoDeleteObject(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Object), err
}

// AutoListObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoListObject(ctx context.Context, options *api.ListWatchOptions) (*ObjectList, error) {
	path := makeURIObjstoreV1AutoListObjectListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespObjstoreV1AutoListObject(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ObjectList), err
}

// AutoWatchObject CRUD method for Object
func (r *EndpointsObjstoreV1RestClient) AutoWatchObject(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIObjstoreV1AutoWatchObjectWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgObjectWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsObjstoreV1RestClient) ObjstoreV1DownloadFileEndpoint(ctx context.Context, in *Object) (*StreamChunk, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsObjstoreV1RestClient) ObjstoreV1DownloadFileByPrefixEndpoint(ctx context.Context, in *Object) (*StreamChunk, error) {
	return nil, errors.New("not allowed")
}

// MakeObjstoreV1RestClientEndpoints make REST client endpoints
func MakeObjstoreV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsObjstoreV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsObjstoreV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeObjstoreV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeObjstoreV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsObjstoreV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsObjstoreV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
