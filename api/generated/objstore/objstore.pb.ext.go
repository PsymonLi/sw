// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: objstore.proto
*/
package objstore

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *Bucket) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "buckets/", m.Name)
}

func (m *Bucket) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/buckets/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Object) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "objects/", m.Namespace, "/", m.Name)
}

func (m *Object) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/", in.Namespace, "/objects/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Bucket) Clone(into interface{}) (interface{}, error) {
	var out *Bucket
	var ok bool
	if into == nil {
		out = &Bucket{}
	} else {
		out, ok = into.(*Bucket)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Bucket) Defaults(ver string) bool {
	m.Kind = "Bucket"
	m.Tenant, m.Namespace = "", ""
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BucketSpec) Clone(into interface{}) (interface{}, error) {
	var out *BucketSpec
	var ok bool
	if into == nil {
		out = &BucketSpec{}
	} else {
		out, ok = into.(*BucketSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BucketSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BucketStatus) Clone(into interface{}) (interface{}, error) {
	var out *BucketStatus
	var ok bool
	if into == nil {
		out = &BucketStatus{}
	} else {
		out, ok = into.(*BucketStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BucketStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Object) Clone(into interface{}) (interface{}, error) {
	var out *Object
	var ok bool
	if into == nil {
		out = &Object{}
	} else {
		out, ok = into.(*Object)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Object) Defaults(ver string) bool {
	m.Kind = "Object"
	m.Tenant, m.Namespace = "", ""
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectSpec) Clone(into interface{}) (interface{}, error) {
	var out *ObjectSpec
	var ok bool
	if into == nil {
		out = &ObjectSpec{}
	} else {
		out, ok = into.(*ObjectSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectStatus) Clone(into interface{}) (interface{}, error) {
	var out *ObjectStatus
	var ok bool
	if into == nil {
		out = &ObjectStatus{}
	} else {
		out, ok = into.(*ObjectStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *Bucket) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Bucket"))
	}
	return ret
}

func (m *BucketSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *BucketStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *Object) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Object"))
	}
	return ret
}

func (m *ObjectSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ObjectStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Bucket{},
		&Object{},
	)

}
