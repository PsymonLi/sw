// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: objstore.proto
*/
package objstore

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// Buckets_normal is a map of normalized values for the enum
var Buckets_normal = map[string]string{
	"auditevents": "auditevents",
	"events":      "events",
	"images":      "images",
	"snapshots":   "snapshots",
	"techsupport": "techsupport",
}

var Buckets_vname = map[int32]string{
	0: "images",
	1: "techsupport",
	2: "snapshots",
	3: "events",
	4: "auditevents",
}

var Buckets_vvalue = map[string]int32{
	"images":      0,
	"techsupport": 1,
	"snapshots":   2,
	"events":      3,
	"auditevents": 4,
}

func (x Buckets) String() string {
	return Buckets_vname[int32(x)]
}

// MakeKey generates a KV store key for the object
func (m *Bucket) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "buckets/", m.Name)
}

func (m *Bucket) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/buckets/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Object) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "objects/", m.Tenant, "/", m.Namespace, "/", m.Name)
}

func (m *Object) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/", in.Namespace, "/objects/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Bucket) Clone(into interface{}) (interface{}, error) {
	var out *Bucket
	var ok bool
	if into == nil {
		out = &Bucket{}
	} else {
		out, ok = into.(*Bucket)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Bucket))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Bucket) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Bucket"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BucketSpec) Clone(into interface{}) (interface{}, error) {
	var out *BucketSpec
	var ok bool
	if into == nil {
		out = &BucketSpec{}
	} else {
		out, ok = into.(*BucketSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BucketSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BucketSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BucketStatus) Clone(into interface{}) (interface{}, error) {
	var out *BucketStatus
	var ok bool
	if into == nil {
		out = &BucketStatus{}
	} else {
		out, ok = into.(*BucketStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BucketStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BucketStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Object) Clone(into interface{}) (interface{}, error) {
	var out *Object
	var ok bool
	if into == nil {
		out = &Object{}
	} else {
		out, ok = into.(*Object)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Object))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Object) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Object"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectSpec) Clone(into interface{}) (interface{}, error) {
	var out *ObjectSpec
	var ok bool
	if into == nil {
		out = &ObjectSpec{}
	} else {
		out, ok = into.(*ObjectSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ObjectSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectStatus) Clone(into interface{}) (interface{}, error) {
	var out *ObjectStatus
	var ok bool
	if into == nil {
		out = &ObjectStatus{}
	} else {
		out, ok = into.(*ObjectStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ObjectStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StreamChunk) Clone(into interface{}) (interface{}, error) {
	var out *StreamChunk
	var ok bool
	if into == nil {
		out = &StreamChunk{}
	} else {
		out, ok = into.(*StreamChunk)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*StreamChunk))
	return out, nil
}

// Default sets up the defaults for the object
func (m *StreamChunk) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *Bucket) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Bucket) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Bucket"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Bucket"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Bucket) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *BucketSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BucketSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *BucketSpec) Normalize() {

}

func (m *BucketStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BucketStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *BucketStatus) Normalize() {

}

func (m *Object) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *Object) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Object) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *ObjectSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ObjectSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *ObjectSpec) Normalize() {

}

func (m *ObjectStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ObjectStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *ObjectStatus) Normalize() {

}

func (m *StreamChunk) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *StreamChunk) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *StreamChunk) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Bucket{},
		&Object{},
	)

}
