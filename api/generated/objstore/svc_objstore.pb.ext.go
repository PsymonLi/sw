// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: svc_objstore.proto
*/
package objstore

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *BucketList) MakeKey(prefix string) string {
	obj := Bucket{}
	return obj.MakeKey(prefix)
}

func (m *BucketList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *ObjectList) MakeKey(prefix string) string {
	obj := Object{}
	return obj.MakeKey(prefix)
}

func (m *ObjectList) MakeURI(ver, prefix string) string {
	return fmt.Sprint("/", globals.ConfigURIPrefix, "/", prefix, "/", ver)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgBucketWatchHelper) MakeKey(prefix string) string {
	obj := Bucket{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgObjectWatchHelper) MakeKey(prefix string) string {
	obj := Object{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgBucketWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgBucketWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgBucketWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgBucketWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgBucketWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgBucketWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgBucketWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgBucketWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgBucketWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgBucketWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgBucketWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgBucketWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgObjectWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgObjectWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgObjectWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgObjectWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgObjectWatchHelper))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgObjectWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgObjectWatchHelper_WatchEvent) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgObjectWatchHelper_WatchEvent
	var ok bool
	if into == nil {
		out = &AutoMsgObjectWatchHelper_WatchEvent{}
	} else {
		out, ok = into.(*AutoMsgObjectWatchHelper_WatchEvent)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AutoMsgObjectWatchHelper_WatchEvent))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgObjectWatchHelper_WatchEvent) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BucketList) Clone(into interface{}) (interface{}, error) {
	var out *BucketList
	var ok bool
	if into == nil {
		out = &BucketList{}
	} else {
		out, ok = into.(*BucketList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*BucketList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *BucketList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectList) Clone(into interface{}) (interface{}, error) {
	var out *ObjectList
	var ok bool
	if into == nil {
		out = &ObjectList{}
	} else {
		out, ok = into.(*ObjectList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ObjectList))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectList) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *AutoMsgBucketWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgBucketWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgBucketWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgBucketWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgBucketWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *AutoMsgObjectWatchHelper) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgObjectWatchHelper) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Events {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sEvents[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AutoMsgObjectWatchHelper) Normalize() {

	for _, v := range m.Events {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *AutoMsgObjectWatchHelper_WatchEvent) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AutoMsgObjectWatchHelper_WatchEvent) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Object != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Object"
			if errs := m.Object.Validate(ver, npath, ignoreStatus); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) Normalize() {

	if m.Object != nil {
		m.Object.Normalize()
	}

}

func (m *BucketList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *BucketList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *BucketList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

func (m *ObjectList) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ObjectList) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Items {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sItems[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ObjectList) Normalize() {

	for _, v := range m.Items {
		if v != nil {
			v.Normalize()
		}
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

}
