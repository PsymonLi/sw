// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstoreCliUtilsBackend is a auto generated package.
Input file: svc_objstore.proto
*/
package cli

import (
	"context"
	"fmt"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/objstore"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/cli/gen"
)

func restGetBucket(hostname, tenant, token string, obj interface{}) error {
	return fmt.Errorf("get operation not supported for Bucket object")
}

func restDeleteBucket(hostname, token string, obj interface{}) error {
	return fmt.Errorf("delete operation not supported for Bucket object")
}

func restPostBucket(hostname, token string, obj interface{}) error {
	return fmt.Errorf("create operation not supported for Bucket object")
}

func restPutBucket(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for Bucket object")
}

func restGetObject(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*objstore.Object); ok {
		nv, err := restcl.ObjstoreV1().Object().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*objstore.ObjectList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.ObjstoreV1().Object().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteObject(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*objstore.Object); ok {
		nv, err := restcl.ObjstoreV1().Object().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostObject(hostname, token string, obj interface{}) error {
	return fmt.Errorf("create operation not supported for Object object")
}

func restPutObject(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for Object object")
}

func init() {
	cl := gen.GetInfo()
	if cl == nil {
		return
	}

	cl.AddRestDeleteFunc("objstore.Object", "v1", restDeleteObject)

	cl.AddRestGetFunc("objstore.Object", "v1", restGetObject)

}
