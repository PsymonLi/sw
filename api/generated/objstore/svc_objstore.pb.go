// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_objstore.proto

package objstore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AutoMsgBucketWatchHelper is a wrapper object for watch events for Bucket objects
type AutoMsgBucketWatchHelper struct {
	Events []*AutoMsgBucketWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgBucketWatchHelper) Reset()         { *m = AutoMsgBucketWatchHelper{} }
func (m *AutoMsgBucketWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgBucketWatchHelper) ProtoMessage()    {}
func (*AutoMsgBucketWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcObjstore, []int{0}
}

func (m *AutoMsgBucketWatchHelper) GetEvents() []*AutoMsgBucketWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgBucketWatchHelper_WatchEvent struct {
	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Bucket `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) Reset()         { *m = AutoMsgBucketWatchHelper_WatchEvent{} }
func (m *AutoMsgBucketWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgBucketWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgBucketWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcObjstore, []int{0, 0}
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) GetObject() *Bucket {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgObjectWatchHelper is a wrapper object for watch events for Object objects
type AutoMsgObjectWatchHelper struct {
	Events []*AutoMsgObjectWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgObjectWatchHelper) Reset()         { *m = AutoMsgObjectWatchHelper{} }
func (m *AutoMsgObjectWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgObjectWatchHelper) ProtoMessage()    {}
func (*AutoMsgObjectWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcObjstore, []int{1}
}

func (m *AutoMsgObjectWatchHelper) GetEvents() []*AutoMsgObjectWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgObjectWatchHelper_WatchEvent struct {
	Type   string  `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Object `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) Reset()         { *m = AutoMsgObjectWatchHelper_WatchEvent{} }
func (m *AutoMsgObjectWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgObjectWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgObjectWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcObjstore, []int{1, 0}
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

// BucketList is a container object for list of Bucket objects
type BucketList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Bucket objects
	Items []*Bucket `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *BucketList) Reset()                    { *m = BucketList{} }
func (m *BucketList) String() string            { return proto.CompactTextString(m) }
func (*BucketList) ProtoMessage()               {}
func (*BucketList) Descriptor() ([]byte, []int) { return fileDescriptorSvcObjstore, []int{2} }

func (m *BucketList) GetItems() []*Bucket {
	if m != nil {
		return m.Items
	}
	return nil
}

// ObjectList is a container object for list of Object objects
type ObjectList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Object objects
	Items []*Object `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *ObjectList) Reset()                    { *m = ObjectList{} }
func (m *ObjectList) String() string            { return proto.CompactTextString(m) }
func (*ObjectList) ProtoMessage()               {}
func (*ObjectList) Descriptor() ([]byte, []int) { return fileDescriptorSvcObjstore, []int{3} }

func (m *ObjectList) GetItems() []*Object {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgBucketWatchHelper)(nil), "objstore.AutoMsgBucketWatchHelper")
	proto.RegisterType((*AutoMsgBucketWatchHelper_WatchEvent)(nil), "objstore.AutoMsgBucketWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgObjectWatchHelper)(nil), "objstore.AutoMsgObjectWatchHelper")
	proto.RegisterType((*AutoMsgObjectWatchHelper_WatchEvent)(nil), "objstore.AutoMsgObjectWatchHelper.WatchEvent")
	proto.RegisterType((*BucketList)(nil), "objstore.BucketList")
	proto.RegisterType((*ObjectList)(nil), "objstore.ObjectList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ObjstoreV1 service

type ObjstoreV1Client interface {
	// Create Bucket object
	AutoAddBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error)
	// Create Object object
	AutoAddObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	// Delete Bucket object
	AutoDeleteBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error)
	// Delete Object object
	AutoDeleteObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	// Get Bucket object
	AutoGetBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error)
	// Get Object object
	AutoGetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	// List Bucket objects
	AutoListBucket(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*BucketList, error)
	// List Object objects
	AutoListObject(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ObjectList, error)
	// Update Bucket object
	AutoUpdateBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error)
	// Update Object object
	AutoUpdateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error)
	// Watch Bucket objects. Supports WebSockets or HTTP long poll
	AutoWatchBucket(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchBucketClient, error)
	// Watch Object objects. Supports WebSockets or HTTP long poll
	AutoWatchObject(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchObjectClient, error)
	AutoWatchSvcObjstoreV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchSvcObjstoreV1Client, error)
	//
	DownloadFile(ctx context.Context, in *Object, opts ...grpc.CallOption) (ObjstoreV1_DownloadFileClient, error)
}

type objstoreV1Client struct {
	cc *grpc.ClientConn
}

func NewObjstoreV1Client(cc *grpc.ClientConn) ObjstoreV1Client {
	return &objstoreV1Client{cc}
}

func (c *objstoreV1Client) AutoAddBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error) {
	out := new(Bucket)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoAddBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoAddObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoAddObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoDeleteBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error) {
	out := new(Bucket)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoDeleteBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoDeleteObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoDeleteObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoGetBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error) {
	out := new(Bucket)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoGetBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoGetObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoGetObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoListBucket(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*BucketList, error) {
	out := new(BucketList)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoListBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoListObject(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ObjectList, error) {
	out := new(ObjectList)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoListObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoUpdateBucket(ctx context.Context, in *Bucket, opts ...grpc.CallOption) (*Bucket, error) {
	out := new(Bucket)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoUpdateBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoUpdateObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*Object, error) {
	out := new(Object)
	err := grpc.Invoke(ctx, "/objstore.ObjstoreV1/AutoUpdateObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objstoreV1Client) AutoWatchBucket(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchBucketClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjstoreV1_serviceDesc.Streams[0], c.cc, "/objstore.ObjstoreV1/AutoWatchBucket", opts...)
	if err != nil {
		return nil, err
	}
	x := &objstoreV1AutoWatchBucketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjstoreV1_AutoWatchBucketClient interface {
	Recv() (*AutoMsgBucketWatchHelper, error)
	grpc.ClientStream
}

type objstoreV1AutoWatchBucketClient struct {
	grpc.ClientStream
}

func (x *objstoreV1AutoWatchBucketClient) Recv() (*AutoMsgBucketWatchHelper, error) {
	m := new(AutoMsgBucketWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objstoreV1Client) AutoWatchObject(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchObjectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjstoreV1_serviceDesc.Streams[1], c.cc, "/objstore.ObjstoreV1/AutoWatchObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objstoreV1AutoWatchObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjstoreV1_AutoWatchObjectClient interface {
	Recv() (*AutoMsgObjectWatchHelper, error)
	grpc.ClientStream
}

type objstoreV1AutoWatchObjectClient struct {
	grpc.ClientStream
}

func (x *objstoreV1AutoWatchObjectClient) Recv() (*AutoMsgObjectWatchHelper, error) {
	m := new(AutoMsgObjectWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objstoreV1Client) AutoWatchSvcObjstoreV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ObjstoreV1_AutoWatchSvcObjstoreV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjstoreV1_serviceDesc.Streams[2], c.cc, "/objstore.ObjstoreV1/AutoWatchSvcObjstoreV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &objstoreV1AutoWatchSvcObjstoreV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjstoreV1_AutoWatchSvcObjstoreV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type objstoreV1AutoWatchSvcObjstoreV1Client struct {
	grpc.ClientStream
}

func (x *objstoreV1AutoWatchSvcObjstoreV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objstoreV1Client) DownloadFile(ctx context.Context, in *Object, opts ...grpc.CallOption) (ObjstoreV1_DownloadFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjstoreV1_serviceDesc.Streams[3], c.cc, "/objstore.ObjstoreV1/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &objstoreV1DownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjstoreV1_DownloadFileClient interface {
	Recv() (*StreamChunk, error)
	grpc.ClientStream
}

type objstoreV1DownloadFileClient struct {
	grpc.ClientStream
}

func (x *objstoreV1DownloadFileClient) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ObjstoreV1 service

type ObjstoreV1Server interface {
	// Create Bucket object
	AutoAddBucket(context.Context, *Bucket) (*Bucket, error)
	// Create Object object
	AutoAddObject(context.Context, *Object) (*Object, error)
	// Delete Bucket object
	AutoDeleteBucket(context.Context, *Bucket) (*Bucket, error)
	// Delete Object object
	AutoDeleteObject(context.Context, *Object) (*Object, error)
	// Get Bucket object
	AutoGetBucket(context.Context, *Bucket) (*Bucket, error)
	// Get Object object
	AutoGetObject(context.Context, *Object) (*Object, error)
	// List Bucket objects
	AutoListBucket(context.Context, *api.ListWatchOptions) (*BucketList, error)
	// List Object objects
	AutoListObject(context.Context, *api.ListWatchOptions) (*ObjectList, error)
	// Update Bucket object
	AutoUpdateBucket(context.Context, *Bucket) (*Bucket, error)
	// Update Object object
	AutoUpdateObject(context.Context, *Object) (*Object, error)
	// Watch Bucket objects. Supports WebSockets or HTTP long poll
	AutoWatchBucket(*api.ListWatchOptions, ObjstoreV1_AutoWatchBucketServer) error
	// Watch Object objects. Supports WebSockets or HTTP long poll
	AutoWatchObject(*api.ListWatchOptions, ObjstoreV1_AutoWatchObjectServer) error
	AutoWatchSvcObjstoreV1(*api.ListWatchOptions, ObjstoreV1_AutoWatchSvcObjstoreV1Server) error
	//
	DownloadFile(*Object, ObjstoreV1_DownloadFileServer) error
}

func RegisterObjstoreV1Server(s *grpc.Server, srv ObjstoreV1Server) {
	s.RegisterService(&_ObjstoreV1_serviceDesc, srv)
}

func _ObjstoreV1_AutoAddBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoAddBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoAddBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoAddBucket(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoAddObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoAddObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoAddObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoAddObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoDeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoDeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoDeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoDeleteBucket(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoDeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoDeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoDeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoDeleteObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoGetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoGetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoGetBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoGetBucket(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoGetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoGetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoGetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoGetObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoListBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoListBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoListBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoListBucket(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoListObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoListObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoListObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoListObject(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoUpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoUpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoUpdateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoUpdateBucket(ctx, req.(*Bucket))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoUpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjstoreV1Server).AutoUpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/objstore.ObjstoreV1/AutoUpdateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjstoreV1Server).AutoUpdateObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjstoreV1_AutoWatchBucket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjstoreV1Server).AutoWatchBucket(m, &objstoreV1AutoWatchBucketServer{stream})
}

type ObjstoreV1_AutoWatchBucketServer interface {
	Send(*AutoMsgBucketWatchHelper) error
	grpc.ServerStream
}

type objstoreV1AutoWatchBucketServer struct {
	grpc.ServerStream
}

func (x *objstoreV1AutoWatchBucketServer) Send(m *AutoMsgBucketWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjstoreV1_AutoWatchObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjstoreV1Server).AutoWatchObject(m, &objstoreV1AutoWatchObjectServer{stream})
}

type ObjstoreV1_AutoWatchObjectServer interface {
	Send(*AutoMsgObjectWatchHelper) error
	grpc.ServerStream
}

type objstoreV1AutoWatchObjectServer struct {
	grpc.ServerStream
}

func (x *objstoreV1AutoWatchObjectServer) Send(m *AutoMsgObjectWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjstoreV1_AutoWatchSvcObjstoreV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjstoreV1Server).AutoWatchSvcObjstoreV1(m, &objstoreV1AutoWatchSvcObjstoreV1Server{stream})
}

type ObjstoreV1_AutoWatchSvcObjstoreV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type objstoreV1AutoWatchSvcObjstoreV1Server struct {
	grpc.ServerStream
}

func (x *objstoreV1AutoWatchSvcObjstoreV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjstoreV1_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Object)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjstoreV1Server).DownloadFile(m, &objstoreV1DownloadFileServer{stream})
}

type ObjstoreV1_DownloadFileServer interface {
	Send(*StreamChunk) error
	grpc.ServerStream
}

type objstoreV1DownloadFileServer struct {
	grpc.ServerStream
}

func (x *objstoreV1DownloadFileServer) Send(m *StreamChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _ObjstoreV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "objstore.ObjstoreV1",
	HandlerType: (*ObjstoreV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddBucket",
			Handler:    _ObjstoreV1_AutoAddBucket_Handler,
		},
		{
			MethodName: "AutoAddObject",
			Handler:    _ObjstoreV1_AutoAddObject_Handler,
		},
		{
			MethodName: "AutoDeleteBucket",
			Handler:    _ObjstoreV1_AutoDeleteBucket_Handler,
		},
		{
			MethodName: "AutoDeleteObject",
			Handler:    _ObjstoreV1_AutoDeleteObject_Handler,
		},
		{
			MethodName: "AutoGetBucket",
			Handler:    _ObjstoreV1_AutoGetBucket_Handler,
		},
		{
			MethodName: "AutoGetObject",
			Handler:    _ObjstoreV1_AutoGetObject_Handler,
		},
		{
			MethodName: "AutoListBucket",
			Handler:    _ObjstoreV1_AutoListBucket_Handler,
		},
		{
			MethodName: "AutoListObject",
			Handler:    _ObjstoreV1_AutoListObject_Handler,
		},
		{
			MethodName: "AutoUpdateBucket",
			Handler:    _ObjstoreV1_AutoUpdateBucket_Handler,
		},
		{
			MethodName: "AutoUpdateObject",
			Handler:    _ObjstoreV1_AutoUpdateObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchBucket",
			Handler:       _ObjstoreV1_AutoWatchBucket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchObject",
			Handler:       _ObjstoreV1_AutoWatchObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcObjstoreV1",
			Handler:       _ObjstoreV1_AutoWatchSvcObjstoreV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _ObjstoreV1_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_objstore.proto",
}

func (m *AutoMsgBucketWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgBucketWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcObjstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcObjstore(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcObjstore(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgObjectWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgObjectWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcObjstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcObjstore(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcObjstore(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *BucketList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcObjstore(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcObjstore(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcObjstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ObjectList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcObjstore(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcObjstore(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcObjstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcObjstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgBucketWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcObjstore(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgBucketWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcObjstore(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcObjstore(uint64(l))
	}
	return n
}

func (m *AutoMsgObjectWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcObjstore(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgObjectWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcObjstore(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcObjstore(uint64(l))
	}
	return n
}

func (m *BucketList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcObjstore(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcObjstore(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcObjstore(uint64(l))
		}
	}
	return n
}

func (m *ObjectList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcObjstore(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcObjstore(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcObjstore(uint64(l))
		}
	}
	return n
}

func sovSvcObjstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcObjstore(x uint64) (n int) {
	return sovSvcObjstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgBucketWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgBucketWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgBucketWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgBucketWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgBucketWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Bucket{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgObjectWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgObjectWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgObjectWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgObjectWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgObjectWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Bucket{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Object{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcObjstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcObjstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcObjstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcObjstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcObjstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcObjstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcObjstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcObjstore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_objstore.proto", fileDescriptorSvcObjstore) }

var fileDescriptorSvcObjstore = []byte{
	// 968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xbf, 0x6f, 0xdb, 0xc6,
	0x17, 0xd7, 0xf9, 0x87, 0xe2, 0x9c, 0x63, 0x5b, 0xdf, 0xcb, 0x0f, 0x88, 0x84, 0x61, 0x19, 0x04,
	0x82, 0xaf, 0x61, 0x44, 0xa2, 0xe5, 0xa0, 0x19, 0xbc, 0x14, 0x51, 0x9d, 0xa6, 0x2d, 0x92, 0xaa,
	0x75, 0xdc, 0x9f, 0x43, 0x0b, 0x8a, 0x7a, 0xa1, 0x98, 0x50, 0x3c, 0x42, 0x77, 0x94, 0xe1, 0x16,
	0x5e, 0x2c, 0x65, 0xe8, 0xda, 0x6e, 0x99, 0xda, 0x4e, 0x45, 0x86, 0x0e, 0x9e, 0xba, 0xb5, 0x63,
	0xd0, 0xc9, 0x40, 0x97, 0x22, 0x83, 0x50, 0x18, 0x45, 0x07, 0xfd, 0x15, 0xc5, 0xdd, 0x91, 0x12,
	0x23, 0xda, 0x91, 0xd5, 0xa1, 0x40, 0x17, 0xe9, 0xf8, 0xf8, 0x3e, 0x9f, 0xf7, 0x3e, 0xef, 0xdd,
	0xe3, 0x1d, 0x26, 0xac, 0x6d, 0x7f, 0x4e, 0x6b, 0x8f, 0x18, 0xa7, 0x2d, 0x28, 0x05, 0x2d, 0xca,
	0x29, 0x99, 0x8b, 0x9f, 0xf5, 0x65, 0x87, 0x52, 0xc7, 0x03, 0xd3, 0x0a, 0x5c, 0xd3, 0xf2, 0x7d,
	0xca, 0x2d, 0xee, 0x52, 0x9f, 0x29, 0x3f, 0xfd, 0x8e, 0xe3, 0xf2, 0x46, 0x58, 0x2b, 0xd9, 0xb4,
	0x69, 0x06, 0xe0, 0x33, 0xcb, 0xaf, 0x53, 0x93, 0xed, 0x99, 0x6d, 0xf0, 0x5d, 0x1b, 0xcc, 0x90,
	0xbb, 0x1e, 0x13, 0x50, 0x07, 0xfc, 0x24, 0xda, 0x74, 0x7d, 0xdb, 0x0b, 0xeb, 0x10, 0xd3, 0x14,
	0x13, 0x34, 0x0e, 0x75, 0xa8, 0x29, 0xcd, 0xb5, 0xf0, 0xa1, 0x7c, 0x92, 0x0f, 0x72, 0x15, 0xb9,
	0x2f, 0xbe, 0x9c, 0xad, 0x7e, 0xfd, 0x8c, 0x2c, 0x44, 0xce, 0x4d, 0xe0, 0x96, 0x72, 0x33, 0xfe,
	0x42, 0x38, 0x7f, 0x3b, 0xe4, 0xf4, 0x3e, 0x73, 0x2a, 0xa1, 0xfd, 0x18, 0xf8, 0x47, 0x16, 0xb7,
	0x1b, 0x6f, 0x81, 0x17, 0x40, 0x8b, 0xbc, 0x8f, 0xb3, 0x77, 0xda, 0xe0, 0x73, 0x96, 0x47, 0xab,
	0xd3, 0x6b, 0xf3, 0x9b, 0xc5, 0xd2, 0x20, 0xc8, 0x59, 0x98, 0x92, 0x5c, 0x4b, 0x54, 0x05, 0xf7,
	0x7b, 0x85, 0x2c, 0x48, 0x82, 0x9d, 0xe8, 0x5f, 0x7f, 0x88, 0xf1, 0xd0, 0x83, 0xac, 0xe2, 0x99,
	0xdd, 0xfd, 0x00, 0xf2, 0x68, 0x15, 0xad, 0x5d, 0xac, 0x90, 0x7e, 0xaf, 0xb0, 0xc8, 0xf7, 0x03,
	0xb8, 0x41, 0x9b, 0x2e, 0x87, 0x66, 0xc0, 0xf7, 0xc9, 0x2d, 0x9c, 0xad, 0xd6, 0x1e, 0x81, 0xcd,
	0xf3, 0x53, 0xab, 0x68, 0x6d, 0x7e, 0x33, 0x37, 0x4c, 0x41, 0xc5, 0xae, 0x5c, 0xe9, 0xf7, 0x0a,
	0x39, 0x2a, 0x7d, 0x86, 0xb8, 0xad, 0xa5, 0x17, 0x4f, 0xb4, 0xf9, 0x3d, 0x11, 0xa9, 0x21, 0xf3,
	0x4a, 0x0a, 0x55, 0x84, 0x93, 0x09, 0x4d, 0x61, 0xfe, 0x45, 0xa1, 0xca, 0x7e, 0x5e, 0xa1, 0xbf,
	0x23, 0x8c, 0x55, 0x69, 0xee, 0xb9, 0x8c, 0x93, 0x5b, 0x18, 0xed, 0x46, 0x94, 0x0b, 0x25, 0x2b,
	0x70, 0x4b, 0x22, 0x8f, 0xfb, 0xc0, 0xad, 0xca, 0xe5, 0xe7, 0xbd, 0x42, 0xe6, 0xb8, 0x57, 0x40,
	0xfd, 0x5e, 0xe1, 0xc2, 0x0d, 0xd7, 0xf7, 0x5c, 0x1f, 0x76, 0xe2, 0x05, 0xa9, 0xe2, 0x39, 0x81,
	0x17, 0x9e, 0xf9, 0xe9, 0x04, 0x3c, 0x36, 0x56, 0x96, 0x13, 0xf0, 0x9c, 0xe7, 0x32, 0x5e, 0x14,
	0xdb, 0x2a, 0xe6, 0x49, 0x59, 0x48, 0x19, 0xcf, 0xbe, 0xcd, 0xa1, 0xc9, 0xf2, 0x33, 0xb2, 0xc4,
	0xe9, 0x46, 0x5e, 0xec, 0xf7, 0x0a, 0xb3, 0x42, 0x16, 0xdb, 0x51, 0x7f, 0x5b, 0x8b, 0x2f, 0x9e,
	0x68, 0x58, 0x10, 0x25, 0xa4, 0xa9, 0x62, 0xfc, 0x57, 0xa4, 0x45, 0xad, 0x1b, 0x2b, 0x6d, 0xf3,
	0xab, 0x05, 0x29, 0x4d, 0xa2, 0x3e, 0x2c, 0x93, 0xbb, 0x78, 0x41, 0x6c, 0xbc, 0xdb, 0xf5, 0xba,
	0x2a, 0x0e, 0x49, 0x95, 0x4b, 0x4f, 0x59, 0x0c, 0x72, 0xd4, 0xd5, 0xb2, 0x76, 0x0b, 0x2c, 0x0e,
	0x3f, 0x75, 0x35, 0xf4, 0x4b, 0x57, 0xcb, 0x24, 0x88, 0x54, 0x2a, 0x24, 0x95, 0x9c, 0x9e, 0xb2,
	0x9c, 0x4a, 0xf4, 0x0e, 0xce, 0x09, 0xa2, 0x6d, 0xf0, 0x80, 0xc3, 0xa4, 0x49, 0xd5, 0x25, 0x6a,
	0xc0, 0xf5, 0x23, 0x4a, 0x92, 0x4d, 0x90, 0x58, 0x3b, 0x45, 0x86, 0x0e, 0x7f, 0xfb, 0xf3, 0x9b,
	0xa9, 0xcf, 0x70, 0x66, 0x2b, 0xf3, 0xe9, 0x75, 0xf1, 0xbb, 0x5e, 0x30, 0xbf, 0xac, 0x96, 0xde,
	0xb5, 0x9a, 0xc0, 0x02, 0xcb, 0x86, 0x03, 0x53, 0x4d, 0x0c, 0x8b, 0xad, 0x07, 0xeb, 0x65, 0x93,
	0x83, 0x6f, 0xf9, 0x5c, 0x58, 0x76, 0xe5, 0xea, 0x60, 0x0c, 0x84, 0x6c, 0xab, 0x2a, 0xde, 0x05,
	0x3e, 0x81, 0xf2, 0xa5, 0xa3, 0xae, 0x36, 0xed, 0x00, 0x1f, 0xc8, 0xfe, 0x01, 0x0d, 0x68, 0x26,
	0xd0, 0xcc, 0x5e, 0xa6, 0x49, 0x09, 0x26, 0xe3, 0x04, 0x93, 0x7f, 0x20, 0xb8, 0x8a, 0x17, 0x45,
	0xa6, 0x62, 0x22, 0x22, 0xc5, 0x57, 0x07, 0x23, 0x22, 0x3f, 0x6b, 0xd5, 0x40, 0x1e, 0x5a, 0xfa,
	0x95, 0x51, 0xd9, 0xc2, 0xc3, 0xc8, 0x1d, 0x75, 0xb5, 0x19, 0xb1, 0xbb, 0x07, 0xda, 0xbf, 0x43,
	0x43, 0xc6, 0x48, 0xfc, 0x78, 0xc6, 0xe1, 0xac, 0x1b, 0xb5, 0x11, 0x46, 0x55, 0x86, 0x7b, 0xb2,
	0x0c, 0xcb, 0xb2, 0x0c, 0xd7, 0x4e, 0xd7, 0x44, 0xd6, 0xce, 0xab, 0x3e, 0xde, 0xe2, 0x1f, 0x04,
	0x75, 0x6b, 0xf2, 0x2d, 0x1e, 0x4a, 0xd4, 0xe8, 0xb8, 0x28, 0xae, 0x49, 0x47, 0x6f, 0x84, 0xcb,
	0xc2, 0x4b, 0x82, 0x4b, 0x56, 0xe9, 0xd5, 0xdd, 0x30, 0xc6, 0x1f, 0xd0, 0xc6, 0xff, 0x8e, 0xba,
	0xda, 0xac, 0x3c, 0x30, 0xe2, 0x00, 0x1b, 0x88, 0xfc, 0x8c, 0x12, 0x31, 0x5e, 0xdd, 0x1f, 0x63,
	0xfc, 0xd9, 0x68, 0xd0, 0xd1, 0x18, 0xaa, 0x5d, 0x1f, 0xcb, 0x76, 0x19, 0xb2, 0x5d, 0xcb, 0xa6,
	0x7c, 0x7f, 0x46, 0x2b, 0x4a, 0xd1, 0xdb, 0x73, 0xb6, 0x6e, 0x03, 0x91, 0x4f, 0xf0, 0xb5, 0x81,
	0x80, 0x07, 0x6d, 0x3b, 0xf1, 0x2d, 0x3d, 0x43, 0xc7, 0x65, 0x69, 0x1e, 0x9e, 0xd1, 0x72, 0x9b,
	0x9d, 0x5a, 0x9c, 0x2f, 0xf0, 0xa5, 0x6d, 0xba, 0xe7, 0x7b, 0xd4, 0xaa, 0xbf, 0xe9, 0x7a, 0x70,
	0x4a, 0x1f, 0xaf, 0x0e, 0x2d, 0x0f, 0x78, 0x0b, 0xac, 0xe6, 0x1b, 0x8d, 0xd0, 0x7f, 0x6c, 0xbc,
	0x7e, 0x1c, 0x2b, 0x7f, 0x8d, 0xdc, 0x34, 0xeb, 0x11, 0x07, 0x1b, 0xab, 0x2a, 0x1e, 0xc3, 0x0d,
	0xa4, 0xb7, 0xbe, 0xee, 0x68, 0x53, 0xed, 0xf2, 0xd3, 0x8e, 0x96, 0xf9, 0xbe, 0xa3, 0x65, 0x55,
	0x3b, 0xc5, 0x4a, 0x45, 0x7e, 0xd6, 0xd1, 0x8c, 0xf8, 0xe2, 0x40, 0xc4, 0x57, 0x82, 0xc8, 0x21,
	0x21, 0xd1, 0x47, 0x92, 0x28, 0x2d, 0xbf, 0x76, 0xb4, 0x75, 0x7c, 0x29, 0x00, 0xbf, 0xd8, 0xa6,
	0xac, 0xd8, 0xe0, 0x3c, 0x20, 0x39, 0x33, 0x0c, 0x54, 0x32, 0x6e, 0xd3, 0x72, 0x80, 0x99, 0xfa,
	0x9c, 0xb8, 0x1a, 0x32, 0xb3, 0x5d, 0xae, 0xfc, 0xff, 0xe9, 0xa1, 0x76, 0x21, 0xf2, 0xfe, 0xf6,
	0x50, 0xcb, 0x3c, 0x3b, 0xd4, 0x06, 0x77, 0xdf, 0xe7, 0x27, 0x2b, 0xe8, 0xf8, 0x64, 0x05, 0xfd,
	0x71, 0xb2, 0x82, 0xde, 0x43, 0xb5, 0xac, 0xbc, 0x45, 0xde, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x27, 0x64, 0x1a, 0x86, 0x30, 0x0b, 0x00, 0x00,
}
