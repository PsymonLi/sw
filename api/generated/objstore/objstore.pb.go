// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: objstore.proto

/*
	Package objstore is a generated protocol buffer package.

	It is generated from these files:
		objstore.proto
		svc_objstore.proto

	It has these top-level messages:
		Bucket
		BucketSpec
		BucketStatus
		Object
		ObjectSpec
		ObjectStatus
		StreamChunk
		AutoMsgBucketWatchHelper
		AutoMsgObjectWatchHelper
		BucketList
		ObjectList
*/
package objstore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Bucket names are always lower case
type Buckets int32

const (
	//
	Buckets_images Buckets = 0
	//
	Buckets_techsupport Buckets = 1
	//
	Buckets_snapshots Buckets = 2
)

var Buckets_name = map[int32]string{
	0: "images",
	1: "techsupport",
	2: "snapshots",
}
var Buckets_value = map[string]int32{
	"images":      0,
	"techsupport": 1,
	"snapshots":   2,
}

func (Buckets) EnumDescriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{0} }

// Bucket is a collection of objects. Each bucket is scoped by the tenant. Default set of bucket types are defined
//  by the Buckets enum above.
type Bucket struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec BucketSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status BucketStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Bucket) Reset()                    { *m = Bucket{} }
func (m *Bucket) String() string            { return proto.CompactTextString(m) }
func (*Bucket) ProtoMessage()               {}
func (*Bucket) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{0} }

func (m *Bucket) GetSpec() BucketSpec {
	if m != nil {
		return m.Spec
	}
	return BucketSpec{}
}

func (m *Bucket) GetStatus() BucketStatus {
	if m != nil {
		return m.Status
	}
	return BucketStatus{}
}

//
type BucketSpec struct {
	//
	Description string `protobuf:"bytes,1,opt,name=Description,json=description,omitempty,proto3" json:"description,omitempty"`
}

func (m *BucketSpec) Reset()                    { *m = BucketSpec{} }
func (m *BucketSpec) String() string            { return proto.CompactTextString(m) }
func (*BucketSpec) ProtoMessage()               {}
func (*BucketSpec) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{1} }

func (m *BucketSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//
type BucketStatus struct {
	//
	NumObjects int32 `protobuf:"varint,1,opt,name=NumObjects,json=num-objects,proto3" json:"num-objects"`
	//
	TotalSize int32 `protobuf:"varint,2,opt,name=TotalSize,json=total-size,proto3" json:"total-size"`
}

func (m *BucketStatus) Reset()                    { *m = BucketStatus{} }
func (m *BucketStatus) String() string            { return proto.CompactTextString(m) }
func (*BucketStatus) ProtoMessage()               {}
func (*BucketStatus) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{2} }

func (m *BucketStatus) GetNumObjects() int32 {
	if m != nil {
		return m.NumObjects
	}
	return 0
}

func (m *BucketStatus) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

// Object is placed in a bucket determined by the Tenant and the Namespace in the ObjectMeta.
type Object struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec ObjectSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status ObjectStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{3} }

func (m *Object) GetSpec() ObjectSpec {
	if m != nil {
		return m.Spec
	}
	return ObjectSpec{}
}

func (m *Object) GetStatus() ObjectStatus {
	if m != nil {
		return m.Status
	}
	return ObjectStatus{}
}

//
type ObjectSpec struct {
	// Content-Type for the stored object. Can either be specified when uploading.
	//  or the backend guesses one if possible.
	ContentType string `protobuf:"bytes,1,opt,name=ContentType,json=content-type,omitempty,proto3" json:"content-type,omitempty"`
}

func (m *ObjectSpec) Reset()                    { *m = ObjectSpec{} }
func (m *ObjectSpec) String() string            { return proto.CompactTextString(m) }
func (*ObjectSpec) ProtoMessage()               {}
func (*ObjectSpec) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{4} }

func (m *ObjectSpec) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

//
type ObjectStatus struct {
	// Size is the total size of the object
	Size_ int64 `protobuf:"varint,1,opt,name=Size,json=size,proto3" json:"size"`
	// Digest is a hash digest of the object content.
	Digest string `protobuf:"bytes,2,opt,name=Digest,json=digest,proto3" json:"digest"`
}

func (m *ObjectStatus) Reset()                    { *m = ObjectStatus{} }
func (m *ObjectStatus) String() string            { return proto.CompactTextString(m) }
func (*ObjectStatus) ProtoMessage()               {}
func (*ObjectStatus) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{5} }

func (m *ObjectStatus) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ObjectStatus) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

//
type StreamChunk struct {
	//
	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *StreamChunk) Reset()                    { *m = StreamChunk{} }
func (m *StreamChunk) String() string            { return proto.CompactTextString(m) }
func (*StreamChunk) ProtoMessage()               {}
func (*StreamChunk) Descriptor() ([]byte, []int) { return fileDescriptorObjstore, []int{6} }

func (m *StreamChunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Bucket)(nil), "objstore.Bucket")
	proto.RegisterType((*BucketSpec)(nil), "objstore.BucketSpec")
	proto.RegisterType((*BucketStatus)(nil), "objstore.BucketStatus")
	proto.RegisterType((*Object)(nil), "objstore.Object")
	proto.RegisterType((*ObjectSpec)(nil), "objstore.ObjectSpec")
	proto.RegisterType((*ObjectStatus)(nil), "objstore.ObjectStatus")
	proto.RegisterType((*StreamChunk)(nil), "objstore.StreamChunk")
	proto.RegisterEnum("objstore.Buckets", Buckets_name, Buckets_value)
}
func (m *Bucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *BucketSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *BucketStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BucketStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumObjects != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(m.NumObjects))
	}
	if m.TotalSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(m.TotalSize))
	}
	return i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintObjstore(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ObjectSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(len(m.ContentType)))
		i += copy(dAtA[i:], m.ContentType)
	}
	return i, nil
}

func (m *ObjectStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(m.Size_))
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	return i, nil
}

func (m *StreamChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjstore(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func encodeVarintObjstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Bucket) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovObjstore(uint64(l))
	return n
}

func (m *BucketSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovObjstore(uint64(l))
	}
	return n
}

func (m *BucketStatus) Size() (n int) {
	var l int
	_ = l
	if m.NumObjects != 0 {
		n += 1 + sovObjstore(uint64(m.NumObjects))
	}
	if m.TotalSize != 0 {
		n += 1 + sovObjstore(uint64(m.TotalSize))
	}
	return n
}

func (m *Object) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjstore(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovObjstore(uint64(l))
	return n
}

func (m *ObjectSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovObjstore(uint64(l))
	}
	return n
}

func (m *ObjectStatus) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovObjstore(uint64(m.Size_))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovObjstore(uint64(l))
	}
	return n
}

func (m *StreamChunk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovObjstore(uint64(l))
	}
	return n
}

func sovObjstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozObjstore(x uint64) (n int) {
	return sovObjstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BucketStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BucketStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BucketStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumObjects", wireType)
			}
			m.NumObjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumObjects |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjstore
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthObjstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObjstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObjstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthObjstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowObjstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipObjstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthObjstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjstore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("objstore.proto", fileDescriptorObjstore) }

var fileDescriptorObjstore = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x43, 0x48, 0xc8, 0x4d, 0x80, 0x68, 0xde, 0x7b, 0xbc, 0x04, 0x3d, 0xc5, 0x4f, 0x56,
	0xab, 0xa2, 0x8a, 0xd8, 0x55, 0xab, 0xb2, 0xe8, 0xa2, 0xaa, 0x0c, 0xa8, 0xab, 0x02, 0x72, 0xd2,
	0x0f, 0x98, 0x38, 0x57, 0xc9, 0x40, 0x3c, 0x33, 0xca, 0x8c, 0x5b, 0x41, 0xc5, 0x92, 0x45, 0xff,
	0xa3, 0x1f, 0xc3, 0x12, 0xf1, 0x01, 0x56, 0x95, 0x55, 0x95, 0xaf, 0xa8, 0x3c, 0x76, 0x8a, 0xa5,
	0x16, 0x16, 0x5d, 0x75, 0xe3, 0x99, 0x7b, 0xe6, 0x9e, 0x93, 0x3b, 0xe7, 0x8c, 0x02, 0x1b, 0x62,
	0x78, 0xaa, 0xb4, 0x98, 0xa1, 0x2b, 0x67, 0x42, 0x0b, 0xb2, 0xb6, 0xac, 0xb7, 0x0f, 0xc7, 0x4c,
	0x4f, 0xe2, 0xa1, 0x1b, 0x8a, 0xc8, 0x93, 0xc8, 0x15, 0xe5, 0x23, 0xe1, 0xa9, 0x8f, 0xde, 0x07,
	0xe4, 0x2c, 0x44, 0x2f, 0xd6, 0x6c, 0xaa, 0x3c, 0x2a, 0xd9, 0x18, 0xb9, 0x47, 0x39, 0x17, 0x9a,
	0x6a, 0x26, 0xb8, 0xf2, 0x18, 0x0f, 0xa7, 0xf1, 0x08, 0x55, 0x26, 0xb8, 0xfd, 0xf8, 0x1e, 0x19,
	0x2a, 0x99, 0x17, 0xa1, 0xa6, 0x79, 0x9b, 0xfb, 0x40, 0x9b, 0xe9, 0x50, 0x9e, 0x46, 0x4e, 0xb9,
	0xce, 0xfa, 0x9d, 0xcf, 0x65, 0xa8, 0xfa, 0x71, 0x78, 0x86, 0x9a, 0xec, 0x81, 0x35, 0x68, 0x5b,
	0xff, 0x5b, 0x3b, 0x8d, 0xe7, 0xeb, 0x2e, 0x95, 0xcc, 0x1d, 0x9c, 0x4b, 0x7c, 0x87, 0x9a, 0xfa,
	0x7f, 0x5d, 0x27, 0x76, 0xe9, 0x26, 0xb1, 0xad, 0x45, 0x62, 0xd7, 0x76, 0x19, 0x9f, 0x32, 0x8e,
	0xc1, 0x72, 0x43, 0xde, 0x80, 0x75, 0xdc, 0x2e, 0x1b, 0xde, 0xa6, 0xe1, 0x1d, 0x0f, 0x4f, 0x31,
	0xd4, 0x86, 0xf9, 0x6f, 0x81, 0xd9, 0x48, 0xc7, 0x5c, 0xb2, 0x8b, 0x05, 0xd9, 0x83, 0x4a, 0x5f,
	0x62, 0xd8, 0x5e, 0x31, 0x22, 0x7f, 0xbb, 0x3f, 0xbc, 0xcc, 0x26, 0x4b, 0xcf, 0xfc, 0x66, 0xaa,
	0xb4, 0x48, 0xec, 0x8a, 0x92, 0x18, 0x06, 0xe6, 0x4b, 0x5e, 0x43, 0xb5, 0xaf, 0xa9, 0x8e, 0x55,
	0xbb, 0x62, 0x98, 0x5b, 0x3f, 0x31, 0xcd, 0xa9, 0xbf, 0x91, 0x73, 0xab, 0xca, 0xd4, 0x41, 0xbe,
	0xbe, 0x5a, 0xbf, 0xbd, 0xea, 0xd4, 0x49, 0x6d, 0x68, 0x7a, 0x95, 0xd3, 0x07, 0xb8, 0xfb, 0x41,
	0x72, 0x08, 0x8d, 0x03, 0x54, 0xe1, 0x8c, 0xc9, 0x34, 0x0f, 0x63, 0x4c, 0xdd, 0xef, 0x2c, 0x12,
	0xfb, 0x9f, 0xd1, 0x1d, 0xbc, 0x2b, 0x22, 0xa6, 0x31, 0x92, 0xfa, 0x3c, 0xf8, 0x35, 0xec, 0x08,
	0x68, 0x16, 0x67, 0x21, 0xcf, 0x00, 0x8e, 0xe2, 0x28, 0xb3, 0x48, 0x19, 0xd5, 0x55, 0x7f, 0x33,
	0x75, 0x87, 0xc7, 0x51, 0x4f, 0x64, 0x70, 0x50, 0x2c, 0x48, 0x0f, 0xea, 0x03, 0xa1, 0xe9, 0xb4,
	0xcf, 0x2e, 0xd0, 0xf8, 0xbc, 0xea, 0x6f, 0x2c, 0x12, 0x1b, 0x74, 0x0a, 0xf6, 0x14, 0xbb, 0xc0,
	0xa0, 0xb0, 0x77, 0xbe, 0x94, 0xa1, 0x9a, 0xc9, 0xff, 0x89, 0x89, 0x66, 0x4a, 0xbf, 0x93, 0x68,
	0xce, 0x7c, 0x38, 0xd1, 0x9d, 0xdb, 0xab, 0xce, 0x23, 0xe8, 0x78, 0x9f, 0x8e, 0xdd, 0x81, 0x79,
	0xe6, 0x97, 0xe9, 0xf6, 0x88, 0x46, 0xa8, 0x24, 0x0d, 0xf1, 0x92, 0xd4, 0x72, 0x57, 0x9d, 0xf7,
	0x00, 0x77, 0xb3, 0x90, 0xb7, 0xd0, 0xd8, 0x17, 0x5c, 0x23, 0xd7, 0xa9, 0x45, 0x79, 0xd8, 0xdb,
	0x8b, 0xc4, 0xde, 0x0a, 0x33, 0xb8, 0xa7, 0xcf, 0x25, 0x16, 0xd2, 0xbe, 0x07, 0x77, 0x4e, 0xa0,
	0x59, 0x1c, 0x94, 0xfc, 0x07, 0x15, 0x93, 0x5b, 0xaa, 0xb8, 0xe2, 0xaf, 0x99, 0xeb, 0xa6, 0x89,
	0x99, 0x2f, 0x71, 0xa0, 0x7a, 0xc0, 0xc6, 0xa8, 0xb4, 0x71, 0xbb, 0xee, 0x43, 0x7a, 0xa5, 0x91,
	0x41, 0x82, 0x7c, 0x75, 0x9e, 0x40, 0xa3, 0xaf, 0x67, 0x48, 0xa3, 0xfd, 0x49, 0xcc, 0xcf, 0x48,
	0x1b, 0x6a, 0xf9, 0xa4, 0x46, 0xb3, 0x19, 0x2c, 0xcb, 0xa7, 0x2f, 0xa1, 0x96, 0xbd, 0x34, 0x45,
	0x00, 0xaa, 0x2c, 0xa2, 0x63, 0x54, 0xad, 0x12, 0xd9, 0x84, 0x86, 0xc6, 0x70, 0xa2, 0x62, 0x29,
	0xc5, 0x4c, 0xb7, 0x2c, 0xb2, 0x0e, 0x75, 0xc5, 0xa9, 0x54, 0x13, 0xa1, 0x55, 0xab, 0xec, 0xb7,
	0xae, 0xe7, 0x5d, 0xeb, 0x66, 0xde, 0xb5, 0xbe, 0xce, 0xbb, 0xd6, 0xb7, 0x79, 0xb7, 0x74, 0x52,
	0x1a, 0x56, 0xcd, 0x9f, 0xc3, 0x8b, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x5f, 0x87, 0x6c,
	0xd6, 0x04, 0x00, 0x00,
}
