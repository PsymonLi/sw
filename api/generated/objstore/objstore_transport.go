// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package objstore is a auto generated package.
Input file: objstore.proto
*/
package objstore

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPBucket(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBucket(_ context.Context, r *http.Request) (interface{}, error) {
	var req Bucket
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBucket encodes GRPC request
func EncodeGrpcReqBucket(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Bucket)
	return req, nil
}

// DecodeGrpcReqBucket decodes GRPC request
func DecodeGrpcReqBucket(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Bucket)
	return req, nil
}

// EncodeGrpcRespBucket encodes GRC response
func EncodeGrpcRespBucket(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBucket decodes GRPC response
func DecodeGrpcRespBucket(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBucketSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBucketSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req BucketSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBucketSpec encodes GRPC request
func EncodeGrpcReqBucketSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketSpec)
	return req, nil
}

// DecodeGrpcReqBucketSpec decodes GRPC request
func DecodeGrpcReqBucketSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketSpec)
	return req, nil
}

// EncodeGrpcRespBucketSpec encodes GRC response
func EncodeGrpcRespBucketSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBucketSpec decodes GRPC response
func DecodeGrpcRespBucketSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBucketStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBucketStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req BucketStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBucketStatus encodes GRPC request
func EncodeGrpcReqBucketStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketStatus)
	return req, nil
}

// DecodeGrpcReqBucketStatus decodes GRPC request
func DecodeGrpcReqBucketStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BucketStatus)
	return req, nil
}

// EncodeGrpcRespBucketStatus encodes GRC response
func EncodeGrpcRespBucketStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBucketStatus decodes GRPC response
func DecodeGrpcRespBucketStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPObject(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPObject(_ context.Context, r *http.Request) (interface{}, error) {
	var req Object
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqObject encodes GRPC request
func EncodeGrpcReqObject(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Object)
	return req, nil
}

// DecodeGrpcReqObject decodes GRPC request
func DecodeGrpcReqObject(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Object)
	return req, nil
}

// EncodeGrpcRespObject encodes GRC response
func EncodeGrpcRespObject(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespObject decodes GRPC response
func DecodeGrpcRespObject(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPObjectSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPObjectSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ObjectSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqObjectSpec encodes GRPC request
func EncodeGrpcReqObjectSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectSpec)
	return req, nil
}

// DecodeGrpcReqObjectSpec decodes GRPC request
func DecodeGrpcReqObjectSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectSpec)
	return req, nil
}

// EncodeGrpcRespObjectSpec encodes GRC response
func EncodeGrpcRespObjectSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespObjectSpec decodes GRPC response
func DecodeGrpcRespObjectSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPObjectStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPObjectStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ObjectStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqObjectStatus encodes GRPC request
func EncodeGrpcReqObjectStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectStatus)
	return req, nil
}

// DecodeGrpcReqObjectStatus decodes GRPC request
func DecodeGrpcReqObjectStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectStatus)
	return req, nil
}

// EncodeGrpcRespObjectStatus encodes GRC response
func EncodeGrpcRespObjectStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespObjectStatus decodes GRPC response
func DecodeGrpcRespObjectStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
