// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: staging.proto

/*
	Package staging is a generated protocol buffer package.

	Service name

	It is generated from these files:
		staging.proto
		svc_staging.proto

	It has these top-level messages:
		Buffer
		BufferSpec
		BufferStatus
		ClearAction
		ClearRequest
		ClearResponse
		CommitAction
		CommitRequest
		CommitResponse
		Item
		ItemId
		ValidationError
		AutoMsgBufferWatchHelper
		BufferList
*/
package staging

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type BufferStatus_ValidationStatus int32

const (
	// ui-hint: Success
	BufferStatus_SUCCESS BufferStatus_ValidationStatus = 0
	// ui-hint: Failed
	BufferStatus_FAILED BufferStatus_ValidationStatus = 1
)

var BufferStatus_ValidationStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}
var BufferStatus_ValidationStatus_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x BufferStatus_ValidationStatus) String() string {
	return proto.EnumName(BufferStatus_ValidationStatus_name, int32(x))
}
func (BufferStatus_ValidationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorStaging, []int{2, 0}
}

//
type ClearResponse_ClearStatus int32

const (
	//
	ClearResponse_SUCCESS ClearResponse_ClearStatus = 0
	//
	ClearResponse_FAILED ClearResponse_ClearStatus = 1
)

var ClearResponse_ClearStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}
var ClearResponse_ClearStatus_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x ClearResponse_ClearStatus) String() string {
	return proto.EnumName(ClearResponse_ClearStatus_name, int32(x))
}
func (ClearResponse_ClearStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorStaging, []int{5, 0}
}

//
type CommitResponse_CommitStatus int32

const (
	//
	CommitResponse_SUCCESS CommitResponse_CommitStatus = 0
	//
	CommitResponse_FAILED CommitResponse_CommitStatus = 1
)

var CommitResponse_CommitStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}
var CommitResponse_CommitStatus_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x CommitResponse_CommitStatus) String() string {
	return proto.EnumName(CommitResponse_CommitStatus_name, int32(x))
}
func (CommitResponse_CommitStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorStaging, []int{8, 0}
}

//
type Buffer struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec BufferSpec `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status BufferStatus `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *Buffer) Reset()                    { *m = Buffer{} }
func (m *Buffer) String() string            { return proto.CompactTextString(m) }
func (*Buffer) ProtoMessage()               {}
func (*Buffer) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{0} }

func (m *Buffer) GetSpec() BufferSpec {
	if m != nil {
		return m.Spec
	}
	return BufferSpec{}
}

func (m *Buffer) GetStatus() BufferStatus {
	if m != nil {
		return m.Status
	}
	return BufferStatus{}
}

//
type BufferSpec struct {
	//
	Contact string `protobuf:"bytes,1,opt,name=Contact,proto3" json:"Contact,omitempty"`
}

func (m *BufferSpec) Reset()                    { *m = BufferSpec{} }
func (m *BufferSpec) String() string            { return proto.CompactTextString(m) }
func (*BufferSpec) ProtoMessage()               {}
func (*BufferSpec) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{1} }

func (m *BufferSpec) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

//
type BufferStatus struct {
	//
	ValidationResult string `protobuf:"bytes,1,opt,name=ValidationResult,json=validation-result,proto3" json:"validation-result"`
	//
	Errors []*ValidationError `protobuf:"bytes,2,rep,name=Errors,json=errors" json:"errors"`
	//
	Items []*Item `protobuf:"bytes,3,rep,name=Items,json=items" json:"items"`
}

func (m *BufferStatus) Reset()                    { *m = BufferStatus{} }
func (m *BufferStatus) String() string            { return proto.CompactTextString(m) }
func (*BufferStatus) ProtoMessage()               {}
func (*BufferStatus) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{2} }

func (m *BufferStatus) GetValidationResult() string {
	if m != nil {
		return m.ValidationResult
	}
	return ""
}

func (m *BufferStatus) GetErrors() []*ValidationError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *BufferStatus) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// ClearAction deletes objects from the staging buffer. A list of items to be cleared is specified
//  in the Spec. If there are no items are specified then all items are deleted from the staging.
//  buffer.
type ClearAction struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec ClearRequest `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status ClearResponse `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *ClearAction) Reset()                    { *m = ClearAction{} }
func (m *ClearAction) String() string            { return proto.CompactTextString(m) }
func (*ClearAction) ProtoMessage()               {}
func (*ClearAction) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{3} }

func (m *ClearAction) GetSpec() ClearRequest {
	if m != nil {
		return m.Spec
	}
	return ClearRequest{}
}

func (m *ClearAction) GetStatus() ClearResponse {
	if m != nil {
		return m.Status
	}
	return ClearResponse{}
}

//
type ClearRequest struct {
	// Empty Items indicates everyting in the buffer
	Items []*ItemId `protobuf:"bytes,1,rep,name=Items,json=items" json:"items"`
}

func (m *ClearRequest) Reset()                    { *m = ClearRequest{} }
func (m *ClearRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearRequest) ProtoMessage()               {}
func (*ClearRequest) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{4} }

func (m *ClearRequest) GetItems() []*ItemId {
	if m != nil {
		return m.Items
	}
	return nil
}

//
type ClearResponse struct {
	//
	Status string `protobuf:"bytes,1,opt,name=Status,json=status,proto3" json:"status"`
	//
	Reason string `protobuf:"bytes,2,opt,name=Reason,json=reason,proto3" json:"reason"`
}

func (m *ClearResponse) Reset()                    { *m = ClearResponse{} }
func (m *ClearResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearResponse) ProtoMessage()               {}
func (*ClearResponse) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{5} }

func (m *ClearResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ClearResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// CommitAction commits the changes in the staging buffer. All staged entries
//  are verified and if verification is successful they are commited.
type CommitAction struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,inline,embedded=O" json:"meta,inline"`
	//
	Spec CommitRequest `protobuf:"bytes,3,opt,name=Spec,json=spec" json:"spec"`
	//
	Status CommitResponse `protobuf:"bytes,4,opt,name=Status,json=status" json:"status"`
}

func (m *CommitAction) Reset()                    { *m = CommitAction{} }
func (m *CommitAction) String() string            { return proto.CompactTextString(m) }
func (*CommitAction) ProtoMessage()               {}
func (*CommitAction) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{6} }

func (m *CommitAction) GetSpec() CommitRequest {
	if m != nil {
		return m.Spec
	}
	return CommitRequest{}
}

func (m *CommitAction) GetStatus() CommitResponse {
	if m != nil {
		return m.Status
	}
	return CommitResponse{}
}

//
type CommitRequest struct {
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{7} }

//
type CommitResponse struct {
	//
	Status string `protobuf:"bytes,1,opt,name=Status,json=status,proto3" json:"status"`
	//
	Reason string `protobuf:"bytes,2,opt,name=Reason,json=reason,proto3" json:"reason"`
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{8} }

func (m *CommitResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CommitResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//
type Item struct {
	//
	ItemId `protobuf:"bytes,1,opt,name=Id,json=,inline,embedded=Id" json:",inline"`
	//
	Object *api.Any `protobuf:"bytes,2,opt,name=Object,json=object" json:"object"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{9} }

func (m *Item) GetObject() *api.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

//
type ItemId struct {
	//
	URI string `protobuf:"bytes,2,opt,name=URI,json=uri,proto3" json:"uri"`
	//
	Method string `protobuf:"bytes,3,opt,name=Method,json=method,proto3" json:"method"`
}

func (m *ItemId) Reset()                    { *m = ItemId{} }
func (m *ItemId) String() string            { return proto.CompactTextString(m) }
func (*ItemId) ProtoMessage()               {}
func (*ItemId) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{10} }

func (m *ItemId) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *ItemId) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

//
type ValidationError struct {
	//
	ItemId `protobuf:"bytes,1,opt,name=Id,json=,inline,embedded=Id" json:",inline"`
	//
	Errors []string `protobuf:"bytes,2,rep,name=Errors,json=error" json:"error"`
}

func (m *ValidationError) Reset()                    { *m = ValidationError{} }
func (m *ValidationError) String() string            { return proto.CompactTextString(m) }
func (*ValidationError) ProtoMessage()               {}
func (*ValidationError) Descriptor() ([]byte, []int) { return fileDescriptorStaging, []int{11} }

func (m *ValidationError) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*Buffer)(nil), "staging.Buffer")
	proto.RegisterType((*BufferSpec)(nil), "staging.BufferSpec")
	proto.RegisterType((*BufferStatus)(nil), "staging.BufferStatus")
	proto.RegisterType((*ClearAction)(nil), "staging.ClearAction")
	proto.RegisterType((*ClearRequest)(nil), "staging.ClearRequest")
	proto.RegisterType((*ClearResponse)(nil), "staging.ClearResponse")
	proto.RegisterType((*CommitAction)(nil), "staging.CommitAction")
	proto.RegisterType((*CommitRequest)(nil), "staging.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "staging.CommitResponse")
	proto.RegisterType((*Item)(nil), "staging.Item")
	proto.RegisterType((*ItemId)(nil), "staging.ItemId")
	proto.RegisterType((*ValidationError)(nil), "staging.ValidationError")
	proto.RegisterEnum("staging.BufferStatus_ValidationStatus", BufferStatus_ValidationStatus_name, BufferStatus_ValidationStatus_value)
	proto.RegisterEnum("staging.ClearResponse_ClearStatus", ClearResponse_ClearStatus_name, ClearResponse_ClearStatus_value)
	proto.RegisterEnum("staging.CommitResponse_CommitStatus", CommitResponse_CommitStatus_name, CommitResponse_CommitStatus_value)
}
func (m *Buffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Buffer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *BufferSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contact) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Contact)))
		i += copy(dAtA[i:], m.Contact)
	}
	return i, nil
}

func (m *BufferStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ValidationResult) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.ValidationResult)))
		i += copy(dAtA[i:], m.ValidationResult)
	}
	if len(m.Errors) > 0 {
		for _, msg := range m.Errors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClearAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ClearRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStaging(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClearResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *CommitAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x12
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.ObjectMeta.Size()))
	n10, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Spec.Size()))
	n11, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x22
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.Status.Size()))
	n12, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	return i, nil
}

func (m *CommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.ItemId.Size()))
	n13, err := m.ItemId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStaging(dAtA, i, uint64(m.Object.Size()))
		n14, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ItemId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStaging(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *ValidationError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidationError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintStaging(dAtA, i, uint64(m.ItemId.Size()))
	n15, err := m.ItemId.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintStaging(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Buffer) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovStaging(uint64(l))
	return n
}

func (m *BufferSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Contact)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	return n
}

func (m *BufferStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.ValidationResult)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovStaging(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStaging(uint64(l))
		}
	}
	return n
}

func (m *ClearAction) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovStaging(uint64(l))
	return n
}

func (m *ClearRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStaging(uint64(l))
		}
	}
	return n
}

func (m *ClearResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	return n
}

func (m *CommitAction) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovStaging(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovStaging(uint64(l))
	return n
}

func (m *CommitRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CommitResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	return n
}

func (m *Item) Size() (n int) {
	var l int
	_ = l
	l = m.ItemId.Size()
	n += 1 + l + sovStaging(uint64(l))
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovStaging(uint64(l))
	}
	return n
}

func (m *ItemId) Size() (n int) {
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovStaging(uint64(l))
	}
	return n
}

func (m *ValidationError) Size() (n int) {
	var l int
	_ = l
	l = m.ItemId.Size()
	n += 1 + l + sovStaging(uint64(l))
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovStaging(uint64(l))
		}
	}
	return n
}

func sovStaging(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStaging(x uint64) (n int) {
	return sovStaging(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Buffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Buffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Buffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &ValidationError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemId{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &api.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidationError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidationError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidationError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaging(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaging
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStaging
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStaging
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStaging(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStaging = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaging   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("staging.proto", fileDescriptorStaging) }

var fileDescriptorStaging = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc6, 0x49, 0x70, 0x36, 0x6f, 0x12, 0xc2, 0x0e, 0x5a, 0x70, 0x38, 0x10, 0x64, 0xed, 0xb2,
	0xac, 0x96, 0xb5, 0x11, 0xab, 0x7e, 0xaa, 0x2d, 0xe0, 0x34, 0x6d, 0x53, 0x15, 0x51, 0x4d, 0xa0,
	0x77, 0xc7, 0x19, 0x82, 0xab, 0x64, 0xec, 0x7a, 0xc6, 0x54, 0xa8, 0xea, 0x11, 0xae, 0x95, 0xaa,
	0x4a, 0xfd, 0x05, 0x3d, 0x94, 0x5f, 0xc2, 0x11, 0xf1, 0x03, 0xa2, 0x8a, 0x63, 0x7e, 0x45, 0xe5,
	0xb1, 0xf3, 0xe1, 0xf0, 0xa5, 0x8a, 0x03, 0x17, 0xbf, 0xcc, 0x3b, 0xef, 0xf3, 0x7e, 0x3d, 0x0f,
	0x13, 0xc8, 0x33, 0x6e, 0x36, 0x6d, 0xda, 0xd4, 0x5c, 0xcf, 0xe1, 0x0e, 0x4a, 0x47, 0xc7, 0xd9,
	0x4a, 0xd3, 0xe6, 0xbb, 0x7e, 0x5d, 0xb3, 0x9c, 0xb6, 0xee, 0x12, 0xca, 0x4c, 0xda, 0x70, 0x74,
	0xf6, 0x5e, 0xdf, 0x23, 0xd4, 0xb6, 0x88, 0xee, 0x73, 0xbb, 0xc5, 0x74, 0xd3, 0xb5, 0x9b, 0x84,
	0xea, 0x26, 0xa5, 0x0e, 0x37, 0xb9, 0xed, 0x50, 0xa6, 0xdb, 0xd4, 0x6a, 0xf9, 0x0d, 0xc2, 0xc2,
	0x7c, 0xb3, 0x7f, 0x5d, 0x92, 0xc6, 0x74, 0x6d, 0xbd, 0x4d, 0xb8, 0x19, 0x86, 0xa9, 0x5f, 0x12,
	0x20, 0x1b, 0xfe, 0xce, 0x0e, 0xf1, 0xd0, 0x5d, 0x90, 0xb6, 0x14, 0x69, 0x5e, 0x5a, 0xcc, 0xae,
	0xe4, 0x35, 0xd3, 0xb5, 0xb5, 0xad, 0x7d, 0x97, 0x6c, 0x10, 0x6e, 0x1a, 0x53, 0xc7, 0x9d, 0xd2,
	0xd8, 0x49, 0xa7, 0x24, 0x75, 0x3b, 0xa5, 0xf4, 0x92, 0x4d, 0x5b, 0x36, 0x25, 0xb8, 0xf7, 0x07,
	0x5a, 0x03, 0x69, 0x53, 0x49, 0x08, 0x5c, 0x41, 0xe0, 0x36, 0xeb, 0x6f, 0x89, 0xc5, 0x05, 0x72,
	0x66, 0x08, 0x99, 0x0d, 0xca, 0xf6, 0xd0, 0xc3, 0x07, 0x74, 0x07, 0x52, 0x35, 0x97, 0x58, 0x4a,
	0x52, 0x24, 0x99, 0xd2, 0x7a, 0x9b, 0x09, 0x1b, 0x0b, 0xae, 0x8c, 0x5c, 0x90, 0xa8, 0xdb, 0x29,
	0xa5, 0x98, 0x4b, 0x2c, 0x2c, 0xbe, 0xe8, 0x31, 0xc8, 0x35, 0x6e, 0x72, 0x9f, 0x29, 0x29, 0x01,
	0xfc, 0x63, 0x14, 0x28, 0x2e, 0x8d, 0x89, 0x08, 0x2a, 0x33, 0x71, 0xc6, 0x91, 0x7d, 0x38, 0x7b,
	0x7a, 0x50, 0x9c, 0x86, 0xac, 0xfe, 0x61, 0x53, 0xdb, 0x22, 0xd4, 0xa4, 0xfc, 0x23, 0x4a, 0xd7,
	0x05, 0x90, 0xa9, 0x0b, 0x00, 0x83, 0xe2, 0x48, 0x81, 0x74, 0xd9, 0xa1, 0xdc, 0xb4, 0xb8, 0xd8,
	0x4f, 0x06, 0xf7, 0x8e, 0xea, 0xd7, 0x04, 0xe4, 0x86, 0x8b, 0xa1, 0x16, 0x4c, 0xbe, 0x31, 0x5b,
	0x76, 0x43, 0x90, 0x82, 0x09, 0xf3, 0x5b, 0x11, 0xc6, 0x58, 0x3d, 0x3a, 0x2c, 0x2e, 0xd4, 0xb8,
	0x57, 0xa1, 0x7e, 0x7b, 0x71, 0x18, 0xa3, 0x0d, 0x00, 0xa1, 0xe3, 0x9f, 0x6e, 0xa7, 0xf4, 0xfb,
	0x5e, 0xdf, 0xf9, 0x9f, 0x27, 0xd2, 0xe0, 0xf3, 0x2e, 0xf4, 0x08, 0xe4, 0x8a, 0xe7, 0x39, 0x1e,
	0x53, 0x12, 0xf3, 0xc9, 0xc5, 0xec, 0x8a, 0xd2, 0xdf, 0xc0, 0x20, 0xa7, 0x08, 0x30, 0x20, 0x58,
	0x00, 0x11, 0xb1, 0x38, 0xb2, 0x48, 0x83, 0xf1, 0x2a, 0x27, 0x6d, 0xa6, 0x24, 0x05, 0x38, 0xdf,
	0x07, 0x07, 0x5e, 0x23, 0xd3, 0xed, 0x94, 0xc6, 0xed, 0xe0, 0x1e, 0x87, 0x46, 0xfd, 0x77, 0x78,
	0xb6, 0x68, 0xde, 0x2c, 0xa4, 0x6b, 0xdb, 0xe5, 0x72, 0xa5, 0x56, 0x9b, 0x1c, 0x43, 0x00, 0xf2,
	0xb3, 0xf5, 0xea, 0xab, 0xca, 0xd3, 0x49, 0x49, 0xfd, 0x94, 0x80, 0x6c, 0xb9, 0x45, 0x4c, 0x6f,
	0xdd, 0x0a, 0xc2, 0x6f, 0x51, 0x5d, 0xf7, 0x62, 0xea, 0x1a, 0x88, 0x44, 0x74, 0x87, 0xc9, 0x3b,
	0x9f, 0x30, 0x7e, 0xa1, 0xbe, 0x9e, 0x8c, 0xe8, 0x6b, 0x7a, 0x14, 0xca, 0x5c, 0x87, 0x32, 0x72,
	0xa9, 0xc0, 0xf2, 0xa7, 0x07, 0xc5, 0xcc, 0x40, 0x53, 0x6b, 0x90, 0x1b, 0x2e, 0x89, 0x96, 0x7b,
	0xeb, 0x97, 0xc4, 0xfa, 0x0b, 0xb1, 0xf5, 0x57, 0x1b, 0x17, 0x10, 0xf0, 0x4d, 0x82, 0x7c, 0xac,
	0x34, 0x7a, 0xd1, 0x6f, 0x31, 0x14, 0xd9, 0xf2, 0xd1, 0x61, 0x51, 0xed, 0x89, 0x2c, 0x16, 0x1a,
	0xf6, 0x3c, 0x10, 0xd8, 0x48, 0xb3, 0x48, 0x05, 0x19, 0x13, 0x93, 0x39, 0x54, 0x2c, 0x3b, 0x13,
	0x0a, 0xc6, 0x13, 0x1e, 0x1c, 0x59, 0x75, 0x21, 0xa2, 0xf4, 0x3a, 0xee, 0x3f, 0x27, 0x20, 0x57,
	0x76, 0xda, 0x6d, 0x9b, 0xdf, 0x3a, 0xf9, 0xf7, 0x63, 0xe4, 0x0f, 0x31, 0x28, 0xda, 0xbb, 0x8a,
	0xfd, 0xd5, 0x11, 0xf6, 0x67, 0xce, 0x61, 0x7f, 0x8d, 0xfe, 0x02, 0xe4, 0x63, 0x45, 0xd5, 0xef,
	0x12, 0x4c, 0xc4, 0x53, 0xa1, 0x97, 0x23, 0x74, 0xae, 0x1c, 0x1d, 0x16, 0xff, 0xec, 0xd3, 0x19,
	0x8b, 0x8d, 0xba, 0xb8, 0x19, 0xa1, 0x7f, 0xf7, 0x78, 0xba, 0x8e, 0x51, 0x07, 0x52, 0x81, 0x2a,
	0xd1, 0x03, 0x48, 0x54, 0x1b, 0x11, 0x93, 0xe7, 0x04, 0x7b, 0x35, 0x97, 0x4b, 0x20, 0x87, 0xec,
	0x45, 0x84, 0xfe, 0x26, 0x08, 0x5d, 0xa7, 0xfb, 0x61, 0x67, 0x8e, 0xb8, 0xc3, 0x91, 0x55, 0x9f,
	0x83, 0x1c, 0x66, 0x45, 0x45, 0x48, 0x6e, 0xe3, 0x6a, 0x34, 0x44, 0xba, 0xdb, 0x29, 0x25, 0x7d,
	0xcf, 0xc6, 0xc1, 0x27, 0x18, 0x71, 0x83, 0xf0, 0x5d, 0xa7, 0x21, 0xe8, 0x8d, 0x46, 0x6c, 0x0b,
	0x0f, 0x8e, 0xac, 0x4a, 0xa1, 0x30, 0xf2, 0x16, 0xde, 0x64, 0x88, 0xf9, 0xd8, 0x83, 0x9b, 0x09,
	0xff, 0x47, 0xc5, 0x73, 0x8a, 0x43, 0x63, 0xe4, 0x8e, 0xcf, 0xe6, 0xa4, 0x93, 0xb3, 0x39, 0xe9,
	0xc7, 0xd9, 0x9c, 0xf4, 0x7a, 0xac, 0x2e, 0x8b, 0xdf, 0xd9, 0xff, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0x22, 0x1b, 0x48, 0xef, 0x07, 0x00, 0x00,
}
