// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package staging is a auto generated package.
Input file: svc_staging.proto
*/
package staging

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareStagingV1Client add middleware to the client
type MiddlewareStagingV1Client func(ServiceStagingV1Client) ServiceStagingV1Client

// EndpointsStagingV1Client is the endpoints for the client
type EndpointsStagingV1Client struct {
	Client                        StagingV1Client
	AutoWatchSvcStagingV1Endpoint endpoint.Endpoint

	AutoAddBufferEndpoint    endpoint.Endpoint
	AutoDeleteBufferEndpoint endpoint.Endpoint
	AutoGetBufferEndpoint    endpoint.Endpoint
	AutoListBufferEndpoint   endpoint.Endpoint
	AutoUpdateBufferEndpoint endpoint.Endpoint
	ClearEndpoint            endpoint.Endpoint
	CommitEndpoint           endpoint.Endpoint
}

// EndpointsStagingV1RestClient is the REST client
type EndpointsStagingV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddBufferEndpoint         endpoint.Endpoint
	AutoDeleteBufferEndpoint      endpoint.Endpoint
	AutoGetBufferEndpoint         endpoint.Endpoint
	AutoListBufferEndpoint        endpoint.Endpoint
	AutoUpdateBufferEndpoint      endpoint.Endpoint
	AutoWatchBufferEndpoint       endpoint.Endpoint
	AutoWatchSvcStagingV1Endpoint endpoint.Endpoint
	ClearEndpoint                 endpoint.Endpoint
	CommitEndpoint                endpoint.Endpoint
}

// MiddlewareStagingV1Server adds middle ware to the server
type MiddlewareStagingV1Server func(ServiceStagingV1Server) ServiceStagingV1Server

// EndpointsStagingV1Server is the server endpoints
type EndpointsStagingV1Server struct {
	svcWatchHandlerStagingV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddBufferEndpoint    endpoint.Endpoint
	AutoDeleteBufferEndpoint endpoint.Endpoint
	AutoGetBufferEndpoint    endpoint.Endpoint
	AutoListBufferEndpoint   endpoint.Endpoint
	AutoUpdateBufferEndpoint endpoint.Endpoint
	ClearEndpoint            endpoint.Endpoint
	CommitEndpoint           endpoint.Endpoint

	watchHandlerBuffer func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddBuffer is endpoint for AutoAddBuffer
func (e EndpointsStagingV1Client) AutoAddBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	resp, err := e.AutoAddBufferEndpoint(ctx, in)
	if err != nil {
		return &Buffer{}, err
	}
	return resp.(*Buffer), nil
}

type respStagingV1AutoAddBuffer struct {
	V   Buffer
	Err error
}

// AutoDeleteBuffer is endpoint for AutoDeleteBuffer
func (e EndpointsStagingV1Client) AutoDeleteBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	resp, err := e.AutoDeleteBufferEndpoint(ctx, in)
	if err != nil {
		return &Buffer{}, err
	}
	return resp.(*Buffer), nil
}

type respStagingV1AutoDeleteBuffer struct {
	V   Buffer
	Err error
}

// AutoGetBuffer is endpoint for AutoGetBuffer
func (e EndpointsStagingV1Client) AutoGetBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	resp, err := e.AutoGetBufferEndpoint(ctx, in)
	if err != nil {
		return &Buffer{}, err
	}
	return resp.(*Buffer), nil
}

type respStagingV1AutoGetBuffer struct {
	V   Buffer
	Err error
}

// AutoListBuffer is endpoint for AutoListBuffer
func (e EndpointsStagingV1Client) AutoListBuffer(ctx context.Context, in *api.ListWatchOptions) (*BufferList, error) {
	resp, err := e.AutoListBufferEndpoint(ctx, in)
	if err != nil {
		return &BufferList{}, err
	}
	return resp.(*BufferList), nil
}

type respStagingV1AutoListBuffer struct {
	V   BufferList
	Err error
}

// AutoUpdateBuffer is endpoint for AutoUpdateBuffer
func (e EndpointsStagingV1Client) AutoUpdateBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	resp, err := e.AutoUpdateBufferEndpoint(ctx, in)
	if err != nil {
		return &Buffer{}, err
	}
	return resp.(*Buffer), nil
}

type respStagingV1AutoUpdateBuffer struct {
	V   Buffer
	Err error
}

// Clear is endpoint for Clear
func (e EndpointsStagingV1Client) Clear(ctx context.Context, in *ClearAction) (*ClearAction, error) {
	resp, err := e.ClearEndpoint(ctx, in)
	if err != nil {
		return &ClearAction{}, err
	}
	return resp.(*ClearAction), nil
}

type respStagingV1Clear struct {
	V   ClearAction
	Err error
}

// Commit is endpoint for Commit
func (e EndpointsStagingV1Client) Commit(ctx context.Context, in *CommitAction) (*CommitAction, error) {
	resp, err := e.CommitEndpoint(ctx, in)
	if err != nil {
		return &CommitAction{}, err
	}
	return resp.(*CommitAction), nil
}

type respStagingV1Commit struct {
	V   CommitAction
	Err error
}

func (e EndpointsStagingV1Client) AutoWatchSvcStagingV1(ctx context.Context, in *api.ListWatchOptions) (StagingV1_AutoWatchSvcStagingV1Client, error) {
	return e.Client.AutoWatchSvcStagingV1(ctx, in)
}

// AutoWatchBuffer performs Watch for Buffer
func (e EndpointsStagingV1Client) AutoWatchBuffer(ctx context.Context, in *api.ListWatchOptions) (StagingV1_AutoWatchBufferClient, error) {
	return e.Client.AutoWatchBuffer(ctx, in)
}

// AutoAddBuffer implementation on server Endpoint
func (e EndpointsStagingV1Server) AutoAddBuffer(ctx context.Context, in Buffer) (Buffer, error) {
	resp, err := e.AutoAddBufferEndpoint(ctx, in)
	if err != nil {
		return Buffer{}, err
	}
	return *resp.(*Buffer), nil
}

// MakeStagingV1AutoAddBufferEndpoint creates  AutoAddBuffer endpoints for the service
func MakeStagingV1AutoAddBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Buffer)
		v, err := s.AutoAddBuffer(ctx, *req)
		return respStagingV1AutoAddBuffer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:AutoAddBuffer")(f)
}

// AutoDeleteBuffer implementation on server Endpoint
func (e EndpointsStagingV1Server) AutoDeleteBuffer(ctx context.Context, in Buffer) (Buffer, error) {
	resp, err := e.AutoDeleteBufferEndpoint(ctx, in)
	if err != nil {
		return Buffer{}, err
	}
	return *resp.(*Buffer), nil
}

// MakeStagingV1AutoDeleteBufferEndpoint creates  AutoDeleteBuffer endpoints for the service
func MakeStagingV1AutoDeleteBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Buffer)
		v, err := s.AutoDeleteBuffer(ctx, *req)
		return respStagingV1AutoDeleteBuffer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:AutoDeleteBuffer")(f)
}

// AutoGetBuffer implementation on server Endpoint
func (e EndpointsStagingV1Server) AutoGetBuffer(ctx context.Context, in Buffer) (Buffer, error) {
	resp, err := e.AutoGetBufferEndpoint(ctx, in)
	if err != nil {
		return Buffer{}, err
	}
	return *resp.(*Buffer), nil
}

// MakeStagingV1AutoGetBufferEndpoint creates  AutoGetBuffer endpoints for the service
func MakeStagingV1AutoGetBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Buffer)
		v, err := s.AutoGetBuffer(ctx, *req)
		return respStagingV1AutoGetBuffer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:AutoGetBuffer")(f)
}

// AutoListBuffer implementation on server Endpoint
func (e EndpointsStagingV1Server) AutoListBuffer(ctx context.Context, in api.ListWatchOptions) (BufferList, error) {
	resp, err := e.AutoListBufferEndpoint(ctx, in)
	if err != nil {
		return BufferList{}, err
	}
	return *resp.(*BufferList), nil
}

// MakeStagingV1AutoListBufferEndpoint creates  AutoListBuffer endpoints for the service
func MakeStagingV1AutoListBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListBuffer(ctx, *req)
		return respStagingV1AutoListBuffer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:AutoListBuffer")(f)
}

// AutoUpdateBuffer implementation on server Endpoint
func (e EndpointsStagingV1Server) AutoUpdateBuffer(ctx context.Context, in Buffer) (Buffer, error) {
	resp, err := e.AutoUpdateBufferEndpoint(ctx, in)
	if err != nil {
		return Buffer{}, err
	}
	return *resp.(*Buffer), nil
}

// MakeStagingV1AutoUpdateBufferEndpoint creates  AutoUpdateBuffer endpoints for the service
func MakeStagingV1AutoUpdateBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Buffer)
		v, err := s.AutoUpdateBuffer(ctx, *req)
		return respStagingV1AutoUpdateBuffer{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:AutoUpdateBuffer")(f)
}

// Clear implementation on server Endpoint
func (e EndpointsStagingV1Server) Clear(ctx context.Context, in ClearAction) (ClearAction, error) {
	resp, err := e.ClearEndpoint(ctx, in)
	if err != nil {
		return ClearAction{}, err
	}
	return *resp.(*ClearAction), nil
}

// MakeStagingV1ClearEndpoint creates  Clear endpoints for the service
func MakeStagingV1ClearEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ClearAction)
		v, err := s.Clear(ctx, *req)
		return respStagingV1Clear{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:Clear")(f)
}

// Commit implementation on server Endpoint
func (e EndpointsStagingV1Server) Commit(ctx context.Context, in CommitAction) (CommitAction, error) {
	resp, err := e.CommitEndpoint(ctx, in)
	if err != nil {
		return CommitAction{}, err
	}
	return *resp.(*CommitAction), nil
}

// MakeStagingV1CommitEndpoint creates  Commit endpoints for the service
func MakeStagingV1CommitEndpoint(s ServiceStagingV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CommitAction)
		v, err := s.Commit(ctx, *req)
		return respStagingV1Commit{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StagingV1:Commit")(f)
}

func (e EndpointsStagingV1Server) AutoWatchSvcStagingV1(in *api.ListWatchOptions, stream StagingV1_AutoWatchSvcStagingV1Server) error {
	return e.svcWatchHandlerStagingV1(in, stream)
}

// MakeAutoWatchSvcStagingV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcStagingV1Endpoint(s ServiceStagingV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(StagingV1_AutoWatchSvcStagingV1Server)
		return s.AutoWatchSvcStagingV1(options, wstream)
	}
}

// AutoWatchBuffer is the watch handler for Buffer on the server side.
func (e EndpointsStagingV1Server) AutoWatchBuffer(in *api.ListWatchOptions, stream StagingV1_AutoWatchBufferServer) error {
	return e.watchHandlerBuffer(in, stream)
}

// MakeAutoWatchBufferEndpoint creates the Watch endpoint
func MakeAutoWatchBufferEndpoint(s ServiceStagingV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(StagingV1_AutoWatchBufferServer)
		return s.AutoWatchBuffer(options, wstream)
	}
}

// MakeStagingV1ServerEndpoints creates server endpoints
func MakeStagingV1ServerEndpoints(s ServiceStagingV1Server, logger log.Logger) EndpointsStagingV1Server {
	return EndpointsStagingV1Server{
		svcWatchHandlerStagingV1: MakeAutoWatchSvcStagingV1Endpoint(s, logger),

		AutoAddBufferEndpoint:    MakeStagingV1AutoAddBufferEndpoint(s, logger),
		AutoDeleteBufferEndpoint: MakeStagingV1AutoDeleteBufferEndpoint(s, logger),
		AutoGetBufferEndpoint:    MakeStagingV1AutoGetBufferEndpoint(s, logger),
		AutoListBufferEndpoint:   MakeStagingV1AutoListBufferEndpoint(s, logger),
		AutoUpdateBufferEndpoint: MakeStagingV1AutoUpdateBufferEndpoint(s, logger),
		ClearEndpoint:            MakeStagingV1ClearEndpoint(s, logger),
		CommitEndpoint:           MakeStagingV1CommitEndpoint(s, logger),

		watchHandlerBuffer: MakeAutoWatchBufferEndpoint(s, logger),
	}
}

// LoggingStagingV1MiddlewareClient adds middleware for the client
func LoggingStagingV1MiddlewareClient(logger log.Logger) MiddlewareStagingV1Client {
	return func(next ServiceStagingV1Client) ServiceStagingV1Client {
		return loggingStagingV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingStagingV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceStagingV1Client
}

// LoggingStagingV1MiddlewareServer adds middleware for the client
func LoggingStagingV1MiddlewareServer(logger log.Logger) MiddlewareStagingV1Server {
	return func(next ServiceStagingV1Server) ServiceStagingV1Server {
		return loggingStagingV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingStagingV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceStagingV1Server
}

func (m loggingStagingV1MiddlewareClient) AutoAddBuffer(ctx context.Context, in *Buffer) (resp *Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoAddBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) AutoDeleteBuffer(ctx context.Context, in *Buffer) (resp *Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoDeleteBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) AutoGetBuffer(ctx context.Context, in *Buffer) (resp *Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoGetBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) AutoListBuffer(ctx context.Context, in *api.ListWatchOptions) (resp *BufferList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoListBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) AutoUpdateBuffer(ctx context.Context, in *Buffer) (resp *Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoUpdateBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) Clear(ctx context.Context, in *ClearAction) (resp *ClearAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "Clear", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Clear(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareClient) Commit(ctx context.Context, in *CommitAction) (resp *CommitAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "Commit", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Commit(ctx, in)
	return
}

func (m loggingStagingV1MiddlewareClient) AutoWatchSvcStagingV1(ctx context.Context, in *api.ListWatchOptions) (resp StagingV1_AutoWatchSvcStagingV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoWatchSvcStagingV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcStagingV1(ctx, in)
	return
}

func (m loggingStagingV1MiddlewareClient) AutoWatchBuffer(ctx context.Context, in *api.ListWatchOptions) (resp StagingV1_AutoWatchBufferClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoWatchBuffer", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchBuffer(ctx, in)
	return
}

func (m loggingStagingV1MiddlewareServer) AutoAddBuffer(ctx context.Context, in Buffer) (resp Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoAddBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) AutoDeleteBuffer(ctx context.Context, in Buffer) (resp Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoDeleteBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) AutoGetBuffer(ctx context.Context, in Buffer) (resp Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoGetBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) AutoListBuffer(ctx context.Context, in api.ListWatchOptions) (resp BufferList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoListBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) AutoUpdateBuffer(ctx context.Context, in Buffer) (resp Buffer, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "AutoUpdateBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateBuffer(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) Clear(ctx context.Context, in ClearAction) (resp ClearAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "Clear", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Clear(ctx, in)
	return
}
func (m loggingStagingV1MiddlewareServer) Commit(ctx context.Context, in CommitAction) (resp CommitAction, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StagingV1", "method", "Commit", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Commit(ctx, in)
	return
}

func (m loggingStagingV1MiddlewareServer) AutoWatchSvcStagingV1(in *api.ListWatchOptions, stream StagingV1_AutoWatchSvcStagingV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "StagingV1", "method", "AutoWatchSvcStagingV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcStagingV1(in, stream)
	return
}

func (m loggingStagingV1MiddlewareServer) AutoWatchBuffer(in *api.ListWatchOptions, stream StagingV1_AutoWatchBufferServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "StagingV1", "method", "AutoWatchBuffer", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchBuffer(in, stream)
	return
}

func (r *EndpointsStagingV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsStagingV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIStagingV1AutoAddBufferCreateOper(in *Buffer) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers")
}

//
func makeURIStagingV1AutoDeleteBufferDeleteOper(in *Buffer) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers/", in.Name)
}

//
func makeURIStagingV1AutoGetBufferGetOper(in *Buffer) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers/", in.Name)
}

//
func makeURIStagingV1AutoListBufferListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers")
}

//
func makeURIStagingV1AutoUpdateBufferUpdateOper(in *Buffer) string {
	return ""

}

//
func makeURIStagingV1AutoWatchBufferWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIStagingV1AutoWatchSvcStagingV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIStagingV1ClearCreateOper(in *ClearAction) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers/", in.Name, "/clear")
}

//
func makeURIStagingV1CommitCreateOper(in *CommitAction) string {
	return fmt.Sprint("/configs/staging/v1", "/tenant/", in.Tenant, "/buffers/", in.Name, "/commit")
}

// AutoAddBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoAddBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	path := makeURIStagingV1AutoAddBufferCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespStagingV1AutoAddBuffer(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Buffer), nil
}

// AutoUpdateBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoUpdateBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	return nil, errors.New("not allowed")
}

// AutoGetBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoGetBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	path := makeURIStagingV1AutoGetBufferGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespStagingV1AutoGetBuffer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Buffer), err
}

// AutoDeleteBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoDeleteBuffer(ctx context.Context, in *Buffer) (*Buffer, error) {
	path := makeURIStagingV1AutoDeleteBufferDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespStagingV1AutoDeleteBuffer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Buffer), err
}

// AutoListBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoListBuffer(ctx context.Context, options *api.ListWatchOptions) (*BufferList, error) {
	path := makeURIStagingV1AutoListBufferListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespStagingV1AutoListBuffer(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*BufferList), err
}

// AutoWatchBuffer CRUD method for Buffer
func (r *EndpointsStagingV1RestClient) AutoWatchBuffer(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIStagingV1AutoWatchBufferWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgBufferWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsStagingV1RestClient) CommitBuffer(ctx context.Context, in *CommitAction) (*CommitAction, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIStagingV1CommitCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespStagingV1Commit(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CommitAction), err
}

func (r *EndpointsStagingV1RestClient) ClearBuffer(ctx context.Context, in *ClearAction) (*ClearAction, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIStagingV1ClearCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespStagingV1Clear(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ClearAction), err
}

// MakeStagingV1RestClientEndpoints make REST client endpoints
func MakeStagingV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsStagingV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsStagingV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeStagingV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeStagingV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsStagingV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsStagingV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
