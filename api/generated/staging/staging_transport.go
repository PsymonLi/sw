// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package staging is a auto generated package.
Input file: staging.proto
*/
package staging

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPBuffer(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBuffer(_ context.Context, r *http.Request) (interface{}, error) {
	var req Buffer
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBuffer encodes GRPC request
func EncodeGrpcReqBuffer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Buffer)
	return req, nil
}

// DecodeGrpcReqBuffer decodes GRPC request
func DecodeGrpcReqBuffer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Buffer)
	return req, nil
}

// EncodeGrpcRespBuffer encodes GRC response
func EncodeGrpcRespBuffer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBuffer decodes GRPC response
func DecodeGrpcRespBuffer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBufferSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBufferSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req BufferSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBufferSpec encodes GRPC request
func EncodeGrpcReqBufferSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferSpec)
	return req, nil
}

// DecodeGrpcReqBufferSpec decodes GRPC request
func DecodeGrpcReqBufferSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferSpec)
	return req, nil
}

// EncodeGrpcRespBufferSpec encodes GRC response
func EncodeGrpcRespBufferSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBufferSpec decodes GRPC response
func DecodeGrpcRespBufferSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPBufferStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBufferStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req BufferStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBufferStatus encodes GRPC request
func EncodeGrpcReqBufferStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferStatus)
	return req, nil
}

// DecodeGrpcReqBufferStatus decodes GRPC request
func DecodeGrpcReqBufferStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferStatus)
	return req, nil
}

// EncodeGrpcRespBufferStatus encodes GRC response
func EncodeGrpcRespBufferStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBufferStatus decodes GRPC response
func DecodeGrpcRespBufferStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClearAction(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClearAction(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClearAction
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClearAction encodes GRPC request
func EncodeGrpcReqClearAction(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearAction)
	return req, nil
}

// DecodeGrpcReqClearAction decodes GRPC request
func DecodeGrpcReqClearAction(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearAction)
	return req, nil
}

// EncodeGrpcRespClearAction encodes GRC response
func EncodeGrpcRespClearAction(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClearAction decodes GRPC response
func DecodeGrpcRespClearAction(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClearActionSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClearActionSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClearActionSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClearActionSpec encodes GRPC request
func EncodeGrpcReqClearActionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearActionSpec)
	return req, nil
}

// DecodeGrpcReqClearActionSpec decodes GRPC request
func DecodeGrpcReqClearActionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearActionSpec)
	return req, nil
}

// EncodeGrpcRespClearActionSpec encodes GRC response
func EncodeGrpcRespClearActionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClearActionSpec decodes GRPC response
func DecodeGrpcRespClearActionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClearActionStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClearActionStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClearActionStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClearActionStatus encodes GRPC request
func EncodeGrpcReqClearActionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearActionStatus)
	return req, nil
}

// DecodeGrpcReqClearActionStatus decodes GRPC request
func DecodeGrpcReqClearActionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClearActionStatus)
	return req, nil
}

// EncodeGrpcRespClearActionStatus encodes GRC response
func EncodeGrpcRespClearActionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClearActionStatus decodes GRPC response
func DecodeGrpcRespClearActionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCommitAction(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCommitAction(_ context.Context, r *http.Request) (interface{}, error) {
	var req CommitAction
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCommitAction encodes GRPC request
func EncodeGrpcReqCommitAction(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitAction)
	return req, nil
}

// DecodeGrpcReqCommitAction decodes GRPC request
func DecodeGrpcReqCommitAction(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitAction)
	return req, nil
}

// EncodeGrpcRespCommitAction encodes GRC response
func EncodeGrpcRespCommitAction(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCommitAction decodes GRPC response
func DecodeGrpcRespCommitAction(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCommitActionSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCommitActionSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CommitActionSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCommitActionSpec encodes GRPC request
func EncodeGrpcReqCommitActionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitActionSpec)
	return req, nil
}

// DecodeGrpcReqCommitActionSpec decodes GRPC request
func DecodeGrpcReqCommitActionSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitActionSpec)
	return req, nil
}

// EncodeGrpcRespCommitActionSpec encodes GRC response
func EncodeGrpcRespCommitActionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCommitActionSpec decodes GRPC response
func DecodeGrpcRespCommitActionSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCommitActionStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCommitActionStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CommitActionStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCommitActionStatus encodes GRPC request
func EncodeGrpcReqCommitActionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitActionStatus)
	return req, nil
}

// DecodeGrpcReqCommitActionStatus decodes GRPC request
func DecodeGrpcReqCommitActionStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CommitActionStatus)
	return req, nil
}

// EncodeGrpcRespCommitActionStatus encodes GRC response
func EncodeGrpcRespCommitActionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCommitActionStatus decodes GRPC response
func DecodeGrpcRespCommitActionStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPItem(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPItem(_ context.Context, r *http.Request) (interface{}, error) {
	var req Item
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqItem encodes GRPC request
func EncodeGrpcReqItem(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Item)
	return req, nil
}

// DecodeGrpcReqItem decodes GRPC request
func DecodeGrpcReqItem(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Item)
	return req, nil
}

// EncodeGrpcRespItem encodes GRC response
func EncodeGrpcRespItem(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespItem decodes GRPC response
func DecodeGrpcRespItem(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPItemId(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPItemId(_ context.Context, r *http.Request) (interface{}, error) {
	var req ItemId
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqItemId encodes GRPC request
func EncodeGrpcReqItemId(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ItemId)
	return req, nil
}

// DecodeGrpcReqItemId decodes GRPC request
func DecodeGrpcReqItemId(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ItemId)
	return req, nil
}

// EncodeGrpcRespItemId encodes GRC response
func EncodeGrpcRespItemId(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespItemId decodes GRPC response
func DecodeGrpcRespItemId(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPValidationError(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPValidationError(_ context.Context, r *http.Request) (interface{}, error) {
	var req ValidationError
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqValidationError encodes GRPC request
func EncodeGrpcReqValidationError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ValidationError)
	return req, nil
}

// DecodeGrpcReqValidationError decodes GRPC request
func DecodeGrpcReqValidationError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ValidationError)
	return req, nil
}

// EncodeGrpcRespValidationError encodes GRC response
func EncodeGrpcRespValidationError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespValidationError decodes GRPC response
func DecodeGrpcRespValidationError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
