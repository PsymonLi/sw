// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package staging is a auto generated package.
Input file: svc_staging.proto
*/
package staging

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerStagingV1 struct {
	Endpoints EndpointsStagingV1Server

	AutoAddBufferHdlr    grpctransport.Handler
	AutoDeleteBufferHdlr grpctransport.Handler
	AutoGetBufferHdlr    grpctransport.Handler
	AutoListBufferHdlr   grpctransport.Handler
	AutoUpdateBufferHdlr grpctransport.Handler
	ClearHdlr            grpctransport.Handler
	CommitHdlr           grpctransport.Handler
}

// MakeGRPCServerStagingV1 creates a GRPC server for StagingV1 service
func MakeGRPCServerStagingV1(ctx context.Context, endpoints EndpointsStagingV1Server, logger log.Logger) StagingV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerStagingV1{
		Endpoints: endpoints,
		AutoAddBufferHdlr: grpctransport.NewServer(
			endpoints.AutoAddBufferEndpoint,
			DecodeGrpcReqBuffer,
			EncodeGrpcRespBuffer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddBuffer", logger)))...,
		),

		AutoDeleteBufferHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteBufferEndpoint,
			DecodeGrpcReqBuffer,
			EncodeGrpcRespBuffer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteBuffer", logger)))...,
		),

		AutoGetBufferHdlr: grpctransport.NewServer(
			endpoints.AutoGetBufferEndpoint,
			DecodeGrpcReqBuffer,
			EncodeGrpcRespBuffer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetBuffer", logger)))...,
		),

		AutoListBufferHdlr: grpctransport.NewServer(
			endpoints.AutoListBufferEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespBufferList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListBuffer", logger)))...,
		),

		AutoUpdateBufferHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateBufferEndpoint,
			DecodeGrpcReqBuffer,
			EncodeGrpcRespBuffer,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateBuffer", logger)))...,
		),

		ClearHdlr: grpctransport.NewServer(
			endpoints.ClearEndpoint,
			DecodeGrpcReqClearAction,
			EncodeGrpcRespClearAction,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Clear", logger)))...,
		),

		CommitHdlr: grpctransport.NewServer(
			endpoints.CommitEndpoint,
			DecodeGrpcReqCommitAction,
			EncodeGrpcRespCommitAction,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Commit", logger)))...,
		),
	}
}

func (s *grpcServerStagingV1) AutoAddBuffer(ctx oldcontext.Context, req *Buffer) (*Buffer, error) {
	_, resp, err := s.AutoAddBufferHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1AutoAddBuffer).V
	return &r, resp.(respStagingV1AutoAddBuffer).Err
}

func decodeHTTPrespStagingV1AutoAddBuffer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Buffer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) AutoDeleteBuffer(ctx oldcontext.Context, req *Buffer) (*Buffer, error) {
	_, resp, err := s.AutoDeleteBufferHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1AutoDeleteBuffer).V
	return &r, resp.(respStagingV1AutoDeleteBuffer).Err
}

func decodeHTTPrespStagingV1AutoDeleteBuffer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Buffer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) AutoGetBuffer(ctx oldcontext.Context, req *Buffer) (*Buffer, error) {
	_, resp, err := s.AutoGetBufferHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1AutoGetBuffer).V
	return &r, resp.(respStagingV1AutoGetBuffer).Err
}

func decodeHTTPrespStagingV1AutoGetBuffer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Buffer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) AutoListBuffer(ctx oldcontext.Context, req *api.ListWatchOptions) (*BufferList, error) {
	_, resp, err := s.AutoListBufferHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1AutoListBuffer).V
	return &r, resp.(respStagingV1AutoListBuffer).Err
}

func decodeHTTPrespStagingV1AutoListBuffer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp BufferList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) AutoUpdateBuffer(ctx oldcontext.Context, req *Buffer) (*Buffer, error) {
	_, resp, err := s.AutoUpdateBufferHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1AutoUpdateBuffer).V
	return &r, resp.(respStagingV1AutoUpdateBuffer).Err
}

func decodeHTTPrespStagingV1AutoUpdateBuffer(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Buffer
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) Clear(ctx oldcontext.Context, req *ClearAction) (*ClearAction, error) {
	_, resp, err := s.ClearHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1Clear).V
	return &r, resp.(respStagingV1Clear).Err
}

func decodeHTTPrespStagingV1Clear(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ClearAction
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) Commit(ctx oldcontext.Context, req *CommitAction) (*CommitAction, error) {
	_, resp, err := s.CommitHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStagingV1Commit).V
	return &r, resp.(respStagingV1Commit).Err
}

func decodeHTTPrespStagingV1Commit(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CommitAction
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStagingV1) AutoWatchSvcStagingV1(in *api.ListWatchOptions, stream StagingV1_AutoWatchSvcStagingV1Server) error {
	return s.Endpoints.AutoWatchSvcStagingV1(in, stream)
}

func (s *grpcServerStagingV1) AutoWatchBuffer(in *api.ListWatchOptions, stream StagingV1_AutoWatchBufferServer) error {
	return s.Endpoints.AutoWatchBuffer(in, stream)
}

func encodeHTTPBufferList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPBufferList(_ context.Context, r *http.Request) (interface{}, error) {
	var req BufferList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqBufferList encodes GRPC request
func EncodeGrpcReqBufferList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferList)
	return req, nil
}

// DecodeGrpcReqBufferList decodes GRPC request
func DecodeGrpcReqBufferList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*BufferList)
	return req, nil
}

// EncodeGrpcRespBufferList endodes the GRPC response
func EncodeGrpcRespBufferList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespBufferList decodes the GRPC response
func DecodeGrpcRespBufferList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
