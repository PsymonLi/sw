// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package stagingApiServer is a auto generated package.
Input file: svc_staging.proto
*/
package stagingApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	staging "github.com/pensando/sw/api/generated/staging"
	fieldhooks "github.com/pensando/sw/api/hooks/apiserver/fields"
	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer
var _ fieldhooks.Dummy

type sstagingSvc_stagingBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsStagingV1 *eStagingV1Endpoints
}

type eStagingV1Endpoints struct {
	Svc                     sstagingSvc_stagingBackend
	fnAutoWatchSvcStagingV1 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnAutoAddBuffer    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteBuffer func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetBuffer    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoLabelBuffer  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListBuffer   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateBuffer func(ctx context.Context, t interface{}) (interface{}, error)
	fnClear            func(ctx context.Context, t interface{}) (interface{}, error)
	fnCommit           func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchBuffer func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *sstagingSvc_stagingBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for sstagingSvc_stagingBackend")
	s.Messages = map[string]apiserver.Message{

		"staging.AutoMsgBufferWatchHelper": apisrvpkg.NewMessage("staging.AutoMsgBufferWatchHelper"),
		"staging.BufferList": apisrvpkg.NewMessage("staging.BufferList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := staging.BufferList{}
			into.Kind = "BufferList"
			r := staging.Buffer{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)

			if options.Tenant == "" {
				if strings.HasSuffix(key, "//") {
					key = key[:len(key)-1]
				}
			}

			ctx = apiutils.SetVar(ctx, "ObjKind", "staging.Buffer")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "err", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(staging.BufferList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(staging.BufferList)
			return &r
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
		// Add a message handler for Label options
		"api.Label": apisrvpkg.NewMessage("api.Label").WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(api.Label)
			return &r
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(api.Label)
			r.APIVersion = version
			return r
		}),
	}

	apisrv.RegisterMessages("staging", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *sstagingSvc_stagingBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("staging.StagingV1")
		s.endpointsStagingV1.fnAutoWatchSvcStagingV1 = srv.WatchFromKv

		s.endpointsStagingV1.fnAutoAddBuffer = srv.AddMethod("AutoAddBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.Buffer"], pkgMessages["staging.Buffer"], "staging", "AutoAddBuffer")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(staging.Buffer)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoDeleteBuffer = srv.AddMethod("AutoDeleteBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.Buffer"], pkgMessages["staging.Buffer"], "staging", "AutoDeleteBuffer")).WithOper(apiintf.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(staging.Buffer)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoGetBuffer = srv.AddMethod("AutoGetBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.Buffer"], pkgMessages["staging.Buffer"], "staging", "AutoGetBuffer")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(staging.Buffer)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoLabelBuffer = srv.AddMethod("AutoLabelBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["api.Label"], pkgMessages["staging.Buffer"], "staging", "AutoLabelBuffer")).WithOper(apiintf.LabelOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).WithMethDbKey(func(i interface{}, prefix string) (string, error) {
			new := staging.Buffer{}
			if i == nil {
				return new.MakeKey(prefix), nil
			}
			in, ok := i.(api.Label)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			new.ObjectMeta = in.ObjectMeta
			return new.MakeKey(prefix), nil
		}).WithResponseWriter(func(ctx context.Context, kvs kvstore.Interface, prefix string, in, old, resp interface{}, oper apiintf.APIOperType) (interface{}, error) {
			label, ok := resp.(api.Label)
			if !ok {
				return "", fmt.Errorf("Expected type to be api.Label")
			}
			cur := staging.Buffer{}
			cur.ObjectMeta = label.ObjectMeta
			key := cur.MakeKey(prefix)
			if err := kvs.Get(ctx, key, &cur); err != nil {
				return nil, err
			}
			return cur, nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoListBuffer = srv.AddMethod("AutoListBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["staging.BufferList"], "staging", "AutoListBuffer")).WithOper(apiintf.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoUpdateBuffer = srv.AddMethod("AutoUpdateBuffer",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.Buffer"], pkgMessages["staging.Buffer"], "staging", "AutoUpdateBuffer")).WithOper(apiintf.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsStagingV1.fnClear = srv.AddMethod("Clear",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.ClearAction"], pkgMessages["staging.ClearAction"], "staging", "Clear")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(staging.ClearAction)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnCommit = srv.AddMethod("Commit",
			apisrvpkg.NewMethod(srv, pkgMessages["staging.CommitAction"], pkgMessages["staging.CommitAction"], "staging", "Commit")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(staging.CommitAction)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "staging/v1/tenant/", in.Tenant, "/buffers/", in.Name), nil
		}).HandleInvocation

		s.endpointsStagingV1.fnAutoWatchBuffer = pkgMessages["staging.Buffer"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"staging.StagingV1": srv,
		}
		apisrv.RegisterService("staging.StagingV1", srv)
		endpoints := staging.MakeStagingV1ServerEndpoints(s.endpointsStagingV1, logger)
		server := staging.MakeGRPCServerStagingV1(ctx, endpoints, logger)
		staging.RegisterStagingV1Server(grpcserver.GrpcServer, server)
		svcObjs := []string{"Buffer"}
		fieldhooks.RegisterImmutableFieldsServiceHooks("staging", "StagingV1", svcObjs)
	}
}

func (s *sstagingSvc_stagingBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		// Service watcher
		svc := s.Services["staging.StagingV1"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				key := globals.ConfigRootPrefix + "/staging"
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				defer cancel()
				watcher, err := kvs.WatchFiltered(nctx, key, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "err", err, "service", "StagingV1")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		pkgMessages["staging.Buffer"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := staging.Buffer{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			if strings.HasSuffix(key, "//Singleton") {
				key = strings.TrimSuffix(key, "/Singleton")
			}
			wstream := stream.(staging.StagingV1_AutoWatchBufferServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "staging.Buffer")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "staging.Buffer")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "err", err, "WatcherID", id, "bbject", "staging.Buffer")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &staging.AutoMsgBufferWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "err", err, "WatcherID", id, "bbject", "staging.Buffer")
					return err
				}
				events = &staging.AutoMsgBufferWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "staging.Buffer")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "staging.Buffer")
						return nil
					}
					evin, ok := ev.Object.(*staging.Buffer)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*staging.Buffer)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "staging")

					strEvent := &staging.AutoMsgBufferWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Buffer watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Buffer", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "staging.Buffer")
							break
						}
						strEvent.Object = i.(*staging.Buffer)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "staging.Buffer")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *sstagingSvc_stagingBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *sstagingSvc_stagingBackend) Reset() {
	cleanupRegistration()
}

func (e *eStagingV1Endpoints) AutoAddBuffer(ctx context.Context, t staging.Buffer) (staging.Buffer, error) {
	r, err := e.fnAutoAddBuffer(ctx, t)
	if err == nil {
		return r.(staging.Buffer), err
	}
	return staging.Buffer{}, err

}
func (e *eStagingV1Endpoints) AutoDeleteBuffer(ctx context.Context, t staging.Buffer) (staging.Buffer, error) {
	r, err := e.fnAutoDeleteBuffer(ctx, t)
	if err == nil {
		return r.(staging.Buffer), err
	}
	return staging.Buffer{}, err

}
func (e *eStagingV1Endpoints) AutoGetBuffer(ctx context.Context, t staging.Buffer) (staging.Buffer, error) {
	r, err := e.fnAutoGetBuffer(ctx, t)
	if err == nil {
		return r.(staging.Buffer), err
	}
	return staging.Buffer{}, err

}
func (e *eStagingV1Endpoints) AutoLabelBuffer(ctx context.Context, t api.Label) (staging.Buffer, error) {
	r, err := e.fnAutoLabelBuffer(ctx, t)
	if err == nil {
		return r.(staging.Buffer), err
	}
	return staging.Buffer{}, err

}
func (e *eStagingV1Endpoints) AutoListBuffer(ctx context.Context, t api.ListWatchOptions) (staging.BufferList, error) {
	r, err := e.fnAutoListBuffer(ctx, t)
	if err == nil {
		return r.(staging.BufferList), err
	}
	return staging.BufferList{}, err

}
func (e *eStagingV1Endpoints) AutoUpdateBuffer(ctx context.Context, t staging.Buffer) (staging.Buffer, error) {
	r, err := e.fnAutoUpdateBuffer(ctx, t)
	if err == nil {
		return r.(staging.Buffer), err
	}
	return staging.Buffer{}, err

}
func (e *eStagingV1Endpoints) Clear(ctx context.Context, t staging.ClearAction) (staging.ClearAction, error) {
	r, err := e.fnClear(ctx, t)
	if err == nil {
		return r.(staging.ClearAction), err
	}
	return staging.ClearAction{}, err

}
func (e *eStagingV1Endpoints) Commit(ctx context.Context, t staging.CommitAction) (staging.CommitAction, error) {
	r, err := e.fnCommit(ctx, t)
	if err == nil {
		return r.(staging.CommitAction), err
	}
	return staging.CommitAction{}, err

}

func (e *eStagingV1Endpoints) AutoWatchBuffer(in *api.ListWatchOptions, stream staging.StagingV1_AutoWatchBufferServer) error {
	return e.fnAutoWatchBuffer(in, stream, "staging")
}
func (e *eStagingV1Endpoints) AutoWatchSvcStagingV1(in *api.ListWatchOptions, stream staging.StagingV1_AutoWatchSvcStagingV1Server) error {
	return e.fnAutoWatchSvcStagingV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := sstagingSvc_stagingBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eStagingV1Endpoints{Svc: svc}
		svc.endpointsStagingV1 = &e
	}
	apisrv.Register("staging.svc_staging.proto", &svc)
}
