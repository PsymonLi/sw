// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package staging is a auto generated package.
Input file: staging.proto
*/
package staging

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapStaging = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Buffer) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "buffers/", m.Tenant, "/", m.Name)
}

func (m *Buffer) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/buffers/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *ClearAction) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "buffers/", m.Tenant, "/", m.Name)
}

func (m *ClearAction) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/buffers/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *CommitAction) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "buffers/", m.Tenant, "/", m.Name)
}

func (m *CommitAction) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/buffers/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Buffer) Clone(into interface{}) (interface{}, error) {
	var out *Buffer
	var ok bool
	if into == nil {
		out = &Buffer{}
	} else {
		out, ok = into.(*Buffer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Buffer) Defaults(ver string) bool {
	m.Kind = "Buffer"
	m.Tenant, m.Namespace = "default", "default"
	var ret bool
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *BufferSpec) Clone(into interface{}) (interface{}, error) {
	var out *BufferSpec
	var ok bool
	if into == nil {
		out = &BufferSpec{}
	} else {
		out, ok = into.(*BufferSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BufferSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *BufferStatus) Clone(into interface{}) (interface{}, error) {
	var out *BufferStatus
	var ok bool
	if into == nil {
		out = &BufferStatus{}
	} else {
		out, ok = into.(*BufferStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *BufferStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.ValidationResult = "SUCCESS"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ClearAction) Clone(into interface{}) (interface{}, error) {
	var out *ClearAction
	var ok bool
	if into == nil {
		out = &ClearAction{}
	} else {
		out, ok = into.(*ClearAction)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClearAction) Defaults(ver string) bool {
	m.Kind = "ClearAction"
	m.Tenant, m.Namespace = "default", "default"
	var ret bool
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ClearRequest) Clone(into interface{}) (interface{}, error) {
	var out *ClearRequest
	var ok bool
	if into == nil {
		out = &ClearRequest{}
	} else {
		out, ok = into.(*ClearRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClearRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ClearResponse) Clone(into interface{}) (interface{}, error) {
	var out *ClearResponse
	var ok bool
	if into == nil {
		out = &ClearResponse{}
	} else {
		out, ok = into.(*ClearResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ClearResponse) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "SUCCESS"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CommitAction) Clone(into interface{}) (interface{}, error) {
	var out *CommitAction
	var ok bool
	if into == nil {
		out = &CommitAction{}
	} else {
		out, ok = into.(*CommitAction)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CommitAction) Defaults(ver string) bool {
	m.Kind = "CommitAction"
	m.Tenant, m.Namespace = "default", "default"
	var ret bool
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CommitRequest) Clone(into interface{}) (interface{}, error) {
	var out *CommitRequest
	var ok bool
	if into == nil {
		out = &CommitRequest{}
	} else {
		out, ok = into.(*CommitRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CommitRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CommitResponse) Clone(into interface{}) (interface{}, error) {
	var out *CommitResponse
	var ok bool
	if into == nil {
		out = &CommitResponse{}
	} else {
		out, ok = into.(*CommitResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CommitResponse) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "SUCCESS"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Item) Clone(into interface{}) (interface{}, error) {
	var out *Item
	var ok bool
	if into == nil {
		out = &Item{}
	} else {
		out, ok = into.(*Item)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Item) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ItemId) Clone(into interface{}) (interface{}, error) {
	var out *ItemId
	var ok bool
	if into == nil {
		out = &ItemId{}
	} else {
		out, ok = into.(*ItemId)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ItemId) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ValidationError) Clone(into interface{}) (interface{}, error) {
	var out *ValidationError
	var ok bool
	if into == nil {
		out = &ValidationError{}
	} else {
		out, ok = into.(*ValidationError)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ValidationError) Defaults(ver string) bool {
	return false
}

// Validators

func (m *Buffer) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *BufferSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *BufferStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapStaging["BufferStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapStaging["BufferStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ClearAction) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ClearRequest) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ClearResponse) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapStaging["ClearResponse"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapStaging["ClearResponse"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *CommitAction) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		ret = m.ObjectMeta.Validate(ver, path+dlmtr+"ObjectMeta", ignoreStatus)
	}
	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *CommitRequest) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *CommitResponse) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapStaging["CommitResponse"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapStaging["CommitResponse"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *Item) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ItemId) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *ValidationError) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Buffer{},
		&ClearAction{},
		&CommitAction{},
	)

	validatorMapStaging = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapStaging["BufferStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapStaging["BufferStatus"]["all"] = append(validatorMapStaging["BufferStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*BufferStatus)

		if _, ok := BufferStatus_ValidationStatus_value[m.ValidationResult]; !ok {
			return errors.New("BufferStatus.ValidationResult did not match allowed strings")
		}
		return nil
	})

	validatorMapStaging["ClearResponse"] = make(map[string][]func(string, interface{}) error)
	validatorMapStaging["ClearResponse"]["all"] = append(validatorMapStaging["ClearResponse"]["all"], func(path string, i interface{}) error {
		m := i.(*ClearResponse)

		if _, ok := ClearResponse_ClearStatus_value[m.Status]; !ok {
			return errors.New("ClearResponse.Status did not match allowed strings")
		}
		return nil
	})

	validatorMapStaging["CommitResponse"] = make(map[string][]func(string, interface{}) error)
	validatorMapStaging["CommitResponse"]["all"] = append(validatorMapStaging["CommitResponse"]["all"], func(path string, i interface{}) error {
		m := i.(*CommitResponse)

		if _, ok := CommitResponse_CommitStatus_value[m.Status]; !ok {
			return errors.New("CommitResponse.Status did not match allowed strings")
		}
		return nil
	})

}
