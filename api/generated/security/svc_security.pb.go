// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_security.proto

package security

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/labels"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AppList is a container object for list of App objects
type AppList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of App objects
	Items []*App `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *AppList) Reset()                    { *m = AppList{} }
func (m *AppList) String() string            { return proto.CompactTextString(m) }
func (*AppList) ProtoMessage()               {}
func (*AppList) Descriptor() ([]byte, []int) { return fileDescriptorSvcSecurity, []int{0} }

func (m *AppList) GetItems() []*App {
	if m != nil {
		return m.Items
	}
	return nil
}

// AutoMsgAppWatchHelper is a wrapper object for watch events for App objects
type AutoMsgAppWatchHelper struct {
	Events []*AutoMsgAppWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgAppWatchHelper) Reset()                    { *m = AutoMsgAppWatchHelper{} }
func (m *AutoMsgAppWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgAppWatchHelper) ProtoMessage()               {}
func (*AutoMsgAppWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorSvcSecurity, []int{1} }

func (m *AutoMsgAppWatchHelper) GetEvents() []*AutoMsgAppWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAppWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *App   `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgAppWatchHelper_WatchEvent) Reset()         { *m = AutoMsgAppWatchHelper_WatchEvent{} }
func (m *AutoMsgAppWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAppWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgAppWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{1, 0}
}

func (m *AutoMsgAppWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAppWatchHelper_WatchEvent) GetObject() *App {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgCertificateWatchHelper is a wrapper object for watch events for Certificate objects
type AutoMsgCertificateWatchHelper struct {
	Events []*AutoMsgCertificateWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgCertificateWatchHelper) Reset()         { *m = AutoMsgCertificateWatchHelper{} }
func (m *AutoMsgCertificateWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCertificateWatchHelper) ProtoMessage()    {}
func (*AutoMsgCertificateWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{2}
}

func (m *AutoMsgCertificateWatchHelper) GetEvents() []*AutoMsgCertificateWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgCertificateWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Certificate `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgCertificateWatchHelper_WatchEvent{}
}
func (m *AutoMsgCertificateWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCertificateWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgCertificateWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{2, 0}
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) GetObject() *Certificate {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgSGPolicyWatchHelper is a wrapper object for watch events for SGPolicy objects
type AutoMsgSGPolicyWatchHelper struct {
	Events []*AutoMsgSGPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgSGPolicyWatchHelper) Reset()         { *m = AutoMsgSGPolicyWatchHelper{} }
func (m *AutoMsgSGPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSGPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgSGPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{3}
}

func (m *AutoMsgSGPolicyWatchHelper) GetEvents() []*AutoMsgSGPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgSGPolicyWatchHelper_WatchEvent struct {
	Type   string    `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *SGPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) Reset()         { *m = AutoMsgSGPolicyWatchHelper_WatchEvent{} }
func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSGPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgSGPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{3, 0}
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) GetObject() *SGPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgSecurityGroupWatchHelper is a wrapper object for watch events for SecurityGroup objects
type AutoMsgSecurityGroupWatchHelper struct {
	Events []*AutoMsgSecurityGroupWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgSecurityGroupWatchHelper) Reset()         { *m = AutoMsgSecurityGroupWatchHelper{} }
func (m *AutoMsgSecurityGroupWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgSecurityGroupWatchHelper) ProtoMessage()    {}
func (*AutoMsgSecurityGroupWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{4}
}

func (m *AutoMsgSecurityGroupWatchHelper) GetEvents() []*AutoMsgSecurityGroupWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgSecurityGroupWatchHelper_WatchEvent struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *SecurityGroup `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgSecurityGroupWatchHelper_WatchEvent{}
}
func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgSecurityGroupWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgSecurityGroupWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{4, 0}
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) GetObject() *SecurityGroup {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgTrafficEncryptionPolicyWatchHelper is a wrapper object for watch events for TrafficEncryptionPolicy objects
type AutoMsgTrafficEncryptionPolicyWatchHelper struct {
	Events []*AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Reset() {
	*m = AutoMsgTrafficEncryptionPolicyWatchHelper{}
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTrafficEncryptionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgTrafficEncryptionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{5}
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) GetEvents() []*AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent struct {
	Type   string                   `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *TrafficEncryptionPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{5, 0}
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) GetObject() *TrafficEncryptionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// CertificateList is a container object for list of Certificate objects
type CertificateList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Certificate objects
	Items []*Certificate `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *CertificateList) Reset()                    { *m = CertificateList{} }
func (m *CertificateList) String() string            { return proto.CompactTextString(m) }
func (*CertificateList) ProtoMessage()               {}
func (*CertificateList) Descriptor() ([]byte, []int) { return fileDescriptorSvcSecurity, []int{6} }

func (m *CertificateList) GetItems() []*Certificate {
	if m != nil {
		return m.Items
	}
	return nil
}

// SGPolicyList is a container object for list of SGPolicy objects
type SGPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of SGPolicy objects
	Items []*SGPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *SGPolicyList) Reset()                    { *m = SGPolicyList{} }
func (m *SGPolicyList) String() string            { return proto.CompactTextString(m) }
func (*SGPolicyList) ProtoMessage()               {}
func (*SGPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcSecurity, []int{7} }

func (m *SGPolicyList) GetItems() []*SGPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// SecurityGroupList is a container object for list of SecurityGroup objects
type SecurityGroupList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of SecurityGroup objects
	Items []*SecurityGroup `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *SecurityGroupList) Reset()                    { *m = SecurityGroupList{} }
func (m *SecurityGroupList) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupList) ProtoMessage()               {}
func (*SecurityGroupList) Descriptor() ([]byte, []int) { return fileDescriptorSvcSecurity, []int{8} }

func (m *SecurityGroupList) GetItems() []*SecurityGroup {
	if m != nil {
		return m.Items
	}
	return nil
}

// TrafficEncryptionPolicyList is a container object for list of TrafficEncryptionPolicy objects
type TrafficEncryptionPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of TrafficEncryptionPolicy objects
	Items []*TrafficEncryptionPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *TrafficEncryptionPolicyList) Reset()         { *m = TrafficEncryptionPolicyList{} }
func (m *TrafficEncryptionPolicyList) String() string { return proto.CompactTextString(m) }
func (*TrafficEncryptionPolicyList) ProtoMessage()    {}
func (*TrafficEncryptionPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcSecurity, []int{9}
}

func (m *TrafficEncryptionPolicyList) GetItems() []*TrafficEncryptionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AppList)(nil), "security.AppList")
	proto.RegisterType((*AutoMsgAppWatchHelper)(nil), "security.AutoMsgAppWatchHelper")
	proto.RegisterType((*AutoMsgAppWatchHelper_WatchEvent)(nil), "security.AutoMsgAppWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgCertificateWatchHelper)(nil), "security.AutoMsgCertificateWatchHelper")
	proto.RegisterType((*AutoMsgCertificateWatchHelper_WatchEvent)(nil), "security.AutoMsgCertificateWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgSGPolicyWatchHelper)(nil), "security.AutoMsgSGPolicyWatchHelper")
	proto.RegisterType((*AutoMsgSGPolicyWatchHelper_WatchEvent)(nil), "security.AutoMsgSGPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgSecurityGroupWatchHelper)(nil), "security.AutoMsgSecurityGroupWatchHelper")
	proto.RegisterType((*AutoMsgSecurityGroupWatchHelper_WatchEvent)(nil), "security.AutoMsgSecurityGroupWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgTrafficEncryptionPolicyWatchHelper)(nil), "security.AutoMsgTrafficEncryptionPolicyWatchHelper")
	proto.RegisterType((*AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent)(nil), "security.AutoMsgTrafficEncryptionPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*CertificateList)(nil), "security.CertificateList")
	proto.RegisterType((*SGPolicyList)(nil), "security.SGPolicyList")
	proto.RegisterType((*SecurityGroupList)(nil), "security.SecurityGroupList")
	proto.RegisterType((*TrafficEncryptionPolicyList)(nil), "security.TrafficEncryptionPolicyList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecurityV1 service

type SecurityV1Client interface {
	// Create App object
	AutoAddApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	// Create Certificate object
	AutoAddCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	// Create SGPolicy object
	AutoAddSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error)
	// Create SecurityGroup object
	AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	// Create TrafficEncryptionPolicy object
	AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	// Delete App object
	AutoDeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	// Delete Certificate object
	AutoDeleteCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	// Delete SGPolicy object
	AutoDeleteSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error)
	// Delete SecurityGroup object
	AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	// Delete TrafficEncryptionPolicy object
	AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	// Get App object
	AutoGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	// Get Certificate object
	AutoGetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	// Get SGPolicy object
	AutoGetSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error)
	// Get SecurityGroup object
	AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	// Get TrafficEncryptionPolicy object
	AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	// List App objects
	AutoListApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppList, error)
	// List Certificate objects
	AutoListCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CertificateList, error)
	// List SGPolicy objects
	AutoListSGPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SGPolicyList, error)
	// List SecurityGroup objects
	AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SecurityGroupList, error)
	// List TrafficEncryptionPolicy objects
	AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TrafficEncryptionPolicyList, error)
	// Update App object
	AutoUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	// Update Certificate object
	AutoUpdateCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	// Update SGPolicy object
	AutoUpdateSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error)
	// Update SecurityGroup object
	AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error)
	// Update TrafficEncryptionPolicy object
	AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error)
	// Watch App objects
	AutoWatchApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchAppClient, error)
	// Watch Certificate objects
	AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchCertificateClient, error)
	// Watch SGPolicy objects
	AutoWatchSGPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSGPolicyClient, error)
	// Watch SecurityGroup objects
	AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSecurityGroupClient, error)
	AutoWatchSvcSecurityV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSvcSecurityV1Client, error)
	// Watch TrafficEncryptionPolicy objects
	AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchTrafficEncryptionPolicyClient, error)
}

type securityV1Client struct {
	cc *grpc.ClientConn
}

func NewSecurityV1Client(cc *grpc.ClientConn) SecurityV1Client {
	return &securityV1Client{cc}
}

func (c *securityV1Client) AutoAddApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoAddApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoAddCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoAddCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoAddSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoAddSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoAddSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoAddTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoDeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoDeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoDeleteCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoDeleteCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoDeleteSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoDeleteSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoDeleteSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoDeleteTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoGetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoGetCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoGetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoGetSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoGetSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoGetSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoGetTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoListApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoListApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CertificateList, error) {
	out := new(CertificateList)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoListCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoListSGPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SGPolicyList, error) {
	out := new(SGPolicyList)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoListSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*SecurityGroupList, error) {
	out := new(SecurityGroupList)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoListSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TrafficEncryptionPolicyList, error) {
	out := new(TrafficEncryptionPolicyList)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoListTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoUpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoUpdateCertificate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoUpdateCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoUpdateSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoUpdateSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoUpdateSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy, opts ...grpc.CallOption) (*TrafficEncryptionPolicy, error) {
	out := new(TrafficEncryptionPolicy)
	err := grpc.Invoke(ctx, "/security.SecurityV1/AutoUpdateTrafficEncryptionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityV1Client) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[0], c.cc, "/security.SecurityV1/AutoWatchApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchAppClient interface {
	Recv() (*AutoMsgAppWatchHelper, error)
	grpc.ClientStream
}

type securityV1AutoWatchAppClient struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchAppClient) Recv() (*AutoMsgAppWatchHelper, error) {
	m := new(AutoMsgAppWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityV1Client) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[1], c.cc, "/security.SecurityV1/AutoWatchCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchCertificateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchCertificateClient interface {
	Recv() (*AutoMsgCertificateWatchHelper, error)
	grpc.ClientStream
}

type securityV1AutoWatchCertificateClient struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchCertificateClient) Recv() (*AutoMsgCertificateWatchHelper, error) {
	m := new(AutoMsgCertificateWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityV1Client) AutoWatchSGPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSGPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[2], c.cc, "/security.SecurityV1/AutoWatchSGPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchSGPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchSGPolicyClient interface {
	Recv() (*AutoMsgSGPolicyWatchHelper, error)
	grpc.ClientStream
}

type securityV1AutoWatchSGPolicyClient struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchSGPolicyClient) Recv() (*AutoMsgSGPolicyWatchHelper, error) {
	m := new(AutoMsgSGPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityV1Client) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSecurityGroupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[3], c.cc, "/security.SecurityV1/AutoWatchSecurityGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchSecurityGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchSecurityGroupClient interface {
	Recv() (*AutoMsgSecurityGroupWatchHelper, error)
	grpc.ClientStream
}

type securityV1AutoWatchSecurityGroupClient struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchSecurityGroupClient) Recv() (*AutoMsgSecurityGroupWatchHelper, error) {
	m := new(AutoMsgSecurityGroupWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityV1Client) AutoWatchSvcSecurityV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchSvcSecurityV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[4], c.cc, "/security.SecurityV1/AutoWatchSvcSecurityV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchSvcSecurityV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchSvcSecurityV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type securityV1AutoWatchSvcSecurityV1Client struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchSvcSecurityV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *securityV1Client) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SecurityV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityV1_serviceDesc.Streams[5], c.cc, "/security.SecurityV1/AutoWatchTrafficEncryptionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityV1AutoWatchTrafficEncryptionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityV1_AutoWatchTrafficEncryptionPolicyClient interface {
	Recv() (*AutoMsgTrafficEncryptionPolicyWatchHelper, error)
	grpc.ClientStream
}

type securityV1AutoWatchTrafficEncryptionPolicyClient struct {
	grpc.ClientStream
}

func (x *securityV1AutoWatchTrafficEncryptionPolicyClient) Recv() (*AutoMsgTrafficEncryptionPolicyWatchHelper, error) {
	m := new(AutoMsgTrafficEncryptionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SecurityV1 service

type SecurityV1Server interface {
	// Create App object
	AutoAddApp(context.Context, *App) (*App, error)
	// Create Certificate object
	AutoAddCertificate(context.Context, *Certificate) (*Certificate, error)
	// Create SGPolicy object
	AutoAddSGPolicy(context.Context, *SGPolicy) (*SGPolicy, error)
	// Create SecurityGroup object
	AutoAddSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	// Create TrafficEncryptionPolicy object
	AutoAddTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	// Delete App object
	AutoDeleteApp(context.Context, *App) (*App, error)
	// Delete Certificate object
	AutoDeleteCertificate(context.Context, *Certificate) (*Certificate, error)
	// Delete SGPolicy object
	AutoDeleteSGPolicy(context.Context, *SGPolicy) (*SGPolicy, error)
	// Delete SecurityGroup object
	AutoDeleteSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	// Delete TrafficEncryptionPolicy object
	AutoDeleteTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	// Get App object
	AutoGetApp(context.Context, *App) (*App, error)
	// Get Certificate object
	AutoGetCertificate(context.Context, *Certificate) (*Certificate, error)
	// Get SGPolicy object
	AutoGetSGPolicy(context.Context, *SGPolicy) (*SGPolicy, error)
	// Get SecurityGroup object
	AutoGetSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	// Get TrafficEncryptionPolicy object
	AutoGetTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	// List App objects
	AutoListApp(context.Context, *api.ListWatchOptions) (*AppList, error)
	// List Certificate objects
	AutoListCertificate(context.Context, *api.ListWatchOptions) (*CertificateList, error)
	// List SGPolicy objects
	AutoListSGPolicy(context.Context, *api.ListWatchOptions) (*SGPolicyList, error)
	// List SecurityGroup objects
	AutoListSecurityGroup(context.Context, *api.ListWatchOptions) (*SecurityGroupList, error)
	// List TrafficEncryptionPolicy objects
	AutoListTrafficEncryptionPolicy(context.Context, *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error)
	// Update App object
	AutoUpdateApp(context.Context, *App) (*App, error)
	// Update Certificate object
	AutoUpdateCertificate(context.Context, *Certificate) (*Certificate, error)
	// Update SGPolicy object
	AutoUpdateSGPolicy(context.Context, *SGPolicy) (*SGPolicy, error)
	// Update SecurityGroup object
	AutoUpdateSecurityGroup(context.Context, *SecurityGroup) (*SecurityGroup, error)
	// Update TrafficEncryptionPolicy object
	AutoUpdateTrafficEncryptionPolicy(context.Context, *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	// Watch App objects
	AutoWatchApp(*api.ListWatchOptions, SecurityV1_AutoWatchAppServer) error
	// Watch Certificate objects
	AutoWatchCertificate(*api.ListWatchOptions, SecurityV1_AutoWatchCertificateServer) error
	// Watch SGPolicy objects
	AutoWatchSGPolicy(*api.ListWatchOptions, SecurityV1_AutoWatchSGPolicyServer) error
	// Watch SecurityGroup objects
	AutoWatchSecurityGroup(*api.ListWatchOptions, SecurityV1_AutoWatchSecurityGroupServer) error
	AutoWatchSvcSecurityV1(*api.ListWatchOptions, SecurityV1_AutoWatchSvcSecurityV1Server) error
	// Watch TrafficEncryptionPolicy objects
	AutoWatchTrafficEncryptionPolicy(*api.ListWatchOptions, SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error
}

func RegisterSecurityV1Server(s *grpc.Server, srv SecurityV1Server) {
	s.RegisterService(&_SecurityV1_serviceDesc, srv)
}

func _SecurityV1_AutoAddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoAddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoAddApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoAddApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoAddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoAddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoAddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoAddCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoAddSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoAddSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoAddSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoAddSGPolicy(ctx, req.(*SGPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoAddSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoAddSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoAddSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoAddSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoAddTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoAddTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoAddTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoAddTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoDeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoDeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoDeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoDeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoDeleteCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoDeleteCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoDeleteCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoDeleteCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoDeleteSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoDeleteSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoDeleteSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoDeleteSGPolicy(ctx, req.(*SGPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoDeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoDeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoDeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoDeleteSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoDeleteTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoDeleteTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoDeleteTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoDeleteTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoGetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoGetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoGetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoGetApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoGetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoGetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoGetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoGetCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoGetSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoGetSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoGetSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoGetSGPolicy(ctx, req.(*SGPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoGetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoGetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoGetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoGetSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoGetTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoGetTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoGetTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoGetTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoListApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoListApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoListApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoListApp(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoListCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoListCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoListCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoListCertificate(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoListSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoListSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoListSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoListSGPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoListSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoListSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoListSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoListSecurityGroup(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoListTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoListTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoListTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoListTrafficEncryptionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoUpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoUpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoUpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoUpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoUpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoUpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoUpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoUpdateCertificate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoUpdateSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoUpdateSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoUpdateSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoUpdateSGPolicy(ctx, req.(*SGPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoUpdateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoUpdateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoUpdateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoUpdateSecurityGroup(ctx, req.(*SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoUpdateTrafficEncryptionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficEncryptionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityV1Server).AutoUpdateTrafficEncryptionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/security.SecurityV1/AutoUpdateTrafficEncryptionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityV1Server).AutoUpdateTrafficEncryptionPolicy(ctx, req.(*TrafficEncryptionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityV1_AutoWatchApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchApp(m, &securityV1AutoWatchAppServer{stream})
}

type SecurityV1_AutoWatchAppServer interface {
	Send(*AutoMsgAppWatchHelper) error
	grpc.ServerStream
}

type securityV1AutoWatchAppServer struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchAppServer) Send(m *AutoMsgAppWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityV1_AutoWatchCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchCertificate(m, &securityV1AutoWatchCertificateServer{stream})
}

type SecurityV1_AutoWatchCertificateServer interface {
	Send(*AutoMsgCertificateWatchHelper) error
	grpc.ServerStream
}

type securityV1AutoWatchCertificateServer struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchCertificateServer) Send(m *AutoMsgCertificateWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityV1_AutoWatchSGPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchSGPolicy(m, &securityV1AutoWatchSGPolicyServer{stream})
}

type SecurityV1_AutoWatchSGPolicyServer interface {
	Send(*AutoMsgSGPolicyWatchHelper) error
	grpc.ServerStream
}

type securityV1AutoWatchSGPolicyServer struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchSGPolicyServer) Send(m *AutoMsgSGPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityV1_AutoWatchSecurityGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchSecurityGroup(m, &securityV1AutoWatchSecurityGroupServer{stream})
}

type SecurityV1_AutoWatchSecurityGroupServer interface {
	Send(*AutoMsgSecurityGroupWatchHelper) error
	grpc.ServerStream
}

type securityV1AutoWatchSecurityGroupServer struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchSecurityGroupServer) Send(m *AutoMsgSecurityGroupWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityV1_AutoWatchSvcSecurityV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchSvcSecurityV1(m, &securityV1AutoWatchSvcSecurityV1Server{stream})
}

type SecurityV1_AutoWatchSvcSecurityV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type securityV1AutoWatchSvcSecurityV1Server struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchSvcSecurityV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _SecurityV1_AutoWatchTrafficEncryptionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityV1Server).AutoWatchTrafficEncryptionPolicy(m, &securityV1AutoWatchTrafficEncryptionPolicyServer{stream})
}

type SecurityV1_AutoWatchTrafficEncryptionPolicyServer interface {
	Send(*AutoMsgTrafficEncryptionPolicyWatchHelper) error
	grpc.ServerStream
}

type securityV1AutoWatchTrafficEncryptionPolicyServer struct {
	grpc.ServerStream
}

func (x *securityV1AutoWatchTrafficEncryptionPolicyServer) Send(m *AutoMsgTrafficEncryptionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _SecurityV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "security.SecurityV1",
	HandlerType: (*SecurityV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddApp",
			Handler:    _SecurityV1_AutoAddApp_Handler,
		},
		{
			MethodName: "AutoAddCertificate",
			Handler:    _SecurityV1_AutoAddCertificate_Handler,
		},
		{
			MethodName: "AutoAddSGPolicy",
			Handler:    _SecurityV1_AutoAddSGPolicy_Handler,
		},
		{
			MethodName: "AutoAddSecurityGroup",
			Handler:    _SecurityV1_AutoAddSecurityGroup_Handler,
		},
		{
			MethodName: "AutoAddTrafficEncryptionPolicy",
			Handler:    _SecurityV1_AutoAddTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteApp",
			Handler:    _SecurityV1_AutoDeleteApp_Handler,
		},
		{
			MethodName: "AutoDeleteCertificate",
			Handler:    _SecurityV1_AutoDeleteCertificate_Handler,
		},
		{
			MethodName: "AutoDeleteSGPolicy",
			Handler:    _SecurityV1_AutoDeleteSGPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteSecurityGroup",
			Handler:    _SecurityV1_AutoDeleteSecurityGroup_Handler,
		},
		{
			MethodName: "AutoDeleteTrafficEncryptionPolicy",
			Handler:    _SecurityV1_AutoDeleteTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoGetApp",
			Handler:    _SecurityV1_AutoGetApp_Handler,
		},
		{
			MethodName: "AutoGetCertificate",
			Handler:    _SecurityV1_AutoGetCertificate_Handler,
		},
		{
			MethodName: "AutoGetSGPolicy",
			Handler:    _SecurityV1_AutoGetSGPolicy_Handler,
		},
		{
			MethodName: "AutoGetSecurityGroup",
			Handler:    _SecurityV1_AutoGetSecurityGroup_Handler,
		},
		{
			MethodName: "AutoGetTrafficEncryptionPolicy",
			Handler:    _SecurityV1_AutoGetTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoListApp",
			Handler:    _SecurityV1_AutoListApp_Handler,
		},
		{
			MethodName: "AutoListCertificate",
			Handler:    _SecurityV1_AutoListCertificate_Handler,
		},
		{
			MethodName: "AutoListSGPolicy",
			Handler:    _SecurityV1_AutoListSGPolicy_Handler,
		},
		{
			MethodName: "AutoListSecurityGroup",
			Handler:    _SecurityV1_AutoListSecurityGroup_Handler,
		},
		{
			MethodName: "AutoListTrafficEncryptionPolicy",
			Handler:    _SecurityV1_AutoListTrafficEncryptionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateApp",
			Handler:    _SecurityV1_AutoUpdateApp_Handler,
		},
		{
			MethodName: "AutoUpdateCertificate",
			Handler:    _SecurityV1_AutoUpdateCertificate_Handler,
		},
		{
			MethodName: "AutoUpdateSGPolicy",
			Handler:    _SecurityV1_AutoUpdateSGPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateSecurityGroup",
			Handler:    _SecurityV1_AutoUpdateSecurityGroup_Handler,
		},
		{
			MethodName: "AutoUpdateTrafficEncryptionPolicy",
			Handler:    _SecurityV1_AutoUpdateTrafficEncryptionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchApp",
			Handler:       _SecurityV1_AutoWatchApp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchCertificate",
			Handler:       _SecurityV1_AutoWatchCertificate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSGPolicy",
			Handler:       _SecurityV1_AutoWatchSGPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSecurityGroup",
			Handler:       _SecurityV1_AutoWatchSecurityGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcSecurityV1",
			Handler:       _SecurityV1_AutoWatchSvcSecurityV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchTrafficEncryptionPolicy",
			Handler:       _SecurityV1_AutoWatchTrafficEncryptionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_security.proto",
}

func (m *AppList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.ListMeta.Size()))
	n2, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAppWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAppWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAppWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAppWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgCertificateWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCertificateWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AutoMsgSGPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSGPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(m.Object.Size()))
		n5, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AutoMsgSecurityGroupWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSecurityGroupWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcSecurity(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CertificateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.ListMeta.Size()))
	n9, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SGPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.ListMeta.Size()))
	n11, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.ListMeta.Size()))
	n13, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TrafficEncryptionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficEncryptionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n14, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcSecurity(dAtA, i, uint64(m.ListMeta.Size()))
	n15, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcSecurity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAppWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAppWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	return n
}

func (m *AutoMsgCertificateWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgCertificateWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	return n
}

func (m *AutoMsgSGPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	return n
}

func (m *AutoMsgSecurityGroupWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	return n
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcSecurity(uint64(l))
	}
	return n
}

func (m *CertificateList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *SGPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *SecurityGroupList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func (m *TrafficEncryptionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcSecurity(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcSecurity(uint64(l))
		}
	}
	return n
}

func sovSvcSecurity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcSecurity(x uint64) (n int) {
	return sovSvcSecurity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &App{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAppWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAppWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAppWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAppWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAppWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &App{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCertificateWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCertificateWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCertificateWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgCertificateWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgCertificateWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Certificate{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSGPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSGPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSGPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgSGPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSGPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &SGPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSecurityGroupWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgSecurityGroupWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgSecurityGroupWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgSecurityGroupWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgSecurityGroupWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &SecurityGroup{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTrafficEncryptionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTrafficEncryptionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &TrafficEncryptionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Certificate{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SGPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SecurityGroup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficEncryptionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficEncryptionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TrafficEncryptionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcSecurity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcSecurity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcSecurity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcSecurity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcSecurity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcSecurity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcSecurity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_security.proto", fileDescriptorSvcSecurity) }

var fileDescriptorSvcSecurity = []byte{
	// 1807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x99, 0x4b, 0x50, 0x1c, 0x4f,
	0x1d, 0xc7, 0x69, 0x5e, 0xff, 0xa4, 0x79, 0x04, 0x9a, 0xe7, 0x4c, 0x12, 0x16, 0xc6, 0xc4, 0x00,
	0x06, 0x66, 0x03, 0x31, 0x85, 0xf8, 0x28, 0x59, 0x8d, 0x44, 0x2b, 0x09, 0x14, 0x21, 0xd1, 0x60,
	0x2c, 0x9d, 0x9d, 0x6d, 0x96, 0x49, 0x96, 0x9d, 0x71, 0xa7, 0x17, 0x44, 0xcd, 0xc5, 0x25, 0x27,
	0x0f, 0x56, 0xe9, 0x25, 0xf1, 0x60, 0x59, 0xa8, 0x97, 0x58, 0x1e, 0xe4, 0xa2, 0xde, 0xf4, 0x96,
	0x93, 0x95, 0x8a, 0xb7, 0x94, 0xa2, 0x45, 0xf9, 0xa8, 0x42, 0xaf, 0x5e, 0xf4, 0xf2, 0xaf, 0x7e,
	0xcc, 0xce, 0xcc, 0xee, 0x34, 0x33, 0x4b, 0x2a, 0x55, 0x9c, 0x98, 0x9d, 0xe9, 0xee, 0xdf, 0xe7,
	0xfb, 0xa3, 0xbf, 0xbf, 0xfe, 0xed, 0x2c, 0x44, 0xee, 0x96, 0xf9, 0x75, 0x17, 0x9b, 0xe5, 0x92,
	0x45, 0x76, 0xa6, 0x9d, 0x92, 0x4d, 0x6c, 0x74, 0xc6, 0xfb, 0xac, 0x5e, 0xc8, 0xdb, 0x76, 0xbe,
	0x80, 0x75, 0xc3, 0xb1, 0x74, 0xa3, 0x58, 0xb4, 0x89, 0x41, 0x2c, 0xbb, 0xe8, 0xf2, 0x71, 0xea,
	0xcd, 0xbc, 0x45, 0x36, 0xca, 0xd9, 0x69, 0xd3, 0xde, 0xd4, 0x1d, 0x5c, 0x74, 0x8d, 0x62, 0xce,
	0xd6, 0xdd, 0x6d, 0x7d, 0x0b, 0x17, 0x2d, 0x13, 0xeb, 0x65, 0x62, 0x15, 0x5c, 0x3a, 0x35, 0x8f,
	0x8b, 0xc1, 0xd9, 0xba, 0x55, 0x34, 0x0b, 0xe5, 0x1c, 0xf6, 0x96, 0x99, 0x0a, 0x2c, 0x93, 0xb7,
	0xf3, 0xb6, 0xce, 0x6e, 0x67, 0xcb, 0xeb, 0xec, 0x13, 0xfb, 0xc0, 0xae, 0xc4, 0xf0, 0xb4, 0x24,
	0x2a, 0x65, 0x2c, 0x18, 0x59, 0x5c, 0x70, 0x75, 0x17, 0x17, 0xb0, 0x49, 0xec, 0x92, 0x98, 0xd1,
	0xed, 0xe6, 0x1d, 0xbb, 0x60, 0x99, 0x42, 0x9f, 0xda, 0xe7, 0xe9, 0xcb, 0x97, 0xec, 0xb2, 0x23,
	0x6e, 0x9e, 0x35, 0x1c, 0xef, 0x12, 0x7e, 0xeb, 0xe3, 0xe9, 0x4f, 0x88, 0xeb, 0xa1, 0x22, 0x26,
	0xdb, 0x76, 0xe9, 0x09, 0x2e, 0x9a, 0xa5, 0x1d, 0x87, 0xf2, 0x8b, 0x07, 0x97, 0x8f, 0xc1, 0xd8,
	0xc4, 0xc4, 0xe0, 0xc3, 0xb4, 0x37, 0x00, 0x7e, 0xb0, 0xe0, 0x38, 0xb7, 0x2d, 0x97, 0xa0, 0x1b,
	0x10, 0xac, 0x0e, 0x37, 0x8f, 0x82, 0xf1, 0x8e, 0x99, 0xae, 0x69, 0xc3, 0xb1, 0xa6, 0x57, 0x77,
	0x1c, 0x7c, 0x07, 0x13, 0x23, 0xd3, 0xf7, 0xea, 0x20, 0xd5, 0xf4, 0xfa, 0x20, 0x05, 0x8e, 0x0e,
	0x52, 0x1f, 0x5c, 0xb5, 0x8a, 0x05, 0xab, 0x88, 0x57, 0xbc, 0x0b, 0xb4, 0x04, 0xcf, 0xd0, 0xf9,
	0x74, 0xe4, 0x70, 0x4b, 0x60, 0xba, 0x77, 0x33, 0x73, 0x21, 0x30, 0xbd, 0xa7, 0x60, 0xb9, 0x64,
	0x8a, 0x12, 0x78, 0xeb, 0xd4, 0xdd, 0x41, 0xd3, 0xb0, 0xed, 0x8b, 0x04, 0x6f, 0xba, 0xc3, 0xad,
	0xa3, 0x2d, 0x6c, 0xb5, 0xea, 0x06, 0x58, 0x70, 0x9c, 0xcc, 0xd9, 0xa3, 0x83, 0x54, 0x9b, 0x45,
	0x9f, 0xaf, 0xf0, 0x3f, 0xf3, 0xdd, 0x6f, 0x9f, 0x29, 0x90, 0xae, 0xb2, 0x81, 0x0b, 0x0e, 0x2e,
	0x69, 0x7f, 0x01, 0x70, 0x60, 0xa1, 0x4c, 0xec, 0x3b, 0x6e, 0x7e, 0xc1, 0x71, 0xbe, 0x6c, 0x10,
	0x73, 0xe3, 0x16, 0x7b, 0x82, 0xee, 0xc2, 0xf6, 0x9b, 0x5b, 0xb8, 0x48, 0xdc, 0x61, 0xc0, 0x96,
	0x9e, 0x0c, 0x2c, 0x1d, 0x35, 0x61, 0x9a, 0x5d, 0xb3, 0x29, 0x19, 0x78, 0x74, 0x90, 0x6a, 0xc7,
	0x6c, 0xf6, 0x8a, 0xf8, 0xab, 0x9a, 0x10, 0xfa, 0x23, 0xd0, 0x28, 0x6c, 0xa5, 0x29, 0x1b, 0x06,
	0xa3, 0x60, 0xfc, 0x6c, 0x06, 0x1d, 0x1d, 0xa4, 0xba, 0xc9, 0x8e, 0x83, 0xaf, 0xda, 0x9b, 0x94,
	0xd3, 0x21, 0x3b, 0x68, 0x16, 0xb6, 0x2f, 0x65, 0x1f, 0x63, 0x93, 0x54, 0xf3, 0x1c, 0x92, 0xd6,
	0x4f, 0x13, 0x64, 0xb3, 0x01, 0xfe, 0xa4, 0xf9, 0x73, 0x6f, 0x9f, 0x29, 0x1d, 0xdb, 0x34, 0x8c,
	0xd0, 0xf7, 0x5f, 0x00, 0x2f, 0x0a, 0xdc, 0xcf, 0xe1, 0x12, 0xb1, 0xd6, 0x2d, 0xd3, 0x20, 0x38,
	0xa8, 0xf3, 0x41, 0x8d, 0xce, 0x99, 0x3a, 0x9d, 0xd1, 0x13, 0xe3, 0xf4, 0x3e, 0x69, 0x50, 0xef,
	0x27, 0x6b, 0xf4, 0x0e, 0xf8, 0x1c, 0x01, 0x80, 0xa4, 0xba, 0xff, 0x03, 0xa0, 0x2a, 0xf0, 0xef,
	0x2d, 0x2e, 0x33, 0xcb, 0x04, 0x45, 0xdf, 0xab, 0x11, 0xad, 0xd7, 0x89, 0x8e, 0x98, 0x15, 0xa7,
	0x78, 0xa3, 0x41, 0xc5, 0x73, 0x35, 0x8a, 0x91, 0x0f, 0xe1, 0x45, 0x4f, 0x2a, 0xf7, 0xff, 0x00,
	0xa6, 0x3c, 0x70, 0xb1, 0xc6, 0x22, 0xad, 0x08, 0x41, 0xcd, 0x5f, 0xa9, 0xd1, 0x7c, 0xbd, 0x5e,
	0xb3, 0x64, 0x6a, 0x9c, 0xf0, 0xcd, 0x06, 0x85, 0x7f, 0xba, 0x46, 0xf8, 0x50, 0x40, 0x78, 0x10,
	0x21, 0xa9, 0xfa, 0x17, 0xcd, 0x70, 0x42, 0x48, 0x58, 0x2d, 0x19, 0xeb, 0xeb, 0x96, 0x79, 0xb3,
	0x5a, 0xe3, 0xea, 0xff, 0xf7, 0xd9, 0x9a, 0x3c, 0x7c, 0xa6, 0x2e, 0x0f, 0xf1, 0x8b, 0xc4, 0x65,
	0x64, 0xbb, 0xc1, 0x8c, 0x2c, 0xd6, 0x64, 0x64, 0xcc, 0x67, 0x92, 0xc0, 0x24, 0xcd, 0xcd, 0x21,
	0x80, 0xe7, 0x02, 0xfe, 0x39, 0x5d, 0xd5, 0xfb, 0x46, 0xb8, 0x7a, 0x4b, 0x2c, 0x1f, 0x5f, 0xc5,
	0xff, 0x0c, 0x60, 0xa7, 0x67, 0x99, 0xd3, 0xa5, 0x70, 0x36, 0xac, 0x30, 0xca, 0xe2, 0xf1, 0xf2,
	0xfe, 0x09, 0x60, 0x6f, 0xc8, 0x18, 0xa7, 0x4b, 0xe3, 0x5c, 0x58, 0xa3, 0xd4, 0xcd, 0xf1, 0x42,
	0xff, 0x07, 0xe0, 0x79, 0xc9, 0x7e, 0x3f, 0x5d, 0x92, 0x33, 0x61, 0xc9, 0x09, 0xec, 0x1a, 0x2b,
	0x7e, 0xe6, 0x8f, 0x13, 0x10, 0x7a, 0x09, 0x7b, 0x70, 0x0d, 0x2d, 0x43, 0x48, 0xcb, 0xd1, 0x42,
	0x2e, 0xb7, 0xe0, 0x38, 0x28, 0x7c, 0xfa, 0xab, 0xe1, 0x8f, 0xda, 0xa5, 0xfd, 0x5d, 0xa5, 0xdd,
	0x2c, 0x61, 0x83, 0xe0, 0xdf, 0xee, 0x2a, 0xe0, 0xf7, 0xbb, 0x4a, 0xd3, 0xf7, 0xfe, 0xf4, 0xf7,
	0x1f, 0x35, 0x77, 0xc2, 0xa6, 0x79, 0x30, 0xa9, 0xb5, 0xe9, 0x86, 0xe3, 0xb8, 0xe8, 0x39, 0x80,
	0x48, 0x2c, 0x19, 0xb0, 0x17, 0x8a, 0x76, 0x9d, 0x1a, 0x7d, 0x5b, 0x5b, 0xad, 0x0b, 0x05, 0x58,
	0xa8, 0x4f, 0xb1, 0x50, 0x6b, 0xfd, 0x3c, 0x62, 0x97, 0x6e, 0xfa, 0x73, 0x5c, 0x2d, 0xa5, 0x13,
	0x5c, 0x34, 0x8a, 0x44, 0xff, 0xce, 0xd2, 0xf4, 0x2a, 0xbb, 0x7a, 0x1a, 0x1a, 0x80, 0xbe, 0x0f,
	0xe0, 0x39, 0x81, 0xe6, 0xf9, 0x02, 0x45, 0x78, 0x45, 0x8d, 0xb8, 0xa7, 0x2d, 0x4b, 0x88, 0xe6,
	0x38, 0x11, 0xe2, 0x44, 0x1d, 0xba, 0x68, 0x9d, 0x2d, 0xec, 0x6a, 0x17, 0x23, 0x78, 0xfc, 0xc7,
	0xe8, 0xe7, 0x00, 0xf6, 0x7b, 0x34, 0xc1, 0x1d, 0x8c, 0x64, 0x5b, 0x5b, 0x95, 0x3d, 0xd0, 0xd6,
	0x24, 0x70, 0x19, 0x0e, 0x37, 0xc4, 0xe1, 0x7a, 0x74, 0x6f, 0xfa, 0x14, 0x6b, 0xe4, 0x5d, 0x4d,
	0x8b, 0x22, 0x0c, 0x8f, 0x41, 0x6f, 0x00, 0x1c, 0x11, 0x98, 0x92, 0x5d, 0x87, 0xe2, 0x37, 0xa6,
	0x1a, 0x3f, 0x44, 0x7b, 0x2c, 0x11, 0xb1, 0xc2, 0x45, 0xa4, 0xb8, 0x88, 0x61, 0x9d, 0x48, 0xe6,
	0x4f, 0x46, 0x88, 0x91, 0x8c, 0x45, 0x5f, 0x85, 0x5d, 0x54, 0xd3, 0xe7, 0x71, 0x01, 0x13, 0x1c,
	0xbf, 0xf3, 0xaf, 0x52, 0xb4, 0x1c, 0x1b, 0x1c, 0xda, 0xf9, 0x74, 0x1f, 0x36, 0x4d, 0x76, 0xb3,
	0x8d, 0x4f, 0xc3, 0xde, 0x35, 0x36, 0xf1, 0x53, 0xf4, 0x4b, 0xd1, 0xed, 0xf3, 0xd5, 0x4f, 0x6e,
	0x82, 0x5c, 0x5d, 0x54, 0x9e, 0x90, 0xdb, 0x34, 0xea, 0xda, 0x05, 0x16, 0x7b, 0x30, 0xb4, 0xc3,
	0xab, 0x0c, 0x93, 0xe3, 0x31, 0x5e, 0xf0, 0x69, 0x7f, 0x22, 0xfc, 0xca, 0x69, 0x1b, 0xf6, 0xc5,
	0x37, 0x24, 0x90, 0xb7, 0x18, 0xa4, 0xca, 0x20, 0xfb, 0x03, 0xdb, 0xde, 0x47, 0xfc, 0xe8, 0xb1,
	0xf6, 0xf0, 0x01, 0x7f, 0x03, 0xe0, 0x50, 0x00, 0xf0, 0x1d, 0xad, 0xf2, 0x58, 0xc2, 0xbb, 0xc2,
	0x78, 0x53, 0x8c, 0x57, 0xa9, 0x35, 0x81, 0x0f, 0xfd, 0xb1, 0x78, 0xc7, 0xf8, 0xe4, 0xff, 0x00,
	0x70, 0xcc, 0x27, 0x7f, 0xbf, 0xee, 0xf9, 0xb6, 0x44, 0x57, 0x96, 0xe9, 0xba, 0xc2, 0x74, 0x8d,
	0xc9, 0xfc, 0xe0, 0xeb, 0x9b, 0x4d, 0x6e, 0x22, 0x5f, 0xe7, 0x7d, 0x7e, 0x88, 0x2c, 0x62, 0x12,
	0x6f, 0xa5, 0x89, 0xfd, 0x5d, 0xa5, 0x25, 0x8f, 0x49, 0xbd, 0x8f, 0x50, 0xad, 0x8f, 0x7e, 0x21,
	0x76, 0xe6, 0x22, 0x26, 0x27, 0x37, 0x91, 0x11, 0x8e, 0x57, 0xe7, 0x20, 0x24, 0x71, 0x10, 0x4a,
	0xee, 0xa0, 0xe7, 0xe2, 0x58, 0x59, 0xc4, 0xa4, 0x61, 0xfb, 0x7c, 0x2d, 0x0a, 0x2f, 0xe0, 0x1d,
	0x14, 0xe9, 0x1d, 0x94, 0xd4, 0x3b, 0xbf, 0x16, 0x67, 0x0c, 0x45, 0x7b, 0x47, 0xe3, 0xe4, 0xa3,
	0x48, 0x03, 0xae, 0x41, 0x72, 0xd7, 0xa0, 0x86, 0x5c, 0xf3, 0x57, 0x71, 0xe0, 0x2c, 0x62, 0xf2,
	0x7e, 0x2d, 0xb3, 0x1d, 0xa5, 0x28, 0xe0, 0x17, 0x14, 0xef, 0x17, 0x74, 0x22, 0xbf, 0xac, 0xc1,
	0x0e, 0x2a, 0x90, 0xf6, 0x85, 0xd4, 0x30, 0x03, 0xd5, 0x2e, 0x91, 0x7d, 0x9b, 0x5b, 0x62, 0x73,
	0x5c, 0xb5, 0x37, 0x64, 0x1c, 0xfa, 0x58, 0x1b, 0xdb, 0xdf, 0x55, 0x5a, 0x69, 0x33, 0x17, 0x72,
	0x4f, 0x07, 0x83, 0x15, 0xed, 0xd7, 0x0b, 0x00, 0xfb, 0xbc, 0xc5, 0xc3, 0xae, 0x89, 0x0c, 0xa2,
	0x44, 0xba, 0x86, 0x05, 0x5b, 0xae, 0x09, 0xc6, 0xf3, 0x33, 0xcf, 0xf2, 0xd3, 0xc7, 0x42, 0x86,
	0xfb, 0x2f, 0x14, 0xdb, 0x7f, 0xfd, 0x00, 0xc0, 0x1e, 0x8f, 0xad, 0xea, 0x14, 0x09, 0xd8, 0x60,
	0xbd, 0x59, 0x18, 0xd5, 0xed, 0x48, 0xaa, 0x1b, 0x8c, 0xaa, 0x97, 0x51, 0x05, 0x7b, 0x30, 0x14,
	0xd3, 0x83, 0xfd, 0x4c, 0x1c, 0xd5, 0x8c, 0x28, 0x64, 0x10, 0x09, 0xd6, 0x79, 0x89, 0x3d, 0x18,
	0xdb, 0x83, 0x48, 0xb6, 0xcf, 0x32, 0xb6, 0x41, 0xc6, 0x56, 0xd7, 0x82, 0xa1, 0x24, 0x2d, 0xd8,
	0x37, 0xf9, 0x6b, 0x17, 0x1a, 0x43, 0xe6, 0x08, 0x09, 0xee, 0xe5, 0x58, 0x17, 0x30, 0xf0, 0x9e,
	0xda, 0x7d, 0x85, 0x1e, 0xf1, 0x06, 0xe9, 0xbe, 0x93, 0x33, 0x92, 0x34, 0x48, 0x53, 0xf4, 0xf4,
	0x29, 0xb3, 0xc1, 0xa1, 0xad, 0x39, 0xc0, 0x9a, 0x36, 0xb5, 0xb6, 0xb2, 0xff, 0x4a, 0xa4, 0x9d,
	0x2f, 0x7f, 0xf2, 0xe2, 0xbe, 0x5e, 0x17, 0x96, 0xa7, 0xfc, 0x2e, 0x6f, 0x19, 0x2f, 0xf2, 0xe8,
	0x92, 0x0a, 0xaf, 0x26, 0xaf, 0xf0, 0x3f, 0x15, 0x27, 0x11, 0xe7, 0x6d, 0xb8, 0xc8, 0x67, 0x25,
	0x98, 0x5f, 0xe2, 0x98, 0xe7, 0x39, 0x66, 0x64, 0xa5, 0x57, 0x93, 0x56, 0xfa, 0xdf, 0x89, 0x2e,
	0x49, 0x20, 0xbe, 0x63, 0xb1, 0x2f, 0x48, 0x88, 0x57, 0x39, 0xf1, 0x28, 0x27, 0x96, 0x57, 0x7c,
	0xb5, 0xa1, 0x8a, 0xff, 0x2f, 0xd1, 0x27, 0x71, 0xf6, 0xf7, 0x5b, 0xf4, 0xbf, 0x2b, 0x51, 0x96,
	0xe3, 0xca, 0xc6, 0xb9, 0xb2, 0xf8, 0xca, 0xaf, 0x9e, 0xa8, 0xf2, 0x97, 0x60, 0x27, 0x15, 0xca,
	0x3c, 0x7a, 0x4c, 0xe9, 0x4f, 0xc5, 0xfc, 0x0a, 0xa0, 0x8d, 0xef, 0xef, 0x2a, 0x6d, 0xec, 0x05,
	0x5c, 0xc8, 0x6e, 0x5e, 0x01, 0x64, 0x4f, 0x98, 0xe7, 0xd2, 0x80, 0xf6, 0xcf, 0xfd, 0xd5, 0xa0,
	0x09, 0x8e, 0x84, 0x2b, 0x09, 0x5f, 0xcd, 0xb3, 0xde, 0x25, 0x04, 0xc1, 0x33, 0xf9, 0x05, 0x56,
	0xef, 0x14, 0x86, 0xd2, 0x27, 0x50, 0x42, 0xc7, 0xc0, 0x65, 0x71, 0xf3, 0x78, 0xf7, 0xa5, 0x01,
	0x2d, 0x13, 0xbd, 0x55, 0xf2, 0xb8, 0x03, 0xe3, 0x52, 0x92, 0x97, 0xeb, 0xda, 0xc3, 0x68, 0xe6,
	0x0c, 0x63, 0x1e, 0x62, 0xcc, 0xbd, 0x02, 0x2f, 0x70, 0x4c, 0x7c, 0x44, 0x4a, 0xec, 0x0f, 0x4a,
	0x03, 0xf4, 0x07, 0x00, 0x07, 0x7d, 0xde, 0x24, 0xc7, 0xc9, 0x44, 0xe2, 0xb7, 0xe3, 0x9a, 0x19,
	0x4d, 0x1e, 0x6e, 0x65, 0x05, 0x79, 0xcd, 0xf9, 0x31, 0x2e, 0xc7, 0x0f, 0x8f, 0x4c, 0x03, 0xf4,
	0x30, 0x28, 0x61, 0xcb, 0x0c, 0xbc, 0x2a, 0x92, 0x48, 0xe8, 0x63, 0xb7, 0xfd, 0xf7, 0xd0, 0xec,
	0x40, 0xe9, 0xad, 0xdb, 0x9f, 0x69, 0x40, 0xbf, 0x0e, 0x8d, 0x56, 0xd7, 0x6e, 0xf0, 0x20, 0x9b,
	0x3d, 0xc1, 0xeb, 0x73, 0xcd, 0x8d, 0x4e, 0xd9, 0x23, 0x96, 0xb2, 0x4b, 0x2c, 0x65, 0x23, 0x5e,
	0x6a, 0x24, 0x38, 0x69, 0x69, 0xea, 0x24, 0x33, 0xd2, 0x40, 0xfd, 0x77, 0xf3, 0x0f, 0x2b, 0x4a,
	0xf3, 0xd6, 0xb5, 0x1f, 0x57, 0x94, 0xea, 0x2f, 0xc3, 0x7b, 0x15, 0xa5, 0x2b, 0xf4, 0xaf, 0xdd,
	0xab, 0x28, 0x67, 0xbc, 0x0d, 0xba, 0x57, 0x51, 0x5a, 0x16, 0x1c, 0x7a, 0xab, 0x23, 0x60, 0xb5,
	0xbd, 0x8a, 0x32, 0x24, 0x11, 0xf9, 0xb2, 0xa2, 0x5c, 0x87, 0xe1, 0xf5, 0x10, 0xed, 0x64, 0x51,
	0x8b, 0x53, 0x26, 0x48, 0x7c, 0x0d, 0x44, 0xad, 0x8e, 0xed, 0x12, 0xc4, 0xce, 0x75, 0xc4, 0xd3,
	0xf0, 0xb2, 0xa2, 0xe8, 0xb0, 0x1a, 0x36, 0xe9, 0x94, 0x49, 0x48, 0xe9, 0x92, 0x8e, 0x9e, 0x81,
	0x41, 0x11, 0x49, 0x67, 0xcd, 0x41, 0x99, 0x56, 0xe9, 0x0a, 0x7c, 0x6e, 0xa6, 0xf3, 0xd5, 0xe1,
	0x08, 0x78, 0x7d, 0x38, 0x02, 0xfe, 0x76, 0x38, 0x02, 0x96, 0x41, 0xb6, 0x9d, 0xfd, 0x8e, 0x3c,
	0xfb, 0x61, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x38, 0x4e, 0xc1, 0xa9, 0x1f, 0x00, 0x00,
}
