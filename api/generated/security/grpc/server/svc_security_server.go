// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package securityApiServer is a auto generated package.
Input file: svc_security.proto
*/
package securityApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	security "github.com/pensando/sw/api/generated/security"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type ssecuritySvc_securityBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsSecurityV1 *eSecurityV1Endpoints
}

type eSecurityV1Endpoints struct {
	Svc                      ssecuritySvc_securityBackend
	fnAutoWatchSvcSecurityV1 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnAutoAddApp                        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddCertificate                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddSGPolicy                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddSecurityGroup              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddTrafficEncryptionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteApp                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteCertificate             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteSGPolicy                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteSecurityGroup           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteTrafficEncryptionPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetApp                        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetCertificate                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetSGPolicy                   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetSecurityGroup              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetTrafficEncryptionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListApp                       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListCertificate               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListSGPolicy                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListSecurityGroup             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListTrafficEncryptionPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateApp                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateCertificate             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateSGPolicy                func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateSecurityGroup           func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateTrafficEncryptionPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchSecurityGroup           func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchSGPolicy                func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchApp                     func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchCertificate             func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchTrafficEncryptionPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *ssecuritySvc_securityBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for ssecuritySvc_securityBackend")
	s.Messages = map[string]apiserver.Message{

		"security.AppList": apisrvpkg.NewMessage("security.AppList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := security.AppList{}
			into.Kind = "AppList"
			r := security.App{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "security.App")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(security.AppList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(security.AppList)
			return &r
		}),
		"security.AutoMsgAppWatchHelper":                     apisrvpkg.NewMessage("security.AutoMsgAppWatchHelper"),
		"security.AutoMsgCertificateWatchHelper":             apisrvpkg.NewMessage("security.AutoMsgCertificateWatchHelper"),
		"security.AutoMsgSGPolicyWatchHelper":                apisrvpkg.NewMessage("security.AutoMsgSGPolicyWatchHelper"),
		"security.AutoMsgSecurityGroupWatchHelper":           apisrvpkg.NewMessage("security.AutoMsgSecurityGroupWatchHelper"),
		"security.AutoMsgTrafficEncryptionPolicyWatchHelper": apisrvpkg.NewMessage("security.AutoMsgTrafficEncryptionPolicyWatchHelper"),
		"security.CertificateList": apisrvpkg.NewMessage("security.CertificateList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := security.CertificateList{}
			into.Kind = "CertificateList"
			r := security.Certificate{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "security.Certificate")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(security.CertificateList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(security.CertificateList)
			return &r
		}),
		"security.SGPolicyList": apisrvpkg.NewMessage("security.SGPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := security.SGPolicyList{}
			into.Kind = "SGPolicyList"
			r := security.SGPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "security.SGPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(security.SGPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(security.SGPolicyList)
			return &r
		}),
		"security.SecurityGroupList": apisrvpkg.NewMessage("security.SecurityGroupList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := security.SecurityGroupList{}
			into.Kind = "SecurityGroupList"
			r := security.SecurityGroup{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "security.SecurityGroup")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(security.SecurityGroupList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(security.SecurityGroupList)
			return &r
		}),
		"security.TrafficEncryptionPolicyList": apisrvpkg.NewMessage("security.TrafficEncryptionPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := security.TrafficEncryptionPolicyList{}
			into.Kind = "TrafficEncryptionPolicyList"
			r := security.TrafficEncryptionPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "security.TrafficEncryptionPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(security.TrafficEncryptionPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(security.TrafficEncryptionPolicyList)
			return &r
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("security", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *ssecuritySvc_securityBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("security.SecurityV1")
		s.endpointsSecurityV1.fnAutoWatchSvcSecurityV1 = srv.WatchFromKv

		s.endpointsSecurityV1.fnAutoAddApp = srv.AddMethod("AutoAddApp",
			apisrvpkg.NewMethod(srv, pkgMessages["security.App"], pkgMessages["security.App"], "security", "AutoAddApp")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.App)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/apps/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoAddCertificate = srv.AddMethod("AutoAddCertificate",
			apisrvpkg.NewMethod(srv, pkgMessages["security.Certificate"], pkgMessages["security.Certificate"], "security", "AutoAddCertificate")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.Certificate)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/certificates/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoAddSGPolicy = srv.AddMethod("AutoAddSGPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SGPolicy"], pkgMessages["security.SGPolicy"], "security", "AutoAddSGPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SGPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/sgpolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoAddSecurityGroup = srv.AddMethod("AutoAddSecurityGroup",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SecurityGroup"], pkgMessages["security.SecurityGroup"], "security", "AutoAddSecurityGroup")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SecurityGroup)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/security-groups/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoAddTrafficEncryptionPolicy = srv.AddMethod("AutoAddTrafficEncryptionPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.TrafficEncryptionPolicy"], pkgMessages["security.TrafficEncryptionPolicy"], "security", "AutoAddTrafficEncryptionPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.TrafficEncryptionPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoDeleteApp = srv.AddMethod("AutoDeleteApp",
			apisrvpkg.NewMethod(srv, pkgMessages["security.App"], pkgMessages["security.App"], "security", "AutoDeleteApp")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.App)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/apps/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoDeleteCertificate = srv.AddMethod("AutoDeleteCertificate",
			apisrvpkg.NewMethod(srv, pkgMessages["security.Certificate"], pkgMessages["security.Certificate"], "security", "AutoDeleteCertificate")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.Certificate)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/certificates/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoDeleteSGPolicy = srv.AddMethod("AutoDeleteSGPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SGPolicy"], pkgMessages["security.SGPolicy"], "security", "AutoDeleteSGPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SGPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/sgpolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoDeleteSecurityGroup = srv.AddMethod("AutoDeleteSecurityGroup",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SecurityGroup"], pkgMessages["security.SecurityGroup"], "security", "AutoDeleteSecurityGroup")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SecurityGroup)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/security-groups/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoDeleteTrafficEncryptionPolicy = srv.AddMethod("AutoDeleteTrafficEncryptionPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.TrafficEncryptionPolicy"], pkgMessages["security.TrafficEncryptionPolicy"], "security", "AutoDeleteTrafficEncryptionPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.TrafficEncryptionPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoGetApp = srv.AddMethod("AutoGetApp",
			apisrvpkg.NewMethod(srv, pkgMessages["security.App"], pkgMessages["security.App"], "security", "AutoGetApp")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.App)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/apps/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoGetCertificate = srv.AddMethod("AutoGetCertificate",
			apisrvpkg.NewMethod(srv, pkgMessages["security.Certificate"], pkgMessages["security.Certificate"], "security", "AutoGetCertificate")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.Certificate)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/certificates/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoGetSGPolicy = srv.AddMethod("AutoGetSGPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SGPolicy"], pkgMessages["security.SGPolicy"], "security", "AutoGetSGPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SGPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/sgpolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoGetSecurityGroup = srv.AddMethod("AutoGetSecurityGroup",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SecurityGroup"], pkgMessages["security.SecurityGroup"], "security", "AutoGetSecurityGroup")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SecurityGroup)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/security-groups/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoGetTrafficEncryptionPolicy = srv.AddMethod("AutoGetTrafficEncryptionPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.TrafficEncryptionPolicy"], pkgMessages["security.TrafficEncryptionPolicy"], "security", "AutoGetTrafficEncryptionPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.TrafficEncryptionPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoListApp = srv.AddMethod("AutoListApp",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["security.AppList"], "security", "AutoListApp")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/apps/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoListCertificate = srv.AddMethod("AutoListCertificate",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["security.CertificateList"], "security", "AutoListCertificate")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/certificates/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoListSGPolicy = srv.AddMethod("AutoListSGPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["security.SGPolicyList"], "security", "AutoListSGPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/sgpolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoListSecurityGroup = srv.AddMethod("AutoListSecurityGroup",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["security.SecurityGroupList"], "security", "AutoListSecurityGroup")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/security-groups/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoListTrafficEncryptionPolicy = srv.AddMethod("AutoListTrafficEncryptionPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["security.TrafficEncryptionPolicyList"], "security", "AutoListTrafficEncryptionPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoUpdateApp = srv.AddMethod("AutoUpdateApp",
			apisrvpkg.NewMethod(srv, pkgMessages["security.App"], pkgMessages["security.App"], "security", "AutoUpdateApp")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.App)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/apps/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoUpdateCertificate = srv.AddMethod("AutoUpdateCertificate",
			apisrvpkg.NewMethod(srv, pkgMessages["security.Certificate"], pkgMessages["security.Certificate"], "security", "AutoUpdateCertificate")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.Certificate)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/certificates/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoUpdateSGPolicy = srv.AddMethod("AutoUpdateSGPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SGPolicy"], pkgMessages["security.SGPolicy"], "security", "AutoUpdateSGPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SGPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/sgpolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoUpdateSecurityGroup = srv.AddMethod("AutoUpdateSecurityGroup",
			apisrvpkg.NewMethod(srv, pkgMessages["security.SecurityGroup"], pkgMessages["security.SecurityGroup"], "security", "AutoUpdateSecurityGroup")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.SecurityGroup)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/security-groups/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoUpdateTrafficEncryptionPolicy = srv.AddMethod("AutoUpdateTrafficEncryptionPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["security.TrafficEncryptionPolicy"], pkgMessages["security.TrafficEncryptionPolicy"], "security", "AutoUpdateTrafficEncryptionPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(security.TrafficEncryptionPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "security/v1/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsSecurityV1.fnAutoWatchSecurityGroup = pkgMessages["security.SecurityGroup"].WatchFromKv

		s.endpointsSecurityV1.fnAutoWatchSGPolicy = pkgMessages["security.SGPolicy"].WatchFromKv

		s.endpointsSecurityV1.fnAutoWatchApp = pkgMessages["security.App"].WatchFromKv

		s.endpointsSecurityV1.fnAutoWatchCertificate = pkgMessages["security.Certificate"].WatchFromKv

		s.endpointsSecurityV1.fnAutoWatchTrafficEncryptionPolicy = pkgMessages["security.TrafficEncryptionPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"security.SecurityV1": srv,
		}
		apisrv.RegisterService("security.SecurityV1", srv)
		endpoints := security.MakeSecurityV1ServerEndpoints(s.endpointsSecurityV1, logger)
		server := security.MakeGRPCServerSecurityV1(ctx, endpoints, logger)
		security.RegisterSecurityV1Server(grpcserver.GrpcServer, server)
	}
}

func (s *ssecuritySvc_securityBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		// Service watcher
		svc := s.Services["security.SecurityV1"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				key := globals.ConfigRootPrefix + "/security"
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				defer cancel()
				watcher, err := kvs.WatchFiltered(nctx, key, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "error", err, "service", "SecurityV1")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		pkgMessages["security.SecurityGroup"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := security.SecurityGroup{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(security.SecurityV1_AutoWatchSecurityGroupServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "security.SecurityGroup")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "security.SecurityGroup")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "security.SecurityGroup")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &security.AutoMsgSecurityGroupWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "security.SecurityGroup")
					return err
				}
				events = &security.AutoMsgSecurityGroupWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "security.SecurityGroup")
						return nil
					}
					in, ok := ev.Object.(*security.SecurityGroup)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &security.AutoMsgSecurityGroupWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received SecurityGroup watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "SecurityGroup", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "security.SecurityGroup")
							break
						}
						strEvent.Object = i.(*security.SecurityGroup)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "security.SecurityGroup")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["security.SGPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := security.SGPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(security.SecurityV1_AutoWatchSGPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "security.SGPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "security.SGPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "security.SGPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &security.AutoMsgSGPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "security.SGPolicy")
					return err
				}
				events = &security.AutoMsgSGPolicyWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "security.SGPolicy")
						return nil
					}
					in, ok := ev.Object.(*security.SGPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &security.AutoMsgSGPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received SGPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "SGPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "security.SGPolicy")
							break
						}
						strEvent.Object = i.(*security.SGPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "security.SGPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["security.App"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := security.App{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(security.SecurityV1_AutoWatchAppServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "security.App")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "security.App")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "security.App")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &security.AutoMsgAppWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "security.App")
					return err
				}
				events = &security.AutoMsgAppWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "security.App")
						return nil
					}
					in, ok := ev.Object.(*security.App)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &security.AutoMsgAppWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received App watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "App", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "security.App")
							break
						}
						strEvent.Object = i.(*security.App)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "security.App")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["security.Certificate"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := security.Certificate{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(security.SecurityV1_AutoWatchCertificateServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "security.Certificate")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "security.Certificate")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "security.Certificate")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &security.AutoMsgCertificateWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "security.Certificate")
					return err
				}
				events = &security.AutoMsgCertificateWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "security.Certificate")
						return nil
					}
					in, ok := ev.Object.(*security.Certificate)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &security.AutoMsgCertificateWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Certificate watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Certificate", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "security.Certificate")
							break
						}
						strEvent.Object = i.(*security.Certificate)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "security.Certificate")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["security.TrafficEncryptionPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := security.TrafficEncryptionPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(security.SecurityV1_AutoWatchTrafficEncryptionPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "security.TrafficEncryptionPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "security.TrafficEncryptionPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "security.TrafficEncryptionPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &security.AutoMsgTrafficEncryptionPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "security.TrafficEncryptionPolicy")
					return err
				}
				events = &security.AutoMsgTrafficEncryptionPolicyWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "security.TrafficEncryptionPolicy")
						return nil
					}
					in, ok := ev.Object.(*security.TrafficEncryptionPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &security.AutoMsgTrafficEncryptionPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received TrafficEncryptionPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "TrafficEncryptionPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "security.TrafficEncryptionPolicy")
							break
						}
						strEvent.Object = i.(*security.TrafficEncryptionPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "security.TrafficEncryptionPolicy")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *ssecuritySvc_securityBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *ssecuritySvc_securityBackend) Reset() {
	cleanupRegistration()
}

func (e *eSecurityV1Endpoints) AutoAddApp(ctx context.Context, t security.App) (security.App, error) {
	r, err := e.fnAutoAddApp(ctx, t)
	if err == nil {
		return r.(security.App), err
	}
	return security.App{}, err

}
func (e *eSecurityV1Endpoints) AutoAddCertificate(ctx context.Context, t security.Certificate) (security.Certificate, error) {
	r, err := e.fnAutoAddCertificate(ctx, t)
	if err == nil {
		return r.(security.Certificate), err
	}
	return security.Certificate{}, err

}
func (e *eSecurityV1Endpoints) AutoAddSGPolicy(ctx context.Context, t security.SGPolicy) (security.SGPolicy, error) {
	r, err := e.fnAutoAddSGPolicy(ctx, t)
	if err == nil {
		return r.(security.SGPolicy), err
	}
	return security.SGPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoAddSecurityGroup(ctx context.Context, t security.SecurityGroup) (security.SecurityGroup, error) {
	r, err := e.fnAutoAddSecurityGroup(ctx, t)
	if err == nil {
		return r.(security.SecurityGroup), err
	}
	return security.SecurityGroup{}, err

}
func (e *eSecurityV1Endpoints) AutoAddTrafficEncryptionPolicy(ctx context.Context, t security.TrafficEncryptionPolicy) (security.TrafficEncryptionPolicy, error) {
	r, err := e.fnAutoAddTrafficEncryptionPolicy(ctx, t)
	if err == nil {
		return r.(security.TrafficEncryptionPolicy), err
	}
	return security.TrafficEncryptionPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoDeleteApp(ctx context.Context, t security.App) (security.App, error) {
	r, err := e.fnAutoDeleteApp(ctx, t)
	if err == nil {
		return r.(security.App), err
	}
	return security.App{}, err

}
func (e *eSecurityV1Endpoints) AutoDeleteCertificate(ctx context.Context, t security.Certificate) (security.Certificate, error) {
	r, err := e.fnAutoDeleteCertificate(ctx, t)
	if err == nil {
		return r.(security.Certificate), err
	}
	return security.Certificate{}, err

}
func (e *eSecurityV1Endpoints) AutoDeleteSGPolicy(ctx context.Context, t security.SGPolicy) (security.SGPolicy, error) {
	r, err := e.fnAutoDeleteSGPolicy(ctx, t)
	if err == nil {
		return r.(security.SGPolicy), err
	}
	return security.SGPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoDeleteSecurityGroup(ctx context.Context, t security.SecurityGroup) (security.SecurityGroup, error) {
	r, err := e.fnAutoDeleteSecurityGroup(ctx, t)
	if err == nil {
		return r.(security.SecurityGroup), err
	}
	return security.SecurityGroup{}, err

}
func (e *eSecurityV1Endpoints) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, t security.TrafficEncryptionPolicy) (security.TrafficEncryptionPolicy, error) {
	r, err := e.fnAutoDeleteTrafficEncryptionPolicy(ctx, t)
	if err == nil {
		return r.(security.TrafficEncryptionPolicy), err
	}
	return security.TrafficEncryptionPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoGetApp(ctx context.Context, t security.App) (security.App, error) {
	r, err := e.fnAutoGetApp(ctx, t)
	if err == nil {
		return r.(security.App), err
	}
	return security.App{}, err

}
func (e *eSecurityV1Endpoints) AutoGetCertificate(ctx context.Context, t security.Certificate) (security.Certificate, error) {
	r, err := e.fnAutoGetCertificate(ctx, t)
	if err == nil {
		return r.(security.Certificate), err
	}
	return security.Certificate{}, err

}
func (e *eSecurityV1Endpoints) AutoGetSGPolicy(ctx context.Context, t security.SGPolicy) (security.SGPolicy, error) {
	r, err := e.fnAutoGetSGPolicy(ctx, t)
	if err == nil {
		return r.(security.SGPolicy), err
	}
	return security.SGPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoGetSecurityGroup(ctx context.Context, t security.SecurityGroup) (security.SecurityGroup, error) {
	r, err := e.fnAutoGetSecurityGroup(ctx, t)
	if err == nil {
		return r.(security.SecurityGroup), err
	}
	return security.SecurityGroup{}, err

}
func (e *eSecurityV1Endpoints) AutoGetTrafficEncryptionPolicy(ctx context.Context, t security.TrafficEncryptionPolicy) (security.TrafficEncryptionPolicy, error) {
	r, err := e.fnAutoGetTrafficEncryptionPolicy(ctx, t)
	if err == nil {
		return r.(security.TrafficEncryptionPolicy), err
	}
	return security.TrafficEncryptionPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoListApp(ctx context.Context, t api.ListWatchOptions) (security.AppList, error) {
	r, err := e.fnAutoListApp(ctx, t)
	if err == nil {
		return r.(security.AppList), err
	}
	return security.AppList{}, err

}
func (e *eSecurityV1Endpoints) AutoListCertificate(ctx context.Context, t api.ListWatchOptions) (security.CertificateList, error) {
	r, err := e.fnAutoListCertificate(ctx, t)
	if err == nil {
		return r.(security.CertificateList), err
	}
	return security.CertificateList{}, err

}
func (e *eSecurityV1Endpoints) AutoListSGPolicy(ctx context.Context, t api.ListWatchOptions) (security.SGPolicyList, error) {
	r, err := e.fnAutoListSGPolicy(ctx, t)
	if err == nil {
		return r.(security.SGPolicyList), err
	}
	return security.SGPolicyList{}, err

}
func (e *eSecurityV1Endpoints) AutoListSecurityGroup(ctx context.Context, t api.ListWatchOptions) (security.SecurityGroupList, error) {
	r, err := e.fnAutoListSecurityGroup(ctx, t)
	if err == nil {
		return r.(security.SecurityGroupList), err
	}
	return security.SecurityGroupList{}, err

}
func (e *eSecurityV1Endpoints) AutoListTrafficEncryptionPolicy(ctx context.Context, t api.ListWatchOptions) (security.TrafficEncryptionPolicyList, error) {
	r, err := e.fnAutoListTrafficEncryptionPolicy(ctx, t)
	if err == nil {
		return r.(security.TrafficEncryptionPolicyList), err
	}
	return security.TrafficEncryptionPolicyList{}, err

}
func (e *eSecurityV1Endpoints) AutoUpdateApp(ctx context.Context, t security.App) (security.App, error) {
	r, err := e.fnAutoUpdateApp(ctx, t)
	if err == nil {
		return r.(security.App), err
	}
	return security.App{}, err

}
func (e *eSecurityV1Endpoints) AutoUpdateCertificate(ctx context.Context, t security.Certificate) (security.Certificate, error) {
	r, err := e.fnAutoUpdateCertificate(ctx, t)
	if err == nil {
		return r.(security.Certificate), err
	}
	return security.Certificate{}, err

}
func (e *eSecurityV1Endpoints) AutoUpdateSGPolicy(ctx context.Context, t security.SGPolicy) (security.SGPolicy, error) {
	r, err := e.fnAutoUpdateSGPolicy(ctx, t)
	if err == nil {
		return r.(security.SGPolicy), err
	}
	return security.SGPolicy{}, err

}
func (e *eSecurityV1Endpoints) AutoUpdateSecurityGroup(ctx context.Context, t security.SecurityGroup) (security.SecurityGroup, error) {
	r, err := e.fnAutoUpdateSecurityGroup(ctx, t)
	if err == nil {
		return r.(security.SecurityGroup), err
	}
	return security.SecurityGroup{}, err

}
func (e *eSecurityV1Endpoints) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, t security.TrafficEncryptionPolicy) (security.TrafficEncryptionPolicy, error) {
	r, err := e.fnAutoUpdateTrafficEncryptionPolicy(ctx, t)
	if err == nil {
		return r.(security.TrafficEncryptionPolicy), err
	}
	return security.TrafficEncryptionPolicy{}, err

}

func (e *eSecurityV1Endpoints) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchSecurityGroupServer) error {
	return e.fnAutoWatchSecurityGroup(in, stream, "security")
}
func (e *eSecurityV1Endpoints) AutoWatchSGPolicy(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchSGPolicyServer) error {
	return e.fnAutoWatchSGPolicy(in, stream, "security")
}
func (e *eSecurityV1Endpoints) AutoWatchApp(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchAppServer) error {
	return e.fnAutoWatchApp(in, stream, "security")
}
func (e *eSecurityV1Endpoints) AutoWatchCertificate(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchCertificateServer) error {
	return e.fnAutoWatchCertificate(in, stream, "security")
}
func (e *eSecurityV1Endpoints) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return e.fnAutoWatchTrafficEncryptionPolicy(in, stream, "security")
}
func (e *eSecurityV1Endpoints) AutoWatchSvcSecurityV1(in *api.ListWatchOptions, stream security.SecurityV1_AutoWatchSvcSecurityV1Server) error {
	return e.fnAutoWatchSvcSecurityV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := ssecuritySvc_securityBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eSecurityV1Endpoints{Svc: svc}
		svc.endpointsSecurityV1 = &e
	}
	apisrv.Register("security.svc_security.proto", &svc)
}
