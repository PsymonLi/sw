// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x509.proto

package security

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// --- Local defs --- //
type CertificateSpec_UsageValues int32

const (
	//
	CertificateSpec_Server CertificateSpec_UsageValues = 0
	//
	CertificateSpec_Client CertificateSpec_UsageValues = 1
	//
	CertificateSpec_TrustRoot CertificateSpec_UsageValues = 2
)

var CertificateSpec_UsageValues_name = map[int32]string{
	0: "Server",
	1: "Client",
	2: "TrustRoot",
}
var CertificateSpec_UsageValues_value = map[string]int32{
	"Server":    0,
	"Client":    1,
	"TrustRoot": 2,
}

func (CertificateSpec_UsageValues) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorX509, []int{1, 0}
}

// --- Local defs --- //
type CertificateStatus_ValidityValues int32

const (
	//
	CertificateStatus_Unknown CertificateStatus_ValidityValues = 0
	//
	CertificateStatus_Valid CertificateStatus_ValidityValues = 1
	//
	CertificateStatus_Invalid CertificateStatus_ValidityValues = 2
	//
	CertificateStatus_Expired CertificateStatus_ValidityValues = 3
)

var CertificateStatus_ValidityValues_name = map[int32]string{
	0: "Unknown",
	1: "Valid",
	2: "Invalid",
	3: "Expired",
}
var CertificateStatus_ValidityValues_value = map[string]int32{
	"Unknown": 0,
	"Valid":   1,
	"Invalid": 2,
	"Expired": 3,
}

func (CertificateStatus_ValidityValues) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorX509, []int{2, 0}
}

// Certificate represents a certificate with associated chain of trust
type Certificate struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the certificate.
	Spec CertificateSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the certificate.
	Status CertificateStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{0} }

func (m *Certificate) GetSpec() CertificateSpec {
	if m != nil {
		return m.Spec
	}
	return CertificateSpec{}
}

func (m *Certificate) GetStatus() CertificateStatus {
	if m != nil {
		return m.Status
	}
	return CertificateStatus{}
}

//
type CertificateSpec struct {
	// Description of the purpose of this certificate
	Description string `protobuf:"bytes,1,opt,name=Description,json=description,omitempty,proto3" json:"description,omitempty"`
	// Usage can be "client", "server" or "trust-root" in any combination.
	// A "server" certificate is used by a server to authenticate itself to the client
	// A "client" certificate is used by a client to authenticate itself to a server
	// A "trust-root" certificate is self-signed and is only used to validate
	// certificates presented by peers.
	// "client" and "server" certificates are always accompanied by a private key,
	// whereas "trust-root"-only certificates are not.
	Usages []string `protobuf:"bytes,2,rep,name=Usages,json=usages,omitempty" json:"usages,omitempty"`
	// Body of the certificate in PEM encoding
	Body string `protobuf:"bytes,3,opt,name=Body,json=body,omitempty,proto3" json:"body,omitempty"`
	// Trust chain of the certificate in PEM encoding.
	// These certificates are treated opaquely. We do not process them in any way
	// other than decoding them for informational purposes.
	TrustChain string `protobuf:"bytes,4,opt,name=TrustChain,json=trust-chain,omitempty,proto3" json:"trust-chain,omitempty"`
}

func (m *CertificateSpec) Reset()                    { *m = CertificateSpec{} }
func (m *CertificateSpec) String() string            { return proto.CompactTextString(m) }
func (*CertificateSpec) ProtoMessage()               {}
func (*CertificateSpec) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{1} }

func (m *CertificateSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CertificateSpec) GetUsages() []string {
	if m != nil {
		return m.Usages
	}
	return nil
}

func (m *CertificateSpec) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CertificateSpec) GetTrustChain() string {
	if m != nil {
		return m.TrustChain
	}
	return ""
}

//
type CertificateStatus struct {
	// Status of the certificate: "valid", "invalid", "expired"
	// "invalid" means that the signature of the certificate does not match or
	// there are inconsistencies in the trust chain.
	Validity string `protobuf:"bytes,1,opt,name=Validity,json=validity,omitempty,proto3" json:"validity,omitempty"`
	// The workloads where this certificate has been deployed
	Workloads []string `protobuf:"bytes,2,rep,name=Workloads,json=workloads,omitempty" json:"workloads,omitempty"`
}

func (m *CertificateStatus) Reset()                    { *m = CertificateStatus{} }
func (m *CertificateStatus) String() string            { return proto.CompactTextString(m) }
func (*CertificateStatus) ProtoMessage()               {}
func (*CertificateStatus) Descriptor() ([]byte, []int) { return fileDescriptorX509, []int{2} }

func (m *CertificateStatus) GetValidity() string {
	if m != nil {
		return m.Validity
	}
	return ""
}

func (m *CertificateStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func init() {
	proto.RegisterType((*Certificate)(nil), "security.Certificate")
	proto.RegisterType((*CertificateSpec)(nil), "security.CertificateSpec")
	proto.RegisterType((*CertificateStatus)(nil), "security.CertificateStatus")
	proto.RegisterEnum("security.CertificateSpec_UsageValues", CertificateSpec_UsageValues_name, CertificateSpec_UsageValues_value)
	proto.RegisterEnum("security.CertificateStatus_ValidityValues", CertificateStatus_ValidityValues_name, CertificateStatus_ValidityValues_value)
}
func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintX509(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *CertificateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Usages) > 0 {
		for _, s := range m.Usages {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.TrustChain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.TrustChain)))
		i += copy(dAtA[i:], m.TrustChain)
	}
	return i, nil
}

func (m *CertificateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Validity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintX509(dAtA, i, uint64(len(m.Validity)))
		i += copy(dAtA[i:], m.Validity)
	}
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintX509(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Certificate) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovX509(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovX509(uint64(l))
	return n
}

func (m *CertificateSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	if len(m.Usages) > 0 {
		for _, s := range m.Usages {
			l = len(s)
			n += 1 + l + sovX509(uint64(l))
		}
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	l = len(m.TrustChain)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	return n
}

func (m *CertificateStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Validity)
	if l > 0 {
		n += 1 + l + sovX509(uint64(l))
	}
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovX509(uint64(l))
		}
	}
	return n
}

func sovX509(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozX509(x uint64) (n int) {
	return sovX509(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Usages = append(m.Usages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowX509
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowX509
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthX509
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipX509(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthX509
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipX509(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowX509
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowX509
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowX509
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthX509
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowX509
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipX509(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthX509 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowX509   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("x509.proto", fileDescriptorX509) }

var fileDescriptorX509 = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x51, 0x4f, 0x13, 0x4d,
	0x14, 0xed, 0x2e, 0x7c, 0x85, 0x4e, 0x3f, 0x61, 0x1d, 0xa2, 0xb6, 0x45, 0x5b, 0xd2, 0x68, 0x02,
	0x09, 0xec, 0x12, 0x8d, 0x26, 0x1a, 0x13, 0x93, 0x2d, 0x35, 0xf1, 0xc1, 0xd4, 0xd0, 0x02, 0x6f,
	0x26, 0xd3, 0xdd, 0xcb, 0x32, 0xb2, 0x9d, 0xd9, 0xec, 0xcc, 0x02, 0x8d, 0xf1, 0xc9, 0x48, 0xfc,
	0x2d, 0xfc, 0x12, 0x1e, 0x89, 0x4f, 0x3e, 0x35, 0xa6, 0x4f, 0x86, 0x1f, 0xe0, 0xb3, 0x99, 0xa1,
	0x0d, 0x43, 0xa9, 0x6f, 0x73, 0xcf, 0x9e, 0x73, 0xee, 0xbd, 0xe7, 0x66, 0x11, 0x3a, 0x79, 0xbe,
	0xf9, 0xd2, 0x4d, 0x52, 0x2e, 0x39, 0x9e, 0x17, 0x10, 0x64, 0x29, 0x95, 0xfd, 0xca, 0xc3, 0x88,
	0xf3, 0x28, 0x06, 0x8f, 0x24, 0xd4, 0x23, 0x8c, 0x71, 0x49, 0x24, 0xe5, 0x4c, 0x5c, 0xf1, 0x2a,
	0xcd, 0x88, 0xca, 0x83, 0xac, 0xeb, 0x06, 0xbc, 0xe7, 0x25, 0xc0, 0x04, 0x61, 0x21, 0xf7, 0xc4,
	0xb1, 0x77, 0x04, 0x8c, 0x06, 0xe0, 0x65, 0x92, 0xc6, 0x42, 0x49, 0x23, 0x60, 0xa6, 0xda, 0xa3,
	0x2c, 0x88, 0xb3, 0x10, 0xc6, 0x36, 0x1b, 0x86, 0x4d, 0xc4, 0x23, 0xee, 0x69, 0xb8, 0x9b, 0xed,
	0xeb, 0x4a, 0x17, 0xfa, 0x35, 0xa2, 0x3f, 0xf9, 0x47, 0x57, 0x35, 0x63, 0x0f, 0x24, 0xb9, 0xa2,
	0xd5, 0x7f, 0xda, 0xa8, 0xd8, 0x80, 0x54, 0xd2, 0x7d, 0x1a, 0x10, 0x09, 0xf8, 0x05, 0xb2, 0x3a,
	0x25, 0x6b, 0xc5, 0x5a, 0x2d, 0x3e, 0xbd, 0xe3, 0x92, 0x84, 0xba, 0x9d, 0x7e, 0x02, 0xef, 0x41,
	0x12, 0x7f, 0xe9, 0x7c, 0x50, 0xcb, 0x5d, 0x0c, 0x6a, 0xd6, 0xe5, 0xa0, 0x36, 0xb7, 0x4e, 0x59,
	0x4c, 0x19, 0x6c, 0x8f, 0x1f, 0xf8, 0x2d, 0xb2, 0x5a, 0x25, 0x5b, 0xeb, 0x16, 0xb5, 0xae, 0xd5,
	0xfd, 0x04, 0x81, 0xd4, 0xca, 0x8a, 0xa1, 0x5c, 0x50, 0xbd, 0xd7, 0x79, 0x8f, 0x4a, 0xe8, 0x25,
	0xb2, 0xbf, 0x3d, 0x51, 0xe3, 0x16, 0x9a, 0x6d, 0x27, 0x10, 0x94, 0x66, 0xb4, 0x55, 0xd9, 0x1d,
	0x67, 0xec, 0x1a, 0x43, 0x2a, 0x82, 0x7f, 0x5f, 0x99, 0x2a, 0x43, 0x91, 0x40, 0x60, 0x1a, 0xde,
	0xac, 0xf1, 0x1e, 0xca, 0xb7, 0x25, 0x91, 0x99, 0x28, 0xcd, 0x6a, 0xcb, 0xe5, 0xe9, 0x96, 0x9a,
	0xe2, 0x97, 0x46, 0xa6, 0x8e, 0xd0, 0xb5, 0x61, 0x7b, 0x0b, 0x79, 0x55, 0xfb, 0xf1, 0xad, 0xbc,
	0x8c, 0x8a, 0xde, 0xe7, 0x96, 0xdb, 0x01, 0x46, 0x98, 0xfc, 0x82, 0xff, 0x0f, 0xae, 0x1d, 0x45,
	0xfd, 0x8f, 0x8d, 0x16, 0x27, 0xa6, 0xc6, 0x4d, 0x54, 0xdc, 0x02, 0x11, 0xa4, 0x34, 0x51, 0x37,
	0xd6, 0x41, 0x17, 0xfc, 0xf2, 0xe5, 0xa0, 0x76, 0x2f, 0xbc, 0x86, 0x8d, 0xb6, 0xd3, 0x61, 0xfc,
	0x11, 0xe5, 0x77, 0x04, 0x89, 0x40, 0x94, 0xec, 0x95, 0x99, 0xd5, 0x82, 0xff, 0xfa, 0xec, 0xb4,
	0xfc, 0xb8, 0x2d, 0xd3, 0x26, 0xcb, 0x7a, 0xab, 0x13, 0x3d, 0x5d, 0xcd, 0xdc, 0x25, 0x71, 0x06,
	0x62, 0x4d, 0xed, 0x96, 0x69, 0xa5, 0xb9, 0xdb, 0x24, 0x82, 0x37, 0xd1, 0xac, 0xcf, 0xc3, 0xbe,
	0xbe, 0x42, 0xc1, 0xc7, 0x2a, 0xe6, 0x2e, 0x0f, 0xfb, 0x66, 0xcc, 0x37, 0x6b, 0xbc, 0x85, 0x50,
	0x27, 0xcd, 0x84, 0x6c, 0x1c, 0x10, 0xca, 0x74, 0xd4, 0xa3, 0xbd, 0xa4, 0x42, 0x37, 0x02, 0x05,
	0x9b, 0x7b, 0x4d, 0x85, 0xeb, 0x5b, 0xa8, 0x68, 0x4c, 0x8b, 0x11, 0xca, 0xb7, 0x21, 0x3d, 0x82,
	0xd4, 0xc9, 0xa9, 0x77, 0x23, 0xa6, 0xc0, 0xa4, 0x63, 0xe1, 0x47, 0xa8, 0xa0, 0x9b, 0x6d, 0x73,
	0x2e, 0x1d, 0xbb, 0xb2, 0x30, 0xfc, 0x5e, 0x46, 0x57, 0x86, 0x29, 0xe7, 0xb2, 0xfe, 0xd5, 0x46,
	0x77, 0x6f, 0xdd, 0x16, 0x53, 0x34, 0xbf, 0x4b, 0x62, 0x1a, 0x52, 0xd9, 0x1f, 0xe5, 0xde, 0x38,
	0x3b, 0x2d, 0xaf, 0x4d, 0x4b, 0x4d, 0x0b, 0xdc, 0x31, 0xfb, 0x3a, 0x3a, 0x7c, 0x34, 0x82, 0x8c,
	0x4d, 0xa6, 0x60, 0xf8, 0x0d, 0x2a, 0xec, 0xf1, 0xf4, 0x30, 0xe6, 0x24, 0x1c, 0x5f, 0xe8, 0xc1,
	0xe5, 0xa0, 0xb6, 0x74, 0x3c, 0x06, 0x0d, 0xfd, 0x34, 0xb0, 0xee, 0xa3, 0x85, 0x9b, 0xdd, 0x71,
	0x11, 0xcd, 0xed, 0xb0, 0x43, 0xc6, 0x8f, 0x99, 0x93, 0xc3, 0x05, 0xf4, 0x9f, 0xfe, 0xec, 0x58,
	0x0a, 0x7f, 0xc7, 0xf4, 0x08, 0x8e, 0xad, 0x8a, 0xe6, 0x49, 0x42, 0x53, 0x08, 0x9d, 0x19, 0xdf,
	0x39, 0x1f, 0x56, 0xad, 0x8b, 0x61, 0xd5, 0xfa, 0x35, 0xac, 0x5a, 0xbf, 0x87, 0xd5, 0xdc, 0x07,
	0xab, 0x9b, 0xd7, 0x3f, 0xfd, 0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xc1, 0x0c, 0x53,
	0xc7, 0x04, 0x00, 0x00,
}
