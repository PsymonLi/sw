// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
	Package security is a generated protocol buffer package.

	It is generated from these files:
		app.proto
		fwprofile.proto
		networkencryption.proto
		securitygroup.proto
		sgpolicy.proto
		svc_security.proto
		x509.proto

	It has these top-level messages:
		ALG
		App
		AppSpec
		AppStatus
		Dns
		Ftp
		Icmp
		Msrpc
		Sunrpc
		FirewallProfile
		FirewallProfileSpec
		FirewallProfileStatus
		IPsecProtocolSpec
		TLSProtocolSpec
		TrafficEncryptionPolicy
		TrafficEncryptionPolicySpec
		TrafficEncryptionPolicyStatus
		SecurityGroup
		SecurityGroupSpec
		SecurityGroupStatus
		ProtoPort
		SGPolicy
		SGPolicyPropagationStatus
		SGPolicySpec
		SGPolicyStatus
		SGRule
		AppList
		AutoMsgAppWatchHelper
		AutoMsgCertificateWatchHelper
		AutoMsgFirewallProfileWatchHelper
		AutoMsgSGPolicyWatchHelper
		AutoMsgSecurityGroupWatchHelper
		AutoMsgTrafficEncryptionPolicyWatchHelper
		CertificateList
		FirewallProfileList
		SGPolicyList
		SecurityGroupList
		TrafficEncryptionPolicyList
		Certificate
		CertificateSpec
		CertificateStatus
*/
package security

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
type ALG_ALGType int32

const (
	//
	ALG_ICMP ALG_ALGType = 0
	//
	ALG_DNS ALG_ALGType = 1
	//
	ALG_FTP ALG_ALGType = 2
	//
	ALG_SunRPC ALG_ALGType = 3
	//
	ALG_MSRPC ALG_ALGType = 4
	//
	ALG_TFTP ALG_ALGType = 5
	//
	ALG_RTSP ALG_ALGType = 6
)

var ALG_ALGType_name = map[int32]string{
	0: "ICMP",
	1: "DNS",
	2: "FTP",
	3: "SunRPC",
	4: "MSRPC",
	5: "TFTP",
	6: "RTSP",
}
var ALG_ALGType_value = map[string]int32{
	"ICMP":   0,
	"DNS":    1,
	"FTP":    2,
	"SunRPC": 3,
	"MSRPC":  4,
	"TFTP":   5,
	"RTSP":   6,
}

func (x ALG_ALGType) String() string {
	return proto.EnumName(ALG_ALGType_name, int32(x))
}
func (ALG_ALGType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApp, []int{0, 0} }

// ALG specifies the application specific configuration for the list of applications mentioned below.
type ALG struct {
	//
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	//
	Icmp *Icmp `protobuf:"bytes,2,opt,name=Icmp,json=icmp,omitempty" json:"icmp,omitempty"`
	//
	Dns *Dns `protobuf:"bytes,3,opt,name=Dns,json=dns,omitempty" json:"dns,omitempty"`
	//
	Ftp *Ftp `protobuf:"bytes,4,opt,name=Ftp,json=ftp,omitempty" json:"ftp,omitempty"`
	//
	Sunrpc []*Sunrpc `protobuf:"bytes,5,rep,name=Sunrpc,json=sunrpc,omitempty" json:"sunrpc,omitempty"`
	//
	Msrpc []*Msrpc `protobuf:"bytes,6,rep,name=Msrpc,json=msrpc,omitempty" json:"msrpc,omitempty"`
}

func (m *ALG) Reset()                    { *m = ALG{} }
func (m *ALG) String() string            { return proto.CompactTextString(m) }
func (*ALG) ProtoMessage()               {}
func (*ALG) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

func (m *ALG) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ALG) GetIcmp() *Icmp {
	if m != nil {
		return m.Icmp
	}
	return nil
}

func (m *ALG) GetDns() *Dns {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *ALG) GetFtp() *Ftp {
	if m != nil {
		return m.Ftp
	}
	return nil
}

func (m *ALG) GetSunrpc() []*Sunrpc {
	if m != nil {
		return m.Sunrpc
	}
	return nil
}

func (m *ALG) GetMsrpc() []*Msrpc {
	if m != nil {
		return m.Msrpc
	}
	return nil
}

// App - Read-only objects auto-created by Venice
// One object per App that can be identified by Naples
type App struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec AppSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	//
	Status AppStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func (m *App) GetSpec() AppSpec {
	if m != nil {
		return m.Spec
	}
	return AppSpec{}
}

func (m *App) GetStatus() AppStatus {
	if m != nil {
		return m.Status
	}
	return AppStatus{}
}

// AppSpec - spec part of App object
type AppSpec struct {
	// list of (protocol, ports) pairs
	ProtoPorts []ProtoPort `protobuf:"bytes,1,rep,name=ProtoPorts,json=proto-ports,omitempty" json:"proto-ports,omitempty"`
	// Timeout specifies for how long the connection be kept before removing the flow entry, specified in string as '200s', '5m', etc.
	Timeout string `protobuf:"bytes,2,opt,name=Timeout,json=timeout,omitempty,proto3" json:"timeout,omitempty"`
	// ALG configuration if specified
	ALG *ALG `protobuf:"bytes,3,opt,name=ALG,json=alg,omitempty" json:"alg,omitempty"`
}

func (m *AppSpec) Reset()                    { *m = AppSpec{} }
func (m *AppSpec) String() string            { return proto.CompactTextString(m) }
func (*AppSpec) ProtoMessage()               {}
func (*AppSpec) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

func (m *AppSpec) GetProtoPorts() []ProtoPort {
	if m != nil {
		return m.ProtoPorts
	}
	return nil
}

func (m *AppSpec) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *AppSpec) GetALG() *ALG {
	if m != nil {
		return m.ALG
	}
	return nil
}

// AppStatus - status part of App object
type AppStatus struct {
	// List of security group policies attached to the app
	AttachedPolicies []string `protobuf:"bytes,1,rep,name=AttachedPolicies,json=attached-policies,omitempty" json:"attached-policies,omitempty"`
}

func (m *AppStatus) Reset()                    { *m = AppStatus{} }
func (m *AppStatus) String() string            { return proto.CompactTextString(m) }
func (*AppStatus) ProtoMessage()               {}
func (*AppStatus) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{3} }

func (m *AppStatus) GetAttachedPolicies() []string {
	if m != nil {
		return m.AttachedPolicies
	}
	return nil
}

// DNS ALG configuration
type Dns struct {
	// Drop packet if number of questions is more than one
	DropMultiQuestionPackets bool `protobuf:"varint,1,opt,name=DropMultiQuestionPackets,json=drop-multi-question-packets,omitempty,proto3" json:"drop-multi-question-packets,omitempty"`
	// Drop if domain name size is > 255 bytes
	DropLargeDomainNamePackets bool `protobuf:"varint,2,opt,name=DropLargeDomainNamePackets,json=drop-large-domain-name-packets,omitempty,proto3" json:"drop-large-domain-name-packets,omitempty"`
	// Drop if label length is 64 bytes or higher
	DropLongLabelPackets bool `protobuf:"varint,3,opt,name=DropLongLabelPackets,json=drop-long-label-packets,omitempty,proto3" json:"drop-long-label-packets,omitempty"`
	// Maximum message length, default value is 512, maximum specified user value is 8129
	MaxMessageLength uint32 `protobuf:"varint,5,opt,name=MaxMessageLength,json=max-message-length,omitempty,proto3" json:"max-message-length,omitempty"`
	// Timeout for DHCP Query, default 60s
	QueryResponseTimeout string `protobuf:"bytes,6,opt,name=QueryResponseTimeout,json=query-response-timeout,omitempty,proto3" json:"query-response-timeout,omitempty"`
}

func (m *Dns) Reset()                    { *m = Dns{} }
func (m *Dns) String() string            { return proto.CompactTextString(m) }
func (*Dns) ProtoMessage()               {}
func (*Dns) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{4} }

func (m *Dns) GetDropMultiQuestionPackets() bool {
	if m != nil {
		return m.DropMultiQuestionPackets
	}
	return false
}

func (m *Dns) GetDropLargeDomainNamePackets() bool {
	if m != nil {
		return m.DropLargeDomainNamePackets
	}
	return false
}

func (m *Dns) GetDropLongLabelPackets() bool {
	if m != nil {
		return m.DropLongLabelPackets
	}
	return false
}

func (m *Dns) GetMaxMessageLength() uint32 {
	if m != nil {
		return m.MaxMessageLength
	}
	return 0
}

func (m *Dns) GetQueryResponseTimeout() string {
	if m != nil {
		return m.QueryResponseTimeout
	}
	return ""
}

// FTP ALG configuration
type Ftp struct {
	// Allow Mismatch IP Address in the payload compared to what is present in the IP header
	AllowMismatchIPAddress bool `protobuf:"varint,1,opt,name=AllowMismatchIPAddress,json=allow-mismatch-ip-address,omitempty,proto3" json:"allow-mismatch-ip-address,omitempty"`
}

func (m *Ftp) Reset()                    { *m = Ftp{} }
func (m *Ftp) String() string            { return proto.CompactTextString(m) }
func (*Ftp) ProtoMessage()               {}
func (*Ftp) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{5} }

func (m *Ftp) GetAllowMismatchIPAddress() bool {
	if m != nil {
		return m.AllowMismatchIPAddress
	}
	return false
}

// ICMP ALG configuration
type Icmp struct {
	// ICMP Type
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	// ICMP Code is sub-command for a given ICMP Type
	Code string `protobuf:"bytes,2,opt,name=Code,json=code,omitempty,proto3" json:"code,omitempty"`
}

func (m *Icmp) Reset()                    { *m = Icmp{} }
func (m *Icmp) String() string            { return proto.CompactTextString(m) }
func (*Icmp) ProtoMessage()               {}
func (*Icmp) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{6} }

func (m *Icmp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Icmp) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// MSRPC ALG configuration
type Msrpc struct {
	// MSRPC Program identifier
	ProgramUUID string `protobuf:"bytes,1,opt,name=ProgramUUID,json=program-uuid,omitempty,proto3" json:"program-uuid,omitempty"`
	// Timeout for this program id
	Timeout string `protobuf:"bytes,2,opt,name=Timeout,json=timeout,omitempty,proto3" json:"timeout,omitempty"`
}

func (m *Msrpc) Reset()                    { *m = Msrpc{} }
func (m *Msrpc) String() string            { return proto.CompactTextString(m) }
func (*Msrpc) ProtoMessage()               {}
func (*Msrpc) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{7} }

func (m *Msrpc) GetProgramUUID() string {
	if m != nil {
		return m.ProgramUUID
	}
	return ""
}

func (m *Msrpc) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

// SunRPC ALG configuration
type Sunrpc struct {
	// RPC Program identifier
	ProgramID string `protobuf:"bytes,1,opt,name=ProgramID,json=program-id,omitempty,proto3" json:"program-id,omitempty"`
	// Timeout for this program id
	Timeout string `protobuf:"bytes,2,opt,name=Timeout,json=timeout,omitempty,proto3" json:"timeout,omitempty"`
}

func (m *Sunrpc) Reset()                    { *m = Sunrpc{} }
func (m *Sunrpc) String() string            { return proto.CompactTextString(m) }
func (*Sunrpc) ProtoMessage()               {}
func (*Sunrpc) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{8} }

func (m *Sunrpc) GetProgramID() string {
	if m != nil {
		return m.ProgramID
	}
	return ""
}

func (m *Sunrpc) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func init() {
	proto.RegisterType((*ALG)(nil), "security.ALG")
	proto.RegisterType((*App)(nil), "security.App")
	proto.RegisterType((*AppSpec)(nil), "security.AppSpec")
	proto.RegisterType((*AppStatus)(nil), "security.AppStatus")
	proto.RegisterType((*Dns)(nil), "security.Dns")
	proto.RegisterType((*Ftp)(nil), "security.Ftp")
	proto.RegisterType((*Icmp)(nil), "security.Icmp")
	proto.RegisterType((*Msrpc)(nil), "security.Msrpc")
	proto.RegisterType((*Sunrpc)(nil), "security.Sunrpc")
	proto.RegisterEnum("security.ALG_ALGType", ALG_ALGType_name, ALG_ALGType_value)
}
func (m *ALG) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ALG) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Icmp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Icmp.Size()))
		n1, err := m.Icmp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Dns != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Dns.Size()))
		n2, err := m.Dns.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Ftp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Ftp.Size()))
		n3, err := m.Ftp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Sunrpc) > 0 {
		for _, msg := range m.Sunrpc {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Msrpc) > 0 {
		for _, msg := range m.Msrpc {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *AppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProtoPorts) > 0 {
		for _, msg := range m.ProtoPorts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Timeout) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Timeout)))
		i += copy(dAtA[i:], m.Timeout)
	}
	if m.ALG != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.ALG.Size()))
		n8, err := m.ALG.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AppStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttachedPolicies) > 0 {
		for _, s := range m.AttachedPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Dns) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dns) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropMultiQuestionPackets {
		dAtA[i] = 0x8
		i++
		if m.DropMultiQuestionPackets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropLargeDomainNamePackets {
		dAtA[i] = 0x10
		i++
		if m.DropLargeDomainNamePackets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropLongLabelPackets {
		dAtA[i] = 0x18
		i++
		if m.DropLongLabelPackets {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxMessageLength != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.MaxMessageLength))
	}
	if len(m.QueryResponseTimeout) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.QueryResponseTimeout)))
		i += copy(dAtA[i:], m.QueryResponseTimeout)
	}
	return i, nil
}

func (m *Ftp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ftp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllowMismatchIPAddress {
		dAtA[i] = 0x8
		i++
		if m.AllowMismatchIPAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Icmp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Icmp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *Msrpc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msrpc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProgramUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ProgramUUID)))
		i += copy(dAtA[i:], m.ProgramUUID)
	}
	if len(m.Timeout) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Timeout)))
		i += copy(dAtA[i:], m.Timeout)
	}
	return i, nil
}

func (m *Sunrpc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sunrpc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProgramID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ProgramID)))
		i += copy(dAtA[i:], m.ProgramID)
	}
	if len(m.Timeout) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Timeout)))
		i += copy(dAtA[i:], m.Timeout)
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ALG) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Icmp != nil {
		l = m.Icmp.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Dns != nil {
		l = m.Dns.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Ftp != nil {
		l = m.Ftp.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if len(m.Sunrpc) > 0 {
		for _, e := range m.Sunrpc {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.Msrpc) > 0 {
		for _, e := range m.Msrpc {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *App) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovApp(uint64(l))
	return n
}

func (m *AppSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.ProtoPorts) > 0 {
		for _, e := range m.ProtoPorts {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.ALG != nil {
		l = m.ALG.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.AttachedPolicies) > 0 {
		for _, s := range m.AttachedPolicies {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *Dns) Size() (n int) {
	var l int
	_ = l
	if m.DropMultiQuestionPackets {
		n += 2
	}
	if m.DropLargeDomainNamePackets {
		n += 2
	}
	if m.DropLongLabelPackets {
		n += 2
	}
	if m.MaxMessageLength != 0 {
		n += 1 + sovApp(uint64(m.MaxMessageLength))
	}
	l = len(m.QueryResponseTimeout)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *Ftp) Size() (n int) {
	var l int
	_ = l
	if m.AllowMismatchIPAddress {
		n += 2
	}
	return n
}

func (m *Icmp) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *Msrpc) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProgramUUID)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *Sunrpc) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProgramID)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ALG) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ALG: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ALG: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Icmp == nil {
				m.Icmp = &Icmp{}
			}
			if err := m.Icmp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dns == nil {
				m.Dns = &Dns{}
			}
			if err := m.Dns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ftp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ftp == nil {
				m.Ftp = &Ftp{}
			}
			if err := m.Ftp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sunrpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sunrpc = append(m.Sunrpc, &Sunrpc{})
			if err := m.Sunrpc[len(m.Sunrpc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msrpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msrpc = append(m.Msrpc, &Msrpc{})
			if err := m.Msrpc[len(m.Msrpc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtoPorts = append(m.ProtoPorts, ProtoPort{})
			if err := m.ProtoPorts[len(m.ProtoPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ALG", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ALG == nil {
				m.ALG = &ALG{}
			}
			if err := m.ALG.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachedPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachedPolicies = append(m.AttachedPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dns) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dns: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dns: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropMultiQuestionPackets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropMultiQuestionPackets = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropLargeDomainNamePackets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropLargeDomainNamePackets = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropLongLabelPackets", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropLongLabelPackets = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMessageLength", wireType)
			}
			m.MaxMessageLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMessageLength |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResponseTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryResponseTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ftp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ftp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ftp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMismatchIPAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMismatchIPAddress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Icmp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Icmp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Icmp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msrpc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msrpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msrpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sunrpc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sunrpc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sunrpc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 1079 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x41, 0x53, 0xdb, 0x46,
	0x14, 0x46, 0xd8, 0x18, 0xbc, 0x14, 0x70, 0x16, 0x42, 0x0c, 0x4d, 0x91, 0xeb, 0x96, 0xa9, 0xd3,
	0x41, 0x36, 0x93, 0xce, 0xf4, 0xd0, 0x53, 0x2d, 0x0c, 0x0e, 0x33, 0x76, 0x50, 0xb0, 0xd3, 0xe9,
	0xa5, 0x87, 0x45, 0x5a, 0x84, 0x52, 0x69, 0x77, 0xa3, 0x5d, 0x35, 0x71, 0x3b, 0x3d, 0x75, 0x9a,
	0x7f, 0xd1, 0x99, 0x5e, 0x7a, 0xc9, 0x2f, 0xe8, 0x4f, 0xe0, 0x98, 0xe9, 0x0f, 0xd0, 0x74, 0x38,
	0xfa, 0x4f, 0xb4, 0xb3, 0x2b, 0x19, 0x4b, 0x40, 0x12, 0x2e, 0xb9, 0xe9, 0xbd, 0xf7, 0xbd, 0xef,
	0x7b, 0x7a, 0x6f, 0xdf, 0x2e, 0x28, 0x23, 0xc6, 0x9a, 0x2c, 0xa4, 0x82, 0xc2, 0x05, 0x8e, 0xed,
	0x28, 0xf4, 0xc4, 0x68, 0xf3, 0xbe, 0x4b, 0xa9, 0xeb, 0xe3, 0x16, 0x62, 0x5e, 0x0b, 0x11, 0x42,
	0x05, 0x12, 0x1e, 0x25, 0x3c, 0xc1, 0x6d, 0xee, 0xbb, 0x9e, 0x38, 0x8b, 0x4e, 0x9a, 0x36, 0x0d,
	0x5a, 0x0c, 0x13, 0x8e, 0x88, 0x43, 0x5b, 0xfc, 0x45, 0xeb, 0x27, 0x4c, 0x3c, 0x1b, 0xb7, 0x22,
	0xe1, 0xf9, 0x5c, 0xa6, 0xba, 0x98, 0x64, 0xb3, 0x5b, 0x1e, 0xb1, 0xfd, 0xc8, 0xc1, 0x13, 0x1a,
	0x23, 0x43, 0xe3, 0x52, 0x97, 0xb6, 0x94, 0xfb, 0x24, 0x3a, 0x55, 0x96, 0x32, 0xd4, 0x57, 0x0a,
	0xdf, 0x7e, 0x8b, 0xaa, 0xac, 0x31, 0xc0, 0x02, 0xa5, 0xb0, 0x65, 0xee, 0x32, 0xea, 0x7b, 0xf6,
	0x28, 0xb1, 0xeb, 0xbf, 0x15, 0x41, 0xa1, 0xdd, 0xeb, 0xc2, 0x47, 0xa0, 0x38, 0x1c, 0x31, 0x5c,
	0xd5, 0x6a, 0x5a, 0xa3, 0x6c, 0x7e, 0xf9, 0xfa, 0xd5, 0xc6, 0xda, 0x40, 0x84, 0xfb, 0x24, 0x0a,
	0x1a, 0xed, 0x5e, 0xb7, 0xd9, 0xee, 0x75, 0x65, 0xf8, 0xc1, 0x38, 0xd6, 0x97, 0xc5, 0x88, 0xe1,
	0x1d, 0x1a, 0x78, 0x02, 0x07, 0x4c, 0x8c, 0x8e, 0xaf, 0xd8, 0xb0, 0x03, 0x8a, 0x87, 0x76, 0xc0,
	0xaa, 0xb3, 0x35, 0xad, 0xb1, 0xf8, 0x70, 0xb9, 0x39, 0xe9, 0x5a, 0x53, 0x7a, 0xcd, 0xf5, 0xf3,
	0x58, 0xd7, 0x24, 0x8b, 0x67, 0x07, 0x2c, 0xcb, 0x92, 0xb7, 0xe1, 0xb7, 0xa0, 0xd0, 0x21, 0xbc,
	0x5a, 0x50, 0x24, 0x4b, 0x53, 0x92, 0x0e, 0xe1, 0xe6, 0xdd, 0x94, 0x63, 0xc9, 0x21, 0x3c, 0x43,
	0x91, 0x37, 0x25, 0xc3, 0x81, 0x60, 0xd5, 0xe2, 0x55, 0x86, 0x03, 0xc1, 0xa6, 0x0c, 0xa7, 0x22,
	0x5b, 0x44, 0xde, 0x84, 0x3d, 0x50, 0x1a, 0x44, 0x24, 0x64, 0x76, 0x75, 0xae, 0x56, 0x68, 0x2c,
	0x3e, 0xac, 0x4c, 0x49, 0x12, 0xbf, 0x59, 0x4d, 0x79, 0x2a, 0x5c, 0xd9, 0x19, 0xaa, 0x6b, 0x1e,
	0xf8, 0x08, 0xcc, 0xf5, 0xb9, 0x24, 0x2b, 0x29, 0xb2, 0x95, 0x29, 0x99, 0x72, 0x9b, 0xf7, 0x52,
	0xae, 0x95, 0x80, 0xe7, 0xa9, 0xae, 0x3a, 0xea, 0x16, 0x98, 0x4f, 0xe7, 0x01, 0x17, 0x40, 0xf1,
	0x70, 0xaf, 0x6f, 0x55, 0x66, 0xe0, 0x3c, 0x28, 0x74, 0x1e, 0x0f, 0x2a, 0x9a, 0xfc, 0x38, 0x18,
	0x5a, 0x95, 0x59, 0x08, 0x54, 0xf9, 0xc7, 0xd6, 0x5e, 0xa5, 0x00, 0xcb, 0x60, 0xae, 0x3f, 0x90,
	0x9f, 0x45, 0x99, 0x32, 0x94, 0x80, 0x39, 0xf9, 0x75, 0x3c, 0x1c, 0x58, 0x95, 0x52, 0xfd, 0xef,
	0x59, 0x50, 0x68, 0x33, 0x06, 0xbf, 0x06, 0xda, 0x50, 0x1d, 0x01, 0xd9, 0x31, 0xc4, 0xbc, 0xa6,
	0x14, 0xe9, 0x63, 0x81, 0xcc, 0xd5, 0xf3, 0x58, 0x9f, 0x79, 0x93, 0x54, 0x38, 0xbf, 0xe3, 0x11,
	0xdf, 0x23, 0xf8, 0x78, 0xf2, 0x01, 0x0f, 0x80, 0x76, 0x94, 0x0e, 0x7c, 0x45, 0xe5, 0x1d, 0x9d,
	0x3c, 0xc3, 0xb6, 0x50, 0x99, 0x9b, 0x99, 0xcc, 0x65, 0x79, 0x12, 0xb3, 0x53, 0xcf, 0xdb, 0xb0,
	0x0b, 0x8a, 0x03, 0x86, 0xed, 0x74, 0xec, 0x77, 0xa6, 0x2d, 0x6a, 0x33, 0x26, 0x03, 0xea, 0xf8,
	0xcc, 0x48, 0x22, 0xce, 0x70, 0xb6, 0x47, 0x57, 0x6c, 0x78, 0x04, 0x4a, 0x03, 0x81, 0x44, 0xc4,
	0xd3, 0xf9, 0xaf, 0xe6, 0xa9, 0x54, 0x48, 0x4d, 0x6f, 0x46, 0x4d, 0x4f, 0xd9, 0xb9, 0xe9, 0x5d,
	0xf1, 0x7c, 0x73, 0xef, 0x9f, 0xdf, 0x37, 0x56, 0xc1, 0x62, 0xeb, 0x97, 0xa3, 0xe6, 0x10, 0x13,
	0x44, 0xc4, 0xaf, 0xb0, 0x88, 0x18, 0xe3, 0xf5, 0xff, 0x34, 0x30, 0x9f, 0x56, 0x07, 0x7f, 0x00,
	0xc0, 0x92, 0x5b, 0x65, 0xd1, 0x50, 0xf0, 0xaa, 0xa6, 0xe6, 0x9c, 0x51, 0xbe, 0x8c, 0x99, 0x9f,
	0xa4, 0xca, 0x77, 0xd5, 0x12, 0x1a, 0x4c, 0xe2, 0x33, 0xf2, 0x37, 0xbb, 0xe1, 0x00, 0xcc, 0x0f,
	0xbd, 0x00, 0xd3, 0x48, 0xa8, 0x5e, 0x97, 0xcd, 0xd6, 0xeb, 0x57, 0x1b, 0xeb, 0xfb, 0x32, 0x76,
	0x14, 0x36, 0x3a, 0x51, 0xa8, 0x2e, 0x92, 0xc6, 0xee, 0xce, 0xee, 0x03, 0xb9, 0xa8, 0x77, 0x44,
	0x02, 0xce, 0x10, 0x5f, 0x77, 0xc9, 0x35, 0x69, 0xf7, 0xba, 0xd7, 0x17, 0xad, 0xdd, 0xeb, 0x4e,
	0xd7, 0x04, 0xf9, 0x6e, 0x76, 0x4d, 0x72, 0x66, 0xdd, 0x06, 0xe5, 0xcb, 0x9e, 0xc2, 0xef, 0x40,
	0xa5, 0x2d, 0x04, 0xb2, 0xcf, 0xb0, 0x63, 0xc9, 0x7b, 0xc6, 0xc3, 0x49, 0x23, 0xca, 0xa6, 0x3e,
	0x8e, 0xf5, 0x8f, 0x51, 0x1a, 0x33, 0x58, 0x1a, 0xcc, 0xd0, 0xbe, 0x2b, 0x58, 0xff, 0xa3, 0xa8,
	0x2e, 0x04, 0x18, 0x82, 0x6a, 0x27, 0xa4, 0xac, 0x1f, 0xf9, 0xc2, 0x7b, 0x12, 0x61, 0x2e, 0xff,
	0xd8, 0x42, 0xf6, 0x8f, 0x58, 0x35, 0x5c, 0x6b, 0x2c, 0x98, 0xf2, 0xd7, 0xb7, 0x9d, 0x90, 0x32,
	0x23, 0x90, 0x20, 0xe3, 0x79, 0x8a, 0x32, 0x58, 0x02, 0xcb, 0x28, 0xde, 0x0e, 0x06, 0x7f, 0x06,
	0x9b, 0x52, 0xb3, 0x87, 0x42, 0x17, 0x77, 0x68, 0x80, 0x3c, 0xf2, 0x18, 0x05, 0x78, 0xa2, 0x3a,
	0xab, 0x54, 0x77, 0xc6, 0xb1, 0xde, 0x50, 0x74, 0xbe, 0x84, 0x19, 0x8e, 0xc2, 0x19, 0x04, 0x05,
	0xf8, 0x06, 0xe1, 0x5b, 0x23, 0xe1, 0x29, 0x58, 0x53, 0xda, 0x94, 0xb8, 0x3d, 0x74, 0x82, 0xfd,
	0x89, 0x6a, 0x41, 0xa9, 0x6e, 0x8f, 0x63, 0xfd, 0xd3, 0x84, 0x8b, 0x12, 0xd7, 0xf0, 0x25, 0xe2,
	0x06, 0xb9, 0xf7, 0x43, 0xe0, 0xf7, 0xa0, 0xd2, 0x47, 0x2f, 0xfb, 0x98, 0x73, 0xe4, 0xe2, 0x1e,
	0x26, 0xae, 0x38, 0xab, 0xce, 0xd5, 0xb4, 0xc6, 0x92, 0x59, 0x1b, 0xc7, 0xfa, 0xfd, 0x00, 0xbd,
	0x34, 0x82, 0x24, 0x68, 0xf8, 0x2a, 0x9a, 0xa1, 0x7f, 0x67, 0x14, 0x3a, 0x60, 0xed, 0x49, 0x84,
	0xc3, 0xd1, 0x31, 0xe6, 0x8c, 0x12, 0x8e, 0x27, 0x47, 0xb8, 0xa4, 0x8e, 0xf0, 0xe7, 0xe3, 0x58,
	0xaf, 0x3d, 0x97, 0x71, 0x23, 0x4c, 0x01, 0xc6, 0xf5, 0x73, 0xfb, 0x5e, 0x44, 0x9d, 0xab, 0xdb,
	0x1e, 0xfa, 0x60, 0xbd, 0xed, 0xfb, 0xf4, 0x45, 0xdf, 0xe3, 0x01, 0x12, 0xf6, 0xd9, 0xa1, 0xd5,
	0x76, 0x9c, 0x10, 0xf3, 0xc9, 0xe1, 0xf8, 0x62, 0x1c, 0xeb, 0x9f, 0x21, 0x89, 0x30, 0x82, 0x14,
	0x62, 0x78, 0xcc, 0x40, 0x09, 0x28, 0xa3, 0x78, 0x1b, 0x50, 0xfd, 0x59, 0xf2, 0xd4, 0xc1, 0xdd,
	0xdc, 0xe3, 0x09, 0x6f, 0xf1, 0x48, 0xee, 0x82, 0xe2, 0x1e, 0x75, 0x70, 0xba, 0xc7, 0x2a, 0xc3,
	0xa6, 0x4e, 0x2e, 0x23, 0x6f, 0xd7, 0xff, 0xd2, 0xd2, 0xf7, 0x03, 0x76, 0xc1, 0xa2, 0x15, 0x52,
	0x37, 0x44, 0xc1, 0xd3, 0xa7, 0x87, 0x9d, 0x54, 0x74, 0x73, 0x1c, 0xeb, 0xeb, 0x2c, 0x71, 0x1b,
	0x51, 0xe4, 0x39, 0x19, 0xaa, 0xb7, 0xf8, 0x3f, 0xc8, 0x7d, 0x52, 0xff, 0x53, 0x9b, 0xbc, 0x9a,
	0xb0, 0x0d, 0xca, 0x69, 0xa1, 0x97, 0x65, 0x56, 0xc7, 0xb1, 0xbe, 0x36, 0x29, 0x27, 0x57, 0xe4,
	0x8d, 0xde, 0x0f, 0x52, 0xa2, 0xf9, 0xd1, 0xf9, 0xc5, 0x96, 0xf6, 0xe6, 0x62, 0x4b, 0xfb, 0xf7,
	0x62, 0x4b, 0xb3, 0xb4, 0x93, 0x92, 0xba, 0x6e, 0xbf, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3a,
	0xcc, 0xae, 0x82, 0xec, 0x09, 0x00, 0x00,
}
