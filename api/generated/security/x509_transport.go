// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: x509.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPCertificate(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificate(_ context.Context, r *http.Request) (interface{}, error) {
	var req Certificate
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificate encodes GRPC request
func EncodeGrpcReqCertificate(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Certificate)
	return req, nil
}

// DecodeGrpcReqCertificate decodes GRPC request
func DecodeGrpcReqCertificate(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Certificate)
	return req, nil
}

// EncodeGrpcRespCertificate encodes GRC response
func EncodeGrpcRespCertificate(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificate decodes GRPC response
func DecodeGrpcRespCertificate(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateSpec encodes GRPC request
func EncodeGrpcReqCertificateSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateSpec)
	return req, nil
}

// DecodeGrpcReqCertificateSpec decodes GRPC request
func DecodeGrpcReqCertificateSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateSpec)
	return req, nil
}

// EncodeGrpcRespCertificateSpec encodes GRC response
func EncodeGrpcRespCertificateSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateSpec decodes GRPC response
func DecodeGrpcRespCertificateSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateStatus encodes GRPC request
func EncodeGrpcReqCertificateStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateStatus)
	return req, nil
}

// DecodeGrpcReqCertificateStatus decodes GRPC request
func DecodeGrpcReqCertificateStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateStatus)
	return req, nil
}

// EncodeGrpcRespCertificateStatus encodes GRC response
func EncodeGrpcRespCertificateStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateStatus decodes GRPC response
func DecodeGrpcRespCertificateStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
