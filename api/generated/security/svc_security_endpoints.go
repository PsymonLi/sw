// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: svc_security.proto
*/
package security

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareSecurityV1Client add middleware to the client
type MiddlewareSecurityV1Client func(ServiceSecurityV1Client) ServiceSecurityV1Client

// EndpointsSecurityV1Client is the endpoints for the client
type EndpointsSecurityV1Client struct {
	Client                         SecurityV1Client
	AutoWatchSvcSecurityV1Endpoint endpoint.Endpoint

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddFirewallProfileEndpoint            endpoint.Endpoint
	AutoAddNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteFirewallProfileEndpoint         endpoint.Endpoint
	AutoDeleteNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetFirewallProfileEndpoint            endpoint.Endpoint
	AutoGetNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoLabelAppEndpoint                      endpoint.Endpoint
	AutoLabelCertificateEndpoint              endpoint.Endpoint
	AutoLabelFirewallProfileEndpoint          endpoint.Endpoint
	AutoLabelNetworkSecurityPolicyEndpoint    endpoint.Endpoint
	AutoLabelSecurityGroupEndpoint            endpoint.Endpoint
	AutoLabelTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListFirewallProfileEndpoint           endpoint.Endpoint
	AutoListNetworkSecurityPolicyEndpoint     endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateFirewallProfileEndpoint         endpoint.Endpoint
	AutoUpdateNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
}

// EndpointsSecurityV1RestClient is the REST client
type EndpointsSecurityV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddFirewallProfileEndpoint            endpoint.Endpoint
	AutoAddNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteFirewallProfileEndpoint         endpoint.Endpoint
	AutoDeleteNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetFirewallProfileEndpoint            endpoint.Endpoint
	AutoGetNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoLabelAppEndpoint                      endpoint.Endpoint
	AutoLabelCertificateEndpoint              endpoint.Endpoint
	AutoLabelFirewallProfileEndpoint          endpoint.Endpoint
	AutoLabelNetworkSecurityPolicyEndpoint    endpoint.Endpoint
	AutoLabelSecurityGroupEndpoint            endpoint.Endpoint
	AutoLabelTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListFirewallProfileEndpoint           endpoint.Endpoint
	AutoListNetworkSecurityPolicyEndpoint     endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateFirewallProfileEndpoint         endpoint.Endpoint
	AutoUpdateNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoWatchAppEndpoint                      endpoint.Endpoint
	AutoWatchCertificateEndpoint              endpoint.Endpoint
	AutoWatchFirewallProfileEndpoint          endpoint.Endpoint
	AutoWatchNetworkSecurityPolicyEndpoint    endpoint.Endpoint
	AutoWatchSecurityGroupEndpoint            endpoint.Endpoint
	AutoWatchSvcSecurityV1Endpoint            endpoint.Endpoint
	AutoWatchTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareSecurityV1Server adds middle ware to the server
type MiddlewareSecurityV1Server func(ServiceSecurityV1Server) ServiceSecurityV1Server

// EndpointsSecurityV1Server is the server endpoints
type EndpointsSecurityV1Server struct {
	svcWatchHandlerSecurityV1 func(options *api.AggWatchOptions, stream grpc.ServerStream) error

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddFirewallProfileEndpoint            endpoint.Endpoint
	AutoAddNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteFirewallProfileEndpoint         endpoint.Endpoint
	AutoDeleteNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetFirewallProfileEndpoint            endpoint.Endpoint
	AutoGetNetworkSecurityPolicyEndpoint      endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoLabelAppEndpoint                      endpoint.Endpoint
	AutoLabelCertificateEndpoint              endpoint.Endpoint
	AutoLabelFirewallProfileEndpoint          endpoint.Endpoint
	AutoLabelNetworkSecurityPolicyEndpoint    endpoint.Endpoint
	AutoLabelSecurityGroupEndpoint            endpoint.Endpoint
	AutoLabelTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListFirewallProfileEndpoint           endpoint.Endpoint
	AutoListNetworkSecurityPolicyEndpoint     endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateFirewallProfileEndpoint         endpoint.Endpoint
	AutoUpdateNetworkSecurityPolicyEndpoint   endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint

	watchHandlerSecurityGroup           func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerNetworkSecurityPolicy   func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerApp                     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerFirewallProfile         func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerCertificate             func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTrafficEncryptionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddApp is endpoint for AutoAddApp
func (e EndpointsSecurityV1Client) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoAddApp struct {
	V   App
	Err error
}

// AutoAddCertificate is endpoint for AutoAddCertificate
func (e EndpointsSecurityV1Client) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoAddCertificate struct {
	V   Certificate
	Err error
}

// AutoAddFirewallProfile is endpoint for AutoAddFirewallProfile
func (e EndpointsSecurityV1Client) AutoAddFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	resp, err := e.AutoAddFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfile{}, err
	}
	return resp.(*FirewallProfile), nil
}

type respSecurityV1AutoAddFirewallProfile struct {
	V   FirewallProfile
	Err error
}

// AutoAddNetworkSecurityPolicy is endpoint for AutoAddNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoAddNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	resp, err := e.AutoAddNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicy{}, err
	}
	return resp.(*NetworkSecurityPolicy), nil
}

type respSecurityV1AutoAddNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicy
	Err error
}

// AutoAddSecurityGroup is endpoint for AutoAddSecurityGroup
func (e EndpointsSecurityV1Client) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoAddSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoAddSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoAddTrafficEncryptionPolicy is endpoint for AutoAddTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoAddTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoDeleteApp is endpoint for AutoDeleteApp
func (e EndpointsSecurityV1Client) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoDeleteApp struct {
	V   App
	Err error
}

// AutoDeleteCertificate is endpoint for AutoDeleteCertificate
func (e EndpointsSecurityV1Client) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoDeleteCertificate struct {
	V   Certificate
	Err error
}

// AutoDeleteFirewallProfile is endpoint for AutoDeleteFirewallProfile
func (e EndpointsSecurityV1Client) AutoDeleteFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	resp, err := e.AutoDeleteFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfile{}, err
	}
	return resp.(*FirewallProfile), nil
}

type respSecurityV1AutoDeleteFirewallProfile struct {
	V   FirewallProfile
	Err error
}

// AutoDeleteNetworkSecurityPolicy is endpoint for AutoDeleteNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoDeleteNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	resp, err := e.AutoDeleteNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicy{}, err
	}
	return resp.(*NetworkSecurityPolicy), nil
}

type respSecurityV1AutoDeleteNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicy
	Err error
}

// AutoDeleteSecurityGroup is endpoint for AutoDeleteSecurityGroup
func (e EndpointsSecurityV1Client) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoDeleteSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoDeleteSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoDeleteTrafficEncryptionPolicy is endpoint for AutoDeleteTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoDeleteTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoGetApp is endpoint for AutoGetApp
func (e EndpointsSecurityV1Client) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoGetApp struct {
	V   App
	Err error
}

// AutoGetCertificate is endpoint for AutoGetCertificate
func (e EndpointsSecurityV1Client) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoGetCertificate struct {
	V   Certificate
	Err error
}

// AutoGetFirewallProfile is endpoint for AutoGetFirewallProfile
func (e EndpointsSecurityV1Client) AutoGetFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	resp, err := e.AutoGetFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfile{}, err
	}
	return resp.(*FirewallProfile), nil
}

type respSecurityV1AutoGetFirewallProfile struct {
	V   FirewallProfile
	Err error
}

// AutoGetNetworkSecurityPolicy is endpoint for AutoGetNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoGetNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	resp, err := e.AutoGetNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicy{}, err
	}
	return resp.(*NetworkSecurityPolicy), nil
}

type respSecurityV1AutoGetNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicy
	Err error
}

// AutoGetSecurityGroup is endpoint for AutoGetSecurityGroup
func (e EndpointsSecurityV1Client) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoGetSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoGetSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoGetTrafficEncryptionPolicy is endpoint for AutoGetTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoGetTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoLabelApp is endpoint for AutoLabelApp
func (e EndpointsSecurityV1Client) AutoLabelApp(ctx context.Context, in *api.Label) (*App, error) {
	resp, err := e.AutoLabelAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoLabelApp struct {
	V   App
	Err error
}

// AutoLabelCertificate is endpoint for AutoLabelCertificate
func (e EndpointsSecurityV1Client) AutoLabelCertificate(ctx context.Context, in *api.Label) (*Certificate, error) {
	resp, err := e.AutoLabelCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoLabelCertificate struct {
	V   Certificate
	Err error
}

// AutoLabelFirewallProfile is endpoint for AutoLabelFirewallProfile
func (e EndpointsSecurityV1Client) AutoLabelFirewallProfile(ctx context.Context, in *api.Label) (*FirewallProfile, error) {
	resp, err := e.AutoLabelFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfile{}, err
	}
	return resp.(*FirewallProfile), nil
}

type respSecurityV1AutoLabelFirewallProfile struct {
	V   FirewallProfile
	Err error
}

// AutoLabelNetworkSecurityPolicy is endpoint for AutoLabelNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoLabelNetworkSecurityPolicy(ctx context.Context, in *api.Label) (*NetworkSecurityPolicy, error) {
	resp, err := e.AutoLabelNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicy{}, err
	}
	return resp.(*NetworkSecurityPolicy), nil
}

type respSecurityV1AutoLabelNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicy
	Err error
}

// AutoLabelSecurityGroup is endpoint for AutoLabelSecurityGroup
func (e EndpointsSecurityV1Client) AutoLabelSecurityGroup(ctx context.Context, in *api.Label) (*SecurityGroup, error) {
	resp, err := e.AutoLabelSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoLabelSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoLabelTrafficEncryptionPolicy is endpoint for AutoLabelTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoLabelTrafficEncryptionPolicy(ctx context.Context, in *api.Label) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoLabelTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoLabelTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoListApp is endpoint for AutoListApp
func (e EndpointsSecurityV1Client) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (*AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return &AppList{}, err
	}
	return resp.(*AppList), nil
}

type respSecurityV1AutoListApp struct {
	V   AppList
	Err error
}

// AutoListCertificate is endpoint for AutoListCertificate
func (e EndpointsSecurityV1Client) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (*CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return &CertificateList{}, err
	}
	return resp.(*CertificateList), nil
}

type respSecurityV1AutoListCertificate struct {
	V   CertificateList
	Err error
}

// AutoListFirewallProfile is endpoint for AutoListFirewallProfile
func (e EndpointsSecurityV1Client) AutoListFirewallProfile(ctx context.Context, in *api.ListWatchOptions) (*FirewallProfileList, error) {
	resp, err := e.AutoListFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfileList{}, err
	}
	return resp.(*FirewallProfileList), nil
}

type respSecurityV1AutoListFirewallProfile struct {
	V   FirewallProfileList
	Err error
}

// AutoListNetworkSecurityPolicy is endpoint for AutoListNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoListNetworkSecurityPolicy(ctx context.Context, in *api.ListWatchOptions) (*NetworkSecurityPolicyList, error) {
	resp, err := e.AutoListNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicyList{}, err
	}
	return resp.(*NetworkSecurityPolicyList), nil
}

type respSecurityV1AutoListNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicyList
	Err error
}

// AutoListSecurityGroup is endpoint for AutoListSecurityGroup
func (e EndpointsSecurityV1Client) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (*SecurityGroupList, error) {
	resp, err := e.AutoListSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroupList{}, err
	}
	return resp.(*SecurityGroupList), nil
}

type respSecurityV1AutoListSecurityGroup struct {
	V   SecurityGroupList
	Err error
}

// AutoListTrafficEncryptionPolicy is endpoint for AutoListTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicyList{}, err
	}
	return resp.(*TrafficEncryptionPolicyList), nil
}

type respSecurityV1AutoListTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicyList
	Err error
}

// AutoUpdateApp is endpoint for AutoUpdateApp
func (e EndpointsSecurityV1Client) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoUpdateApp struct {
	V   App
	Err error
}

// AutoUpdateCertificate is endpoint for AutoUpdateCertificate
func (e EndpointsSecurityV1Client) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoUpdateCertificate struct {
	V   Certificate
	Err error
}

// AutoUpdateFirewallProfile is endpoint for AutoUpdateFirewallProfile
func (e EndpointsSecurityV1Client) AutoUpdateFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	resp, err := e.AutoUpdateFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return &FirewallProfile{}, err
	}
	return resp.(*FirewallProfile), nil
}

type respSecurityV1AutoUpdateFirewallProfile struct {
	V   FirewallProfile
	Err error
}

// AutoUpdateNetworkSecurityPolicy is endpoint for AutoUpdateNetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoUpdateNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	resp, err := e.AutoUpdateNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return &NetworkSecurityPolicy{}, err
	}
	return resp.(*NetworkSecurityPolicy), nil
}

type respSecurityV1AutoUpdateNetworkSecurityPolicy struct {
	V   NetworkSecurityPolicy
	Err error
}

// AutoUpdateSecurityGroup is endpoint for AutoUpdateSecurityGroup
func (e EndpointsSecurityV1Client) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoUpdateSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoUpdateSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoUpdateTrafficEncryptionPolicy is endpoint for AutoUpdateTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoUpdateTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

func (e EndpointsSecurityV1Client) AutoWatchSvcSecurityV1(ctx context.Context, in *api.AggWatchOptions) (SecurityV1_AutoWatchSvcSecurityV1Client, error) {
	return e.Client.AutoWatchSvcSecurityV1(ctx, in)
}

// AutoWatchSecurityGroup performs Watch for SecurityGroup
func (e EndpointsSecurityV1Client) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchSecurityGroupClient, error) {
	return e.Client.AutoWatchSecurityGroup(ctx, in)
}

// AutoWatchNetworkSecurityPolicy performs Watch for NetworkSecurityPolicy
func (e EndpointsSecurityV1Client) AutoWatchNetworkSecurityPolicy(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchNetworkSecurityPolicyClient, error) {
	return e.Client.AutoWatchNetworkSecurityPolicy(ctx, in)
}

// AutoWatchApp performs Watch for App
func (e EndpointsSecurityV1Client) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchAppClient, error) {
	return e.Client.AutoWatchApp(ctx, in)
}

// AutoWatchFirewallProfile performs Watch for FirewallProfile
func (e EndpointsSecurityV1Client) AutoWatchFirewallProfile(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchFirewallProfileClient, error) {
	return e.Client.AutoWatchFirewallProfile(ctx, in)
}

// AutoWatchCertificate performs Watch for Certificate
func (e EndpointsSecurityV1Client) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchCertificateClient, error) {
	return e.Client.AutoWatchCertificate(ctx, in)
}

// AutoWatchTrafficEncryptionPolicy performs Watch for TrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	return e.Client.AutoWatchTrafficEncryptionPolicy(ctx, in)
}

// AutoAddApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoAddAppEndpoint creates  AutoAddApp endpoints for the service
func MakeSecurityV1AutoAddAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoAddApp(ctx, *req)
		return respSecurityV1AutoAddApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddApp")(f)
}

// AutoAddCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoAddCertificateEndpoint creates  AutoAddCertificate endpoints for the service
func MakeSecurityV1AutoAddCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoAddCertificate(ctx, *req)
		return respSecurityV1AutoAddCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddCertificate")(f)
}

// AutoAddFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddFirewallProfile(ctx context.Context, in FirewallProfile) (FirewallProfile, error) {
	resp, err := e.AutoAddFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfile{}, err
	}
	return *resp.(*FirewallProfile), nil
}

// MakeSecurityV1AutoAddFirewallProfileEndpoint creates  AutoAddFirewallProfile endpoints for the service
func MakeSecurityV1AutoAddFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FirewallProfile)
		v, err := s.AutoAddFirewallProfile(ctx, *req)
		return respSecurityV1AutoAddFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddFirewallProfile")(f)
}

// AutoAddNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (NetworkSecurityPolicy, error) {
	resp, err := e.AutoAddNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicy{}, err
	}
	return *resp.(*NetworkSecurityPolicy), nil
}

// MakeSecurityV1AutoAddNetworkSecurityPolicyEndpoint creates  AutoAddNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoAddNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkSecurityPolicy)
		v, err := s.AutoAddNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoAddNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddNetworkSecurityPolicy")(f)
}

// AutoAddSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoAddSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoAddSecurityGroupEndpoint creates  AutoAddSecurityGroup endpoints for the service
func MakeSecurityV1AutoAddSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoAddSecurityGroup(ctx, *req)
		return respSecurityV1AutoAddSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddSecurityGroup")(f)
}

// AutoAddTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint creates  AutoAddTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoAddTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoAddTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddTrafficEncryptionPolicy")(f)
}

// AutoDeleteApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoDeleteAppEndpoint creates  AutoDeleteApp endpoints for the service
func MakeSecurityV1AutoDeleteAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoDeleteApp(ctx, *req)
		return respSecurityV1AutoDeleteApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteApp")(f)
}

// AutoDeleteCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoDeleteCertificateEndpoint creates  AutoDeleteCertificate endpoints for the service
func MakeSecurityV1AutoDeleteCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoDeleteCertificate(ctx, *req)
		return respSecurityV1AutoDeleteCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteCertificate")(f)
}

// AutoDeleteFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteFirewallProfile(ctx context.Context, in FirewallProfile) (FirewallProfile, error) {
	resp, err := e.AutoDeleteFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfile{}, err
	}
	return *resp.(*FirewallProfile), nil
}

// MakeSecurityV1AutoDeleteFirewallProfileEndpoint creates  AutoDeleteFirewallProfile endpoints for the service
func MakeSecurityV1AutoDeleteFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FirewallProfile)
		v, err := s.AutoDeleteFirewallProfile(ctx, *req)
		return respSecurityV1AutoDeleteFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteFirewallProfile")(f)
}

// AutoDeleteNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (NetworkSecurityPolicy, error) {
	resp, err := e.AutoDeleteNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicy{}, err
	}
	return *resp.(*NetworkSecurityPolicy), nil
}

// MakeSecurityV1AutoDeleteNetworkSecurityPolicyEndpoint creates  AutoDeleteNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoDeleteNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkSecurityPolicy)
		v, err := s.AutoDeleteNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoDeleteNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteNetworkSecurityPolicy")(f)
}

// AutoDeleteSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoDeleteSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoDeleteSecurityGroupEndpoint creates  AutoDeleteSecurityGroup endpoints for the service
func MakeSecurityV1AutoDeleteSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoDeleteSecurityGroup(ctx, *req)
		return respSecurityV1AutoDeleteSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteSecurityGroup")(f)
}

// AutoDeleteTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint creates  AutoDeleteTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoDeleteTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoDeleteTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteTrafficEncryptionPolicy")(f)
}

// AutoGetApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoGetAppEndpoint creates  AutoGetApp endpoints for the service
func MakeSecurityV1AutoGetAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoGetApp(ctx, *req)
		return respSecurityV1AutoGetApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetApp")(f)
}

// AutoGetCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoGetCertificateEndpoint creates  AutoGetCertificate endpoints for the service
func MakeSecurityV1AutoGetCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoGetCertificate(ctx, *req)
		return respSecurityV1AutoGetCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetCertificate")(f)
}

// AutoGetFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetFirewallProfile(ctx context.Context, in FirewallProfile) (FirewallProfile, error) {
	resp, err := e.AutoGetFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfile{}, err
	}
	return *resp.(*FirewallProfile), nil
}

// MakeSecurityV1AutoGetFirewallProfileEndpoint creates  AutoGetFirewallProfile endpoints for the service
func MakeSecurityV1AutoGetFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FirewallProfile)
		v, err := s.AutoGetFirewallProfile(ctx, *req)
		return respSecurityV1AutoGetFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetFirewallProfile")(f)
}

// AutoGetNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (NetworkSecurityPolicy, error) {
	resp, err := e.AutoGetNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicy{}, err
	}
	return *resp.(*NetworkSecurityPolicy), nil
}

// MakeSecurityV1AutoGetNetworkSecurityPolicyEndpoint creates  AutoGetNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoGetNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkSecurityPolicy)
		v, err := s.AutoGetNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoGetNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetNetworkSecurityPolicy")(f)
}

// AutoGetSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoGetSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoGetSecurityGroupEndpoint creates  AutoGetSecurityGroup endpoints for the service
func MakeSecurityV1AutoGetSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoGetSecurityGroup(ctx, *req)
		return respSecurityV1AutoGetSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetSecurityGroup")(f)
}

// AutoGetTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint creates  AutoGetTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoGetTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoGetTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetTrafficEncryptionPolicy")(f)
}

// AutoLabelApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelApp(ctx context.Context, in api.Label) (App, error) {
	resp, err := e.AutoLabelAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoLabelAppEndpoint creates  AutoLabelApp endpoints for the service
func MakeSecurityV1AutoLabelAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelApp(ctx, *req)
		return respSecurityV1AutoLabelApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelApp")(f)
}

// AutoLabelCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelCertificate(ctx context.Context, in api.Label) (Certificate, error) {
	resp, err := e.AutoLabelCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoLabelCertificateEndpoint creates  AutoLabelCertificate endpoints for the service
func MakeSecurityV1AutoLabelCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelCertificate(ctx, *req)
		return respSecurityV1AutoLabelCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelCertificate")(f)
}

// AutoLabelFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelFirewallProfile(ctx context.Context, in api.Label) (FirewallProfile, error) {
	resp, err := e.AutoLabelFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfile{}, err
	}
	return *resp.(*FirewallProfile), nil
}

// MakeSecurityV1AutoLabelFirewallProfileEndpoint creates  AutoLabelFirewallProfile endpoints for the service
func MakeSecurityV1AutoLabelFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelFirewallProfile(ctx, *req)
		return respSecurityV1AutoLabelFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelFirewallProfile")(f)
}

// AutoLabelNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelNetworkSecurityPolicy(ctx context.Context, in api.Label) (NetworkSecurityPolicy, error) {
	resp, err := e.AutoLabelNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicy{}, err
	}
	return *resp.(*NetworkSecurityPolicy), nil
}

// MakeSecurityV1AutoLabelNetworkSecurityPolicyEndpoint creates  AutoLabelNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoLabelNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoLabelNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelNetworkSecurityPolicy")(f)
}

// AutoLabelSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelSecurityGroup(ctx context.Context, in api.Label) (SecurityGroup, error) {
	resp, err := e.AutoLabelSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoLabelSecurityGroupEndpoint creates  AutoLabelSecurityGroup endpoints for the service
func MakeSecurityV1AutoLabelSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelSecurityGroup(ctx, *req)
		return respSecurityV1AutoLabelSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelSecurityGroup")(f)
}

// AutoLabelTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoLabelTrafficEncryptionPolicy(ctx context.Context, in api.Label) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoLabelTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoLabelTrafficEncryptionPolicyEndpoint creates  AutoLabelTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoLabelTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoLabelTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoLabelTrafficEncryptionPolicy")(f)
}

// AutoListApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListApp(ctx context.Context, in api.ListWatchOptions) (AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return AppList{}, err
	}
	return *resp.(*AppList), nil
}

// MakeSecurityV1AutoListAppEndpoint creates  AutoListApp endpoints for the service
func MakeSecurityV1AutoListAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListApp(ctx, *req)
		return respSecurityV1AutoListApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListApp")(f)
}

// AutoListCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return CertificateList{}, err
	}
	return *resp.(*CertificateList), nil
}

// MakeSecurityV1AutoListCertificateEndpoint creates  AutoListCertificate endpoints for the service
func MakeSecurityV1AutoListCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCertificate(ctx, *req)
		return respSecurityV1AutoListCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListCertificate")(f)
}

// AutoListFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListFirewallProfile(ctx context.Context, in api.ListWatchOptions) (FirewallProfileList, error) {
	resp, err := e.AutoListFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfileList{}, err
	}
	return *resp.(*FirewallProfileList), nil
}

// MakeSecurityV1AutoListFirewallProfileEndpoint creates  AutoListFirewallProfile endpoints for the service
func MakeSecurityV1AutoListFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFirewallProfile(ctx, *req)
		return respSecurityV1AutoListFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListFirewallProfile")(f)
}

// AutoListNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListNetworkSecurityPolicy(ctx context.Context, in api.ListWatchOptions) (NetworkSecurityPolicyList, error) {
	resp, err := e.AutoListNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicyList{}, err
	}
	return *resp.(*NetworkSecurityPolicyList), nil
}

// MakeSecurityV1AutoListNetworkSecurityPolicyEndpoint creates  AutoListNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoListNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoListNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListNetworkSecurityPolicy")(f)
}

// AutoListSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListSecurityGroup(ctx context.Context, in api.ListWatchOptions) (SecurityGroupList, error) {
	resp, err := e.AutoListSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroupList{}, err
	}
	return *resp.(*SecurityGroupList), nil
}

// MakeSecurityV1AutoListSecurityGroupEndpoint creates  AutoListSecurityGroup endpoints for the service
func MakeSecurityV1AutoListSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSecurityGroup(ctx, *req)
		return respSecurityV1AutoListSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListSecurityGroup")(f)
}

// AutoListTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (TrafficEncryptionPolicyList, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicyList{}, err
	}
	return *resp.(*TrafficEncryptionPolicyList), nil
}

// MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint creates  AutoListTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoListTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListTrafficEncryptionPolicy")(f)
}

// AutoUpdateApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoUpdateAppEndpoint creates  AutoUpdateApp endpoints for the service
func MakeSecurityV1AutoUpdateAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoUpdateApp(ctx, *req)
		return respSecurityV1AutoUpdateApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateApp")(f)
}

// AutoUpdateCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoUpdateCertificateEndpoint creates  AutoUpdateCertificate endpoints for the service
func MakeSecurityV1AutoUpdateCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoUpdateCertificate(ctx, *req)
		return respSecurityV1AutoUpdateCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateCertificate")(f)
}

// AutoUpdateFirewallProfile implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateFirewallProfile(ctx context.Context, in FirewallProfile) (FirewallProfile, error) {
	resp, err := e.AutoUpdateFirewallProfileEndpoint(ctx, in)
	if err != nil {
		return FirewallProfile{}, err
	}
	return *resp.(*FirewallProfile), nil
}

// MakeSecurityV1AutoUpdateFirewallProfileEndpoint creates  AutoUpdateFirewallProfile endpoints for the service
func MakeSecurityV1AutoUpdateFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FirewallProfile)
		v, err := s.AutoUpdateFirewallProfile(ctx, *req)
		return respSecurityV1AutoUpdateFirewallProfile{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateFirewallProfile")(f)
}

// AutoUpdateNetworkSecurityPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (NetworkSecurityPolicy, error) {
	resp, err := e.AutoUpdateNetworkSecurityPolicyEndpoint(ctx, in)
	if err != nil {
		return NetworkSecurityPolicy{}, err
	}
	return *resp.(*NetworkSecurityPolicy), nil
}

// MakeSecurityV1AutoUpdateNetworkSecurityPolicyEndpoint creates  AutoUpdateNetworkSecurityPolicy endpoints for the service
func MakeSecurityV1AutoUpdateNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*NetworkSecurityPolicy)
		v, err := s.AutoUpdateNetworkSecurityPolicy(ctx, *req)
		return respSecurityV1AutoUpdateNetworkSecurityPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateNetworkSecurityPolicy")(f)
}

// AutoUpdateSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoUpdateSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoUpdateSecurityGroupEndpoint creates  AutoUpdateSecurityGroup endpoints for the service
func MakeSecurityV1AutoUpdateSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoUpdateSecurityGroup(ctx, *req)
		return respSecurityV1AutoUpdateSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateSecurityGroup")(f)
}

// AutoUpdateTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint creates  AutoUpdateTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoUpdateTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoUpdateTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateTrafficEncryptionPolicy")(f)
}

func (e EndpointsSecurityV1Server) AutoWatchSvcSecurityV1(in *api.AggWatchOptions, stream SecurityV1_AutoWatchSvcSecurityV1Server) error {
	return e.svcWatchHandlerSecurityV1(in, stream)
}

// MakeAutoWatchSvcSecurityV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcSecurityV1Endpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.AggWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchSvcSecurityV1Server)
		return s.AutoWatchSvcSecurityV1(options, wstream)
	}
}

// AutoWatchSecurityGroup is the watch handler for SecurityGroup on the server side.
func (e EndpointsSecurityV1Server) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) error {
	return e.watchHandlerSecurityGroup(in, stream)
}

// MakeAutoWatchSecurityGroupEndpoint creates the Watch endpoint
func MakeAutoWatchSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchSecurityGroupServer)
		return s.AutoWatchSecurityGroup(options, wstream)
	}
}

// AutoWatchNetworkSecurityPolicy is the watch handler for NetworkSecurityPolicy on the server side.
func (e EndpointsSecurityV1Server) AutoWatchNetworkSecurityPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchNetworkSecurityPolicyServer) error {
	return e.watchHandlerNetworkSecurityPolicy(in, stream)
}

// MakeAutoWatchNetworkSecurityPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchNetworkSecurityPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchNetworkSecurityPolicyServer)
		return s.AutoWatchNetworkSecurityPolicy(options, wstream)
	}
}

// AutoWatchApp is the watch handler for App on the server side.
func (e EndpointsSecurityV1Server) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) error {
	return e.watchHandlerApp(in, stream)
}

// MakeAutoWatchAppEndpoint creates the Watch endpoint
func MakeAutoWatchAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchAppServer)
		return s.AutoWatchApp(options, wstream)
	}
}

// AutoWatchFirewallProfile is the watch handler for FirewallProfile on the server side.
func (e EndpointsSecurityV1Server) AutoWatchFirewallProfile(in *api.ListWatchOptions, stream SecurityV1_AutoWatchFirewallProfileServer) error {
	return e.watchHandlerFirewallProfile(in, stream)
}

// MakeAutoWatchFirewallProfileEndpoint creates the Watch endpoint
func MakeAutoWatchFirewallProfileEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchFirewallProfileServer)
		return s.AutoWatchFirewallProfile(options, wstream)
	}
}

// AutoWatchCertificate is the watch handler for Certificate on the server side.
func (e EndpointsSecurityV1Server) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) error {
	return e.watchHandlerCertificate(in, stream)
}

// MakeAutoWatchCertificateEndpoint creates the Watch endpoint
func MakeAutoWatchCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchCertificateServer)
		return s.AutoWatchCertificate(options, wstream)
	}
}

// AutoWatchTrafficEncryptionPolicy is the watch handler for TrafficEncryptionPolicy on the server side.
func (e EndpointsSecurityV1Server) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return e.watchHandlerTrafficEncryptionPolicy(in, stream)
}

// MakeAutoWatchTrafficEncryptionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchTrafficEncryptionPolicyServer)
		return s.AutoWatchTrafficEncryptionPolicy(options, wstream)
	}
}

// MakeSecurityV1ServerEndpoints creates server endpoints
func MakeSecurityV1ServerEndpoints(s ServiceSecurityV1Server, logger log.Logger) EndpointsSecurityV1Server {
	return EndpointsSecurityV1Server{
		svcWatchHandlerSecurityV1: MakeAutoWatchSvcSecurityV1Endpoint(s, logger),

		AutoAddAppEndpoint:                        MakeSecurityV1AutoAddAppEndpoint(s, logger),
		AutoAddCertificateEndpoint:                MakeSecurityV1AutoAddCertificateEndpoint(s, logger),
		AutoAddFirewallProfileEndpoint:            MakeSecurityV1AutoAddFirewallProfileEndpoint(s, logger),
		AutoAddNetworkSecurityPolicyEndpoint:      MakeSecurityV1AutoAddNetworkSecurityPolicyEndpoint(s, logger),
		AutoAddSecurityGroupEndpoint:              MakeSecurityV1AutoAddSecurityGroupEndpoint(s, logger),
		AutoAddTrafficEncryptionPolicyEndpoint:    MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint(s, logger),
		AutoDeleteAppEndpoint:                     MakeSecurityV1AutoDeleteAppEndpoint(s, logger),
		AutoDeleteCertificateEndpoint:             MakeSecurityV1AutoDeleteCertificateEndpoint(s, logger),
		AutoDeleteFirewallProfileEndpoint:         MakeSecurityV1AutoDeleteFirewallProfileEndpoint(s, logger),
		AutoDeleteNetworkSecurityPolicyEndpoint:   MakeSecurityV1AutoDeleteNetworkSecurityPolicyEndpoint(s, logger),
		AutoDeleteSecurityGroupEndpoint:           MakeSecurityV1AutoDeleteSecurityGroupEndpoint(s, logger),
		AutoDeleteTrafficEncryptionPolicyEndpoint: MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint(s, logger),
		AutoGetAppEndpoint:                        MakeSecurityV1AutoGetAppEndpoint(s, logger),
		AutoGetCertificateEndpoint:                MakeSecurityV1AutoGetCertificateEndpoint(s, logger),
		AutoGetFirewallProfileEndpoint:            MakeSecurityV1AutoGetFirewallProfileEndpoint(s, logger),
		AutoGetNetworkSecurityPolicyEndpoint:      MakeSecurityV1AutoGetNetworkSecurityPolicyEndpoint(s, logger),
		AutoGetSecurityGroupEndpoint:              MakeSecurityV1AutoGetSecurityGroupEndpoint(s, logger),
		AutoGetTrafficEncryptionPolicyEndpoint:    MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint(s, logger),
		AutoLabelAppEndpoint:                      MakeSecurityV1AutoLabelAppEndpoint(s, logger),
		AutoLabelCertificateEndpoint:              MakeSecurityV1AutoLabelCertificateEndpoint(s, logger),
		AutoLabelFirewallProfileEndpoint:          MakeSecurityV1AutoLabelFirewallProfileEndpoint(s, logger),
		AutoLabelNetworkSecurityPolicyEndpoint:    MakeSecurityV1AutoLabelNetworkSecurityPolicyEndpoint(s, logger),
		AutoLabelSecurityGroupEndpoint:            MakeSecurityV1AutoLabelSecurityGroupEndpoint(s, logger),
		AutoLabelTrafficEncryptionPolicyEndpoint:  MakeSecurityV1AutoLabelTrafficEncryptionPolicyEndpoint(s, logger),
		AutoListAppEndpoint:                       MakeSecurityV1AutoListAppEndpoint(s, logger),
		AutoListCertificateEndpoint:               MakeSecurityV1AutoListCertificateEndpoint(s, logger),
		AutoListFirewallProfileEndpoint:           MakeSecurityV1AutoListFirewallProfileEndpoint(s, logger),
		AutoListNetworkSecurityPolicyEndpoint:     MakeSecurityV1AutoListNetworkSecurityPolicyEndpoint(s, logger),
		AutoListSecurityGroupEndpoint:             MakeSecurityV1AutoListSecurityGroupEndpoint(s, logger),
		AutoListTrafficEncryptionPolicyEndpoint:   MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint(s, logger),
		AutoUpdateAppEndpoint:                     MakeSecurityV1AutoUpdateAppEndpoint(s, logger),
		AutoUpdateCertificateEndpoint:             MakeSecurityV1AutoUpdateCertificateEndpoint(s, logger),
		AutoUpdateFirewallProfileEndpoint:         MakeSecurityV1AutoUpdateFirewallProfileEndpoint(s, logger),
		AutoUpdateNetworkSecurityPolicyEndpoint:   MakeSecurityV1AutoUpdateNetworkSecurityPolicyEndpoint(s, logger),
		AutoUpdateSecurityGroupEndpoint:           MakeSecurityV1AutoUpdateSecurityGroupEndpoint(s, logger),
		AutoUpdateTrafficEncryptionPolicyEndpoint: MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint(s, logger),

		watchHandlerSecurityGroup:           MakeAutoWatchSecurityGroupEndpoint(s, logger),
		watchHandlerNetworkSecurityPolicy:   MakeAutoWatchNetworkSecurityPolicyEndpoint(s, logger),
		watchHandlerApp:                     MakeAutoWatchAppEndpoint(s, logger),
		watchHandlerFirewallProfile:         MakeAutoWatchFirewallProfileEndpoint(s, logger),
		watchHandlerCertificate:             MakeAutoWatchCertificateEndpoint(s, logger),
		watchHandlerTrafficEncryptionPolicy: MakeAutoWatchTrafficEncryptionPolicyEndpoint(s, logger),
	}
}

// LoggingSecurityV1MiddlewareClient adds middleware for the client
func LoggingSecurityV1MiddlewareClient(logger log.Logger) MiddlewareSecurityV1Client {
	return func(next ServiceSecurityV1Client) ServiceSecurityV1Client {
		return loggingSecurityV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingSecurityV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceSecurityV1Client
}

// LoggingSecurityV1MiddlewareServer adds middleware for the client
func LoggingSecurityV1MiddlewareServer(logger log.Logger) MiddlewareSecurityV1Server {
	return func(next ServiceSecurityV1Server) ServiceSecurityV1Server {
		return loggingSecurityV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingSecurityV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceSecurityV1Server
}

func (m loggingSecurityV1MiddlewareClient) AutoAddApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddFirewallProfile(ctx context.Context, in *FirewallProfile) (resp *FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (resp *NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteFirewallProfile(ctx context.Context, in *FirewallProfile) (resp *FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (resp *NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetFirewallProfile(ctx context.Context, in *FirewallProfile) (resp *FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (resp *NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelApp(ctx context.Context, in *api.Label) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelCertificate(ctx context.Context, in *api.Label) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelFirewallProfile(ctx context.Context, in *api.Label) (resp *FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelNetworkSecurityPolicy(ctx context.Context, in *api.Label) (resp *NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelSecurityGroup(ctx context.Context, in *api.Label) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoLabelTrafficEncryptionPolicy(ctx context.Context, in *api.Label) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (resp *AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (resp *CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListFirewallProfile(ctx context.Context, in *api.ListWatchOptions) (resp *FirewallProfileList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListNetworkSecurityPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *NetworkSecurityPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (resp *SecurityGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *TrafficEncryptionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateFirewallProfile(ctx context.Context, in *FirewallProfile) (resp *FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (resp *NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareClient) AutoWatchSvcSecurityV1(ctx context.Context, in *api.AggWatchOptions) (resp SecurityV1_AutoWatchSvcSecurityV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchSvcSecurityV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcSecurityV1(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareClient) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchSecurityGroupClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchSecurityGroup", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchNetworkSecurityPolicy(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchNetworkSecurityPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchAppClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchFirewallProfile(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchFirewallProfileClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchFirewallProfile", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchCertificateClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchTrafficEncryptionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoAddApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddFirewallProfile(ctx context.Context, in FirewallProfile) (resp FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (resp NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteFirewallProfile(ctx context.Context, in FirewallProfile) (resp FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (resp NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetFirewallProfile(ctx context.Context, in FirewallProfile) (resp FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (resp NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelApp(ctx context.Context, in api.Label) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelCertificate(ctx context.Context, in api.Label) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelFirewallProfile(ctx context.Context, in api.Label) (resp FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelNetworkSecurityPolicy(ctx context.Context, in api.Label) (resp NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelSecurityGroup(ctx context.Context, in api.Label) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoLabelTrafficEncryptionPolicy(ctx context.Context, in api.Label) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoLabelTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListApp(ctx context.Context, in api.ListWatchOptions) (resp AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (resp CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListFirewallProfile(ctx context.Context, in api.ListWatchOptions) (resp FirewallProfileList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListNetworkSecurityPolicy(ctx context.Context, in api.ListWatchOptions) (resp NetworkSecurityPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListSecurityGroup(ctx context.Context, in api.ListWatchOptions) (resp SecurityGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (resp TrafficEncryptionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateFirewallProfile(ctx context.Context, in FirewallProfile) (resp FirewallProfile, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFirewallProfile(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateNetworkSecurityPolicy(ctx context.Context, in NetworkSecurityPolicy) (resp NetworkSecurityPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNetworkSecurityPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoWatchSvcSecurityV1(in *api.AggWatchOptions, stream SecurityV1_AutoWatchSvcSecurityV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchSvcSecurityV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcSecurityV1(in, stream)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSecurityGroup(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchNetworkSecurityPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchNetworkSecurityPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchNetworkSecurityPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNetworkSecurityPolicy(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchApp(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchFirewallProfile(in *api.ListWatchOptions, stream SecurityV1_AutoWatchFirewallProfileServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchFirewallProfile", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFirewallProfile(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCertificate(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTrafficEncryptionPolicy(in, stream)
	return
}

func (r *EndpointsSecurityV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsSecurityV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURISecurityV1AutoAddAppCreateOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps")
}

//
func makeURISecurityV1AutoAddCertificateCreateOper(in *Certificate) string {
	return ""

}

//
func makeURISecurityV1AutoAddFirewallProfileCreateOper(in *FirewallProfile) string {
	return ""

}

//
func makeURISecurityV1AutoAddNetworkSecurityPolicyCreateOper(in *NetworkSecurityPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies")
}

//
func makeURISecurityV1AutoAddSecurityGroupCreateOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups")
}

//
func makeURISecurityV1AutoAddTrafficEncryptionPolicyCreateOper(in *TrafficEncryptionPolicy) string {
	return ""

}

//
func makeURISecurityV1AutoDeleteAppDeleteOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps/", in.Name)
}

//
func makeURISecurityV1AutoDeleteCertificateDeleteOper(in *Certificate) string {
	return ""

}

//
func makeURISecurityV1AutoDeleteFirewallProfileDeleteOper(in *FirewallProfile) string {
	return ""

}

//
func makeURISecurityV1AutoDeleteNetworkSecurityPolicyDeleteOper(in *NetworkSecurityPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies/", in.Name)
}

//
func makeURISecurityV1AutoDeleteSecurityGroupDeleteOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoDeleteTrafficEncryptionPolicyDeleteOper(in *TrafficEncryptionPolicy) string {
	return ""

}

//
func makeURISecurityV1AutoGetAppGetOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps/", in.Name)
}

//
func makeURISecurityV1AutoGetCertificateGetOper(in *Certificate) string {
	return ""

}

//
func makeURISecurityV1AutoGetFirewallProfileGetOper(in *FirewallProfile) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/firewallprofiles/", in.Name)
}

//
func makeURISecurityV1AutoGetNetworkSecurityPolicyGetOper(in *NetworkSecurityPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies/", in.Name)
}

//
func makeURISecurityV1AutoGetSecurityGroupGetOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoGetTrafficEncryptionPolicyGetOper(in *TrafficEncryptionPolicy) string {
	return ""

}

//
func makeURISecurityV1AutoLabelAppLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps/", in.Name, "/label")
}

//
func makeURISecurityV1AutoLabelCertificateLabelOper(in *api.Label) string {
	return ""

}

//
func makeURISecurityV1AutoLabelFirewallProfileLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/firewallprofiles/", in.Name, "/label")
}

//
func makeURISecurityV1AutoLabelNetworkSecurityPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies/", in.Name, "/label")
}

//
func makeURISecurityV1AutoLabelSecurityGroupLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name, "/label")
}

//
func makeURISecurityV1AutoLabelTrafficEncryptionPolicyLabelOper(in *api.Label) string {
	return ""

}

//
func makeURISecurityV1AutoListAppListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps")
}

//
func makeURISecurityV1AutoListCertificateListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURISecurityV1AutoListFirewallProfileListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/firewallprofiles")
}

//
func makeURISecurityV1AutoListNetworkSecurityPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies")
}

//
func makeURISecurityV1AutoListSecurityGroupListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups")
}

//
func makeURISecurityV1AutoListTrafficEncryptionPolicyListOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURISecurityV1AutoUpdateAppUpdateOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/apps/", in.Name)
}

//
func makeURISecurityV1AutoUpdateCertificateUpdateOper(in *Certificate) string {
	return ""

}

//
func makeURISecurityV1AutoUpdateFirewallProfileUpdateOper(in *FirewallProfile) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/firewallprofiles/", in.Name)
}

//
func makeURISecurityV1AutoUpdateNetworkSecurityPolicyUpdateOper(in *NetworkSecurityPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/networksecuritypolicies/", in.Name)
}

//
func makeURISecurityV1AutoUpdateSecurityGroupUpdateOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoUpdateTrafficEncryptionPolicyUpdateOper(in *TrafficEncryptionPolicy) string {
	return ""

}

//
func makeURISecurityV1AutoWatchAppWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/watch/tenant/", in.Tenant, "/apps")
}

//
func makeURISecurityV1AutoWatchCertificateWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURISecurityV1AutoWatchFirewallProfileWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/watch/tenant/", in.Tenant, "/firewallprofiles")
}

//
func makeURISecurityV1AutoWatchNetworkSecurityPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/watch/tenant/", in.Tenant, "/networksecuritypolicies")
}

//
func makeURISecurityV1AutoWatchSecurityGroupWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/watch/tenant/", in.Tenant, "/security-groups")
}

//
func makeURISecurityV1AutoWatchSvcSecurityV1WatchOper(in *api.AggWatchOptions) string {
	return ""

}

//
func makeURISecurityV1AutoWatchTrafficEncryptionPolicyWatchOper(in *api.ListWatchOptions) string {
	return ""

}

// AutoAddSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoAddSecurityGroupCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoAddSecurityGroup(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), nil
}

// AutoUpdateSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoUpdateSecurityGroupUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoUpdateSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoLabelSecurityGroup label method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoLabelSecurityGroup(ctx context.Context, in *api.Label) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoLabelSecurityGroupLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoLabelSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoGetSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoGetSecurityGroupGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoGetSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoDeleteSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoDeleteSecurityGroupDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoDeleteSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoListSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoListSecurityGroup(ctx context.Context, options *api.ListWatchOptions) (*SecurityGroupList, error) {
	path := makeURISecurityV1AutoListSecurityGroupListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoListSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroupList), err
}

// AutoWatchSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoWatchSecurityGroup(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchSecurityGroupWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgSecurityGroupWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoAddNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	path := makeURISecurityV1AutoAddNetworkSecurityPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoAddNetworkSecurityPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicy), nil
}

// AutoUpdateNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoUpdateNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	path := makeURISecurityV1AutoUpdateNetworkSecurityPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoUpdateNetworkSecurityPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicy), err
}

// AutoLabelNetworkSecurityPolicy label method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoLabelNetworkSecurityPolicy(ctx context.Context, in *api.Label) (*NetworkSecurityPolicy, error) {
	path := makeURISecurityV1AutoLabelNetworkSecurityPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoLabelNetworkSecurityPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicy), err
}

// AutoGetNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoGetNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	path := makeURISecurityV1AutoGetNetworkSecurityPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoGetNetworkSecurityPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicy), err
}

// AutoDeleteNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoDeleteNetworkSecurityPolicy(ctx context.Context, in *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	path := makeURISecurityV1AutoDeleteNetworkSecurityPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoDeleteNetworkSecurityPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicy), err
}

// AutoListNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoListNetworkSecurityPolicy(ctx context.Context, options *api.ListWatchOptions) (*NetworkSecurityPolicyList, error) {
	path := makeURISecurityV1AutoListNetworkSecurityPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoListNetworkSecurityPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NetworkSecurityPolicyList), err
}

// AutoWatchNetworkSecurityPolicy CRUD method for NetworkSecurityPolicy
func (r *EndpointsSecurityV1RestClient) AutoWatchNetworkSecurityPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchNetworkSecurityPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgNetworkSecurityPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoAddAppCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoAddApp(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), nil
}

// AutoUpdateApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoUpdateAppUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoUpdateApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoLabelApp label method for App
func (r *EndpointsSecurityV1RestClient) AutoLabelApp(ctx context.Context, in *api.Label) (*App, error) {
	path := makeURISecurityV1AutoLabelAppLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoLabelApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoGetApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoGetAppGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoGetApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoDeleteApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoDeleteAppDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoDeleteApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoListApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoListApp(ctx context.Context, options *api.ListWatchOptions) (*AppList, error) {
	path := makeURISecurityV1AutoListAppListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoListApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppList), err
}

// AutoWatchApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoWatchApp(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchAppWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgAppWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoAddFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoUpdateFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	path := makeURISecurityV1AutoUpdateFirewallProfileUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoUpdateFirewallProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FirewallProfile), err
}

// AutoLabelFirewallProfile label method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoLabelFirewallProfile(ctx context.Context, in *api.Label) (*FirewallProfile, error) {
	path := makeURISecurityV1AutoLabelFirewallProfileLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoLabelFirewallProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FirewallProfile), err
}

// AutoGetFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoGetFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	path := makeURISecurityV1AutoGetFirewallProfileGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoGetFirewallProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FirewallProfile), err
}

// AutoDeleteFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoDeleteFirewallProfile(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error) {
	return nil, errors.New("not allowed")
}

// AutoListFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoListFirewallProfile(ctx context.Context, options *api.ListWatchOptions) (*FirewallProfileList, error) {
	path := makeURISecurityV1AutoListFirewallProfileListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespSecurityV1AutoListFirewallProfile(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FirewallProfileList), err
}

// AutoWatchFirewallProfile CRUD method for FirewallProfile
func (r *EndpointsSecurityV1RestClient) AutoWatchFirewallProfile(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchFirewallProfileWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgFirewallProfileWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelCertificate label method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoLabelCertificate(ctx context.Context, in *api.Label) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// AutoGetCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	return nil, errors.New("not allowed")
}

// AutoListCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoListCertificate(ctx context.Context, options *api.ListWatchOptions) (*CertificateList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoWatchCertificate(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchCertificateWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgCertificateWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelTrafficEncryptionPolicy label method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoLabelTrafficEncryptionPolicy(ctx context.Context, in *api.Label) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoGetTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoDeleteTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoListTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoListTrafficEncryptionPolicy(ctx context.Context, options *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURISecurityV1AutoWatchTrafficEncryptionPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgTrafficEncryptionPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// MakeSecurityV1RestClientEndpoints make REST client endpoints
func MakeSecurityV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsSecurityV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsSecurityV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeSecurityV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeSecurityV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsSecurityV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsSecurityV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
