// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: svc_security.proto
*/
package security

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareSecurityV1Client add middleware to the client
type MiddlewareSecurityV1Client func(ServiceSecurityV1Client) ServiceSecurityV1Client

// EndpointsSecurityV1Client is the endpoints for the client
type EndpointsSecurityV1Client struct {
	Client                         SecurityV1Client
	AutoWatchSvcSecurityV1Endpoint endpoint.Endpoint

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddSGPolicyEndpoint                   endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteSGPolicyEndpoint                endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetSGPolicyEndpoint                   endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListSGPolicyEndpoint                  endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateSGPolicyEndpoint                endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
}

// EndpointsSecurityV1RestClient is the REST client
type EndpointsSecurityV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddSGPolicyEndpoint                   endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteSGPolicyEndpoint                endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetSGPolicyEndpoint                   endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListSGPolicyEndpoint                  endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateSGPolicyEndpoint                endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoWatchAppEndpoint                      endpoint.Endpoint
	AutoWatchCertificateEndpoint              endpoint.Endpoint
	AutoWatchSGPolicyEndpoint                 endpoint.Endpoint
	AutoWatchSecurityGroupEndpoint            endpoint.Endpoint
	AutoWatchSvcSecurityV1Endpoint            endpoint.Endpoint
	AutoWatchTrafficEncryptionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareSecurityV1Server adds middle ware to the server
type MiddlewareSecurityV1Server func(ServiceSecurityV1Server) ServiceSecurityV1Server

// EndpointsSecurityV1Server is the server endpoints
type EndpointsSecurityV1Server struct {
	svcWatchHandlerSecurityV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddAppEndpoint                        endpoint.Endpoint
	AutoAddCertificateEndpoint                endpoint.Endpoint
	AutoAddSGPolicyEndpoint                   endpoint.Endpoint
	AutoAddSecurityGroupEndpoint              endpoint.Endpoint
	AutoAddTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint                     endpoint.Endpoint
	AutoDeleteCertificateEndpoint             endpoint.Endpoint
	AutoDeleteSGPolicyEndpoint                endpoint.Endpoint
	AutoDeleteSecurityGroupEndpoint           endpoint.Endpoint
	AutoDeleteTrafficEncryptionPolicyEndpoint endpoint.Endpoint
	AutoGetAppEndpoint                        endpoint.Endpoint
	AutoGetCertificateEndpoint                endpoint.Endpoint
	AutoGetSGPolicyEndpoint                   endpoint.Endpoint
	AutoGetSecurityGroupEndpoint              endpoint.Endpoint
	AutoGetTrafficEncryptionPolicyEndpoint    endpoint.Endpoint
	AutoListAppEndpoint                       endpoint.Endpoint
	AutoListCertificateEndpoint               endpoint.Endpoint
	AutoListSGPolicyEndpoint                  endpoint.Endpoint
	AutoListSecurityGroupEndpoint             endpoint.Endpoint
	AutoListTrafficEncryptionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint                     endpoint.Endpoint
	AutoUpdateCertificateEndpoint             endpoint.Endpoint
	AutoUpdateSGPolicyEndpoint                endpoint.Endpoint
	AutoUpdateSecurityGroupEndpoint           endpoint.Endpoint
	AutoUpdateTrafficEncryptionPolicyEndpoint endpoint.Endpoint

	watchHandlerSecurityGroup           func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerSGPolicy                func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerApp                     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerCertificate             func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTrafficEncryptionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddApp is endpoint for AutoAddApp
func (e EndpointsSecurityV1Client) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoAddApp struct {
	V   App
	Err error
}

// AutoAddCertificate is endpoint for AutoAddCertificate
func (e EndpointsSecurityV1Client) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoAddCertificate struct {
	V   Certificate
	Err error
}

// AutoAddSGPolicy is endpoint for AutoAddSGPolicy
func (e EndpointsSecurityV1Client) AutoAddSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	resp, err := e.AutoAddSGPolicyEndpoint(ctx, in)
	if err != nil {
		return &SGPolicy{}, err
	}
	return resp.(*SGPolicy), nil
}

type respSecurityV1AutoAddSGPolicy struct {
	V   SGPolicy
	Err error
}

// AutoAddSecurityGroup is endpoint for AutoAddSecurityGroup
func (e EndpointsSecurityV1Client) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoAddSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoAddSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoAddTrafficEncryptionPolicy is endpoint for AutoAddTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoAddTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoDeleteApp is endpoint for AutoDeleteApp
func (e EndpointsSecurityV1Client) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoDeleteApp struct {
	V   App
	Err error
}

// AutoDeleteCertificate is endpoint for AutoDeleteCertificate
func (e EndpointsSecurityV1Client) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoDeleteCertificate struct {
	V   Certificate
	Err error
}

// AutoDeleteSGPolicy is endpoint for AutoDeleteSGPolicy
func (e EndpointsSecurityV1Client) AutoDeleteSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	resp, err := e.AutoDeleteSGPolicyEndpoint(ctx, in)
	if err != nil {
		return &SGPolicy{}, err
	}
	return resp.(*SGPolicy), nil
}

type respSecurityV1AutoDeleteSGPolicy struct {
	V   SGPolicy
	Err error
}

// AutoDeleteSecurityGroup is endpoint for AutoDeleteSecurityGroup
func (e EndpointsSecurityV1Client) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoDeleteSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoDeleteSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoDeleteTrafficEncryptionPolicy is endpoint for AutoDeleteTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoDeleteTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoGetApp is endpoint for AutoGetApp
func (e EndpointsSecurityV1Client) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoGetApp struct {
	V   App
	Err error
}

// AutoGetCertificate is endpoint for AutoGetCertificate
func (e EndpointsSecurityV1Client) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoGetCertificate struct {
	V   Certificate
	Err error
}

// AutoGetSGPolicy is endpoint for AutoGetSGPolicy
func (e EndpointsSecurityV1Client) AutoGetSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	resp, err := e.AutoGetSGPolicyEndpoint(ctx, in)
	if err != nil {
		return &SGPolicy{}, err
	}
	return resp.(*SGPolicy), nil
}

type respSecurityV1AutoGetSGPolicy struct {
	V   SGPolicy
	Err error
}

// AutoGetSecurityGroup is endpoint for AutoGetSecurityGroup
func (e EndpointsSecurityV1Client) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoGetSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoGetSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoGetTrafficEncryptionPolicy is endpoint for AutoGetTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoGetTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

// AutoListApp is endpoint for AutoListApp
func (e EndpointsSecurityV1Client) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (*AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return &AppList{}, err
	}
	return resp.(*AppList), nil
}

type respSecurityV1AutoListApp struct {
	V   AppList
	Err error
}

// AutoListCertificate is endpoint for AutoListCertificate
func (e EndpointsSecurityV1Client) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (*CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return &CertificateList{}, err
	}
	return resp.(*CertificateList), nil
}

type respSecurityV1AutoListCertificate struct {
	V   CertificateList
	Err error
}

// AutoListSGPolicy is endpoint for AutoListSGPolicy
func (e EndpointsSecurityV1Client) AutoListSGPolicy(ctx context.Context, in *api.ListWatchOptions) (*SGPolicyList, error) {
	resp, err := e.AutoListSGPolicyEndpoint(ctx, in)
	if err != nil {
		return &SGPolicyList{}, err
	}
	return resp.(*SGPolicyList), nil
}

type respSecurityV1AutoListSGPolicy struct {
	V   SGPolicyList
	Err error
}

// AutoListSecurityGroup is endpoint for AutoListSecurityGroup
func (e EndpointsSecurityV1Client) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (*SecurityGroupList, error) {
	resp, err := e.AutoListSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroupList{}, err
	}
	return resp.(*SecurityGroupList), nil
}

type respSecurityV1AutoListSecurityGroup struct {
	V   SecurityGroupList
	Err error
}

// AutoListTrafficEncryptionPolicy is endpoint for AutoListTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicyList{}, err
	}
	return resp.(*TrafficEncryptionPolicyList), nil
}

type respSecurityV1AutoListTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicyList
	Err error
}

// AutoUpdateApp is endpoint for AutoUpdateApp
func (e EndpointsSecurityV1Client) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respSecurityV1AutoUpdateApp struct {
	V   App
	Err error
}

// AutoUpdateCertificate is endpoint for AutoUpdateCertificate
func (e EndpointsSecurityV1Client) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return &Certificate{}, err
	}
	return resp.(*Certificate), nil
}

type respSecurityV1AutoUpdateCertificate struct {
	V   Certificate
	Err error
}

// AutoUpdateSGPolicy is endpoint for AutoUpdateSGPolicy
func (e EndpointsSecurityV1Client) AutoUpdateSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	resp, err := e.AutoUpdateSGPolicyEndpoint(ctx, in)
	if err != nil {
		return &SGPolicy{}, err
	}
	return resp.(*SGPolicy), nil
}

type respSecurityV1AutoUpdateSGPolicy struct {
	V   SGPolicy
	Err error
}

// AutoUpdateSecurityGroup is endpoint for AutoUpdateSecurityGroup
func (e EndpointsSecurityV1Client) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	resp, err := e.AutoUpdateSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return &SecurityGroup{}, err
	}
	return resp.(*SecurityGroup), nil
}

type respSecurityV1AutoUpdateSecurityGroup struct {
	V   SecurityGroup
	Err error
}

// AutoUpdateTrafficEncryptionPolicy is endpoint for AutoUpdateTrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return &TrafficEncryptionPolicy{}, err
	}
	return resp.(*TrafficEncryptionPolicy), nil
}

type respSecurityV1AutoUpdateTrafficEncryptionPolicy struct {
	V   TrafficEncryptionPolicy
	Err error
}

func (e EndpointsSecurityV1Client) AutoWatchSvcSecurityV1(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchSvcSecurityV1Client, error) {
	return e.Client.AutoWatchSvcSecurityV1(ctx, in)
}

// AutoWatchSecurityGroup performs Watch for SecurityGroup
func (e EndpointsSecurityV1Client) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchSecurityGroupClient, error) {
	return e.Client.AutoWatchSecurityGroup(ctx, in)
}

// AutoWatchSGPolicy performs Watch for SGPolicy
func (e EndpointsSecurityV1Client) AutoWatchSGPolicy(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchSGPolicyClient, error) {
	return e.Client.AutoWatchSGPolicy(ctx, in)
}

// AutoWatchApp performs Watch for App
func (e EndpointsSecurityV1Client) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchAppClient, error) {
	return e.Client.AutoWatchApp(ctx, in)
}

// AutoWatchCertificate performs Watch for Certificate
func (e EndpointsSecurityV1Client) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchCertificateClient, error) {
	return e.Client.AutoWatchCertificate(ctx, in)
}

// AutoWatchTrafficEncryptionPolicy performs Watch for TrafficEncryptionPolicy
func (e EndpointsSecurityV1Client) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (SecurityV1_AutoWatchTrafficEncryptionPolicyClient, error) {
	return e.Client.AutoWatchTrafficEncryptionPolicy(ctx, in)
}

// AutoAddApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoAddAppEndpoint creates  AutoAddApp endpoints for the service
func MakeSecurityV1AutoAddAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoAddApp(ctx, *req)
		return respSecurityV1AutoAddApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddApp")(f)
}

// AutoAddCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoAddCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoAddCertificateEndpoint creates  AutoAddCertificate endpoints for the service
func MakeSecurityV1AutoAddCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoAddCertificate(ctx, *req)
		return respSecurityV1AutoAddCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddCertificate")(f)
}

// AutoAddSGPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddSGPolicy(ctx context.Context, in SGPolicy) (SGPolicy, error) {
	resp, err := e.AutoAddSGPolicyEndpoint(ctx, in)
	if err != nil {
		return SGPolicy{}, err
	}
	return *resp.(*SGPolicy), nil
}

// MakeSecurityV1AutoAddSGPolicyEndpoint creates  AutoAddSGPolicy endpoints for the service
func MakeSecurityV1AutoAddSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SGPolicy)
		v, err := s.AutoAddSGPolicy(ctx, *req)
		return respSecurityV1AutoAddSGPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddSGPolicy")(f)
}

// AutoAddSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoAddSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoAddSecurityGroupEndpoint creates  AutoAddSecurityGroup endpoints for the service
func MakeSecurityV1AutoAddSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoAddSecurityGroup(ctx, *req)
		return respSecurityV1AutoAddSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddSecurityGroup")(f)
}

// AutoAddTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoAddTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint creates  AutoAddTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoAddTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoAddTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoAddTrafficEncryptionPolicy")(f)
}

// AutoDeleteApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoDeleteAppEndpoint creates  AutoDeleteApp endpoints for the service
func MakeSecurityV1AutoDeleteAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoDeleteApp(ctx, *req)
		return respSecurityV1AutoDeleteApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteApp")(f)
}

// AutoDeleteCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoDeleteCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoDeleteCertificateEndpoint creates  AutoDeleteCertificate endpoints for the service
func MakeSecurityV1AutoDeleteCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoDeleteCertificate(ctx, *req)
		return respSecurityV1AutoDeleteCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteCertificate")(f)
}

// AutoDeleteSGPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteSGPolicy(ctx context.Context, in SGPolicy) (SGPolicy, error) {
	resp, err := e.AutoDeleteSGPolicyEndpoint(ctx, in)
	if err != nil {
		return SGPolicy{}, err
	}
	return *resp.(*SGPolicy), nil
}

// MakeSecurityV1AutoDeleteSGPolicyEndpoint creates  AutoDeleteSGPolicy endpoints for the service
func MakeSecurityV1AutoDeleteSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SGPolicy)
		v, err := s.AutoDeleteSGPolicy(ctx, *req)
		return respSecurityV1AutoDeleteSGPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteSGPolicy")(f)
}

// AutoDeleteSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoDeleteSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoDeleteSecurityGroupEndpoint creates  AutoDeleteSecurityGroup endpoints for the service
func MakeSecurityV1AutoDeleteSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoDeleteSecurityGroup(ctx, *req)
		return respSecurityV1AutoDeleteSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteSecurityGroup")(f)
}

// AutoDeleteTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoDeleteTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint creates  AutoDeleteTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoDeleteTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoDeleteTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoDeleteTrafficEncryptionPolicy")(f)
}

// AutoGetApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoGetAppEndpoint creates  AutoGetApp endpoints for the service
func MakeSecurityV1AutoGetAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoGetApp(ctx, *req)
		return respSecurityV1AutoGetApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetApp")(f)
}

// AutoGetCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoGetCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoGetCertificateEndpoint creates  AutoGetCertificate endpoints for the service
func MakeSecurityV1AutoGetCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoGetCertificate(ctx, *req)
		return respSecurityV1AutoGetCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetCertificate")(f)
}

// AutoGetSGPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetSGPolicy(ctx context.Context, in SGPolicy) (SGPolicy, error) {
	resp, err := e.AutoGetSGPolicyEndpoint(ctx, in)
	if err != nil {
		return SGPolicy{}, err
	}
	return *resp.(*SGPolicy), nil
}

// MakeSecurityV1AutoGetSGPolicyEndpoint creates  AutoGetSGPolicy endpoints for the service
func MakeSecurityV1AutoGetSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SGPolicy)
		v, err := s.AutoGetSGPolicy(ctx, *req)
		return respSecurityV1AutoGetSGPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetSGPolicy")(f)
}

// AutoGetSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoGetSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoGetSecurityGroupEndpoint creates  AutoGetSecurityGroup endpoints for the service
func MakeSecurityV1AutoGetSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoGetSecurityGroup(ctx, *req)
		return respSecurityV1AutoGetSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetSecurityGroup")(f)
}

// AutoGetTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoGetTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint creates  AutoGetTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoGetTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoGetTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoGetTrafficEncryptionPolicy")(f)
}

// AutoListApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListApp(ctx context.Context, in api.ListWatchOptions) (AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return AppList{}, err
	}
	return *resp.(*AppList), nil
}

// MakeSecurityV1AutoListAppEndpoint creates  AutoListApp endpoints for the service
func MakeSecurityV1AutoListAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListApp(ctx, *req)
		return respSecurityV1AutoListApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListApp")(f)
}

// AutoListCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (CertificateList, error) {
	resp, err := e.AutoListCertificateEndpoint(ctx, in)
	if err != nil {
		return CertificateList{}, err
	}
	return *resp.(*CertificateList), nil
}

// MakeSecurityV1AutoListCertificateEndpoint creates  AutoListCertificate endpoints for the service
func MakeSecurityV1AutoListCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCertificate(ctx, *req)
		return respSecurityV1AutoListCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListCertificate")(f)
}

// AutoListSGPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListSGPolicy(ctx context.Context, in api.ListWatchOptions) (SGPolicyList, error) {
	resp, err := e.AutoListSGPolicyEndpoint(ctx, in)
	if err != nil {
		return SGPolicyList{}, err
	}
	return *resp.(*SGPolicyList), nil
}

// MakeSecurityV1AutoListSGPolicyEndpoint creates  AutoListSGPolicy endpoints for the service
func MakeSecurityV1AutoListSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSGPolicy(ctx, *req)
		return respSecurityV1AutoListSGPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListSGPolicy")(f)
}

// AutoListSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListSecurityGroup(ctx context.Context, in api.ListWatchOptions) (SecurityGroupList, error) {
	resp, err := e.AutoListSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroupList{}, err
	}
	return *resp.(*SecurityGroupList), nil
}

// MakeSecurityV1AutoListSecurityGroupEndpoint creates  AutoListSecurityGroup endpoints for the service
func MakeSecurityV1AutoListSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSecurityGroup(ctx, *req)
		return respSecurityV1AutoListSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListSecurityGroup")(f)
}

// AutoListTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (TrafficEncryptionPolicyList, error) {
	resp, err := e.AutoListTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicyList{}, err
	}
	return *resp.(*TrafficEncryptionPolicyList), nil
}

// MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint creates  AutoListTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoListTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoListTrafficEncryptionPolicy")(f)
}

// AutoUpdateApp implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeSecurityV1AutoUpdateAppEndpoint creates  AutoUpdateApp endpoints for the service
func MakeSecurityV1AutoUpdateAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoUpdateApp(ctx, *req)
		return respSecurityV1AutoUpdateApp{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateApp")(f)
}

// AutoUpdateCertificate implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateCertificate(ctx context.Context, in Certificate) (Certificate, error) {
	resp, err := e.AutoUpdateCertificateEndpoint(ctx, in)
	if err != nil {
		return Certificate{}, err
	}
	return *resp.(*Certificate), nil
}

// MakeSecurityV1AutoUpdateCertificateEndpoint creates  AutoUpdateCertificate endpoints for the service
func MakeSecurityV1AutoUpdateCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Certificate)
		v, err := s.AutoUpdateCertificate(ctx, *req)
		return respSecurityV1AutoUpdateCertificate{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateCertificate")(f)
}

// AutoUpdateSGPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateSGPolicy(ctx context.Context, in SGPolicy) (SGPolicy, error) {
	resp, err := e.AutoUpdateSGPolicyEndpoint(ctx, in)
	if err != nil {
		return SGPolicy{}, err
	}
	return *resp.(*SGPolicy), nil
}

// MakeSecurityV1AutoUpdateSGPolicyEndpoint creates  AutoUpdateSGPolicy endpoints for the service
func MakeSecurityV1AutoUpdateSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SGPolicy)
		v, err := s.AutoUpdateSGPolicy(ctx, *req)
		return respSecurityV1AutoUpdateSGPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateSGPolicy")(f)
}

// AutoUpdateSecurityGroup implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateSecurityGroup(ctx context.Context, in SecurityGroup) (SecurityGroup, error) {
	resp, err := e.AutoUpdateSecurityGroupEndpoint(ctx, in)
	if err != nil {
		return SecurityGroup{}, err
	}
	return *resp.(*SecurityGroup), nil
}

// MakeSecurityV1AutoUpdateSecurityGroupEndpoint creates  AutoUpdateSecurityGroup endpoints for the service
func MakeSecurityV1AutoUpdateSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SecurityGroup)
		v, err := s.AutoUpdateSecurityGroup(ctx, *req)
		return respSecurityV1AutoUpdateSecurityGroup{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateSecurityGroup")(f)
}

// AutoUpdateTrafficEncryptionPolicy implementation on server Endpoint
func (e EndpointsSecurityV1Server) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (TrafficEncryptionPolicy, error) {
	resp, err := e.AutoUpdateTrafficEncryptionPolicyEndpoint(ctx, in)
	if err != nil {
		return TrafficEncryptionPolicy{}, err
	}
	return *resp.(*TrafficEncryptionPolicy), nil
}

// MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint creates  AutoUpdateTrafficEncryptionPolicy endpoints for the service
func MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TrafficEncryptionPolicy)
		v, err := s.AutoUpdateTrafficEncryptionPolicy(ctx, *req)
		return respSecurityV1AutoUpdateTrafficEncryptionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("SecurityV1:AutoUpdateTrafficEncryptionPolicy")(f)
}

func (e EndpointsSecurityV1Server) AutoWatchSvcSecurityV1(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSvcSecurityV1Server) error {
	return e.svcWatchHandlerSecurityV1(in, stream)
}

// MakeAutoWatchSvcSecurityV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcSecurityV1Endpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchSvcSecurityV1Server)
		return s.AutoWatchSvcSecurityV1(options, wstream)
	}
}

// AutoWatchSecurityGroup is the watch handler for SecurityGroup on the server side.
func (e EndpointsSecurityV1Server) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) error {
	return e.watchHandlerSecurityGroup(in, stream)
}

// MakeAutoWatchSecurityGroupEndpoint creates the Watch endpoint
func MakeAutoWatchSecurityGroupEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchSecurityGroupServer)
		return s.AutoWatchSecurityGroup(options, wstream)
	}
}

// AutoWatchSGPolicy is the watch handler for SGPolicy on the server side.
func (e EndpointsSecurityV1Server) AutoWatchSGPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSGPolicyServer) error {
	return e.watchHandlerSGPolicy(in, stream)
}

// MakeAutoWatchSGPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchSGPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchSGPolicyServer)
		return s.AutoWatchSGPolicy(options, wstream)
	}
}

// AutoWatchApp is the watch handler for App on the server side.
func (e EndpointsSecurityV1Server) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) error {
	return e.watchHandlerApp(in, stream)
}

// MakeAutoWatchAppEndpoint creates the Watch endpoint
func MakeAutoWatchAppEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchAppServer)
		return s.AutoWatchApp(options, wstream)
	}
}

// AutoWatchCertificate is the watch handler for Certificate on the server side.
func (e EndpointsSecurityV1Server) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) error {
	return e.watchHandlerCertificate(in, stream)
}

// MakeAutoWatchCertificateEndpoint creates the Watch endpoint
func MakeAutoWatchCertificateEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchCertificateServer)
		return s.AutoWatchCertificate(options, wstream)
	}
}

// AutoWatchTrafficEncryptionPolicy is the watch handler for TrafficEncryptionPolicy on the server side.
func (e EndpointsSecurityV1Server) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return e.watchHandlerTrafficEncryptionPolicy(in, stream)
}

// MakeAutoWatchTrafficEncryptionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchTrafficEncryptionPolicyEndpoint(s ServiceSecurityV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(SecurityV1_AutoWatchTrafficEncryptionPolicyServer)
		return s.AutoWatchTrafficEncryptionPolicy(options, wstream)
	}
}

// MakeSecurityV1ServerEndpoints creates server endpoints
func MakeSecurityV1ServerEndpoints(s ServiceSecurityV1Server, logger log.Logger) EndpointsSecurityV1Server {
	return EndpointsSecurityV1Server{
		svcWatchHandlerSecurityV1: MakeAutoWatchSvcSecurityV1Endpoint(s, logger),

		AutoAddAppEndpoint:                        MakeSecurityV1AutoAddAppEndpoint(s, logger),
		AutoAddCertificateEndpoint:                MakeSecurityV1AutoAddCertificateEndpoint(s, logger),
		AutoAddSGPolicyEndpoint:                   MakeSecurityV1AutoAddSGPolicyEndpoint(s, logger),
		AutoAddSecurityGroupEndpoint:              MakeSecurityV1AutoAddSecurityGroupEndpoint(s, logger),
		AutoAddTrafficEncryptionPolicyEndpoint:    MakeSecurityV1AutoAddTrafficEncryptionPolicyEndpoint(s, logger),
		AutoDeleteAppEndpoint:                     MakeSecurityV1AutoDeleteAppEndpoint(s, logger),
		AutoDeleteCertificateEndpoint:             MakeSecurityV1AutoDeleteCertificateEndpoint(s, logger),
		AutoDeleteSGPolicyEndpoint:                MakeSecurityV1AutoDeleteSGPolicyEndpoint(s, logger),
		AutoDeleteSecurityGroupEndpoint:           MakeSecurityV1AutoDeleteSecurityGroupEndpoint(s, logger),
		AutoDeleteTrafficEncryptionPolicyEndpoint: MakeSecurityV1AutoDeleteTrafficEncryptionPolicyEndpoint(s, logger),
		AutoGetAppEndpoint:                        MakeSecurityV1AutoGetAppEndpoint(s, logger),
		AutoGetCertificateEndpoint:                MakeSecurityV1AutoGetCertificateEndpoint(s, logger),
		AutoGetSGPolicyEndpoint:                   MakeSecurityV1AutoGetSGPolicyEndpoint(s, logger),
		AutoGetSecurityGroupEndpoint:              MakeSecurityV1AutoGetSecurityGroupEndpoint(s, logger),
		AutoGetTrafficEncryptionPolicyEndpoint:    MakeSecurityV1AutoGetTrafficEncryptionPolicyEndpoint(s, logger),
		AutoListAppEndpoint:                       MakeSecurityV1AutoListAppEndpoint(s, logger),
		AutoListCertificateEndpoint:               MakeSecurityV1AutoListCertificateEndpoint(s, logger),
		AutoListSGPolicyEndpoint:                  MakeSecurityV1AutoListSGPolicyEndpoint(s, logger),
		AutoListSecurityGroupEndpoint:             MakeSecurityV1AutoListSecurityGroupEndpoint(s, logger),
		AutoListTrafficEncryptionPolicyEndpoint:   MakeSecurityV1AutoListTrafficEncryptionPolicyEndpoint(s, logger),
		AutoUpdateAppEndpoint:                     MakeSecurityV1AutoUpdateAppEndpoint(s, logger),
		AutoUpdateCertificateEndpoint:             MakeSecurityV1AutoUpdateCertificateEndpoint(s, logger),
		AutoUpdateSGPolicyEndpoint:                MakeSecurityV1AutoUpdateSGPolicyEndpoint(s, logger),
		AutoUpdateSecurityGroupEndpoint:           MakeSecurityV1AutoUpdateSecurityGroupEndpoint(s, logger),
		AutoUpdateTrafficEncryptionPolicyEndpoint: MakeSecurityV1AutoUpdateTrafficEncryptionPolicyEndpoint(s, logger),

		watchHandlerSecurityGroup:           MakeAutoWatchSecurityGroupEndpoint(s, logger),
		watchHandlerSGPolicy:                MakeAutoWatchSGPolicyEndpoint(s, logger),
		watchHandlerApp:                     MakeAutoWatchAppEndpoint(s, logger),
		watchHandlerCertificate:             MakeAutoWatchCertificateEndpoint(s, logger),
		watchHandlerTrafficEncryptionPolicy: MakeAutoWatchTrafficEncryptionPolicyEndpoint(s, logger),
	}
}

// LoggingSecurityV1MiddlewareClient adds middleware for the client
func LoggingSecurityV1MiddlewareClient(logger log.Logger) MiddlewareSecurityV1Client {
	return func(next ServiceSecurityV1Client) ServiceSecurityV1Client {
		return loggingSecurityV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingSecurityV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceSecurityV1Client
}

// LoggingSecurityV1MiddlewareServer adds middleware for the client
func LoggingSecurityV1MiddlewareServer(logger log.Logger) MiddlewareSecurityV1Server {
	return func(next ServiceSecurityV1Server) ServiceSecurityV1Server {
		return loggingSecurityV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingSecurityV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceSecurityV1Server
}

func (m loggingSecurityV1MiddlewareClient) AutoAddApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddSGPolicy(ctx context.Context, in *SGPolicy) (resp *SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteSGPolicy(ctx context.Context, in *SGPolicy) (resp *SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetSGPolicy(ctx context.Context, in *SGPolicy) (resp *SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (resp *AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListCertificate(ctx context.Context, in *api.ListWatchOptions) (resp *CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListSGPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *SGPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (resp *SecurityGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoListTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *TrafficEncryptionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (resp *Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateSGPolicy(ctx context.Context, in *SGPolicy) (resp *SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (resp *SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (resp *TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareClient) AutoWatchSvcSecurityV1(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchSvcSecurityV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchSvcSecurityV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchSvcSecurityV1(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareClient) AutoWatchSecurityGroup(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchSecurityGroupClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchSGPolicy(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchSGPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchAppClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchCertificate(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchCertificateClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp SecurityV1_AutoWatchTrafficEncryptionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoAddApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddSGPolicy(ctx context.Context, in SGPolicy) (resp SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoAddTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoAddTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteSGPolicy(ctx context.Context, in SGPolicy) (resp SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoDeleteTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetSGPolicy(ctx context.Context, in SGPolicy) (resp SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoGetTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoGetTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListApp(ctx context.Context, in api.ListWatchOptions) (resp AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListCertificate(ctx context.Context, in api.ListWatchOptions) (resp CertificateList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListSGPolicy(ctx context.Context, in api.ListWatchOptions) (resp SGPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListSecurityGroup(ctx context.Context, in api.ListWatchOptions) (resp SecurityGroupList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoListTrafficEncryptionPolicy(ctx context.Context, in api.ListWatchOptions) (resp TrafficEncryptionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoListTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTrafficEncryptionPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateCertificate(ctx context.Context, in Certificate) (resp Certificate, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCertificate(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateSGPolicy(ctx context.Context, in SGPolicy) (resp SGPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSGPolicy(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateSecurityGroup(ctx context.Context, in SecurityGroup) (resp SecurityGroup, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSecurityGroup(ctx, in)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in TrafficEncryptionPolicy) (resp TrafficEncryptionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "SecurityV1", "method", "AutoUpdateTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTrafficEncryptionPolicy(ctx, in)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoWatchSvcSecurityV1(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSvcSecurityV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchSvcSecurityV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcSecurityV1(in, stream)
	return
}

func (m loggingSecurityV1MiddlewareServer) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchSecurityGroup", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSecurityGroup(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchSGPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSGPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchSGPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSGPolicy(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchApp(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchCertificate", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCertificate(in, stream)
	return
}
func (m loggingSecurityV1MiddlewareServer) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "SecurityV1", "method", "AutoWatchTrafficEncryptionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTrafficEncryptionPolicy(in, stream)
	return
}
func (r *EndpointsSecurityV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		req.Header.Add("Authorization", val)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURISecurityV1AutoAddAppCreateOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/apps")
}

//
func makeURISecurityV1AutoAddCertificateCreateOper(in *Certificate) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/certificates")
}

//
func makeURISecurityV1AutoAddSGPolicyCreateOper(in *SGPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/sgpolicy")
}

//
func makeURISecurityV1AutoAddSecurityGroupCreateOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups")
}

//
func makeURISecurityV1AutoAddTrafficEncryptionPolicyCreateOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/trafficEncryptionPolicy")
}

//
func makeURISecurityV1AutoDeleteAppDeleteOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/apps/", in.Name)
}

//
func makeURISecurityV1AutoDeleteCertificateDeleteOper(in *Certificate) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/certificates/", in.Name)
}

//
func makeURISecurityV1AutoDeleteSGPolicyDeleteOper(in *SGPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/sgpolicy/", in.Name)
}

//
func makeURISecurityV1AutoDeleteSecurityGroupDeleteOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoDeleteTrafficEncryptionPolicyDeleteOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name)
}

//
func makeURISecurityV1AutoGetAppGetOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/apps/", in.Name)
}

//
func makeURISecurityV1AutoGetCertificateGetOper(in *Certificate) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/certificates/", in.Name)
}

//
func makeURISecurityV1AutoGetSGPolicyGetOper(in *SGPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/sgpolicy/", in.Name)
}

//
func makeURISecurityV1AutoGetSecurityGroupGetOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoGetTrafficEncryptionPolicyGetOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name)
}

//
func makeURISecurityV1AutoListAppListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/apps")
}

//
func makeURISecurityV1AutoListCertificateListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/certificates")
}

//
func makeURISecurityV1AutoListSGPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/sgpolicy")
}

//
func makeURISecurityV1AutoListSecurityGroupListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups")
}

//
func makeURISecurityV1AutoUpdateAppUpdateOper(in *App) string {
	return fmt.Sprint("/configs/security/v1", "/apps/", in.Name)
}

//
func makeURISecurityV1AutoUpdateCertificateUpdateOper(in *Certificate) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/certificates/", in.Name)
}

//
func makeURISecurityV1AutoUpdateSGPolicyUpdateOper(in *SGPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/sgpolicy/", in.Name)
}

//
func makeURISecurityV1AutoUpdateSecurityGroupUpdateOper(in *SecurityGroup) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

//
func makeURISecurityV1AutoUpdateTrafficEncryptionPolicyUpdateOper(in *TrafficEncryptionPolicy) string {
	return fmt.Sprint("/configs/security/v1", "/tenant/", in.Tenant, "/trafficEncryptionPolicy/", in.Name)
}

// AutoAddSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoAddSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoAddSecurityGroupCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoAddSecurityGroup(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), nil
}

// AutoUpdateSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoUpdateSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoUpdateSecurityGroupUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoUpdateSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoGetSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoGetSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoGetSecurityGroupGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoGetSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoDeleteSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoDeleteSecurityGroup(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error) {
	path := makeURISecurityV1AutoDeleteSecurityGroupDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoDeleteSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroup), err
}

// AutoListSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoListSecurityGroup(ctx context.Context, options *api.ListWatchOptions) (*SecurityGroupList, error) {
	path := makeURISecurityV1AutoListSecurityGroupListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoListSecurityGroup(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SecurityGroupList), err
}

// AutoWatchSecurityGroup CRUD method for SecurityGroup
func (r *EndpointsSecurityV1RestClient) AutoWatchSecurityGroup(ctx context.Context, stream SecurityV1_AutoWatchSecurityGroupClient) (kvstore.Watcher, error) {
	// XXX-TODO(sanjayt): Add a Rest client handler with chunker
	return nil, nil
}

// AutoAddSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoAddSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	path := makeURISecurityV1AutoAddSGPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoAddSGPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*SGPolicy), nil
}

// AutoUpdateSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoUpdateSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	path := makeURISecurityV1AutoUpdateSGPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoUpdateSGPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SGPolicy), err
}

// AutoGetSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoGetSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	path := makeURISecurityV1AutoGetSGPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoGetSGPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SGPolicy), err
}

// AutoDeleteSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoDeleteSGPolicy(ctx context.Context, in *SGPolicy) (*SGPolicy, error) {
	path := makeURISecurityV1AutoDeleteSGPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoDeleteSGPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SGPolicy), err
}

// AutoListSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoListSGPolicy(ctx context.Context, options *api.ListWatchOptions) (*SGPolicyList, error) {
	path := makeURISecurityV1AutoListSGPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoListSGPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SGPolicyList), err
}

// AutoWatchSGPolicy CRUD method for SGPolicy
func (r *EndpointsSecurityV1RestClient) AutoWatchSGPolicy(ctx context.Context, stream SecurityV1_AutoWatchSGPolicyClient) (kvstore.Watcher, error) {
	// XXX-TODO(sanjayt): Add a Rest client handler with chunker
	return nil, nil
}

// AutoAddApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoAddAppCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoAddApp(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), nil
}

// AutoUpdateApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoUpdateAppUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoUpdateApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoGetApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoGetAppGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoGetApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoDeleteApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	path := makeURISecurityV1AutoDeleteAppDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoDeleteApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoListApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoListApp(ctx context.Context, options *api.ListWatchOptions) (*AppList, error) {
	path := makeURISecurityV1AutoListAppListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoListApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppList), err
}

// AutoWatchApp CRUD method for App
func (r *EndpointsSecurityV1RestClient) AutoWatchApp(ctx context.Context, stream SecurityV1_AutoWatchAppClient) (kvstore.Watcher, error) {
	// XXX-TODO(sanjayt): Add a Rest client handler with chunker
	return nil, nil
}

// AutoAddCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoAddCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURISecurityV1AutoAddCertificateCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoAddCertificate(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), nil
}

// AutoUpdateCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoUpdateCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURISecurityV1AutoUpdateCertificateUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoUpdateCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoGetCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoGetCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURISecurityV1AutoGetCertificateGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoGetCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoDeleteCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoDeleteCertificate(ctx context.Context, in *Certificate) (*Certificate, error) {
	path := makeURISecurityV1AutoDeleteCertificateDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoDeleteCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Certificate), err
}

// AutoListCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoListCertificate(ctx context.Context, options *api.ListWatchOptions) (*CertificateList, error) {
	path := makeURISecurityV1AutoListCertificateListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoListCertificate(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CertificateList), err
}

// AutoWatchCertificate CRUD method for Certificate
func (r *EndpointsSecurityV1RestClient) AutoWatchCertificate(ctx context.Context, stream SecurityV1_AutoWatchCertificateClient) (kvstore.Watcher, error) {
	// XXX-TODO(sanjayt): Add a Rest client handler with chunker
	return nil, nil
}

// AutoAddTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoAddTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURISecurityV1AutoAddTrafficEncryptionPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoAddTrafficEncryptionPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), nil
}

// AutoUpdateTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoUpdateTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURISecurityV1AutoUpdateTrafficEncryptionPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoUpdateTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoGetTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoGetTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURISecurityV1AutoGetTrafficEncryptionPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoGetTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoDeleteTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoDeleteTrafficEncryptionPolicy(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	path := makeURISecurityV1AutoDeleteTrafficEncryptionPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespSecurityV1AutoDeleteTrafficEncryptionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TrafficEncryptionPolicy), err
}

// AutoListTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoListTrafficEncryptionPolicy(ctx context.Context, options *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchTrafficEncryptionPolicy CRUD method for TrafficEncryptionPolicy
func (r *EndpointsSecurityV1RestClient) AutoWatchTrafficEncryptionPolicy(ctx context.Context, stream SecurityV1_AutoWatchTrafficEncryptionPolicyClient) (kvstore.Watcher, error) {
	// XXX-TODO(sanjayt): Add a Rest client handler with chunker
	return nil, nil
}

// MakeSecurityV1RestClientEndpoints make REST client endpoints
func MakeSecurityV1RestClientEndpoints(instance string) (EndpointsSecurityV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsSecurityV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
