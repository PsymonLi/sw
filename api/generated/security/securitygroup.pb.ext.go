// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: securitygroup.proto
*/
package security

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *SecurityGroup) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "security-groups/", m.Tenant, "/", m.Name)
}

func (m *SecurityGroup) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/security-groups/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroup) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroup
	var ok bool
	if into == nil {
		out = &SecurityGroup{}
	} else {
		out, ok = into.(*SecurityGroup)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroup) Defaults(ver string) bool {
	m.Kind = "SecurityGroup"
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroupSpec) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroupSpec
	var ok bool
	if into == nil {
		out = &SecurityGroupSpec{}
	} else {
		out, ok = into.(*SecurityGroupSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroupSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SecurityGroupStatus) Clone(into interface{}) (interface{}, error) {
	var out *SecurityGroupStatus
	var ok bool
	if into == nil {
		out = &SecurityGroupStatus{}
	} else {
		out, ok = into.(*SecurityGroupStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SecurityGroupStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *SecurityGroup) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error

	dlmtr := "."
	if path == "" {
		dlmtr = ""
	}
	npath := path + dlmtr + "Spec"
	if errs := m.Spec.Validate(ver, npath, ignoreStatus); errs != nil {
		ret = append(ret, errs...)
	}
	return ret
}

func (m *SecurityGroupSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.WorkloadSelector != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "WorkloadSelector"
		if errs := m.WorkloadSelector.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SecurityGroupStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&SecurityGroup{},
	)

}
