// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package securityApiServer is a auto generated package.
Input file: x509.proto
*/
package security

import (
	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapX509 = map[string]*runtime.Struct{

	"security.Certificate": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": runtime.Field{Name: "Spec", JSONTag: "spec", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "security.CertificateSpec"},

			"Status": runtime.Field{Name: "Status", JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "security.CertificateStatus"},
		},
	},
	"security.CertificateSpec": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Description": runtime.Field{Name: "Description", JSONTag: "description", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Usages": runtime.Field{Name: "Usages", JSONTag: "usages", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Body": runtime.Field{Name: "Body", JSONTag: "body", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"TrustChain": runtime.Field{Name: "TrustChain", JSONTag: "trust-chain", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"security.CertificateStatus": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Validity": runtime.Field{Name: "Validity", JSONTag: "validity", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Workloads": runtime.Field{Name: "Workloads", JSONTag: "workloads", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapX509)
}
