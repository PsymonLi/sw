// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: x509.proto
*/
package security

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapX509 = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Certificate) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "certificates/", m.Tenant, "/", m.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Certificate) Clone(into interface{}) (interface{}, error) {
	var out *Certificate
	var ok bool
	if into == nil {
		out = &Certificate{}
	} else {
		out, ok = into.(*Certificate)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Certificate) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	ret = ret || m.Status.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CertificateSpec) Clone(into interface{}) (interface{}, error) {
	var out *CertificateSpec
	var ok bool
	if into == nil {
		out = &CertificateSpec{}
	} else {
		out, ok = into.(*CertificateSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CertificateSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		for k := range m.Usages {
			m.Usages[k] = CertificateSpec_UsageValues_name[0]
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CertificateStatus) Clone(into interface{}) (interface{}, error) {
	var out *CertificateStatus
	var ok bool
	if into == nil {
		out = &CertificateStatus{}
	} else {
		out, ok = into.(*CertificateStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CertificateStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Validity = CertificateStatus_ValidityValues_name[0]
	}
	return ret
}

// Validators

func (m *Certificate) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *CertificateSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapX509["CertificateSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapX509["CertificateSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *CertificateStatus) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapX509["CertificateStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapX509["CertificateStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Certificate{},
	)

	validatorMapX509 = make(map[string]map[string][]func(interface{}) bool)

	validatorMapX509["CertificateSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapX509["CertificateSpec"]["all"] = append(validatorMapX509["CertificateSpec"]["all"], func(i interface{}) bool {
		m := i.(*CertificateSpec)

		for _, v := range m.Usages {
			if _, ok := CertificateSpec_UsageValues_value[v]; !ok {
				return false
			}
		}
		return true
	})

	validatorMapX509["CertificateStatus"] = make(map[string][]func(interface{}) bool)
	validatorMapX509["CertificateStatus"]["all"] = append(validatorMapX509["CertificateStatus"]["all"], func(i interface{}) bool {
		m := i.(*CertificateStatus)

		if _, ok := CertificateStatus_ValidityValues_value[m.Validity]; !ok {
			return false
		}
		return true
	})

}
