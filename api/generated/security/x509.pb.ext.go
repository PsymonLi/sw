// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: x509.proto
*/
package security

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// CertificateSpec_UsageValues_normal is a map of normalized values for the enum
var CertificateSpec_UsageValues_normal = map[string]string{
	"client":     "client",
	"server":     "server",
	"trust-root": "trust-root",
}

var CertificateSpec_UsageValues_vname = map[int32]string{
	0: "server",
	1: "client",
	2: "trust-root",
}

var CertificateSpec_UsageValues_vvalue = map[string]int32{
	"server":     0,
	"client":     1,
	"trust-root": 2,
}

func (x CertificateSpec_UsageValues) String() string {
	return CertificateSpec_UsageValues_vname[int32(x)]
}

// CertificateStatus_ValidityValues_normal is a map of normalized values for the enum
var CertificateStatus_ValidityValues_normal = map[string]string{
	"expired": "expired",
	"invalid": "invalid",
	"unknown": "unknown",
	"valid":   "valid",
}

var CertificateStatus_ValidityValues_vname = map[int32]string{
	0: "unknown",
	1: "valid",
	2: "invalid",
	3: "expired",
}

var CertificateStatus_ValidityValues_vvalue = map[string]int32{
	"unknown": 0,
	"valid":   1,
	"invalid": 2,
	"expired": 3,
}

func (x CertificateStatus_ValidityValues) String() string {
	return CertificateStatus_ValidityValues_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapX509 = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *Certificate) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "certificates/", m.Tenant, "/", m.Name)
}

func (m *Certificate) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/certificates/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Certificate) Clone(into interface{}) (interface{}, error) {
	var out *Certificate
	var ok bool
	if into == nil {
		out = &Certificate{}
	} else {
		out, ok = into.(*Certificate)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Certificate))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Certificate) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Certificate"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CertificateSpec) Clone(into interface{}) (interface{}, error) {
	var out *CertificateSpec
	var ok bool
	if into == nil {
		out = &CertificateSpec{}
	} else {
		out, ok = into.(*CertificateSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CertificateSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CertificateSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		for k := range m.Usages {
			m.Usages[k] = "server"
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CertificateStatus) Clone(into interface{}) (interface{}, error) {
	var out *CertificateStatus
	var ok bool
	if into == nil {
		out = &CertificateStatus{}
	} else {
		out, ok = into.(*CertificateStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CertificateStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CertificateStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Validity = "unknown"
	}
	return ret
}

// Validators and Requirements

func (m *Certificate) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *Certificate) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for Certificate"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Certificate) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *CertificateSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CertificateSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapX509["CertificateSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapX509["CertificateSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *CertificateSpec) Normalize() {

	for k, v := range m.Usages {
		m.Usages[k] = CertificateSpec_UsageValues_normal[strings.ToLower(v)]
	}

}

func (m *CertificateStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CertificateStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapX509["CertificateStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapX509["CertificateStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *CertificateStatus) Normalize() {

	m.Validity = CertificateStatus_ValidityValues_normal[strings.ToLower(m.Validity)]

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Certificate{},
	)

	validatorMapX509 = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapX509["CertificateSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapX509["CertificateSpec"]["all"] = append(validatorMapX509["CertificateSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*CertificateSpec)

		for k, v := range m.Usages {
			if _, ok := CertificateSpec_UsageValues_vvalue[v]; !ok {
				vals := []string{}
				for k1, _ := range CertificateSpec_UsageValues_vvalue {
					vals = append(vals, k1)
				}
				return fmt.Errorf("%v[%v] did not match allowed strings %v", path+"."+"Usages", k, vals)
			}
		}
		return nil
	})

	validatorMapX509["CertificateStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapX509["CertificateStatus"]["all"] = append(validatorMapX509["CertificateStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*CertificateStatus)

		if _, ok := CertificateStatus_ValidityValues_vvalue[m.Validity]; !ok {
			vals := []string{}
			for k1, _ := range CertificateStatus_ValidityValues_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Validity", vals)
		}
		return nil
	})

}
