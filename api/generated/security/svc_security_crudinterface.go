// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package security

import (
	"context"

	api "github.com/pensando/sw/api"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
)

// Dummy vars to suppress unused imports message
var _ context.Context
var _ api.ObjectMeta
var _ kvstore.Interface

// SecurityV1SecurityGroupInterface exposes the CRUD methods for SecurityGroup
type SecurityV1SecurityGroupInterface interface {
	Create(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error)
	Update(ctx context.Context, in *SecurityGroup) (*SecurityGroup, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*SecurityGroup, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*SecurityGroup, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*SecurityGroup, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1SGPolicyInterface exposes the CRUD methods for SGPolicy
type SecurityV1SGPolicyInterface interface {
	Create(ctx context.Context, in *SGPolicy) (*SGPolicy, error)
	Update(ctx context.Context, in *SGPolicy) (*SGPolicy, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*SGPolicy, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*SGPolicy, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*SGPolicy, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1AppInterface exposes the CRUD methods for App
type SecurityV1AppInterface interface {
	Create(ctx context.Context, in *App) (*App, error)
	Update(ctx context.Context, in *App) (*App, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*App, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*App, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*App, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1FirewallProfileInterface exposes the CRUD methods for FirewallProfile
type SecurityV1FirewallProfileInterface interface {
	Create(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error)
	Update(ctx context.Context, in *FirewallProfile) (*FirewallProfile, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*FirewallProfile, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*FirewallProfile, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*FirewallProfile, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1CertificateInterface exposes the CRUD methods for Certificate
type SecurityV1CertificateInterface interface {
	Create(ctx context.Context, in *Certificate) (*Certificate, error)
	Update(ctx context.Context, in *Certificate) (*Certificate, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*Certificate, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*Certificate, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*Certificate, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1TrafficEncryptionPolicyInterface exposes the CRUD methods for TrafficEncryptionPolicy
type SecurityV1TrafficEncryptionPolicyInterface interface {
	Create(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	Update(ctx context.Context, in *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error)
	Get(ctx context.Context, objMeta *api.ObjectMeta) (*TrafficEncryptionPolicy, error)
	Delete(ctx context.Context, objMeta *api.ObjectMeta) (*TrafficEncryptionPolicy, error)
	List(ctx context.Context, options *api.ListWatchOptions) ([]*TrafficEncryptionPolicy, error)
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
	Allowed(oper apiserver.APIOperType) bool
}

// SecurityV1Interface exposes objects with CRUD operations allowed by the service
type SecurityV1Interface interface {
	SecurityGroup() SecurityV1SecurityGroupInterface
	SGPolicy() SecurityV1SGPolicyInterface
	App() SecurityV1AppInterface
	FirewallProfile() SecurityV1FirewallProfileInterface
	Certificate() SecurityV1CertificateInterface
	TrafficEncryptionPolicy() SecurityV1TrafficEncryptionPolicyInterface
	Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error)
}
