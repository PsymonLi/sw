// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: svc_security.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerSecurityV1 struct {
	Endpoints EndpointsSecurityV1Server

	AutoAddAppHdlr                        grpctransport.Handler
	AutoAddCertificateHdlr                grpctransport.Handler
	AutoAddFirewallProfileHdlr            grpctransport.Handler
	AutoAddNetworkSecurityPolicyHdlr      grpctransport.Handler
	AutoAddSecurityGroupHdlr              grpctransport.Handler
	AutoAddTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoDeleteAppHdlr                     grpctransport.Handler
	AutoDeleteCertificateHdlr             grpctransport.Handler
	AutoDeleteFirewallProfileHdlr         grpctransport.Handler
	AutoDeleteNetworkSecurityPolicyHdlr   grpctransport.Handler
	AutoDeleteSecurityGroupHdlr           grpctransport.Handler
	AutoDeleteTrafficEncryptionPolicyHdlr grpctransport.Handler
	AutoGetAppHdlr                        grpctransport.Handler
	AutoGetCertificateHdlr                grpctransport.Handler
	AutoGetFirewallProfileHdlr            grpctransport.Handler
	AutoGetNetworkSecurityPolicyHdlr      grpctransport.Handler
	AutoGetSecurityGroupHdlr              grpctransport.Handler
	AutoGetTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoLabelAppHdlr                      grpctransport.Handler
	AutoLabelCertificateHdlr              grpctransport.Handler
	AutoLabelFirewallProfileHdlr          grpctransport.Handler
	AutoLabelNetworkSecurityPolicyHdlr    grpctransport.Handler
	AutoLabelSecurityGroupHdlr            grpctransport.Handler
	AutoLabelTrafficEncryptionPolicyHdlr  grpctransport.Handler
	AutoListAppHdlr                       grpctransport.Handler
	AutoListCertificateHdlr               grpctransport.Handler
	AutoListFirewallProfileHdlr           grpctransport.Handler
	AutoListNetworkSecurityPolicyHdlr     grpctransport.Handler
	AutoListSecurityGroupHdlr             grpctransport.Handler
	AutoListTrafficEncryptionPolicyHdlr   grpctransport.Handler
	AutoUpdateAppHdlr                     grpctransport.Handler
	AutoUpdateCertificateHdlr             grpctransport.Handler
	AutoUpdateFirewallProfileHdlr         grpctransport.Handler
	AutoUpdateNetworkSecurityPolicyHdlr   grpctransport.Handler
	AutoUpdateSecurityGroupHdlr           grpctransport.Handler
	AutoUpdateTrafficEncryptionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerSecurityV1 creates a GRPC server for SecurityV1 service
func MakeGRPCServerSecurityV1(ctx context.Context, endpoints EndpointsSecurityV1Server, logger log.Logger) SecurityV1Server {
	return &grpcServerSecurityV1{
		Endpoints: endpoints,
		AutoAddAppHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddApp", logger)))...,
		),

		AutoAddCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoAddCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCertificate", logger)))...,
		),

		AutoAddFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoAddFirewallProfileEndpoint,
			DecodeGrpcReqFirewallProfile,
			EncodeGrpcRespFirewallProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddFirewallProfile", logger)))...,
		),

		AutoAddNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqNetworkSecurityPolicy,
			EncodeGrpcRespNetworkSecurityPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddNetworkSecurityPolicy", logger)))...,
		),

		AutoAddSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoAddSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddSecurityGroup", logger)))...,
		),

		AutoAddTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddTrafficEncryptionPolicy", logger)))...,
		),

		AutoDeleteAppHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteApp", logger)))...,
		),

		AutoDeleteCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCertificate", logger)))...,
		),

		AutoDeleteFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteFirewallProfileEndpoint,
			DecodeGrpcReqFirewallProfile,
			EncodeGrpcRespFirewallProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteFirewallProfile", logger)))...,
		),

		AutoDeleteNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqNetworkSecurityPolicy,
			EncodeGrpcRespNetworkSecurityPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteNetworkSecurityPolicy", logger)))...,
		),

		AutoDeleteSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteSecurityGroup", logger)))...,
		),

		AutoDeleteTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteTrafficEncryptionPolicy", logger)))...,
		),

		AutoGetAppHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetApp", logger)))...,
		),

		AutoGetCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoGetCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCertificate", logger)))...,
		),

		AutoGetFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoGetFirewallProfileEndpoint,
			DecodeGrpcReqFirewallProfile,
			EncodeGrpcRespFirewallProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetFirewallProfile", logger)))...,
		),

		AutoGetNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqNetworkSecurityPolicy,
			EncodeGrpcRespNetworkSecurityPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetNetworkSecurityPolicy", logger)))...,
		),

		AutoGetSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoGetSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetSecurityGroup", logger)))...,
		),

		AutoGetTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetTrafficEncryptionPolicy", logger)))...,
		),

		AutoLabelAppHdlr: grpctransport.NewServer(
			endpoints.AutoLabelAppEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespApp,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelApp", logger)))...,
		),

		AutoLabelCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoLabelCertificateEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespCertificate,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelCertificate", logger)))...,
		),

		AutoLabelFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoLabelFirewallProfileEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespFirewallProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelFirewallProfile", logger)))...,
		),

		AutoLabelNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoLabelNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespNetworkSecurityPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelNetworkSecurityPolicy", logger)))...,
		),

		AutoLabelSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoLabelSecurityGroupEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespSecurityGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelSecurityGroup", logger)))...,
		),

		AutoLabelTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoLabelTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelTrafficEncryptionPolicy", logger)))...,
		),

		AutoListAppHdlr: grpctransport.NewServer(
			endpoints.AutoListAppEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListApp", logger)))...,
		),

		AutoListCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoListCertificateEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCertificateList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCertificate", logger)))...,
		),

		AutoListFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoListFirewallProfileEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFirewallProfileList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListFirewallProfile", logger)))...,
		),

		AutoListNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespNetworkSecurityPolicyList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListNetworkSecurityPolicy", logger)))...,
		),

		AutoListSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoListSecurityGroupEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespSecurityGroupList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListSecurityGroup", logger)))...,
		),

		AutoListTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespTrafficEncryptionPolicyList,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListTrafficEncryptionPolicy", logger)))...,
		),

		AutoUpdateAppHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateApp", logger)))...,
		),

		AutoUpdateCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCertificate", logger)))...,
		),

		AutoUpdateFirewallProfileHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateFirewallProfileEndpoint,
			DecodeGrpcReqFirewallProfile,
			EncodeGrpcRespFirewallProfile,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateFirewallProfile", logger)))...,
		),

		AutoUpdateNetworkSecurityPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNetworkSecurityPolicyEndpoint,
			DecodeGrpcReqNetworkSecurityPolicy,
			EncodeGrpcRespNetworkSecurityPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateNetworkSecurityPolicy", logger)))...,
		),

		AutoUpdateSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateSecurityGroup", logger)))...,
		),

		AutoUpdateTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append([]grpctransport.ServerOption{grpctransport.ServerErrorLogger(logger), grpctransport.ServerBefore(recoverVersion)}, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateTrafficEncryptionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerSecurityV1) AutoAddApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoAddAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddApp).V
	return &r, resp.(respSecurityV1AutoAddApp).Err
}

func decodeHTTPrespSecurityV1AutoAddApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoAddCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddCertificate).V
	return &r, resp.(respSecurityV1AutoAddCertificate).Err
}

func decodeHTTPrespSecurityV1AutoAddCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddFirewallProfile(ctx oldcontext.Context, req *FirewallProfile) (*FirewallProfile, error) {
	_, resp, err := s.AutoAddFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddFirewallProfile).V
	return &r, resp.(respSecurityV1AutoAddFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoAddFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddNetworkSecurityPolicy(ctx oldcontext.Context, req *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	_, resp, err := s.AutoAddNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoAddNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoAddNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoAddSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddSecurityGroup).V
	return &r, resp.(respSecurityV1AutoAddSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoAddSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoAddTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoAddTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoAddTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoDeleteAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteApp).V
	return &r, resp.(respSecurityV1AutoDeleteApp).Err
}

func decodeHTTPrespSecurityV1AutoDeleteApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoDeleteCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteCertificate).V
	return &r, resp.(respSecurityV1AutoDeleteCertificate).Err
}

func decodeHTTPrespSecurityV1AutoDeleteCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteFirewallProfile(ctx oldcontext.Context, req *FirewallProfile) (*FirewallProfile, error) {
	_, resp, err := s.AutoDeleteFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteFirewallProfile).V
	return &r, resp.(respSecurityV1AutoDeleteFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoDeleteFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteNetworkSecurityPolicy(ctx oldcontext.Context, req *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	_, resp, err := s.AutoDeleteNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoDeleteNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoDeleteNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoDeleteSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteSecurityGroup).V
	return &r, resp.(respSecurityV1AutoDeleteSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoDeleteSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoDeleteTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoDeleteTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoDeleteTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoGetAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetApp).V
	return &r, resp.(respSecurityV1AutoGetApp).Err
}

func decodeHTTPrespSecurityV1AutoGetApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoGetCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetCertificate).V
	return &r, resp.(respSecurityV1AutoGetCertificate).Err
}

func decodeHTTPrespSecurityV1AutoGetCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetFirewallProfile(ctx oldcontext.Context, req *FirewallProfile) (*FirewallProfile, error) {
	_, resp, err := s.AutoGetFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetFirewallProfile).V
	return &r, resp.(respSecurityV1AutoGetFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoGetFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetNetworkSecurityPolicy(ctx oldcontext.Context, req *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	_, resp, err := s.AutoGetNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoGetNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoGetNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoGetSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetSecurityGroup).V
	return &r, resp.(respSecurityV1AutoGetSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoGetSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoGetTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoGetTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoGetTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelApp(ctx oldcontext.Context, req *api.Label) (*App, error) {
	_, resp, err := s.AutoLabelAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelApp).V
	return &r, resp.(respSecurityV1AutoLabelApp).Err
}

func decodeHTTPrespSecurityV1AutoLabelApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelCertificate(ctx oldcontext.Context, req *api.Label) (*Certificate, error) {
	_, resp, err := s.AutoLabelCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelCertificate).V
	return &r, resp.(respSecurityV1AutoLabelCertificate).Err
}

func decodeHTTPrespSecurityV1AutoLabelCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelFirewallProfile(ctx oldcontext.Context, req *api.Label) (*FirewallProfile, error) {
	_, resp, err := s.AutoLabelFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelFirewallProfile).V
	return &r, resp.(respSecurityV1AutoLabelFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoLabelFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelNetworkSecurityPolicy(ctx oldcontext.Context, req *api.Label) (*NetworkSecurityPolicy, error) {
	_, resp, err := s.AutoLabelNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoLabelNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoLabelNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelSecurityGroup(ctx oldcontext.Context, req *api.Label) (*SecurityGroup, error) {
	_, resp, err := s.AutoLabelSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelSecurityGroup).V
	return &r, resp.(respSecurityV1AutoLabelSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoLabelSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoLabelTrafficEncryptionPolicy(ctx oldcontext.Context, req *api.Label) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoLabelTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoLabelTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoLabelTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoLabelTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListApp(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppList, error) {
	_, resp, err := s.AutoListAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListApp).V
	return &r, resp.(respSecurityV1AutoListApp).Err
}

func decodeHTTPrespSecurityV1AutoListApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListCertificate(ctx oldcontext.Context, req *api.ListWatchOptions) (*CertificateList, error) {
	_, resp, err := s.AutoListCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListCertificate).V
	return &r, resp.(respSecurityV1AutoListCertificate).Err
}

func decodeHTTPrespSecurityV1AutoListCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CertificateList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListFirewallProfile(ctx oldcontext.Context, req *api.ListWatchOptions) (*FirewallProfileList, error) {
	_, resp, err := s.AutoListFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListFirewallProfile).V
	return &r, resp.(respSecurityV1AutoListFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoListFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfileList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListNetworkSecurityPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*NetworkSecurityPolicyList, error) {
	_, resp, err := s.AutoListNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoListNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoListNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListSecurityGroup(ctx oldcontext.Context, req *api.ListWatchOptions) (*SecurityGroupList, error) {
	_, resp, err := s.AutoListSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListSecurityGroup).V
	return &r, resp.(respSecurityV1AutoListSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoListSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroupList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListTrafficEncryptionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	_, resp, err := s.AutoListTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoListTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoListTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoUpdateAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateApp).V
	return &r, resp.(respSecurityV1AutoUpdateApp).Err
}

func decodeHTTPrespSecurityV1AutoUpdateApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoUpdateCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateCertificate).V
	return &r, resp.(respSecurityV1AutoUpdateCertificate).Err
}

func decodeHTTPrespSecurityV1AutoUpdateCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateFirewallProfile(ctx oldcontext.Context, req *FirewallProfile) (*FirewallProfile, error) {
	_, resp, err := s.AutoUpdateFirewallProfileHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateFirewallProfile).V
	return &r, resp.(respSecurityV1AutoUpdateFirewallProfile).Err
}

func decodeHTTPrespSecurityV1AutoUpdateFirewallProfile(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FirewallProfile
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateNetworkSecurityPolicy(ctx oldcontext.Context, req *NetworkSecurityPolicy) (*NetworkSecurityPolicy, error) {
	_, resp, err := s.AutoUpdateNetworkSecurityPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateNetworkSecurityPolicy).V
	return &r, resp.(respSecurityV1AutoUpdateNetworkSecurityPolicy).Err
}

func decodeHTTPrespSecurityV1AutoUpdateNetworkSecurityPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp NetworkSecurityPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoUpdateSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateSecurityGroup).V
	return &r, resp.(respSecurityV1AutoUpdateSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoUpdateSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoUpdateTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoUpdateTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoUpdateTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoWatchSvcSecurityV1(in *api.AggWatchOptions, stream SecurityV1_AutoWatchSvcSecurityV1Server) error {
	return s.Endpoints.AutoWatchSvcSecurityV1(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) error {
	return s.Endpoints.AutoWatchSecurityGroup(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchNetworkSecurityPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchNetworkSecurityPolicyServer) error {
	return s.Endpoints.AutoWatchNetworkSecurityPolicy(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) error {
	return s.Endpoints.AutoWatchApp(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchFirewallProfile(in *api.ListWatchOptions, stream SecurityV1_AutoWatchFirewallProfileServer) error {
	return s.Endpoints.AutoWatchFirewallProfile(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) error {
	return s.Endpoints.AutoWatchCertificate(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return s.Endpoints.AutoWatchTrafficEncryptionPolicy(in, stream)
}

func encodeHTTPAppList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppList encodes GRPC request
func EncodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// DecodeGrpcReqAppList decodes GRPC request
func DecodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// EncodeGrpcRespAppList endodes the GRPC response
func EncodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppList decodes the GRPC response
func DecodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateList encodes GRPC request
func EncodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// DecodeGrpcReqCertificateList decodes GRPC request
func DecodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// EncodeGrpcRespCertificateList endodes the GRPC response
func EncodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateList decodes the GRPC response
func DecodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFirewallProfileList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFirewallProfileList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FirewallProfileList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFirewallProfileList encodes GRPC request
func EncodeGrpcReqFirewallProfileList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FirewallProfileList)
	return req, nil
}

// DecodeGrpcReqFirewallProfileList decodes GRPC request
func DecodeGrpcReqFirewallProfileList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FirewallProfileList)
	return req, nil
}

// EncodeGrpcRespFirewallProfileList endodes the GRPC response
func EncodeGrpcRespFirewallProfileList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFirewallProfileList decodes the GRPC response
func DecodeGrpcRespFirewallProfileList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkSecurityPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkSecurityPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkSecurityPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkSecurityPolicyList encodes GRPC request
func EncodeGrpcReqNetworkSecurityPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicyList)
	return req, nil
}

// DecodeGrpcReqNetworkSecurityPolicyList decodes GRPC request
func DecodeGrpcReqNetworkSecurityPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicyList)
	return req, nil
}

// EncodeGrpcRespNetworkSecurityPolicyList endodes the GRPC response
func EncodeGrpcRespNetworkSecurityPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkSecurityPolicyList decodes the GRPC response
func DecodeGrpcRespNetworkSecurityPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSecurityGroupList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSecurityGroupList(_ context.Context, r *http.Request) (interface{}, error) {
	var req SecurityGroupList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSecurityGroupList encodes GRPC request
func EncodeGrpcReqSecurityGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SecurityGroupList)
	return req, nil
}

// DecodeGrpcReqSecurityGroupList decodes GRPC request
func DecodeGrpcReqSecurityGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SecurityGroupList)
	return req, nil
}

// EncodeGrpcRespSecurityGroupList endodes the GRPC response
func EncodeGrpcRespSecurityGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSecurityGroupList decodes the GRPC response
func DecodeGrpcRespSecurityGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicyList encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicyList decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicyList endodes the GRPC response
func EncodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicyList decodes the GRPC response
func DecodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
