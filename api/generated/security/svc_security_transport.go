// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: svc_security.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerSecurityV1 struct {
	Endpoints EndpointsSecurityV1Server

	AutoAddAppHdlr                        grpctransport.Handler
	AutoAddAppUserHdlr                    grpctransport.Handler
	AutoAddAppUserGrpHdlr                 grpctransport.Handler
	AutoAddCertificateHdlr                grpctransport.Handler
	AutoAddSecurityGroupHdlr              grpctransport.Handler
	AutoAddSgpolicyHdlr                   grpctransport.Handler
	AutoAddTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoDeleteAppHdlr                     grpctransport.Handler
	AutoDeleteAppUserHdlr                 grpctransport.Handler
	AutoDeleteAppUserGrpHdlr              grpctransport.Handler
	AutoDeleteCertificateHdlr             grpctransport.Handler
	AutoDeleteSecurityGroupHdlr           grpctransport.Handler
	AutoDeleteSgpolicyHdlr                grpctransport.Handler
	AutoDeleteTrafficEncryptionPolicyHdlr grpctransport.Handler
	AutoGetAppHdlr                        grpctransport.Handler
	AutoGetAppUserHdlr                    grpctransport.Handler
	AutoGetAppUserGrpHdlr                 grpctransport.Handler
	AutoGetCertificateHdlr                grpctransport.Handler
	AutoGetSecurityGroupHdlr              grpctransport.Handler
	AutoGetSgpolicyHdlr                   grpctransport.Handler
	AutoGetTrafficEncryptionPolicyHdlr    grpctransport.Handler
	AutoListAppHdlr                       grpctransport.Handler
	AutoListAppUserHdlr                   grpctransport.Handler
	AutoListAppUserGrpHdlr                grpctransport.Handler
	AutoListCertificateHdlr               grpctransport.Handler
	AutoListSecurityGroupHdlr             grpctransport.Handler
	AutoListSgpolicyHdlr                  grpctransport.Handler
	AutoListTrafficEncryptionPolicyHdlr   grpctransport.Handler
	AutoUpdateAppHdlr                     grpctransport.Handler
	AutoUpdateAppUserHdlr                 grpctransport.Handler
	AutoUpdateAppUserGrpHdlr              grpctransport.Handler
	AutoUpdateCertificateHdlr             grpctransport.Handler
	AutoUpdateSecurityGroupHdlr           grpctransport.Handler
	AutoUpdateSgpolicyHdlr                grpctransport.Handler
	AutoUpdateTrafficEncryptionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerSecurityV1 creates a GRPC server for SecurityV1 service
func MakeGRPCServerSecurityV1(ctx context.Context, endpoints EndpointsSecurityV1Server, logger log.Logger) SecurityV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerSecurityV1{
		Endpoints: endpoints,
		AutoAddAppHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddApp", logger)))...,
		),

		AutoAddAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAppUser", logger)))...,
		),

		AutoAddAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAppUserGrp", logger)))...,
		),

		AutoAddCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoAddCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddCertificate", logger)))...,
		),

		AutoAddSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoAddSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddSecurityGroup", logger)))...,
		),

		AutoAddSgpolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddSgpolicyEndpoint,
			DecodeGrpcReqSgpolicy,
			EncodeGrpcRespSgpolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddSgpolicy", logger)))...,
		),

		AutoAddTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddTrafficEncryptionPolicy", logger)))...,
		),

		AutoDeleteAppHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteApp", logger)))...,
		),

		AutoDeleteAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAppUser", logger)))...,
		),

		AutoDeleteAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAppUserGrp", logger)))...,
		),

		AutoDeleteCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteCertificate", logger)))...,
		),

		AutoDeleteSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteSecurityGroup", logger)))...,
		),

		AutoDeleteSgpolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteSgpolicyEndpoint,
			DecodeGrpcReqSgpolicy,
			EncodeGrpcRespSgpolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteSgpolicy", logger)))...,
		),

		AutoDeleteTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteTrafficEncryptionPolicy", logger)))...,
		),

		AutoGetAppHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetApp", logger)))...,
		),

		AutoGetAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAppUser", logger)))...,
		),

		AutoGetAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAppUserGrp", logger)))...,
		),

		AutoGetCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoGetCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetCertificate", logger)))...,
		),

		AutoGetSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoGetSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetSecurityGroup", logger)))...,
		),

		AutoGetSgpolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetSgpolicyEndpoint,
			DecodeGrpcReqSgpolicy,
			EncodeGrpcRespSgpolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetSgpolicy", logger)))...,
		),

		AutoGetTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetTrafficEncryptionPolicy", logger)))...,
		),

		AutoListAppHdlr: grpctransport.NewServer(
			endpoints.AutoListAppEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListApp", logger)))...,
		),

		AutoListAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoListAppUserEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppUserList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAppUser", logger)))...,
		),

		AutoListAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoListAppUserGrpEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppUserGrpList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAppUserGrp", logger)))...,
		),

		AutoListCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoListCertificateEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCertificateList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListCertificate", logger)))...,
		),

		AutoListSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoListSecurityGroupEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespSecurityGroupList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListSecurityGroup", logger)))...,
		),

		AutoListSgpolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListSgpolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespSgpolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListSgpolicy", logger)))...,
		),

		AutoListTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespTrafficEncryptionPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListTrafficEncryptionPolicy", logger)))...,
		),

		AutoUpdateAppHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateApp", logger)))...,
		),

		AutoUpdateAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAppUser", logger)))...,
		),

		AutoUpdateAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAppUserGrp", logger)))...,
		),

		AutoUpdateCertificateHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCertificateEndpoint,
			DecodeGrpcReqCertificate,
			EncodeGrpcRespCertificate,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateCertificate", logger)))...,
		),

		AutoUpdateSecurityGroupHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateSecurityGroupEndpoint,
			DecodeGrpcReqSecurityGroup,
			EncodeGrpcRespSecurityGroup,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateSecurityGroup", logger)))...,
		),

		AutoUpdateSgpolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateSgpolicyEndpoint,
			DecodeGrpcReqSgpolicy,
			EncodeGrpcRespSgpolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateSgpolicy", logger)))...,
		),

		AutoUpdateTrafficEncryptionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateTrafficEncryptionPolicyEndpoint,
			DecodeGrpcReqTrafficEncryptionPolicy,
			EncodeGrpcRespTrafficEncryptionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateTrafficEncryptionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerSecurityV1) AutoAddApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoAddAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddApp).V
	return &r, resp.(respSecurityV1AutoAddApp).Err
}

func decodeHTTPrespSecurityV1AutoAddApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoAddAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddAppUser).V
	return &r, resp.(respSecurityV1AutoAddAppUser).Err
}

func decodeHTTPrespSecurityV1AutoAddAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoAddAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddAppUserGrp).V
	return &r, resp.(respSecurityV1AutoAddAppUserGrp).Err
}

func decodeHTTPrespSecurityV1AutoAddAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoAddCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddCertificate).V
	return &r, resp.(respSecurityV1AutoAddCertificate).Err
}

func decodeHTTPrespSecurityV1AutoAddCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoAddSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddSecurityGroup).V
	return &r, resp.(respSecurityV1AutoAddSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoAddSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddSgpolicy(ctx oldcontext.Context, req *Sgpolicy) (*Sgpolicy, error) {
	_, resp, err := s.AutoAddSgpolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddSgpolicy).V
	return &r, resp.(respSecurityV1AutoAddSgpolicy).Err
}

func decodeHTTPrespSecurityV1AutoAddSgpolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Sgpolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoAddTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoAddTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoAddTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoAddTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoAddTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoDeleteAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteApp).V
	return &r, resp.(respSecurityV1AutoDeleteApp).Err
}

func decodeHTTPrespSecurityV1AutoDeleteApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoDeleteAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteAppUser).V
	return &r, resp.(respSecurityV1AutoDeleteAppUser).Err
}

func decodeHTTPrespSecurityV1AutoDeleteAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoDeleteAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteAppUserGrp).V
	return &r, resp.(respSecurityV1AutoDeleteAppUserGrp).Err
}

func decodeHTTPrespSecurityV1AutoDeleteAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoDeleteCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteCertificate).V
	return &r, resp.(respSecurityV1AutoDeleteCertificate).Err
}

func decodeHTTPrespSecurityV1AutoDeleteCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoDeleteSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteSecurityGroup).V
	return &r, resp.(respSecurityV1AutoDeleteSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoDeleteSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteSgpolicy(ctx oldcontext.Context, req *Sgpolicy) (*Sgpolicy, error) {
	_, resp, err := s.AutoDeleteSgpolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteSgpolicy).V
	return &r, resp.(respSecurityV1AutoDeleteSgpolicy).Err
}

func decodeHTTPrespSecurityV1AutoDeleteSgpolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Sgpolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoDeleteTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoDeleteTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoDeleteTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoDeleteTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoDeleteTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoGetAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetApp).V
	return &r, resp.(respSecurityV1AutoGetApp).Err
}

func decodeHTTPrespSecurityV1AutoGetApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoGetAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetAppUser).V
	return &r, resp.(respSecurityV1AutoGetAppUser).Err
}

func decodeHTTPrespSecurityV1AutoGetAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoGetAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetAppUserGrp).V
	return &r, resp.(respSecurityV1AutoGetAppUserGrp).Err
}

func decodeHTTPrespSecurityV1AutoGetAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoGetCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetCertificate).V
	return &r, resp.(respSecurityV1AutoGetCertificate).Err
}

func decodeHTTPrespSecurityV1AutoGetCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoGetSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetSecurityGroup).V
	return &r, resp.(respSecurityV1AutoGetSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoGetSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetSgpolicy(ctx oldcontext.Context, req *Sgpolicy) (*Sgpolicy, error) {
	_, resp, err := s.AutoGetSgpolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetSgpolicy).V
	return &r, resp.(respSecurityV1AutoGetSgpolicy).Err
}

func decodeHTTPrespSecurityV1AutoGetSgpolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Sgpolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoGetTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoGetTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoGetTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoGetTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoGetTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListApp(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppList, error) {
	_, resp, err := s.AutoListAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListApp).V
	return &r, resp.(respSecurityV1AutoListApp).Err
}

func decodeHTTPrespSecurityV1AutoListApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListAppUser(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppUserList, error) {
	_, resp, err := s.AutoListAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListAppUser).V
	return &r, resp.(respSecurityV1AutoListAppUser).Err
}

func decodeHTTPrespSecurityV1AutoListAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListAppUserGrp(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppUserGrpList, error) {
	_, resp, err := s.AutoListAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListAppUserGrp).V
	return &r, resp.(respSecurityV1AutoListAppUserGrp).Err
}

func decodeHTTPrespSecurityV1AutoListAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrpList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListCertificate(ctx oldcontext.Context, req *api.ListWatchOptions) (*CertificateList, error) {
	_, resp, err := s.AutoListCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListCertificate).V
	return &r, resp.(respSecurityV1AutoListCertificate).Err
}

func decodeHTTPrespSecurityV1AutoListCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CertificateList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListSecurityGroup(ctx oldcontext.Context, req *api.ListWatchOptions) (*SecurityGroupList, error) {
	_, resp, err := s.AutoListSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListSecurityGroup).V
	return &r, resp.(respSecurityV1AutoListSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoListSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroupList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListSgpolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*SgpolicyList, error) {
	_, resp, err := s.AutoListSgpolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListSgpolicy).V
	return &r, resp.(respSecurityV1AutoListSgpolicy).Err
}

func decodeHTTPrespSecurityV1AutoListSgpolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SgpolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoListTrafficEncryptionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*TrafficEncryptionPolicyList, error) {
	_, resp, err := s.AutoListTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoListTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoListTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoListTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoUpdateAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateApp).V
	return &r, resp.(respSecurityV1AutoUpdateApp).Err
}

func decodeHTTPrespSecurityV1AutoUpdateApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoUpdateAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateAppUser).V
	return &r, resp.(respSecurityV1AutoUpdateAppUser).Err
}

func decodeHTTPrespSecurityV1AutoUpdateAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoUpdateAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateAppUserGrp).V
	return &r, resp.(respSecurityV1AutoUpdateAppUserGrp).Err
}

func decodeHTTPrespSecurityV1AutoUpdateAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateCertificate(ctx oldcontext.Context, req *Certificate) (*Certificate, error) {
	_, resp, err := s.AutoUpdateCertificateHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateCertificate).V
	return &r, resp.(respSecurityV1AutoUpdateCertificate).Err
}

func decodeHTTPrespSecurityV1AutoUpdateCertificate(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Certificate
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateSecurityGroup(ctx oldcontext.Context, req *SecurityGroup) (*SecurityGroup, error) {
	_, resp, err := s.AutoUpdateSecurityGroupHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateSecurityGroup).V
	return &r, resp.(respSecurityV1AutoUpdateSecurityGroup).Err
}

func decodeHTTPrespSecurityV1AutoUpdateSecurityGroup(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SecurityGroup
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateSgpolicy(ctx oldcontext.Context, req *Sgpolicy) (*Sgpolicy, error) {
	_, resp, err := s.AutoUpdateSgpolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateSgpolicy).V
	return &r, resp.(respSecurityV1AutoUpdateSgpolicy).Err
}

func decodeHTTPrespSecurityV1AutoUpdateSgpolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Sgpolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoUpdateTrafficEncryptionPolicy(ctx oldcontext.Context, req *TrafficEncryptionPolicy) (*TrafficEncryptionPolicy, error) {
	_, resp, err := s.AutoUpdateTrafficEncryptionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSecurityV1AutoUpdateTrafficEncryptionPolicy).V
	return &r, resp.(respSecurityV1AutoUpdateTrafficEncryptionPolicy).Err
}

func decodeHTTPrespSecurityV1AutoUpdateTrafficEncryptionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp TrafficEncryptionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerSecurityV1) AutoWatchSecurityGroup(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSecurityGroupServer) error {
	return s.Endpoints.AutoWatchSecurityGroup(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchSgpolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchSgpolicyServer) error {
	return s.Endpoints.AutoWatchSgpolicy(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchApp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppServer) error {
	return s.Endpoints.AutoWatchApp(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchAppUser(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppUserServer) error {
	return s.Endpoints.AutoWatchAppUser(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchAppUserGrp(in *api.ListWatchOptions, stream SecurityV1_AutoWatchAppUserGrpServer) error {
	return s.Endpoints.AutoWatchAppUserGrp(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchCertificate(in *api.ListWatchOptions, stream SecurityV1_AutoWatchCertificateServer) error {
	return s.Endpoints.AutoWatchCertificate(in, stream)
}

func (s *grpcServerSecurityV1) AutoWatchTrafficEncryptionPolicy(in *api.ListWatchOptions, stream SecurityV1_AutoWatchTrafficEncryptionPolicyServer) error {
	return s.Endpoints.AutoWatchTrafficEncryptionPolicy(in, stream)
}

func encodeHTTPAppList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppList encodes GRPC request
func EncodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// DecodeGrpcReqAppList decodes GRPC request
func DecodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// EncodeGrpcRespAppList endodes the GRPC response
func EncodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppList decodes the GRPC response
func DecodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpList encodes GRPC request
func EncodeGrpcReqAppUserGrpList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpList)
	return req, nil
}

// DecodeGrpcReqAppUserGrpList decodes GRPC request
func DecodeGrpcReqAppUserGrpList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpList)
	return req, nil
}

// EncodeGrpcRespAppUserGrpList endodes the GRPC response
func EncodeGrpcRespAppUserGrpList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpList decodes the GRPC response
func DecodeGrpcRespAppUserGrpList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserList encodes GRPC request
func EncodeGrpcReqAppUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserList)
	return req, nil
}

// DecodeGrpcReqAppUserList decodes GRPC request
func DecodeGrpcReqAppUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserList)
	return req, nil
}

// EncodeGrpcRespAppUserList endodes the GRPC response
func EncodeGrpcRespAppUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserList decodes the GRPC response
func DecodeGrpcRespAppUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCertificateList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCertificateList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CertificateList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCertificateList encodes GRPC request
func EncodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// DecodeGrpcReqCertificateList decodes GRPC request
func DecodeGrpcReqCertificateList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CertificateList)
	return req, nil
}

// EncodeGrpcRespCertificateList endodes the GRPC response
func EncodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCertificateList decodes the GRPC response
func DecodeGrpcRespCertificateList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSecurityGroupList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSecurityGroupList(_ context.Context, r *http.Request) (interface{}, error) {
	var req SecurityGroupList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSecurityGroupList encodes GRPC request
func EncodeGrpcReqSecurityGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SecurityGroupList)
	return req, nil
}

// DecodeGrpcReqSecurityGroupList decodes GRPC request
func DecodeGrpcReqSecurityGroupList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SecurityGroupList)
	return req, nil
}

// EncodeGrpcRespSecurityGroupList endodes the GRPC response
func EncodeGrpcRespSecurityGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSecurityGroupList decodes the GRPC response
func DecodeGrpcRespSecurityGroupList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSgpolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSgpolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req SgpolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSgpolicyList encodes GRPC request
func EncodeGrpcReqSgpolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicyList)
	return req, nil
}

// DecodeGrpcReqSgpolicyList decodes GRPC request
func DecodeGrpcReqSgpolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicyList)
	return req, nil
}

// EncodeGrpcRespSgpolicyList endodes the GRPC response
func EncodeGrpcRespSgpolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSgpolicyList decodes the GRPC response
func DecodeGrpcRespSgpolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicyList encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicyList decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyList)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicyList endodes the GRPC response
func EncodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicyList decodes the GRPC response
func DecodeGrpcRespTrafficEncryptionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
