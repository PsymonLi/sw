// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPSGRule(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGRule(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGRule
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGRule encodes GRPC request
func EncodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// DecodeGrpcReqSGRule decodes GRPC request
func DecodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// EncodeGrpcRespSGRule encodes GRC response
func EncodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGRule decodes GRPC response
func DecodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSgpolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSgpolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req Sgpolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSgpolicy encodes GRPC request
func EncodeGrpcReqSgpolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Sgpolicy)
	return req, nil
}

// DecodeGrpcReqSgpolicy decodes GRPC request
func DecodeGrpcReqSgpolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Sgpolicy)
	return req, nil
}

// EncodeGrpcRespSgpolicy encodes GRC response
func EncodeGrpcRespSgpolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSgpolicy decodes GRPC response
func DecodeGrpcRespSgpolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSgpolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSgpolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req SgpolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSgpolicySpec encodes GRPC request
func EncodeGrpcReqSgpolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicySpec)
	return req, nil
}

// DecodeGrpcReqSgpolicySpec decodes GRPC request
func DecodeGrpcReqSgpolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicySpec)
	return req, nil
}

// EncodeGrpcRespSgpolicySpec encodes GRC response
func EncodeGrpcRespSgpolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSgpolicySpec decodes GRPC response
func DecodeGrpcRespSgpolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSgpolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSgpolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SgpolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSgpolicyStatus encodes GRPC request
func EncodeGrpcReqSgpolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicyStatus)
	return req, nil
}

// DecodeGrpcReqSgpolicyStatus decodes GRPC request
func DecodeGrpcReqSgpolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SgpolicyStatus)
	return req, nil
}

// EncodeGrpcRespSgpolicyStatus encodes GRC response
func EncodeGrpcRespSgpolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSgpolicyStatus decodes GRPC response
func DecodeGrpcRespSgpolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
