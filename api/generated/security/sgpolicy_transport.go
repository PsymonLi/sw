// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPProtoPort(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPProtoPort(_ context.Context, r *http.Request) (interface{}, error) {
	var req ProtoPort
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqProtoPort encodes GRPC request
func EncodeGrpcReqProtoPort(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ProtoPort)
	return req, nil
}

// DecodeGrpcReqProtoPort decodes GRPC request
func DecodeGrpcReqProtoPort(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ProtoPort)
	return req, nil
}

// EncodeGrpcRespProtoPort encodes GRC response
func EncodeGrpcRespProtoPort(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespProtoPort decodes GRPC response
func DecodeGrpcRespProtoPort(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGPolicy encodes GRPC request
func EncodeGrpcReqSGPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicy)
	return req, nil
}

// DecodeGrpcReqSGPolicy decodes GRPC request
func DecodeGrpcReqSGPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicy)
	return req, nil
}

// EncodeGrpcRespSGPolicy encodes GRC response
func EncodeGrpcRespSGPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGPolicy decodes GRPC response
func DecodeGrpcRespSGPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGPolicyPropagationStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGPolicyPropagationStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGPolicyPropagationStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGPolicyPropagationStatus encodes GRPC request
func EncodeGrpcReqSGPolicyPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicyPropagationStatus)
	return req, nil
}

// DecodeGrpcReqSGPolicyPropagationStatus decodes GRPC request
func DecodeGrpcReqSGPolicyPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicyPropagationStatus)
	return req, nil
}

// EncodeGrpcRespSGPolicyPropagationStatus encodes GRC response
func EncodeGrpcRespSGPolicyPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGPolicyPropagationStatus decodes GRPC response
func DecodeGrpcRespSGPolicyPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGPolicySpec encodes GRPC request
func EncodeGrpcReqSGPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicySpec)
	return req, nil
}

// DecodeGrpcReqSGPolicySpec decodes GRPC request
func DecodeGrpcReqSGPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicySpec)
	return req, nil
}

// EncodeGrpcRespSGPolicySpec encodes GRC response
func EncodeGrpcRespSGPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGPolicySpec decodes GRPC response
func DecodeGrpcRespSGPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGPolicyStatus encodes GRPC request
func EncodeGrpcReqSGPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicyStatus)
	return req, nil
}

// DecodeGrpcReqSGPolicyStatus decodes GRPC request
func DecodeGrpcReqSGPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGPolicyStatus)
	return req, nil
}

// EncodeGrpcRespSGPolicyStatus encodes GRC response
func EncodeGrpcRespSGPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGPolicyStatus decodes GRPC response
func DecodeGrpcRespSGPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGRule(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGRule(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGRule
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGRule encodes GRPC request
func EncodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// DecodeGrpcReqSGRule decodes GRPC request
func DecodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// EncodeGrpcRespSGRule encodes GRC response
func EncodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGRule decodes GRPC response
func DecodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
