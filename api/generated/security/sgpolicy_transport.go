// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPNetworkSecurityPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkSecurityPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkSecurityPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkSecurityPolicy encodes GRPC request
func EncodeGrpcReqNetworkSecurityPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicy)
	return req, nil
}

// DecodeGrpcReqNetworkSecurityPolicy decodes GRPC request
func DecodeGrpcReqNetworkSecurityPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicy)
	return req, nil
}

// EncodeGrpcRespNetworkSecurityPolicy encodes GRC response
func EncodeGrpcRespNetworkSecurityPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkSecurityPolicy decodes GRPC response
func DecodeGrpcRespNetworkSecurityPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkSecurityPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkSecurityPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkSecurityPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkSecurityPolicySpec encodes GRPC request
func EncodeGrpcReqNetworkSecurityPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicySpec)
	return req, nil
}

// DecodeGrpcReqNetworkSecurityPolicySpec decodes GRPC request
func DecodeGrpcReqNetworkSecurityPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicySpec)
	return req, nil
}

// EncodeGrpcRespNetworkSecurityPolicySpec encodes GRC response
func EncodeGrpcRespNetworkSecurityPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkSecurityPolicySpec decodes GRPC response
func DecodeGrpcRespNetworkSecurityPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNetworkSecurityPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNetworkSecurityPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NetworkSecurityPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNetworkSecurityPolicyStatus encodes GRPC request
func EncodeGrpcReqNetworkSecurityPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicyStatus)
	return req, nil
}

// DecodeGrpcReqNetworkSecurityPolicyStatus decodes GRPC request
func DecodeGrpcReqNetworkSecurityPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NetworkSecurityPolicyStatus)
	return req, nil
}

// EncodeGrpcRespNetworkSecurityPolicyStatus encodes GRC response
func EncodeGrpcRespNetworkSecurityPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNetworkSecurityPolicyStatus decodes GRPC response
func DecodeGrpcRespNetworkSecurityPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPropagationStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPropagationStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req PropagationStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPropagationStatus encodes GRPC request
func EncodeGrpcReqPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PropagationStatus)
	return req, nil
}

// DecodeGrpcReqPropagationStatus decodes GRPC request
func DecodeGrpcReqPropagationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PropagationStatus)
	return req, nil
}

// EncodeGrpcRespPropagationStatus encodes GRC response
func EncodeGrpcRespPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPropagationStatus decodes GRPC response
func DecodeGrpcRespPropagationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPProtoPort(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPProtoPort(_ context.Context, r *http.Request) (interface{}, error) {
	var req ProtoPort
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqProtoPort encodes GRPC request
func EncodeGrpcReqProtoPort(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ProtoPort)
	return req, nil
}

// DecodeGrpcReqProtoPort decodes GRPC request
func DecodeGrpcReqProtoPort(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ProtoPort)
	return req, nil
}

// EncodeGrpcRespProtoPort encodes GRC response
func EncodeGrpcRespProtoPort(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespProtoPort decodes GRPC response
func DecodeGrpcRespProtoPort(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGRule(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGRule(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGRule
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGRule encodes GRPC request
func EncodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// DecodeGrpcReqSGRule decodes GRPC request
func DecodeGrpcReqSGRule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRule)
	return req, nil
}

// EncodeGrpcRespSGRule encodes GRC response
func EncodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGRule decodes GRPC response
func DecodeGrpcRespSGRule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSGRuleStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSGRuleStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req SGRuleStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSGRuleStatus encodes GRPC request
func EncodeGrpcReqSGRuleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRuleStatus)
	return req, nil
}

// DecodeGrpcReqSGRuleStatus decodes GRPC request
func DecodeGrpcReqSGRuleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SGRuleStatus)
	return req, nil
}

// EncodeGrpcRespSGRuleStatus encodes GRC response
func EncodeGrpcRespSGRuleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSGRuleStatus decodes GRPC response
func DecodeGrpcRespSGRuleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
