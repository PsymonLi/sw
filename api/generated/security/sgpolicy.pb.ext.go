// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *Sgpolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "sgpolicy/", m.Tenant, "/", m.Name)
}

func (m *Sgpolicy) MakeURI(ver, prefix string) string {
	in := m
	return fmt.Sprint("/", ver, "/", prefix, "/", in.Tenant, "/sgpolicy/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *SGRule) Clone(into interface{}) (interface{}, error) {
	var out *SGRule
	var ok bool
	if into == nil {
		out = &SGRule{}
	} else {
		out, ok = into.(*SGRule)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGRule) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Sgpolicy) Clone(into interface{}) (interface{}, error) {
	var out *Sgpolicy
	var ok bool
	if into == nil {
		out = &Sgpolicy{}
	} else {
		out, ok = into.(*Sgpolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Sgpolicy) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SgpolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *SgpolicySpec
	var ok bool
	if into == nil {
		out = &SgpolicySpec{}
	} else {
		out, ok = into.(*SgpolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SgpolicySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SgpolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *SgpolicyStatus
	var ok bool
	if into == nil {
		out = &SgpolicyStatus{}
	} else {
		out, ok = into.(*SgpolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SgpolicyStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *SGRule) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Sgpolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicySpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SgpolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Sgpolicy{},
	)

}
