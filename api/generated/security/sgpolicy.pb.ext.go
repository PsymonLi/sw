// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapSgpolicy = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *SGPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "sgpolicies/", m.Tenant, "/", m.Name)
}

func (m *SGPolicy) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/sgpolicies/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *ProtoPort) Clone(into interface{}) (interface{}, error) {
	var out *ProtoPort
	var ok bool
	if into == nil {
		out = &ProtoPort{}
	} else {
		out, ok = into.(*ProtoPort)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ProtoPort) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SGPolicy) Clone(into interface{}) (interface{}, error) {
	var out *SGPolicy
	var ok bool
	if into == nil {
		out = &SGPolicy{}
	} else {
		out, ok = into.(*SGPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGPolicy) Defaults(ver string) bool {
	var ret bool
	m.Kind = "SGPolicy"
	ret = m.Tenant != "default" && m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SGPolicyPropagationStatus) Clone(into interface{}) (interface{}, error) {
	var out *SGPolicyPropagationStatus
	var ok bool
	if into == nil {
		out = &SGPolicyPropagationStatus{}
	} else {
		out, ok = into.(*SGPolicyPropagationStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGPolicyPropagationStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SGPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *SGPolicySpec
	var ok bool
	if into == nil {
		out = &SGPolicySpec{}
	} else {
		out, ok = into.(*SGPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGPolicySpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Rules {
		i := m.Rules[k]
		ret = i.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SGPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *SGPolicyStatus
	var ok bool
	if into == nil {
		out = &SGPolicyStatus{}
	} else {
		out, ok = into.(*SGPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGPolicyStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SGRule) Clone(into interface{}) (interface{}, error) {
	var out *SGRule
	var ok bool
	if into == nil {
		out = &SGRule{}
	} else {
		out, ok = into.(*SGRule)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SGRule) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Action = "PERMIT"
	}
	return ret
}

// Validators and Requirements

func (m *ProtoPort) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ProtoPort) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *SGPolicy) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "spec"

		m.Spec.References(tenant, tag, resp)

	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *SGPolicy) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SGPolicyPropagationStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SGPolicyPropagationStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *SGPolicySpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "attach-groups"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		for _, v := range m.AttachGroups {

			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/security/"+"security-groups/"+tenant+"/"+v)

		}
		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "rules"

		for _, v := range m.Rules {

			v.References(tenant, tag, resp)

		}
	}
}

func (m *SGPolicySpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	for k, v := range m.Rules {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sRules[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *SGPolicyStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SGPolicyStatus) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *SGRule) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "apps"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		for _, v := range m.Apps {

			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/security/"+"apps/"+tenant+"/"+v)

		}
		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "from-security-groups"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		for _, v := range m.FromSecurityGroups {

			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/security/"+"security-groups/"+tenant+"/"+v)

		}
		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "to-security-groups"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
			}
		}

		for _, v := range m.ToSecurityGroups {

			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/security/"+"security-groups/"+tenant+"/"+v)

		}
		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *SGRule) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapSgpolicy["SGRule"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapSgpolicy["SGRule"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&SGPolicy{},
	)

	validatorMapSgpolicy = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapSgpolicy["SGRule"] = make(map[string][]func(string, interface{}) error)
	validatorMapSgpolicy["SGRule"]["all"] = append(validatorMapSgpolicy["SGRule"]["all"], func(path string, i interface{}) error {
		m := i.(*SGRule)

		if _, ok := SGRule_PolicyAction_value[m.Action]; !ok {
			vals := []string{}
			for k1, _ := range SGRule_PolicyAction_value {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Action", vals)
		}
		return nil
	})

}
