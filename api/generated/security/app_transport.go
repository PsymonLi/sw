// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: app.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPALG(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPALG(_ context.Context, r *http.Request) (interface{}, error) {
	var req ALG
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqALG encodes GRPC request
func EncodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// DecodeGrpcReqALG decodes GRPC request
func DecodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// EncodeGrpcRespALG encodes GRC response
func EncodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespALG decodes GRPC response
func DecodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPApp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApp(_ context.Context, r *http.Request) (interface{}, error) {
	var req App
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApp encodes GRPC request
func EncodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// DecodeGrpcReqApp decodes GRPC request
func DecodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// EncodeGrpcRespApp encodes GRC response
func EncodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApp decodes GRPC response
func DecodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppSpec encodes GRPC request
func EncodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// DecodeGrpcReqAppSpec decodes GRPC request
func DecodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// EncodeGrpcRespAppSpec encodes GRC response
func EncodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppSpec decodes GRPC response
func DecodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppStatus encodes GRPC request
func EncodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// DecodeGrpcReqAppStatus decodes GRPC request
func DecodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// EncodeGrpcRespAppStatus encodes GRC response
func EncodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppStatus decodes GRPC response
func DecodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDNS(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDNS(_ context.Context, r *http.Request) (interface{}, error) {
	var req DNS
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDNS encodes GRPC request
func EncodeGrpcReqDNS(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DNS)
	return req, nil
}

// DecodeGrpcReqDNS decodes GRPC request
func DecodeGrpcReqDNS(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DNS)
	return req, nil
}

// EncodeGrpcRespDNS encodes GRC response
func EncodeGrpcRespDNS(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDNS decodes GRPC response
func DecodeGrpcRespDNS(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFTP(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFTP(_ context.Context, r *http.Request) (interface{}, error) {
	var req FTP
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFTP encodes GRPC request
func EncodeGrpcReqFTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FTP)
	return req, nil
}

// DecodeGrpcReqFTP decodes GRPC request
func DecodeGrpcReqFTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FTP)
	return req, nil
}

// EncodeGrpcRespFTP encodes GRC response
func EncodeGrpcRespFTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFTP decodes GRPC response
func DecodeGrpcRespFTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMSRPC(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMSRPC(_ context.Context, r *http.Request) (interface{}, error) {
	var req MSRPC
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMSRPC encodes GRPC request
func EncodeGrpcReqMSRPC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MSRPC)
	return req, nil
}

// DecodeGrpcReqMSRPC decodes GRPC request
func DecodeGrpcReqMSRPC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MSRPC)
	return req, nil
}

// EncodeGrpcRespMSRPC encodes GRC response
func EncodeGrpcRespMSRPC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMSRPC decodes GRPC response
func DecodeGrpcRespMSRPC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRSTP(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRSTP(_ context.Context, r *http.Request) (interface{}, error) {
	var req RSTP
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRSTP encodes GRPC request
func EncodeGrpcReqRSTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RSTP)
	return req, nil
}

// DecodeGrpcReqRSTP decodes GRPC request
func DecodeGrpcReqRSTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RSTP)
	return req, nil
}

// EncodeGrpcRespRSTP encodes GRC response
func EncodeGrpcRespRSTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRSTP decodes GRPC response
func DecodeGrpcRespRSTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSIP(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSIP(_ context.Context, r *http.Request) (interface{}, error) {
	var req SIP
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSIP encodes GRPC request
func EncodeGrpcReqSIP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SIP)
	return req, nil
}

// DecodeGrpcReqSIP decodes GRPC request
func DecodeGrpcReqSIP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SIP)
	return req, nil
}

// EncodeGrpcRespSIP encodes GRC response
func EncodeGrpcRespSIP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSIP decodes GRPC response
func DecodeGrpcRespSIP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSunRPC(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSunRPC(_ context.Context, r *http.Request) (interface{}, error) {
	var req SunRPC
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSunRPC encodes GRPC request
func EncodeGrpcReqSunRPC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SunRPC)
	return req, nil
}

// DecodeGrpcReqSunRPC decodes GRPC request
func DecodeGrpcReqSunRPC(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SunRPC)
	return req, nil
}

// EncodeGrpcRespSunRPC encodes GRC response
func EncodeGrpcRespSunRPC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSunRPC decodes GRPC response
func DecodeGrpcRespSunRPC(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTFTP(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTFTP(_ context.Context, r *http.Request) (interface{}, error) {
	var req TFTP
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTFTP encodes GRPC request
func EncodeGrpcReqTFTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TFTP)
	return req, nil
}

// DecodeGrpcReqTFTP decodes GRPC request
func DecodeGrpcReqTFTP(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TFTP)
	return req, nil
}

// EncodeGrpcRespTFTP encodes GRC response
func EncodeGrpcRespTFTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTFTP decodes GRPC response
func DecodeGrpcRespTFTP(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
