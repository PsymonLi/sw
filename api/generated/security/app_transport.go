// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: app.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPALG(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPALG(_ context.Context, r *http.Request) (interface{}, error) {
	var req ALG
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqALG encodes GRPC request
func EncodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// DecodeGrpcReqALG decodes GRPC request
func DecodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// EncodeGrpcRespALG encodes GRC response
func EncodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespALG decodes GRPC response
func DecodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPApp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApp(_ context.Context, r *http.Request) (interface{}, error) {
	var req App
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApp encodes GRPC request
func EncodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// DecodeGrpcReqApp decodes GRPC request
func DecodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// EncodeGrpcRespApp encodes GRC response
func EncodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApp decodes GRPC response
func DecodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppSpec encodes GRPC request
func EncodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// DecodeGrpcReqAppSpec decodes GRPC request
func DecodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// EncodeGrpcRespAppSpec encodes GRC response
func EncodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppSpec decodes GRPC response
func DecodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppStatus encodes GRPC request
func EncodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// DecodeGrpcReqAppStatus decodes GRPC request
func DecodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// EncodeGrpcRespAppStatus encodes GRC response
func EncodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppStatus decodes GRPC response
func DecodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDnsAlg(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDnsAlg(_ context.Context, r *http.Request) (interface{}, error) {
	var req DnsAlg
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDnsAlg encodes GRPC request
func EncodeGrpcReqDnsAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DnsAlg)
	return req, nil
}

// DecodeGrpcReqDnsAlg decodes GRPC request
func DecodeGrpcReqDnsAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DnsAlg)
	return req, nil
}

// EncodeGrpcRespDnsAlg encodes GRC response
func EncodeGrpcRespDnsAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDnsAlg decodes GRPC response
func DecodeGrpcRespDnsAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFtpAlg(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFtpAlg(_ context.Context, r *http.Request) (interface{}, error) {
	var req FtpAlg
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFtpAlg encodes GRPC request
func EncodeGrpcReqFtpAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FtpAlg)
	return req, nil
}

// DecodeGrpcReqFtpAlg decodes GRPC request
func DecodeGrpcReqFtpAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FtpAlg)
	return req, nil
}

// EncodeGrpcRespFtpAlg encodes GRC response
func EncodeGrpcRespFtpAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFtpAlg decodes GRPC response
func DecodeGrpcRespFtpAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIcmpAlg(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIcmpAlg(_ context.Context, r *http.Request) (interface{}, error) {
	var req IcmpAlg
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIcmpAlg encodes GRPC request
func EncodeGrpcReqIcmpAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IcmpAlg)
	return req, nil
}

// DecodeGrpcReqIcmpAlg decodes GRPC request
func DecodeGrpcReqIcmpAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IcmpAlg)
	return req, nil
}

// EncodeGrpcRespIcmpAlg encodes GRC response
func EncodeGrpcRespIcmpAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIcmpAlg decodes GRPC response
func DecodeGrpcRespIcmpAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMsrpcAlg(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMsrpcAlg(_ context.Context, r *http.Request) (interface{}, error) {
	var req MsrpcAlg
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMsrpcAlg encodes GRPC request
func EncodeGrpcReqMsrpcAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MsrpcAlg)
	return req, nil
}

// DecodeGrpcReqMsrpcAlg decodes GRPC request
func DecodeGrpcReqMsrpcAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MsrpcAlg)
	return req, nil
}

// EncodeGrpcRespMsrpcAlg encodes GRC response
func EncodeGrpcRespMsrpcAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMsrpcAlg decodes GRPC response
func DecodeGrpcRespMsrpcAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSunrpcAlg(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSunrpcAlg(_ context.Context, r *http.Request) (interface{}, error) {
	var req SunrpcAlg
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSunrpcAlg encodes GRPC request
func EncodeGrpcReqSunrpcAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SunrpcAlg)
	return req, nil
}

// DecodeGrpcReqSunrpcAlg decodes GRPC request
func DecodeGrpcReqSunrpcAlg(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SunrpcAlg)
	return req, nil
}

// EncodeGrpcRespSunrpcAlg encodes GRC response
func EncodeGrpcRespSunrpcAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSunrpcAlg decodes GRPC response
func DecodeGrpcRespSunrpcAlg(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
