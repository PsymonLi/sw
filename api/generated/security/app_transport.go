// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: app.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPALG(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPALG(_ context.Context, r *http.Request) (interface{}, error) {
	var req ALG
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqALG encodes GRPC request
func EncodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// DecodeGrpcReqALG decodes GRPC request
func DecodeGrpcReqALG(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ALG)
	return req, nil
}

// EncodeGrpcRespALG encodes GRC response
func EncodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespALG decodes GRPC response
func DecodeGrpcRespALG(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPApp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApp(_ context.Context, r *http.Request) (interface{}, error) {
	var req App
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApp encodes GRPC request
func EncodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// DecodeGrpcReqApp decodes GRPC request
func DecodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// EncodeGrpcRespApp encodes GRC response
func EncodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApp decodes GRPC response
func DecodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppSpec encodes GRPC request
func EncodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// DecodeGrpcReqAppSpec decodes GRPC request
func DecodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// EncodeGrpcRespAppSpec encodes GRC response
func EncodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppSpec decodes GRPC response
func DecodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppStatus encodes GRPC request
func EncodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// DecodeGrpcReqAppStatus decodes GRPC request
func DecodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// EncodeGrpcRespAppStatus encodes GRC response
func EncodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppStatus decodes GRPC response
func DecodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDns(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDns(_ context.Context, r *http.Request) (interface{}, error) {
	var req Dns
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDns encodes GRPC request
func EncodeGrpcReqDns(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Dns)
	return req, nil
}

// DecodeGrpcReqDns decodes GRPC request
func DecodeGrpcReqDns(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Dns)
	return req, nil
}

// EncodeGrpcRespDns encodes GRC response
func EncodeGrpcRespDns(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDns decodes GRPC response
func DecodeGrpcRespDns(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFtp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFtp(_ context.Context, r *http.Request) (interface{}, error) {
	var req Ftp
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFtp encodes GRPC request
func EncodeGrpcReqFtp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ftp)
	return req, nil
}

// DecodeGrpcReqFtp decodes GRPC request
func DecodeGrpcReqFtp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Ftp)
	return req, nil
}

// EncodeGrpcRespFtp encodes GRC response
func EncodeGrpcRespFtp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFtp decodes GRPC response
func DecodeGrpcRespFtp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPIcmp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIcmp(_ context.Context, r *http.Request) (interface{}, error) {
	var req Icmp
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIcmp encodes GRPC request
func EncodeGrpcReqIcmp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Icmp)
	return req, nil
}

// DecodeGrpcReqIcmp decodes GRPC request
func DecodeGrpcReqIcmp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Icmp)
	return req, nil
}

// EncodeGrpcRespIcmp encodes GRC response
func EncodeGrpcRespIcmp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIcmp decodes GRPC response
func DecodeGrpcRespIcmp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMsrpc(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMsrpc(_ context.Context, r *http.Request) (interface{}, error) {
	var req Msrpc
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMsrpc encodes GRPC request
func EncodeGrpcReqMsrpc(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Msrpc)
	return req, nil
}

// DecodeGrpcReqMsrpc decodes GRPC request
func DecodeGrpcReqMsrpc(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Msrpc)
	return req, nil
}

// EncodeGrpcRespMsrpc encodes GRC response
func EncodeGrpcRespMsrpc(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMsrpc decodes GRPC response
func DecodeGrpcRespMsrpc(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSunrpc(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSunrpc(_ context.Context, r *http.Request) (interface{}, error) {
	var req Sunrpc
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSunrpc encodes GRPC request
func EncodeGrpcReqSunrpc(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Sunrpc)
	return req, nil
}

// DecodeGrpcReqSunrpc decodes GRPC request
func DecodeGrpcReqSunrpc(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Sunrpc)
	return req, nil
}

// EncodeGrpcRespSunrpc encodes GRC response
func EncodeGrpcRespSunrpc(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSunrpc decodes GRPC response
func DecodeGrpcRespSunrpc(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
