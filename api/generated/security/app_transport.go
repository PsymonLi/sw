// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: app.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPApp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApp(_ context.Context, r *http.Request) (interface{}, error) {
	var req App
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApp encodes GRPC request
func EncodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// DecodeGrpcReqApp decodes GRPC request
func DecodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// EncodeGrpcRespApp encodes GRC response
func EncodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApp decodes GRPC response
func DecodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppSpec encodes GRPC request
func EncodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// DecodeGrpcReqAppSpec decodes GRPC request
func DecodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// EncodeGrpcRespAppSpec encodes GRC response
func EncodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppSpec decodes GRPC response
func DecodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppStatus encodes GRPC request
func EncodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// DecodeGrpcReqAppStatus decodes GRPC request
func DecodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// EncodeGrpcRespAppStatus encodes GRC response
func EncodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppStatus decodes GRPC response
func DecodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUser(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUser(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUser
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUser encodes GRPC request
func EncodeGrpcReqAppUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUser)
	return req, nil
}

// DecodeGrpcReqAppUser decodes GRPC request
func DecodeGrpcReqAppUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUser)
	return req, nil
}

// EncodeGrpcRespAppUser encodes GRC response
func EncodeGrpcRespAppUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUser decodes GRPC response
func DecodeGrpcRespAppUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrp(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrp
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrp encodes GRPC request
func EncodeGrpcReqAppUserGrp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrp)
	return req, nil
}

// DecodeGrpcReqAppUserGrp decodes GRPC request
func DecodeGrpcReqAppUserGrp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrp)
	return req, nil
}

// EncodeGrpcRespAppUserGrp encodes GRC response
func EncodeGrpcRespAppUserGrp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrp decodes GRPC response
func DecodeGrpcRespAppUserGrp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpSpec encodes GRPC request
func EncodeGrpcReqAppUserGrpSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpSpec)
	return req, nil
}

// DecodeGrpcReqAppUserGrpSpec decodes GRPC request
func DecodeGrpcReqAppUserGrpSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpSpec)
	return req, nil
}

// EncodeGrpcRespAppUserGrpSpec encodes GRC response
func EncodeGrpcRespAppUserGrpSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpSpec decodes GRPC response
func DecodeGrpcRespAppUserGrpSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpStatus encodes GRPC request
func EncodeGrpcReqAppUserGrpStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpStatus)
	return req, nil
}

// DecodeGrpcReqAppUserGrpStatus decodes GRPC request
func DecodeGrpcReqAppUserGrpStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpStatus)
	return req, nil
}

// EncodeGrpcRespAppUserGrpStatus encodes GRC response
func EncodeGrpcRespAppUserGrpStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpStatus decodes GRPC response
func DecodeGrpcRespAppUserGrpStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserSpec encodes GRPC request
func EncodeGrpcReqAppUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserSpec)
	return req, nil
}

// DecodeGrpcReqAppUserSpec decodes GRPC request
func DecodeGrpcReqAppUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserSpec)
	return req, nil
}

// EncodeGrpcRespAppUserSpec encodes GRC response
func EncodeGrpcRespAppUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserSpec decodes GRPC response
func DecodeGrpcRespAppUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserStatus encodes GRPC request
func EncodeGrpcReqAppUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserStatus)
	return req, nil
}

// DecodeGrpcReqAppUserStatus decodes GRPC request
func DecodeGrpcReqAppUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserStatus)
	return req, nil
}

// EncodeGrpcRespAppUserStatus encodes GRC response
func EncodeGrpcRespAppUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserStatus decodes GRPC response
func DecodeGrpcRespAppUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
