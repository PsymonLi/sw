// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package security is a auto generated package.
Input file: networkencryption.proto
*/
package security

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPIPsecProtocolSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPIPsecProtocolSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req IPsecProtocolSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqIPsecProtocolSpec encodes GRPC request
func EncodeGrpcReqIPsecProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPsecProtocolSpec)
	return req, nil
}

// DecodeGrpcReqIPsecProtocolSpec decodes GRPC request
func DecodeGrpcReqIPsecProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*IPsecProtocolSpec)
	return req, nil
}

// EncodeGrpcRespIPsecProtocolSpec encodes GRC response
func EncodeGrpcRespIPsecProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespIPsecProtocolSpec decodes GRPC response
func DecodeGrpcRespIPsecProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTLSProtocolSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTLSProtocolSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TLSProtocolSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTLSProtocolSpec encodes GRPC request
func EncodeGrpcReqTLSProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSProtocolSpec)
	return req, nil
}

// DecodeGrpcReqTLSProtocolSpec decodes GRPC request
func DecodeGrpcReqTLSProtocolSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TLSProtocolSpec)
	return req, nil
}

// EncodeGrpcRespTLSProtocolSpec encodes GRC response
func EncodeGrpcRespTLSProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTLSProtocolSpec decodes GRPC response
func DecodeGrpcRespTLSProtocolSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicy encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicy)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicy decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicy)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicy encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicy decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicySpec encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicySpec)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicySpec decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicySpec)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicySpec encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicySpec decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTrafficEncryptionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTrafficEncryptionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req TrafficEncryptionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTrafficEncryptionPolicyStatus encodes GRPC request
func EncodeGrpcReqTrafficEncryptionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqTrafficEncryptionPolicyStatus decodes GRPC request
func DecodeGrpcReqTrafficEncryptionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TrafficEncryptionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespTrafficEncryptionPolicyStatus encodes GRC response
func EncodeGrpcRespTrafficEncryptionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTrafficEncryptionPolicyStatus decodes GRPC response
func DecodeGrpcRespTrafficEncryptionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
