// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package securityApiServer is a auto generated package.
Input file: sgpolicy.proto
*/
package security

import (
	"reflect"

	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapSgpolicy = map[string]*runtime.Struct{

	"security.SGPolicy": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SGPolicy{}) },
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": runtime.Field{Name: "Spec", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "spec", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "security.SGPolicySpec"},

			"Status": runtime.Field{Name: "Status", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "security.SGPolicyStatus"},
		},

		CLITags: map[string]runtime.CLIInfo{
			"action":               runtime.CLIInfo{Path: "Spec.Rules[].Action", Skip: false, Insert: "", Help: ""},
			"apps":                 runtime.CLIInfo{Path: "Spec.Rules[].Apps", Skip: false, Insert: "", Help: ""},
			"attach-groups":        runtime.CLIInfo{Path: "Spec.AttachGroups", Skip: false, Insert: "", Help: ""},
			"attach-tenant":        runtime.CLIInfo{Path: "Spec.AttachTenant", Skip: false, Insert: "", Help: ""},
			"from-ip-addresses":    runtime.CLIInfo{Path: "Spec.Rules[].FromIPAddresses", Skip: false, Insert: "", Help: ""},
			"from-security-groups": runtime.CLIInfo{Path: "Spec.Rules[].FromSecurityGroups", Skip: false, Insert: "", Help: ""},
			"to-ip-addresses":      runtime.CLIInfo{Path: "Spec.Rules[].ToIPAddresses", Skip: false, Insert: "", Help: ""},
			"to-security-groups":   runtime.CLIInfo{Path: "Spec.Rules[].ToSecurityGroups", Skip: false, Insert: "", Help: ""},
			"workloads":            runtime.CLIInfo{Path: "Status.Workloads", Skip: false, Insert: "", Help: ""},
		},
	},
	"security.SGPolicySpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SGPolicySpec{}) },
		Fields: map[string]runtime.Field{
			"AttachGroups": runtime.Field{Name: "AttachGroups", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "attach-groups", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"AttachTenant": runtime.Field{Name: "AttachTenant", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "attach-tenant", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_BOOL"},

			"Rules": runtime.Field{Name: "Rules", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "rules", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "security.SGRule"},
		},
	},
	"security.SGPolicyStatus": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SGPolicyStatus{}) },
		Fields: map[string]runtime.Field{
			"Workloads": runtime.Field{Name: "Workloads", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "workloads", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"security.SGRule": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SGRule{}) },
		Fields: map[string]runtime.Field{
			"Apps": runtime.Field{Name: "Apps", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "apps", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Action": runtime.Field{Name: "Action", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "action", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"FromIPAddresses": runtime.Field{Name: "FromIPAddresses", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "from-ip-addresses", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ToIPAddresses": runtime.Field{Name: "ToIPAddresses", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "to-ip-addresses", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"FromSecurityGroups": runtime.Field{Name: "FromSecurityGroups", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "from-security-groups", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ToSecurityGroups": runtime.Field{Name: "ToSecurityGroups", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "to-security-groups", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapSgpolicy)
}
