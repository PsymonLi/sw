// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgpolicy.proto

package security

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/labels"
import _ "github.com/pensando/sw/api/generated/cluster"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type SGRule_PolicyAction int32

const (
	//
	SGRule_PERMIT SGRule_PolicyAction = 0
	//
	SGRule_DENY SGRule_PolicyAction = 1
	//
	SGRule_REJECT SGRule_PolicyAction = 2
)

var SGRule_PolicyAction_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
	2: "REJECT",
}
var SGRule_PolicyAction_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
	"REJECT": 2,
}

func (x SGRule_PolicyAction) String() string {
	return proto.EnumName(SGRule_PolicyAction_name, int32(x))
}
func (SGRule_PolicyAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{5, 0}
}

//
type ProtoPort struct {
	// protocol is ip (v4/v6) protocol name/number; names can be: tcp, udp, igmp, icmp, gre, esp, etc.
	Protocol string `protobuf:"bytes,1,opt,name=Protocol,json=protocol,omitempty,proto3" json:"protocol,omitempty"`
	// TCP or UDP port number(s): comma separate port numbers, or dash separate port range
	Ports string `protobuf:"bytes,2,opt,name=Ports,json=ports, omitempty,proto3" json:"ports, omitempty"`
}

func (m *ProtoPort) Reset()                    { *m = ProtoPort{} }
func (m *ProtoPort) String() string            { return proto.CompactTextString(m) }
func (*ProtoPort) ProtoMessage()               {}
func (*ProtoPort) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{0} }

func (m *ProtoPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ProtoPort) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

// Sgpolicy represents a security policy for security groups
type SGPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the sgpolicy.
	Spec SGPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the sgpolicy.
	Status SGPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *SGPolicy) Reset()                    { *m = SGPolicy{} }
func (m *SGPolicy) String() string            { return proto.CompactTextString(m) }
func (*SGPolicy) ProtoMessage()               {}
func (*SGPolicy) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{1} }

func (m *SGPolicy) GetSpec() SGPolicySpec {
	if m != nil {
		return m.Spec
	}
	return SGPolicySpec{}
}

func (m *SGPolicy) GetStatus() SGPolicyStatus {
	if m != nil {
		return m.Status
	}
	return SGPolicyStatus{}
}

//
type SGPolicyPropagationStatus struct {
	// The Generation ID this status is for
	GenerationID string `protobuf:"bytes,1,opt,name=GenerationID,json=generation-id,proto3" json:"generation-id"`
	// The number of Naples that this version has already been pushed to
	Updated int32 `protobuf:"varint,2,opt,name=Updated,json=updated,proto3" json:"updated"`
	// Number of Naples pending. If this is 0 it can be assumed that everything is up to date.
	Pending int32 `protobuf:"varint,3,opt,name=Pending,json=pending,proto3" json:"pending"`
	// The Version running on the slowest Naples
	MinVersion string `protobuf:"bytes,4,opt,name=MinVersion,json=min-version,proto3" json:"min-version"`
}

func (m *SGPolicyPropagationStatus) Reset()         { *m = SGPolicyPropagationStatus{} }
func (m *SGPolicyPropagationStatus) String() string { return proto.CompactTextString(m) }
func (*SGPolicyPropagationStatus) ProtoMessage()    {}
func (*SGPolicyPropagationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{2}
}

func (m *SGPolicyPropagationStatus) GetGenerationID() string {
	if m != nil {
		return m.GenerationID
	}
	return ""
}

func (m *SGPolicyPropagationStatus) GetUpdated() int32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *SGPolicyPropagationStatus) GetPending() int32 {
	if m != nil {
		return m.Pending
	}
	return 0
}

func (m *SGPolicyPropagationStatus) GetMinVersion() string {
	if m != nil {
		return m.MinVersion
	}
	return ""
}

//
type SGPolicySpec struct {
	// list of security groups this policy is attached to
	AttachGroups []string `protobuf:"bytes,1,rep,name=AttachGroups,json=attach-groups,omitempty" json:"attach-groups,omitempty"`
	// specifies if the set of rules need to be attached globally to a tenant
	AttachTenant bool `protobuf:"varint,2,opt,name=AttachTenant,json=attach-tenant,omitempty,proto3" json:"attach-tenant,omitempty"`
	// list of rules
	Rules []SGRule `protobuf:"bytes,3,rep,name=Rules,json=rules,omitempty" json:"rules,omitempty"`
}

func (m *SGPolicySpec) Reset()                    { *m = SGPolicySpec{} }
func (m *SGPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*SGPolicySpec) ProtoMessage()               {}
func (*SGPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{3} }

func (m *SGPolicySpec) GetAttachGroups() []string {
	if m != nil {
		return m.AttachGroups
	}
	return nil
}

func (m *SGPolicySpec) GetAttachTenant() bool {
	if m != nil {
		return m.AttachTenant
	}
	return false
}

func (m *SGPolicySpec) GetRules() []SGRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

//
type SGPolicyStatus struct {
	// list of workloads in this group
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads,json=workloads,omitempty" json:"workloads,omitempty"`
	// The status of the configuration propagation to the Naples
	PropagationStatus SGPolicyPropagationStatus `protobuf:"bytes,2,opt,name=PropagationStatus,json=propagation-status" json:"propagation-status"`
}

func (m *SGPolicyStatus) Reset()                    { *m = SGPolicyStatus{} }
func (m *SGPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*SGPolicyStatus) ProtoMessage()               {}
func (*SGPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{4} }

func (m *SGPolicyStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func (m *SGPolicyStatus) GetPropagationStatus() SGPolicyPropagationStatus {
	if m != nil {
		return m.PropagationStatus
	}
	return SGPolicyPropagationStatus{}
}

//
type SGRule struct {
	// list of apps objects to which the rule applies to
	Apps []string `protobuf:"bytes,1,rep,name=Apps,json=apps,omitempty" json:"apps,omitempty"`
	// list of (protocol, ports) pairs to which the rule applies to, in addition to apps
	ProtoPorts []ProtoPort `protobuf:"bytes,2,rep,name=ProtoPorts,json=proto-ports,omitempty" json:"proto-ports,omitempty"`
	// SGRule action, either PERMIT, DENY or REJECT
	Action string `protobuf:"bytes,3,opt,name=Action,json=action,omitempty,proto3" json:"action,omitempty"`
	// inbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
	// cli-tags: id=from-ip
	FromIPAddresses []string `protobuf:"bytes,4,rep,name=FromIPAddresses,json=from-ip-addresses,omitempty" json:"from-ip-addresses,omitempty"`
	// outbound rule from a given ip-address/ip-mask/ip-range. Use any to refer to all ipaddresses
	// cli-tags: id=to-ip
	ToIPAddresses []string `protobuf:"bytes,5,rep,name=ToIPAddresses,json=to-ip-addresses,omitempty" json:"to-ip-addresses,omitempty"`
	// inbound rule from a given security group
	FromSecurityGroups []string `protobuf:"bytes,6,rep,name=FromSecurityGroups,json=from-security-groups,omitempty" json:"from-security-groups,omitempty"`
	// outbound rule from a given security group
	ToSecurityGroups []string `protobuf:"bytes,7,rep,name=ToSecurityGroups,json=to-security-groups,omitempty" json:"to-security-groups,omitempty"`
}

func (m *SGRule) Reset()                    { *m = SGRule{} }
func (m *SGRule) String() string            { return proto.CompactTextString(m) }
func (*SGRule) ProtoMessage()               {}
func (*SGRule) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{5} }

func (m *SGRule) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *SGRule) GetProtoPorts() []ProtoPort {
	if m != nil {
		return m.ProtoPorts
	}
	return nil
}

func (m *SGRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SGRule) GetFromIPAddresses() []string {
	if m != nil {
		return m.FromIPAddresses
	}
	return nil
}

func (m *SGRule) GetToIPAddresses() []string {
	if m != nil {
		return m.ToIPAddresses
	}
	return nil
}

func (m *SGRule) GetFromSecurityGroups() []string {
	if m != nil {
		return m.FromSecurityGroups
	}
	return nil
}

func (m *SGRule) GetToSecurityGroups() []string {
	if m != nil {
		return m.ToSecurityGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtoPort)(nil), "security.ProtoPort")
	proto.RegisterType((*SGPolicy)(nil), "security.SGPolicy")
	proto.RegisterType((*SGPolicyPropagationStatus)(nil), "security.SGPolicyPropagationStatus")
	proto.RegisterType((*SGPolicySpec)(nil), "security.SGPolicySpec")
	proto.RegisterType((*SGPolicyStatus)(nil), "security.SGPolicyStatus")
	proto.RegisterType((*SGRule)(nil), "security.SGRule")
	proto.RegisterEnum("security.SGRule_PolicyAction", SGRule_PolicyAction_name, SGRule_PolicyAction_value)
}
func (m *ProtoPort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoPort) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Ports) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.Ports)))
		i += copy(dAtA[i:], m.Ports)
	}
	return i, nil
}

func (m *SGPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *SGPolicyPropagationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyPropagationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GenerationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.GenerationID)))
		i += copy(dAtA[i:], m.GenerationID)
	}
	if m.Updated != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Updated))
	}
	if m.Pending != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Pending))
	}
	if len(m.MinVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.MinVersion)))
		i += copy(dAtA[i:], m.MinVersion)
	}
	return i, nil
}

func (m *SGPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttachGroups) > 0 {
		for _, s := range m.AttachGroups {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AttachTenant {
		dAtA[i] = 0x10
		i++
		if m.AttachTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SGPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.PropagationStatus.Size()))
	n5, err := m.PropagationStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *SGRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ProtoPorts) > 0 {
		for _, msg := range m.ProtoPorts {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.FromIPAddresses) > 0 {
		for _, s := range m.FromIPAddresses {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ToIPAddresses) > 0 {
		for _, s := range m.ToIPAddresses {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FromSecurityGroups) > 0 {
		for _, s := range m.FromSecurityGroups {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ToSecurityGroups) > 0 {
		for _, s := range m.ToSecurityGroups {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSgpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProtoPort) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	l = len(m.Ports)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	return n
}

func (m *SGPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func (m *SGPolicyPropagationStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.GenerationID)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.Updated != 0 {
		n += 1 + sovSgpolicy(uint64(m.Updated))
	}
	if m.Pending != 0 {
		n += 1 + sovSgpolicy(uint64(m.Pending))
	}
	l = len(m.MinVersion)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	return n
}

func (m *SGPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.AttachGroups) > 0 {
		for _, s := range m.AttachGroups {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if m.AttachTenant {
		n += 2
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func (m *SGPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	l = m.PropagationStatus.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func (m *SGRule) Size() (n int) {
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if len(m.ProtoPorts) > 0 {
		for _, e := range m.ProtoPorts {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if len(m.FromIPAddresses) > 0 {
		for _, s := range m.FromIPAddresses {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if len(m.ToIPAddresses) > 0 {
		for _, s := range m.ToIPAddresses {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if len(m.FromSecurityGroups) > 0 {
		for _, s := range m.FromSecurityGroups {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if len(m.ToSecurityGroups) > 0 {
		for _, s := range m.ToSecurityGroups {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func sovSgpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSgpolicy(x uint64) (n int) {
	return sovSgpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtoPort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoPort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoPort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyPropagationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyPropagationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyPropagationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenerationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			m.Pending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pending |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachGroups = append(m.AttachGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttachTenant = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, SGRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropagationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtoPorts = append(m.ProtoPorts, ProtoPort{})
			if err := m.ProtoPorts[len(m.ProtoPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromIPAddresses = append(m.FromIPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToIPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToIPAddresses = append(m.ToIPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSecurityGroups = append(m.FromSecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSecurityGroups = append(m.ToSecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSgpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSgpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSgpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSgpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSgpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSgpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sgpolicy.proto", fileDescriptorSgpolicy) }

var fileDescriptorSgpolicy = []byte{
	// 954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6b, 0xe3, 0x46,
	0x18, 0x5e, 0x25, 0xb1, 0x63, 0x8f, 0x9d, 0xc4, 0x3b, 0x69, 0x13, 0x3b, 0x9b, 0x44, 0xc6, 0x65,
	0x21, 0x85, 0xd8, 0x0a, 0x29, 0x5d, 0x4a, 0x29, 0x14, 0xab, 0xeb, 0x0d, 0x59, 0x9a, 0x8d, 0x91,
	0xbd, 0xfd, 0x82, 0x16, 0x64, 0x69, 0xa2, 0x9d, 0x56, 0x9e, 0x19, 0x34, 0xa3, 0x5d, 0x42, 0x29,
	0xf4, 0xd2, 0xfd, 0x21, 0xbd, 0xb5, 0xff, 0xa2, 0xb7, 0x5c, 0x0a, 0xa1, 0xbd, 0x8b, 0x92, 0xa3,
	0x6e, 0xfd, 0x07, 0x65, 0x46, 0x52, 0x22, 0x7f, 0xc4, 0xbd, 0xcd, 0xfb, 0x3c, 0xef, 0xfb, 0xcc,
	0xbc, 0x5f, 0x03, 0xd6, 0xb9, 0xc7, 0xa8, 0x8f, 0x9d, 0xcb, 0x0e, 0x0b, 0xa8, 0xa0, 0xb0, 0xc4,
	0x91, 0x13, 0x06, 0x58, 0x5c, 0xee, 0xec, 0x7a, 0x94, 0x7a, 0x3e, 0x32, 0x6c, 0x86, 0x0d, 0x9b,
	0x10, 0x2a, 0x6c, 0x81, 0x29, 0xe1, 0x89, 0xdf, 0x4e, 0xcf, 0xc3, 0xe2, 0x55, 0x38, 0xea, 0x38,
	0x74, 0x6c, 0x30, 0x44, 0xb8, 0x4d, 0x5c, 0x6a, 0xf0, 0x37, 0xc6, 0x6b, 0x44, 0xb0, 0x83, 0x8c,
	0x50, 0x60, 0x9f, 0xcb, 0x50, 0x0f, 0x91, 0x7c, 0xb4, 0x81, 0x89, 0xe3, 0x87, 0x2e, 0xca, 0x64,
	0xda, 0x39, 0x19, 0x8f, 0x7a, 0xd4, 0x50, 0xf0, 0x28, 0xbc, 0x50, 0x96, 0x32, 0xd4, 0x29, 0x75,
	0x7f, 0x7c, 0xcf, 0xad, 0xf2, 0x8d, 0x63, 0x24, 0xec, 0xd4, 0xed, 0x68, 0x81, 0x9b, 0x6f, 0x8f,
	0x90, 0xcf, 0x0d, 0x8e, 0x7c, 0xe4, 0x08, 0x1a, 0xa4, 0x11, 0x9d, 0x05, 0x11, 0xca, 0x83, 0x1b,
	0x02, 0x11, 0x9b, 0x88, 0xc4, 0xbf, 0xf5, 0xb3, 0x06, 0xca, 0x7d, 0x79, 0xea, 0xd3, 0x40, 0xc0,
	0x4f, 0x40, 0x49, 0x19, 0x0e, 0xf5, 0xeb, 0x5a, 0x53, 0x3b, 0x28, 0x9b, 0x5b, 0x71, 0xa4, 0x43,
	0x96, 0x62, 0x87, 0x74, 0x8c, 0x05, 0x1a, 0x33, 0x71, 0x69, 0xcd, 0xc1, 0xe0, 0x87, 0xa0, 0x20,
	0x55, 0x78, 0x7d, 0x49, 0x85, 0xbe, 0x13, 0x47, 0x7a, 0x8d, 0x49, 0xe0, 0xb0, 0x79, 0x17, 0x38,
	0x83, 0xb4, 0xfe, 0x5c, 0x02, 0xa5, 0xc1, 0x49, 0x5f, 0x35, 0x0f, 0x3e, 0x01, 0xda, 0x50, 0x5d,
	0x5d, 0x39, 0x5e, 0xeb, 0xd8, 0x0c, 0x77, 0x86, 0x97, 0x0c, 0x9d, 0x21, 0x61, 0x9b, 0x9b, 0x57,
	0x91, 0xfe, 0xe0, 0x3a, 0xd2, 0xb5, 0x38, 0xd2, 0x57, 0x0f, 0x31, 0xf1, 0x31, 0x41, 0x56, 0x76,
	0x80, 0xcf, 0x80, 0x76, 0xae, 0xee, 0xad, 0x1c, 0x6f, 0xa8, 0xb8, 0xf3, 0xd1, 0xf7, 0xc8, 0x11,
	0x2a, 0x72, 0x27, 0x17, 0xb9, 0x2e, 0xab, 0x9b, 0xcb, 0x63, 0xca, 0x86, 0x9f, 0x83, 0x95, 0x01,
	0x43, 0x4e, 0x7d, 0x59, 0x49, 0x6d, 0x75, 0xb2, 0x29, 0xea, 0x64, 0x2f, 0x94, 0xac, 0xb9, 0x25,
	0x15, 0xa5, 0x1a, 0x67, 0xc8, 0xc9, 0xab, 0x4d, 0xda, 0x70, 0x08, 0x8a, 0x03, 0x61, 0x8b, 0x90,
	0xd7, 0x57, 0x94, 0x5e, 0x7d, 0x8e, 0x9e, 0xe2, 0xcd, 0x7a, 0xaa, 0x58, 0xe3, 0xca, 0xce, 0x69,
	0xce, 0x20, 0x1f, 0xef, 0xfd, 0xf5, 0x4b, 0xa3, 0x01, 0x2a, 0xc6, 0x8f, 0xe7, 0x9d, 0xa1, 0xea,
	0xe5, 0x4f, 0x10, 0xa4, 0xd3, 0x8f, 0x11, 0x6f, 0xfd, 0xad, 0x81, 0x46, 0xa6, 0xde, 0x0f, 0x28,
	0xb3, 0x3d, 0x35, 0xb2, 0xc9, 0x45, 0xf0, 0x09, 0xa8, 0x9e, 0x20, 0x82, 0x02, 0x85, 0x9d, 0x3e,
	0x4d, 0xdb, 0xfc, 0x30, 0x8e, 0xf4, 0x35, 0xef, 0x16, 0x6f, 0x63, 0xd7, 0x9a, 0x34, 0xe1, 0x63,
	0xb0, 0xfa, 0x92, 0xb9, 0xb6, 0x40, 0xae, 0x2a, 0x73, 0xc1, 0xac, 0xc8, 0x3e, 0x84, 0x09, 0x64,
	0x65, 0x07, 0xe9, 0xd6, 0x47, 0xc4, 0xc5, 0xc4, 0x53, 0x25, 0x4c, 0xdd, 0x58, 0x02, 0x59, 0xd9,
	0x01, 0x1e, 0x01, 0x70, 0x86, 0xc9, 0x17, 0x28, 0xe0, 0x98, 0x12, 0x55, 0x9c, 0xb2, 0xb9, 0x11,
	0x47, 0x7a, 0x65, 0x8c, 0x49, 0xfb, 0x75, 0x02, 0x5b, 0x79, 0xa3, 0xf5, 0xaf, 0x06, 0xaa, 0xf9,
	0x1e, 0xc0, 0xe7, 0xa0, 0xda, 0x15, 0xc2, 0x76, 0x5e, 0x9d, 0x04, 0x34, 0x64, 0xbc, 0xae, 0x35,
	0x97, 0x0f, 0xca, 0xe6, 0xa3, 0x38, 0xd2, 0xb7, 0x6d, 0x85, 0xb7, 0x3d, 0x45, 0xe4, 0x4a, 0x79,
	0x1f, 0x71, 0xa7, 0x95, 0xd4, 0x53, 0x65, 0x58, 0x9a, 0xd0, 0x4a, 0x96, 0x66, 0x8e, 0xd6, 0x34,
	0x01, 0x4f, 0x41, 0xc1, 0x0a, 0x7d, 0xc4, 0xeb, 0xcb, 0xcd, 0xe5, 0x83, 0xca, 0x71, 0x2d, 0xdf,
	0x72, 0x49, 0x98, 0xdb, 0x69, 0xab, 0x37, 0x02, 0xe9, 0x96, 0x93, 0x9c, 0x06, 0x5a, 0x7f, 0x68,
	0x60, 0x7d, 0x72, 0x4e, 0xe0, 0xa7, 0xa0, 0xfc, 0x25, 0x0d, 0x7e, 0xf0, 0xa9, 0xed, 0x66, 0x29,
	0x6f, 0xc7, 0x91, 0xbe, 0xf9, 0x26, 0x03, 0x73, 0x7a, 0xf3, 0x40, 0x48, 0xc0, 0xc3, 0x99, 0xa1,
	0x48, 0x17, 0xe7, 0xbd, 0xd9, 0xe9, 0x9c, 0x71, 0x4d, 0x96, 0x29, 0xfd, 0x14, 0x32, 0xaa, 0x9d,
	0x8c, 0xa8, 0x35, 0x07, 0x6b, 0xfd, 0x56, 0x00, 0xc5, 0x24, 0x71, 0xd8, 0x07, 0x2b, 0x5d, 0x76,
	0xdb, 0xa9, 0xe3, 0x5f, 0xdf, 0x36, 0xea, 0xa0, 0xf4, 0xc2, 0x1e, 0x23, 0xd7, 0x42, 0x17, 0xb0,
	0x9a, 0x5d, 0x6e, 0x74, 0x19, 0xcb, 0xf6, 0xcb, 0x66, 0x13, 0x0d, 0x9c, 0xb2, 0xe1, 0xb7, 0x00,
	0xdc, 0x7e, 0x5e, 0x32, 0x0b, 0x59, 0xf0, 0xcd, 0xbb, 0x2c, 0x6e, 0x39, 0x73, 0x2f, 0x15, 0x7c,
	0x57, 0x7d, 0x5b, 0xed, 0xe4, 0x0f, 0xba, 0xd3, 0x9d, 0x0f, 0xc3, 0x6f, 0x40, 0xb1, 0xeb, 0xc8,
	0x64, 0xd4, 0x2c, 0x97, 0xcd, 0x8f, 0x7e, 0x7f, 0xdb, 0xd8, 0x1d, 0x88, 0xa0, 0x47, 0xc2, 0xf1,
	0x41, 0x92, 0x54, 0x27, 0xa9, 0x53, 0xe2, 0xf6, 0xfe, 0x55, 0xf2, 0xc9, 0xd4, 0x6c, 0x65, 0xe6,
	0x97, 0x78, 0x1a, 0x81, 0x2f, 0xc1, 0xc6, 0xb3, 0x80, 0x8e, 0x4f, 0xfb, 0x5d, 0xd7, 0x0d, 0x10,
	0xe7, 0x48, 0xfe, 0x11, 0xb2, 0x2e, 0x7a, 0x1c, 0xe9, 0x8f, 0x2e, 0x02, 0x3a, 0x6e, 0x63, 0xd6,
	0xb6, 0x33, 0x32, 0xa7, 0xb5, 0x88, 0x84, 0xe7, 0x60, 0x6d, 0x48, 0xf3, 0xa2, 0x05, 0x25, 0xba,
	0x17, 0x47, 0x7a, 0x43, 0xd0, 0xfb, 0x24, 0xef, 0xa7, 0xe0, 0x77, 0x00, 0xca, 0x77, 0x0e, 0xd2,
	0x9a, 0xa6, 0xcb, 0x56, 0x54, 0xaa, 0xad, 0x38, 0xd2, 0xf7, 0xd5, 0x6b, 0xb2, 0x92, 0xcf, 0xee,
	0xdc, 0xff, 0xf0, 0xf0, 0x2b, 0x50, 0x1b, 0xd2, 0x29, 0xf5, 0x55, 0xa5, 0xde, 0x8c, 0x23, 0x7d,
	0x57, 0xd0, 0x05, 0xda, 0x0b, 0xd9, 0xd6, 0x11, 0xa8, 0xe6, 0x9b, 0x03, 0x01, 0x28, 0xf6, 0x7b,
	0xd6, 0xd9, 0xe9, 0xb0, 0xf6, 0x00, 0x96, 0xc0, 0xca, 0xd3, 0xde, 0x8b, 0xaf, 0x6b, 0x9a, 0x44,
	0xad, 0xde, 0xf3, 0xde, 0x67, 0xc3, 0xda, 0x92, 0x59, 0xbd, 0xba, 0xd9, 0xd7, 0xae, 0x6f, 0xf6,
	0xb5, 0x7f, 0x6e, 0xf6, 0xb5, 0xbe, 0x36, 0x2a, 0xaa, 0xb1, 0xf8, 0xe0, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x82, 0xe9, 0xa6, 0x2f, 0x5c, 0x08, 0x00, 0x00,
}
