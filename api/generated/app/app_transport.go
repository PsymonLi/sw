// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package app is a auto generated package.
Input file: protos/app.proto
*/
package app

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerAppV1 struct {
	Endpoints EndpointsAppV1Server

	AutoAddAppHdlr           grpctransport.Handler
	AutoAddAppUserHdlr       grpctransport.Handler
	AutoAddAppUserGrpHdlr    grpctransport.Handler
	AutoDeleteAppHdlr        grpctransport.Handler
	AutoDeleteAppUserHdlr    grpctransport.Handler
	AutoDeleteAppUserGrpHdlr grpctransport.Handler
	AutoGetAppHdlr           grpctransport.Handler
	AutoGetAppUserHdlr       grpctransport.Handler
	AutoGetAppUserGrpHdlr    grpctransport.Handler
	AutoListAppHdlr          grpctransport.Handler
	AutoListAppUserHdlr      grpctransport.Handler
	AutoListAppUserGrpHdlr   grpctransport.Handler
	AutoUpdateAppHdlr        grpctransport.Handler
	AutoUpdateAppUserHdlr    grpctransport.Handler
	AutoUpdateAppUserGrpHdlr grpctransport.Handler
}

// MakeGRPCServerAppV1 creates a GRPC server for AppV1 service
func MakeGRPCServerAppV1(ctx context.Context, endpoints EndpointsAppV1Server, logger log.Logger) AppV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAppV1{
		Endpoints: endpoints,
		AutoAddAppHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddApp", logger)))...,
		),

		AutoAddAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddAppUser", logger)))...,
		),

		AutoAddAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoAddAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddAppUserGrp", logger)))...,
		),

		AutoDeleteAppHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteApp", logger)))...,
		),

		AutoDeleteAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteAppUser", logger)))...,
		),

		AutoDeleteAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteAppUserGrp", logger)))...,
		),

		AutoGetAppHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetApp", logger)))...,
		),

		AutoGetAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetAppUser", logger)))...,
		),

		AutoGetAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoGetAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetAppUserGrp", logger)))...,
		),

		AutoListAppHdlr: grpctransport.NewServer(
			endpoints.AutoListAppEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListApp", logger)))...,
		),

		AutoListAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoListAppUserEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppUserList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListAppUser", logger)))...,
		),

		AutoListAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoListAppUserGrpEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAppUserGrpList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListAppUserGrp", logger)))...,
		),

		AutoUpdateAppHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppEndpoint,
			DecodeGrpcReqApp,
			EncodeGrpcRespApp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateApp", logger)))...,
		),

		AutoUpdateAppUserHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppUserEndpoint,
			DecodeGrpcReqAppUser,
			EncodeGrpcRespAppUser,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateAppUser", logger)))...,
		),

		AutoUpdateAppUserGrpHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAppUserGrpEndpoint,
			DecodeGrpcReqAppUserGrp,
			EncodeGrpcRespAppUserGrp,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateAppUserGrp", logger)))...,
		),
	}
}

func (s *grpcServerAppV1) AutoAddApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoAddAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoAddApp).V
	return &r, resp.(respAppV1AutoAddApp).Err
}

func decodeHTTPrespAppV1AutoAddApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoAddAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoAddAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoAddAppUser).V
	return &r, resp.(respAppV1AutoAddAppUser).Err
}

func decodeHTTPrespAppV1AutoAddAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoAddAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoAddAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoAddAppUserGrp).V
	return &r, resp.(respAppV1AutoAddAppUserGrp).Err
}

func decodeHTTPrespAppV1AutoAddAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoDeleteApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoDeleteAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoDeleteApp).V
	return &r, resp.(respAppV1AutoDeleteApp).Err
}

func decodeHTTPrespAppV1AutoDeleteApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoDeleteAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoDeleteAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoDeleteAppUser).V
	return &r, resp.(respAppV1AutoDeleteAppUser).Err
}

func decodeHTTPrespAppV1AutoDeleteAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoDeleteAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoDeleteAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoDeleteAppUserGrp).V
	return &r, resp.(respAppV1AutoDeleteAppUserGrp).Err
}

func decodeHTTPrespAppV1AutoDeleteAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoGetApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoGetAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoGetApp).V
	return &r, resp.(respAppV1AutoGetApp).Err
}

func decodeHTTPrespAppV1AutoGetApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoGetAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoGetAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoGetAppUser).V
	return &r, resp.(respAppV1AutoGetAppUser).Err
}

func decodeHTTPrespAppV1AutoGetAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoGetAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoGetAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoGetAppUserGrp).V
	return &r, resp.(respAppV1AutoGetAppUserGrp).Err
}

func decodeHTTPrespAppV1AutoGetAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoListApp(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppList, error) {
	_, resp, err := s.AutoListAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoListApp).V
	return &r, resp.(respAppV1AutoListApp).Err
}

func decodeHTTPrespAppV1AutoListApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoListAppUser(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppUserList, error) {
	_, resp, err := s.AutoListAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoListAppUser).V
	return &r, resp.(respAppV1AutoListAppUser).Err
}

func decodeHTTPrespAppV1AutoListAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoListAppUserGrp(ctx oldcontext.Context, req *api.ListWatchOptions) (*AppUserGrpList, error) {
	_, resp, err := s.AutoListAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoListAppUserGrp).V
	return &r, resp.(respAppV1AutoListAppUserGrp).Err
}

func decodeHTTPrespAppV1AutoListAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrpList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoUpdateApp(ctx oldcontext.Context, req *App) (*App, error) {
	_, resp, err := s.AutoUpdateAppHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoUpdateApp).V
	return &r, resp.(respAppV1AutoUpdateApp).Err
}

func decodeHTTPrespAppV1AutoUpdateApp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp App
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoUpdateAppUser(ctx oldcontext.Context, req *AppUser) (*AppUser, error) {
	_, resp, err := s.AutoUpdateAppUserHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoUpdateAppUser).V
	return &r, resp.(respAppV1AutoUpdateAppUser).Err
}

func decodeHTTPrespAppV1AutoUpdateAppUser(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUser
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoUpdateAppUserGrp(ctx oldcontext.Context, req *AppUserGrp) (*AppUserGrp, error) {
	_, resp, err := s.AutoUpdateAppUserGrpHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAppV1AutoUpdateAppUserGrp).V
	return &r, resp.(respAppV1AutoUpdateAppUserGrp).Err
}

func decodeHTTPrespAppV1AutoUpdateAppUserGrp(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AppUserGrp
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAppV1) AutoWatchApp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppServer) error {
	return s.Endpoints.AutoWatchApp(in, stream)
}

func (s *grpcServerAppV1) AutoWatchAppUser(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserServer) error {
	return s.Endpoints.AutoWatchAppUser(in, stream)
}

func (s *grpcServerAppV1) AutoWatchAppUserGrp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserGrpServer) error {
	return s.Endpoints.AutoWatchAppUserGrp(in, stream)
}

func encodeHTTPApp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPApp(_ context.Context, r *http.Request) (interface{}, error) {
	var req App
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqApp encodes GRPC request
func EncodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// DecodeGrpcReqApp decodes GRPC request
func DecodeGrpcReqApp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*App)
	return req, nil
}

// EncodeGrpcRespApp encodes GRC response
func EncodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespApp decodes GRPC response
func DecodeGrpcRespApp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppList encodes GRPC request
func EncodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// DecodeGrpcReqAppList decodes GRPC request
func DecodeGrpcReqAppList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppList)
	return req, nil
}

// EncodeGrpcRespAppList endodes the GRPC response
func EncodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppList decodes the GRPC response
func DecodeGrpcRespAppList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppSpec encodes GRPC request
func EncodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// DecodeGrpcReqAppSpec decodes GRPC request
func DecodeGrpcReqAppSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppSpec)
	return req, nil
}

// EncodeGrpcRespAppSpec encodes GRC response
func EncodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppSpec decodes GRPC response
func DecodeGrpcRespAppSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppStatus encodes GRPC request
func EncodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// DecodeGrpcReqAppStatus decodes GRPC request
func DecodeGrpcReqAppStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppStatus)
	return req, nil
}

// EncodeGrpcRespAppStatus encodes GRC response
func EncodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppStatus decodes GRPC response
func DecodeGrpcRespAppStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUser(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUser(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUser
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUser encodes GRPC request
func EncodeGrpcReqAppUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUser)
	return req, nil
}

// DecodeGrpcReqAppUser decodes GRPC request
func DecodeGrpcReqAppUser(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUser)
	return req, nil
}

// EncodeGrpcRespAppUser encodes GRC response
func EncodeGrpcRespAppUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUser decodes GRPC response
func DecodeGrpcRespAppUser(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrp(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrp(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrp
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrp encodes GRPC request
func EncodeGrpcReqAppUserGrp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrp)
	return req, nil
}

// DecodeGrpcReqAppUserGrp decodes GRPC request
func DecodeGrpcReqAppUserGrp(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrp)
	return req, nil
}

// EncodeGrpcRespAppUserGrp encodes GRC response
func EncodeGrpcRespAppUserGrp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrp decodes GRPC response
func DecodeGrpcRespAppUserGrp(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpList encodes GRPC request
func EncodeGrpcReqAppUserGrpList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpList)
	return req, nil
}

// DecodeGrpcReqAppUserGrpList decodes GRPC request
func DecodeGrpcReqAppUserGrpList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpList)
	return req, nil
}

// EncodeGrpcRespAppUserGrpList endodes the GRPC response
func EncodeGrpcRespAppUserGrpList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpList decodes the GRPC response
func DecodeGrpcRespAppUserGrpList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpSpec encodes GRPC request
func EncodeGrpcReqAppUserGrpSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpSpec)
	return req, nil
}

// DecodeGrpcReqAppUserGrpSpec decodes GRPC request
func DecodeGrpcReqAppUserGrpSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpSpec)
	return req, nil
}

// EncodeGrpcRespAppUserGrpSpec encodes GRC response
func EncodeGrpcRespAppUserGrpSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpSpec decodes GRPC response
func DecodeGrpcRespAppUserGrpSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserGrpStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserGrpStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserGrpStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserGrpStatus encodes GRPC request
func EncodeGrpcReqAppUserGrpStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpStatus)
	return req, nil
}

// DecodeGrpcReqAppUserGrpStatus decodes GRPC request
func DecodeGrpcReqAppUserGrpStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserGrpStatus)
	return req, nil
}

// EncodeGrpcRespAppUserGrpStatus encodes GRC response
func EncodeGrpcRespAppUserGrpStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserGrpStatus decodes GRPC response
func DecodeGrpcRespAppUserGrpStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserList encodes GRPC request
func EncodeGrpcReqAppUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserList)
	return req, nil
}

// DecodeGrpcReqAppUserList decodes GRPC request
func DecodeGrpcReqAppUserList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserList)
	return req, nil
}

// EncodeGrpcRespAppUserList endodes the GRPC response
func EncodeGrpcRespAppUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserList decodes the GRPC response
func DecodeGrpcRespAppUserList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserSpec encodes GRPC request
func EncodeGrpcReqAppUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserSpec)
	return req, nil
}

// DecodeGrpcReqAppUserSpec decodes GRPC request
func DecodeGrpcReqAppUserSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserSpec)
	return req, nil
}

// EncodeGrpcRespAppUserSpec encodes GRC response
func EncodeGrpcRespAppUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserSpec decodes GRPC response
func DecodeGrpcRespAppUserSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAppUserStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAppUserStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AppUserStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAppUserStatus encodes GRPC request
func EncodeGrpcReqAppUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserStatus)
	return req, nil
}

// DecodeGrpcReqAppUserStatus decodes GRPC request
func DecodeGrpcReqAppUserStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AppUserStatus)
	return req, nil
}

// EncodeGrpcRespAppUserStatus encodes GRC response
func EncodeGrpcRespAppUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAppUserStatus decodes GRPC response
func DecodeGrpcRespAppUserStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
