// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app.proto

/*
	Package app is a generated protocol buffer package.

	Service name

	It is generated from these files:
		app.proto

	It has these top-level messages:
		App
		AppList
		AppSpec
		AppStatus
		AppUser
		AppUserGrp
		AppUserGrpList
		AppUserGrpSpec
		AppUserGrpStatus
		AppUserList
		AppUserSpec
		AppUserStatus
		AutoMsgAppUserGrpWatchHelper
		AutoMsgAppUserWatchHelper
		AutoMsgAppWatchHelper
*/
package app

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AppSpec - spec part of App object
type App struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           AppSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         AppStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

func (m *App) GetSpec() AppSpec {
	if m != nil {
		return m.Spec
	}
	return AppSpec{}
}

func (m *App) GetStatus() AppStatus {
	if m != nil {
		return m.Status
	}
	return AppStatus{}
}

// AppStatus - status part of App object
type AppList struct {
	// Name is already part of meta
	// Description of app - example “mongo https://www.mongodb.com/”
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*App `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AppList) Reset()                    { *m = AppList{} }
func (m *AppList) String() string            { return proto.CompactTextString(m) }
func (*AppList) ProtoMessage()               {}
func (*AppList) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

func (m *AppList) GetItems() []*App {
	if m != nil {
		return m.Items
	}
	return nil
}

// App - Read-only objects auto-created by Venice
// One object per App that can be identified by Naples
type AppSpec struct {
}

func (m *AppSpec) Reset()                    { *m = AppSpec{} }
func (m *AppSpec) String() string            { return proto.CompactTextString(m) }
func (*AppSpec) ProtoMessage()               {}
func (*AppSpec) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

// AppUserSpec - spec part of AppUser object
type AppStatus struct {
	// Name is part of the meta
	// Description of the AppUser - example "cassandra user"
	Description string `protobuf:"bytes,1,opt,name=Description,proto3" json:"description,omitempty"`
}

func (m *AppStatus) Reset()                    { *m = AppStatus{} }
func (m *AppStatus) String() string            { return proto.CompactTextString(m) }
func (*AppStatus) ProtoMessage()               {}
func (*AppStatus) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{3} }

func (m *AppStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// AppUserStatus - status part of AppUser object
type AppUser struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           AppUserSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         AppUserStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *AppUser) Reset()                    { *m = AppUser{} }
func (m *AppUser) String() string            { return proto.CompactTextString(m) }
func (*AppUser) ProtoMessage()               {}
func (*AppUser) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{4} }

func (m *AppUser) GetSpec() AppUserSpec {
	if m != nil {
		return m.Spec
	}
	return AppUserSpec{}
}

func (m *AppUser) GetStatus() AppUserStatus {
	if m != nil {
		return m.Status
	}
	return AppUserStatus{}
}

// AppUser is derived from application payload such as database login or
// other application authentication mechanisms.
// Created by Venice Admin or Tenant Admin
type AppUserGrp struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           AppUserGrpSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         AppUserGrpStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *AppUserGrp) Reset()                    { *m = AppUserGrp{} }
func (m *AppUserGrp) String() string            { return proto.CompactTextString(m) }
func (*AppUserGrp) ProtoMessage()               {}
func (*AppUserGrp) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{5} }

func (m *AppUserGrp) GetSpec() AppUserGrpSpec {
	if m != nil {
		return m.Spec
	}
	return AppUserGrpSpec{}
}

func (m *AppUserGrp) GetStatus() AppUserGrpStatus {
	if m != nil {
		return m.Status
	}
	return AppUserGrpStatus{}
}

// AppUserGrpSpec - spec part of AppUserGrp object
type AppUserGrpList struct {
	// List of appusers - example [“john”, “george”]
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	// Description of the AppUserGrp - example "SQL Users"
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*AppUserGrp `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AppUserGrpList) Reset()                    { *m = AppUserGrpList{} }
func (m *AppUserGrpList) String() string            { return proto.CompactTextString(m) }
func (*AppUserGrpList) ProtoMessage()               {}
func (*AppUserGrpList) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{6} }

func (m *AppUserGrpList) GetItems() []*AppUserGrp {
	if m != nil {
		return m.Items
	}
	return nil
}

// AppUserGrpStatus - status part of AppUserGrp object
type AppUserGrpSpec struct {
	AppUsers    []string `protobuf:"bytes,1,rep,name=AppUsers" json:"app-user,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"description,omitempty"`
}

func (m *AppUserGrpSpec) Reset()                    { *m = AppUserGrpSpec{} }
func (m *AppUserGrpSpec) String() string            { return proto.CompactTextString(m) }
func (*AppUserGrpSpec) ProtoMessage()               {}
func (*AppUserGrpSpec) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{7} }

func (m *AppUserGrpSpec) GetAppUsers() []string {
	if m != nil {
		return m.AppUsers
	}
	return nil
}

func (m *AppUserGrpSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// AppUserGrp - Object representing group of AppUsers
// Created by Venice Admin or Tenant Admin
type AppUserGrpStatus struct {
}

func (m *AppUserGrpStatus) Reset()                    { *m = AppUserGrpStatus{} }
func (m *AppUserGrpStatus) String() string            { return proto.CompactTextString(m) }
func (*AppUserGrpStatus) ProtoMessage()               {}
func (*AppUserGrpStatus) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{8} }

type AppUserList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*AppUser `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AppUserList) Reset()                    { *m = AppUserList{} }
func (m *AppUserList) String() string            { return proto.CompactTextString(m) }
func (*AppUserList) ProtoMessage()               {}
func (*AppUserList) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{9} }

func (m *AppUserList) GetItems() []*AppUser {
	if m != nil {
		return m.Items
	}
	return nil
}

type AppUserSpec struct {
	Description string `protobuf:"bytes,1,opt,name=Description,proto3" json:"description,omitempty"`
}

func (m *AppUserSpec) Reset()                    { *m = AppUserSpec{} }
func (m *AppUserSpec) String() string            { return proto.CompactTextString(m) }
func (*AppUserSpec) ProtoMessage()               {}
func (*AppUserSpec) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{10} }

func (m *AppUserSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type AppUserStatus struct {
}

func (m *AppUserStatus) Reset()                    { *m = AppUserStatus{} }
func (m *AppUserStatus) String() string            { return proto.CompactTextString(m) }
func (*AppUserStatus) ProtoMessage()               {}
func (*AppUserStatus) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{11} }

type AutoMsgAppUserGrpWatchHelper struct {
	Type   string      `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *AppUserGrp `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAppUserGrpWatchHelper) Reset()                    { *m = AutoMsgAppUserGrpWatchHelper{} }
func (m *AutoMsgAppUserGrpWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgAppUserGrpWatchHelper) ProtoMessage()               {}
func (*AutoMsgAppUserGrpWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{12} }

func (m *AutoMsgAppUserGrpWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAppUserGrpWatchHelper) GetObject() *AppUserGrp {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgAppUserWatchHelper struct {
	Type   string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *AppUser `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAppUserWatchHelper) Reset()                    { *m = AutoMsgAppUserWatchHelper{} }
func (m *AutoMsgAppUserWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgAppUserWatchHelper) ProtoMessage()               {}
func (*AutoMsgAppUserWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{13} }

func (m *AutoMsgAppUserWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAppUserWatchHelper) GetObject() *AppUser {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgAppWatchHelper struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *App   `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAppWatchHelper) Reset()                    { *m = AutoMsgAppWatchHelper{} }
func (m *AutoMsgAppWatchHelper) String() string            { return proto.CompactTextString(m) }
func (*AutoMsgAppWatchHelper) ProtoMessage()               {}
func (*AutoMsgAppWatchHelper) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{14} }

func (m *AutoMsgAppWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAppWatchHelper) GetObject() *App {
	if m != nil {
		return m.Object
	}
	return nil
}

func init() {
	proto.RegisterType((*App)(nil), "app.App")
	proto.RegisterType((*AppList)(nil), "app.AppList")
	proto.RegisterType((*AppSpec)(nil), "app.AppSpec")
	proto.RegisterType((*AppStatus)(nil), "app.AppStatus")
	proto.RegisterType((*AppUser)(nil), "app.AppUser")
	proto.RegisterType((*AppUserGrp)(nil), "app.AppUserGrp")
	proto.RegisterType((*AppUserGrpList)(nil), "app.AppUserGrpList")
	proto.RegisterType((*AppUserGrpSpec)(nil), "app.AppUserGrpSpec")
	proto.RegisterType((*AppUserGrpStatus)(nil), "app.AppUserGrpStatus")
	proto.RegisterType((*AppUserList)(nil), "app.AppUserList")
	proto.RegisterType((*AppUserSpec)(nil), "app.AppUserSpec")
	proto.RegisterType((*AppUserStatus)(nil), "app.AppUserStatus")
	proto.RegisterType((*AutoMsgAppUserGrpWatchHelper)(nil), "app.AutoMsgAppUserGrpWatchHelper")
	proto.RegisterType((*AutoMsgAppUserWatchHelper)(nil), "app.AutoMsgAppUserWatchHelper")
	proto.RegisterType((*AutoMsgAppWatchHelper)(nil), "app.AutoMsgAppWatchHelper")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppV1 service

type AppV1Client interface {
	AutoAddApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	AutoAddAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error)
	AutoAddAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error)
	AutoDeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	AutoDeleteAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error)
	AutoDeleteAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error)
	AutoGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	AutoGetAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error)
	AutoGetAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error)
	AutoListApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppList, error)
	AutoListAppUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppUserList, error)
	AutoListAppUserGrp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppUserGrpList, error)
	AutoUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	AutoUpdateAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error)
	AutoUpdateAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error)
	AutoWatchApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppClient, error)
	AutoWatchAppUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppUserClient, error)
	AutoWatchAppUserGrp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppUserGrpClient, error)
}

type appV1Client struct {
	cc *grpc.ClientConn
}

func NewAppV1Client(cc *grpc.ClientConn) AppV1Client {
	return &appV1Client{cc}
}

func (c *appV1Client) AutoAddApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoAddApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoAddAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error) {
	out := new(AppUser)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoAddAppUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoAddAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error) {
	out := new(AppUserGrp)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoAddAppUserGrp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoDeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoDeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoDeleteAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error) {
	out := new(AppUser)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoDeleteAppUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoDeleteAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error) {
	out := new(AppUserGrp)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoDeleteAppUserGrp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoGetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoGetAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error) {
	out := new(AppUser)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoGetAppUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoGetAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error) {
	out := new(AppUserGrp)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoGetAppUserGrp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoListApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoListApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoListAppUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppUserList, error) {
	out := new(AppUserList)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoListAppUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoListAppUserGrp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AppUserGrpList, error) {
	out := new(AppUserGrpList)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoListAppUserGrp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoUpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoUpdateAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error) {
	out := new(AppUser)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoUpdateAppUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoUpdateAppUserGrp(ctx context.Context, in *AppUserGrp, opts ...grpc.CallOption) (*AppUserGrp, error) {
	out := new(AppUserGrp)
	err := grpc.Invoke(ctx, "/app.AppV1/AutoUpdateAppUserGrp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appV1Client) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppV1_serviceDesc.Streams[0], c.cc, "/app.AppV1/AutoWatchApp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appV1AutoWatchAppClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppV1_AutoWatchAppClient interface {
	Recv() (*AutoMsgAppWatchHelper, error)
	grpc.ClientStream
}

type appV1AutoWatchAppClient struct {
	grpc.ClientStream
}

func (x *appV1AutoWatchAppClient) Recv() (*AutoMsgAppWatchHelper, error) {
	m := new(AutoMsgAppWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appV1Client) AutoWatchAppUser(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppUserClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppV1_serviceDesc.Streams[1], c.cc, "/app.AppV1/AutoWatchAppUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &appV1AutoWatchAppUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppV1_AutoWatchAppUserClient interface {
	Recv() (*AutoMsgAppUserWatchHelper, error)
	grpc.ClientStream
}

type appV1AutoWatchAppUserClient struct {
	grpc.ClientStream
}

func (x *appV1AutoWatchAppUserClient) Recv() (*AutoMsgAppUserWatchHelper, error) {
	m := new(AutoMsgAppUserWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appV1Client) AutoWatchAppUserGrp(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (AppV1_AutoWatchAppUserGrpClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AppV1_serviceDesc.Streams[2], c.cc, "/app.AppV1/AutoWatchAppUserGrp", opts...)
	if err != nil {
		return nil, err
	}
	x := &appV1AutoWatchAppUserGrpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppV1_AutoWatchAppUserGrpClient interface {
	Recv() (*AutoMsgAppUserGrpWatchHelper, error)
	grpc.ClientStream
}

type appV1AutoWatchAppUserGrpClient struct {
	grpc.ClientStream
}

func (x *appV1AutoWatchAppUserGrpClient) Recv() (*AutoMsgAppUserGrpWatchHelper, error) {
	m := new(AutoMsgAppUserGrpWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AppV1 service

type AppV1Server interface {
	AutoAddApp(context.Context, *App) (*App, error)
	AutoAddAppUser(context.Context, *AppUser) (*AppUser, error)
	AutoAddAppUserGrp(context.Context, *AppUserGrp) (*AppUserGrp, error)
	AutoDeleteApp(context.Context, *App) (*App, error)
	AutoDeleteAppUser(context.Context, *AppUser) (*AppUser, error)
	AutoDeleteAppUserGrp(context.Context, *AppUserGrp) (*AppUserGrp, error)
	AutoGetApp(context.Context, *App) (*App, error)
	AutoGetAppUser(context.Context, *AppUser) (*AppUser, error)
	AutoGetAppUserGrp(context.Context, *AppUserGrp) (*AppUserGrp, error)
	AutoListApp(context.Context, *api.ListWatchOptions) (*AppList, error)
	AutoListAppUser(context.Context, *api.ListWatchOptions) (*AppUserList, error)
	AutoListAppUserGrp(context.Context, *api.ListWatchOptions) (*AppUserGrpList, error)
	AutoUpdateApp(context.Context, *App) (*App, error)
	AutoUpdateAppUser(context.Context, *AppUser) (*AppUser, error)
	AutoUpdateAppUserGrp(context.Context, *AppUserGrp) (*AppUserGrp, error)
	AutoWatchApp(*api.ListWatchOptions, AppV1_AutoWatchAppServer) error
	AutoWatchAppUser(*api.ListWatchOptions, AppV1_AutoWatchAppUserServer) error
	AutoWatchAppUserGrp(*api.ListWatchOptions, AppV1_AutoWatchAppUserGrpServer) error
}

func RegisterAppV1Server(s *grpc.Server, srv AppV1Server) {
	s.RegisterService(&_AppV1_serviceDesc, srv)
}

func _AppV1_AutoAddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoAddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoAddApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoAddApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoAddAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoAddAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoAddAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoAddAppUser(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoAddAppUserGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserGrp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoAddAppUserGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoAddAppUserGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoAddAppUserGrp(ctx, req.(*AppUserGrp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoDeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoDeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoDeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoDeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoDeleteAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoDeleteAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoDeleteAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoDeleteAppUser(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoDeleteAppUserGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserGrp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoDeleteAppUserGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoDeleteAppUserGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoDeleteAppUserGrp(ctx, req.(*AppUserGrp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoGetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoGetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoGetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoGetApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoGetAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoGetAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoGetAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoGetAppUser(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoGetAppUserGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserGrp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoGetAppUserGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoGetAppUserGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoGetAppUserGrp(ctx, req.(*AppUserGrp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoListApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoListApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoListApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoListApp(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoListAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoListAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoListAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoListAppUser(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoListAppUserGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoListAppUserGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoListAppUserGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoListAppUserGrp(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoUpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoUpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoUpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoUpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoUpdateAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoUpdateAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoUpdateAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoUpdateAppUser(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoUpdateAppUserGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserGrp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppV1Server).AutoUpdateAppUserGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppV1/AutoUpdateAppUserGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppV1Server).AutoUpdateAppUserGrp(ctx, req.(*AppUserGrp))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppV1_AutoWatchApp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppV1Server).AutoWatchApp(m, &appV1AutoWatchAppServer{stream})
}

type AppV1_AutoWatchAppServer interface {
	Send(*AutoMsgAppWatchHelper) error
	grpc.ServerStream
}

type appV1AutoWatchAppServer struct {
	grpc.ServerStream
}

func (x *appV1AutoWatchAppServer) Send(m *AutoMsgAppWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AppV1_AutoWatchAppUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppV1Server).AutoWatchAppUser(m, &appV1AutoWatchAppUserServer{stream})
}

type AppV1_AutoWatchAppUserServer interface {
	Send(*AutoMsgAppUserWatchHelper) error
	grpc.ServerStream
}

type appV1AutoWatchAppUserServer struct {
	grpc.ServerStream
}

func (x *appV1AutoWatchAppUserServer) Send(m *AutoMsgAppUserWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _AppV1_AutoWatchAppUserGrp_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppV1Server).AutoWatchAppUserGrp(m, &appV1AutoWatchAppUserGrpServer{stream})
}

type AppV1_AutoWatchAppUserGrpServer interface {
	Send(*AutoMsgAppUserGrpWatchHelper) error
	grpc.ServerStream
}

type appV1AutoWatchAppUserGrpServer struct {
	grpc.ServerStream
}

func (x *appV1AutoWatchAppUserGrpServer) Send(m *AutoMsgAppUserGrpWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _AppV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.AppV1",
	HandlerType: (*AppV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddApp",
			Handler:    _AppV1_AutoAddApp_Handler,
		},
		{
			MethodName: "AutoAddAppUser",
			Handler:    _AppV1_AutoAddAppUser_Handler,
		},
		{
			MethodName: "AutoAddAppUserGrp",
			Handler:    _AppV1_AutoAddAppUserGrp_Handler,
		},
		{
			MethodName: "AutoDeleteApp",
			Handler:    _AppV1_AutoDeleteApp_Handler,
		},
		{
			MethodName: "AutoDeleteAppUser",
			Handler:    _AppV1_AutoDeleteAppUser_Handler,
		},
		{
			MethodName: "AutoDeleteAppUserGrp",
			Handler:    _AppV1_AutoDeleteAppUserGrp_Handler,
		},
		{
			MethodName: "AutoGetApp",
			Handler:    _AppV1_AutoGetApp_Handler,
		},
		{
			MethodName: "AutoGetAppUser",
			Handler:    _AppV1_AutoGetAppUser_Handler,
		},
		{
			MethodName: "AutoGetAppUserGrp",
			Handler:    _AppV1_AutoGetAppUserGrp_Handler,
		},
		{
			MethodName: "AutoListApp",
			Handler:    _AppV1_AutoListApp_Handler,
		},
		{
			MethodName: "AutoListAppUser",
			Handler:    _AppV1_AutoListAppUser_Handler,
		},
		{
			MethodName: "AutoListAppUserGrp",
			Handler:    _AppV1_AutoListAppUserGrp_Handler,
		},
		{
			MethodName: "AutoUpdateApp",
			Handler:    _AppV1_AutoUpdateApp_Handler,
		},
		{
			MethodName: "AutoUpdateAppUser",
			Handler:    _AppV1_AutoUpdateAppUser_Handler,
		},
		{
			MethodName: "AutoUpdateAppUserGrp",
			Handler:    _AppV1_AutoUpdateAppUserGrp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchApp",
			Handler:       _AppV1_AutoWatchApp_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAppUser",
			Handler:       _AppV1_AutoWatchAppUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAppUserGrp",
			Handler:       _AppV1_AutoWatchAppUserGrp_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app.proto",
}

func (m *App) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *App) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AppList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AppStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *AppUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *AppUserGrp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserGrp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ObjectMeta.Size()))
	n12, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Spec.Size()))
	n13, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.Status.Size()))
	n14, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *AppUserGrpList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserGrpList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n15, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ListMeta.Size()))
	n16, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppUserGrpSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserGrpSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppUsers) > 0 {
		for _, s := range m.AppUsers {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *AppUserGrpStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserGrpStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AppUserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.TypeMeta.Size()))
	n17, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApp(dAtA, i, uint64(m.ListMeta.Size()))
	n18, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppUserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *AppUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppUserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AutoMsgAppUserGrpWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAppUserGrpWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Object.Size()))
		n19, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *AutoMsgAppUserWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAppUserWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Object.Size()))
		n20, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *AutoMsgAppWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAppWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Object.Size()))
		n21, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func encodeFixed64App(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32App(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *App) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovApp(uint64(l))
	return n
}

func (m *AppList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *AppSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AppStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppUser) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovApp(uint64(l))
	return n
}

func (m *AppUserGrp) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovApp(uint64(l))
	return n
}

func (m *AppUserGrpList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *AppUserGrpSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.AppUsers) > 0 {
		for _, s := range m.AppUsers {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppUserGrpStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AppUserList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovApp(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *AppUserSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppUserStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AutoMsgAppUserGrpWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AutoMsgAppUserWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AutoMsgAppWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *App) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: App: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: App: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &App{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserGrp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserGrp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserGrp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserGrpList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserGrpList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserGrpList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AppUserGrp{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserGrpSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserGrpSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserGrpSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUsers = append(m.AppUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserGrpStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserGrpStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserGrpStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AppUser{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppUserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAppUserGrpWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAppUserGrpWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAppUserGrpWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AppUserGrp{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAppUserWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAppUserWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAppUserWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AppUser{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAppWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAppWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAppWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &App{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 1220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x4e, 0x9a, 0x8c, 0x13, 0x3b, 0x4c, 0x92, 0xe2, 0xdd, 0x06, 0xbb, 0x2c, 0x8d,
	0x14, 0x42, 0x62, 0xa7, 0x29, 0x3f, 0xda, 0x04, 0xb5, 0xd8, 0x8a, 0x94, 0x82, 0x28, 0x29, 0x69,
	0x0a, 0x88, 0x43, 0xc5, 0xc6, 0x1e, 0x9c, 0xad, 0xec, 0xdd, 0x91, 0x77, 0xdc, 0x12, 0xa1, 0x1e,
	0xca, 0x92, 0x43, 0x4f, 0x48, 0x90, 0x03, 0xe2, 0x98, 0xa3, 0x8f, 0xfc, 0x15, 0x3d, 0x56, 0xe1,
	0x82, 0x7a, 0x88, 0x50, 0xc4, 0x29, 0x7f, 0x01, 0x27, 0x84, 0xe6, 0xed, 0x7a, 0x77, 0x67, 0xbd,
	0x8e, 0x17, 0x55, 0xed, 0xcd, 0x3b, 0x9e, 0xef, 0xfb, 0xde, 0xfb, 0xe6, 0xbd, 0xb7, 0x3b, 0x68,
	0x4c, 0xa3, 0xb4, 0x48, 0x5b, 0x26, 0x33, 0x71, 0x52, 0xa3, 0x54, 0x99, 0xad, 0x9b, 0x66, 0xbd,
	0x41, 0x4a, 0x1a, 0xd5, 0x4b, 0x9a, 0x61, 0x98, 0x4c, 0x63, 0xba, 0x69, 0x58, 0xce, 0x16, 0xe5,
	0x7a, 0x5d, 0x67, 0xbb, 0xed, 0x9d, 0x62, 0xd5, 0x6c, 0x96, 0x28, 0x31, 0x2c, 0xcd, 0xa8, 0x99,
	0x25, 0xeb, 0x61, 0xa9, 0xcd, 0xf4, 0x86, 0xc5, 0x31, 0x75, 0x62, 0x04, 0x61, 0x25, 0xdd, 0xa8,
	0x36, 0xda, 0x35, 0xd2, 0xc5, 0x2f, 0x05, 0xf0, 0x75, 0xb3, 0x6e, 0x96, 0x60, 0x79, 0xa7, 0xfd,
	0x2d, 0x3c, 0xc1, 0x03, 0xfc, 0x72, 0xb7, 0xcf, 0xf5, 0x91, 0xe3, 0xc1, 0x35, 0x09, 0xd3, 0x9c,
	0x6d, 0xea, 0x3f, 0x12, 0x4a, 0x96, 0x29, 0xc5, 0xcb, 0x48, 0xda, 0xce, 0x49, 0x17, 0xa5, 0xf9,
	0xf4, 0xca, 0x44, 0x51, 0xa3, 0x7a, 0x71, 0x7b, 0x8f, 0x92, 0x5b, 0x84, 0x69, 0x95, 0xa9, 0xa7,
	0xc7, 0x85, 0xa1, 0x67, 0xc7, 0x05, 0xe9, 0xf4, 0xb8, 0x70, 0x6e, 0x51, 0x37, 0x1a, 0xba, 0x41,
	0xb6, 0xa4, 0x6d, 0x7c, 0x0d, 0x49, 0x9b, 0xb9, 0x04, 0x20, 0xb2, 0x80, 0xd8, 0xdc, 0xb9, 0x4f,
	0xaa, 0x0c, 0x30, 0x4a, 0x00, 0x93, 0xe1, 0x6a, 0x8b, 0x66, 0x53, 0x67, 0xa4, 0x49, 0xd9, 0xde,
	0x96, 0xb4, 0x89, 0xaf, 0xa2, 0xd4, 0x1d, 0x4a, 0xaa, 0xb9, 0x24, 0xa0, 0xc7, 0x8b, 0xdc, 0xc7,
	0x32, 0xa5, 0x7c, 0xad, 0x72, 0x9e, 0x43, 0x39, 0xcc, 0xa2, 0xa4, 0x1a, 0x80, 0x01, 0x02, 0x7f,
	0x84, 0x46, 0xee, 0x30, 0x8d, 0xb5, 0xad, 0x5c, 0x0a, 0xb0, 0x19, 0x0f, 0x0b, 0xab, 0x95, 0x9c,
	0x8b, 0x9e, 0xb4, 0xe0, 0x39, 0x80, 0x77, 0x71, 0xab, 0xa3, 0x47, 0xfb, 0x72, 0x4a, 0xa3, 0xd4,
	0x52, 0x1f, 0x4b, 0xe8, 0x5c, 0x99, 0xd2, 0x4f, 0x75, 0x8b, 0x61, 0x95, 0xa7, 0x9f, 0x88, 0x4a,
	0x7f, 0xb4, 0x9b, 0x0a, 0x7e, 0x1b, 0x8d, 0xf2, 0xbd, 0x7c, 0xd5, 0x8d, 0xdc, 0xd9, 0xda, 0x5d,
	0x0c, 0x6c, 0x7d, 0x1d, 0x0d, 0x7f, 0xcc, 0x48, 0x93, 0x47, 0x99, 0x9c, 0x4f, 0xaf, 0x8c, 0x76,
	0xa3, 0x5c, 0xcd, 0x3c, 0x3f, 0x98, 0x46, 0x0d, 0xdd, 0x62, 0xbb, 0xa4, 0x41, 0x49, 0x4b, 0x1d,
	0x83, 0x10, 0x78, 0x6a, 0xea, 0x4d, 0x34, 0xe6, 0xe5, 0x81, 0xd7, 0x50, 0x7a, 0x9d, 0x58, 0xd5,
	0x96, 0x4e, 0x79, 0x2d, 0xc0, 0xc1, 0x8c, 0x55, 0xe4, 0xd3, 0xe3, 0xc2, 0x4c, 0xcd, 0x5f, 0x0e,
	0x64, 0x17, 0xdc, 0xad, 0x3e, 0x49, 0x00, 0xeb, 0x5d, 0x8b, 0xb4, 0x5e, 0xed, 0xb9, 0x7e, 0x28,
	0x9c, 0xeb, 0x64, 0x37, 0x6b, 0x1e, 0x48, 0x8c, 0xb3, 0x5d, 0x0f, 0x9d, 0x2d, 0x16, 0xf0, 0x71,
	0xcf, 0x77, 0xe2, 0x68, 0x5f, 0xe6, 0x8d, 0xb9, 0xd4, 0xb6, 0x48, 0xcb, 0x52, 0x7f, 0x4d, 0x20,
	0xe4, 0x52, 0x6c, 0xb4, 0x5e, 0x71, 0x99, 0xdf, 0x10, 0xec, 0x98, 0x0a, 0xa6, 0xb3, 0xd1, 0x8a,
	0x53, 0xed, 0x1b, 0x21, 0x47, 0x66, 0xc2, 0x14, 0x71, 0x4d, 0x99, 0x3a, 0xda, 0x97, 0xb3, 0x5d,
	0x53, 0x96, 0xea, 0x2d, 0xb3, 0x4d, 0x2d, 0xf5, 0x27, 0x09, 0x65, 0x7c, 0xae, 0x97, 0xd1, 0x06,
	0x79, 0xb1, 0x0d, 0xb2, 0xa1, 0xf0, 0x7b, 0xba, 0xe1, 0xb1, 0x10, 0x11, 0x58, 0xb0, 0x82, 0x46,
	0xdd, 0x15, 0x2b, 0x27, 0x5d, 0x4c, 0xce, 0x8f, 0x55, 0xce, 0x9f, 0x1e, 0x17, 0x70, 0x37, 0x97,
	0x40, 0xae, 0xde, 0xbe, 0x70, 0xf3, 0x24, 0xfe, 0x57, 0xf3, 0x60, 0x34, 0x19, 0x36, 0x58, 0x7d,
	0x22, 0xa1, 0xb4, 0xbb, 0xf8, 0x32, 0x6c, 0xba, 0x20, 0xda, 0x34, 0x1e, 0xb4, 0xa9, 0xc7, 0xa3,
	0x4f, 0xbc, 0x50, 0xc0, 0x9f, 0x17, 0x1a, 0x14, 0x59, 0x34, 0x21, 0xb4, 0x97, 0x7a, 0x0f, 0xcd,
	0x96, 0xdb, 0xcc, 0xbc, 0x65, 0xd5, 0x7d, 0x0f, 0xbe, 0xd4, 0x58, 0x75, 0xf7, 0x26, 0x88, 0xe3,
	0x71, 0x94, 0xe2, 0xa9, 0x3a, 0x32, 0xb8, 0x80, 0x46, 0x9c, 0x66, 0x08, 0xf4, 0x87, 0x70, 0xbe,
	0xd9, 0xe7, 0x07, 0xd3, 0xe9, 0x87, 0x1c, 0xef, 0x06, 0xff, 0x15, 0x92, 0x45, 0xfe, 0xfe, 0xe4,
	0xb3, 0x21, 0x72, 0xd1, 0x95, 0x1e, 0xe6, 0xdb, 0x68, 0xc6, 0x67, 0xee, 0xcf, 0x9a, 0x0b, 0xb1,
	0xfa, 0x93, 0x39, 0xcc, 0xb8, 0xf2, 0x6f, 0x16, 0x0d, 0x97, 0x29, 0xfd, 0xe2, 0x32, 0x5e, 0x46,
	0x88, 0x73, 0x97, 0x6b, 0x35, 0xfe, 0xa6, 0xf4, 0x20, 0x8a, 0xf7, 0x4b, 0xcd, 0xfc, 0x79, 0x30,
	0x2d, 0xfd, 0xfe, 0xa3, 0x3c, 0x52, 0x6d, 0x11, 0x8d, 0x11, 0x7c, 0x0f, 0x65, 0x7c, 0x04, 0xcc,
	0x61, 0x21, 0x7c, 0x45, 0x78, 0x52, 0x97, 0x45, 0xf4, 0x0f, 0x7f, 0xfc, 0xfd, 0x4b, 0x62, 0x16,
	0x0d, 0xad, 0x4a, 0x0b, 0xea, 0x4c, 0xe9, 0xfb, 0xcd, 0xe2, 0x36, 0x31, 0x34, 0x83, 0x3d, 0x2a,
	0x79, 0x53, 0x0d, 0x1b, 0xe8, 0x35, 0x91, 0x9f, 0xcf, 0xb6, 0xb0, 0xfd, 0x4a, 0x78, 0x41, 0xfd,
	0x20, 0x42, 0xe8, 0x2d, 0x47, 0x68, 0x36, 0x52, 0xc8, 0x1d, 0x15, 0xf8, 0x0a, 0x9a, 0xe0, 0x7a,
	0xeb, 0xa4, 0x41, 0x18, 0x19, 0x68, 0x42, 0x0d, 0xb6, 0x61, 0xdd, 0x09, 0xd2, 0x03, 0x0d, 0xf4,
	0xe1, 0xaa, 0x48, 0x00, 0xe1, 0x5d, 0x42, 0x43, 0xab, 0x43, 0x0b, 0xf9, 0xc8, 0xe8, 0xf8, 0xe2,
	0x67, 0x5a, 0x93, 0x3c, 0xc2, 0xdf, 0xa1, 0xe9, 0x1e, 0xa9, 0x78, 0x96, 0x5c, 0x8f, 0xd0, 0x5c,
	0x00, 0xcd, 0x4b, 0x51, 0x9a, 0xae, 0x21, 0xbe, 0xf2, 0x86, 0x53, 0x1b, 0x1b, 0x84, 0xf5, 0xb3,
	0x65, 0xce, 0x55, 0x48, 0xd6, 0x09, 0x03, 0xfa, 0x69, 0x4e, 0x8f, 0x33, 0x9c, 0x33, 0x40, 0x54,
	0x75, 0x4a, 0xc6, 0x21, 0x1a, 0x68, 0xd5, 0x7b, 0x61, 0x52, 0xf0, 0x09, 0x0f, 0xf2, 0xa9, 0xe5,
	0x1c, 0x89, 0x2f, 0x12, 0xcf, 0xa4, 0xb5, 0xb0, 0x1a, 0x38, 0x84, 0xe3, 0x39, 0xf4, 0x39, 0x4a,
	0x73, 0x4d, 0x3e, 0xf7, 0xb8, 0x45, 0x33, 0xde, 0x14, 0x84, 0x2e, 0xdd, 0x84, 0x49, 0x64, 0xf9,
	0xe9, 0xf1, 0x7f, 0xd4, 0x37, 0x5c, 0xc1, 0x14, 0x1f, 0x7c, 0xa0, 0x98, 0x06, 0xc5, 0x61, 0x30,
	0x0d, 0xeb, 0x28, 0x1b, 0xa0, 0x04, 0xb3, 0xfa, 0xd0, 0x0a, 0xdf, 0x20, 0x40, 0xbd, 0xd4, 0x43,
	0x7d, 0x01, 0xa8, 0xfb, 0x74, 0xda, 0x03, 0x84, 0x43, 0x52, 0xdc, 0xb2, 0x3e, 0x6a, 0xe1, 0x57,
	0x3c, 0x08, 0xbe, 0xdb, 0x23, 0xa8, 0x82, 0x60, 0xac, 0x8e, 0xbb, 0x4b, 0x6b, 0x5a, 0x8c, 0x8e,
	0x6b, 0xc3, 0x36, 0x7c, 0xdf, 0x39, 0x5e, 0x0f, 0x34, 0xb0, 0x8c, 0xae, 0x89, 0x04, 0x10, 0xdd,
	0x1c, 0x0c, 0x04, 0x65, 0x50, 0x29, 0xed, 0x39, 0x2d, 0x27, 0x68, 0xc5, 0xab, 0xa6, 0x1b, 0x11,
	0xa2, 0xef, 0x38, 0xa2, 0xf1, 0x2a, 0x6a, 0x0b, 0x8d, 0x73, 0x69, 0xb0, 0xfe, 0x8c, 0x92, 0x52,
	0x1c, 0xe1, 0xa8, 0xb7, 0x82, 0x3a, 0xe1, 0xc6, 0x30, 0x0c, 0x13, 0x7f, 0x59, 0xc2, 0x5f, 0xa3,
	0xc9, 0x20, 0xe7, 0x59, 0x35, 0x95, 0x0f, 0xf1, 0x86, 0xde, 0x63, 0xbd, 0xdc, 0xdf, 0xa0, 0xa9,
	0x30, 0xf7, 0x19, 0x45, 0xf4, 0x66, 0x04, 0xbd, 0xf8, 0x1a, 0xee, 0x51, 0x50, 0x8e, 0x12, 0x3f,
	0xdb, 0x72, 0xe2, 0xc1, 0xe5, 0xdf, 0x6c, 0x99, 0xdf, 0x44, 0x0f, 0x6d, 0x99, 0x5f, 0xea, 0x0e,
	0x6d, 0xb9, 0x7b, 0x0f, 0x38, 0xb4, 0xe5, 0xc0, 0x67, 0x70, 0xc7, 0x96, 0x15, 0xe7, 0xda, 0xc7,
	0x3b, 0x5a, 0x09, 0x8d, 0xa2, 0x8e, 0x2d, 0x63, 0xe7, 0x5f, 0x28, 0x59, 0xc5, 0x69, 0xba, 0x8e,
	0x2d, 0xaf, 0xf9, 0xd7, 0x0a, 0x8e, 0xc3, 0x49, 0xda, 0x66, 0xd8, 0x1d, 0x9c, 0x83, 0xea, 0xa5,
	0x63, 0xcb, 0x8b, 0x3e, 0x3c, 0x45, 0x4d, 0x8b, 0xb9, 0xf4, 0xd1, 0x8d, 0xd7, 0xb1, 0xe5, 0x75,
	0xe1, 0xcb, 0xbd, 0x57, 0x31, 0x56, 0xb1, 0x74, 0x6c, 0xf9, 0x7d, 0x81, 0x27, 0x28, 0x7d, 0x66,
	0x0b, 0x56, 0xc6, 0x9f, 0x9e, 0xe4, 0xa5, 0x67, 0x27, 0x79, 0xe9, 0xaf, 0x93, 0xbc, 0x74, 0x5b,
	0xda, 0x19, 0x81, 0x1b, 0xf3, 0x95, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x49, 0xb7, 0x3b,
	0xf7, 0x0f, 0x00, 0x00,
}
