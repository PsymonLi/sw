// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package app is a auto generated package.
Input file: protos/app.proto
*/
package app

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareAppV1Client add middleware to the client
type MiddlewareAppV1Client func(ServiceAppV1Client) ServiceAppV1Client

// EndpointsAppV1Client is the endpoints for the client
type EndpointsAppV1Client struct {
	Client AppV1Client

	AutoAddAppEndpoint           endpoint.Endpoint
	AutoAddAppUserEndpoint       endpoint.Endpoint
	AutoAddAppUserGrpEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint        endpoint.Endpoint
	AutoDeleteAppUserEndpoint    endpoint.Endpoint
	AutoDeleteAppUserGrpEndpoint endpoint.Endpoint
	AutoGetAppEndpoint           endpoint.Endpoint
	AutoGetAppUserEndpoint       endpoint.Endpoint
	AutoGetAppUserGrpEndpoint    endpoint.Endpoint
	AutoListAppEndpoint          endpoint.Endpoint
	AutoListAppUserEndpoint      endpoint.Endpoint
	AutoListAppUserGrpEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint        endpoint.Endpoint
	AutoUpdateAppUserEndpoint    endpoint.Endpoint
	AutoUpdateAppUserGrpEndpoint endpoint.Endpoint
}

// EndpointsAppV1RestClient is the REST client
type EndpointsAppV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAppEndpoint           endpoint.Endpoint
	AutoAddAppUserEndpoint       endpoint.Endpoint
	AutoAddAppUserGrpEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint        endpoint.Endpoint
	AutoDeleteAppUserEndpoint    endpoint.Endpoint
	AutoDeleteAppUserGrpEndpoint endpoint.Endpoint
	AutoGetAppEndpoint           endpoint.Endpoint
	AutoGetAppUserEndpoint       endpoint.Endpoint
	AutoGetAppUserGrpEndpoint    endpoint.Endpoint
	AutoListAppEndpoint          endpoint.Endpoint
	AutoListAppUserEndpoint      endpoint.Endpoint
	AutoListAppUserGrpEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint        endpoint.Endpoint
	AutoUpdateAppUserEndpoint    endpoint.Endpoint
	AutoUpdateAppUserGrpEndpoint endpoint.Endpoint
	AutoWatchAppEndpoint         endpoint.Endpoint
	AutoWatchAppUserEndpoint     endpoint.Endpoint
	AutoWatchAppUserGrpEndpoint  endpoint.Endpoint
}

// MiddlewareAppV1Server adds middle ware to the server
type MiddlewareAppV1Server func(ServiceAppV1Server) ServiceAppV1Server

// EndpointsAppV1Server is the server endpoints
type EndpointsAppV1Server struct {
	AutoAddAppEndpoint           endpoint.Endpoint
	AutoAddAppUserEndpoint       endpoint.Endpoint
	AutoAddAppUserGrpEndpoint    endpoint.Endpoint
	AutoDeleteAppEndpoint        endpoint.Endpoint
	AutoDeleteAppUserEndpoint    endpoint.Endpoint
	AutoDeleteAppUserGrpEndpoint endpoint.Endpoint
	AutoGetAppEndpoint           endpoint.Endpoint
	AutoGetAppUserEndpoint       endpoint.Endpoint
	AutoGetAppUserGrpEndpoint    endpoint.Endpoint
	AutoListAppEndpoint          endpoint.Endpoint
	AutoListAppUserEndpoint      endpoint.Endpoint
	AutoListAppUserGrpEndpoint   endpoint.Endpoint
	AutoUpdateAppEndpoint        endpoint.Endpoint
	AutoUpdateAppUserEndpoint    endpoint.Endpoint
	AutoUpdateAppUserGrpEndpoint endpoint.Endpoint

	watchHandlerApp        func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAppUser    func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAppUserGrp func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddApp is endpoint for AutoAddApp
func (e EndpointsAppV1Client) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respAppV1AutoAddApp struct {
	V   App
	Err error
}

// AutoAddAppUser is endpoint for AutoAddAppUser
func (e EndpointsAppV1Client) AutoAddAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	resp, err := e.AutoAddAppUserEndpoint(ctx, in)
	if err != nil {
		return &AppUser{}, err
	}
	return resp.(*AppUser), nil
}

type respAppV1AutoAddAppUser struct {
	V   AppUser
	Err error
}

// AutoAddAppUserGrp is endpoint for AutoAddAppUserGrp
func (e EndpointsAppV1Client) AutoAddAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	resp, err := e.AutoAddAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return &AppUserGrp{}, err
	}
	return resp.(*AppUserGrp), nil
}

type respAppV1AutoAddAppUserGrp struct {
	V   AppUserGrp
	Err error
}

// AutoDeleteApp is endpoint for AutoDeleteApp
func (e EndpointsAppV1Client) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respAppV1AutoDeleteApp struct {
	V   App
	Err error
}

// AutoDeleteAppUser is endpoint for AutoDeleteAppUser
func (e EndpointsAppV1Client) AutoDeleteAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	resp, err := e.AutoDeleteAppUserEndpoint(ctx, in)
	if err != nil {
		return &AppUser{}, err
	}
	return resp.(*AppUser), nil
}

type respAppV1AutoDeleteAppUser struct {
	V   AppUser
	Err error
}

// AutoDeleteAppUserGrp is endpoint for AutoDeleteAppUserGrp
func (e EndpointsAppV1Client) AutoDeleteAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	resp, err := e.AutoDeleteAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return &AppUserGrp{}, err
	}
	return resp.(*AppUserGrp), nil
}

type respAppV1AutoDeleteAppUserGrp struct {
	V   AppUserGrp
	Err error
}

// AutoGetApp is endpoint for AutoGetApp
func (e EndpointsAppV1Client) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respAppV1AutoGetApp struct {
	V   App
	Err error
}

// AutoGetAppUser is endpoint for AutoGetAppUser
func (e EndpointsAppV1Client) AutoGetAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	resp, err := e.AutoGetAppUserEndpoint(ctx, in)
	if err != nil {
		return &AppUser{}, err
	}
	return resp.(*AppUser), nil
}

type respAppV1AutoGetAppUser struct {
	V   AppUser
	Err error
}

// AutoGetAppUserGrp is endpoint for AutoGetAppUserGrp
func (e EndpointsAppV1Client) AutoGetAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	resp, err := e.AutoGetAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return &AppUserGrp{}, err
	}
	return resp.(*AppUserGrp), nil
}

type respAppV1AutoGetAppUserGrp struct {
	V   AppUserGrp
	Err error
}

// AutoListApp is endpoint for AutoListApp
func (e EndpointsAppV1Client) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (*AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return &AppList{}, err
	}
	return resp.(*AppList), nil
}

type respAppV1AutoListApp struct {
	V   AppList
	Err error
}

// AutoListAppUser is endpoint for AutoListAppUser
func (e EndpointsAppV1Client) AutoListAppUser(ctx context.Context, in *api.ListWatchOptions) (*AppUserList, error) {
	resp, err := e.AutoListAppUserEndpoint(ctx, in)
	if err != nil {
		return &AppUserList{}, err
	}
	return resp.(*AppUserList), nil
}

type respAppV1AutoListAppUser struct {
	V   AppUserList
	Err error
}

// AutoListAppUserGrp is endpoint for AutoListAppUserGrp
func (e EndpointsAppV1Client) AutoListAppUserGrp(ctx context.Context, in *api.ListWatchOptions) (*AppUserGrpList, error) {
	resp, err := e.AutoListAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return &AppUserGrpList{}, err
	}
	return resp.(*AppUserGrpList), nil
}

type respAppV1AutoListAppUserGrp struct {
	V   AppUserGrpList
	Err error
}

// AutoUpdateApp is endpoint for AutoUpdateApp
func (e EndpointsAppV1Client) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return &App{}, err
	}
	return resp.(*App), nil
}

type respAppV1AutoUpdateApp struct {
	V   App
	Err error
}

// AutoUpdateAppUser is endpoint for AutoUpdateAppUser
func (e EndpointsAppV1Client) AutoUpdateAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	resp, err := e.AutoUpdateAppUserEndpoint(ctx, in)
	if err != nil {
		return &AppUser{}, err
	}
	return resp.(*AppUser), nil
}

type respAppV1AutoUpdateAppUser struct {
	V   AppUser
	Err error
}

// AutoUpdateAppUserGrp is endpoint for AutoUpdateAppUserGrp
func (e EndpointsAppV1Client) AutoUpdateAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	resp, err := e.AutoUpdateAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return &AppUserGrp{}, err
	}
	return resp.(*AppUserGrp), nil
}

type respAppV1AutoUpdateAppUserGrp struct {
	V   AppUserGrp
	Err error
}

// AutoWatchApp performs Watch for App
func (e EndpointsAppV1Client) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (AppV1_AutoWatchAppClient, error) {
	return e.Client.AutoWatchApp(ctx, in)
}

// AutoWatchAppUser performs Watch for AppUser
func (e EndpointsAppV1Client) AutoWatchAppUser(ctx context.Context, in *api.ListWatchOptions) (AppV1_AutoWatchAppUserClient, error) {
	return e.Client.AutoWatchAppUser(ctx, in)
}

// AutoWatchAppUserGrp performs Watch for AppUserGrp
func (e EndpointsAppV1Client) AutoWatchAppUserGrp(ctx context.Context, in *api.ListWatchOptions) (AppV1_AutoWatchAppUserGrpClient, error) {
	return e.Client.AutoWatchAppUserGrp(ctx, in)
}

// AutoAddApp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoAddApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoAddAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeAppV1AutoAddAppEndpoint creates  AutoAddApp endpoints for the service
func MakeAppV1AutoAddAppEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoAddApp(ctx, *req)
		return respAppV1AutoAddApp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoAddApp")(f)
}

// AutoAddAppUser implementation on server Endpoint
func (e EndpointsAppV1Server) AutoAddAppUser(ctx context.Context, in AppUser) (AppUser, error) {
	resp, err := e.AutoAddAppUserEndpoint(ctx, in)
	if err != nil {
		return AppUser{}, err
	}
	return *resp.(*AppUser), nil
}

// MakeAppV1AutoAddAppUserEndpoint creates  AutoAddAppUser endpoints for the service
func MakeAppV1AutoAddAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUser)
		v, err := s.AutoAddAppUser(ctx, *req)
		return respAppV1AutoAddAppUser{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoAddAppUser")(f)
}

// AutoAddAppUserGrp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoAddAppUserGrp(ctx context.Context, in AppUserGrp) (AppUserGrp, error) {
	resp, err := e.AutoAddAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return AppUserGrp{}, err
	}
	return *resp.(*AppUserGrp), nil
}

// MakeAppV1AutoAddAppUserGrpEndpoint creates  AutoAddAppUserGrp endpoints for the service
func MakeAppV1AutoAddAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUserGrp)
		v, err := s.AutoAddAppUserGrp(ctx, *req)
		return respAppV1AutoAddAppUserGrp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoAddAppUserGrp")(f)
}

// AutoDeleteApp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoDeleteApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoDeleteAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeAppV1AutoDeleteAppEndpoint creates  AutoDeleteApp endpoints for the service
func MakeAppV1AutoDeleteAppEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoDeleteApp(ctx, *req)
		return respAppV1AutoDeleteApp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoDeleteApp")(f)
}

// AutoDeleteAppUser implementation on server Endpoint
func (e EndpointsAppV1Server) AutoDeleteAppUser(ctx context.Context, in AppUser) (AppUser, error) {
	resp, err := e.AutoDeleteAppUserEndpoint(ctx, in)
	if err != nil {
		return AppUser{}, err
	}
	return *resp.(*AppUser), nil
}

// MakeAppV1AutoDeleteAppUserEndpoint creates  AutoDeleteAppUser endpoints for the service
func MakeAppV1AutoDeleteAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUser)
		v, err := s.AutoDeleteAppUser(ctx, *req)
		return respAppV1AutoDeleteAppUser{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoDeleteAppUser")(f)
}

// AutoDeleteAppUserGrp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoDeleteAppUserGrp(ctx context.Context, in AppUserGrp) (AppUserGrp, error) {
	resp, err := e.AutoDeleteAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return AppUserGrp{}, err
	}
	return *resp.(*AppUserGrp), nil
}

// MakeAppV1AutoDeleteAppUserGrpEndpoint creates  AutoDeleteAppUserGrp endpoints for the service
func MakeAppV1AutoDeleteAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUserGrp)
		v, err := s.AutoDeleteAppUserGrp(ctx, *req)
		return respAppV1AutoDeleteAppUserGrp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoDeleteAppUserGrp")(f)
}

// AutoGetApp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoGetApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoGetAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeAppV1AutoGetAppEndpoint creates  AutoGetApp endpoints for the service
func MakeAppV1AutoGetAppEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoGetApp(ctx, *req)
		return respAppV1AutoGetApp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoGetApp")(f)
}

// AutoGetAppUser implementation on server Endpoint
func (e EndpointsAppV1Server) AutoGetAppUser(ctx context.Context, in AppUser) (AppUser, error) {
	resp, err := e.AutoGetAppUserEndpoint(ctx, in)
	if err != nil {
		return AppUser{}, err
	}
	return *resp.(*AppUser), nil
}

// MakeAppV1AutoGetAppUserEndpoint creates  AutoGetAppUser endpoints for the service
func MakeAppV1AutoGetAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUser)
		v, err := s.AutoGetAppUser(ctx, *req)
		return respAppV1AutoGetAppUser{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoGetAppUser")(f)
}

// AutoGetAppUserGrp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoGetAppUserGrp(ctx context.Context, in AppUserGrp) (AppUserGrp, error) {
	resp, err := e.AutoGetAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return AppUserGrp{}, err
	}
	return *resp.(*AppUserGrp), nil
}

// MakeAppV1AutoGetAppUserGrpEndpoint creates  AutoGetAppUserGrp endpoints for the service
func MakeAppV1AutoGetAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUserGrp)
		v, err := s.AutoGetAppUserGrp(ctx, *req)
		return respAppV1AutoGetAppUserGrp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoGetAppUserGrp")(f)
}

// AutoListApp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoListApp(ctx context.Context, in api.ListWatchOptions) (AppList, error) {
	resp, err := e.AutoListAppEndpoint(ctx, in)
	if err != nil {
		return AppList{}, err
	}
	return *resp.(*AppList), nil
}

// MakeAppV1AutoListAppEndpoint creates  AutoListApp endpoints for the service
func MakeAppV1AutoListAppEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListApp(ctx, *req)
		return respAppV1AutoListApp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoListApp")(f)
}

// AutoListAppUser implementation on server Endpoint
func (e EndpointsAppV1Server) AutoListAppUser(ctx context.Context, in api.ListWatchOptions) (AppUserList, error) {
	resp, err := e.AutoListAppUserEndpoint(ctx, in)
	if err != nil {
		return AppUserList{}, err
	}
	return *resp.(*AppUserList), nil
}

// MakeAppV1AutoListAppUserEndpoint creates  AutoListAppUser endpoints for the service
func MakeAppV1AutoListAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAppUser(ctx, *req)
		return respAppV1AutoListAppUser{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoListAppUser")(f)
}

// AutoListAppUserGrp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoListAppUserGrp(ctx context.Context, in api.ListWatchOptions) (AppUserGrpList, error) {
	resp, err := e.AutoListAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return AppUserGrpList{}, err
	}
	return *resp.(*AppUserGrpList), nil
}

// MakeAppV1AutoListAppUserGrpEndpoint creates  AutoListAppUserGrp endpoints for the service
func MakeAppV1AutoListAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAppUserGrp(ctx, *req)
		return respAppV1AutoListAppUserGrp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoListAppUserGrp")(f)
}

// AutoUpdateApp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoUpdateApp(ctx context.Context, in App) (App, error) {
	resp, err := e.AutoUpdateAppEndpoint(ctx, in)
	if err != nil {
		return App{}, err
	}
	return *resp.(*App), nil
}

// MakeAppV1AutoUpdateAppEndpoint creates  AutoUpdateApp endpoints for the service
func MakeAppV1AutoUpdateAppEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*App)
		v, err := s.AutoUpdateApp(ctx, *req)
		return respAppV1AutoUpdateApp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoUpdateApp")(f)
}

// AutoUpdateAppUser implementation on server Endpoint
func (e EndpointsAppV1Server) AutoUpdateAppUser(ctx context.Context, in AppUser) (AppUser, error) {
	resp, err := e.AutoUpdateAppUserEndpoint(ctx, in)
	if err != nil {
		return AppUser{}, err
	}
	return *resp.(*AppUser), nil
}

// MakeAppV1AutoUpdateAppUserEndpoint creates  AutoUpdateAppUser endpoints for the service
func MakeAppV1AutoUpdateAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUser)
		v, err := s.AutoUpdateAppUser(ctx, *req)
		return respAppV1AutoUpdateAppUser{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoUpdateAppUser")(f)
}

// AutoUpdateAppUserGrp implementation on server Endpoint
func (e EndpointsAppV1Server) AutoUpdateAppUserGrp(ctx context.Context, in AppUserGrp) (AppUserGrp, error) {
	resp, err := e.AutoUpdateAppUserGrpEndpoint(ctx, in)
	if err != nil {
		return AppUserGrp{}, err
	}
	return *resp.(*AppUserGrp), nil
}

// MakeAppV1AutoUpdateAppUserGrpEndpoint creates  AutoUpdateAppUserGrp endpoints for the service
func MakeAppV1AutoUpdateAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AppUserGrp)
		v, err := s.AutoUpdateAppUserGrp(ctx, *req)
		return respAppV1AutoUpdateAppUserGrp{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "AppV1:AutoUpdateAppUserGrp")(f)
}

// AutoWatchApp is the watch handler for App on the server side.
func (e EndpointsAppV1Server) AutoWatchApp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppServer) error {
	return e.watchHandlerApp(in, stream)
}

// MakeAutoWatchAppEndpoint creates the Watch endpoint
func MakeAutoWatchAppEndpoint(s ServiceAppV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AppV1_AutoWatchAppServer)
		return s.AutoWatchApp(options, wstream)
	}
}

// AutoWatchAppUser is the watch handler for AppUser on the server side.
func (e EndpointsAppV1Server) AutoWatchAppUser(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserServer) error {
	return e.watchHandlerAppUser(in, stream)
}

// MakeAutoWatchAppUserEndpoint creates the Watch endpoint
func MakeAutoWatchAppUserEndpoint(s ServiceAppV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AppV1_AutoWatchAppUserServer)
		return s.AutoWatchAppUser(options, wstream)
	}
}

// AutoWatchAppUserGrp is the watch handler for AppUserGrp on the server side.
func (e EndpointsAppV1Server) AutoWatchAppUserGrp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserGrpServer) error {
	return e.watchHandlerAppUserGrp(in, stream)
}

// MakeAutoWatchAppUserGrpEndpoint creates the Watch endpoint
func MakeAutoWatchAppUserGrpEndpoint(s ServiceAppV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AppV1_AutoWatchAppUserGrpServer)
		return s.AutoWatchAppUserGrp(options, wstream)
	}
}

// MakeAppV1ServerEndpoints creates server endpoints
func MakeAppV1ServerEndpoints(s ServiceAppV1Server, logger log.Logger) EndpointsAppV1Server {
	return EndpointsAppV1Server{

		AutoAddAppEndpoint:           MakeAppV1AutoAddAppEndpoint(s, logger),
		AutoAddAppUserEndpoint:       MakeAppV1AutoAddAppUserEndpoint(s, logger),
		AutoAddAppUserGrpEndpoint:    MakeAppV1AutoAddAppUserGrpEndpoint(s, logger),
		AutoDeleteAppEndpoint:        MakeAppV1AutoDeleteAppEndpoint(s, logger),
		AutoDeleteAppUserEndpoint:    MakeAppV1AutoDeleteAppUserEndpoint(s, logger),
		AutoDeleteAppUserGrpEndpoint: MakeAppV1AutoDeleteAppUserGrpEndpoint(s, logger),
		AutoGetAppEndpoint:           MakeAppV1AutoGetAppEndpoint(s, logger),
		AutoGetAppUserEndpoint:       MakeAppV1AutoGetAppUserEndpoint(s, logger),
		AutoGetAppUserGrpEndpoint:    MakeAppV1AutoGetAppUserGrpEndpoint(s, logger),
		AutoListAppEndpoint:          MakeAppV1AutoListAppEndpoint(s, logger),
		AutoListAppUserEndpoint:      MakeAppV1AutoListAppUserEndpoint(s, logger),
		AutoListAppUserGrpEndpoint:   MakeAppV1AutoListAppUserGrpEndpoint(s, logger),
		AutoUpdateAppEndpoint:        MakeAppV1AutoUpdateAppEndpoint(s, logger),
		AutoUpdateAppUserEndpoint:    MakeAppV1AutoUpdateAppUserEndpoint(s, logger),
		AutoUpdateAppUserGrpEndpoint: MakeAppV1AutoUpdateAppUserGrpEndpoint(s, logger),

		watchHandlerApp:        MakeAutoWatchAppEndpoint(s, logger),
		watchHandlerAppUser:    MakeAutoWatchAppUserEndpoint(s, logger),
		watchHandlerAppUserGrp: MakeAutoWatchAppUserGrpEndpoint(s, logger),
	}
}

// LoggingAppV1MiddlewareClient adds middleware for the client
func LoggingAppV1MiddlewareClient(logger log.Logger) MiddlewareAppV1Client {
	return func(next ServiceAppV1Client) ServiceAppV1Client {
		return loggingAppV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAppV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceAppV1Client
}

// LoggingAppV1MiddlewareServer adds middleware for the client
func LoggingAppV1MiddlewareServer(logger log.Logger) MiddlewareAppV1Server {
	return func(next ServiceAppV1Server) ServiceAppV1Server {
		return loggingAppV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAppV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceAppV1Server
}

func (m loggingAppV1MiddlewareClient) AutoAddApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoAddAppUser(ctx context.Context, in *AppUser) (resp *AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoAddAppUserGrp(ctx context.Context, in *AppUserGrp) (resp *AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoDeleteApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoDeleteAppUser(ctx context.Context, in *AppUser) (resp *AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoDeleteAppUserGrp(ctx context.Context, in *AppUserGrp) (resp *AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoGetApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoGetAppUser(ctx context.Context, in *AppUser) (resp *AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoGetAppUserGrp(ctx context.Context, in *AppUserGrp) (resp *AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoListApp(ctx context.Context, in *api.ListWatchOptions) (resp *AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoListAppUser(ctx context.Context, in *api.ListWatchOptions) (resp *AppUserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoListAppUserGrp(ctx context.Context, in *api.ListWatchOptions) (resp *AppUserGrpList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoUpdateApp(ctx context.Context, in *App) (resp *App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoUpdateAppUser(ctx context.Context, in *AppUser) (resp *AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoUpdateAppUserGrp(ctx context.Context, in *AppUserGrp) (resp *AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAppUserGrp(ctx, in)
	return
}

func (m loggingAppV1MiddlewareClient) AutoWatchApp(ctx context.Context, in *api.ListWatchOptions) (resp AppV1_AutoWatchAppClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoWatchAppUser(ctx context.Context, in *api.ListWatchOptions) (resp AppV1_AutoWatchAppUserClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoWatchAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareClient) AutoWatchAppUserGrp(ctx context.Context, in *api.ListWatchOptions) (resp AppV1_AutoWatchAppUserGrpClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoWatchAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAppUserGrp(ctx, in)
	return
}

func (m loggingAppV1MiddlewareServer) AutoAddApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoAddAppUser(ctx context.Context, in AppUser) (resp AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoAddAppUserGrp(ctx context.Context, in AppUserGrp) (resp AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoAddAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoDeleteApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoDeleteAppUser(ctx context.Context, in AppUser) (resp AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoDeleteAppUserGrp(ctx context.Context, in AppUserGrp) (resp AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoDeleteAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoGetApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoGetAppUser(ctx context.Context, in AppUser) (resp AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoGetAppUserGrp(ctx context.Context, in AppUserGrp) (resp AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoGetAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoListApp(ctx context.Context, in api.ListWatchOptions) (resp AppList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoListAppUser(ctx context.Context, in api.ListWatchOptions) (resp AppUserList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoListAppUserGrp(ctx context.Context, in api.ListWatchOptions) (resp AppUserGrpList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoListAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAppUserGrp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoUpdateApp(ctx context.Context, in App) (resp App, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateApp(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoUpdateAppUser(ctx context.Context, in AppUser) (resp AppUser, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAppUser(ctx, in)
	return
}
func (m loggingAppV1MiddlewareServer) AutoUpdateAppUserGrp(ctx context.Context, in AppUserGrp) (resp AppUserGrp, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AppV1", "method", "AutoUpdateAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAppUserGrp(ctx, in)
	return
}

func (m loggingAppV1MiddlewareServer) AutoWatchApp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AppV1", "method", "AutoWatchApp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchApp(in, stream)
	return
}
func (m loggingAppV1MiddlewareServer) AutoWatchAppUser(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AppV1", "method", "AutoWatchAppUser", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAppUser(in, stream)
	return
}
func (m loggingAppV1MiddlewareServer) AutoWatchAppUserGrp(in *api.ListWatchOptions, stream AppV1_AutoWatchAppUserGrpServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AppV1", "method", "AutoWatchAppUserGrp", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAppUserGrp(in, stream)
	return
}
func (r *EndpointsAppV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIAppV1AutoAddAppUserCreateOper(in *AppUser) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users")
}

//
func makeURIAppV1AutoAddAppUserGrpCreateOper(in *AppUserGrp) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users-groups")
}

//
func makeURIAppV1AutoDeleteAppUserDeleteOper(in *AppUser) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users/", in.Name)
}

//
func makeURIAppV1AutoDeleteAppUserGrpDeleteOper(in *AppUserGrp) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-user-groups/", in.Name)
}

//
func makeURIAppV1AutoGetAppGetOper(in *App) string {
	return fmt.Sprint("/v1/app", "/apps/", in.Name)
}

//
func makeURIAppV1AutoGetAppUserGetOper(in *AppUser) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users/", in.Name)
}

//
func makeURIAppV1AutoGetAppUserGrpGetOper(in *AppUserGrp) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-user-groups/", in.Name)
}

//
func makeURIAppV1AutoListAppListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/app", "/apps")
}

//
func makeURIAppV1AutoListAppUserListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users")
}

//
func makeURIAppV1AutoListAppUserGrpListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users-groups")
}

//
func makeURIAppV1AutoUpdateAppUserUpdateOper(in *AppUser) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-users/", in.Name)
}

//
func makeURIAppV1AutoUpdateAppUserGrpUpdateOper(in *AppUserGrp) string {
	return fmt.Sprint("/v1/app", "/", in.Tenant, "/app-user-groups/", in.Name)
}

// AutoAddApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoAddApp(ctx context.Context, in *App) (*App, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoUpdateApp(ctx context.Context, in *App) (*App, error) {
	return nil, errors.New("not allowed")
}

// AutoGetApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoGetApp(ctx context.Context, in *App) (*App, error) {
	path := makeURIAppV1AutoGetAppGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoGetApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*App), err
}

// AutoDeleteApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoDeleteApp(ctx context.Context, in *App) (*App, error) {
	return nil, errors.New("not allowed")
}

// AutoListApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoListApp(ctx context.Context, options *api.ListWatchOptions) (*AppList, error) {
	path := makeURIAppV1AutoListAppListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoListApp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppList), err
}

// AutoWatchApp CRUD method for App
func (r *EndpointsAppV1RestClient) AutoWatchApp(ctx context.Context, in *App) (*App, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoAddAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	path := makeURIAppV1AutoAddAppUserCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoAddAppUser(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUser), nil
}

// AutoUpdateAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoUpdateAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	path := makeURIAppV1AutoUpdateAppUserUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoUpdateAppUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUser), err
}

// AutoGetAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoGetAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	path := makeURIAppV1AutoGetAppUserGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoGetAppUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUser), err
}

// AutoDeleteAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoDeleteAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	path := makeURIAppV1AutoDeleteAppUserDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoDeleteAppUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUser), err
}

// AutoListAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoListAppUser(ctx context.Context, options *api.ListWatchOptions) (*AppUserList, error) {
	path := makeURIAppV1AutoListAppUserListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoListAppUser(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserList), err
}

// AutoWatchAppUser CRUD method for AppUser
func (r *EndpointsAppV1RestClient) AutoWatchAppUser(ctx context.Context, in *AppUser) (*AppUser, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoAddAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	path := makeURIAppV1AutoAddAppUserGrpCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoAddAppUserGrp(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserGrp), nil
}

// AutoUpdateAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoUpdateAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	path := makeURIAppV1AutoUpdateAppUserGrpUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoUpdateAppUserGrp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserGrp), err
}

// AutoGetAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoGetAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	path := makeURIAppV1AutoGetAppUserGrpGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoGetAppUserGrp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserGrp), err
}

// AutoDeleteAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoDeleteAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	path := makeURIAppV1AutoDeleteAppUserGrpDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoDeleteAppUserGrp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserGrp), err
}

// AutoListAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoListAppUserGrp(ctx context.Context, options *api.ListWatchOptions) (*AppUserGrpList, error) {
	path := makeURIAppV1AutoListAppUserGrpListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAppV1AutoListAppUserGrp(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AppUserGrpList), err
}

// AutoWatchAppUserGrp CRUD method for AppUserGrp
func (r *EndpointsAppV1RestClient) AutoWatchAppUserGrp(ctx context.Context, in *AppUserGrp) (*AppUserGrp, error) {
	return nil, errors.New("not allowed")
}

// MakeAppV1RestClientEndpoints make REST client endpoints
func MakeAppV1RestClientEndpoints(instance string) (EndpointsAppV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAppV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
