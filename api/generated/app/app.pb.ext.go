// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package app is a auto generated package.
Input file: protos/app.proto
*/
package app

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MakeKey generates a KV store key for the object
func (m *App) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "apps/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AppUser) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "app-users/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AppUserGrp) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "app-users-groups/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AppList) MakeKey(prefix string) string {
	obj := App{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AppUserGrpList) MakeKey(prefix string) string {
	obj := AppUserGrp{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AppUserList) MakeKey(prefix string) string {
	obj := AppUser{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAppUserGrpWatchHelper) MakeKey(prefix string) string {
	obj := AppUserGrp{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAppUserWatchHelper) MakeKey(prefix string) string {
	obj := AppUser{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAppWatchHelper) MakeKey(prefix string) string {
	obj := App{}
	return obj.MakeKey(prefix)
}

func (m *App) Clone(into interface{}) error {
	out, ok := into.(*App)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppList) Clone(into interface{}) error {
	out, ok := into.(*AppList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppSpec) Clone(into interface{}) error {
	out, ok := into.(*AppSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppStatus) Clone(into interface{}) error {
	out, ok := into.(*AppStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUser) Clone(into interface{}) error {
	out, ok := into.(*AppUser)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserGrp) Clone(into interface{}) error {
	out, ok := into.(*AppUserGrp)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserGrpList) Clone(into interface{}) error {
	out, ok := into.(*AppUserGrpList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserGrpSpec) Clone(into interface{}) error {
	out, ok := into.(*AppUserGrpSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserGrpStatus) Clone(into interface{}) error {
	out, ok := into.(*AppUserGrpStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserList) Clone(into interface{}) error {
	out, ok := into.(*AppUserList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserSpec) Clone(into interface{}) error {
	out, ok := into.(*AppUserSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AppUserStatus) Clone(into interface{}) error {
	out, ok := into.(*AppUserStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgAppUserGrpWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgAppUserGrpWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgAppUserWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgAppUserWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgAppWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgAppWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *App) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUser) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserGrp) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserGrpList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserGrpSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserGrpStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AppUserStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgAppUserGrpWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgAppUserWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgAppWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}
