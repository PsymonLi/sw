// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

/*
	Package telemetry is a generated protocol buffer package.

	Service name

	It is generated from these files:
		telemetry.proto

	It has these top-level messages:
		AutoMsgMonitoringPolicyWatchHelper
		MonitoringPolicy
		MonitoringPolicyList
		MonitoringPolicySpec
		MonitoringPolicyStatus
*/
package telemetry

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MonitoringPolicySpec_Areas int32

const (
	MonitoringPolicySpec_FwLogs      MonitoringPolicySpec_Areas = 0
	MonitoringPolicySpec_FlowData    MonitoringPolicySpec_Areas = 1
	MonitoringPolicySpec_ObjectStats MonitoringPolicySpec_Areas = 2
)

var MonitoringPolicySpec_Areas_name = map[int32]string{
	0: "FwLogs",
	1: "FlowData",
	2: "ObjectStats",
}
var MonitoringPolicySpec_Areas_value = map[string]int32{
	"FwLogs":      0,
	"FlowData":    1,
	"ObjectStats": 2,
}

func (x MonitoringPolicySpec_Areas) String() string {
	return proto.EnumName(MonitoringPolicySpec_Areas_name, int32(x))
}
func (MonitoringPolicySpec_Areas) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{3, 0}
}

type AutoMsgMonitoringPolicyWatchHelper struct {
	// Area describes an area for which the monitoring policy is specified
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// object selector for the service (list of object kind/namespace/instance to match)
	// TBD: this would need to be replaced by a generic definition of an object selector
	Object *MonitoringPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgMonitoringPolicyWatchHelper) Reset()         { *m = AutoMsgMonitoringPolicyWatchHelper{} }
func (m *AutoMsgMonitoringPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgMonitoringPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgMonitoringPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{0}
}

func (m *AutoMsgMonitoringPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgMonitoringPolicyWatchHelper) GetObject() *MonitoringPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type MonitoringPolicy struct {
	// list of workloads to be monitored for the policy
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           MonitoringPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         MonitoringPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *MonitoringPolicy) Reset()                    { *m = MonitoringPolicy{} }
func (m *MonitoringPolicy) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicy) ProtoMessage()               {}
func (*MonitoringPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{1} }

func (m *MonitoringPolicy) GetSpec() MonitoringPolicySpec {
	if m != nil {
		return m.Spec
	}
	return MonitoringPolicySpec{}
}

func (m *MonitoringPolicy) GetStatus() MonitoringPolicyStatus {
	if m != nil {
		return m.Status
	}
	return MonitoringPolicyStatus{}
}

type MonitoringPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the monitoring policy.
	Items []*MonitoringPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *MonitoringPolicyList) Reset()                    { *m = MonitoringPolicyList{} }
func (m *MonitoringPolicyList) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicyList) ProtoMessage()               {}
func (*MonitoringPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{2} }

func (m *MonitoringPolicyList) GetItems() []*MonitoringPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type MonitoringPolicySpec struct {
	Area             []string          `protobuf:"bytes,1,rep,name=Area" json:"Area,omitempty"`
	ObjectSelector   map[string]string `protobuf:"bytes,2,rep,name=ObjectSelector" json:"object-selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CollectionPolicy string            `protobuf:"bytes,3,opt,name=CollectionPolicy,proto3" json:"collection-policy,omitempty"`
	RetentionPolicy  string            `protobuf:"bytes,4,opt,name=RetentionPolicy,proto3" json:"retention-policy,omitempty"`
	ExportPolicies   []string          `protobuf:"bytes,5,rep,name=ExportPolicies" json:"export-policy,omitempty"`
}

func (m *MonitoringPolicySpec) Reset()                    { *m = MonitoringPolicySpec{} }
func (m *MonitoringPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicySpec) ProtoMessage()               {}
func (*MonitoringPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{3} }

func (m *MonitoringPolicySpec) GetArea() []string {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *MonitoringPolicySpec) GetObjectSelector() map[string]string {
	if m != nil {
		return m.ObjectSelector
	}
	return nil
}

func (m *MonitoringPolicySpec) GetCollectionPolicy() string {
	if m != nil {
		return m.CollectionPolicy
	}
	return ""
}

func (m *MonitoringPolicySpec) GetRetentionPolicy() string {
	if m != nil {
		return m.RetentionPolicy
	}
	return ""
}

func (m *MonitoringPolicySpec) GetExportPolicies() []string {
	if m != nil {
		return m.ExportPolicies
	}
	return nil
}

type MonitoringPolicyStatus struct {
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
}

func (m *MonitoringPolicyStatus) Reset()                    { *m = MonitoringPolicyStatus{} }
func (m *MonitoringPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicyStatus) ProtoMessage()               {}
func (*MonitoringPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *MonitoringPolicyStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgMonitoringPolicyWatchHelper)(nil), "telemetry.AutoMsgMonitoringPolicyWatchHelper")
	proto.RegisterType((*MonitoringPolicy)(nil), "telemetry.MonitoringPolicy")
	proto.RegisterType((*MonitoringPolicyList)(nil), "telemetry.MonitoringPolicyList")
	proto.RegisterType((*MonitoringPolicySpec)(nil), "telemetry.MonitoringPolicySpec")
	proto.RegisterType((*MonitoringPolicyStatus)(nil), "telemetry.MonitoringPolicyStatus")
	proto.RegisterEnum("telemetry.MonitoringPolicySpec_Areas", MonitoringPolicySpec_Areas_name, MonitoringPolicySpec_Areas_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MonitoringPolicyV1 service

type MonitoringPolicyV1Client interface {
	AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MonitoringPolicyList, error)
	AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error)
}

type monitoringPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewMonitoringPolicyV1Client(cc *grpc.ClientConn) MonitoringPolicyV1Client {
	return &monitoringPolicyV1Client{cc}
}

func (c *monitoringPolicyV1Client) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoAddMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoDeleteMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoGetMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MonitoringPolicyList, error) {
	out := new(MonitoringPolicyList)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoListMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoUpdateMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringPolicyV1_serviceDesc.Streams[0], c.cc, "/telemetry.MonitoringPolicyV1/AutoWatchMonitoringPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringPolicyV1AutoWatchMonitoringPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringPolicyV1_AutoWatchMonitoringPolicyClient interface {
	Recv() (*AutoMsgMonitoringPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringPolicyV1AutoWatchMonitoringPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringPolicyV1AutoWatchMonitoringPolicyClient) Recv() (*AutoMsgMonitoringPolicyWatchHelper, error) {
	m := new(AutoMsgMonitoringPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MonitoringPolicyV1 service

type MonitoringPolicyV1Server interface {
	AutoAddMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoDeleteMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoGetMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoListMonitoringPolicy(context.Context, *api.ListWatchOptions) (*MonitoringPolicyList, error)
	AutoUpdateMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoWatchMonitoringPolicy(*api.ListWatchOptions, MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error
}

func RegisterMonitoringPolicyV1Server(s *grpc.Server, srv MonitoringPolicyV1Server) {
	s.RegisterService(&_MonitoringPolicyV1_serviceDesc, srv)
}

func _MonitoringPolicyV1_AutoAddMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoAddMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoAddMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoAddMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoDeleteMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoDeleteMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoDeleteMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoDeleteMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoGetMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoGetMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoGetMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoGetMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoListMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoListMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoListMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoListMonitoringPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoUpdateMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoUpdateMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoUpdateMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoUpdateMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoWatchMonitoringPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringPolicyV1Server).AutoWatchMonitoringPolicy(m, &monitoringPolicyV1AutoWatchMonitoringPolicyServer{stream})
}

type MonitoringPolicyV1_AutoWatchMonitoringPolicyServer interface {
	Send(*AutoMsgMonitoringPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringPolicyV1AutoWatchMonitoringPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringPolicyV1AutoWatchMonitoringPolicyServer) Send(m *AutoMsgMonitoringPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitoringPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.MonitoringPolicyV1",
	HandlerType: (*MonitoringPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoAddMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoDeleteMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoGetMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoGetMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoListMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoListMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoUpdateMonitoringPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchMonitoringPolicy",
			Handler:       _MonitoringPolicyV1_AutoWatchMonitoringPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}

func (m *AutoMsgMonitoringPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMonitoringPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MonitoringPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *MonitoringPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MonitoringPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Area) > 0 {
		for _, s := range m.Area {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ObjectSelector) > 0 {
		for k := range m.ObjectSelector {
			dAtA[i] = 0x12
			i++
			v := m.ObjectSelector[k]
			mapSize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			i = encodeVarintTelemetry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.CollectionPolicy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CollectionPolicy)))
		i += copy(dAtA[i:], m.CollectionPolicy)
	}
	if len(m.RetentionPolicy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionPolicy)))
		i += copy(dAtA[i:], m.RetentionPolicy)
	}
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MonitoringPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Telemetry(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Telemetry(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgMonitoringPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *MonitoringPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *MonitoringPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *MonitoringPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Area) > 0 {
		for _, s := range m.Area {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.ObjectSelector) > 0 {
		for k, v := range m.ObjectSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			n += mapEntrySize + 1 + sovTelemetry(uint64(mapEntrySize))
		}
	}
	l = len(m.CollectionPolicy)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.RetentionPolicy)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *MonitoringPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgMonitoringPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgMonitoringPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgMonitoringPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &MonitoringPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MonitoringPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = append(m.Area, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTelemetry
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.ObjectSelector == nil {
				m.ObjectSelector = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTelemetry
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.ObjectSelector[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.ObjectSelector[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportPolicies = append(m.ExportPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 1005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0xb6, 0xe3, 0xc6, 0x93, 0x34, 0xb6, 0x26, 0xa6, 0xb1, 0x37, 0x25, 0x1b, 0xb6,
	0xaa, 0x48, 0xd3, 0xc4, 0xdb, 0xa6, 0xe2, 0x97, 0x41, 0x82, 0xb8, 0x4d, 0x29, 0x4a, 0x83, 0x2b,
	0x3b, 0xd0, 0x2b, 0x93, 0xf5, 0x63, 0xb3, 0x74, 0xbd, 0xb3, 0xda, 0x9d, 0x8d, 0x31, 0xa8, 0x17,
	0x0c, 0x9c, 0xb8, 0x00, 0x91, 0x40, 0xdc, 0xe8, 0x31, 0x47, 0x2e, 0xfd, 0x17, 0x7a, 0xac, 0xe0,
	0x82, 0x7a, 0xb0, 0x50, 0xc4, 0xc9, 0x7f, 0x03, 0x07, 0x34, 0xe3, 0x75, 0xb2, 0xac, 0x8d, 0x93,
	0x43, 0x6e, 0x9e, 0x79, 0xef, 0x7d, 0xe6, 0xfb, 0xde, 0x9b, 0x9d, 0x67, 0x9c, 0xe5, 0x60, 0x43,
	0x13, 0xb8, 0xd7, 0x2e, 0xb9, 0x1e, 0xe3, 0x8c, 0x64, 0x8e, 0x37, 0x94, 0xcb, 0x26, 0x63, 0xa6,
	0x0d, 0x3a, 0x75, 0x2d, 0x9d, 0x3a, 0x0e, 0xe3, 0x94, 0x5b, 0xcc, 0xf1, 0xfb, 0x8e, 0xca, 0xa6,
	0x69, 0xf1, 0xbd, 0x60, 0xb7, 0x64, 0xb0, 0xa6, 0xee, 0x82, 0xe3, 0x53, 0xa7, 0xc1, 0x74, 0xbf,
	0xa5, 0xef, 0x83, 0x63, 0x19, 0xa0, 0x07, 0xdc, 0xb2, 0x7d, 0x11, 0x6a, 0x82, 0x13, 0x8d, 0xd6,
	0x2d, 0xc7, 0xb0, 0x83, 0x06, 0x0c, 0x30, 0x6b, 0x11, 0x8c, 0xc9, 0x4c, 0xa6, 0xcb, 0xed, 0xdd,
	0xe0, 0x53, 0xb9, 0x92, 0x0b, 0xf9, 0x2b, 0x74, 0xbf, 0xfa, 0x3f, 0xa7, 0x0a, 0x8d, 0x4d, 0xe0,
	0xb4, 0xef, 0xa6, 0xb9, 0x58, 0xdb, 0x08, 0x38, 0xdb, 0xf6, 0xcd, 0x6d, 0xe6, 0x58, 0x9c, 0x79,
	0x96, 0x63, 0x3e, 0x60, 0xb6, 0x65, 0xb4, 0x1f, 0x52, 0x6e, 0xec, 0xdd, 0x03, 0xdb, 0x05, 0x8f,
	0xcc, 0xe0, 0xd4, 0x4e, 0xdb, 0x85, 0x02, 0x5a, 0x42, 0xcb, 0x19, 0x72, 0x1d, 0xa7, 0xab, 0xbb,
	0x9f, 0x81, 0xc1, 0x0b, 0x89, 0x25, 0xb4, 0x3c, 0xbd, 0xbe, 0x50, 0x3a, 0xa9, 0x4d, 0x9c, 0x52,
	0xce, 0xbe, 0x38, 0xc8, 0x4f, 0xb7, 0x04, 0x6b, 0x4f, 0xb2, 0xb4, 0xa7, 0x09, 0x9c, 0x8b, 0x7b,
	0x91, 0x1b, 0x18, 0xed, 0x48, 0xfa, 0xf4, 0xfa, 0xc5, 0x12, 0x75, 0xad, 0x92, 0x38, 0x6e, 0x1b,
	0x38, 0xad, 0xcc, 0x3d, 0xeb, 0xaa, 0x13, 0xcf, 0xbb, 0x2a, 0xea, 0x75, 0xd5, 0x0b, 0xab, 0x96,
	0x63, 0x5b, 0x0e, 0xd4, 0xd0, 0x0e, 0x79, 0x0b, 0xa3, 0x6a, 0x78, 0x7e, 0x56, 0x46, 0xf4, 0x25,
	0xc9, 0x18, 0x25, 0x12, 0x33, 0x2b, 0x92, 0x5d, 0x65, 0x4d, 0x8b, 0x43, 0xd3, 0xe5, 0xed, 0x1a,
	0xaa, 0x92, 0x2d, 0x9c, 0xaa, 0xbb, 0x60, 0x14, 0x92, 0x32, 0x5a, 0x1d, 0xa3, 0x5e, 0xb8, 0x55,
	0x2e, 0x09, 0x9a, 0x20, 0xf9, 0x2e, 0x18, 0x11, 0x92, 0x84, 0x90, 0x3a, 0x4e, 0xd7, 0x39, 0xe5,
	0x81, 0x5f, 0x48, 0x49, 0xdc, 0x2b, 0xe3, 0x70, 0xd2, 0xb1, 0x52, 0x08, 0x81, 0x39, 0x5f, 0xae,
	0x23, 0xc8, 0x10, 0x55, 0xce, 0xff, 0xfe, 0x4d, 0x31, 0xd7, 0x8c, 0x45, 0x6b, 0xbf, 0x22, 0x9c,
	0x8f, 0x23, 0xef, 0x5b, 0x3e, 0x27, 0x9a, 0xa8, 0x5e, 0x62, 0x54, 0xf5, 0xa6, 0x06, 0x95, 0x20,
	0xd7, 0xf0, 0x94, 0xf0, 0x15, 0xbb, 0x61, 0xe2, 0x7d, 0xd7, 0xc1, 0x66, 0xc4, 0x75, 0x05, 0x4f,
	0x7e, 0xc0, 0xa1, 0x29, 0x32, 0x4a, 0x9e, 0xd6, 0xde, 0xd9, 0x17, 0x07, 0x79, 0x6c, 0x5b, 0x3e,
	0x0f, 0xbb, 0xfb, 0x24, 0x35, 0xac, 0x51, 0xd6, 0xe9, 0x6d, 0x9c, 0xda, 0xf0, 0x80, 0x16, 0xd0,
	0x52, 0x72, 0x39, 0x53, 0x79, 0xf5, 0xf0, 0xdb, 0xe2, 0x95, 0x3a, 0xf7, 0x36, 0x9d, 0xa0, 0xb9,
	0x3c, 0xca, 0xbf, 0x24, 0x9c, 0xfd, 0x6b, 0x35, 0x19, 0x44, 0xbe, 0xc0, 0xb3, 0xfd, 0xf6, 0xd6,
	0xc1, 0x06, 0x83, 0x33, 0xaf, 0x90, 0x90, 0xd2, 0x6e, 0x9d, 0xd2, 0xbb, 0xd2, 0x7f, 0xa3, 0x36,
	0x1d, 0xee, 0xb5, 0x2b, 0x2f, 0xf7, 0xba, 0x6a, 0x91, 0x49, 0xc3, 0x9a, 0x1f, 0x5a, 0x22, 0x3d,
	0x88, 0x9d, 0x44, 0xb6, 0x70, 0xee, 0x36, 0xb3, 0xc5, 0xc2, 0x62, 0x4e, 0x1f, 0x2d, 0x0b, 0x98,
	0xa9, 0xa8, 0xbd, 0xae, 0xba, 0x60, 0x1c, 0xdb, 0xd6, 0x5c, 0x69, 0x8c, 0xa0, 0x86, 0x02, 0xc9,
	0x3d, 0x9c, 0xad, 0x01, 0x07, 0x27, 0xc2, 0x4a, 0x49, 0xd6, 0x62, 0xaf, 0xab, 0x2a, 0xde, 0xc0,
	0x34, 0x8c, 0x8a, 0x87, 0x91, 0xdb, 0x78, 0x76, 0xf3, 0x73, 0x97, 0x79, 0x5c, 0xae, 0x2d, 0xf0,
	0x0b, 0x93, 0xb2, 0xb2, 0x0b, 0xbd, 0xae, 0x3a, 0x0f, 0xd2, 0x32, 0x4c, 0x89, 0x85, 0x28, 0x1b,
	0x78, 0x6e, 0x44, 0x85, 0x48, 0x0e, 0x27, 0x1f, 0x41, 0xbb, 0xff, 0xb5, 0xd7, 0xc4, 0x4f, 0x92,
	0xc7, 0x93, 0xfb, 0xd4, 0x0e, 0x40, 0xde, 0xb2, 0x4c, 0xad, 0xbf, 0x28, 0x27, 0xde, 0x44, 0xda,
	0x3a, 0x9e, 0x94, 0xad, 0x22, 0x18, 0xa7, 0xef, 0xb6, 0xee, 0x33, 0xd3, 0xcf, 0x4d, 0x90, 0x19,
	0x3c, 0x75, 0xd7, 0x66, 0xad, 0x3b, 0x94, 0xd3, 0x1c, 0x22, 0x59, 0x3c, 0x1d, 0x9e, 0xc2, 0x29,
	0xf7, 0x73, 0x09, 0xad, 0x8a, 0x2f, 0x8d, 0xfe, 0x34, 0xc8, 0x6b, 0x38, 0xf3, 0x90, 0x79, 0x8f,
	0x6c, 0x46, 0x1b, 0x7e, 0x78, 0x55, 0xe6, 0x7b, 0x5d, 0x75, 0xae, 0x35, 0xd8, 0x8c, 0x24, 0x73,
	0xe2, 0xb9, 0xfe, 0xcf, 0x05, 0x4c, 0xe2, 0xc4, 0x8f, 0x6f, 0x92, 0xef, 0x10, 0x9e, 0x17, 0xaf,
	0xdb, 0x46, 0xa3, 0x31, 0xf4, 0xe2, 0x8c, 0xbb, 0xd5, 0xca, 0x38, 0xa3, 0xf6, 0xc6, 0x9f, 0x07,
	0x79, 0xf4, 0xdb, 0xd7, 0xc5, 0xb4, 0xe1, 0x01, 0xe5, 0xf0, 0xd5, 0x1f, 0x7f, 0xff, 0x98, 0xb8,
	0x82, 0x27, 0xca, 0x68, 0x45, 0xbb, 0xac, 0x7f, 0x59, 0x2d, 0xed, 0x80, 0x43, 0x1d, 0xfe, 0x58,
	0x8f, 0x7f, 0xbf, 0xe4, 0x27, 0x84, 0x15, 0x21, 0xe7, 0x0e, 0xd8, 0xc0, 0xe1, 0x1c, 0x15, 0xbd,
	0x3b, 0x50, 0xd4, 0x90, 0x64, 0xa9, 0xe8, 0x3a, 0x9e, 0x28, 0x4f, 0xac, 0x5c, 0x1d, 0x27, 0x48,
	0xd8, 0x3e, 0xa4, 0x4d, 0x78, 0x4c, 0xbe, 0x0f, 0x0b, 0xf5, 0x3e, 0xf0, 0x73, 0x94, 0xf5, 0x4e,
	0x28, 0x2b, 0x69, 0x02, 0x3f, 0xd1, 0x44, 0xce, 0xa8, 0xe9, 0x13, 0x5c, 0x10, 0x92, 0xe4, 0xfb,
	0x14, 0xd7, 0xf4, 0xd2, 0xf1, 0xd3, 0x25, 0xa7, 0x54, 0xd5, 0x95, 0x13, 0x53, 0x19, 0xf7, 0x94,
	0x0b, 0x67, 0x6d, 0x26, 0x54, 0x94, 0x12, 0x2f, 0x16, 0xf9, 0x39, 0xec, 0xc7, 0x47, 0x6e, 0x83,
	0x9e, 0x6b, 0x3f, 0xde, 0x1b, 0xf4, 0x23, 0x90, 0x64, 0x99, 0xfb, 0xaa, 0xbc, 0x21, 0xca, 0x19,
	0x93, 0xf7, 0x70, 0x51, 0x28, 0x93, 0xd9, 0x9d, 0x35, 0xfb, 0xb5, 0x88, 0xa4, 0xd3, 0x67, 0xba,
	0x76, 0x31, 0x14, 0x39, 0x29, 0x87, 0xf3, 0x0d, 0xa4, 0x3c, 0x45, 0x3f, 0x74, 0x8a, 0x89, 0xfd,
	0x9b, 0xbf, 0x74, 0x86, 0x67, 0xcf, 0x93, 0x4e, 0x71, 0x68, 0x68, 0x1f, 0x76, 0x8a, 0x5b, 0x23,
	0x46, 0xb9, 0xe8, 0x36, 0x49, 0xba, 0x01, 0x27, 0xe1, 0x75, 0x3c, 0x63, 0xce, 0x87, 0x9d, 0xe2,
	0xeb, 0x23, 0x70, 0x29, 0x97, 0xf9, 0x5c, 0x19, 0xfb, 0x61, 0x55, 0x66, 0x9e, 0x1d, 0x2d, 0xa2,
	0xe7, 0x47, 0x8b, 0xe8, 0xaf, 0xa3, 0x45, 0xf4, 0x00, 0xed, 0xa6, 0xe5, 0x7f, 0x9b, 0x5b, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xad, 0x0d, 0xa1, 0xb4, 0x09, 0x00, 0x00,
}
