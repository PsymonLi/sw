// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

/*
	Package telemetry is a generated protocol buffer package.

	Service name

	It is generated from these files:
		telemetry.proto

	It has these top-level messages:
		AutoMsgCollectionPolicyWatchHelper
		AutoMsgExportPolicyWatchHelper
		AutoMsgMonitoringPolicyWatchHelper
		AutoMsgRetentionPolicyWatchHelper
		CollectionPolicy
		CollectionPolicyList
		CollectionPolicySpec
		CollectionPolicyStatus
		CollectionTrigger
		ExportPolicy
		ExportPolicyList
		ExportPolicySpec
		ExportPolicyStatus
		ExternalCred
		MonitoringPolicy
		MonitoringPolicyList
		MonitoringPolicySpec
		MonitoringPolicyStatus
		RetentionPolicy
		RetentionPolicyList
		RetentionPolicySpec
		RetentionPolicyStatus
*/
package telemetry

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ExportPolicySpec_Formats int32

const (
	ExportPolicySpec_Netflow ExportPolicySpec_Formats = 0
	ExportPolicySpec_Kafka   ExportPolicySpec_Formats = 1
)

var ExportPolicySpec_Formats_name = map[int32]string{
	0: "Netflow",
	1: "Kafka",
}
var ExportPolicySpec_Formats_value = map[string]int32{
	"Netflow": 0,
	"Kafka":   1,
}

func (x ExportPolicySpec_Formats) String() string {
	return proto.EnumName(ExportPolicySpec_Formats_name, int32(x))
}
func (ExportPolicySpec_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{11, 0}
}

type MonitoringPolicySpec_Areas int32

const (
	MonitoringPolicySpec_FwLogs      MonitoringPolicySpec_Areas = 0
	MonitoringPolicySpec_FlowData    MonitoringPolicySpec_Areas = 1
	MonitoringPolicySpec_ObjectStats MonitoringPolicySpec_Areas = 2
)

var MonitoringPolicySpec_Areas_name = map[int32]string{
	0: "FwLogs",
	1: "FlowData",
	2: "ObjectStats",
}
var MonitoringPolicySpec_Areas_value = map[string]int32{
	"FwLogs":      0,
	"FlowData":    1,
	"ObjectStats": 2,
}

func (x MonitoringPolicySpec_Areas) String() string {
	return proto.EnumName(MonitoringPolicySpec_Areas_name, int32(x))
}
func (MonitoringPolicySpec_Areas) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{16, 0}
}

type AutoMsgCollectionPolicyWatchHelper struct {
	// Area describes an area for which the monitoring policy is specified
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// object selector for the service (list of object kind/namespace/instance to match)
	// TBD: this would need to be replaced by a generic definition of an object selector
	Object *CollectionPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgCollectionPolicyWatchHelper) Reset()         { *m = AutoMsgCollectionPolicyWatchHelper{} }
func (m *AutoMsgCollectionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgCollectionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgCollectionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{0}
}

func (m *AutoMsgCollectionPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgCollectionPolicyWatchHelper) GetObject() *CollectionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgExportPolicyWatchHelper struct {
	// list of workloads to be monitored for the policy
	Type   string        `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *ExportPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgExportPolicyWatchHelper) Reset()         { *m = AutoMsgExportPolicyWatchHelper{} }
func (m *AutoMsgExportPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgExportPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgExportPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{1}
}

func (m *AutoMsgExportPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgExportPolicyWatchHelper) GetObject() *ExportPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgMonitoringPolicyWatchHelper struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *MonitoringPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgMonitoringPolicyWatchHelper) Reset()         { *m = AutoMsgMonitoringPolicyWatchHelper{} }
func (m *AutoMsgMonitoringPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgMonitoringPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgMonitoringPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{2}
}

func (m *AutoMsgMonitoringPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgMonitoringPolicyWatchHelper) GetObject() *MonitoringPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type AutoMsgRetentionPolicyWatchHelper struct {
	// Compaction Interval is the time in minutes, hours or days before compaction starts on the data
	// Compaction results into data granularity loss, therefore this period is kept to be as high as space permits
	// for how much data is being collected
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Compaction Method specifies the method to be used for aggregation i.e. 'linear', 'exponential'
	// When compaction method is is unspecified system defaults to exponential aggregation over the period of time
	Object *RetentionPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgRetentionPolicyWatchHelper) Reset()         { *m = AutoMsgRetentionPolicyWatchHelper{} }
func (m *AutoMsgRetentionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRetentionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgRetentionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{3}
}

func (m *AutoMsgRetentionPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRetentionPolicyWatchHelper) GetObject() *RetentionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type CollectionPolicy struct {
	// list of monitoring policies that refer to this collection policy
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           CollectionPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         CollectionPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *CollectionPolicy) Reset()                    { *m = CollectionPolicy{} }
func (m *CollectionPolicy) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicy) ProtoMessage()               {}
func (*CollectionPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *CollectionPolicy) GetSpec() CollectionPolicySpec {
	if m != nil {
		return m.Spec
	}
	return CollectionPolicySpec{}
}

func (m *CollectionPolicy) GetStatus() CollectionPolicyStatus {
	if m != nil {
		return m.Status
	}
	return CollectionPolicyStatus{}
}

type CollectionPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the retention policy.
	Items []*CollectionPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *CollectionPolicyList) Reset()                    { *m = CollectionPolicyList{} }
func (m *CollectionPolicyList) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicyList) ProtoMessage()               {}
func (*CollectionPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{5} }

func (m *CollectionPolicyList) GetItems() []*CollectionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// ------------------------ ExternalCred Object ----------------------------
// ExternalCred defines credentails required to access an external entity, such as
// a stats collector, compute orchestration entity, or a syslog server.
// External entity may support a variety of methods, like username/password,
// TLS Client authentication, or Bearer Token based authentication. User is
// expected to configure one of the methods
type CollectionPolicySpec struct {
	// UserName is the login id to be used towards the external entity
	Attributes []string `protobuf:"bytes,1,rep,name=Attributes" json:"attributes,omitempty"`
	// Password is one time specified, not visibile on read operations
	// Only valid when UserName is defined
	// TBD: need to add (venice.secret) = "true" support for this
	Triggers []CollectionTrigger `protobuf:"bytes,3,rep,name=Triggers" json:"triggers,omitempty"`
}

func (m *CollectionPolicySpec) Reset()                    { *m = CollectionPolicySpec{} }
func (m *CollectionPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicySpec) ProtoMessage()               {}
func (*CollectionPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{6} }

func (m *CollectionPolicySpec) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CollectionPolicySpec) GetTriggers() []CollectionTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type CollectionPolicyStatus struct {
	// Export Interval defines how often to push the records to an external or internal collector
	// The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
}

func (m *CollectionPolicyStatus) Reset()                    { *m = CollectionPolicyStatus{} }
func (m *CollectionPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*CollectionPolicyStatus) ProtoMessage()               {}
func (*CollectionPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{7} }

func (m *CollectionPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

type CollectionTrigger struct {
	// list of monitoring policies that refer to this collection policy
	ConditionalTrigger map[string]string `protobuf:"bytes,1,rep,name=ConditionalTrigger" json:"conditional-trigger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeTrigger        string            `protobuf:"bytes,2,opt,name=TimeTrigger,proto3" json:"time-trigger,omitempty"`
}

func (m *CollectionTrigger) Reset()                    { *m = CollectionTrigger{} }
func (m *CollectionTrigger) String() string            { return proto.CompactTextString(m) }
func (*CollectionTrigger) ProtoMessage()               {}
func (*CollectionTrigger) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{8} }

func (m *CollectionTrigger) GetConditionalTrigger() map[string]string {
	if m != nil {
		return m.ConditionalTrigger
	}
	return nil
}

func (m *CollectionTrigger) GetTimeTrigger() string {
	if m != nil {
		return m.TimeTrigger
	}
	return ""
}

type ExportPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of the export policy.
	Spec ExportPolicySpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the export policy.
	Status ExportPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *ExportPolicy) Reset()                    { *m = ExportPolicy{} }
func (m *ExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicy) ProtoMessage()               {}
func (*ExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{9} }

func (m *ExportPolicy) GetSpec() ExportPolicySpec {
	if m != nil {
		return m.Spec
	}
	return ExportPolicySpec{}
}

func (m *ExportPolicy) GetStatus() ExportPolicyStatus {
	if m != nil {
		return m.Status
	}
	return ExportPolicyStatus{}
}

// Specifies start or stop triggers for collecting data
type ExportPolicyList struct {
	// ConditionalTrigger allows start data collection when count exceeds
	// If the trigger is not met, the collection is discarded
	// It is a map of attribute (string name of the field) to a condition "> 2000" or "== true", etc.
	// dependng on the type of the field
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	// TimeTrigger specifies the time when data should be collected, text strings as
	// "7pm", "8am-12am", etc. format TBD
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*ExportPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *ExportPolicyList) Reset()                    { *m = ExportPolicyList{} }
func (m *ExportPolicyList) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicyList) ProtoMessage()               {}
func (*ExportPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{10} }

func (m *ExportPolicyList) GetItems() []*ExportPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type ExportPolicySpec struct {
	// Attributes are a set of field names that needs to be collected
	// User is expected to define a set of parameters to be collected as templates that
	// are attached to specific workloads, etc. e.g. user may want to collect smaller set
	// of parameters on normal basis except for certain critical traffic
	ExportInterval string `protobuf:"bytes,1,opt,name=ExportInterval,proto3" json:"export-interval,omitempty"`
	// Collection Trigger specifies start or stop triggers for data collection
	Format             string        `protobuf:"bytes,2,opt,name=Format,proto3" json:"format,omitempty"`
	CollectorIpAddress string        `protobuf:"bytes,3,opt,name=CollectorIpAddress,proto3" json:"collector-ip-address,omitempty"`
	CollectorPort      string        `protobuf:"bytes,4,opt,name=CollectorPort,proto3" json:"collector-port,omitempty"`
	Credentials        *ExternalCred `protobuf:"bytes,5,opt,name=Credentials" json:"credentials,omitempty"`
}

func (m *ExportPolicySpec) Reset()                    { *m = ExportPolicySpec{} }
func (m *ExportPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicySpec) ProtoMessage()               {}
func (*ExportPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{11} }

func (m *ExportPolicySpec) GetExportInterval() string {
	if m != nil {
		return m.ExportInterval
	}
	return ""
}

func (m *ExportPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ExportPolicySpec) GetCollectorIpAddress() string {
	if m != nil {
		return m.CollectorIpAddress
	}
	return ""
}

func (m *ExportPolicySpec) GetCollectorPort() string {
	if m != nil {
		return m.CollectorPort
	}
	return ""
}

func (m *ExportPolicySpec) GetCredentials() *ExternalCred {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type ExportPolicyStatus struct {
	// list of monitoring policies that refer to this collection policy
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
}

func (m *ExportPolicyStatus) Reset()                    { *m = ExportPolicyStatus{} }
func (m *ExportPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*ExportPolicyStatus) ProtoMessage()               {}
func (*ExportPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{12} }

func (m *ExportPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

type ExternalCred struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"password,omitempty"`
	// Spec contains the configuration of the collection policy.
	BearerToken string `protobuf:"bytes,3,opt,name=BearerToken,proto3" json:"bearer-token,omitempty"`
	// Status contains the current state of the collection policy.
	CertData []byte `protobuf:"bytes,4,opt,name=CertData,proto3" json:"cert-data,omitempty"`
	KeyData  []byte `protobuf:"bytes,5,opt,name=KeyData,proto3" json:"key-data,omitempty"`
	CaData   []byte `protobuf:"bytes,6,opt,name=CaData,proto3" json:"ca-data,omitempty"`
}

func (m *ExternalCred) Reset()                    { *m = ExternalCred{} }
func (m *ExternalCred) String() string            { return proto.CompactTextString(m) }
func (*ExternalCred) ProtoMessage()               {}
func (*ExternalCred) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{13} }

func (m *ExternalCred) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *ExternalCred) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ExternalCred) GetBearerToken() string {
	if m != nil {
		return m.BearerToken
	}
	return ""
}

func (m *ExternalCred) GetCertData() []byte {
	if m != nil {
		return m.CertData
	}
	return nil
}

func (m *ExternalCred) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *ExternalCred) GetCaData() []byte {
	if m != nil {
		return m.CaData
	}
	return nil
}

type MonitoringPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           MonitoringPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         MonitoringPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *MonitoringPolicy) Reset()                    { *m = MonitoringPolicy{} }
func (m *MonitoringPolicy) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicy) ProtoMessage()               {}
func (*MonitoringPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{14} }

func (m *MonitoringPolicy) GetSpec() MonitoringPolicySpec {
	if m != nil {
		return m.Spec
	}
	return MonitoringPolicySpec{}
}

func (m *MonitoringPolicy) GetStatus() MonitoringPolicyStatus {
	if m != nil {
		return m.Status
	}
	return MonitoringPolicyStatus{}
}

type MonitoringPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*MonitoringPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *MonitoringPolicyList) Reset()                    { *m = MonitoringPolicyList{} }
func (m *MonitoringPolicyList) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicyList) ProtoMessage()               {}
func (*MonitoringPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{15} }

func (m *MonitoringPolicyList) GetItems() []*MonitoringPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type MonitoringPolicySpec struct {
	Area             []string          `protobuf:"bytes,1,rep,name=Area" json:"Area,omitempty"`
	ObjectSelector   map[string]string `protobuf:"bytes,2,rep,name=ObjectSelector" json:"object-selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CollectionPolicy string            `protobuf:"bytes,3,opt,name=CollectionPolicy,proto3" json:"collection-policy,omitempty"`
	RetentionPolicy  string            `protobuf:"bytes,4,opt,name=RetentionPolicy,proto3" json:"retention-policy,omitempty"`
	ExportPolicies   []string          `protobuf:"bytes,5,rep,name=ExportPolicies" json:"export-policy,omitempty"`
}

func (m *MonitoringPolicySpec) Reset()                    { *m = MonitoringPolicySpec{} }
func (m *MonitoringPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicySpec) ProtoMessage()               {}
func (*MonitoringPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{16} }

func (m *MonitoringPolicySpec) GetArea() []string {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *MonitoringPolicySpec) GetObjectSelector() map[string]string {
	if m != nil {
		return m.ObjectSelector
	}
	return nil
}

func (m *MonitoringPolicySpec) GetCollectionPolicy() string {
	if m != nil {
		return m.CollectionPolicy
	}
	return ""
}

func (m *MonitoringPolicySpec) GetRetentionPolicy() string {
	if m != nil {
		return m.RetentionPolicy
	}
	return ""
}

func (m *MonitoringPolicySpec) GetExportPolicies() []string {
	if m != nil {
		return m.ExportPolicies
	}
	return nil
}

type MonitoringPolicyStatus struct {
	Workloads []string `protobuf:"bytes,1,rep,name=Workloads" json:"workloads,omitempty"`
}

func (m *MonitoringPolicyStatus) Reset()                    { *m = MonitoringPolicyStatus{} }
func (m *MonitoringPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*MonitoringPolicyStatus) ProtoMessage()               {}
func (*MonitoringPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{17} }

func (m *MonitoringPolicyStatus) GetWorkloads() []string {
	if m != nil {
		return m.Workloads
	}
	return nil
}

type RetentionPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           RetentionPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         RetentionPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *RetentionPolicy) Reset()                    { *m = RetentionPolicy{} }
func (m *RetentionPolicy) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicy) ProtoMessage()               {}
func (*RetentionPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{18} }

func (m *RetentionPolicy) GetSpec() RetentionPolicySpec {
	if m != nil {
		return m.Spec
	}
	return RetentionPolicySpec{}
}

func (m *RetentionPolicy) GetStatus() RetentionPolicyStatus {
	if m != nil {
		return m.Status
	}
	return RetentionPolicyStatus{}
}

type RetentionPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	Items        []*RetentionPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *RetentionPolicyList) Reset()                    { *m = RetentionPolicyList{} }
func (m *RetentionPolicyList) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicyList) ProtoMessage()               {}
func (*RetentionPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{19} }

func (m *RetentionPolicyList) GetItems() []*RetentionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type RetentionPolicySpec struct {
	CompactionInterval string `protobuf:"bytes,1,opt,name=CompactionInterval,proto3" json:"compaction-interval ,omitempty"`
	CompactionMethod   string `protobuf:"bytes,2,opt,name=CompactionMethod,proto3" json:"compaction-method,omitempty"`
	MaxRetentionTime   string `protobuf:"bytes,3,opt,name=MaxRetentionTime,proto3" json:"max-retention-time,omitempty"`
}

func (m *RetentionPolicySpec) Reset()                    { *m = RetentionPolicySpec{} }
func (m *RetentionPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicySpec) ProtoMessage()               {}
func (*RetentionPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{20} }

func (m *RetentionPolicySpec) GetCompactionInterval() string {
	if m != nil {
		return m.CompactionInterval
	}
	return ""
}

func (m *RetentionPolicySpec) GetCompactionMethod() string {
	if m != nil {
		return m.CompactionMethod
	}
	return ""
}

func (m *RetentionPolicySpec) GetMaxRetentionTime() string {
	if m != nil {
		return m.MaxRetentionTime
	}
	return ""
}

type RetentionPolicyStatus struct {
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
}

func (m *RetentionPolicyStatus) Reset()                    { *m = RetentionPolicyStatus{} }
func (m *RetentionPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicyStatus) ProtoMessage()               {}
func (*RetentionPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{21} }

func (m *RetentionPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgCollectionPolicyWatchHelper)(nil), "telemetry.AutoMsgCollectionPolicyWatchHelper")
	proto.RegisterType((*AutoMsgExportPolicyWatchHelper)(nil), "telemetry.AutoMsgExportPolicyWatchHelper")
	proto.RegisterType((*AutoMsgMonitoringPolicyWatchHelper)(nil), "telemetry.AutoMsgMonitoringPolicyWatchHelper")
	proto.RegisterType((*AutoMsgRetentionPolicyWatchHelper)(nil), "telemetry.AutoMsgRetentionPolicyWatchHelper")
	proto.RegisterType((*CollectionPolicy)(nil), "telemetry.CollectionPolicy")
	proto.RegisterType((*CollectionPolicyList)(nil), "telemetry.CollectionPolicyList")
	proto.RegisterType((*CollectionPolicySpec)(nil), "telemetry.CollectionPolicySpec")
	proto.RegisterType((*CollectionPolicyStatus)(nil), "telemetry.CollectionPolicyStatus")
	proto.RegisterType((*CollectionTrigger)(nil), "telemetry.CollectionTrigger")
	proto.RegisterType((*ExportPolicy)(nil), "telemetry.ExportPolicy")
	proto.RegisterType((*ExportPolicyList)(nil), "telemetry.ExportPolicyList")
	proto.RegisterType((*ExportPolicySpec)(nil), "telemetry.ExportPolicySpec")
	proto.RegisterType((*ExportPolicyStatus)(nil), "telemetry.ExportPolicyStatus")
	proto.RegisterType((*ExternalCred)(nil), "telemetry.ExternalCred")
	proto.RegisterType((*MonitoringPolicy)(nil), "telemetry.MonitoringPolicy")
	proto.RegisterType((*MonitoringPolicyList)(nil), "telemetry.MonitoringPolicyList")
	proto.RegisterType((*MonitoringPolicySpec)(nil), "telemetry.MonitoringPolicySpec")
	proto.RegisterType((*MonitoringPolicyStatus)(nil), "telemetry.MonitoringPolicyStatus")
	proto.RegisterType((*RetentionPolicy)(nil), "telemetry.RetentionPolicy")
	proto.RegisterType((*RetentionPolicyList)(nil), "telemetry.RetentionPolicyList")
	proto.RegisterType((*RetentionPolicySpec)(nil), "telemetry.RetentionPolicySpec")
	proto.RegisterType((*RetentionPolicyStatus)(nil), "telemetry.RetentionPolicyStatus")
	proto.RegisterEnum("telemetry.ExportPolicySpec_Formats", ExportPolicySpec_Formats_name, ExportPolicySpec_Formats_value)
	proto.RegisterEnum("telemetry.MonitoringPolicySpec_Areas", MonitoringPolicySpec_Areas_name, MonitoringPolicySpec_Areas_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectionPolicyV1 service

type CollectionPolicyV1Client interface {
	AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectionPolicyList, error)
	AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error)
	AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectionPolicyV1_AutoWatchCollectionPolicyClient, error)
}

type collectionPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewCollectionPolicyV1Client(cc *grpc.ClientConn) CollectionPolicyV1Client {
	return &collectionPolicyV1Client{cc}
}

func (c *collectionPolicyV1Client) AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.CollectionPolicyV1/AutoAddCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.CollectionPolicyV1/AutoDeleteCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.CollectionPolicyV1/AutoGetCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*CollectionPolicyList, error) {
	out := new(CollectionPolicyList)
	err := grpc.Invoke(ctx, "/telemetry.CollectionPolicyV1/AutoListCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy, opts ...grpc.CallOption) (*CollectionPolicy, error) {
	out := new(CollectionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.CollectionPolicyV1/AutoUpdateCollectionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionPolicyV1Client) AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (CollectionPolicyV1_AutoWatchCollectionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CollectionPolicyV1_serviceDesc.Streams[0], c.cc, "/telemetry.CollectionPolicyV1/AutoWatchCollectionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionPolicyV1AutoWatchCollectionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectionPolicyV1_AutoWatchCollectionPolicyClient interface {
	Recv() (*AutoMsgCollectionPolicyWatchHelper, error)
	grpc.ClientStream
}

type collectionPolicyV1AutoWatchCollectionPolicyClient struct {
	grpc.ClientStream
}

func (x *collectionPolicyV1AutoWatchCollectionPolicyClient) Recv() (*AutoMsgCollectionPolicyWatchHelper, error) {
	m := new(AutoMsgCollectionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CollectionPolicyV1 service

type CollectionPolicyV1Server interface {
	AutoAddCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoDeleteCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoGetCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoListCollectionPolicy(context.Context, *api.ListWatchOptions) (*CollectionPolicyList, error)
	AutoUpdateCollectionPolicy(context.Context, *CollectionPolicy) (*CollectionPolicy, error)
	AutoWatchCollectionPolicy(*api.ListWatchOptions, CollectionPolicyV1_AutoWatchCollectionPolicyServer) error
}

func RegisterCollectionPolicyV1Server(s *grpc.Server, srv CollectionPolicyV1Server) {
	s.RegisterService(&_CollectionPolicyV1_serviceDesc, srv)
}

func _CollectionPolicyV1_AutoAddCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoAddCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.CollectionPolicyV1/AutoAddCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoAddCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoDeleteCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoDeleteCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.CollectionPolicyV1/AutoDeleteCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoDeleteCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoGetCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoGetCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.CollectionPolicyV1/AutoGetCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoGetCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoListCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoListCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.CollectionPolicyV1/AutoListCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoListCollectionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoUpdateCollectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionPolicyV1Server).AutoUpdateCollectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.CollectionPolicyV1/AutoUpdateCollectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionPolicyV1Server).AutoUpdateCollectionPolicy(ctx, req.(*CollectionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionPolicyV1_AutoWatchCollectionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionPolicyV1Server).AutoWatchCollectionPolicy(m, &collectionPolicyV1AutoWatchCollectionPolicyServer{stream})
}

type CollectionPolicyV1_AutoWatchCollectionPolicyServer interface {
	Send(*AutoMsgCollectionPolicyWatchHelper) error
	grpc.ServerStream
}

type collectionPolicyV1AutoWatchCollectionPolicyServer struct {
	grpc.ServerStream
}

func (x *collectionPolicyV1AutoWatchCollectionPolicyServer) Send(m *AutoMsgCollectionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _CollectionPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.CollectionPolicyV1",
	HandlerType: (*CollectionPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoAddCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoDeleteCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoGetCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoGetCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoListCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoListCollectionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateCollectionPolicy",
			Handler:    _CollectionPolicyV1_AutoUpdateCollectionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchCollectionPolicy",
			Handler:       _CollectionPolicyV1_AutoWatchCollectionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}

// Client API for ExportPolicyV1 service

type ExportPolicyV1Client interface {
	AutoAddExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoGetExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ExportPolicyList, error)
	AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error)
	AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ExportPolicyV1_AutoWatchExportPolicyClient, error)
}

type exportPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewExportPolicyV1Client(cc *grpc.ClientConn) ExportPolicyV1Client {
	return &exportPolicyV1Client{cc}
}

func (c *exportPolicyV1Client) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/telemetry.ExportPolicyV1/AutoAddExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/telemetry.ExportPolicyV1/AutoDeleteExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/telemetry.ExportPolicyV1/AutoGetExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ExportPolicyList, error) {
	out := new(ExportPolicyList)
	err := grpc.Invoke(ctx, "/telemetry.ExportPolicyV1/AutoListExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy, opts ...grpc.CallOption) (*ExportPolicy, error) {
	out := new(ExportPolicy)
	err := grpc.Invoke(ctx, "/telemetry.ExportPolicyV1/AutoUpdateExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportPolicyV1Client) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (ExportPolicyV1_AutoWatchExportPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExportPolicyV1_serviceDesc.Streams[0], c.cc, "/telemetry.ExportPolicyV1/AutoWatchExportPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &exportPolicyV1AutoWatchExportPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExportPolicyV1_AutoWatchExportPolicyClient interface {
	Recv() (*AutoMsgExportPolicyWatchHelper, error)
	grpc.ClientStream
}

type exportPolicyV1AutoWatchExportPolicyClient struct {
	grpc.ClientStream
}

func (x *exportPolicyV1AutoWatchExportPolicyClient) Recv() (*AutoMsgExportPolicyWatchHelper, error) {
	m := new(AutoMsgExportPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExportPolicyV1 service

type ExportPolicyV1Server interface {
	AutoAddExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoDeleteExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoGetExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoListExportPolicy(context.Context, *api.ListWatchOptions) (*ExportPolicyList, error)
	AutoUpdateExportPolicy(context.Context, *ExportPolicy) (*ExportPolicy, error)
	AutoWatchExportPolicy(*api.ListWatchOptions, ExportPolicyV1_AutoWatchExportPolicyServer) error
}

func RegisterExportPolicyV1Server(s *grpc.Server, srv ExportPolicyV1Server) {
	s.RegisterService(&_ExportPolicyV1_serviceDesc, srv)
}

func _ExportPolicyV1_AutoAddExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoAddExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.ExportPolicyV1/AutoAddExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoAddExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoDeleteExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoDeleteExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.ExportPolicyV1/AutoDeleteExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoDeleteExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoGetExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoGetExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.ExportPolicyV1/AutoGetExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoGetExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoListExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoListExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.ExportPolicyV1/AutoListExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoListExportPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoUpdateExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportPolicyV1Server).AutoUpdateExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.ExportPolicyV1/AutoUpdateExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportPolicyV1Server).AutoUpdateExportPolicy(ctx, req.(*ExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportPolicyV1_AutoWatchExportPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExportPolicyV1Server).AutoWatchExportPolicy(m, &exportPolicyV1AutoWatchExportPolicyServer{stream})
}

type ExportPolicyV1_AutoWatchExportPolicyServer interface {
	Send(*AutoMsgExportPolicyWatchHelper) error
	grpc.ServerStream
}

type exportPolicyV1AutoWatchExportPolicyServer struct {
	grpc.ServerStream
}

func (x *exportPolicyV1AutoWatchExportPolicyServer) Send(m *AutoMsgExportPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _ExportPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.ExportPolicyV1",
	HandlerType: (*ExportPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddExportPolicy",
			Handler:    _ExportPolicyV1_AutoAddExportPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteExportPolicy",
			Handler:    _ExportPolicyV1_AutoDeleteExportPolicy_Handler,
		},
		{
			MethodName: "AutoGetExportPolicy",
			Handler:    _ExportPolicyV1_AutoGetExportPolicy_Handler,
		},
		{
			MethodName: "AutoListExportPolicy",
			Handler:    _ExportPolicyV1_AutoListExportPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateExportPolicy",
			Handler:    _ExportPolicyV1_AutoUpdateExportPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchExportPolicy",
			Handler:       _ExportPolicyV1_AutoWatchExportPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}

// Client API for MonitoringPolicyV1 service

type MonitoringPolicyV1Client interface {
	AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MonitoringPolicyList, error)
	AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error)
	AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error)
}

type monitoringPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewMonitoringPolicyV1Client(cc *grpc.ClientConn) MonitoringPolicyV1Client {
	return &monitoringPolicyV1Client{cc}
}

func (c *monitoringPolicyV1Client) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoAddMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoDeleteMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoGetMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MonitoringPolicyList, error) {
	out := new(MonitoringPolicyList)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoListMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy, opts ...grpc.CallOption) (*MonitoringPolicy, error) {
	out := new(MonitoringPolicy)
	err := grpc.Invoke(ctx, "/telemetry.MonitoringPolicyV1/AutoUpdateMonitoringPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringPolicyV1Client) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringPolicyV1_serviceDesc.Streams[0], c.cc, "/telemetry.MonitoringPolicyV1/AutoWatchMonitoringPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringPolicyV1AutoWatchMonitoringPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringPolicyV1_AutoWatchMonitoringPolicyClient interface {
	Recv() (*AutoMsgMonitoringPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringPolicyV1AutoWatchMonitoringPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringPolicyV1AutoWatchMonitoringPolicyClient) Recv() (*AutoMsgMonitoringPolicyWatchHelper, error) {
	m := new(AutoMsgMonitoringPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MonitoringPolicyV1 service

type MonitoringPolicyV1Server interface {
	AutoAddMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoDeleteMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoGetMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoListMonitoringPolicy(context.Context, *api.ListWatchOptions) (*MonitoringPolicyList, error)
	AutoUpdateMonitoringPolicy(context.Context, *MonitoringPolicy) (*MonitoringPolicy, error)
	AutoWatchMonitoringPolicy(*api.ListWatchOptions, MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error
}

func RegisterMonitoringPolicyV1Server(s *grpc.Server, srv MonitoringPolicyV1Server) {
	s.RegisterService(&_MonitoringPolicyV1_serviceDesc, srv)
}

func _MonitoringPolicyV1_AutoAddMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoAddMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoAddMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoAddMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoDeleteMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoDeleteMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoDeleteMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoDeleteMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoGetMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoGetMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoGetMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoGetMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoListMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoListMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoListMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoListMonitoringPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoUpdateMonitoringPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoringPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringPolicyV1Server).AutoUpdateMonitoringPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.MonitoringPolicyV1/AutoUpdateMonitoringPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringPolicyV1Server).AutoUpdateMonitoringPolicy(ctx, req.(*MonitoringPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringPolicyV1_AutoWatchMonitoringPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringPolicyV1Server).AutoWatchMonitoringPolicy(m, &monitoringPolicyV1AutoWatchMonitoringPolicyServer{stream})
}

type MonitoringPolicyV1_AutoWatchMonitoringPolicyServer interface {
	Send(*AutoMsgMonitoringPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringPolicyV1AutoWatchMonitoringPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringPolicyV1AutoWatchMonitoringPolicyServer) Send(m *AutoMsgMonitoringPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitoringPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.MonitoringPolicyV1",
	HandlerType: (*MonitoringPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoAddMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoDeleteMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoGetMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoGetMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoListMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoListMonitoringPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateMonitoringPolicy",
			Handler:    _MonitoringPolicyV1_AutoUpdateMonitoringPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchMonitoringPolicy",
			Handler:       _MonitoringPolicyV1_AutoWatchMonitoringPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}

// Client API for RetentionPolicyV1 service

type RetentionPolicyV1Client interface {
	AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RetentionPolicyList, error)
	AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error)
}

type retentionPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewRetentionPolicyV1Client(cc *grpc.ClientConn) RetentionPolicyV1Client {
	return &retentionPolicyV1Client{cc}
}

func (c *retentionPolicyV1Client) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.RetentionPolicyV1/AutoAddRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.RetentionPolicyV1/AutoDeleteRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.RetentionPolicyV1/AutoGetRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RetentionPolicyList, error) {
	out := new(RetentionPolicyList)
	err := grpc.Invoke(ctx, "/telemetry.RetentionPolicyV1/AutoListRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/telemetry.RetentionPolicyV1/AutoUpdateRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RetentionPolicyV1_serviceDesc.Streams[0], c.cc, "/telemetry.RetentionPolicyV1/AutoWatchRetentionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &retentionPolicyV1AutoWatchRetentionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RetentionPolicyV1_AutoWatchRetentionPolicyClient interface {
	Recv() (*AutoMsgRetentionPolicyWatchHelper, error)
	grpc.ClientStream
}

type retentionPolicyV1AutoWatchRetentionPolicyClient struct {
	grpc.ClientStream
}

func (x *retentionPolicyV1AutoWatchRetentionPolicyClient) Recv() (*AutoMsgRetentionPolicyWatchHelper, error) {
	m := new(AutoMsgRetentionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RetentionPolicyV1 service

type RetentionPolicyV1Server interface {
	AutoAddRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoDeleteRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoGetRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoListRetentionPolicy(context.Context, *api.ListWatchOptions) (*RetentionPolicyList, error)
	AutoUpdateRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoWatchRetentionPolicy(*api.ListWatchOptions, RetentionPolicyV1_AutoWatchRetentionPolicyServer) error
}

func RegisterRetentionPolicyV1Server(s *grpc.Server, srv RetentionPolicyV1Server) {
	s.RegisterService(&_RetentionPolicyV1_serviceDesc, srv)
}

func _RetentionPolicyV1_AutoAddRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoAddRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.RetentionPolicyV1/AutoAddRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoAddRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoDeleteRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoDeleteRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.RetentionPolicyV1/AutoDeleteRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoDeleteRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoGetRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoGetRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.RetentionPolicyV1/AutoGetRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoGetRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoListRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoListRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.RetentionPolicyV1/AutoListRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoListRetentionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoUpdateRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoUpdateRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.RetentionPolicyV1/AutoUpdateRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoUpdateRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoWatchRetentionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RetentionPolicyV1Server).AutoWatchRetentionPolicy(m, &retentionPolicyV1AutoWatchRetentionPolicyServer{stream})
}

type RetentionPolicyV1_AutoWatchRetentionPolicyServer interface {
	Send(*AutoMsgRetentionPolicyWatchHelper) error
	grpc.ServerStream
}

type retentionPolicyV1AutoWatchRetentionPolicyServer struct {
	grpc.ServerStream
}

func (x *retentionPolicyV1AutoWatchRetentionPolicyServer) Send(m *AutoMsgRetentionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _RetentionPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.RetentionPolicyV1",
	HandlerType: (*RetentionPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoAddRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoDeleteRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoGetRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoGetRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoListRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoListRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoUpdateRetentionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchRetentionPolicy",
			Handler:       _RetentionPolicyV1_AutoWatchRetentionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}

func (m *AutoMsgCollectionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgCollectionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AutoMsgExportPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgExportPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Object.Size()))
		n2, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AutoMsgMonitoringPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMonitoringPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AutoMsgRetentionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRetentionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Object.Size()))
		n4, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CollectionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *CollectionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n9, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ListMeta.Size()))
	n10, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CollectionPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Triggers) > 0 {
		for _, msg := range m.Triggers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CollectionPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CollectionTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionTrigger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ConditionalTrigger) > 0 {
		for k := range m.ConditionalTrigger {
			dAtA[i] = 0xa
			i++
			v := m.ConditionalTrigger[k]
			mapSize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			i = encodeVarintTelemetry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TimeTrigger) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.TimeTrigger)))
		i += copy(dAtA[i:], m.TimeTrigger)
	}
	return i, nil
}

func (m *ExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n11, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n12, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n13, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n14, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *ExportPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n15, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ListMeta.Size()))
	n16, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExportPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExportInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.ExportInterval)))
		i += copy(dAtA[i:], m.ExportInterval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.CollectorIpAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CollectorIpAddress)))
		i += copy(dAtA[i:], m.CollectorIpAddress)
	}
	if len(m.CollectorPort) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CollectorPort)))
		i += copy(dAtA[i:], m.CollectorPort)
	}
	if m.Credentials != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Credentials.Size()))
		n17, err := m.Credentials.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ExportPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ExternalCred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalCred) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.BearerToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.BearerToken)))
		i += copy(dAtA[i:], m.BearerToken)
	}
	if len(m.CertData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CertData)))
		i += copy(dAtA[i:], m.CertData)
	}
	if len(m.KeyData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.KeyData)))
		i += copy(dAtA[i:], m.KeyData)
	}
	if len(m.CaData) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CaData)))
		i += copy(dAtA[i:], m.CaData)
	}
	return i, nil
}

func (m *MonitoringPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n18, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n19, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n20, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n21, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	return i, nil
}

func (m *MonitoringPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n22, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ListMeta.Size()))
	n23, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MonitoringPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Area) > 0 {
		for _, s := range m.Area {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ObjectSelector) > 0 {
		for k := range m.ObjectSelector {
			dAtA[i] = 0x12
			i++
			v := m.ObjectSelector[k]
			mapSize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			i = encodeVarintTelemetry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.CollectionPolicy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CollectionPolicy)))
		i += copy(dAtA[i:], m.CollectionPolicy)
	}
	if len(m.RetentionPolicy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionPolicy)))
		i += copy(dAtA[i:], m.RetentionPolicy)
	}
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MonitoringPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitoringPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RetentionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n24, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n25, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n26, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n27, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	return i, nil
}

func (m *RetentionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n28, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ListMeta.Size()))
	n29, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetentionPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompactionInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CompactionInterval)))
		i += copy(dAtA[i:], m.CompactionInterval)
	}
	if len(m.CompactionMethod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CompactionMethod)))
		i += copy(dAtA[i:], m.CompactionMethod)
	}
	if len(m.MaxRetentionTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.MaxRetentionTime)))
		i += copy(dAtA[i:], m.MaxRetentionTime)
	}
	return i, nil
}

func (m *RetentionPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Telemetry(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Telemetry(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgCollectionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *AutoMsgExportPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *AutoMsgMonitoringPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *AutoMsgRetentionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *CollectionPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *CollectionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *CollectionPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *CollectionPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *CollectionTrigger) Size() (n int) {
	var l int
	_ = l
	if len(m.ConditionalTrigger) > 0 {
		for k, v := range m.ConditionalTrigger {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			n += mapEntrySize + 1 + sovTelemetry(uint64(mapEntrySize))
		}
	}
	l = len(m.TimeTrigger)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *ExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *ExportPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *ExportPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExportInterval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.CollectorIpAddress)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.CollectorPort)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *ExportPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *ExternalCred) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.BearerToken)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.CertData)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.KeyData)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.CaData)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *MonitoringPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *MonitoringPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *MonitoringPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Area) > 0 {
		for _, s := range m.Area {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.ObjectSelector) > 0 {
		for k, v := range m.ObjectSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + len(v) + sovTelemetry(uint64(len(v)))
			n += mapEntrySize + 1 + sovTelemetry(uint64(mapEntrySize))
		}
	}
	l = len(m.CollectionPolicy)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.RetentionPolicy)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.ExportPolicies) > 0 {
		for _, s := range m.ExportPolicies {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *MonitoringPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Workloads) > 0 {
		for _, s := range m.Workloads {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *RetentionPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *RetentionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *RetentionPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompactionInterval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.CompactionMethod)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.MaxRetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *RetentionPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgCollectionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgCollectionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgCollectionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &CollectionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgExportPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgExportPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgExportPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &ExportPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMonitoringPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgMonitoringPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgMonitoringPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &MonitoringPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgRetentionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRetentionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRetentionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &RetentionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CollectionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, CollectionTrigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConditionalTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTelemetry
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.ConditionalTrigger == nil {
				m.ConditionalTrigger = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTelemetry
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.ConditionalTrigger[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.ConditionalTrigger[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeTrigger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeTrigger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ExportPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectorPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &ExternalCred{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalCred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalCred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalCred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertData = append(m.CertData[:0], dAtA[iNdEx:postIndex]...)
			if m.CertData == nil {
				m.CertData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = append(m.KeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyData == nil {
				m.KeyData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaData = append(m.CaData[:0], dAtA[iNdEx:postIndex]...)
			if m.CaData == nil {
				m.CaData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MonitoringPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = append(m.Area, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTelemetry
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.ObjectSelector == nil {
				m.ObjectSelector = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTelemetry
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.ObjectSelector[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.ObjectSelector[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportPolicies = append(m.ExportPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitoringPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitoringPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitoringPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workloads", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workloads = append(m.Workloads, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RetentionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 2217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x17, 0xa8, 0xef, 0x95, 0x6c, 0xd1, 0xab, 0x2f, 0x82, 0x92, 0x05, 0x09, 0x69, 0x6a, 0x49,
	0x36, 0x49, 0x5b, 0x4e, 0x53, 0x47, 0xf6, 0x34, 0x15, 0x15, 0xd9, 0x71, 0x6d, 0x45, 0x8e, 0xa4,
	0x24, 0x3d, 0x75, 0x0a, 0x91, 0x6b, 0x0a, 0x16, 0x08, 0x60, 0x80, 0xa5, 0x65, 0xb5, 0xcd, 0xa1,
	0x65, 0x9c, 0xf4, 0xd0, 0x4e, 0xa7, 0x8d, 0x67, 0xfa, 0x71, 0xc9, 0x54, 0x87, 0x76, 0x46, 0xb7,
	0xb6, 0x87, 0x9c, 0x7a, 0xcf, 0xf4, 0x94, 0x71, 0x2f, 0x9d, 0x1c, 0x38, 0xad, 0xa7, 0x27, 0xfe,
	0x0d, 0x3d, 0x74, 0x76, 0xb1, 0x20, 0x17, 0x0b, 0x10, 0x82, 0x47, 0xb2, 0x27, 0x37, 0x61, 0xf7,
	0xbd, 0xb7, 0xbf, 0xf7, 0x76, 0x7f, 0xef, 0xbd, 0x5d, 0x0a, 0x8c, 0x60, 0x64, 0xa0, 0x2a, 0xc2,
	0xce, 0x41, 0xde, 0x76, 0x2c, 0x6c, 0xc1, 0xc1, 0xd6, 0x40, 0x76, 0xba, 0x62, 0x59, 0x15, 0x03,
	0x15, 0x34, 0x5b, 0x2f, 0x68, 0xa6, 0x69, 0x61, 0x0d, 0xeb, 0x96, 0xe9, 0x7a, 0x82, 0xd9, 0xb5,
	0x8a, 0x8e, 0x77, 0x6b, 0x3b, 0xf9, 0x92, 0x55, 0x2d, 0xd8, 0xc8, 0x74, 0x35, 0xb3, 0x6c, 0x15,
	0xdc, 0xfd, 0xc2, 0x43, 0x64, 0xea, 0x25, 0x54, 0xa8, 0x61, 0xdd, 0x70, 0x89, 0x6a, 0x05, 0x99,
	0xbc, 0x76, 0x41, 0x37, 0x4b, 0x46, 0xad, 0x8c, 0x7c, 0x33, 0x39, 0xce, 0x4c, 0xc5, 0xaa, 0x58,
	0x05, 0x3a, 0xbc, 0x53, 0xbb, 0x4f, 0xbf, 0xe8, 0x07, 0xfd, 0x8b, 0x89, 0xbf, 0xda, 0x61, 0x55,
	0x82, 0xb1, 0x8a, 0xb0, 0xe6, 0x89, 0xa9, 0x36, 0x50, 0x57, 0x6a, 0xd8, 0x5a, 0x77, 0x2b, 0xab,
	0x96, 0x61, 0xa0, 0x12, 0x59, 0xfa, 0x9e, 0x65, 0xe8, 0xa5, 0x83, 0x0f, 0x34, 0x5c, 0xda, 0x7d,
	0x1b, 0x19, 0x36, 0x72, 0xe0, 0x30, 0xe8, 0xd9, 0x3e, 0xb0, 0x51, 0x46, 0x9a, 0x95, 0xe6, 0x07,
	0xe1, 0x45, 0xd0, 0xb7, 0xb1, 0xf3, 0x00, 0x95, 0x70, 0x26, 0x35, 0x2b, 0xcd, 0x0f, 0x2d, 0x4d,
	0xe5, 0xdb, 0xb1, 0x11, 0xad, 0x2c, 0x8f, 0x7c, 0xf5, 0x64, 0x6c, 0x68, 0x9f, 0xd8, 0xda, 0xa5,
	0xb6, 0xd4, 0x5d, 0x30, 0xc3, 0x56, 0x5c, 0x7b, 0x64, 0x5b, 0x0e, 0x3e, 0x6e, 0xb5, 0x0b, 0xc2,
	0x6a, 0x93, 0xdc, 0x6a, 0xbc, 0x85, 0xf0, 0x4a, 0x6d, 0xdf, 0xd6, 0x2d, 0x53, 0xc7, 0x96, 0xa3,
	0x9b, 0x95, 0x93, 0xf8, 0x26, 0x5a, 0x09, 0xaf, 0x68, 0x82, 0x39, 0xb6, 0xe2, 0x26, 0xc2, 0xc8,
	0x4c, 0x12, 0xcc, 0x45, 0x61, 0xc1, 0x2c, 0xb7, 0xa0, 0x60, 0x24, 0xbc, 0xde, 0xe7, 0x29, 0x90,
	0x16, 0x23, 0x0e, 0x2f, 0x03, 0x69, 0x9b, 0x1a, 0x1f, 0x5a, 0x3a, 0x93, 0xd7, 0x6c, 0x3d, 0x4f,
	0x56, 0x5b, 0x47, 0x58, 0x2b, 0x8e, 0x7e, 0xd1, 0x50, 0xba, 0xbe, 0x6c, 0x28, 0x52, 0xb3, 0xa1,
	0xf4, 0x5f, 0xd2, 0x4d, 0x43, 0x37, 0xd1, 0xa6, 0xb4, 0x0d, 0xdf, 0x00, 0xd2, 0x06, 0x5b, 0x7e,
	0x84, 0x6a, 0x78, 0x88, 0xa8, 0x4e, 0x96, 0xd3, 0x39, 0x4b, 0x0e, 0xce, 0x25, 0xab, 0xaa, 0x63,
	0x54, 0xb5, 0xf1, 0xc1, 0xa6, 0xb4, 0x01, 0xef, 0x80, 0x9e, 0x2d, 0x1b, 0x95, 0x32, 0xdd, 0x54,
	0x5b, 0x89, 0x39, 0x09, 0x44, 0xac, 0x38, 0x41, 0xac, 0x11, 0x4b, 0xae, 0x8d, 0x4a, 0x9c, 0x25,
	0x6a, 0x04, 0x6e, 0x81, 0xbe, 0x2d, 0xac, 0xe1, 0x9a, 0x9b, 0xe9, 0xa1, 0xe6, 0xe6, 0xe2, 0xcc,
	0x51, 0xc1, 0x62, 0x86, 0x19, 0x4c, 0xbb, 0xf4, 0x9b, 0x33, 0xc9, 0x4c, 0x2d, 0x8f, 0x3d, 0x7d,
	0x2c, 0xa7, 0x4b, 0x82, 0xb6, 0xfa, 0x47, 0x09, 0x8c, 0x89, 0x26, 0xef, 0xea, 0x2e, 0x86, 0x2a,
	0x89, 0x5e, 0x2a, 0x2a, 0x7a, 0x03, 0x7e, 0x24, 0xe0, 0x02, 0x18, 0x20, 0xb2, 0x64, 0x94, 0x39,
	0xee, 0x89, 0xfa, 0x83, 0x9c, 0xe8, 0x22, 0xe8, 0xbd, 0x8d, 0x51, 0x95, 0x78, 0xd4, 0x7d, 0x1c,
	0x55, 0xce, 0x7e, 0xf5, 0x64, 0x0c, 0x18, 0xba, 0x8b, 0xd9, 0xee, 0xfe, 0x29, 0x02, 0x23, 0x8d,
	0xd3, 0x35, 0x00, 0x56, 0x30, 0x76, 0xf4, 0x9d, 0x1a, 0x46, 0x6e, 0x46, 0x9a, 0xed, 0x9e, 0x1f,
	0x2c, 0x66, 0x9a, 0x0d, 0x65, 0x4c, 0x6b, 0x8d, 0x72, 0x81, 0xe0, 0x64, 0xe1, 0x36, 0x18, 0xd8,
	0x76, 0xf4, 0x4a, 0x05, 0x39, 0x6e, 0xa6, 0x9b, 0x22, 0x9a, 0x8e, 0x44, 0xc4, 0x84, 0xbc, 0xdd,
	0x6f, 0x36, 0x14, 0x88, 0x99, 0x16, 0x67, 0xb7, 0x65, 0x49, 0xdd, 0x03, 0x13, 0xd1, 0xdb, 0x03,
	0xdf, 0x05, 0x50, 0x60, 0x8d, 0xde, 0x42, 0x3c, 0xd7, 0x6c, 0x28, 0xe7, 0xab, 0xad, 0xd9, 0x9c,
	0xcd, 0xa6, 0xb9, 0x25, 0x22, 0x94, 0xd5, 0xc3, 0x14, 0x38, 0x17, 0x02, 0x0a, 0x3f, 0x91, 0x00,
	0x5c, 0xb5, 0xcc, 0xb2, 0x4e, 0x06, 0x35, 0x83, 0x0d, 0xd3, 0x95, 0x86, 0x96, 0x5e, 0x8b, 0xf3,
	0x31, 0x1f, 0x56, 0x5b, 0x33, 0xb1, 0x73, 0xe0, 0xe1, 0x2b, 0xb5, 0x27, 0x73, 0x2c, 0x06, 0x3c,
	0xbe, 0xb0, 0x2e, 0xbc, 0x01, 0x86, 0xb6, 0xf5, 0x2a, 0xf2, 0x11, 0x90, 0xa3, 0x34, 0x58, 0xcc,
	0x36, 0x1b, 0xca, 0x04, 0xd6, 0xab, 0x28, 0xc2, 0x08, 0x2f, 0x9e, 0x5d, 0x03, 0x93, 0x1d, 0xf0,
	0xc0, 0x34, 0xe8, 0xde, 0x43, 0x07, 0x5e, 0xda, 0xd8, 0x24, 0x7f, 0xc2, 0x31, 0xd0, 0xfb, 0x50,
	0x33, 0x6a, 0xc8, 0x5b, 0x64, 0xd3, 0xfb, 0x58, 0x4e, 0x5d, 0x93, 0xd4, 0x3f, 0xa7, 0xc0, 0x30,
	0x9f, 0x1c, 0x5f, 0x6e, 0x52, 0xb8, 0x15, 0x48, 0x0a, 0x53, 0x1d, 0x12, 0x76, 0x82, 0x84, 0xb0,
	0x21, 0x24, 0x84, 0xf3, 0x9d, 0x4c, 0x25, 0x4d, 0x06, 0xe9, 0xa7, 0x8f, 0xe5, 0x61, 0xc4, 0x69,
	0xaa, 0xbf, 0x97, 0x40, 0x9a, 0x37, 0xf5, 0x22, 0x92, 0xc0, 0x37, 0x83, 0x49, 0xa0, 0x63, 0x05,
	0x13, 0x13, 0xc0, 0xdf, 0xbb, 0x83, 0xd8, 0x68, 0x4c, 0xd6, 0xc0, 0x59, 0x6f, 0xec, 0xb6, 0x89,
	0x91, 0xf3, 0x50, 0x33, 0xbc, 0x13, 0x51, 0x3c, 0xdf, 0x6c, 0x28, 0xb2, 0xe7, 0x5a, 0x4e, 0x67,
	0x53, 0x5c, 0x04, 0x04, 0x25, 0xf8, 0x2e, 0xe8, 0xbb, 0x69, 0x39, 0x55, 0x0d, 0xb3, 0x13, 0xfa,
	0xc6, 0xd1, 0xc7, 0xf2, 0xdc, 0x16, 0x76, 0xd6, 0xcc, 0x5a, 0x75, 0x5e, 0x5c, 0x34, 0xef, 0x89,
	0xba, 0x0b, 0x24, 0xb8, 0xf7, 0xe9, 0xdf, 0x7c, 0x70, 0xbd, 0x59, 0xb8, 0x49, 0x28, 0x48, 0xd9,
	0x65, 0x39, 0xb7, 0xed, 0x95, 0x72, 0xd9, 0x41, 0xae, 0x4b, 0x63, 0x33, 0x58, 0x54, 0x9b, 0x0d,
	0x65, 0xa6, 0xe4, 0xcf, 0xe6, 0x74, 0x3b, 0xa7, 0x79, 0xf3, 0x41, 0x36, 0x89, 0xda, 0xb0, 0x08,
	0xce, 0xb4, 0x46, 0xef, 0x59, 0x0e, 0xa6, 0x07, 0x61, 0xb0, 0x38, 0xdd, 0x6c, 0x28, 0x99, 0xb6,
	0x39, 0x82, 0x96, 0x33, 0x14, 0x54, 0x81, 0xdb, 0x60, 0x68, 0xd5, 0x41, 0x65, 0x52, 0x4a, 0x35,
	0xc3, 0xcd, 0xf4, 0x46, 0xb4, 0x11, 0x18, 0x39, 0xa6, 0x66, 0x10, 0xa9, 0xa2, 0xdc, 0x6c, 0x28,
	0xe3, 0xa5, 0xb6, 0x3c, 0xcf, 0x54, 0xce, 0x8c, 0x3a, 0x07, 0xfa, 0x59, 0x54, 0xe0, 0x10, 0xe8,
	0x7f, 0x07, 0xe1, 0xfb, 0x86, 0xb5, 0x9f, 0xee, 0x82, 0x83, 0xa0, 0xf7, 0x8e, 0x76, 0x7f, 0x4f,
	0x4b, 0x4b, 0x6a, 0x05, 0xc0, 0xf0, 0x29, 0x7d, 0x11, 0x39, 0xf1, 0x1f, 0x94, 0xee, 0x6d, 0x27,
	0xe0, 0x12, 0x18, 0x78, 0xcf, 0x45, 0xce, 0x3b, 0x5a, 0x95, 0xf5, 0x19, 0xc5, 0x09, 0x92, 0xc5,
	0x6b, 0x2e, 0x11, 0xa9, 0x22, 0x3e, 0x8b, 0xfb, 0x72, 0x44, 0xe7, 0x9e, 0xe6, 0xba, 0xfb, 0x96,
	0x53, 0x66, 0x67, 0x82, 0xea, 0xd8, 0x6c, 0x8c, 0xd7, 0xf1, 0xe5, 0x48, 0xb2, 0x2b, 0x22, 0xcd,
	0x41, 0xce, 0xb6, 0xb5, 0x87, 0x4c, 0xb6, 0xd7, 0x34, 0xd9, 0xed, 0xd0, 0xe1, 0x1c, 0x26, 0xe3,
	0x7c, 0x08, 0x39, 0x71, 0x78, 0x15, 0x0c, 0xac, 0x22, 0x07, 0xbf, 0xa5, 0x61, 0x8d, 0xee, 0xeb,
	0x70, 0x71, 0xb2, 0xd9, 0x50, 0x46, 0x4b, 0xc8, 0xc1, 0xb9, 0xb2, 0x16, 0xc8, 0x2a, 0x2d, 0x41,
	0x78, 0x19, 0xf4, 0xdf, 0x41, 0x07, 0x54, 0xa7, 0x97, 0xea, 0x50, 0x94, 0x7b, 0xe8, 0x40, 0x54,
	0xf1, 0xc5, 0x60, 0x0e, 0xf4, 0xad, 0x6a, 0x54, 0xa1, 0x8f, 0x2a, 0x8c, 0x37, 0x1b, 0xca, 0xb9,
	0x92, 0x26, 0xca, 0x33, 0x21, 0xda, 0x54, 0x89, 0xad, 0xde, 0xd7, 0xa5, 0xa9, 0x12, 0x71, 0x9d,
	0xb0, 0xa9, 0x0a, 0x99, 0x7b, 0xae, 0xa6, 0xaa, 0x2a, 0x68, 0xd3, 0xa6, 0x4a, 0x34, 0xf9, 0x92,
	0x9b, 0xaa, 0x50, 0x8f, 0x2e, 0xe6, 0xd4, 0xc3, 0x9e, 0x30, 0x46, 0x1a, 0xa7, 0xeb, 0xa0, 0x67,
	0xc5, 0x41, 0x1a, 0x23, 0xe2, 0x85, 0xa3, 0x8f, 0xe5, 0x57, 0xfc, 0x74, 0x18, 0x25, 0x9f, 0x27,
	0xc2, 0xee, 0xc2, 0x26, 0x55, 0x82, 0x3f, 0x02, 0x67, 0xbd, 0xed, 0xdd, 0x42, 0x5e, 0xe2, 0xc9,
	0xa4, 0x28, 0xb4, 0xab, 0xc7, 0xec, 0x5d, 0x3e, 0xa8, 0xe5, 0x35, 0x1e, 0x34, 0x93, 0x5b, 0x74,
	0x22, 0xe7, 0xb2, 0x19, 0x3e, 0x93, 0x07, 0x75, 0xe0, 0x9d, 0xf0, 0x1d, 0x80, 0x11, 0x51, 0x69,
	0x36, 0x94, 0xa9, 0x76, 0xeb, 0xeb, 0x65, 0x93, 0x03, 0xce, 0x54, 0xf8, 0xf2, 0xf0, 0x36, 0x18,
	0x11, 0x6e, 0x1d, 0x2c, 0xe3, 0xce, 0x34, 0x1b, 0x4a, 0xd6, 0xf1, 0xa7, 0xc2, 0xa6, 0x44, 0x35,
	0xb8, 0xea, 0xd7, 0xa9, 0x56, 0x8a, 0xeb, 0xa5, 0x91, 0x9d, 0x6a, 0x36, 0x94, 0x49, 0x56, 0xa7,
	0x42, 0x56, 0x04, 0x95, 0xec, 0x0a, 0x18, 0x8d, 0x88, 0xd0, 0x73, 0xb5, 0x42, 0x4b, 0xa0, 0x97,
	0x6e, 0x15, 0x04, 0xa0, 0xef, 0xe6, 0xfe, 0x5d, 0xab, 0xe2, 0xa6, 0xbb, 0xe0, 0x30, 0x18, 0xb8,
	0x69, 0x58, 0xfb, 0x84, 0xef, 0x69, 0x09, 0x8e, 0x80, 0x21, 0xb6, 0x0a, 0xd6, 0xb0, 0x9b, 0x4e,
	0xa9, 0x1b, 0x60, 0x22, 0x9a, 0x1a, 0xf0, 0x5b, 0x60, 0xf0, 0x03, 0xcb, 0xd9, 0x33, 0x2c, 0xad,
	0xec, 0xe7, 0x6c, 0x9a, 0xb3, 0xf6, 0xfd, 0x41, 0xce, 0x99, 0xb6, 0xa4, 0xfa, 0xb7, 0x54, 0x28,
	0xae, 0x2f, 0x37, 0xa5, 0x7c, 0x2f, 0x90, 0x52, 0x66, 0x3a, 0x5f, 0x32, 0x13, 0x64, 0x94, 0x4d,
	0x21, 0xa3, 0xcc, 0xc6, 0x58, 0x4b, 0x9a, 0x50, 0x46, 0x9f, 0x3e, 0x96, 0x47, 0x9c, 0xa0, 0xb2,
	0xfa, 0x99, 0x04, 0x46, 0x05, 0x83, 0x2f, 0x22, 0x9d, 0x2c, 0x04, 0xd3, 0x49, 0xdc, 0x0d, 0x5c,
	0xcc, 0x26, 0x1f, 0xa5, 0x42, 0x08, 0x59, 0x88, 0xe0, 0xaa, 0x55, 0xb5, 0x35, 0x4a, 0x2d, 0xa1,
	0x51, 0x63, 0xad, 0x90, 0x3f, 0xdb, 0x6a, 0xd6, 0x66, 0x83, 0xad, 0x90, 0xa8, 0xed, 0xf1, 0xdc,
	0x1f, 0x5d, 0x47, 0x78, 0xd7, 0xf2, 0xeb, 0x34, 0xe3, 0x79, 0xcb, 0x62, 0x95, 0x4e, 0x06, 0x79,
	0x1e, 0x54, 0x84, 0x77, 0x41, 0x7a, 0x5d, 0x7b, 0xd4, 0x82, 0x4e, 0xae, 0x20, 0x2c, 0x69, 0xcc,
	0x36, 0x1b, 0xca, 0x74, 0x55, 0x7b, 0x94, 0x6b, 0x93, 0x9d, 0x5c, 0x5c, 0x78, 0x6b, 0xa2, 0xa6,
	0xfa, 0x00, 0x8c, 0x47, 0x6e, 0xfc, 0x0b, 0xe8, 0x75, 0x96, 0xfe, 0xd7, 0xdf, 0x6a, 0x33, 0x5b,
	0xab, 0xbd, 0x7f, 0x05, 0xfe, 0x42, 0x02, 0x93, 0x2b, 0x35, 0x6c, 0xad, 0x94, 0xcb, 0xa1, 0xa4,
	0x16, 0x77, 0xeb, 0xce, 0xc6, 0x4d, 0xaa, 0xdf, 0xfe, 0xd7, 0x93, 0x31, 0xe9, 0xaf, 0x1f, 0xc9,
	0x7d, 0x25, 0x07, 0x69, 0x18, 0xfd, 0xec, 0x9f, 0xff, 0xfd, 0x34, 0xf5, 0x0a, 0xe8, 0x5a, 0x96,
	0x16, 0xd5, 0xe9, 0xc2, 0x8f, 0x37, 0xf2, 0xdb, 0xc8, 0xd4, 0x4c, 0xfc, 0x61, 0x41, 0x7c, 0x5f,
	0x80, 0xbf, 0x95, 0x40, 0x96, 0xc0, 0x79, 0x0b, 0x19, 0x08, 0xa3, 0x53, 0x44, 0xf4, 0xa6, 0x8f,
	0xa8, 0x4c, 0x2d, 0x53, 0x44, 0x17, 0x41, 0xd7, 0x72, 0xd7, 0xe2, 0xab, 0x71, 0x80, 0xc8, 0x1c,
	0xe9, 0xf2, 0x3e, 0x84, 0xbf, 0x66, 0x81, 0xba, 0x85, 0xf0, 0x29, 0xc2, 0xba, 0xc1, 0x60, 0x75,
	0x57, 0x10, 0x6e, 0x63, 0x82, 0x09, 0x31, 0xfd, 0x10, 0x64, 0x08, 0x24, 0xc2, 0xcd, 0x10, 0xa6,
	0xf1, 0x16, 0x6d, 0xe9, 0x23, 0xda, 0x86, 0x4d, 0x5f, 0x47, 0xb3, 0x71, 0x4f, 0x4d, 0x44, 0x58,
	0x1d, 0x66, 0x88, 0x7a, 0x08, 0x5d, 0xe1, 0xef, 0xd8, 0x7e, 0xbc, 0x67, 0x97, 0xb5, 0x53, 0xdd,
	0x8f, 0xef, 0xfa, 0xfb, 0x51, 0xa3, 0x96, 0xa9, 0xef, 0x97, 0xe8, 0x09, 0xc9, 0x26, 0x74, 0xde,
	0x01, 0x32, 0x41, 0x46, 0xbd, 0x4b, 0xea, 0x7d, 0x8e, 0x83, 0x74, 0xfc, 0xfb, 0xad, 0x7a, 0x86,
	0x81, 0xec, 0xa5, 0x8f, 0x87, 0x97, 0xa5, 0xec, 0xe7, 0xd2, 0x6f, 0xea, 0x72, 0xea, 0xe1, 0x95,
	0x3f, 0xd4, 0xc3, 0x6f, 0x63, 0x87, 0x75, 0x39, 0xd4, 0x17, 0x1c, 0xd5, 0xe5, 0x88, 0x36, 0x03,
	0x92, 0xdd, 0x86, 0xdd, 0x76, 0x0d, 0x43, 0x76, 0x1c, 0x13, 0xfa, 0x7c, 0x54, 0x97, 0x5f, 0x8f,
	0x30, 0xd7, 0x63, 0x5b, 0x2e, 0xce, 0xc6, 0x12, 0x6b, 0xe9, 0x57, 0xfd, 0x81, 0xbe, 0x82, 0x50,
	0xff, 0x27, 0x60, 0x94, 0x31, 0x3f, 0xf0, 0xe4, 0xd1, 0xe9, 0x9a, 0x9d, 0xed, 0x34, 0xa1, 0x5e,
	0x8d, 0x60, 0xbb, 0xe2, 0xb1, 0x3d, 0xc3, 0x83, 0xe2, 0x1f, 0x10, 0xe0, 0x27, 0x12, 0x98, 0x68,
	0x33, 0xfd, 0x84, 0x08, 0xae, 0x47, 0xb0, 0xfb, 0x02, 0x65, 0xf7, 0x5c, 0x27, 0x00, 0xed, 0x83,
	0xf4, 0x53, 0xc9, 0x0b, 0xc4, 0x2d, 0x84, 0x4f, 0x08, 0xe3, 0x9a, 0xc8, 0x66, 0x8a, 0x01, 0x26,
	0xc0, 0xf0, 0x7d, 0x30, 0xe6, 0x33, 0x39, 0x80, 0xa1, 0xc3, 0x39, 0xee, 0xf4, 0x36, 0x14, 0xc1,
	0xe0, 0x9f, 0xb3, 0x38, 0x7b, 0x0c, 0x3e, 0xa1, 0x83, 0x37, 0x22, 0x58, 0x3b, 0xef, 0xb1, 0x36,
	0x81, 0x93, 0x0f, 0xc0, 0x78, 0x8b, 0xb1, 0x49, 0xbc, 0x5c, 0x08, 0xb3, 0xb5, 0xc3, 0x6f, 0x1f,
	0x61, 0xa6, 0x7e, 0xd6, 0x66, 0x6a, 0xe0, 0xe1, 0xea, 0xb0, 0x2e, 0x07, 0x5e, 0xf8, 0x8e, 0xea,
	0xf2, 0xaa, 0xf0, 0xe6, 0x17, 0x66, 0xe7, 0xf1, 0xbe, 0x1d, 0xd5, 0xe5, 0xbc, 0x60, 0xc6, 0x63,
	0x65, 0x47, 0x02, 0xd0, 0x82, 0x2c, 0x76, 0xcb, 0xc1, 0x82, 0x1c, 0xba, 0x4d, 0xc7, 0xdd, 0xd8,
	0xb2, 0x71, 0x93, 0x89, 0x0b, 0xb2, 0x78, 0x37, 0x15, 0x0a, 0xf2, 0x29, 0x22, 0x4a, 0x58, 0x90,
	0x45, 0x40, 0x91, 0x05, 0xf9, 0x14, 0x61, 0x25, 0x29, 0xc8, 0x9d, 0x31, 0x71, 0x05, 0x39, 0x84,
	0x29, 0x41, 0x41, 0x8e, 0x7a, 0x04, 0x88, 0x2d, 0xc8, 0xa7, 0xe8, 0x78, 0xd2, 0x82, 0xdc, 0xd9,
	0x79, 0xbe, 0x20, 0x27, 0xf5, 0x3e, 0xa2, 0x20, 0xc7, 0xfc, 0xe8, 0x18, 0x5f, 0x90, 0x45, 0x64,
	0xa4, 0x20, 0x8b, 0xc6, 0xbc, 0x82, 0x1c, 0x42, 0x77, 0x4c, 0x41, 0xee, 0xe8, 0xb3, 0x57, 0x90,
	0x43, 0xe6, 0x22, 0x0a, 0xb2, 0x68, 0x62, 0xe9, 0x3f, 0xfd, 0xe0, 0x9c, 0xd0, 0xfc, 0xbf, 0x7f,
	0xa5, 0x95, 0xad, 0x57, 0xca, 0x65, 0xf1, 0xde, 0x1b, 0x73, 0xbf, 0xca, 0xc6, 0xcc, 0xa9, 0xaf,
	0x47, 0x50, 0x5f, 0xf5, 0xa8, 0x3f, 0xc5, 0x23, 0x14, 0x6e, 0x91, 0xf0, 0x53, 0xc9, 0xdb, 0x4f,
	0x8f, 0xf9, 0xa7, 0x85, 0xe6, 0x3b, 0x11, 0xb4, 0x5f, 0xa4, 0xb4, 0xff, 0x46, 0x0c, 0x98, 0xf6,
	0x21, 0xfb, 0x25, 0x0b, 0xd0, 0x2d, 0x84, 0x4f, 0x0b, 0xd2, 0x75, 0x91, 0xf2, 0x14, 0x0f, 0x4c,
	0x86, 0xe7, 0x07, 0x5e, 0x12, 0x22, 0x07, 0x5b, 0xc4, 0xd3, 0xe1, 0xc8, 0xc7, 0x3c, 0x22, 0x44,
	0xf0, 0xfd, 0x09, 0xdb, 0x05, 0x8f, 0xef, 0xa7, 0xe5, 0xf2, 0x9b, 0x11, 0x64, 0xbf, 0xe8, 0x91,
	0x3d, 0x99, 0xdb, 0xb6, 0x97, 0xe8, 0xa8, 0x63, 0x09, 0xfd, 0xbe, 0x14, 0xa6, 0x7a, 0xe7, 0x5f,
	0xfb, 0xc3, 0x4c, 0xff, 0x4b, 0x9b, 0xe9, 0xe2, 0x83, 0xc7, 0x61, 0x5d, 0x16, 0x5f, 0x89, 0x8e,
	0xea, 0xf2, 0xed, 0xf0, 0xd3, 0x51, 0x98, 0xe6, 0x89, 0xbc, 0x3d, 0xaa, 0xcb, 0xaf, 0x85, 0x8d,
	0x79, 0x24, 0x8f, 0xa3, 0x50, 0x71, 0xf8, 0x8b, 0x67, 0x33, 0xd2, 0x97, 0xcf, 0x66, 0xa4, 0x7f,
	0x3f, 0x9b, 0x91, 0xee, 0x49, 0x3b, 0x7d, 0xf4, 0x9f, 0x47, 0xae, 0xfe, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0x17, 0x34, 0x85, 0x65, 0x15, 0x23, 0x00, 0x00,
}
