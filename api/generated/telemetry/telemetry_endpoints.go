// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareFwlogPolicyV1Client add middleware to the client
type MiddlewareFwlogPolicyV1Client func(ServiceFwlogPolicyV1Client) ServiceFwlogPolicyV1Client

// EndpointsFwlogPolicyV1Client is the endpoints for the client
type EndpointsFwlogPolicyV1Client struct {
	Client FwlogPolicyV1Client

	AutoAddFwlogPolicyEndpoint    endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint    endpoint.Endpoint
	AutoListFwlogPolicyEndpoint   endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint endpoint.Endpoint
}

// EndpointsFwlogPolicyV1RestClient is the REST client
type EndpointsFwlogPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddFwlogPolicyEndpoint    endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint    endpoint.Endpoint
	AutoListFwlogPolicyEndpoint   endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint endpoint.Endpoint
	AutoWatchFwlogPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareFwlogPolicyV1Server adds middle ware to the server
type MiddlewareFwlogPolicyV1Server func(ServiceFwlogPolicyV1Server) ServiceFwlogPolicyV1Server

// EndpointsFwlogPolicyV1Server is the server endpoints
type EndpointsFwlogPolicyV1Server struct {
	AutoAddFwlogPolicyEndpoint    endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint    endpoint.Endpoint
	AutoListFwlogPolicyEndpoint   endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint endpoint.Endpoint

	watchHandlerFwlogPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddFwlogPolicy is endpoint for AutoAddFwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respFwlogPolicyV1AutoAddFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoDeleteFwlogPolicy is endpoint for AutoDeleteFwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respFwlogPolicyV1AutoDeleteFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoGetFwlogPolicy is endpoint for AutoGetFwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respFwlogPolicyV1AutoGetFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoListFwlogPolicy is endpoint for AutoListFwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (*FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicyList{}, err
	}
	return resp.(*FwlogPolicyList), nil
}

type respFwlogPolicyV1AutoListFwlogPolicy struct {
	V   FwlogPolicyList
	Err error
}

// AutoUpdateFwlogPolicy is endpoint for AutoUpdateFwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respFwlogPolicyV1AutoUpdateFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoWatchFwlogPolicy performs Watch for FwlogPolicy
func (e EndpointsFwlogPolicyV1Client) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (FwlogPolicyV1_AutoWatchFwlogPolicyClient, error) {
	return e.Client.AutoWatchFwlogPolicy(ctx, in)
}

// AutoAddFwlogPolicy implementation on server Endpoint
func (e EndpointsFwlogPolicyV1Server) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeFwlogPolicyV1AutoAddFwlogPolicyEndpoint creates  AutoAddFwlogPolicy endpoints for the service
func MakeFwlogPolicyV1AutoAddFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoAddFwlogPolicy(ctx, *req)
		return respFwlogPolicyV1AutoAddFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("FwlogPolicyV1:AutoAddFwlogPolicy")(f)
}

// AutoDeleteFwlogPolicy implementation on server Endpoint
func (e EndpointsFwlogPolicyV1Server) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeFwlogPolicyV1AutoDeleteFwlogPolicyEndpoint creates  AutoDeleteFwlogPolicy endpoints for the service
func MakeFwlogPolicyV1AutoDeleteFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoDeleteFwlogPolicy(ctx, *req)
		return respFwlogPolicyV1AutoDeleteFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("FwlogPolicyV1:AutoDeleteFwlogPolicy")(f)
}

// AutoGetFwlogPolicy implementation on server Endpoint
func (e EndpointsFwlogPolicyV1Server) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeFwlogPolicyV1AutoGetFwlogPolicyEndpoint creates  AutoGetFwlogPolicy endpoints for the service
func MakeFwlogPolicyV1AutoGetFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoGetFwlogPolicy(ctx, *req)
		return respFwlogPolicyV1AutoGetFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("FwlogPolicyV1:AutoGetFwlogPolicy")(f)
}

// AutoListFwlogPolicy implementation on server Endpoint
func (e EndpointsFwlogPolicyV1Server) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicyList{}, err
	}
	return *resp.(*FwlogPolicyList), nil
}

// MakeFwlogPolicyV1AutoListFwlogPolicyEndpoint creates  AutoListFwlogPolicy endpoints for the service
func MakeFwlogPolicyV1AutoListFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFwlogPolicy(ctx, *req)
		return respFwlogPolicyV1AutoListFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("FwlogPolicyV1:AutoListFwlogPolicy")(f)
}

// AutoUpdateFwlogPolicy implementation on server Endpoint
func (e EndpointsFwlogPolicyV1Server) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeFwlogPolicyV1AutoUpdateFwlogPolicyEndpoint creates  AutoUpdateFwlogPolicy endpoints for the service
func MakeFwlogPolicyV1AutoUpdateFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoUpdateFwlogPolicy(ctx, *req)
		return respFwlogPolicyV1AutoUpdateFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("FwlogPolicyV1:AutoUpdateFwlogPolicy")(f)
}

// AutoWatchFwlogPolicy is the watch handler for FwlogPolicy on the server side.
func (e EndpointsFwlogPolicyV1Server) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream FwlogPolicyV1_AutoWatchFwlogPolicyServer) error {
	return e.watchHandlerFwlogPolicy(in, stream)
}

// MakeAutoWatchFwlogPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchFwlogPolicyEndpoint(s ServiceFwlogPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(FwlogPolicyV1_AutoWatchFwlogPolicyServer)
		return s.AutoWatchFwlogPolicy(options, wstream)
	}
}

// MakeFwlogPolicyV1ServerEndpoints creates server endpoints
func MakeFwlogPolicyV1ServerEndpoints(s ServiceFwlogPolicyV1Server, logger log.Logger) EndpointsFwlogPolicyV1Server {
	return EndpointsFwlogPolicyV1Server{

		AutoAddFwlogPolicyEndpoint:    MakeFwlogPolicyV1AutoAddFwlogPolicyEndpoint(s, logger),
		AutoDeleteFwlogPolicyEndpoint: MakeFwlogPolicyV1AutoDeleteFwlogPolicyEndpoint(s, logger),
		AutoGetFwlogPolicyEndpoint:    MakeFwlogPolicyV1AutoGetFwlogPolicyEndpoint(s, logger),
		AutoListFwlogPolicyEndpoint:   MakeFwlogPolicyV1AutoListFwlogPolicyEndpoint(s, logger),
		AutoUpdateFwlogPolicyEndpoint: MakeFwlogPolicyV1AutoUpdateFwlogPolicyEndpoint(s, logger),

		watchHandlerFwlogPolicy: MakeAutoWatchFwlogPolicyEndpoint(s, logger),
	}
}

// LoggingFwlogPolicyV1MiddlewareClient adds middleware for the client
func LoggingFwlogPolicyV1MiddlewareClient(logger log.Logger) MiddlewareFwlogPolicyV1Client {
	return func(next ServiceFwlogPolicyV1Client) ServiceFwlogPolicyV1Client {
		return loggingFwlogPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingFwlogPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceFwlogPolicyV1Client
}

// LoggingFwlogPolicyV1MiddlewareServer adds middleware for the client
func LoggingFwlogPolicyV1MiddlewareServer(logger log.Logger) MiddlewareFwlogPolicyV1Server {
	return func(next ServiceFwlogPolicyV1Server) ServiceFwlogPolicyV1Server {
		return loggingFwlogPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingFwlogPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceFwlogPolicyV1Server
}

func (m loggingFwlogPolicyV1MiddlewareClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareClient) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}

func (m loggingFwlogPolicyV1MiddlewareClient) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp FwlogPolicyV1_AutoWatchFwlogPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchFwlogPolicy(ctx, in)
	return
}

func (m loggingFwlogPolicyV1MiddlewareServer) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareServer) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareServer) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareServer) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (resp FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingFwlogPolicyV1MiddlewareServer) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "FwlogPolicyV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}

func (m loggingFwlogPolicyV1MiddlewareServer) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream FwlogPolicyV1_AutoWatchFwlogPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "FwlogPolicyV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFwlogPolicy(in, stream)
	return
}
func (r *EndpointsFwlogPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIFwlogPolicyV1AutoAddFwlogPolicyCreateOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/fwlogPolicy", "/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIFwlogPolicyV1AutoDeleteFwlogPolicyDeleteOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/fwlogPolicy", "/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIFwlogPolicyV1AutoGetFwlogPolicyGetOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/fwlogPolicy", "/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIFwlogPolicyV1AutoListFwlogPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/fwlogPolicy", "/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIFwlogPolicyV1AutoUpdateFwlogPolicyUpdateOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/fwlogPolicy", "/", in.Tenant, "/fwlogPolicy/", in.Name)
}

// AutoAddFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIFwlogPolicyV1AutoAddFwlogPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespFwlogPolicyV1AutoAddFwlogPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), nil
}

// AutoUpdateFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIFwlogPolicyV1AutoUpdateFwlogPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespFwlogPolicyV1AutoUpdateFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoGetFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIFwlogPolicyV1AutoGetFwlogPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespFwlogPolicyV1AutoGetFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoDeleteFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIFwlogPolicyV1AutoDeleteFwlogPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespFwlogPolicyV1AutoDeleteFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoListFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoListFwlogPolicy(ctx context.Context, options *api.ListWatchOptions) (*FwlogPolicyList, error) {
	path := makeURIFwlogPolicyV1AutoListFwlogPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespFwlogPolicyV1AutoListFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicyList), err
}

// AutoWatchFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsFwlogPolicyV1RestClient) AutoWatchFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeFwlogPolicyV1RestClientEndpoints make REST client endpoints
func MakeFwlogPolicyV1RestClientEndpoints(instance string) (EndpointsFwlogPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsFwlogPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MiddlewareStatsPolicyV1Client add middleware to the client
type MiddlewareStatsPolicyV1Client func(ServiceStatsPolicyV1Client) ServiceStatsPolicyV1Client

// EndpointsStatsPolicyV1Client is the endpoints for the client
type EndpointsStatsPolicyV1Client struct {
	Client StatsPolicyV1Client

	AutoAddStatsPolicyEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint endpoint.Endpoint
	AutoGetStatsPolicyEndpoint    endpoint.Endpoint
	AutoListStatsPolicyEndpoint   endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint endpoint.Endpoint
}

// EndpointsStatsPolicyV1RestClient is the REST client
type EndpointsStatsPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddStatsPolicyEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint endpoint.Endpoint
	AutoGetStatsPolicyEndpoint    endpoint.Endpoint
	AutoListStatsPolicyEndpoint   endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint endpoint.Endpoint
	AutoWatchStatsPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareStatsPolicyV1Server adds middle ware to the server
type MiddlewareStatsPolicyV1Server func(ServiceStatsPolicyV1Server) ServiceStatsPolicyV1Server

// EndpointsStatsPolicyV1Server is the server endpoints
type EndpointsStatsPolicyV1Server struct {
	AutoAddStatsPolicyEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint endpoint.Endpoint
	AutoGetStatsPolicyEndpoint    endpoint.Endpoint
	AutoListStatsPolicyEndpoint   endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint endpoint.Endpoint

	watchHandlerStatsPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddStatsPolicy is endpoint for AutoAddStatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoAddStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respStatsPolicyV1AutoAddStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoDeleteStatsPolicy is endpoint for AutoDeleteStatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoDeleteStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respStatsPolicyV1AutoDeleteStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoGetStatsPolicy is endpoint for AutoGetStatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoGetStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respStatsPolicyV1AutoGetStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoListStatsPolicy is endpoint for AutoListStatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (*StatsPolicyList, error) {
	resp, err := e.AutoListStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicyList{}, err
	}
	return resp.(*StatsPolicyList), nil
}

type respStatsPolicyV1AutoListStatsPolicy struct {
	V   StatsPolicyList
	Err error
}

// AutoUpdateStatsPolicy is endpoint for AutoUpdateStatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoUpdateStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respStatsPolicyV1AutoUpdateStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoWatchStatsPolicy performs Watch for StatsPolicy
func (e EndpointsStatsPolicyV1Client) AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (StatsPolicyV1_AutoWatchStatsPolicyClient, error) {
	return e.Client.AutoWatchStatsPolicy(ctx, in)
}

// AutoAddStatsPolicy implementation on server Endpoint
func (e EndpointsStatsPolicyV1Server) AutoAddStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoAddStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeStatsPolicyV1AutoAddStatsPolicyEndpoint creates  AutoAddStatsPolicy endpoints for the service
func MakeStatsPolicyV1AutoAddStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoAddStatsPolicy(ctx, *req)
		return respStatsPolicyV1AutoAddStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StatsPolicyV1:AutoAddStatsPolicy")(f)
}

// AutoDeleteStatsPolicy implementation on server Endpoint
func (e EndpointsStatsPolicyV1Server) AutoDeleteStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoDeleteStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeStatsPolicyV1AutoDeleteStatsPolicyEndpoint creates  AutoDeleteStatsPolicy endpoints for the service
func MakeStatsPolicyV1AutoDeleteStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoDeleteStatsPolicy(ctx, *req)
		return respStatsPolicyV1AutoDeleteStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StatsPolicyV1:AutoDeleteStatsPolicy")(f)
}

// AutoGetStatsPolicy implementation on server Endpoint
func (e EndpointsStatsPolicyV1Server) AutoGetStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoGetStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeStatsPolicyV1AutoGetStatsPolicyEndpoint creates  AutoGetStatsPolicy endpoints for the service
func MakeStatsPolicyV1AutoGetStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoGetStatsPolicy(ctx, *req)
		return respStatsPolicyV1AutoGetStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StatsPolicyV1:AutoGetStatsPolicy")(f)
}

// AutoListStatsPolicy implementation on server Endpoint
func (e EndpointsStatsPolicyV1Server) AutoListStatsPolicy(ctx context.Context, in api.ListWatchOptions) (StatsPolicyList, error) {
	resp, err := e.AutoListStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicyList{}, err
	}
	return *resp.(*StatsPolicyList), nil
}

// MakeStatsPolicyV1AutoListStatsPolicyEndpoint creates  AutoListStatsPolicy endpoints for the service
func MakeStatsPolicyV1AutoListStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListStatsPolicy(ctx, *req)
		return respStatsPolicyV1AutoListStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StatsPolicyV1:AutoListStatsPolicy")(f)
}

// AutoUpdateStatsPolicy implementation on server Endpoint
func (e EndpointsStatsPolicyV1Server) AutoUpdateStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoUpdateStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeStatsPolicyV1AutoUpdateStatsPolicyEndpoint creates  AutoUpdateStatsPolicy endpoints for the service
func MakeStatsPolicyV1AutoUpdateStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoUpdateStatsPolicy(ctx, *req)
		return respStatsPolicyV1AutoUpdateStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("StatsPolicyV1:AutoUpdateStatsPolicy")(f)
}

// AutoWatchStatsPolicy is the watch handler for StatsPolicy on the server side.
func (e EndpointsStatsPolicyV1Server) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream StatsPolicyV1_AutoWatchStatsPolicyServer) error {
	return e.watchHandlerStatsPolicy(in, stream)
}

// MakeAutoWatchStatsPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchStatsPolicyEndpoint(s ServiceStatsPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(StatsPolicyV1_AutoWatchStatsPolicyServer)
		return s.AutoWatchStatsPolicy(options, wstream)
	}
}

// MakeStatsPolicyV1ServerEndpoints creates server endpoints
func MakeStatsPolicyV1ServerEndpoints(s ServiceStatsPolicyV1Server, logger log.Logger) EndpointsStatsPolicyV1Server {
	return EndpointsStatsPolicyV1Server{

		AutoAddStatsPolicyEndpoint:    MakeStatsPolicyV1AutoAddStatsPolicyEndpoint(s, logger),
		AutoDeleteStatsPolicyEndpoint: MakeStatsPolicyV1AutoDeleteStatsPolicyEndpoint(s, logger),
		AutoGetStatsPolicyEndpoint:    MakeStatsPolicyV1AutoGetStatsPolicyEndpoint(s, logger),
		AutoListStatsPolicyEndpoint:   MakeStatsPolicyV1AutoListStatsPolicyEndpoint(s, logger),
		AutoUpdateStatsPolicyEndpoint: MakeStatsPolicyV1AutoUpdateStatsPolicyEndpoint(s, logger),

		watchHandlerStatsPolicy: MakeAutoWatchStatsPolicyEndpoint(s, logger),
	}
}

// LoggingStatsPolicyV1MiddlewareClient adds middleware for the client
func LoggingStatsPolicyV1MiddlewareClient(logger log.Logger) MiddlewareStatsPolicyV1Client {
	return func(next ServiceStatsPolicyV1Client) ServiceStatsPolicyV1Client {
		return loggingStatsPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingStatsPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceStatsPolicyV1Client
}

// LoggingStatsPolicyV1MiddlewareServer adds middleware for the client
func LoggingStatsPolicyV1MiddlewareServer(logger log.Logger) MiddlewareStatsPolicyV1Server {
	return func(next ServiceStatsPolicyV1Server) ServiceStatsPolicyV1Server {
		return loggingStatsPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingStatsPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceStatsPolicyV1Server
}

func (m loggingStatsPolicyV1MiddlewareClient) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoAddStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareClient) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoDeleteStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareClient) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoGetStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareClient) AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *StatsPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoListStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareClient) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoUpdateStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStatsPolicy(ctx, in)
	return
}

func (m loggingStatsPolicyV1MiddlewareClient) AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (resp StatsPolicyV1_AutoWatchStatsPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoWatchStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchStatsPolicy(ctx, in)
	return
}

func (m loggingStatsPolicyV1MiddlewareServer) AutoAddStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoAddStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareServer) AutoDeleteStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoDeleteStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareServer) AutoGetStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoGetStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareServer) AutoListStatsPolicy(ctx context.Context, in api.ListWatchOptions) (resp StatsPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoListStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStatsPolicy(ctx, in)
	return
}
func (m loggingStatsPolicyV1MiddlewareServer) AutoUpdateStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "StatsPolicyV1", "method", "AutoUpdateStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStatsPolicy(ctx, in)
	return
}

func (m loggingStatsPolicyV1MiddlewareServer) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream StatsPolicyV1_AutoWatchStatsPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "StatsPolicyV1", "method", "AutoWatchStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchStatsPolicy(in, stream)
	return
}
func (r *EndpointsStatsPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIStatsPolicyV1AutoAddStatsPolicyCreateOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/statsPolicy", "/", in.Tenant, "/statsPolicy")
}

//
func makeURIStatsPolicyV1AutoDeleteStatsPolicyDeleteOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/statsPolicy", "/", in.Tenant, "/statsPolicy/", in.Name)
}

//
func makeURIStatsPolicyV1AutoGetStatsPolicyGetOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/statsPolicy", "/", in.Tenant, "/statsPolicy/", in.Name)
}

//
func makeURIStatsPolicyV1AutoListStatsPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/statsPolicy", "/", in.Tenant, "/statsPolicy")
}

//
func makeURIStatsPolicyV1AutoUpdateStatsPolicyUpdateOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/statsPolicy", "/", in.Tenant, "/statsPolicy/", in.Name)
}

// AutoAddStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIStatsPolicyV1AutoAddStatsPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespStatsPolicyV1AutoAddStatsPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), nil
}

// AutoUpdateStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIStatsPolicyV1AutoUpdateStatsPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespStatsPolicyV1AutoUpdateStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), err
}

// AutoGetStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIStatsPolicyV1AutoGetStatsPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespStatsPolicyV1AutoGetStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), err
}

// AutoDeleteStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIStatsPolicyV1AutoDeleteStatsPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespStatsPolicyV1AutoDeleteStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), err
}

// AutoListStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoListStatsPolicy(ctx context.Context, options *api.ListWatchOptions) (*StatsPolicyList, error) {
	path := makeURIStatsPolicyV1AutoListStatsPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespStatsPolicyV1AutoListStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicyList), err
}

// AutoWatchStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsStatsPolicyV1RestClient) AutoWatchStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeStatsPolicyV1RestClientEndpoints make REST client endpoints
func MakeStatsPolicyV1RestClientEndpoints(instance string) (EndpointsStatsPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsStatsPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
