// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareCollectionPolicyV1Client add middleware to the client
type MiddlewareCollectionPolicyV1Client func(ServiceCollectionPolicyV1Client) ServiceCollectionPolicyV1Client

// EndpointsCollectionPolicyV1Client is the endpoints for the client
type EndpointsCollectionPolicyV1Client struct {
	Client CollectionPolicyV1Client

	AutoAddCollectionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteCollectionPolicyEndpoint endpoint.Endpoint
	AutoGetCollectionPolicyEndpoint    endpoint.Endpoint
	AutoListCollectionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateCollectionPolicyEndpoint endpoint.Endpoint
}

// EndpointsCollectionPolicyV1RestClient is the REST client
type EndpointsCollectionPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddCollectionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteCollectionPolicyEndpoint endpoint.Endpoint
	AutoGetCollectionPolicyEndpoint    endpoint.Endpoint
	AutoListCollectionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateCollectionPolicyEndpoint endpoint.Endpoint
	AutoWatchCollectionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareCollectionPolicyV1Server adds middle ware to the server
type MiddlewareCollectionPolicyV1Server func(ServiceCollectionPolicyV1Server) ServiceCollectionPolicyV1Server

// EndpointsCollectionPolicyV1Server is the server endpoints
type EndpointsCollectionPolicyV1Server struct {
	AutoAddCollectionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteCollectionPolicyEndpoint endpoint.Endpoint
	AutoGetCollectionPolicyEndpoint    endpoint.Endpoint
	AutoListCollectionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateCollectionPolicyEndpoint endpoint.Endpoint

	watchHandlerCollectionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddCollectionPolicy is endpoint for AutoAddCollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	resp, err := e.AutoAddCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return &CollectionPolicy{}, err
	}
	return resp.(*CollectionPolicy), nil
}

type respCollectionPolicyV1AutoAddCollectionPolicy struct {
	V   CollectionPolicy
	Err error
}

// AutoDeleteCollectionPolicy is endpoint for AutoDeleteCollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	resp, err := e.AutoDeleteCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return &CollectionPolicy{}, err
	}
	return resp.(*CollectionPolicy), nil
}

type respCollectionPolicyV1AutoDeleteCollectionPolicy struct {
	V   CollectionPolicy
	Err error
}

// AutoGetCollectionPolicy is endpoint for AutoGetCollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	resp, err := e.AutoGetCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return &CollectionPolicy{}, err
	}
	return resp.(*CollectionPolicy), nil
}

type respCollectionPolicyV1AutoGetCollectionPolicy struct {
	V   CollectionPolicy
	Err error
}

// AutoListCollectionPolicy is endpoint for AutoListCollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions) (*CollectionPolicyList, error) {
	resp, err := e.AutoListCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return &CollectionPolicyList{}, err
	}
	return resp.(*CollectionPolicyList), nil
}

type respCollectionPolicyV1AutoListCollectionPolicy struct {
	V   CollectionPolicyList
	Err error
}

// AutoUpdateCollectionPolicy is endpoint for AutoUpdateCollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	resp, err := e.AutoUpdateCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return &CollectionPolicy{}, err
	}
	return resp.(*CollectionPolicy), nil
}

type respCollectionPolicyV1AutoUpdateCollectionPolicy struct {
	V   CollectionPolicy
	Err error
}

// AutoWatchCollectionPolicy performs Watch for CollectionPolicy
func (e EndpointsCollectionPolicyV1Client) AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions) (CollectionPolicyV1_AutoWatchCollectionPolicyClient, error) {
	return e.Client.AutoWatchCollectionPolicy(ctx, in)
}

// AutoAddCollectionPolicy implementation on server Endpoint
func (e EndpointsCollectionPolicyV1Server) AutoAddCollectionPolicy(ctx context.Context, in CollectionPolicy) (CollectionPolicy, error) {
	resp, err := e.AutoAddCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return CollectionPolicy{}, err
	}
	return *resp.(*CollectionPolicy), nil
}

// MakeCollectionPolicyV1AutoAddCollectionPolicyEndpoint creates  AutoAddCollectionPolicy endpoints for the service
func MakeCollectionPolicyV1AutoAddCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CollectionPolicy)
		v, err := s.AutoAddCollectionPolicy(ctx, *req)
		return respCollectionPolicyV1AutoAddCollectionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoAddCollectionPolicy")(f)
}

// AutoDeleteCollectionPolicy implementation on server Endpoint
func (e EndpointsCollectionPolicyV1Server) AutoDeleteCollectionPolicy(ctx context.Context, in CollectionPolicy) (CollectionPolicy, error) {
	resp, err := e.AutoDeleteCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return CollectionPolicy{}, err
	}
	return *resp.(*CollectionPolicy), nil
}

// MakeCollectionPolicyV1AutoDeleteCollectionPolicyEndpoint creates  AutoDeleteCollectionPolicy endpoints for the service
func MakeCollectionPolicyV1AutoDeleteCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CollectionPolicy)
		v, err := s.AutoDeleteCollectionPolicy(ctx, *req)
		return respCollectionPolicyV1AutoDeleteCollectionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoDeleteCollectionPolicy")(f)
}

// AutoGetCollectionPolicy implementation on server Endpoint
func (e EndpointsCollectionPolicyV1Server) AutoGetCollectionPolicy(ctx context.Context, in CollectionPolicy) (CollectionPolicy, error) {
	resp, err := e.AutoGetCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return CollectionPolicy{}, err
	}
	return *resp.(*CollectionPolicy), nil
}

// MakeCollectionPolicyV1AutoGetCollectionPolicyEndpoint creates  AutoGetCollectionPolicy endpoints for the service
func MakeCollectionPolicyV1AutoGetCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CollectionPolicy)
		v, err := s.AutoGetCollectionPolicy(ctx, *req)
		return respCollectionPolicyV1AutoGetCollectionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoGetCollectionPolicy")(f)
}

// AutoListCollectionPolicy implementation on server Endpoint
func (e EndpointsCollectionPolicyV1Server) AutoListCollectionPolicy(ctx context.Context, in api.ListWatchOptions) (CollectionPolicyList, error) {
	resp, err := e.AutoListCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return CollectionPolicyList{}, err
	}
	return *resp.(*CollectionPolicyList), nil
}

// MakeCollectionPolicyV1AutoListCollectionPolicyEndpoint creates  AutoListCollectionPolicy endpoints for the service
func MakeCollectionPolicyV1AutoListCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCollectionPolicy(ctx, *req)
		return respCollectionPolicyV1AutoListCollectionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoListCollectionPolicy")(f)
}

// AutoUpdateCollectionPolicy implementation on server Endpoint
func (e EndpointsCollectionPolicyV1Server) AutoUpdateCollectionPolicy(ctx context.Context, in CollectionPolicy) (CollectionPolicy, error) {
	resp, err := e.AutoUpdateCollectionPolicyEndpoint(ctx, in)
	if err != nil {
		return CollectionPolicy{}, err
	}
	return *resp.(*CollectionPolicy), nil
}

// MakeCollectionPolicyV1AutoUpdateCollectionPolicyEndpoint creates  AutoUpdateCollectionPolicy endpoints for the service
func MakeCollectionPolicyV1AutoUpdateCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CollectionPolicy)
		v, err := s.AutoUpdateCollectionPolicy(ctx, *req)
		return respCollectionPolicyV1AutoUpdateCollectionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoUpdateCollectionPolicy")(f)
}

// AutoWatchCollectionPolicy is the watch handler for CollectionPolicy on the server side.
func (e EndpointsCollectionPolicyV1Server) AutoWatchCollectionPolicy(in *api.ListWatchOptions, stream CollectionPolicyV1_AutoWatchCollectionPolicyServer) error {
	return e.watchHandlerCollectionPolicy(in, stream)
}

// MakeAutoWatchCollectionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchCollectionPolicyEndpoint(s ServiceCollectionPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(CollectionPolicyV1_AutoWatchCollectionPolicyServer)
		return s.AutoWatchCollectionPolicy(options, wstream)
	}
}

// MakeCollectionPolicyV1ServerEndpoints creates server endpoints
func MakeCollectionPolicyV1ServerEndpoints(s ServiceCollectionPolicyV1Server, logger log.Logger) EndpointsCollectionPolicyV1Server {
	return EndpointsCollectionPolicyV1Server{

		AutoAddCollectionPolicyEndpoint:    MakeCollectionPolicyV1AutoAddCollectionPolicyEndpoint(s, logger),
		AutoDeleteCollectionPolicyEndpoint: MakeCollectionPolicyV1AutoDeleteCollectionPolicyEndpoint(s, logger),
		AutoGetCollectionPolicyEndpoint:    MakeCollectionPolicyV1AutoGetCollectionPolicyEndpoint(s, logger),
		AutoListCollectionPolicyEndpoint:   MakeCollectionPolicyV1AutoListCollectionPolicyEndpoint(s, logger),
		AutoUpdateCollectionPolicyEndpoint: MakeCollectionPolicyV1AutoUpdateCollectionPolicyEndpoint(s, logger),

		watchHandlerCollectionPolicy: MakeAutoWatchCollectionPolicyEndpoint(s, logger),
	}
}

// LoggingCollectionPolicyV1MiddlewareClient adds middleware for the client
func LoggingCollectionPolicyV1MiddlewareClient(logger log.Logger) MiddlewareCollectionPolicyV1Client {
	return func(next ServiceCollectionPolicyV1Client) ServiceCollectionPolicyV1Client {
		return loggingCollectionPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCollectionPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceCollectionPolicyV1Client
}

// LoggingCollectionPolicyV1MiddlewareServer adds middleware for the client
func LoggingCollectionPolicyV1MiddlewareServer(logger log.Logger) MiddlewareCollectionPolicyV1Server {
	return func(next ServiceCollectionPolicyV1Server) ServiceCollectionPolicyV1Server {
		return loggingCollectionPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCollectionPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceCollectionPolicyV1Server
}

func (m loggingCollectionPolicyV1MiddlewareClient) AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy) (resp *CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoAddCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareClient) AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy) (resp *CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoDeleteCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareClient) AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy) (resp *CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoGetCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareClient) AutoListCollectionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *CollectionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoListCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareClient) AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy) (resp *CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoUpdateCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCollectionPolicy(ctx, in)
	return
}

func (m loggingCollectionPolicyV1MiddlewareClient) AutoWatchCollectionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp CollectionPolicyV1_AutoWatchCollectionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoWatchCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCollectionPolicy(ctx, in)
	return
}

func (m loggingCollectionPolicyV1MiddlewareServer) AutoAddCollectionPolicy(ctx context.Context, in CollectionPolicy) (resp CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoAddCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareServer) AutoDeleteCollectionPolicy(ctx context.Context, in CollectionPolicy) (resp CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoDeleteCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareServer) AutoGetCollectionPolicy(ctx context.Context, in CollectionPolicy) (resp CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoGetCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareServer) AutoListCollectionPolicy(ctx context.Context, in api.ListWatchOptions) (resp CollectionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoListCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCollectionPolicy(ctx, in)
	return
}
func (m loggingCollectionPolicyV1MiddlewareServer) AutoUpdateCollectionPolicy(ctx context.Context, in CollectionPolicy) (resp CollectionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CollectionPolicyV1", "method", "AutoUpdateCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCollectionPolicy(ctx, in)
	return
}

func (m loggingCollectionPolicyV1MiddlewareServer) AutoWatchCollectionPolicy(in *api.ListWatchOptions, stream CollectionPolicyV1_AutoWatchCollectionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "CollectionPolicyV1", "method", "AutoWatchCollectionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCollectionPolicy(in, stream)
	return
}
func (r *EndpointsCollectionPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURICollectionPolicyV1AutoAddCollectionPolicyCreateOper(in *CollectionPolicy) string {
	return fmt.Sprint("/v1/collectionPolicy", "/", in.Tenant, "/collectionPolicy")
}

//
func makeURICollectionPolicyV1AutoDeleteCollectionPolicyDeleteOper(in *CollectionPolicy) string {
	return fmt.Sprint("/v1/collectionPolicy", "/", in.Tenant, "/collectionPolicy/", in.Name)
}

//
func makeURICollectionPolicyV1AutoGetCollectionPolicyGetOper(in *CollectionPolicy) string {
	return fmt.Sprint("/v1/collectionPolicy", "/", in.Tenant, "/collectionPolicy/", in.Name)
}

//
func makeURICollectionPolicyV1AutoUpdateCollectionPolicyUpdateOper(in *CollectionPolicy) string {
	return fmt.Sprint("/v1/collectionPolicy", "/", in.Tenant, "/collectionPolicy/", in.Name)
}

// AutoAddCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoAddCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	path := makeURICollectionPolicyV1AutoAddCollectionPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCollectionPolicyV1AutoAddCollectionPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*CollectionPolicy), nil
}

// AutoUpdateCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoUpdateCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	path := makeURICollectionPolicyV1AutoUpdateCollectionPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCollectionPolicyV1AutoUpdateCollectionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CollectionPolicy), err
}

// AutoGetCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoGetCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	path := makeURICollectionPolicyV1AutoGetCollectionPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCollectionPolicyV1AutoGetCollectionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CollectionPolicy), err
}

// AutoDeleteCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoDeleteCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	path := makeURICollectionPolicyV1AutoDeleteCollectionPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCollectionPolicyV1AutoDeleteCollectionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*CollectionPolicy), err
}

// AutoListCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoListCollectionPolicy(ctx context.Context, options *api.ListWatchOptions) (*CollectionPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchCollectionPolicy CRUD method for CollectionPolicy
func (r *EndpointsCollectionPolicyV1RestClient) AutoWatchCollectionPolicy(ctx context.Context, in *CollectionPolicy) (*CollectionPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeCollectionPolicyV1RestClientEndpoints make REST client endpoints
func MakeCollectionPolicyV1RestClientEndpoints(instance string) (EndpointsCollectionPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsCollectionPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MiddlewareExportPolicyV1Client add middleware to the client
type MiddlewareExportPolicyV1Client func(ServiceExportPolicyV1Client) ServiceExportPolicyV1Client

// EndpointsExportPolicyV1Client is the endpoints for the client
type EndpointsExportPolicyV1Client struct {
	Client ExportPolicyV1Client

	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint
}

// EndpointsExportPolicyV1RestClient is the REST client
type EndpointsExportPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint
	AutoWatchExportPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareExportPolicyV1Server adds middle ware to the server
type MiddlewareExportPolicyV1Server func(ServiceExportPolicyV1Server) ServiceExportPolicyV1Server

// EndpointsExportPolicyV1Server is the server endpoints
type EndpointsExportPolicyV1Server struct {
	AutoAddExportPolicyEndpoint    endpoint.Endpoint
	AutoDeleteExportPolicyEndpoint endpoint.Endpoint
	AutoGetExportPolicyEndpoint    endpoint.Endpoint
	AutoListExportPolicyEndpoint   endpoint.Endpoint
	AutoUpdateExportPolicyEndpoint endpoint.Endpoint

	watchHandlerExportPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddExportPolicy is endpoint for AutoAddExportPolicy
func (e EndpointsExportPolicyV1Client) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoAddExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoAddExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoDeleteExportPolicy is endpoint for AutoDeleteExportPolicy
func (e EndpointsExportPolicyV1Client) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoDeleteExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoDeleteExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoGetExportPolicy is endpoint for AutoGetExportPolicy
func (e EndpointsExportPolicyV1Client) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoGetExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoGetExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoListExportPolicy is endpoint for AutoListExportPolicy
func (e EndpointsExportPolicyV1Client) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions) (*ExportPolicyList, error) {
	resp, err := e.AutoListExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicyList{}, err
	}
	return resp.(*ExportPolicyList), nil
}

type respExportPolicyV1AutoListExportPolicy struct {
	V   ExportPolicyList
	Err error
}

// AutoUpdateExportPolicy is endpoint for AutoUpdateExportPolicy
func (e EndpointsExportPolicyV1Client) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	resp, err := e.AutoUpdateExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &ExportPolicy{}, err
	}
	return resp.(*ExportPolicy), nil
}

type respExportPolicyV1AutoUpdateExportPolicy struct {
	V   ExportPolicy
	Err error
}

// AutoWatchExportPolicy performs Watch for ExportPolicy
func (e EndpointsExportPolicyV1Client) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions) (ExportPolicyV1_AutoWatchExportPolicyClient, error) {
	return e.Client.AutoWatchExportPolicy(ctx, in)
}

// AutoAddExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoAddExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoAddExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoAddExportPolicyEndpoint creates  AutoAddExportPolicy endpoints for the service
func MakeExportPolicyV1AutoAddExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoAddExportPolicy(ctx, *req)
		return respExportPolicyV1AutoAddExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoAddExportPolicy")(f)
}

// AutoDeleteExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoDeleteExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoDeleteExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoDeleteExportPolicyEndpoint creates  AutoDeleteExportPolicy endpoints for the service
func MakeExportPolicyV1AutoDeleteExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoDeleteExportPolicy(ctx, *req)
		return respExportPolicyV1AutoDeleteExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoDeleteExportPolicy")(f)
}

// AutoGetExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoGetExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoGetExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoGetExportPolicyEndpoint creates  AutoGetExportPolicy endpoints for the service
func MakeExportPolicyV1AutoGetExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoGetExportPolicy(ctx, *req)
		return respExportPolicyV1AutoGetExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoGetExportPolicy")(f)
}

// AutoListExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoListExportPolicy(ctx context.Context, in api.ListWatchOptions) (ExportPolicyList, error) {
	resp, err := e.AutoListExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicyList{}, err
	}
	return *resp.(*ExportPolicyList), nil
}

// MakeExportPolicyV1AutoListExportPolicyEndpoint creates  AutoListExportPolicy endpoints for the service
func MakeExportPolicyV1AutoListExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListExportPolicy(ctx, *req)
		return respExportPolicyV1AutoListExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoListExportPolicy")(f)
}

// AutoUpdateExportPolicy implementation on server Endpoint
func (e EndpointsExportPolicyV1Server) AutoUpdateExportPolicy(ctx context.Context, in ExportPolicy) (ExportPolicy, error) {
	resp, err := e.AutoUpdateExportPolicyEndpoint(ctx, in)
	if err != nil {
		return ExportPolicy{}, err
	}
	return *resp.(*ExportPolicy), nil
}

// MakeExportPolicyV1AutoUpdateExportPolicyEndpoint creates  AutoUpdateExportPolicy endpoints for the service
func MakeExportPolicyV1AutoUpdateExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ExportPolicy)
		v, err := s.AutoUpdateExportPolicy(ctx, *req)
		return respExportPolicyV1AutoUpdateExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoUpdateExportPolicy")(f)
}

// AutoWatchExportPolicy is the watch handler for ExportPolicy on the server side.
func (e EndpointsExportPolicyV1Server) AutoWatchExportPolicy(in *api.ListWatchOptions, stream ExportPolicyV1_AutoWatchExportPolicyServer) error {
	return e.watchHandlerExportPolicy(in, stream)
}

// MakeAutoWatchExportPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchExportPolicyEndpoint(s ServiceExportPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(ExportPolicyV1_AutoWatchExportPolicyServer)
		return s.AutoWatchExportPolicy(options, wstream)
	}
}

// MakeExportPolicyV1ServerEndpoints creates server endpoints
func MakeExportPolicyV1ServerEndpoints(s ServiceExportPolicyV1Server, logger log.Logger) EndpointsExportPolicyV1Server {
	return EndpointsExportPolicyV1Server{

		AutoAddExportPolicyEndpoint:    MakeExportPolicyV1AutoAddExportPolicyEndpoint(s, logger),
		AutoDeleteExportPolicyEndpoint: MakeExportPolicyV1AutoDeleteExportPolicyEndpoint(s, logger),
		AutoGetExportPolicyEndpoint:    MakeExportPolicyV1AutoGetExportPolicyEndpoint(s, logger),
		AutoListExportPolicyEndpoint:   MakeExportPolicyV1AutoListExportPolicyEndpoint(s, logger),
		AutoUpdateExportPolicyEndpoint: MakeExportPolicyV1AutoUpdateExportPolicyEndpoint(s, logger),

		watchHandlerExportPolicy: MakeAutoWatchExportPolicyEndpoint(s, logger),
	}
}

// LoggingExportPolicyV1MiddlewareClient adds middleware for the client
func LoggingExportPolicyV1MiddlewareClient(logger log.Logger) MiddlewareExportPolicyV1Client {
	return func(next ServiceExportPolicyV1Client) ServiceExportPolicyV1Client {
		return loggingExportPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingExportPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceExportPolicyV1Client
}

// LoggingExportPolicyV1MiddlewareServer adds middleware for the client
func LoggingExportPolicyV1MiddlewareServer(logger log.Logger) MiddlewareExportPolicyV1Server {
	return func(next ServiceExportPolicyV1Server) ServiceExportPolicyV1Server {
		return loggingExportPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingExportPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceExportPolicyV1Server
}

func (m loggingExportPolicyV1MiddlewareClient) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoAddExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoDeleteExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoGetExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoListExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *ExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoListExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareClient) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (resp *ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoUpdateExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareClient) AutoWatchExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp ExportPolicyV1_AutoWatchExportPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoWatchExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareServer) AutoAddExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoAddExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoDeleteExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoDeleteExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoGetExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoGetExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoListExportPolicy(ctx context.Context, in api.ListWatchOptions) (resp ExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoListExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListExportPolicy(ctx, in)
	return
}
func (m loggingExportPolicyV1MiddlewareServer) AutoUpdateExportPolicy(ctx context.Context, in ExportPolicy) (resp ExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "ExportPolicyV1", "method", "AutoUpdateExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateExportPolicy(ctx, in)
	return
}

func (m loggingExportPolicyV1MiddlewareServer) AutoWatchExportPolicy(in *api.ListWatchOptions, stream ExportPolicyV1_AutoWatchExportPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "ExportPolicyV1", "method", "AutoWatchExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchExportPolicy(in, stream)
	return
}
func (r *EndpointsExportPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIExportPolicyV1AutoAddExportPolicyCreateOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy")
}

//
func makeURIExportPolicyV1AutoDeleteExportPolicyDeleteOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

//
func makeURIExportPolicyV1AutoGetExportPolicyGetOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

//
func makeURIExportPolicyV1AutoUpdateExportPolicyUpdateOper(in *ExportPolicy) string {
	return fmt.Sprint("/v1/exportPolicy", "/", in.Tenant, "/exportPolicy/", in.Name)
}

// AutoAddExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoAddExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoAddExportPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoAddExportPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), nil
}

// AutoUpdateExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoUpdateExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoUpdateExportPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoUpdateExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoGetExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoGetExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoGetExportPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoGetExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoDeleteExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoDeleteExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	path := makeURIExportPolicyV1AutoDeleteExportPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespExportPolicyV1AutoDeleteExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ExportPolicy), err
}

// AutoListExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoListExportPolicy(ctx context.Context, options *api.ListWatchOptions) (*ExportPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchExportPolicy CRUD method for ExportPolicy
func (r *EndpointsExportPolicyV1RestClient) AutoWatchExportPolicy(ctx context.Context, in *ExportPolicy) (*ExportPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeExportPolicyV1RestClientEndpoints make REST client endpoints
func MakeExportPolicyV1RestClientEndpoints(instance string) (EndpointsExportPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsExportPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MiddlewareMonitoringPolicyV1Client add middleware to the client
type MiddlewareMonitoringPolicyV1Client func(ServiceMonitoringPolicyV1Client) ServiceMonitoringPolicyV1Client

// EndpointsMonitoringPolicyV1Client is the endpoints for the client
type EndpointsMonitoringPolicyV1Client struct {
	Client MonitoringPolicyV1Client

	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
}

// EndpointsMonitoringPolicyV1RestClient is the REST client
type EndpointsMonitoringPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
	AutoWatchMonitoringPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareMonitoringPolicyV1Server adds middle ware to the server
type MiddlewareMonitoringPolicyV1Server func(ServiceMonitoringPolicyV1Server) ServiceMonitoringPolicyV1Server

// EndpointsMonitoringPolicyV1Server is the server endpoints
type EndpointsMonitoringPolicyV1Server struct {
	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint

	watchHandlerMonitoringPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddMonitoringPolicy is endpoint for AutoAddMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoAddMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoAddMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoDeleteMonitoringPolicy is endpoint for AutoDeleteMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoDeleteMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoDeleteMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoGetMonitoringPolicy is endpoint for AutoGetMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoGetMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoGetMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoListMonitoringPolicy is endpoint for AutoListMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	resp, err := e.AutoListMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicyList{}, err
	}
	return resp.(*MonitoringPolicyList), nil
}

type respMonitoringPolicyV1AutoListMonitoringPolicy struct {
	V   MonitoringPolicyList
	Err error
}

// AutoUpdateMonitoringPolicy is endpoint for AutoUpdateMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoUpdateMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoUpdateMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoWatchMonitoringPolicy performs Watch for MonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error) {
	return e.Client.AutoWatchMonitoringPolicy(ctx, in)
}

// AutoAddMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoAddMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoAddMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint creates  AutoAddMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoAddMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoAddMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoAddMonitoringPolicy")(f)
}

// AutoDeleteMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoDeleteMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoDeleteMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint creates  AutoDeleteMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoDeleteMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoDeleteMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoDeleteMonitoringPolicy")(f)
}

// AutoGetMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoGetMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoGetMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint creates  AutoGetMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoGetMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoGetMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoGetMonitoringPolicy")(f)
}

// AutoListMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoListMonitoringPolicy(ctx context.Context, in api.ListWatchOptions) (MonitoringPolicyList, error) {
	resp, err := e.AutoListMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicyList{}, err
	}
	return *resp.(*MonitoringPolicyList), nil
}

// MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint creates  AutoListMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoListMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoListMonitoringPolicy")(f)
}

// AutoUpdateMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoUpdateMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoUpdateMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint creates  AutoUpdateMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoUpdateMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoUpdateMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoUpdateMonitoringPolicy")(f)
}

// AutoWatchMonitoringPolicy is the watch handler for MonitoringPolicy on the server side.
func (e EndpointsMonitoringPolicyV1Server) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return e.watchHandlerMonitoringPolicy(in, stream)
}

// MakeAutoWatchMonitoringPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringPolicyV1_AutoWatchMonitoringPolicyServer)
		return s.AutoWatchMonitoringPolicy(options, wstream)
	}
}

// MakeMonitoringPolicyV1ServerEndpoints creates server endpoints
func MakeMonitoringPolicyV1ServerEndpoints(s ServiceMonitoringPolicyV1Server, logger log.Logger) EndpointsMonitoringPolicyV1Server {
	return EndpointsMonitoringPolicyV1Server{

		AutoAddMonitoringPolicyEndpoint:    MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint(s, logger),
		AutoDeleteMonitoringPolicyEndpoint: MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint(s, logger),
		AutoGetMonitoringPolicyEndpoint:    MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint(s, logger),
		AutoListMonitoringPolicyEndpoint:   MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint(s, logger),
		AutoUpdateMonitoringPolicyEndpoint: MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint(s, logger),

		watchHandlerMonitoringPolicy: MakeAutoWatchMonitoringPolicyEndpoint(s, logger),
	}
}

// LoggingMonitoringPolicyV1MiddlewareClient adds middleware for the client
func LoggingMonitoringPolicyV1MiddlewareClient(logger log.Logger) MiddlewareMonitoringPolicyV1Client {
	return func(next ServiceMonitoringPolicyV1Client) ServiceMonitoringPolicyV1Client {
		return loggingMonitoringPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceMonitoringPolicyV1Client
}

// LoggingMonitoringPolicyV1MiddlewareServer adds middleware for the client
func LoggingMonitoringPolicyV1MiddlewareServer(logger log.Logger) MiddlewareMonitoringPolicyV1Server {
	return func(next ServiceMonitoringPolicyV1Server) ServiceMonitoringPolicyV1Server {
		return loggingMonitoringPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceMonitoringPolicyV1Server
}

func (m loggingMonitoringPolicyV1MiddlewareClient) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoAddMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoDeleteMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoGetMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *MonitoringPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoListMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoUpdateMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareClient) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoWatchMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareServer) AutoAddMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoAddMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoDeleteMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoDeleteMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoGetMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoGetMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoListMonitoringPolicy(ctx context.Context, in api.ListWatchOptions) (resp MonitoringPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoListMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoUpdateMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoUpdateMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareServer) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringPolicyV1", "method", "AutoWatchMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchMonitoringPolicy(in, stream)
	return
}
func (r *EndpointsMonitoringPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIMonitoringPolicyV1AutoAddMonitoringPolicyCreateOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy")
}

//
func makeURIMonitoringPolicyV1AutoDeleteMonitoringPolicyDeleteOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

//
func makeURIMonitoringPolicyV1AutoGetMonitoringPolicyGetOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

//
func makeURIMonitoringPolicyV1AutoUpdateMonitoringPolicyUpdateOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

// AutoAddMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoAddMonitoringPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoAddMonitoringPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), nil
}

// AutoUpdateMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoUpdateMonitoringPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoUpdateMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoGetMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoGetMonitoringPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoGetMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoDeleteMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoDeleteMonitoringPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoDeleteMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoListMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoListMonitoringPolicy(ctx context.Context, options *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoWatchMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeMonitoringPolicyV1RestClientEndpoints make REST client endpoints
func MakeMonitoringPolicyV1RestClientEndpoints(instance string) (EndpointsMonitoringPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsMonitoringPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MiddlewareRetentionPolicyV1Client add middleware to the client
type MiddlewareRetentionPolicyV1Client func(ServiceRetentionPolicyV1Client) ServiceRetentionPolicyV1Client

// EndpointsRetentionPolicyV1Client is the endpoints for the client
type EndpointsRetentionPolicyV1Client struct {
	Client RetentionPolicyV1Client

	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
}

// EndpointsRetentionPolicyV1RestClient is the REST client
type EndpointsRetentionPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
	AutoWatchRetentionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareRetentionPolicyV1Server adds middle ware to the server
type MiddlewareRetentionPolicyV1Server func(ServiceRetentionPolicyV1Server) ServiceRetentionPolicyV1Server

// EndpointsRetentionPolicyV1Server is the server endpoints
type EndpointsRetentionPolicyV1Server struct {
	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint

	watchHandlerRetentionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddRetentionPolicy is endpoint for AutoAddRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoAddRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoAddRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoDeleteRetentionPolicy is endpoint for AutoDeleteRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoDeleteRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoDeleteRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoGetRetentionPolicy is endpoint for AutoGetRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoGetRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoGetRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoListRetentionPolicy is endpoint for AutoListRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (*RetentionPolicyList, error) {
	resp, err := e.AutoListRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicyList{}, err
	}
	return resp.(*RetentionPolicyList), nil
}

type respRetentionPolicyV1AutoListRetentionPolicy struct {
	V   RetentionPolicyList
	Err error
}

// AutoUpdateRetentionPolicy is endpoint for AutoUpdateRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoUpdateRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoUpdateRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoWatchRetentionPolicy performs Watch for RetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error) {
	return e.Client.AutoWatchRetentionPolicy(ctx, in)
}

// AutoAddRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoAddRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoAddRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint creates  AutoAddRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoAddRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoAddRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoAddRetentionPolicy")(f)
}

// AutoDeleteRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoDeleteRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoDeleteRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint creates  AutoDeleteRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoDeleteRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoDeleteRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoDeleteRetentionPolicy")(f)
}

// AutoGetRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoGetRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoGetRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint creates  AutoGetRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoGetRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoGetRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoGetRetentionPolicy")(f)
}

// AutoListRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoListRetentionPolicy(ctx context.Context, in api.ListWatchOptions) (RetentionPolicyList, error) {
	resp, err := e.AutoListRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicyList{}, err
	}
	return *resp.(*RetentionPolicyList), nil
}

// MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint creates  AutoListRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoListRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoListRetentionPolicy")(f)
}

// AutoUpdateRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoUpdateRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoUpdateRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint creates  AutoUpdateRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoUpdateRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoUpdateRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoUpdateRetentionPolicy")(f)
}

// AutoWatchRetentionPolicy is the watch handler for RetentionPolicy on the server side.
func (e EndpointsRetentionPolicyV1Server) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) error {
	return e.watchHandlerRetentionPolicy(in, stream)
}

// MakeAutoWatchRetentionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RetentionPolicyV1_AutoWatchRetentionPolicyServer)
		return s.AutoWatchRetentionPolicy(options, wstream)
	}
}

// MakeRetentionPolicyV1ServerEndpoints creates server endpoints
func MakeRetentionPolicyV1ServerEndpoints(s ServiceRetentionPolicyV1Server, logger log.Logger) EndpointsRetentionPolicyV1Server {
	return EndpointsRetentionPolicyV1Server{

		AutoAddRetentionPolicyEndpoint:    MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint(s, logger),
		AutoDeleteRetentionPolicyEndpoint: MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint(s, logger),
		AutoGetRetentionPolicyEndpoint:    MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint(s, logger),
		AutoListRetentionPolicyEndpoint:   MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint(s, logger),
		AutoUpdateRetentionPolicyEndpoint: MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint(s, logger),

		watchHandlerRetentionPolicy: MakeAutoWatchRetentionPolicyEndpoint(s, logger),
	}
}

// LoggingRetentionPolicyV1MiddlewareClient adds middleware for the client
func LoggingRetentionPolicyV1MiddlewareClient(logger log.Logger) MiddlewareRetentionPolicyV1Client {
	return func(next ServiceRetentionPolicyV1Client) ServiceRetentionPolicyV1Client {
		return loggingRetentionPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRetentionPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceRetentionPolicyV1Client
}

// LoggingRetentionPolicyV1MiddlewareServer adds middleware for the client
func LoggingRetentionPolicyV1MiddlewareServer(logger log.Logger) MiddlewareRetentionPolicyV1Server {
	return func(next ServiceRetentionPolicyV1Server) ServiceRetentionPolicyV1Server {
		return loggingRetentionPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRetentionPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceRetentionPolicyV1Server
}

func (m loggingRetentionPolicyV1MiddlewareClient) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoAddRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoDeleteRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoGetRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *RetentionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoListRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoUpdateRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareClient) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp RetentionPolicyV1_AutoWatchRetentionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoWatchRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareServer) AutoAddRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoAddRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoDeleteRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoDeleteRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoGetRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoGetRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoListRetentionPolicy(ctx context.Context, in api.ListWatchOptions) (resp RetentionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoListRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoUpdateRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoUpdateRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareServer) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RetentionPolicyV1", "method", "AutoWatchRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRetentionPolicy(in, stream)
	return
}
func (r *EndpointsRetentionPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIRetentionPolicyV1AutoAddRetentionPolicyCreateOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy")
}

//
func makeURIRetentionPolicyV1AutoDeleteRetentionPolicyDeleteOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

//
func makeURIRetentionPolicyV1AutoGetRetentionPolicyGetOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

//
func makeURIRetentionPolicyV1AutoUpdateRetentionPolicyUpdateOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

// AutoAddRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoAddRetentionPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoAddRetentionPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), nil
}

// AutoUpdateRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoUpdateRetentionPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoUpdateRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoGetRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoGetRetentionPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoGetRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoDeleteRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoDeleteRetentionPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoDeleteRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoListRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoListRetentionPolicy(ctx context.Context, options *api.ListWatchOptions) (*RetentionPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoWatchRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeRetentionPolicyV1RestClientEndpoints make REST client endpoints
func MakeRetentionPolicyV1RestClientEndpoints(instance string) (EndpointsRetentionPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsRetentionPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
