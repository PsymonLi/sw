// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareMonitoringPolicyV1Client add middleware to the client
type MiddlewareMonitoringPolicyV1Client func(ServiceMonitoringPolicyV1Client) ServiceMonitoringPolicyV1Client

// EndpointsMonitoringPolicyV1Client is the endpoints for the client
type EndpointsMonitoringPolicyV1Client struct {
	Client MonitoringPolicyV1Client

	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
}

// EndpointsMonitoringPolicyV1RestClient is the REST client
type EndpointsMonitoringPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
	AutoWatchMonitoringPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareMonitoringPolicyV1Server adds middle ware to the server
type MiddlewareMonitoringPolicyV1Server func(ServiceMonitoringPolicyV1Server) ServiceMonitoringPolicyV1Server

// EndpointsMonitoringPolicyV1Server is the server endpoints
type EndpointsMonitoringPolicyV1Server struct {
	AutoAddMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	AutoGetMonitoringPolicyEndpoint    endpoint.Endpoint
	AutoListMonitoringPolicyEndpoint   endpoint.Endpoint
	AutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint

	watchHandlerMonitoringPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddMonitoringPolicy is endpoint for AutoAddMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoAddMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoAddMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoDeleteMonitoringPolicy is endpoint for AutoDeleteMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoDeleteMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoDeleteMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoGetMonitoringPolicy is endpoint for AutoGetMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoGetMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoGetMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoListMonitoringPolicy is endpoint for AutoListMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	resp, err := e.AutoListMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicyList{}, err
	}
	return resp.(*MonitoringPolicyList), nil
}

type respMonitoringPolicyV1AutoListMonitoringPolicy struct {
	V   MonitoringPolicyList
	Err error
}

// AutoUpdateMonitoringPolicy is endpoint for AutoUpdateMonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	resp, err := e.AutoUpdateMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return &MonitoringPolicy{}, err
	}
	return resp.(*MonitoringPolicy), nil
}

type respMonitoringPolicyV1AutoUpdateMonitoringPolicy struct {
	V   MonitoringPolicy
	Err error
}

// AutoWatchMonitoringPolicy performs Watch for MonitoringPolicy
func (e EndpointsMonitoringPolicyV1Client) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error) {
	return e.Client.AutoWatchMonitoringPolicy(ctx, in)
}

// AutoAddMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoAddMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoAddMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint creates  AutoAddMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoAddMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoAddMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringPolicyV1:AutoAddMonitoringPolicy")(f)
}

// AutoDeleteMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoDeleteMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoDeleteMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint creates  AutoDeleteMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoDeleteMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoDeleteMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringPolicyV1:AutoDeleteMonitoringPolicy")(f)
}

// AutoGetMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoGetMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoGetMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint creates  AutoGetMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoGetMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoGetMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringPolicyV1:AutoGetMonitoringPolicy")(f)
}

// AutoListMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoListMonitoringPolicy(ctx context.Context, in api.ListWatchOptions) (MonitoringPolicyList, error) {
	resp, err := e.AutoListMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicyList{}, err
	}
	return *resp.(*MonitoringPolicyList), nil
}

// MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint creates  AutoListMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoListMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringPolicyV1:AutoListMonitoringPolicy")(f)
}

// AutoUpdateMonitoringPolicy implementation on server Endpoint
func (e EndpointsMonitoringPolicyV1Server) AutoUpdateMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (MonitoringPolicy, error) {
	resp, err := e.AutoUpdateMonitoringPolicyEndpoint(ctx, in)
	if err != nil {
		return MonitoringPolicy{}, err
	}
	return *resp.(*MonitoringPolicy), nil
}

// MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint creates  AutoUpdateMonitoringPolicy endpoints for the service
func MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MonitoringPolicy)
		v, err := s.AutoUpdateMonitoringPolicy(ctx, *req)
		return respMonitoringPolicyV1AutoUpdateMonitoringPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringPolicyV1:AutoUpdateMonitoringPolicy")(f)
}

// AutoWatchMonitoringPolicy is the watch handler for MonitoringPolicy on the server side.
func (e EndpointsMonitoringPolicyV1Server) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return e.watchHandlerMonitoringPolicy(in, stream)
}

// MakeAutoWatchMonitoringPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchMonitoringPolicyEndpoint(s ServiceMonitoringPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringPolicyV1_AutoWatchMonitoringPolicyServer)
		return s.AutoWatchMonitoringPolicy(options, wstream)
	}
}

// MakeMonitoringPolicyV1ServerEndpoints creates server endpoints
func MakeMonitoringPolicyV1ServerEndpoints(s ServiceMonitoringPolicyV1Server, logger log.Logger) EndpointsMonitoringPolicyV1Server {
	return EndpointsMonitoringPolicyV1Server{

		AutoAddMonitoringPolicyEndpoint:    MakeMonitoringPolicyV1AutoAddMonitoringPolicyEndpoint(s, logger),
		AutoDeleteMonitoringPolicyEndpoint: MakeMonitoringPolicyV1AutoDeleteMonitoringPolicyEndpoint(s, logger),
		AutoGetMonitoringPolicyEndpoint:    MakeMonitoringPolicyV1AutoGetMonitoringPolicyEndpoint(s, logger),
		AutoListMonitoringPolicyEndpoint:   MakeMonitoringPolicyV1AutoListMonitoringPolicyEndpoint(s, logger),
		AutoUpdateMonitoringPolicyEndpoint: MakeMonitoringPolicyV1AutoUpdateMonitoringPolicyEndpoint(s, logger),

		watchHandlerMonitoringPolicy: MakeAutoWatchMonitoringPolicyEndpoint(s, logger),
	}
}

// LoggingMonitoringPolicyV1MiddlewareClient adds middleware for the client
func LoggingMonitoringPolicyV1MiddlewareClient(logger log.Logger) MiddlewareMonitoringPolicyV1Client {
	return func(next ServiceMonitoringPolicyV1Client) ServiceMonitoringPolicyV1Client {
		return loggingMonitoringPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceMonitoringPolicyV1Client
}

// LoggingMonitoringPolicyV1MiddlewareServer adds middleware for the client
func LoggingMonitoringPolicyV1MiddlewareServer(logger log.Logger) MiddlewareMonitoringPolicyV1Server {
	return func(next ServiceMonitoringPolicyV1Server) ServiceMonitoringPolicyV1Server {
		return loggingMonitoringPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceMonitoringPolicyV1Server
}

func (m loggingMonitoringPolicyV1MiddlewareClient) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoAddMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoDeleteMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoGetMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoListMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *MonitoringPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoListMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareClient) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (resp *MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoUpdateMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareClient) AutoWatchMonitoringPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoWatchMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareServer) AutoAddMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoAddMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoDeleteMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoDeleteMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoGetMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoGetMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoListMonitoringPolicy(ctx context.Context, in api.ListWatchOptions) (resp MonitoringPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoListMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMonitoringPolicy(ctx, in)
	return
}
func (m loggingMonitoringPolicyV1MiddlewareServer) AutoUpdateMonitoringPolicy(ctx context.Context, in MonitoringPolicy) (resp MonitoringPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringPolicyV1", "method", "AutoUpdateMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMonitoringPolicy(ctx, in)
	return
}

func (m loggingMonitoringPolicyV1MiddlewareServer) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringPolicyV1", "method", "AutoWatchMonitoringPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchMonitoringPolicy(in, stream)
	return
}
func (r *EndpointsMonitoringPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIMonitoringPolicyV1AutoAddMonitoringPolicyCreateOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy")
}

//
func makeURIMonitoringPolicyV1AutoDeleteMonitoringPolicyDeleteOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

//
func makeURIMonitoringPolicyV1AutoGetMonitoringPolicyGetOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

//
func makeURIMonitoringPolicyV1AutoUpdateMonitoringPolicyUpdateOper(in *MonitoringPolicy) string {
	return fmt.Sprint("/v1/monitoringPolicy", "/", in.Tenant, "/monitoringPolicy/", in.Name)
}

// AutoAddMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoAddMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoAddMonitoringPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoAddMonitoringPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), nil
}

// AutoUpdateMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoUpdateMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoUpdateMonitoringPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoUpdateMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoGetMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoGetMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoGetMonitoringPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoGetMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoDeleteMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoDeleteMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	path := makeURIMonitoringPolicyV1AutoDeleteMonitoringPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringPolicyV1AutoDeleteMonitoringPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MonitoringPolicy), err
}

// AutoListMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoListMonitoringPolicy(ctx context.Context, options *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchMonitoringPolicy CRUD method for MonitoringPolicy
func (r *EndpointsMonitoringPolicyV1RestClient) AutoWatchMonitoringPolicy(ctx context.Context, in *MonitoringPolicy) (*MonitoringPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeMonitoringPolicyV1RestClientEndpoints make REST client endpoints
func MakeMonitoringPolicyV1RestClientEndpoints(instance string) (EndpointsMonitoringPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsMonitoringPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
