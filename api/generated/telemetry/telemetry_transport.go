// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerFlowExportPolicyV1 struct {
	Endpoints EndpointsFlowExportPolicyV1Server

	AutoAddFlowExportPolicyHdlr    grpctransport.Handler
	AutoDeleteFlowExportPolicyHdlr grpctransport.Handler
	AutoGetFlowExportPolicyHdlr    grpctransport.Handler
	AutoListFlowExportPolicyHdlr   grpctransport.Handler
	AutoUpdateFlowExportPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerFlowExportPolicyV1 creates a GRPC server for FlowExportPolicyV1 service
func MakeGRPCServerFlowExportPolicyV1(ctx context.Context, endpoints EndpointsFlowExportPolicyV1Server, logger log.Logger) FlowExportPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerFlowExportPolicyV1{
		Endpoints: endpoints,
		AutoAddFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddFlowExportPolicy", logger)))...,
		),

		AutoDeleteFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteFlowExportPolicy", logger)))...,
		),

		AutoGetFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetFlowExportPolicy", logger)))...,
		),

		AutoListFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListFlowExportPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFlowExportPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListFlowExportPolicy", logger)))...,
		),

		AutoUpdateFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateFlowExportPolicy", logger)))...,
		),
	}
}

func (s *grpcServerFlowExportPolicyV1) AutoAddFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoAddFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFlowExportPolicyV1AutoAddFlowExportPolicy).V
	return &r, resp.(respFlowExportPolicyV1AutoAddFlowExportPolicy).Err
}

func decodeHTTPrespFlowExportPolicyV1AutoAddFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFlowExportPolicyV1) AutoDeleteFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoDeleteFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFlowExportPolicyV1AutoDeleteFlowExportPolicy).V
	return &r, resp.(respFlowExportPolicyV1AutoDeleteFlowExportPolicy).Err
}

func decodeHTTPrespFlowExportPolicyV1AutoDeleteFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFlowExportPolicyV1) AutoGetFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoGetFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFlowExportPolicyV1AutoGetFlowExportPolicy).V
	return &r, resp.(respFlowExportPolicyV1AutoGetFlowExportPolicy).Err
}

func decodeHTTPrespFlowExportPolicyV1AutoGetFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFlowExportPolicyV1) AutoListFlowExportPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	_, resp, err := s.AutoListFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFlowExportPolicyV1AutoListFlowExportPolicy).V
	return &r, resp.(respFlowExportPolicyV1AutoListFlowExportPolicy).Err
}

func decodeHTTPrespFlowExportPolicyV1AutoListFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFlowExportPolicyV1) AutoUpdateFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoUpdateFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFlowExportPolicyV1AutoUpdateFlowExportPolicy).V
	return &r, resp.(respFlowExportPolicyV1AutoUpdateFlowExportPolicy).Err
}

func decodeHTTPrespFlowExportPolicyV1AutoUpdateFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFlowExportPolicyV1) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream FlowExportPolicyV1_AutoWatchFlowExportPolicyServer) error {
	return s.Endpoints.AutoWatchFlowExportPolicy(in, stream)
}

type grpcServerFwlogPolicyV1 struct {
	Endpoints EndpointsFwlogPolicyV1Server

	AutoAddFwlogPolicyHdlr    grpctransport.Handler
	AutoDeleteFwlogPolicyHdlr grpctransport.Handler
	AutoGetFwlogPolicyHdlr    grpctransport.Handler
	AutoListFwlogPolicyHdlr   grpctransport.Handler
	AutoUpdateFwlogPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerFwlogPolicyV1 creates a GRPC server for FwlogPolicyV1 service
func MakeGRPCServerFwlogPolicyV1(ctx context.Context, endpoints EndpointsFwlogPolicyV1Server, logger log.Logger) FwlogPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerFwlogPolicyV1{
		Endpoints: endpoints,
		AutoAddFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddFwlogPolicy", logger)))...,
		),

		AutoDeleteFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteFwlogPolicy", logger)))...,
		),

		AutoGetFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetFwlogPolicy", logger)))...,
		),

		AutoListFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListFwlogPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFwlogPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListFwlogPolicy", logger)))...,
		),

		AutoUpdateFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateFwlogPolicy", logger)))...,
		),
	}
}

func (s *grpcServerFwlogPolicyV1) AutoAddFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoAddFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwlogPolicyV1AutoAddFwlogPolicy).V
	return &r, resp.(respFwlogPolicyV1AutoAddFwlogPolicy).Err
}

func decodeHTTPrespFwlogPolicyV1AutoAddFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwlogPolicyV1) AutoDeleteFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoDeleteFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwlogPolicyV1AutoDeleteFwlogPolicy).V
	return &r, resp.(respFwlogPolicyV1AutoDeleteFwlogPolicy).Err
}

func decodeHTTPrespFwlogPolicyV1AutoDeleteFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwlogPolicyV1) AutoGetFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoGetFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwlogPolicyV1AutoGetFwlogPolicy).V
	return &r, resp.(respFwlogPolicyV1AutoGetFwlogPolicy).Err
}

func decodeHTTPrespFwlogPolicyV1AutoGetFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwlogPolicyV1) AutoListFwlogPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*FwlogPolicyList, error) {
	_, resp, err := s.AutoListFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwlogPolicyV1AutoListFwlogPolicy).V
	return &r, resp.(respFwlogPolicyV1AutoListFwlogPolicy).Err
}

func decodeHTTPrespFwlogPolicyV1AutoListFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwlogPolicyV1) AutoUpdateFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoUpdateFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respFwlogPolicyV1AutoUpdateFwlogPolicy).V
	return &r, resp.(respFwlogPolicyV1AutoUpdateFwlogPolicy).Err
}

func decodeHTTPrespFwlogPolicyV1AutoUpdateFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerFwlogPolicyV1) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream FwlogPolicyV1_AutoWatchFwlogPolicyServer) error {
	return s.Endpoints.AutoWatchFwlogPolicy(in, stream)
}

type grpcServerStatsPolicyV1 struct {
	Endpoints EndpointsStatsPolicyV1Server

	AutoAddStatsPolicyHdlr    grpctransport.Handler
	AutoDeleteStatsPolicyHdlr grpctransport.Handler
	AutoGetStatsPolicyHdlr    grpctransport.Handler
	AutoListStatsPolicyHdlr   grpctransport.Handler
	AutoUpdateStatsPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerStatsPolicyV1 creates a GRPC server for StatsPolicyV1 service
func MakeGRPCServerStatsPolicyV1(ctx context.Context, endpoints EndpointsStatsPolicyV1Server, logger log.Logger) StatsPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerStatsPolicyV1{
		Endpoints: endpoints,
		AutoAddStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddStatsPolicy", logger)))...,
		),

		AutoDeleteStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteStatsPolicy", logger)))...,
		),

		AutoGetStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetStatsPolicy", logger)))...,
		),

		AutoListStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListStatsPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespStatsPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListStatsPolicy", logger)))...,
		),

		AutoUpdateStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateStatsPolicy", logger)))...,
		),
	}
}

func (s *grpcServerStatsPolicyV1) AutoAddStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoAddStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStatsPolicyV1AutoAddStatsPolicy).V
	return &r, resp.(respStatsPolicyV1AutoAddStatsPolicy).Err
}

func decodeHTTPrespStatsPolicyV1AutoAddStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStatsPolicyV1) AutoDeleteStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoDeleteStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStatsPolicyV1AutoDeleteStatsPolicy).V
	return &r, resp.(respStatsPolicyV1AutoDeleteStatsPolicy).Err
}

func decodeHTTPrespStatsPolicyV1AutoDeleteStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStatsPolicyV1) AutoGetStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoGetStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStatsPolicyV1AutoGetStatsPolicy).V
	return &r, resp.(respStatsPolicyV1AutoGetStatsPolicy).Err
}

func decodeHTTPrespStatsPolicyV1AutoGetStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStatsPolicyV1) AutoListStatsPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*StatsPolicyList, error) {
	_, resp, err := s.AutoListStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStatsPolicyV1AutoListStatsPolicy).V
	return &r, resp.(respStatsPolicyV1AutoListStatsPolicy).Err
}

func decodeHTTPrespStatsPolicyV1AutoListStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStatsPolicyV1) AutoUpdateStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoUpdateStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respStatsPolicyV1AutoUpdateStatsPolicy).V
	return &r, resp.(respStatsPolicyV1AutoUpdateStatsPolicy).Err
}

func decodeHTTPrespStatsPolicyV1AutoUpdateStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerStatsPolicyV1) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream StatsPolicyV1_AutoWatchStatsPolicyServer) error {
	return s.Endpoints.AutoWatchStatsPolicy(in, stream)
}

func encodeHTTPFlowExportPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicy encodes GRPC request
func EncodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicy decodes GRPC request
func DecodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicy encodes GRC response
func EncodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicy decodes GRPC response
func DecodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicyList encodes GRPC request
func EncodeGrpcReqFlowExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyList)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicyList decodes GRPC request
func DecodeGrpcReqFlowExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyList)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicyList endodes the GRPC response
func EncodeGrpcRespFlowExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicyList decodes the GRPC response
func DecodeGrpcRespFlowExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportSpec encodes GRPC request
func EncodeGrpcReqFlowExportSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportSpec)
	return req, nil
}

// DecodeGrpcReqFlowExportSpec decodes GRPC request
func DecodeGrpcReqFlowExportSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportSpec)
	return req, nil
}

// EncodeGrpcRespFlowExportSpec encodes GRC response
func EncodeGrpcRespFlowExportSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportSpec decodes GRPC response
func DecodeGrpcRespFlowExportSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportStatus encodes GRPC request
func EncodeGrpcReqFlowExportStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportStatus)
	return req, nil
}

// DecodeGrpcReqFlowExportStatus decodes GRPC request
func DecodeGrpcReqFlowExportStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportStatus)
	return req, nil
}

// EncodeGrpcRespFlowExportStatus encodes GRC response
func EncodeGrpcRespFlowExportStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportStatus decodes GRPC response
func DecodeGrpcRespFlowExportStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportTarget(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportTarget(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportTarget
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportTarget encodes GRPC request
func EncodeGrpcReqFlowExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportTarget)
	return req, nil
}

// DecodeGrpcReqFlowExportTarget decodes GRPC request
func DecodeGrpcReqFlowExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportTarget)
	return req, nil
}

// EncodeGrpcRespFlowExportTarget encodes GRC response
func EncodeGrpcRespFlowExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportTarget decodes GRPC response
func DecodeGrpcRespFlowExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicy encodes GRPC request
func EncodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// DecodeGrpcReqFwlogPolicy decodes GRPC request
func DecodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// EncodeGrpcRespFwlogPolicy encodes GRC response
func EncodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicy decodes GRPC response
func DecodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicyList encodes GRPC request
func EncodeGrpcReqFwlogPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyList)
	return req, nil
}

// DecodeGrpcReqFwlogPolicyList decodes GRPC request
func DecodeGrpcReqFwlogPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyList)
	return req, nil
}

// EncodeGrpcRespFwlogPolicyList endodes the GRPC response
func EncodeGrpcRespFwlogPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicyList decodes the GRPC response
func DecodeGrpcRespFwlogPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogSpec encodes GRPC request
func EncodeGrpcReqFwlogSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogSpec)
	return req, nil
}

// DecodeGrpcReqFwlogSpec decodes GRPC request
func DecodeGrpcReqFwlogSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogSpec)
	return req, nil
}

// EncodeGrpcRespFwlogSpec encodes GRC response
func EncodeGrpcRespFwlogSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogSpec decodes GRPC response
func DecodeGrpcRespFwlogSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogStatus encodes GRPC request
func EncodeGrpcReqFwlogStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogStatus)
	return req, nil
}

// DecodeGrpcReqFwlogStatus decodes GRPC request
func DecodeGrpcReqFwlogStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogStatus)
	return req, nil
}

// EncodeGrpcRespFwlogStatus encodes GRC response
func EncodeGrpcRespFwlogStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogStatus decodes GRPC response
func DecodeGrpcRespFwlogStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicy encodes GRPC request
func EncodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// DecodeGrpcReqStatsPolicy decodes GRPC request
func DecodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// EncodeGrpcRespStatsPolicy encodes GRC response
func EncodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicy decodes GRPC response
func DecodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicyList encodes GRPC request
func EncodeGrpcReqStatsPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyList)
	return req, nil
}

// DecodeGrpcReqStatsPolicyList decodes GRPC request
func DecodeGrpcReqStatsPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyList)
	return req, nil
}

// EncodeGrpcRespStatsPolicyList endodes the GRPC response
func EncodeGrpcRespStatsPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicyList decodes the GRPC response
func DecodeGrpcRespStatsPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsSpec encodes GRPC request
func EncodeGrpcReqStatsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsSpec)
	return req, nil
}

// DecodeGrpcReqStatsSpec decodes GRPC request
func DecodeGrpcReqStatsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsSpec)
	return req, nil
}

// EncodeGrpcRespStatsSpec encodes GRC response
func EncodeGrpcRespStatsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsSpec decodes GRPC response
func DecodeGrpcRespStatsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsStatus encodes GRPC request
func EncodeGrpcReqStatsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsStatus)
	return req, nil
}

// DecodeGrpcReqStatsStatus decodes GRPC request
func DecodeGrpcReqStatsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsStatus)
	return req, nil
}

// EncodeGrpcRespStatsStatus encodes GRC response
func EncodeGrpcRespStatsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsStatus decodes GRPC response
func DecodeGrpcRespStatsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
