// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerMonitoringPolicyV1 struct {
	Endpoints EndpointsMonitoringPolicyV1Server

	AutoAddMonitoringPolicyHdlr    grpctransport.Handler
	AutoDeleteMonitoringPolicyHdlr grpctransport.Handler
	AutoGetMonitoringPolicyHdlr    grpctransport.Handler
	AutoListMonitoringPolicyHdlr   grpctransport.Handler
	AutoUpdateMonitoringPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerMonitoringPolicyV1 creates a GRPC server for MonitoringPolicyV1 service
func MakeGRPCServerMonitoringPolicyV1(ctx context.Context, endpoints EndpointsMonitoringPolicyV1Server, logger log.Logger) MonitoringPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerMonitoringPolicyV1{
		Endpoints: endpoints,
		AutoAddMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddMonitoringPolicy", logger)))...,
		),

		AutoDeleteMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteMonitoringPolicy", logger)))...,
		),

		AutoGetMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetMonitoringPolicy", logger)))...,
		),

		AutoListMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListMonitoringPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespMonitoringPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListMonitoringPolicy", logger)))...,
		),

		AutoUpdateMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateMonitoringPolicy", logger)))...,
		),
	}
}

func (s *grpcServerMonitoringPolicyV1) AutoAddMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoAddMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoAddMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoAddMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoAddMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoDeleteMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoDeleteMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoDeleteMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoDeleteMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoDeleteMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoGetMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoGetMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoGetMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoGetMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoGetMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoListMonitoringPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	_, resp, err := s.AutoListMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoListMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoListMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoListMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoUpdateMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoUpdateMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoUpdateMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoUpdateMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoUpdateMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return s.Endpoints.AutoWatchMonitoringPolicy(in, stream)
}

func encodeHTTPMonitoringPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicy encodes GRPC request
func EncodeGrpcReqMonitoringPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicy)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicy decodes GRPC request
func DecodeGrpcReqMonitoringPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicy)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicy encodes GRC response
func EncodeGrpcRespMonitoringPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicy decodes GRPC response
func DecodeGrpcRespMonitoringPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicyList encodes GRPC request
func EncodeGrpcReqMonitoringPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyList)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicyList decodes GRPC request
func DecodeGrpcReqMonitoringPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyList)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicyList endodes the GRPC response
func EncodeGrpcRespMonitoringPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicyList decodes the GRPC response
func DecodeGrpcRespMonitoringPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicySpec encodes GRPC request
func EncodeGrpcReqMonitoringPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicySpec)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicySpec decodes GRPC request
func DecodeGrpcReqMonitoringPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicySpec)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicySpec encodes GRC response
func EncodeGrpcRespMonitoringPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicySpec decodes GRPC response
func DecodeGrpcRespMonitoringPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicyStatus encodes GRPC request
func EncodeGrpcReqMonitoringPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyStatus)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicyStatus decodes GRPC request
func DecodeGrpcReqMonitoringPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyStatus)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicyStatus encodes GRC response
func EncodeGrpcRespMonitoringPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicyStatus decodes GRPC response
func DecodeGrpcRespMonitoringPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
