// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerCollectionPolicyV1 struct {
	Endpoints EndpointsCollectionPolicyV1Server

	AutoAddCollectionPolicyHdlr    grpctransport.Handler
	AutoDeleteCollectionPolicyHdlr grpctransport.Handler
	AutoGetCollectionPolicyHdlr    grpctransport.Handler
	AutoListCollectionPolicyHdlr   grpctransport.Handler
	AutoUpdateCollectionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerCollectionPolicyV1 creates a GRPC server for CollectionPolicyV1 service
func MakeGRPCServerCollectionPolicyV1(ctx context.Context, endpoints EndpointsCollectionPolicyV1Server, logger log.Logger) CollectionPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerCollectionPolicyV1{
		Endpoints: endpoints,
		AutoAddCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddCollectionPolicy", logger)))...,
		),

		AutoDeleteCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteCollectionPolicy", logger)))...,
		),

		AutoGetCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetCollectionPolicy", logger)))...,
		),

		AutoListCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListCollectionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespCollectionPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListCollectionPolicy", logger)))...,
		),

		AutoUpdateCollectionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateCollectionPolicyEndpoint,
			DecodeGrpcReqCollectionPolicy,
			EncodeGrpcRespCollectionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateCollectionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerCollectionPolicyV1) AutoAddCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoAddCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoAddCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoAddCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoAddCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoDeleteCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoDeleteCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoDeleteCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoDeleteCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoDeleteCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoGetCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoGetCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoGetCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoGetCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoGetCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoListCollectionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*CollectionPolicyList, error) {
	_, resp, err := s.AutoListCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoListCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoListCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoListCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoUpdateCollectionPolicy(ctx oldcontext.Context, req *CollectionPolicy) (*CollectionPolicy, error) {
	_, resp, err := s.AutoUpdateCollectionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCollectionPolicyV1AutoUpdateCollectionPolicy).V
	return &r, resp.(respCollectionPolicyV1AutoUpdateCollectionPolicy).Err
}

func decodeHTTPrespCollectionPolicyV1AutoUpdateCollectionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp CollectionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCollectionPolicyV1) AutoWatchCollectionPolicy(in *api.ListWatchOptions, stream CollectionPolicyV1_AutoWatchCollectionPolicyServer) error {
	return s.Endpoints.AutoWatchCollectionPolicy(in, stream)
}

type grpcServerExportPolicyV1 struct {
	Endpoints EndpointsExportPolicyV1Server

	AutoAddExportPolicyHdlr    grpctransport.Handler
	AutoDeleteExportPolicyHdlr grpctransport.Handler
	AutoGetExportPolicyHdlr    grpctransport.Handler
	AutoListExportPolicyHdlr   grpctransport.Handler
	AutoUpdateExportPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerExportPolicyV1 creates a GRPC server for ExportPolicyV1 service
func MakeGRPCServerExportPolicyV1(ctx context.Context, endpoints EndpointsExportPolicyV1Server, logger log.Logger) ExportPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerExportPolicyV1{
		Endpoints: endpoints,
		AutoAddExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddExportPolicyEndpoint,
			DecodeGrpcReqExportPolicy,
			EncodeGrpcRespExportPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddExportPolicy", logger)))...,
		),

		AutoDeleteExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteExportPolicyEndpoint,
			DecodeGrpcReqExportPolicy,
			EncodeGrpcRespExportPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteExportPolicy", logger)))...,
		),

		AutoGetExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetExportPolicyEndpoint,
			DecodeGrpcReqExportPolicy,
			EncodeGrpcRespExportPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetExportPolicy", logger)))...,
		),

		AutoListExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListExportPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespExportPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListExportPolicy", logger)))...,
		),

		AutoUpdateExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateExportPolicyEndpoint,
			DecodeGrpcReqExportPolicy,
			EncodeGrpcRespExportPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateExportPolicy", logger)))...,
		),
	}
}

func (s *grpcServerExportPolicyV1) AutoAddExportPolicy(ctx oldcontext.Context, req *ExportPolicy) (*ExportPolicy, error) {
	_, resp, err := s.AutoAddExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respExportPolicyV1AutoAddExportPolicy).V
	return &r, resp.(respExportPolicyV1AutoAddExportPolicy).Err
}

func decodeHTTPrespExportPolicyV1AutoAddExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerExportPolicyV1) AutoDeleteExportPolicy(ctx oldcontext.Context, req *ExportPolicy) (*ExportPolicy, error) {
	_, resp, err := s.AutoDeleteExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respExportPolicyV1AutoDeleteExportPolicy).V
	return &r, resp.(respExportPolicyV1AutoDeleteExportPolicy).Err
}

func decodeHTTPrespExportPolicyV1AutoDeleteExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerExportPolicyV1) AutoGetExportPolicy(ctx oldcontext.Context, req *ExportPolicy) (*ExportPolicy, error) {
	_, resp, err := s.AutoGetExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respExportPolicyV1AutoGetExportPolicy).V
	return &r, resp.(respExportPolicyV1AutoGetExportPolicy).Err
}

func decodeHTTPrespExportPolicyV1AutoGetExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerExportPolicyV1) AutoListExportPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*ExportPolicyList, error) {
	_, resp, err := s.AutoListExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respExportPolicyV1AutoListExportPolicy).V
	return &r, resp.(respExportPolicyV1AutoListExportPolicy).Err
}

func decodeHTTPrespExportPolicyV1AutoListExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ExportPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerExportPolicyV1) AutoUpdateExportPolicy(ctx oldcontext.Context, req *ExportPolicy) (*ExportPolicy, error) {
	_, resp, err := s.AutoUpdateExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respExportPolicyV1AutoUpdateExportPolicy).V
	return &r, resp.(respExportPolicyV1AutoUpdateExportPolicy).Err
}

func decodeHTTPrespExportPolicyV1AutoUpdateExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerExportPolicyV1) AutoWatchExportPolicy(in *api.ListWatchOptions, stream ExportPolicyV1_AutoWatchExportPolicyServer) error {
	return s.Endpoints.AutoWatchExportPolicy(in, stream)
}

type grpcServerMonitoringPolicyV1 struct {
	Endpoints EndpointsMonitoringPolicyV1Server

	AutoAddMonitoringPolicyHdlr    grpctransport.Handler
	AutoDeleteMonitoringPolicyHdlr grpctransport.Handler
	AutoGetMonitoringPolicyHdlr    grpctransport.Handler
	AutoListMonitoringPolicyHdlr   grpctransport.Handler
	AutoUpdateMonitoringPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerMonitoringPolicyV1 creates a GRPC server for MonitoringPolicyV1 service
func MakeGRPCServerMonitoringPolicyV1(ctx context.Context, endpoints EndpointsMonitoringPolicyV1Server, logger log.Logger) MonitoringPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerMonitoringPolicyV1{
		Endpoints: endpoints,
		AutoAddMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddMonitoringPolicy", logger)))...,
		),

		AutoDeleteMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteMonitoringPolicy", logger)))...,
		),

		AutoGetMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetMonitoringPolicy", logger)))...,
		),

		AutoListMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListMonitoringPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespMonitoringPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListMonitoringPolicy", logger)))...,
		),

		AutoUpdateMonitoringPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateMonitoringPolicyEndpoint,
			DecodeGrpcReqMonitoringPolicy,
			EncodeGrpcRespMonitoringPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateMonitoringPolicy", logger)))...,
		),
	}
}

func (s *grpcServerMonitoringPolicyV1) AutoAddMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoAddMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoAddMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoAddMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoAddMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoDeleteMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoDeleteMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoDeleteMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoDeleteMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoDeleteMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoGetMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoGetMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoGetMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoGetMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoGetMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoListMonitoringPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*MonitoringPolicyList, error) {
	_, resp, err := s.AutoListMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoListMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoListMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoListMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoUpdateMonitoringPolicy(ctx oldcontext.Context, req *MonitoringPolicy) (*MonitoringPolicy, error) {
	_, resp, err := s.AutoUpdateMonitoringPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringPolicyV1AutoUpdateMonitoringPolicy).V
	return &r, resp.(respMonitoringPolicyV1AutoUpdateMonitoringPolicy).Err
}

func decodeHTTPrespMonitoringPolicyV1AutoUpdateMonitoringPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MonitoringPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringPolicyV1) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return s.Endpoints.AutoWatchMonitoringPolicy(in, stream)
}

type grpcServerRetentionPolicyV1 struct {
	Endpoints EndpointsRetentionPolicyV1Server

	AutoAddRetentionPolicyHdlr    grpctransport.Handler
	AutoDeleteRetentionPolicyHdlr grpctransport.Handler
	AutoGetRetentionPolicyHdlr    grpctransport.Handler
	AutoListRetentionPolicyHdlr   grpctransport.Handler
	AutoUpdateRetentionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerRetentionPolicyV1 creates a GRPC server for RetentionPolicyV1 service
func MakeGRPCServerRetentionPolicyV1(ctx context.Context, endpoints EndpointsRetentionPolicyV1Server, logger log.Logger) RetentionPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerRetentionPolicyV1{
		Endpoints: endpoints,
		AutoAddRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddRetentionPolicy", logger)))...,
		),

		AutoDeleteRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteRetentionPolicy", logger)))...,
		),

		AutoGetRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetRetentionPolicy", logger)))...,
		),

		AutoListRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListRetentionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRetentionPolicyList,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListRetentionPolicy", logger)))...,
		),

		AutoUpdateRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateRetentionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerRetentionPolicyV1) AutoAddRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoAddRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoAddRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoAddRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoAddRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoDeleteRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoDeleteRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoDeleteRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoDeleteRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoDeleteRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoGetRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoGetRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoGetRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoGetRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoGetRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoListRetentionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*RetentionPolicyList, error) {
	_, resp, err := s.AutoListRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoListRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoListRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoListRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoUpdateRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoUpdateRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoUpdateRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoUpdateRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoUpdateRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) error {
	return s.Endpoints.AutoWatchRetentionPolicy(in, stream)
}

func encodeHTTPCollectionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicy encodes GRPC request
func EncodeGrpcReqCollectionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicy)
	return req, nil
}

// DecodeGrpcReqCollectionPolicy decodes GRPC request
func DecodeGrpcReqCollectionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicy)
	return req, nil
}

// EncodeGrpcRespCollectionPolicy encodes GRC response
func EncodeGrpcRespCollectionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicy decodes GRPC response
func DecodeGrpcRespCollectionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicyList encodes GRPC request
func EncodeGrpcReqCollectionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyList)
	return req, nil
}

// DecodeGrpcReqCollectionPolicyList decodes GRPC request
func DecodeGrpcReqCollectionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyList)
	return req, nil
}

// EncodeGrpcRespCollectionPolicyList endodes the GRPC response
func EncodeGrpcRespCollectionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicyList decodes the GRPC response
func DecodeGrpcRespCollectionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicySpec encodes GRPC request
func EncodeGrpcReqCollectionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicySpec)
	return req, nil
}

// DecodeGrpcReqCollectionPolicySpec decodes GRPC request
func DecodeGrpcReqCollectionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicySpec)
	return req, nil
}

// EncodeGrpcRespCollectionPolicySpec encodes GRC response
func EncodeGrpcRespCollectionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicySpec decodes GRPC response
func DecodeGrpcRespCollectionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionPolicyStatus encodes GRPC request
func EncodeGrpcReqCollectionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqCollectionPolicyStatus decodes GRPC request
func DecodeGrpcReqCollectionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespCollectionPolicyStatus encodes GRC response
func EncodeGrpcRespCollectionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionPolicyStatus decodes GRPC response
func DecodeGrpcRespCollectionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCollectionTrigger(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCollectionTrigger(_ context.Context, r *http.Request) (interface{}, error) {
	var req CollectionTrigger
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCollectionTrigger encodes GRPC request
func EncodeGrpcReqCollectionTrigger(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionTrigger)
	return req, nil
}

// DecodeGrpcReqCollectionTrigger decodes GRPC request
func DecodeGrpcReqCollectionTrigger(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CollectionTrigger)
	return req, nil
}

// EncodeGrpcRespCollectionTrigger encodes GRC response
func EncodeGrpcRespCollectionTrigger(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCollectionTrigger decodes GRPC response
func DecodeGrpcRespCollectionTrigger(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExportPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExportPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExportPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExportPolicy encodes GRPC request
func EncodeGrpcReqExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicy)
	return req, nil
}

// DecodeGrpcReqExportPolicy decodes GRPC request
func DecodeGrpcReqExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicy)
	return req, nil
}

// EncodeGrpcRespExportPolicy encodes GRC response
func EncodeGrpcRespExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExportPolicy decodes GRPC response
func DecodeGrpcRespExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExportPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExportPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExportPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExportPolicyList encodes GRPC request
func EncodeGrpcReqExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicyList)
	return req, nil
}

// DecodeGrpcReqExportPolicyList decodes GRPC request
func DecodeGrpcReqExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicyList)
	return req, nil
}

// EncodeGrpcRespExportPolicyList endodes the GRPC response
func EncodeGrpcRespExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExportPolicyList decodes the GRPC response
func DecodeGrpcRespExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExportPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExportPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExportPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExportPolicySpec encodes GRPC request
func EncodeGrpcReqExportPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicySpec)
	return req, nil
}

// DecodeGrpcReqExportPolicySpec decodes GRPC request
func DecodeGrpcReqExportPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicySpec)
	return req, nil
}

// EncodeGrpcRespExportPolicySpec encodes GRC response
func EncodeGrpcRespExportPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExportPolicySpec decodes GRPC response
func DecodeGrpcRespExportPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExportPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExportPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExportPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExportPolicyStatus encodes GRPC request
func EncodeGrpcReqExportPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicyStatus)
	return req, nil
}

// DecodeGrpcReqExportPolicyStatus decodes GRPC request
func DecodeGrpcReqExportPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportPolicyStatus)
	return req, nil
}

// EncodeGrpcRespExportPolicyStatus encodes GRC response
func EncodeGrpcRespExportPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExportPolicyStatus decodes GRPC response
func DecodeGrpcRespExportPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExternalCred(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExternalCred(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExternalCred
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExternalCred encodes GRPC request
func EncodeGrpcReqExternalCred(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExternalCred)
	return req, nil
}

// DecodeGrpcReqExternalCred decodes GRPC request
func DecodeGrpcReqExternalCred(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExternalCred)
	return req, nil
}

// EncodeGrpcRespExternalCred encodes GRC response
func EncodeGrpcRespExternalCred(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExternalCred decodes GRPC response
func DecodeGrpcRespExternalCred(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicy encodes GRPC request
func EncodeGrpcReqMonitoringPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicy)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicy decodes GRPC request
func DecodeGrpcReqMonitoringPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicy)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicy encodes GRC response
func EncodeGrpcRespMonitoringPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicy decodes GRPC response
func DecodeGrpcRespMonitoringPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicyList encodes GRPC request
func EncodeGrpcReqMonitoringPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyList)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicyList decodes GRPC request
func DecodeGrpcReqMonitoringPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyList)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicyList endodes the GRPC response
func EncodeGrpcRespMonitoringPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicyList decodes the GRPC response
func DecodeGrpcRespMonitoringPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicySpec encodes GRPC request
func EncodeGrpcReqMonitoringPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicySpec)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicySpec decodes GRPC request
func DecodeGrpcReqMonitoringPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicySpec)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicySpec encodes GRC response
func EncodeGrpcRespMonitoringPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicySpec decodes GRPC response
func DecodeGrpcRespMonitoringPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMonitoringPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMonitoringPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req MonitoringPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMonitoringPolicyStatus encodes GRPC request
func EncodeGrpcReqMonitoringPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyStatus)
	return req, nil
}

// DecodeGrpcReqMonitoringPolicyStatus decodes GRPC request
func DecodeGrpcReqMonitoringPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MonitoringPolicyStatus)
	return req, nil
}

// EncodeGrpcRespMonitoringPolicyStatus encodes GRC response
func EncodeGrpcRespMonitoringPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMonitoringPolicyStatus decodes GRPC response
func DecodeGrpcRespMonitoringPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicy encodes GRPC request
func EncodeGrpcReqRetentionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicy)
	return req, nil
}

// DecodeGrpcReqRetentionPolicy decodes GRPC request
func DecodeGrpcReqRetentionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicy)
	return req, nil
}

// EncodeGrpcRespRetentionPolicy encodes GRC response
func EncodeGrpcRespRetentionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicy decodes GRPC response
func DecodeGrpcRespRetentionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicyList encodes GRPC request
func EncodeGrpcReqRetentionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyList)
	return req, nil
}

// DecodeGrpcReqRetentionPolicyList decodes GRPC request
func DecodeGrpcReqRetentionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyList)
	return req, nil
}

// EncodeGrpcRespRetentionPolicyList endodes the GRPC response
func EncodeGrpcRespRetentionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicyList decodes the GRPC response
func DecodeGrpcRespRetentionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicySpec encodes GRPC request
func EncodeGrpcReqRetentionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicySpec)
	return req, nil
}

// DecodeGrpcReqRetentionPolicySpec decodes GRPC request
func DecodeGrpcReqRetentionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicySpec)
	return req, nil
}

// EncodeGrpcRespRetentionPolicySpec encodes GRC response
func EncodeGrpcRespRetentionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicySpec decodes GRPC response
func DecodeGrpcRespRetentionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicyStatus encodes GRPC request
func EncodeGrpcReqRetentionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqRetentionPolicyStatus decodes GRPC request
func DecodeGrpcReqRetentionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespRetentionPolicyStatus encodes GRC response
func EncodeGrpcRespRetentionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicyStatus decodes GRPC response
func DecodeGrpcRespRetentionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
