// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetryGwService is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetryGwService

import (
	"context"
	"net/http"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"
	"github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	"github.com/pensando/sw/api/generated/telemetry/grpc/client"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sCollectionPolicyV1GwService struct {
	logger log.Logger
}

type adapterCollectionPolicyV1 struct {
	service telemetry.ServiceCollectionPolicyV1Client
}

func (a adapterCollectionPolicyV1) AutoAddCollectionPolicy(oldctx oldcontext.Context, t *telemetry.CollectionPolicy, options ...grpc.CallOption) (*telemetry.CollectionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddCollectionPolicy(ctx, t)
}

func (a adapterCollectionPolicyV1) AutoDeleteCollectionPolicy(oldctx oldcontext.Context, t *telemetry.CollectionPolicy, options ...grpc.CallOption) (*telemetry.CollectionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteCollectionPolicy(ctx, t)
}

func (a adapterCollectionPolicyV1) AutoGetCollectionPolicy(oldctx oldcontext.Context, t *telemetry.CollectionPolicy, options ...grpc.CallOption) (*telemetry.CollectionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetCollectionPolicy(ctx, t)
}

func (a adapterCollectionPolicyV1) AutoListCollectionPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*telemetry.CollectionPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListCollectionPolicy(ctx, t)
}

func (a adapterCollectionPolicyV1) AutoUpdateCollectionPolicy(oldctx oldcontext.Context, t *telemetry.CollectionPolicy, options ...grpc.CallOption) (*telemetry.CollectionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateCollectionPolicy(ctx, t)
}

func (a adapterCollectionPolicyV1) AutoWatchCollectionPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (telemetry.CollectionPolicyV1_AutoWatchCollectionPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchCollectionPolicy(ctx, in)
}

func (e *sCollectionPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger
	cl, err := e.newClient(ctx, grpcaddr, rslvr)
	if cl == nil || err != nil {
		err = errors.Wrap(err, "could not create client")
		return err
	}
	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	fileCount++
	err = telemetry.RegisterCollectionPolicyV1HandlerWithClient(ctx, mux, cl)
	if err != nil {
		err = errors.Wrap(err, "service registration failed")
		return err
	}
	logger.InfoLog("msg", "registered service telemetry.CollectionPolicyV1")

	m.Handle("/v1/collectionPolicy/", http.StripPrefix("/v1/collectionPolicy", mux))
	if fileCount == 1 {
		err = registerSwaggerDef(m, logger)
	}
	return err
}

func (e *sCollectionPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface) (telemetry.CollectionPolicyV1Client, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}
	client, err := rpckit.NewRPCClient("CollectionPolicyV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := adapterCollectionPolicyV1{grpcclient.NewCollectionPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

type sExportPolicyV1GwService struct {
	logger log.Logger
}

type adapterExportPolicyV1 struct {
	service telemetry.ServiceExportPolicyV1Client
}

func (a adapterExportPolicyV1) AutoAddExportPolicy(oldctx oldcontext.Context, t *telemetry.ExportPolicy, options ...grpc.CallOption) (*telemetry.ExportPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddExportPolicy(ctx, t)
}

func (a adapterExportPolicyV1) AutoDeleteExportPolicy(oldctx oldcontext.Context, t *telemetry.ExportPolicy, options ...grpc.CallOption) (*telemetry.ExportPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteExportPolicy(ctx, t)
}

func (a adapterExportPolicyV1) AutoGetExportPolicy(oldctx oldcontext.Context, t *telemetry.ExportPolicy, options ...grpc.CallOption) (*telemetry.ExportPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetExportPolicy(ctx, t)
}

func (a adapterExportPolicyV1) AutoListExportPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*telemetry.ExportPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListExportPolicy(ctx, t)
}

func (a adapterExportPolicyV1) AutoUpdateExportPolicy(oldctx oldcontext.Context, t *telemetry.ExportPolicy, options ...grpc.CallOption) (*telemetry.ExportPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateExportPolicy(ctx, t)
}

func (a adapterExportPolicyV1) AutoWatchExportPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (telemetry.ExportPolicyV1_AutoWatchExportPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchExportPolicy(ctx, in)
}

func (e *sExportPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger
	cl, err := e.newClient(ctx, grpcaddr, rslvr)
	if cl == nil || err != nil {
		err = errors.Wrap(err, "could not create client")
		return err
	}
	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	fileCount++
	err = telemetry.RegisterExportPolicyV1HandlerWithClient(ctx, mux, cl)
	if err != nil {
		err = errors.Wrap(err, "service registration failed")
		return err
	}
	logger.InfoLog("msg", "registered service telemetry.ExportPolicyV1")

	m.Handle("/v1/exportPolicy/", http.StripPrefix("/v1/exportPolicy", mux))
	if fileCount == 1 {

	}
	return err
}

func (e *sExportPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface) (telemetry.ExportPolicyV1Client, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}
	client, err := rpckit.NewRPCClient("ExportPolicyV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := adapterExportPolicyV1{grpcclient.NewExportPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

type sMonitoringPolicyV1GwService struct {
	logger log.Logger
}

type adapterMonitoringPolicyV1 struct {
	service telemetry.ServiceMonitoringPolicyV1Client
}

func (a adapterMonitoringPolicyV1) AutoAddMonitoringPolicy(oldctx oldcontext.Context, t *telemetry.MonitoringPolicy, options ...grpc.CallOption) (*telemetry.MonitoringPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddMonitoringPolicy(ctx, t)
}

func (a adapterMonitoringPolicyV1) AutoDeleteMonitoringPolicy(oldctx oldcontext.Context, t *telemetry.MonitoringPolicy, options ...grpc.CallOption) (*telemetry.MonitoringPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteMonitoringPolicy(ctx, t)
}

func (a adapterMonitoringPolicyV1) AutoGetMonitoringPolicy(oldctx oldcontext.Context, t *telemetry.MonitoringPolicy, options ...grpc.CallOption) (*telemetry.MonitoringPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetMonitoringPolicy(ctx, t)
}

func (a adapterMonitoringPolicyV1) AutoListMonitoringPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*telemetry.MonitoringPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListMonitoringPolicy(ctx, t)
}

func (a adapterMonitoringPolicyV1) AutoUpdateMonitoringPolicy(oldctx oldcontext.Context, t *telemetry.MonitoringPolicy, options ...grpc.CallOption) (*telemetry.MonitoringPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateMonitoringPolicy(ctx, t)
}

func (a adapterMonitoringPolicyV1) AutoWatchMonitoringPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchMonitoringPolicy(ctx, in)
}

func (e *sMonitoringPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger
	cl, err := e.newClient(ctx, grpcaddr, rslvr)
	if cl == nil || err != nil {
		err = errors.Wrap(err, "could not create client")
		return err
	}
	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	fileCount++
	err = telemetry.RegisterMonitoringPolicyV1HandlerWithClient(ctx, mux, cl)
	if err != nil {
		err = errors.Wrap(err, "service registration failed")
		return err
	}
	logger.InfoLog("msg", "registered service telemetry.MonitoringPolicyV1")

	m.Handle("/v1/monitoringPolicy/", http.StripPrefix("/v1/monitoringPolicy", mux))
	if fileCount == 1 {

	}
	return err
}

func (e *sMonitoringPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface) (telemetry.MonitoringPolicyV1Client, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}
	client, err := rpckit.NewRPCClient("MonitoringPolicyV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := adapterMonitoringPolicyV1{grpcclient.NewMonitoringPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

type sRetentionPolicyV1GwService struct {
	logger log.Logger
}

type adapterRetentionPolicyV1 struct {
	service telemetry.ServiceRetentionPolicyV1Client
}

func (a adapterRetentionPolicyV1) AutoAddRetentionPolicy(oldctx oldcontext.Context, t *telemetry.RetentionPolicy, options ...grpc.CallOption) (*telemetry.RetentionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddRetentionPolicy(ctx, t)
}

func (a adapterRetentionPolicyV1) AutoDeleteRetentionPolicy(oldctx oldcontext.Context, t *telemetry.RetentionPolicy, options ...grpc.CallOption) (*telemetry.RetentionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteRetentionPolicy(ctx, t)
}

func (a adapterRetentionPolicyV1) AutoGetRetentionPolicy(oldctx oldcontext.Context, t *telemetry.RetentionPolicy, options ...grpc.CallOption) (*telemetry.RetentionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetRetentionPolicy(ctx, t)
}

func (a adapterRetentionPolicyV1) AutoListRetentionPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*telemetry.RetentionPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListRetentionPolicy(ctx, t)
}

func (a adapterRetentionPolicyV1) AutoUpdateRetentionPolicy(oldctx oldcontext.Context, t *telemetry.RetentionPolicy, options ...grpc.CallOption) (*telemetry.RetentionPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateRetentionPolicy(ctx, t)
}

func (a adapterRetentionPolicyV1) AutoWatchRetentionPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (telemetry.RetentionPolicyV1_AutoWatchRetentionPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchRetentionPolicy(ctx, in)
}

func (e *sRetentionPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger
	cl, err := e.newClient(ctx, grpcaddr, rslvr)
	if cl == nil || err != nil {
		err = errors.Wrap(err, "could not create client")
		return err
	}
	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	fileCount++
	err = telemetry.RegisterRetentionPolicyV1HandlerWithClient(ctx, mux, cl)
	if err != nil {
		err = errors.Wrap(err, "service registration failed")
		return err
	}
	logger.InfoLog("msg", "registered service telemetry.RetentionPolicyV1")

	m.Handle("/v1/retentionPolicy/", http.StripPrefix("/v1/retentionPolicy", mux))
	if fileCount == 1 {

	}
	return err
}

func (e *sRetentionPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface) (telemetry.RetentionPolicyV1Client, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}
	client, err := rpckit.NewRPCClient("RetentionPolicyV1GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := adapterRetentionPolicyV1{grpcclient.NewRetentionPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()

	svcCollectionPolicyV1 := sCollectionPolicyV1GwService{}
	apigw.Register("telemetry.CollectionPolicyV1", "collectionPolicy/", &svcCollectionPolicyV1)
	svcExportPolicyV1 := sExportPolicyV1GwService{}
	apigw.Register("telemetry.ExportPolicyV1", "exportPolicy/", &svcExportPolicyV1)
	svcMonitoringPolicyV1 := sMonitoringPolicyV1GwService{}
	apigw.Register("telemetry.MonitoringPolicyV1", "monitoringPolicy/", &svcMonitoringPolicyV1)
	svcRetentionPolicyV1 := sRetentionPolicyV1GwService{}
	apigw.Register("telemetry.RetentionPolicyV1", "retentionPolicy/", &svcRetentionPolicyV1)
}
