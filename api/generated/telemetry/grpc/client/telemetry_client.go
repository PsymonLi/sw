// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewCollectionPolicyV1 sets up a new client for CollectionPolicyV1
func NewCollectionPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceCollectionPolicyV1Client {

	var lAutoAddCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.CollectionPolicyV1",
			"AutoAddCollectionPolicy",
			telemetry.EncodeGrpcReqCollectionPolicy,
			telemetry.DecodeGrpcRespCollectionPolicy,
			&telemetry.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoAddCollectionPolicy")(lAutoAddCollectionPolicyEndpoint)
	}
	var lAutoDeleteCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.CollectionPolicyV1",
			"AutoDeleteCollectionPolicy",
			telemetry.EncodeGrpcReqCollectionPolicy,
			telemetry.DecodeGrpcRespCollectionPolicy,
			&telemetry.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoDeleteCollectionPolicy")(lAutoDeleteCollectionPolicyEndpoint)
	}
	var lAutoGetCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.CollectionPolicyV1",
			"AutoGetCollectionPolicy",
			telemetry.EncodeGrpcReqCollectionPolicy,
			telemetry.DecodeGrpcRespCollectionPolicy,
			&telemetry.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoGetCollectionPolicy")(lAutoGetCollectionPolicyEndpoint)
	}
	var lAutoListCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoListCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.CollectionPolicyV1",
			"AutoListCollectionPolicy",
			telemetry.EncodeGrpcReqListWatchOptions,
			telemetry.DecodeGrpcRespCollectionPolicyList,
			&telemetry.CollectionPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoListCollectionPolicy")(lAutoListCollectionPolicyEndpoint)
	}
	var lAutoUpdateCollectionPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateCollectionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.CollectionPolicyV1",
			"AutoUpdateCollectionPolicy",
			telemetry.EncodeGrpcReqCollectionPolicy,
			telemetry.DecodeGrpcRespCollectionPolicy,
			&telemetry.CollectionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateCollectionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "CollectionPolicyV1:AutoUpdateCollectionPolicy")(lAutoUpdateCollectionPolicyEndpoint)
	}
	return telemetry.EndpointsCollectionPolicyV1Client{
		Client: telemetry.NewCollectionPolicyV1Client(conn),

		AutoAddCollectionPolicyEndpoint:    lAutoAddCollectionPolicyEndpoint,
		AutoDeleteCollectionPolicyEndpoint: lAutoDeleteCollectionPolicyEndpoint,
		AutoGetCollectionPolicyEndpoint:    lAutoGetCollectionPolicyEndpoint,
		AutoListCollectionPolicyEndpoint:   lAutoListCollectionPolicyEndpoint,
		AutoUpdateCollectionPolicyEndpoint: lAutoUpdateCollectionPolicyEndpoint,
	}
}

// NewCollectionPolicyV1Backend creates an instrumented client with middleware
func NewCollectionPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceCollectionPolicyV1Client {
	cl := NewCollectionPolicyV1(conn, logger)
	cl = telemetry.LoggingCollectionPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

// NewExportPolicyV1 sets up a new client for ExportPolicyV1
func NewExportPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceExportPolicyV1Client {

	var lAutoAddExportPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddExportPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.ExportPolicyV1",
			"AutoAddExportPolicy",
			telemetry.EncodeGrpcReqExportPolicy,
			telemetry.DecodeGrpcRespExportPolicy,
			&telemetry.ExportPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddExportPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoAddExportPolicy")(lAutoAddExportPolicyEndpoint)
	}
	var lAutoDeleteExportPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteExportPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.ExportPolicyV1",
			"AutoDeleteExportPolicy",
			telemetry.EncodeGrpcReqExportPolicy,
			telemetry.DecodeGrpcRespExportPolicy,
			&telemetry.ExportPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteExportPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoDeleteExportPolicy")(lAutoDeleteExportPolicyEndpoint)
	}
	var lAutoGetExportPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetExportPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.ExportPolicyV1",
			"AutoGetExportPolicy",
			telemetry.EncodeGrpcReqExportPolicy,
			telemetry.DecodeGrpcRespExportPolicy,
			&telemetry.ExportPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetExportPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoGetExportPolicy")(lAutoGetExportPolicyEndpoint)
	}
	var lAutoListExportPolicyEndpoint endpoint.Endpoint
	{
		lAutoListExportPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.ExportPolicyV1",
			"AutoListExportPolicy",
			telemetry.EncodeGrpcReqListWatchOptions,
			telemetry.DecodeGrpcRespExportPolicyList,
			&telemetry.ExportPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListExportPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoListExportPolicy")(lAutoListExportPolicyEndpoint)
	}
	var lAutoUpdateExportPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateExportPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.ExportPolicyV1",
			"AutoUpdateExportPolicy",
			telemetry.EncodeGrpcReqExportPolicy,
			telemetry.DecodeGrpcRespExportPolicy,
			&telemetry.ExportPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateExportPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "ExportPolicyV1:AutoUpdateExportPolicy")(lAutoUpdateExportPolicyEndpoint)
	}
	return telemetry.EndpointsExportPolicyV1Client{
		Client: telemetry.NewExportPolicyV1Client(conn),

		AutoAddExportPolicyEndpoint:    lAutoAddExportPolicyEndpoint,
		AutoDeleteExportPolicyEndpoint: lAutoDeleteExportPolicyEndpoint,
		AutoGetExportPolicyEndpoint:    lAutoGetExportPolicyEndpoint,
		AutoListExportPolicyEndpoint:   lAutoListExportPolicyEndpoint,
		AutoUpdateExportPolicyEndpoint: lAutoUpdateExportPolicyEndpoint,
	}
}

// NewExportPolicyV1Backend creates an instrumented client with middleware
func NewExportPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceExportPolicyV1Client {
	cl := NewExportPolicyV1(conn, logger)
	cl = telemetry.LoggingExportPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

// NewMonitoringPolicyV1 sets up a new client for MonitoringPolicyV1
func NewMonitoringPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceMonitoringPolicyV1Client {

	var lAutoAddMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoAddMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoAddMonitoringPolicy")(lAutoAddMonitoringPolicyEndpoint)
	}
	var lAutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoDeleteMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoDeleteMonitoringPolicy")(lAutoDeleteMonitoringPolicyEndpoint)
	}
	var lAutoGetMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoGetMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoGetMonitoringPolicy")(lAutoGetMonitoringPolicyEndpoint)
	}
	var lAutoListMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoListMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoListMonitoringPolicy",
			telemetry.EncodeGrpcReqListWatchOptions,
			telemetry.DecodeGrpcRespMonitoringPolicyList,
			&telemetry.MonitoringPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoListMonitoringPolicy")(lAutoListMonitoringPolicyEndpoint)
	}
	var lAutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoUpdateMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoUpdateMonitoringPolicy")(lAutoUpdateMonitoringPolicyEndpoint)
	}
	return telemetry.EndpointsMonitoringPolicyV1Client{
		Client: telemetry.NewMonitoringPolicyV1Client(conn),

		AutoAddMonitoringPolicyEndpoint:    lAutoAddMonitoringPolicyEndpoint,
		AutoDeleteMonitoringPolicyEndpoint: lAutoDeleteMonitoringPolicyEndpoint,
		AutoGetMonitoringPolicyEndpoint:    lAutoGetMonitoringPolicyEndpoint,
		AutoListMonitoringPolicyEndpoint:   lAutoListMonitoringPolicyEndpoint,
		AutoUpdateMonitoringPolicyEndpoint: lAutoUpdateMonitoringPolicyEndpoint,
	}
}

// NewMonitoringPolicyV1Backend creates an instrumented client with middleware
func NewMonitoringPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceMonitoringPolicyV1Client {
	cl := NewMonitoringPolicyV1(conn, logger)
	cl = telemetry.LoggingMonitoringPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

// NewRetentionPolicyV1 sets up a new client for RetentionPolicyV1
func NewRetentionPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceRetentionPolicyV1Client {

	var lAutoAddRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.RetentionPolicyV1",
			"AutoAddRetentionPolicy",
			telemetry.EncodeGrpcReqRetentionPolicy,
			telemetry.DecodeGrpcRespRetentionPolicy,
			&telemetry.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoAddRetentionPolicy")(lAutoAddRetentionPolicyEndpoint)
	}
	var lAutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.RetentionPolicyV1",
			"AutoDeleteRetentionPolicy",
			telemetry.EncodeGrpcReqRetentionPolicy,
			telemetry.DecodeGrpcRespRetentionPolicy,
			&telemetry.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoDeleteRetentionPolicy")(lAutoDeleteRetentionPolicyEndpoint)
	}
	var lAutoGetRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.RetentionPolicyV1",
			"AutoGetRetentionPolicy",
			telemetry.EncodeGrpcReqRetentionPolicy,
			telemetry.DecodeGrpcRespRetentionPolicy,
			&telemetry.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoGetRetentionPolicy")(lAutoGetRetentionPolicyEndpoint)
	}
	var lAutoListRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoListRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.RetentionPolicyV1",
			"AutoListRetentionPolicy",
			telemetry.EncodeGrpcReqListWatchOptions,
			telemetry.DecodeGrpcRespRetentionPolicyList,
			&telemetry.RetentionPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoListRetentionPolicy")(lAutoListRetentionPolicyEndpoint)
	}
	var lAutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.RetentionPolicyV1",
			"AutoUpdateRetentionPolicy",
			telemetry.EncodeGrpcReqRetentionPolicy,
			telemetry.DecodeGrpcRespRetentionPolicy,
			&telemetry.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoUpdateRetentionPolicy")(lAutoUpdateRetentionPolicyEndpoint)
	}
	return telemetry.EndpointsRetentionPolicyV1Client{
		Client: telemetry.NewRetentionPolicyV1Client(conn),

		AutoAddRetentionPolicyEndpoint:    lAutoAddRetentionPolicyEndpoint,
		AutoDeleteRetentionPolicyEndpoint: lAutoDeleteRetentionPolicyEndpoint,
		AutoGetRetentionPolicyEndpoint:    lAutoGetRetentionPolicyEndpoint,
		AutoListRetentionPolicyEndpoint:   lAutoListRetentionPolicyEndpoint,
		AutoUpdateRetentionPolicyEndpoint: lAutoUpdateRetentionPolicyEndpoint,
	}
}

// NewRetentionPolicyV1Backend creates an instrumented client with middleware
func NewRetentionPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceRetentionPolicyV1Client {
	cl := NewRetentionPolicyV1(conn, logger)
	cl = telemetry.LoggingRetentionPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjCollectionPolicyV1CollectionPolicy struct {
	logger log.Logger
	client telemetry.ServiceCollectionPolicyV1Client
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Create(ctx context.Context, in *telemetry.CollectionPolicy) (*telemetry.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "CollectionPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddCollectionPolicy(nctx, in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Update(ctx context.Context, in *telemetry.CollectionPolicy) (*telemetry.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateCollectionPolicy(nctx, in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetCollectionPolicy(nctx, &in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteCollectionPolicy(nctx, &in)
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.CollectionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListCollectionPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "CollectionPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchCollectionPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(telemetry.CollectionPolicyV1_AutoWatchCollectionPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			lw.OutCh <- &ev
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjCollectionPolicyV1CollectionPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjCollectionPolicyV1CollectionPolicy struct {
	endpoints telemetry.EndpointsCollectionPolicyV1RestClient
	instance  string
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Create(ctx context.Context, in *telemetry.CollectionPolicy) (*telemetry.CollectionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddCollectionPolicy(ctx, in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Update(ctx context.Context, in *telemetry.CollectionPolicy) (*telemetry.CollectionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateCollectionPolicy(ctx, in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.CollectionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetCollectionPolicy(ctx, &in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.CollectionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.CollectionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteCollectionPolicy(ctx, &in)
}

func (a *restObjCollectionPolicyV1CollectionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.CollectionPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListCollectionPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjCollectionPolicyV1CollectionPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type grpcObjExportPolicyV1ExportPolicy struct {
	logger log.Logger
	client telemetry.ServiceExportPolicyV1Client
}

func (a *grpcObjExportPolicyV1ExportPolicy) Create(ctx context.Context, in *telemetry.ExportPolicy) (*telemetry.ExportPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "ExportPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddExportPolicy(nctx, in)
}

func (a *grpcObjExportPolicyV1ExportPolicy) Update(ctx context.Context, in *telemetry.ExportPolicy) (*telemetry.ExportPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "ExportPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateExportPolicy(nctx, in)
}

func (a *grpcObjExportPolicyV1ExportPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.ExportPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "ExportPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.ExportPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetExportPolicy(nctx, &in)
}

func (a *grpcObjExportPolicyV1ExportPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.ExportPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "ExportPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.ExportPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteExportPolicy(nctx, &in)
}

func (a *grpcObjExportPolicyV1ExportPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.ExportPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "ExportPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListExportPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjExportPolicyV1ExportPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "ExportPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchExportPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(telemetry.ExportPolicyV1_AutoWatchExportPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			lw.OutCh <- &ev
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjExportPolicyV1ExportPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjExportPolicyV1ExportPolicy struct {
	endpoints telemetry.EndpointsExportPolicyV1RestClient
	instance  string
}

func (a *restObjExportPolicyV1ExportPolicy) Create(ctx context.Context, in *telemetry.ExportPolicy) (*telemetry.ExportPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddExportPolicy(ctx, in)
}

func (a *restObjExportPolicyV1ExportPolicy) Update(ctx context.Context, in *telemetry.ExportPolicy) (*telemetry.ExportPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateExportPolicy(ctx, in)
}

func (a *restObjExportPolicyV1ExportPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.ExportPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.ExportPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetExportPolicy(ctx, &in)
}

func (a *restObjExportPolicyV1ExportPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.ExportPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.ExportPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteExportPolicy(ctx, &in)
}

func (a *restObjExportPolicyV1ExportPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.ExportPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListExportPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjExportPolicyV1ExportPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjExportPolicyV1ExportPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type grpcObjMonitoringPolicyV1MonitoringPolicy struct {
	logger log.Logger
	client telemetry.ServiceMonitoringPolicyV1Client
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Create(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "MonitoringPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddMonitoringPolicy(nctx, in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Update(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateMonitoringPolicy(nctx, in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetMonitoringPolicy(nctx, &in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteMonitoringPolicy(nctx, &in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListMonitoringPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchMonitoringPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			lw.OutCh <- &ev
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjMonitoringPolicyV1MonitoringPolicy struct {
	endpoints telemetry.EndpointsMonitoringPolicyV1RestClient
	instance  string
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Create(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddMonitoringPolicy(ctx, in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Update(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateMonitoringPolicy(ctx, in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetMonitoringPolicy(ctx, &in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteMonitoringPolicy(ctx, &in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.MonitoringPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListMonitoringPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type grpcObjRetentionPolicyV1RetentionPolicy struct {
	logger log.Logger
	client telemetry.ServiceRetentionPolicyV1Client
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Create(ctx context.Context, in *telemetry.RetentionPolicy) (*telemetry.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "RetentionPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddRetentionPolicy(nctx, in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Update(ctx context.Context, in *telemetry.RetentionPolicy) (*telemetry.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateRetentionPolicy(nctx, in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetRetentionPolicy(nctx, &in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteRetentionPolicy(nctx, &in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListRetentionPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchRetentionPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(telemetry.RetentionPolicyV1_AutoWatchRetentionPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			lw.OutCh <- &ev
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjRetentionPolicyV1RetentionPolicy struct {
	endpoints telemetry.EndpointsRetentionPolicyV1RestClient
	instance  string
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Create(ctx context.Context, in *telemetry.RetentionPolicy) (*telemetry.RetentionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddRetentionPolicy(ctx, in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Update(ctx context.Context, in *telemetry.RetentionPolicy) (*telemetry.RetentionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateRetentionPolicy(ctx, in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.RetentionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetRetentionPolicy(ctx, &in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.RetentionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteRetentionPolicy(ctx, &in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.RetentionPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListRetentionPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientCollectionPolicyV1 struct {
	grpcCollectionPolicy telemetry.CollectionPolicyInterface
}

// NewGrpcCrudClientCollectionPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientCollectionPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.CollectionPolicyV1Interface {
	client := NewCollectionPolicyV1Backend(conn, logger)
	return &crudClientCollectionPolicyV1{

		grpcCollectionPolicy: &grpcObjCollectionPolicyV1CollectionPolicy{client: client, logger: logger},
	}
}

func (a *crudClientCollectionPolicyV1) CollectionPolicy() telemetry.CollectionPolicyInterface {
	return a.grpcCollectionPolicy
}

type crudRestClientCollectionPolicyV1 struct {
	restCollectionPolicy telemetry.CollectionPolicyInterface
}

// NewRestCrudClientCollectionPolicyV1 creates a REST client for the service.
func NewRestCrudClientCollectionPolicyV1(url string) telemetry.CollectionPolicyV1Interface {
	endpoints, err := telemetry.MakeCollectionPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientCollectionPolicyV1{

		restCollectionPolicy: &restObjCollectionPolicyV1CollectionPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientCollectionPolicyV1) CollectionPolicy() telemetry.CollectionPolicyInterface {
	return a.restCollectionPolicy
}

type crudClientExportPolicyV1 struct {
	grpcExportPolicy telemetry.ExportPolicyInterface
}

// NewGrpcCrudClientExportPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientExportPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ExportPolicyV1Interface {
	client := NewExportPolicyV1Backend(conn, logger)
	return &crudClientExportPolicyV1{

		grpcExportPolicy: &grpcObjExportPolicyV1ExportPolicy{client: client, logger: logger},
	}
}

func (a *crudClientExportPolicyV1) ExportPolicy() telemetry.ExportPolicyInterface {
	return a.grpcExportPolicy
}

type crudRestClientExportPolicyV1 struct {
	restExportPolicy telemetry.ExportPolicyInterface
}

// NewRestCrudClientExportPolicyV1 creates a REST client for the service.
func NewRestCrudClientExportPolicyV1(url string) telemetry.ExportPolicyV1Interface {
	endpoints, err := telemetry.MakeExportPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientExportPolicyV1{

		restExportPolicy: &restObjExportPolicyV1ExportPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientExportPolicyV1) ExportPolicy() telemetry.ExportPolicyInterface {
	return a.restExportPolicy
}

type crudClientMonitoringPolicyV1 struct {
	grpcMonitoringPolicy telemetry.MonitoringPolicyInterface
}

// NewGrpcCrudClientMonitoringPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientMonitoringPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.MonitoringPolicyV1Interface {
	client := NewMonitoringPolicyV1Backend(conn, logger)
	return &crudClientMonitoringPolicyV1{

		grpcMonitoringPolicy: &grpcObjMonitoringPolicyV1MonitoringPolicy{client: client, logger: logger},
	}
}

func (a *crudClientMonitoringPolicyV1) MonitoringPolicy() telemetry.MonitoringPolicyInterface {
	return a.grpcMonitoringPolicy
}

type crudRestClientMonitoringPolicyV1 struct {
	restMonitoringPolicy telemetry.MonitoringPolicyInterface
}

// NewRestCrudClientMonitoringPolicyV1 creates a REST client for the service.
func NewRestCrudClientMonitoringPolicyV1(url string) telemetry.MonitoringPolicyV1Interface {
	endpoints, err := telemetry.MakeMonitoringPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientMonitoringPolicyV1{

		restMonitoringPolicy: &restObjMonitoringPolicyV1MonitoringPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientMonitoringPolicyV1) MonitoringPolicy() telemetry.MonitoringPolicyInterface {
	return a.restMonitoringPolicy
}

type crudClientRetentionPolicyV1 struct {
	grpcRetentionPolicy telemetry.RetentionPolicyInterface
}

// NewGrpcCrudClientRetentionPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientRetentionPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.RetentionPolicyV1Interface {
	client := NewRetentionPolicyV1Backend(conn, logger)
	return &crudClientRetentionPolicyV1{

		grpcRetentionPolicy: &grpcObjRetentionPolicyV1RetentionPolicy{client: client, logger: logger},
	}
}

func (a *crudClientRetentionPolicyV1) RetentionPolicy() telemetry.RetentionPolicyInterface {
	return a.grpcRetentionPolicy
}

type crudRestClientRetentionPolicyV1 struct {
	restRetentionPolicy telemetry.RetentionPolicyInterface
}

// NewRestCrudClientRetentionPolicyV1 creates a REST client for the service.
func NewRestCrudClientRetentionPolicyV1(url string) telemetry.RetentionPolicyV1Interface {
	endpoints, err := telemetry.MakeRetentionPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientRetentionPolicyV1{

		restRetentionPolicy: &restObjRetentionPolicyV1RetentionPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientRetentionPolicyV1) RetentionPolicy() telemetry.RetentionPolicyInterface {
	return a.restRetentionPolicy
}
