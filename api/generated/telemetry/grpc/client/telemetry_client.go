// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewMonitoringPolicyV1 sets up a new client for MonitoringPolicyV1
func NewMonitoringPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceMonitoringPolicyV1Client {

	var lAutoAddMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoAddMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoAddMonitoringPolicy")(lAutoAddMonitoringPolicyEndpoint)
	}
	var lAutoDeleteMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoDeleteMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoDeleteMonitoringPolicy")(lAutoDeleteMonitoringPolicyEndpoint)
	}
	var lAutoGetMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoGetMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoGetMonitoringPolicy")(lAutoGetMonitoringPolicyEndpoint)
	}
	var lAutoListMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoListMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoListMonitoringPolicy",
			telemetry.EncodeGrpcReqListWatchOptions,
			telemetry.DecodeGrpcRespMonitoringPolicyList,
			&telemetry.MonitoringPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoListMonitoringPolicy")(lAutoListMonitoringPolicyEndpoint)
	}
	var lAutoUpdateMonitoringPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateMonitoringPolicyEndpoint = grpctransport.NewClient(
			conn,
			"telemetry.MonitoringPolicyV1",
			"AutoUpdateMonitoringPolicy",
			telemetry.EncodeGrpcReqMonitoringPolicy,
			telemetry.DecodeGrpcRespMonitoringPolicy,
			&telemetry.MonitoringPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateMonitoringPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "MonitoringPolicyV1:AutoUpdateMonitoringPolicy")(lAutoUpdateMonitoringPolicyEndpoint)
	}
	return telemetry.EndpointsMonitoringPolicyV1Client{
		Client: telemetry.NewMonitoringPolicyV1Client(conn),

		AutoAddMonitoringPolicyEndpoint:    lAutoAddMonitoringPolicyEndpoint,
		AutoDeleteMonitoringPolicyEndpoint: lAutoDeleteMonitoringPolicyEndpoint,
		AutoGetMonitoringPolicyEndpoint:    lAutoGetMonitoringPolicyEndpoint,
		AutoListMonitoringPolicyEndpoint:   lAutoListMonitoringPolicyEndpoint,
		AutoUpdateMonitoringPolicyEndpoint: lAutoUpdateMonitoringPolicyEndpoint,
	}
}

// NewMonitoringPolicyV1Backend creates an instrumented client with middleware
func NewMonitoringPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) telemetry.ServiceMonitoringPolicyV1Client {
	cl := NewMonitoringPolicyV1(conn, logger)
	cl = telemetry.LoggingMonitoringPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjMonitoringPolicyV1MonitoringPolicy struct {
	logger log.Logger
	client telemetry.ServiceMonitoringPolicyV1Client
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Create(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "MonitoringPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddMonitoringPolicy(nctx, in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Update(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateMonitoringPolicy(nctx, in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetMonitoringPolicy(nctx, &in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteMonitoringPolicy(nctx, &in)
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.MonitoringPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListMonitoringPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "MonitoringPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchMonitoringPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjMonitoringPolicyV1MonitoringPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjMonitoringPolicyV1MonitoringPolicy struct {
	endpoints telemetry.EndpointsMonitoringPolicyV1RestClient
	instance  string
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Create(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddMonitoringPolicy(ctx, in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Update(ctx context.Context, in *telemetry.MonitoringPolicy) (*telemetry.MonitoringPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateMonitoringPolicy(ctx, in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetMonitoringPolicy(ctx, &in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.MonitoringPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := telemetry.MonitoringPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteMonitoringPolicy(ctx, &in)
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.MonitoringPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListMonitoringPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjMonitoringPolicyV1MonitoringPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientMonitoringPolicyV1 struct {
	grpcMonitoringPolicy telemetry.MonitoringPolicyInterface
}

// NewGrpcCrudClientMonitoringPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientMonitoringPolicyV1(conn *grpc.ClientConn, logger log.Logger) telemetry.MonitoringPolicyV1Interface {
	client := NewMonitoringPolicyV1Backend(conn, logger)
	return &crudClientMonitoringPolicyV1{

		grpcMonitoringPolicy: &grpcObjMonitoringPolicyV1MonitoringPolicy{client: client, logger: logger},
	}
}

func (a *crudClientMonitoringPolicyV1) MonitoringPolicy() telemetry.MonitoringPolicyInterface {
	return a.grpcMonitoringPolicy
}

type crudRestClientMonitoringPolicyV1 struct {
	restMonitoringPolicy telemetry.MonitoringPolicyInterface
}

// NewRestCrudClientMonitoringPolicyV1 creates a REST client for the service.
func NewRestCrudClientMonitoringPolicyV1(url string) telemetry.MonitoringPolicyV1Interface {
	endpoints, err := telemetry.MakeMonitoringPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientMonitoringPolicyV1{

		restMonitoringPolicy: &restObjMonitoringPolicyV1MonitoringPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientMonitoringPolicyV1) MonitoringPolicy() telemetry.MonitoringPolicyInterface {
	return a.restMonitoringPolicy
}
