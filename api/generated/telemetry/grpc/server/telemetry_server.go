// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetryApiServer is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetryApiServer

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type stelemetryTelemetryBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message

	endpointsCollectionPolicyV1 *eCollectionPolicyV1Endpoints
	endpointsExportPolicyV1     *eExportPolicyV1Endpoints
	endpointsMonitoringPolicyV1 *eMonitoringPolicyV1Endpoints
	endpointsRetentionPolicyV1  *eRetentionPolicyV1Endpoints
}

type eCollectionPolicyV1Endpoints struct {
	Svc stelemetryTelemetryBackend

	fnAutoAddCollectionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteCollectionPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetCollectionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListCollectionPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateCollectionPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchCollectionPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}
type eExportPolicyV1Endpoints struct {
	Svc stelemetryTelemetryBackend

	fnAutoAddExportPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteExportPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetExportPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListExportPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateExportPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchExportPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}
type eMonitoringPolicyV1Endpoints struct {
	Svc stelemetryTelemetryBackend

	fnAutoAddMonitoringPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteMonitoringPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetMonitoringPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListMonitoringPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateMonitoringPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchMonitoringPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}
type eRetentionPolicyV1Endpoints struct {
	Svc stelemetryTelemetryBackend

	fnAutoAddRetentionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteRetentionPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetRetentionPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListRetentionPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateRetentionPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchRetentionPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *stelemetryTelemetryBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	s.Messages = map[string]apiserver.Message{

		"telemetry.AutoMsgCollectionPolicyWatchHelper": apisrvpkg.NewMessage("telemetry.AutoMsgCollectionPolicyWatchHelper"),
		"telemetry.AutoMsgExportPolicyWatchHelper":     apisrvpkg.NewMessage("telemetry.AutoMsgExportPolicyWatchHelper"),
		"telemetry.AutoMsgMonitoringPolicyWatchHelper": apisrvpkg.NewMessage("telemetry.AutoMsgMonitoringPolicyWatchHelper"),
		"telemetry.AutoMsgRetentionPolicyWatchHelper":  apisrvpkg.NewMessage("telemetry.AutoMsgRetentionPolicyWatchHelper"),
		"telemetry.CollectionPolicy": apisrvpkg.NewMessage("telemetry.CollectionPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := telemetry.CollectionPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(telemetry.CollectionPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(telemetry.CollectionPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(telemetry.CollectionPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "CollectionPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*telemetry.CollectionPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &telemetry.CollectionPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(telemetry.CollectionPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.CollectionPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.CollectionPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(telemetry.CollectionPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"telemetry.CollectionPolicyList": apisrvpkg.NewMessage("telemetry.CollectionPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := telemetry.CollectionPolicyList{}
			r := telemetry.CollectionPolicy{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"telemetry.CollectionPolicySpec":   apisrvpkg.NewMessage("telemetry.CollectionPolicySpec"),
		"telemetry.CollectionPolicyStatus": apisrvpkg.NewMessage("telemetry.CollectionPolicyStatus"),
		"telemetry.CollectionTrigger":      apisrvpkg.NewMessage("telemetry.CollectionTrigger"),
		"telemetry.ExportPolicy": apisrvpkg.NewMessage("telemetry.ExportPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := telemetry.ExportPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(telemetry.ExportPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(telemetry.ExportPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(telemetry.ExportPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "ExportPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*telemetry.ExportPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &telemetry.ExportPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(telemetry.ExportPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.ExportPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.ExportPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(telemetry.ExportPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"telemetry.ExportPolicyList": apisrvpkg.NewMessage("telemetry.ExportPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := telemetry.ExportPolicyList{}
			r := telemetry.ExportPolicy{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"telemetry.ExportPolicySpec":   apisrvpkg.NewMessage("telemetry.ExportPolicySpec"),
		"telemetry.ExportPolicyStatus": apisrvpkg.NewMessage("telemetry.ExportPolicyStatus"),
		"telemetry.ExternalCred":       apisrvpkg.NewMessage("telemetry.ExternalCred"),
		"telemetry.MonitoringPolicy": apisrvpkg.NewMessage("telemetry.MonitoringPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := telemetry.MonitoringPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(telemetry.MonitoringPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(telemetry.MonitoringPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(telemetry.MonitoringPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "MonitoringPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*telemetry.MonitoringPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &telemetry.MonitoringPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(telemetry.MonitoringPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.MonitoringPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.MonitoringPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(telemetry.MonitoringPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"telemetry.MonitoringPolicyList": apisrvpkg.NewMessage("telemetry.MonitoringPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := telemetry.MonitoringPolicyList{}
			r := telemetry.MonitoringPolicy{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"telemetry.MonitoringPolicySpec":   apisrvpkg.NewMessage("telemetry.MonitoringPolicySpec"),
		"telemetry.MonitoringPolicyStatus": apisrvpkg.NewMessage("telemetry.MonitoringPolicyStatus"),
		"telemetry.RetentionPolicy": apisrvpkg.NewMessage("telemetry.RetentionPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := telemetry.RetentionPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(telemetry.RetentionPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(telemetry.RetentionPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(telemetry.RetentionPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "RetentionPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*telemetry.RetentionPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &telemetry.RetentionPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(telemetry.RetentionPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.RetentionPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.RetentionPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(telemetry.RetentionPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"telemetry.RetentionPolicyList": apisrvpkg.NewMessage("telemetry.RetentionPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := telemetry.RetentionPolicyList{}
			r := telemetry.RetentionPolicy{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"telemetry.RetentionPolicySpec":   apisrvpkg.NewMessage("telemetry.RetentionPolicySpec"),
		"telemetry.RetentionPolicyStatus": apisrvpkg.NewMessage("telemetry.RetentionPolicyStatus"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	scheme.AddKnownTypes(
		&telemetry.CollectionPolicy{},
		&telemetry.ExportPolicy{},
		&telemetry.MonitoringPolicy{},
		&telemetry.RetentionPolicy{},
	)

	apisrv.RegisterMessages("telemetry", s.Messages)

	{
		srv := apisrvpkg.NewService("CollectionPolicyV1")

		s.endpointsCollectionPolicyV1.fnAutoAddCollectionPolicy = srv.AddMethod("AutoAddCollectionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.CollectionPolicy"], s.Messages["telemetry.CollectionPolicy"], "collectionPolicy", "AutoAddCollectionPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsCollectionPolicyV1.fnAutoDeleteCollectionPolicy = srv.AddMethod("AutoDeleteCollectionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.CollectionPolicy"], s.Messages["telemetry.CollectionPolicy"], "collectionPolicy", "AutoDeleteCollectionPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsCollectionPolicyV1.fnAutoGetCollectionPolicy = srv.AddMethod("AutoGetCollectionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.CollectionPolicy"], s.Messages["telemetry.CollectionPolicy"], "collectionPolicy", "AutoGetCollectionPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsCollectionPolicyV1.fnAutoListCollectionPolicy = srv.AddMethod("AutoListCollectionPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["telemetry.CollectionPolicyList"], "collectionPolicy", "AutoListCollectionPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsCollectionPolicyV1.fnAutoUpdateCollectionPolicy = srv.AddMethod("AutoUpdateCollectionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.CollectionPolicy"], s.Messages["telemetry.CollectionPolicy"], "collectionPolicy", "AutoUpdateCollectionPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsCollectionPolicyV1.fnAutoWatchCollectionPolicy = s.Messages["telemetry.CollectionPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"telemetry.CollectionPolicyV1": srv,
		}
		apisrv.RegisterService("telemetry.CollectionPolicyV1", srv)
		endpoints := telemetry.MakeCollectionPolicyV1ServerEndpoints(s.endpointsCollectionPolicyV1, logger)
		server := telemetry.MakeGRPCServerCollectionPolicyV1(ctx, endpoints, logger)
		telemetry.RegisterCollectionPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["telemetry.CollectionPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := telemetry.CollectionPolicy{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(telemetry.CollectionPolicyV1_AutoWatchCollectionPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "CollectionPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for CollectionPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*telemetry.CollectionPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := telemetry.AutoMsgCollectionPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved CollectionPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "CollectionPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*telemetry.CollectionPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for CollectionPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for CollectionPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	{
		srv := apisrvpkg.NewService("ExportPolicyV1")

		s.endpointsExportPolicyV1.fnAutoAddExportPolicy = srv.AddMethod("AutoAddExportPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.ExportPolicy"], s.Messages["telemetry.ExportPolicy"], "exportPolicy", "AutoAddExportPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsExportPolicyV1.fnAutoDeleteExportPolicy = srv.AddMethod("AutoDeleteExportPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.ExportPolicy"], s.Messages["telemetry.ExportPolicy"], "exportPolicy", "AutoDeleteExportPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsExportPolicyV1.fnAutoGetExportPolicy = srv.AddMethod("AutoGetExportPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.ExportPolicy"], s.Messages["telemetry.ExportPolicy"], "exportPolicy", "AutoGetExportPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsExportPolicyV1.fnAutoListExportPolicy = srv.AddMethod("AutoListExportPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["telemetry.ExportPolicyList"], "exportPolicy", "AutoListExportPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsExportPolicyV1.fnAutoUpdateExportPolicy = srv.AddMethod("AutoUpdateExportPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.ExportPolicy"], s.Messages["telemetry.ExportPolicy"], "exportPolicy", "AutoUpdateExportPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsExportPolicyV1.fnAutoWatchExportPolicy = s.Messages["telemetry.ExportPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"telemetry.ExportPolicyV1": srv,
		}
		apisrv.RegisterService("telemetry.ExportPolicyV1", srv)
		endpoints := telemetry.MakeExportPolicyV1ServerEndpoints(s.endpointsExportPolicyV1, logger)
		server := telemetry.MakeGRPCServerExportPolicyV1(ctx, endpoints, logger)
		telemetry.RegisterExportPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["telemetry.ExportPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := telemetry.ExportPolicy{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(telemetry.ExportPolicyV1_AutoWatchExportPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "ExportPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for ExportPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*telemetry.ExportPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := telemetry.AutoMsgExportPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved ExportPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "ExportPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*telemetry.ExportPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for ExportPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for ExportPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	{
		srv := apisrvpkg.NewService("MonitoringPolicyV1")

		s.endpointsMonitoringPolicyV1.fnAutoAddMonitoringPolicy = srv.AddMethod("AutoAddMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoAddMonitoringPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoDeleteMonitoringPolicy = srv.AddMethod("AutoDeleteMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoDeleteMonitoringPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoGetMonitoringPolicy = srv.AddMethod("AutoGetMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoGetMonitoringPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoListMonitoringPolicy = srv.AddMethod("AutoListMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["telemetry.MonitoringPolicyList"], "monitoringPolicy", "AutoListMonitoringPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoUpdateMonitoringPolicy = srv.AddMethod("AutoUpdateMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoUpdateMonitoringPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoWatchMonitoringPolicy = s.Messages["telemetry.MonitoringPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"telemetry.MonitoringPolicyV1": srv,
		}
		apisrv.RegisterService("telemetry.MonitoringPolicyV1", srv)
		endpoints := telemetry.MakeMonitoringPolicyV1ServerEndpoints(s.endpointsMonitoringPolicyV1, logger)
		server := telemetry.MakeGRPCServerMonitoringPolicyV1(ctx, endpoints, logger)
		telemetry.RegisterMonitoringPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["telemetry.MonitoringPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := telemetry.MonitoringPolicy{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "MonitoringPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for MonitoringPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*telemetry.MonitoringPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := telemetry.AutoMsgMonitoringPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved MonitoringPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "MonitoringPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*telemetry.MonitoringPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for MonitoringPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for MonitoringPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	{
		srv := apisrvpkg.NewService("RetentionPolicyV1")

		s.endpointsRetentionPolicyV1.fnAutoAddRetentionPolicy = srv.AddMethod("AutoAddRetentionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.RetentionPolicy"], s.Messages["telemetry.RetentionPolicy"], "retentionPolicy", "AutoAddRetentionPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsRetentionPolicyV1.fnAutoDeleteRetentionPolicy = srv.AddMethod("AutoDeleteRetentionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.RetentionPolicy"], s.Messages["telemetry.RetentionPolicy"], "retentionPolicy", "AutoDeleteRetentionPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsRetentionPolicyV1.fnAutoGetRetentionPolicy = srv.AddMethod("AutoGetRetentionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.RetentionPolicy"], s.Messages["telemetry.RetentionPolicy"], "retentionPolicy", "AutoGetRetentionPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsRetentionPolicyV1.fnAutoListRetentionPolicy = srv.AddMethod("AutoListRetentionPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["telemetry.RetentionPolicyList"], "retentionPolicy", "AutoListRetentionPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsRetentionPolicyV1.fnAutoUpdateRetentionPolicy = srv.AddMethod("AutoUpdateRetentionPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.RetentionPolicy"], s.Messages["telemetry.RetentionPolicy"], "retentionPolicy", "AutoUpdateRetentionPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsRetentionPolicyV1.fnAutoWatchRetentionPolicy = s.Messages["telemetry.RetentionPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"telemetry.RetentionPolicyV1": srv,
		}
		apisrv.RegisterService("telemetry.RetentionPolicyV1", srv)
		endpoints := telemetry.MakeRetentionPolicyV1ServerEndpoints(s.endpointsRetentionPolicyV1, logger)
		server := telemetry.MakeGRPCServerRetentionPolicyV1(ctx, endpoints, logger)
		telemetry.RegisterRetentionPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["telemetry.RetentionPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := telemetry.RetentionPolicy{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(telemetry.RetentionPolicyV1_AutoWatchRetentionPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "RetentionPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for RetentionPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*telemetry.RetentionPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := telemetry.AutoMsgRetentionPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved RetentionPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "RetentionPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*telemetry.RetentionPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for RetentionPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for RetentionPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	return nil
}

func (e *eCollectionPolicyV1Endpoints) AutoAddCollectionPolicy(ctx context.Context, t telemetry.CollectionPolicy) (telemetry.CollectionPolicy, error) {
	r, err := e.fnAutoAddCollectionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.CollectionPolicy), err
	}
	return telemetry.CollectionPolicy{}, err

}
func (e *eCollectionPolicyV1Endpoints) AutoDeleteCollectionPolicy(ctx context.Context, t telemetry.CollectionPolicy) (telemetry.CollectionPolicy, error) {
	r, err := e.fnAutoDeleteCollectionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.CollectionPolicy), err
	}
	return telemetry.CollectionPolicy{}, err

}
func (e *eCollectionPolicyV1Endpoints) AutoGetCollectionPolicy(ctx context.Context, t telemetry.CollectionPolicy) (telemetry.CollectionPolicy, error) {
	r, err := e.fnAutoGetCollectionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.CollectionPolicy), err
	}
	return telemetry.CollectionPolicy{}, err

}
func (e *eCollectionPolicyV1Endpoints) AutoListCollectionPolicy(ctx context.Context, t api.ListWatchOptions) (telemetry.CollectionPolicyList, error) {
	r, err := e.fnAutoListCollectionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.CollectionPolicyList), err
	}
	return telemetry.CollectionPolicyList{}, err

}
func (e *eCollectionPolicyV1Endpoints) AutoUpdateCollectionPolicy(ctx context.Context, t telemetry.CollectionPolicy) (telemetry.CollectionPolicy, error) {
	r, err := e.fnAutoUpdateCollectionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.CollectionPolicy), err
	}
	return telemetry.CollectionPolicy{}, err

}

func (e *eCollectionPolicyV1Endpoints) AutoWatchCollectionPolicy(in *api.ListWatchOptions, stream telemetry.CollectionPolicyV1_AutoWatchCollectionPolicyServer) error {
	return e.fnAutoWatchCollectionPolicy(in, stream, "collectionPolicy")
}
func (e *eExportPolicyV1Endpoints) AutoAddExportPolicy(ctx context.Context, t telemetry.ExportPolicy) (telemetry.ExportPolicy, error) {
	r, err := e.fnAutoAddExportPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.ExportPolicy), err
	}
	return telemetry.ExportPolicy{}, err

}
func (e *eExportPolicyV1Endpoints) AutoDeleteExportPolicy(ctx context.Context, t telemetry.ExportPolicy) (telemetry.ExportPolicy, error) {
	r, err := e.fnAutoDeleteExportPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.ExportPolicy), err
	}
	return telemetry.ExportPolicy{}, err

}
func (e *eExportPolicyV1Endpoints) AutoGetExportPolicy(ctx context.Context, t telemetry.ExportPolicy) (telemetry.ExportPolicy, error) {
	r, err := e.fnAutoGetExportPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.ExportPolicy), err
	}
	return telemetry.ExportPolicy{}, err

}
func (e *eExportPolicyV1Endpoints) AutoListExportPolicy(ctx context.Context, t api.ListWatchOptions) (telemetry.ExportPolicyList, error) {
	r, err := e.fnAutoListExportPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.ExportPolicyList), err
	}
	return telemetry.ExportPolicyList{}, err

}
func (e *eExportPolicyV1Endpoints) AutoUpdateExportPolicy(ctx context.Context, t telemetry.ExportPolicy) (telemetry.ExportPolicy, error) {
	r, err := e.fnAutoUpdateExportPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.ExportPolicy), err
	}
	return telemetry.ExportPolicy{}, err

}

func (e *eExportPolicyV1Endpoints) AutoWatchExportPolicy(in *api.ListWatchOptions, stream telemetry.ExportPolicyV1_AutoWatchExportPolicyServer) error {
	return e.fnAutoWatchExportPolicy(in, stream, "exportPolicy")
}
func (e *eMonitoringPolicyV1Endpoints) AutoAddMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoAddMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoDeleteMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoDeleteMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoGetMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoGetMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoListMonitoringPolicy(ctx context.Context, t api.ListWatchOptions) (telemetry.MonitoringPolicyList, error) {
	r, err := e.fnAutoListMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicyList), err
	}
	return telemetry.MonitoringPolicyList{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoUpdateMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoUpdateMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}

func (e *eMonitoringPolicyV1Endpoints) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return e.fnAutoWatchMonitoringPolicy(in, stream, "monitoringPolicy")
}
func (e *eRetentionPolicyV1Endpoints) AutoAddRetentionPolicy(ctx context.Context, t telemetry.RetentionPolicy) (telemetry.RetentionPolicy, error) {
	r, err := e.fnAutoAddRetentionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.RetentionPolicy), err
	}
	return telemetry.RetentionPolicy{}, err

}
func (e *eRetentionPolicyV1Endpoints) AutoDeleteRetentionPolicy(ctx context.Context, t telemetry.RetentionPolicy) (telemetry.RetentionPolicy, error) {
	r, err := e.fnAutoDeleteRetentionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.RetentionPolicy), err
	}
	return telemetry.RetentionPolicy{}, err

}
func (e *eRetentionPolicyV1Endpoints) AutoGetRetentionPolicy(ctx context.Context, t telemetry.RetentionPolicy) (telemetry.RetentionPolicy, error) {
	r, err := e.fnAutoGetRetentionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.RetentionPolicy), err
	}
	return telemetry.RetentionPolicy{}, err

}
func (e *eRetentionPolicyV1Endpoints) AutoListRetentionPolicy(ctx context.Context, t api.ListWatchOptions) (telemetry.RetentionPolicyList, error) {
	r, err := e.fnAutoListRetentionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.RetentionPolicyList), err
	}
	return telemetry.RetentionPolicyList{}, err

}
func (e *eRetentionPolicyV1Endpoints) AutoUpdateRetentionPolicy(ctx context.Context, t telemetry.RetentionPolicy) (telemetry.RetentionPolicy, error) {
	r, err := e.fnAutoUpdateRetentionPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.RetentionPolicy), err
	}
	return telemetry.RetentionPolicy{}, err

}

func (e *eRetentionPolicyV1Endpoints) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream telemetry.RetentionPolicyV1_AutoWatchRetentionPolicyServer) error {
	return e.fnAutoWatchRetentionPolicy(in, stream, "retentionPolicy")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := stelemetryTelemetryBackend{}

	{
		e := eCollectionPolicyV1Endpoints{Svc: svc}
		svc.endpointsCollectionPolicyV1 = &e
	}
	{
		e := eExportPolicyV1Endpoints{Svc: svc}
		svc.endpointsExportPolicyV1 = &e
	}
	{
		e := eMonitoringPolicyV1Endpoints{Svc: svc}
		svc.endpointsMonitoringPolicyV1 = &e
	}
	{
		e := eRetentionPolicyV1Endpoints{Svc: svc}
		svc.endpointsRetentionPolicyV1 = &e
	}
	apisrv.Register("telemetry.protos/telemetry.proto", &svc)
}
