// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetryApiServer is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetryApiServer

import (
	"context"
	"fmt"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pkg/errors"
	"github.com/satori/go.uuid"
	"google.golang.org/grpc"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type stelemetryTelemetryBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message

	endpointsMonitoringPolicyV1 *eMonitoringPolicyV1Endpoints
}

type eMonitoringPolicyV1Endpoints struct {
	Svc stelemetryTelemetryBackend

	fnAutoAddMonitoringPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteMonitoringPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetMonitoringPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListMonitoringPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateMonitoringPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchMonitoringPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *stelemetryTelemetryBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	s.Messages = map[string]apiserver.Message{

		"telemetry.AutoMsgMonitoringPolicyWatchHelper": apisrvpkg.NewMessage("telemetry.AutoMsgMonitoringPolicyWatchHelper"),
		"telemetry.MonitoringPolicy": apisrvpkg.NewMessage("telemetry.MonitoringPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := telemetry.MonitoringPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(telemetry.MonitoringPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(telemetry.MonitoringPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(telemetry.MonitoringPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "MonitoringPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*telemetry.MonitoringPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &telemetry.MonitoringPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(telemetry.MonitoringPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.(telemetry.MonitoringPolicy)
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(telemetry.MonitoringPolicy)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(telemetry.MonitoringPolicy)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.MonitoringPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := telemetry.MonitoringPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(telemetry.MonitoringPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"telemetry.MonitoringPolicyList": apisrvpkg.NewMessage("telemetry.MonitoringPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := telemetry.MonitoringPolicyList{}
			r := telemetry.MonitoringPolicy{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"telemetry.MonitoringPolicySpec":   apisrvpkg.NewMessage("telemetry.MonitoringPolicySpec"),
		"telemetry.MonitoringPolicyStatus": apisrvpkg.NewMessage("telemetry.MonitoringPolicyStatus"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	scheme.AddKnownTypes(
		&telemetry.MonitoringPolicy{},
	)

	apisrv.RegisterMessages("telemetry", s.Messages)

	{
		srv := apisrvpkg.NewService("MonitoringPolicyV1")

		s.endpointsMonitoringPolicyV1.fnAutoAddMonitoringPolicy = srv.AddMethod("AutoAddMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoAddMonitoringPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoDeleteMonitoringPolicy = srv.AddMethod("AutoDeleteMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoDeleteMonitoringPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoGetMonitoringPolicy = srv.AddMethod("AutoGetMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoGetMonitoringPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoListMonitoringPolicy = srv.AddMethod("AutoListMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["telemetry.MonitoringPolicyList"], "monitoringPolicy", "AutoListMonitoringPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoUpdateMonitoringPolicy = srv.AddMethod("AutoUpdateMonitoringPolicy",
			apisrvpkg.NewMethod(s.Messages["telemetry.MonitoringPolicy"], s.Messages["telemetry.MonitoringPolicy"], "monitoringPolicy", "AutoUpdateMonitoringPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsMonitoringPolicyV1.fnAutoWatchMonitoringPolicy = s.Messages["telemetry.MonitoringPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"telemetry.MonitoringPolicyV1": srv,
		}
		apisrv.RegisterService("telemetry.MonitoringPolicyV1", srv)
		endpoints := telemetry.MakeMonitoringPolicyV1ServerEndpoints(s.endpointsMonitoringPolicyV1, logger)
		server := telemetry.MakeGRPCServerMonitoringPolicyV1(ctx, endpoints, logger)
		telemetry.RegisterMonitoringPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["telemetry.MonitoringPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := telemetry.MonitoringPolicy{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "MonitoringPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for MonitoringPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*telemetry.MonitoringPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := telemetry.AutoMsgMonitoringPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved MonitoringPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "MonitoringPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*telemetry.MonitoringPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for MonitoringPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for MonitoringPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	return nil
}

func (e *eMonitoringPolicyV1Endpoints) AutoAddMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoAddMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoDeleteMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoDeleteMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoGetMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoGetMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoListMonitoringPolicy(ctx context.Context, t api.ListWatchOptions) (telemetry.MonitoringPolicyList, error) {
	r, err := e.fnAutoListMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicyList), err
	}
	return telemetry.MonitoringPolicyList{}, err

}
func (e *eMonitoringPolicyV1Endpoints) AutoUpdateMonitoringPolicy(ctx context.Context, t telemetry.MonitoringPolicy) (telemetry.MonitoringPolicy, error) {
	r, err := e.fnAutoUpdateMonitoringPolicy(ctx, t)
	if err == nil {
		return r.(telemetry.MonitoringPolicy), err
	}
	return telemetry.MonitoringPolicy{}, err

}

func (e *eMonitoringPolicyV1Endpoints) AutoWatchMonitoringPolicy(in *api.ListWatchOptions, stream telemetry.MonitoringPolicyV1_AutoWatchMonitoringPolicyServer) error {
	return e.fnAutoWatchMonitoringPolicy(in, stream, "monitoringPolicy")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := stelemetryTelemetryBackend{}

	{
		e := eMonitoringPolicyV1Endpoints{Svc: svc}
		svc.endpointsMonitoringPolicyV1 = &e
	}
	apisrv.Register("telemetry.protos/telemetry.proto", &svc)
}
