// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *FlowExportPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "flowExportPolicy/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *FwlogPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "fwlogPolicy/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *StatsPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "statsPolicy/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *FlowExportPolicyList) MakeKey(prefix string) string {
	obj := FlowExportPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *FwlogPolicyList) MakeKey(prefix string) string {
	obj := FwlogPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *StatsPolicyList) MakeKey(prefix string) string {
	obj := StatsPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgFlowExportPolicyWatchHelper) MakeKey(prefix string) string {
	obj := FlowExportPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgFwlogPolicyWatchHelper) MakeKey(prefix string) string {
	obj := FwlogPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgStatsPolicyWatchHelper) MakeKey(prefix string) string {
	obj := StatsPolicy{}
	return obj.MakeKey(prefix)
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgFlowExportPolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgFlowExportPolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgFlowExportPolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgFlowExportPolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgFlowExportPolicyWatchHelper) Defaults(ver string) bool {
	var ret bool
	if m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgFwlogPolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgFwlogPolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgFwlogPolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgFwlogPolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgFwlogPolicyWatchHelper) Defaults(ver string) bool {
	var ret bool
	if m.Object != nil {
		ret = ret || m.Object.Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AutoMsgStatsPolicyWatchHelper) Clone(into interface{}) (interface{}, error) {
	var out *AutoMsgStatsPolicyWatchHelper
	var ok bool
	if into == nil {
		out = &AutoMsgStatsPolicyWatchHelper{}
	} else {
		out, ok = into.(*AutoMsgStatsPolicyWatchHelper)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AutoMsgStatsPolicyWatchHelper) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *FlowExportPolicy) Clone(into interface{}) (interface{}, error) {
	var out *FlowExportPolicy
	var ok bool
	if into == nil {
		out = &FlowExportPolicy{}
	} else {
		out, ok = into.(*FlowExportPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FlowExportPolicy) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FlowExportPolicyList) Clone(into interface{}) (interface{}, error) {
	var out *FlowExportPolicyList
	var ok bool
	if into == nil {
		out = &FlowExportPolicyList{}
	} else {
		out, ok = into.(*FlowExportPolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FlowExportPolicyList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FlowExportSpec) Clone(into interface{}) (interface{}, error) {
	var out *FlowExportSpec
	var ok bool
	if into == nil {
		out = &FlowExportSpec{}
	} else {
		out, ok = into.(*FlowExportSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FlowExportSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Targets {
		ret = ret || m.Targets[k].Defaults(ver)
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FlowExportStatus) Clone(into interface{}) (interface{}, error) {
	var out *FlowExportStatus
	var ok bool
	if into == nil {
		out = &FlowExportStatus{}
	} else {
		out, ok = into.(*FlowExportStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FlowExportStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *FlowExportTarget) Clone(into interface{}) (interface{}, error) {
	var out *FlowExportTarget
	var ok bool
	if into == nil {
		out = &FlowExportTarget{}
	} else {
		out, ok = into.(*FlowExportTarget)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FlowExportTarget) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Format = FlowExportTarget_Formats_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwlogExport) Clone(into interface{}) (interface{}, error) {
	var out *FwlogExport
	var ok bool
	if into == nil {
		out = &FwlogExport{}
	} else {
		out, ok = into.(*FwlogExport)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwlogExport) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		for k := range m.Filter {
			m.Filter[k] = FwlogFilter_name[0]
		}
		m.Format = FwlogExportFormat_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwlogPolicy) Clone(into interface{}) (interface{}, error) {
	var out *FwlogPolicy
	var ok bool
	if into == nil {
		out = &FwlogPolicy{}
	} else {
		out, ok = into.(*FwlogPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwlogPolicy) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwlogPolicyList) Clone(into interface{}) (interface{}, error) {
	var out *FwlogPolicyList
	var ok bool
	if into == nil {
		out = &FwlogPolicyList{}
	} else {
		out, ok = into.(*FwlogPolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwlogPolicyList) Defaults(ver string) bool {
	var ret bool
	for k := range m.Items {
		if m.Items[k] != nil {
			ret = ret || m.Items[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwlogSpec) Clone(into interface{}) (interface{}, error) {
	var out *FwlogSpec
	var ok bool
	if into == nil {
		out = &FwlogSpec{}
	} else {
		out, ok = into.(*FwlogSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwlogSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Exports {
		if m.Exports[k] != nil {
			ret = ret || m.Exports[k].Defaults(ver)
		}
	}
	ret = true
	switch ver {
	default:
		for k := range m.Filter {
			m.Filter[k] = FwlogFilter_name[0]
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *FwlogStatus) Clone(into interface{}) (interface{}, error) {
	var out *FwlogStatus
	var ok bool
	if into == nil {
		out = &FwlogStatus{}
	} else {
		out, ok = into.(*FwlogStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FwlogStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StatsPolicy) Clone(into interface{}) (interface{}, error) {
	var out *StatsPolicy
	var ok bool
	if into == nil {
		out = &StatsPolicy{}
	} else {
		out, ok = into.(*StatsPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StatsPolicy) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StatsPolicyList) Clone(into interface{}) (interface{}, error) {
	var out *StatsPolicyList
	var ok bool
	if into == nil {
		out = &StatsPolicyList{}
	} else {
		out, ok = into.(*StatsPolicyList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StatsPolicyList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StatsSpec) Clone(into interface{}) (interface{}, error) {
	var out *StatsSpec
	var ok bool
	if into == nil {
		out = &StatsSpec{}
	} else {
		out, ok = into.(*StatsSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StatsSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *StatsStatus) Clone(into interface{}) (interface{}, error) {
	var out *StatsStatus
	var ok bool
	if into == nil {
		out = &StatsStatus{}
	} else {
		out, ok = into.(*StatsStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *StatsStatus) Defaults(ver string) bool {
	return false
}

// Validators

func (m *AutoMsgFlowExportPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgFwlogPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgStatsPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FlowExportPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *FlowExportPolicyList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *FlowExportSpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Targets {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *FlowExportStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FlowExportTarget) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapTelemetry["FlowExportTarget"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapTelemetry["FlowExportTarget"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *FwlogExport) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapTelemetry["FwlogExport"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapTelemetry["FwlogExport"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *FwlogPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *FwlogPolicyList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *FwlogSpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Exports {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := validatorMapTelemetry["FwlogSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapTelemetry["FwlogSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *FwlogStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {

	validatorMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

	validatorMapTelemetry["FlowExportTarget"] = make(map[string][]func(interface{}) bool)
	validatorMapTelemetry["FlowExportTarget"]["all"] = append(validatorMapTelemetry["FlowExportTarget"]["all"], func(i interface{}) bool {
		m := i.(*FlowExportTarget)

		if _, ok := FlowExportTarget_Formats_value[m.Format]; !ok {
			return false
		}
		return true
	})

	validatorMapTelemetry["FwlogExport"] = make(map[string][]func(interface{}) bool)
	validatorMapTelemetry["FwlogExport"]["all"] = append(validatorMapTelemetry["FwlogExport"]["all"], func(i interface{}) bool {
		m := i.(*FwlogExport)

		for _, v := range m.Filter {
			if _, ok := FwlogFilter_value[v]; !ok {
				return false
			}
		}
		return true
	})

	validatorMapTelemetry["FwlogExport"]["all"] = append(validatorMapTelemetry["FwlogExport"]["all"], func(i interface{}) bool {
		m := i.(*FwlogExport)

		if _, ok := FwlogExportFormat_value[m.Format]; !ok {
			return false
		}
		return true
	})

	validatorMapTelemetry["FwlogSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapTelemetry["FwlogSpec"]["all"] = append(validatorMapTelemetry["FwlogSpec"]["all"], func(i interface{}) bool {
		m := i.(*FwlogSpec)

		for _, v := range m.Filter {
			if _, ok := FwlogFilter_value[v]; !ok {
				return false
			}
		}
		return true
	})

}
