// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *FlowExportPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "flowExportPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *FwlogPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "FwlogPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *StatsPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "StatsPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *FwlogPolicyList) MakeKey(prefix string) string {
	obj := FwlogPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *StatsPolicyList) MakeKey(prefix string) string {
	obj := StatsPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgFwlogPolicyWatchHelper) MakeKey(prefix string) string {
	obj := FwlogPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgStatsPolicyWatchHelper) MakeKey(prefix string) string {
	obj := StatsPolicy{}
	return obj.MakeKey(prefix)
}

func (m *AutoMsgFwlogPolicyWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgFwlogPolicyWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgStatsPolicyWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgStatsPolicyWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FlowExportPolicy) Clone(into interface{}) error {
	out, ok := into.(*FlowExportPolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FlowExportSpec) Clone(into interface{}) error {
	out, ok := into.(*FlowExportSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FlowExportStatus) Clone(into interface{}) error {
	out, ok := into.(*FlowExportStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FlowExportTarget) Clone(into interface{}) error {
	out, ok := into.(*FlowExportTarget)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FwlogPolicy) Clone(into interface{}) error {
	out, ok := into.(*FwlogPolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FwlogPolicyList) Clone(into interface{}) error {
	out, ok := into.(*FwlogPolicyList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FwlogSpec) Clone(into interface{}) error {
	out, ok := into.(*FwlogSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *FwlogStatus) Clone(into interface{}) error {
	out, ok := into.(*FwlogStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *StatsPolicy) Clone(into interface{}) error {
	out, ok := into.(*StatsPolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *StatsPolicyList) Clone(into interface{}) error {
	out, ok := into.(*StatsPolicyList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *StatsSpec) Clone(into interface{}) error {
	out, ok := into.(*StatsSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *StatsStatus) Clone(into interface{}) error {
	out, ok := into.(*StatsStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *AutoMsgFwlogPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgStatsPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FlowExportPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *FlowExportSpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Targets {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *FlowExportStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FlowExportTarget) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapTelemetry["FlowExportTarget"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapTelemetry["FlowExportTarget"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *FwlogPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FwlogPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FwlogSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *FwlogStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *StatsStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	funcMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

	funcMapTelemetry["FlowExportTarget"] = make(map[string][]func(interface{}) bool)
	funcMapTelemetry["FlowExportTarget"]["all"] = append(funcMapTelemetry["FlowExportTarget"]["all"], func(i interface{}) bool {
		m := i.(*FlowExportTarget)

		if _, ok := FlowExportTarget_Formats_value[m.Format]; !ok {
			return false
		}
		return true
	})

}
