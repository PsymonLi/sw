// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package telemetry is a auto generated package.
Input file: protos/telemetry.proto
*/
package telemetry

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *MonitoringPolicy) MakeKey(prefix string) string {
	return fmt.Sprint("/venice/", prefix, "/", "monitoringPolicy/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *MonitoringPolicyList) MakeKey(prefix string) string {
	obj := MonitoringPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgMonitoringPolicyWatchHelper) MakeKey(prefix string) string {
	obj := MonitoringPolicy{}
	return obj.MakeKey(prefix)
}

// Validators

func (m *AutoMsgMonitoringPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *MonitoringPolicy) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *MonitoringPolicyList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *MonitoringPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapTelemetry["MonitoringPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapTelemetry["MonitoringPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *MonitoringPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
	funcMapTelemetry = make(map[string]map[string][]func(interface{}) bool)

	funcMapTelemetry["MonitoringPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapTelemetry["MonitoringPolicySpec"]["all"] = append(funcMapTelemetry["MonitoringPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*MonitoringPolicySpec)

		for _, v := range m.Area {
			if _, ok := MonitoringPolicySpec_Areas_value[v]; !ok {
				return false
			}
		}
		return true
	})

}
