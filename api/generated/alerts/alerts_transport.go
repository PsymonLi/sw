// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package alerts is a auto generated package.
Input file: protos/alerts.proto
*/
package alerts

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerAlertDestinationV1 struct {
	Endpoints EndpointsAlertDestinationV1Server

	AutoAddAlertDestinationHdlr    grpctransport.Handler
	AutoDeleteAlertDestinationHdlr grpctransport.Handler
	AutoGetAlertDestinationHdlr    grpctransport.Handler
	AutoListAlertDestinationHdlr   grpctransport.Handler
	AutoUpdateAlertDestinationHdlr grpctransport.Handler
}

// MakeGRPCServerAlertDestinationV1 creates a GRPC server for AlertDestinationV1 service
func MakeGRPCServerAlertDestinationV1(ctx context.Context, endpoints EndpointsAlertDestinationV1Server, logger log.Logger) AlertDestinationV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAlertDestinationV1{
		Endpoints: endpoints,
		AutoAddAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlertDestination", logger)))...,
		),

		AutoDeleteAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlertDestination", logger)))...,
		),

		AutoGetAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlertDestination", logger)))...,
		),

		AutoListAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertDestinationEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertDestinationList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlertDestination", logger)))...,
		),

		AutoUpdateAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlertDestination", logger)))...,
		),
	}
}

func (s *grpcServerAlertDestinationV1) AutoAddAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoAddAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertDestinationV1AutoAddAlertDestination).V
	return &r, resp.(respAlertDestinationV1AutoAddAlertDestination).Err
}

func decodeHTTPrespAlertDestinationV1AutoAddAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertDestinationV1) AutoDeleteAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoDeleteAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertDestinationV1AutoDeleteAlertDestination).V
	return &r, resp.(respAlertDestinationV1AutoDeleteAlertDestination).Err
}

func decodeHTTPrespAlertDestinationV1AutoDeleteAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertDestinationV1) AutoGetAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoGetAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertDestinationV1AutoGetAlertDestination).V
	return &r, resp.(respAlertDestinationV1AutoGetAlertDestination).Err
}

func decodeHTTPrespAlertDestinationV1AutoGetAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertDestinationV1) AutoListAlertDestination(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertDestinationList, error) {
	_, resp, err := s.AutoListAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertDestinationV1AutoListAlertDestination).V
	return &r, resp.(respAlertDestinationV1AutoListAlertDestination).Err
}

func decodeHTTPrespAlertDestinationV1AutoListAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestinationList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertDestinationV1) AutoUpdateAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoUpdateAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertDestinationV1AutoUpdateAlertDestination).V
	return &r, resp.(respAlertDestinationV1AutoUpdateAlertDestination).Err
}

func decodeHTTPrespAlertDestinationV1AutoUpdateAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertDestinationV1) AutoWatchAlertDestination(in *api.ListWatchOptions, stream AlertDestinationV1_AutoWatchAlertDestinationServer) error {
	return s.Endpoints.AutoWatchAlertDestination(in, stream)
}

type grpcServerAlertPolicyV1 struct {
	Endpoints EndpointsAlertPolicyV1Server

	AutoAddAlertPolicyHdlr    grpctransport.Handler
	AutoDeleteAlertPolicyHdlr grpctransport.Handler
	AutoGetAlertPolicyHdlr    grpctransport.Handler
	AutoListAlertPolicyHdlr   grpctransport.Handler
	AutoUpdateAlertPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerAlertPolicyV1 creates a GRPC server for AlertPolicyV1 service
func MakeGRPCServerAlertPolicyV1(ctx context.Context, endpoints EndpointsAlertPolicyV1Server, logger log.Logger) AlertPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAlertPolicyV1{
		Endpoints: endpoints,
		AutoAddAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlertPolicy", logger)))...,
		),

		AutoDeleteAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlertPolicy", logger)))...,
		),

		AutoGetAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlertPolicy", logger)))...,
		),

		AutoListAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlertPolicy", logger)))...,
		),

		AutoUpdateAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlertPolicy", logger)))...,
		),
	}
}

func (s *grpcServerAlertPolicyV1) AutoAddAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoAddAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertPolicyV1AutoAddAlertPolicy).V
	return &r, resp.(respAlertPolicyV1AutoAddAlertPolicy).Err
}

func decodeHTTPrespAlertPolicyV1AutoAddAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertPolicyV1) AutoDeleteAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoDeleteAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertPolicyV1AutoDeleteAlertPolicy).V
	return &r, resp.(respAlertPolicyV1AutoDeleteAlertPolicy).Err
}

func decodeHTTPrespAlertPolicyV1AutoDeleteAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertPolicyV1) AutoGetAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoGetAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertPolicyV1AutoGetAlertPolicy).V
	return &r, resp.(respAlertPolicyV1AutoGetAlertPolicy).Err
}

func decodeHTTPrespAlertPolicyV1AutoGetAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertPolicyV1) AutoListAlertPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertPolicyList, error) {
	_, resp, err := s.AutoListAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertPolicyV1AutoListAlertPolicy).V
	return &r, resp.(respAlertPolicyV1AutoListAlertPolicy).Err
}

func decodeHTTPrespAlertPolicyV1AutoListAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertPolicyV1) AutoUpdateAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoUpdateAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertPolicyV1AutoUpdateAlertPolicy).V
	return &r, resp.(respAlertPolicyV1AutoUpdateAlertPolicy).Err
}

func decodeHTTPrespAlertPolicyV1AutoUpdateAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertPolicyV1) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream AlertPolicyV1_AutoWatchAlertPolicyServer) error {
	return s.Endpoints.AutoWatchAlertPolicy(in, stream)
}

type grpcServerAlertsV1 struct {
	Endpoints EndpointsAlertsV1Server

	AutoAddAlertHdlr    grpctransport.Handler
	AutoDeleteAlertHdlr grpctransport.Handler
	AutoGetAlertHdlr    grpctransport.Handler
	AutoListAlertHdlr   grpctransport.Handler
	AutoUpdateAlertHdlr grpctransport.Handler
}

// MakeGRPCServerAlertsV1 creates a GRPC server for AlertsV1 service
func MakeGRPCServerAlertsV1(ctx context.Context, endpoints EndpointsAlertsV1Server, logger log.Logger) AlertsV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerAlertsV1{
		Endpoints: endpoints,
		AutoAddAlertHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlert", logger)))...,
		),

		AutoDeleteAlertHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlert", logger)))...,
		),

		AutoGetAlertHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlert", logger)))...,
		),

		AutoListAlertHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlert", logger)))...,
		),

		AutoUpdateAlertHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlert", logger)))...,
		),
	}
}

func (s *grpcServerAlertsV1) AutoAddAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoAddAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertsV1AutoAddAlert).V
	return &r, resp.(respAlertsV1AutoAddAlert).Err
}

func decodeHTTPrespAlertsV1AutoAddAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertsV1) AutoDeleteAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoDeleteAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertsV1AutoDeleteAlert).V
	return &r, resp.(respAlertsV1AutoDeleteAlert).Err
}

func decodeHTTPrespAlertsV1AutoDeleteAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertsV1) AutoGetAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoGetAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertsV1AutoGetAlert).V
	return &r, resp.(respAlertsV1AutoGetAlert).Err
}

func decodeHTTPrespAlertsV1AutoGetAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertsV1) AutoListAlert(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertList, error) {
	_, resp, err := s.AutoListAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertsV1AutoListAlert).V
	return &r, resp.(respAlertsV1AutoListAlert).Err
}

func decodeHTTPrespAlertsV1AutoListAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertsV1) AutoUpdateAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoUpdateAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respAlertsV1AutoUpdateAlert).V
	return &r, resp.(respAlertsV1AutoUpdateAlert).Err
}

func decodeHTTPrespAlertsV1AutoUpdateAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerAlertsV1) AutoWatchAlert(in *api.ListWatchOptions, stream AlertsV1_AutoWatchAlertServer) error {
	return s.Endpoints.AutoWatchAlert(in, stream)
}

func encodeHTTPAlert(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlert(_ context.Context, r *http.Request) (interface{}, error) {
	var req Alert
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlert encodes GRPC request
func EncodeGrpcReqAlert(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Alert)
	return req, nil
}

// DecodeGrpcReqAlert decodes GRPC request
func DecodeGrpcReqAlert(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Alert)
	return req, nil
}

// EncodeGrpcRespAlert encodes GRC response
func EncodeGrpcRespAlert(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlert decodes GRPC response
func DecodeGrpcRespAlert(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertDestination(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertDestination(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertDestination
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertDestination encodes GRPC request
func EncodeGrpcReqAlertDestination(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestination)
	return req, nil
}

// DecodeGrpcReqAlertDestination decodes GRPC request
func DecodeGrpcReqAlertDestination(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestination)
	return req, nil
}

// EncodeGrpcRespAlertDestination encodes GRC response
func EncodeGrpcRespAlertDestination(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertDestination decodes GRPC response
func DecodeGrpcRespAlertDestination(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertDestinationList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertDestinationList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertDestinationList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertDestinationList encodes GRPC request
func EncodeGrpcReqAlertDestinationList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationList)
	return req, nil
}

// DecodeGrpcReqAlertDestinationList decodes GRPC request
func DecodeGrpcReqAlertDestinationList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationList)
	return req, nil
}

// EncodeGrpcRespAlertDestinationList endodes the GRPC response
func EncodeGrpcRespAlertDestinationList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertDestinationList decodes the GRPC response
func DecodeGrpcRespAlertDestinationList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertDestinationSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertDestinationSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertDestinationSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertDestinationSpec encodes GRPC request
func EncodeGrpcReqAlertDestinationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationSpec)
	return req, nil
}

// DecodeGrpcReqAlertDestinationSpec decodes GRPC request
func DecodeGrpcReqAlertDestinationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationSpec)
	return req, nil
}

// EncodeGrpcRespAlertDestinationSpec encodes GRC response
func EncodeGrpcRespAlertDestinationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertDestinationSpec decodes GRPC response
func DecodeGrpcRespAlertDestinationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertDestinationStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertDestinationStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertDestinationStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertDestinationStatus encodes GRPC request
func EncodeGrpcReqAlertDestinationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationStatus)
	return req, nil
}

// DecodeGrpcReqAlertDestinationStatus decodes GRPC request
func DecodeGrpcReqAlertDestinationStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationStatus)
	return req, nil
}

// EncodeGrpcRespAlertDestinationStatus encodes GRC response
func EncodeGrpcRespAlertDestinationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertDestinationStatus decodes GRPC response
func DecodeGrpcRespAlertDestinationStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertList encodes GRPC request
func EncodeGrpcReqAlertList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertList)
	return req, nil
}

// DecodeGrpcReqAlertList decodes GRPC request
func DecodeGrpcReqAlertList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertList)
	return req, nil
}

// EncodeGrpcRespAlertList endodes the GRPC response
func EncodeGrpcRespAlertList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertList decodes the GRPC response
func DecodeGrpcRespAlertList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertPolicy encodes GRPC request
func EncodeGrpcReqAlertPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicy)
	return req, nil
}

// DecodeGrpcReqAlertPolicy decodes GRPC request
func DecodeGrpcReqAlertPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicy)
	return req, nil
}

// EncodeGrpcRespAlertPolicy encodes GRC response
func EncodeGrpcRespAlertPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertPolicy decodes GRPC response
func DecodeGrpcRespAlertPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertPolicyList encodes GRPC request
func EncodeGrpcReqAlertPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyList)
	return req, nil
}

// DecodeGrpcReqAlertPolicyList decodes GRPC request
func DecodeGrpcReqAlertPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyList)
	return req, nil
}

// EncodeGrpcRespAlertPolicyList endodes the GRPC response
func EncodeGrpcRespAlertPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertPolicyList decodes the GRPC response
func DecodeGrpcRespAlertPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertPolicySpec encodes GRPC request
func EncodeGrpcReqAlertPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicySpec)
	return req, nil
}

// DecodeGrpcReqAlertPolicySpec decodes GRPC request
func DecodeGrpcReqAlertPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicySpec)
	return req, nil
}

// EncodeGrpcRespAlertPolicySpec encodes GRC response
func EncodeGrpcRespAlertPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertPolicySpec decodes GRPC response
func DecodeGrpcRespAlertPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertPolicyStatus encodes GRPC request
func EncodeGrpcReqAlertPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyStatus)
	return req, nil
}

// DecodeGrpcReqAlertPolicyStatus decodes GRPC request
func DecodeGrpcReqAlertPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyStatus)
	return req, nil
}

// EncodeGrpcRespAlertPolicyStatus encodes GRC response
func EncodeGrpcRespAlertPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertPolicyStatus decodes GRPC response
func DecodeGrpcRespAlertPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertReason(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertReason(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertReason
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertReason encodes GRPC request
func EncodeGrpcReqAlertReason(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertReason)
	return req, nil
}

// DecodeGrpcReqAlertReason decodes GRPC request
func DecodeGrpcReqAlertReason(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertReason)
	return req, nil
}

// EncodeGrpcRespAlertReason encodes GRC response
func EncodeGrpcRespAlertReason(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertReason decodes GRPC response
func DecodeGrpcRespAlertReason(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertSource(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertSource(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertSource
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertSource encodes GRPC request
func EncodeGrpcReqAlertSource(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertSource)
	return req, nil
}

// DecodeGrpcReqAlertSource decodes GRPC request
func DecodeGrpcReqAlertSource(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertSource)
	return req, nil
}

// EncodeGrpcRespAlertSource encodes GRC response
func EncodeGrpcRespAlertSource(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertSource decodes GRPC response
func DecodeGrpcRespAlertSource(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertSpec encodes GRPC request
func EncodeGrpcReqAlertSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertSpec)
	return req, nil
}

// DecodeGrpcReqAlertSpec decodes GRPC request
func DecodeGrpcReqAlertSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertSpec)
	return req, nil
}

// EncodeGrpcRespAlertSpec encodes GRC response
func EncodeGrpcRespAlertSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertSpec decodes GRPC response
func DecodeGrpcRespAlertSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertStatus encodes GRPC request
func EncodeGrpcReqAlertStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertStatus)
	return req, nil
}

// DecodeGrpcReqAlertStatus decodes GRPC request
func DecodeGrpcReqAlertStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertStatus)
	return req, nil
}

// EncodeGrpcRespAlertStatus encodes GRC response
func EncodeGrpcRespAlertStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertStatus decodes GRPC response
func DecodeGrpcRespAlertStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuditInfo(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuditInfo(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuditInfo
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuditInfo encodes GRPC request
func EncodeGrpcReqAuditInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuditInfo)
	return req, nil
}

// DecodeGrpcReqAuditInfo decodes GRPC request
func DecodeGrpcReqAuditInfo(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuditInfo)
	return req, nil
}

// EncodeGrpcRespAuditInfo encodes GRC response
func EncodeGrpcRespAuditInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuditInfo decodes GRPC response
func DecodeGrpcRespAuditInfo(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAuthConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthConfig encodes GRPC request
func EncodeGrpcReqAuthConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthConfig)
	return req, nil
}

// DecodeGrpcReqAuthConfig decodes GRPC request
func DecodeGrpcReqAuthConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthConfig)
	return req, nil
}

// EncodeGrpcRespAuthConfig encodes GRC response
func EncodeGrpcRespAuthConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthConfig decodes GRPC response
func DecodeGrpcRespAuthConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMatchedRequirement(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMatchedRequirement(_ context.Context, r *http.Request) (interface{}, error) {
	var req MatchedRequirement
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMatchedRequirement encodes GRPC request
func EncodeGrpcReqMatchedRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MatchedRequirement)
	return req, nil
}

// DecodeGrpcReqMatchedRequirement decodes GRPC request
func DecodeGrpcReqMatchedRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MatchedRequirement)
	return req, nil
}

// EncodeGrpcRespMatchedRequirement encodes GRC response
func EncodeGrpcRespMatchedRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMatchedRequirement decodes GRPC response
func DecodeGrpcRespMatchedRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPrivacyConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPrivacyConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req PrivacyConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPrivacyConfig encodes GRPC request
func EncodeGrpcReqPrivacyConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PrivacyConfig)
	return req, nil
}

// DecodeGrpcReqPrivacyConfig decodes GRPC request
func DecodeGrpcReqPrivacyConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PrivacyConfig)
	return req, nil
}

// EncodeGrpcRespPrivacyConfig encodes GRC response
func EncodeGrpcRespPrivacyConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPrivacyConfig decodes GRPC response
func DecodeGrpcRespPrivacyConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRequirement(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRequirement(_ context.Context, r *http.Request) (interface{}, error) {
	var req Requirement
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRequirement encodes GRPC request
func EncodeGrpcReqRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Requirement)
	return req, nil
}

// DecodeGrpcReqRequirement decodes GRPC request
func DecodeGrpcReqRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Requirement)
	return req, nil
}

// EncodeGrpcRespRequirement encodes GRC response
func EncodeGrpcRespRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRequirement decodes GRPC response
func DecodeGrpcRespRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSNMPTrapServer(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSNMPTrapServer(_ context.Context, r *http.Request) (interface{}, error) {
	var req SNMPTrapServer
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSNMPTrapServer encodes GRPC request
func EncodeGrpcReqSNMPTrapServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SNMPTrapServer)
	return req, nil
}

// DecodeGrpcReqSNMPTrapServer decodes GRPC request
func DecodeGrpcReqSNMPTrapServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SNMPTrapServer)
	return req, nil
}

// EncodeGrpcRespSNMPTrapServer encodes GRC response
func EncodeGrpcRespSNMPTrapServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSNMPTrapServer decodes GRPC response
func DecodeGrpcRespSNMPTrapServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
