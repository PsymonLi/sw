// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package alerts is a auto generated package.
Input file: protos/alerts.proto
*/
package alerts

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapAlerts = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Alert) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alerts/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AlertDestination) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alertDestinations/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AlertPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alertPolicies/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AlertDestinationList) MakeKey(prefix string) string {
	obj := AlertDestination{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AlertPolicyList) MakeKey(prefix string) string {
	obj := AlertPolicy{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAlertDestinationWatchHelper) MakeKey(prefix string) string {
	obj := AlertDestination{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgAlertPolicyWatchHelper) MakeKey(prefix string) string {
	obj := AlertPolicy{}
	return obj.MakeKey(prefix)
}

func (m *Alert) Clone(into interface{}) error {
	out, ok := into.(*Alert)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertDestination) Clone(into interface{}) error {
	out, ok := into.(*AlertDestination)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertDestinationList) Clone(into interface{}) error {
	out, ok := into.(*AlertDestinationList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertDestinationSpec) Clone(into interface{}) error {
	out, ok := into.(*AlertDestinationSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertDestinationStatus) Clone(into interface{}) error {
	out, ok := into.(*AlertDestinationStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertPolicy) Clone(into interface{}) error {
	out, ok := into.(*AlertPolicy)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertPolicyList) Clone(into interface{}) error {
	out, ok := into.(*AlertPolicyList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertPolicySpec) Clone(into interface{}) error {
	out, ok := into.(*AlertPolicySpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertPolicyStatus) Clone(into interface{}) error {
	out, ok := into.(*AlertPolicyStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertReason) Clone(into interface{}) error {
	out, ok := into.(*AlertReason)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertSource) Clone(into interface{}) error {
	out, ok := into.(*AlertSource)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertSpec) Clone(into interface{}) error {
	out, ok := into.(*AlertSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AlertStatus) Clone(into interface{}) error {
	out, ok := into.(*AlertStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AuditInfo) Clone(into interface{}) error {
	out, ok := into.(*AuditInfo)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AuthConfig) Clone(into interface{}) error {
	out, ok := into.(*AuthConfig)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgAlertDestinationWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgAlertDestinationWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgAlertPolicyWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgAlertPolicyWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *MatchedRequirement) Clone(into interface{}) error {
	out, ok := into.(*MatchedRequirement)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *PrivacyConfig) Clone(into interface{}) error {
	out, ok := into.(*PrivacyConfig)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Requirement) Clone(into interface{}) error {
	out, ok := into.(*Requirement)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SNMPTrapServer) Clone(into interface{}) error {
	out, ok := into.(*SNMPTrapServer)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *Alert) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertDestination) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AlertDestinationList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertDestinationSpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.SNMPTrapServers {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertDestinationStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AlertPolicyList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Requirements {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := funcMapAlerts["AlertPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["AlertPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AlertPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertReason) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.MatchedRequirements {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertSource) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapAlerts["AlertSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["AlertSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AlertStatus) Validate(ver string, ignoreStatus bool) bool {
	if !m.Reason.Validate(ver, ignoreStatus) {
		return false
	}
	if vs, ok := funcMapAlerts["AlertStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["AlertStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AuditInfo) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AuthConfig) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapAlerts["AuthConfig"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["AuthConfig"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AutoMsgAlertDestinationWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgAlertPolicyWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *MatchedRequirement) Validate(ver string, ignoreStatus bool) bool {
	if !m.Requirement.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *PrivacyConfig) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapAlerts["PrivacyConfig"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["PrivacyConfig"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *Requirement) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapAlerts["Requirement"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["Requirement"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SNMPTrapServer) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapAlerts["SNMPTrapServer"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapAlerts["SNMPTrapServer"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	funcMapAlerts = make(map[string]map[string][]func(interface{}) bool)

	funcMapAlerts["AlertPolicySpec"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["AlertPolicySpec"]["all"] = append(funcMapAlerts["AlertPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*AlertPolicySpec)

		if _, ok := AlertSeverity_value[m.Severity]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["AlertSpec"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["AlertSpec"]["all"] = append(funcMapAlerts["AlertSpec"]["all"], func(i interface{}) bool {
		m := i.(*AlertSpec)

		if _, ok := AlertSpec_AlertState_value[m.State]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["AlertStatus"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["AlertStatus"]["all"] = append(funcMapAlerts["AlertStatus"]["all"], func(i interface{}) bool {
		m := i.(*AlertStatus)

		if _, ok := AlertSeverity_value[m.Severity]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["AuthConfig"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["AuthConfig"]["all"] = append(funcMapAlerts["AuthConfig"]["all"], func(i interface{}) bool {
		m := i.(*AuthConfig)

		if _, ok := AuthConfig_Algos_value[m.Algo]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["PrivacyConfig"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["PrivacyConfig"]["all"] = append(funcMapAlerts["PrivacyConfig"]["all"], func(i interface{}) bool {
		m := i.(*PrivacyConfig)

		if _, ok := PrivacyConfig_Algos_value[m.Algo]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["Requirement"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["Requirement"]["all"] = append(funcMapAlerts["Requirement"]["all"], func(i interface{}) bool {
		m := i.(*Requirement)

		if _, ok := Requirement_AllowedOperators_value[m.Operator]; !ok {
			return false
		}
		return true
	})

	funcMapAlerts["SNMPTrapServer"] = make(map[string][]func(interface{}) bool)
	funcMapAlerts["SNMPTrapServer"]["all"] = append(funcMapAlerts["SNMPTrapServer"]["all"], func(i interface{}) bool {
		m := i.(*SNMPTrapServer)

		if _, ok := SNMPTrapServer_SNMPVersions_value[m.Version]; !ok {
			return false
		}
		return true
	})

}
