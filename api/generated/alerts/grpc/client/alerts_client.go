// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	alerts "github.com/pensando/sw/api/generated/alerts"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewAlertDestinationV1 sets up a new client for AlertDestinationV1
func NewAlertDestinationV1(conn *grpc.ClientConn, logger log.Logger) alerts.ServiceAlertDestinationV1Client {

	var lAutoAddAlertDestinationEndpoint endpoint.Endpoint
	{
		lAutoAddAlertDestinationEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertDestinationV1",
			"AutoAddAlertDestination",
			alerts.EncodeGrpcReqAlertDestination,
			alerts.DecodeGrpcRespAlertDestination,
			&alerts.AlertDestination{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddAlertDestinationEndpoint = trace.ClientEndPoint("AlertDestinationV1:AutoAddAlertDestination")(lAutoAddAlertDestinationEndpoint)
	}
	var lAutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	{
		lAutoDeleteAlertDestinationEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertDestinationV1",
			"AutoDeleteAlertDestination",
			alerts.EncodeGrpcReqAlertDestination,
			alerts.DecodeGrpcRespAlertDestination,
			&alerts.AlertDestination{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteAlertDestinationEndpoint = trace.ClientEndPoint("AlertDestinationV1:AutoDeleteAlertDestination")(lAutoDeleteAlertDestinationEndpoint)
	}
	var lAutoGetAlertDestinationEndpoint endpoint.Endpoint
	{
		lAutoGetAlertDestinationEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertDestinationV1",
			"AutoGetAlertDestination",
			alerts.EncodeGrpcReqAlertDestination,
			alerts.DecodeGrpcRespAlertDestination,
			&alerts.AlertDestination{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetAlertDestinationEndpoint = trace.ClientEndPoint("AlertDestinationV1:AutoGetAlertDestination")(lAutoGetAlertDestinationEndpoint)
	}
	var lAutoListAlertDestinationEndpoint endpoint.Endpoint
	{
		lAutoListAlertDestinationEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertDestinationV1",
			"AutoListAlertDestination",
			alerts.EncodeGrpcReqListWatchOptions,
			alerts.DecodeGrpcRespAlertDestinationList,
			&alerts.AlertDestinationList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListAlertDestinationEndpoint = trace.ClientEndPoint("AlertDestinationV1:AutoListAlertDestination")(lAutoListAlertDestinationEndpoint)
	}
	var lAutoUpdateAlertDestinationEndpoint endpoint.Endpoint
	{
		lAutoUpdateAlertDestinationEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertDestinationV1",
			"AutoUpdateAlertDestination",
			alerts.EncodeGrpcReqAlertDestination,
			alerts.DecodeGrpcRespAlertDestination,
			&alerts.AlertDestination{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateAlertDestinationEndpoint = trace.ClientEndPoint("AlertDestinationV1:AutoUpdateAlertDestination")(lAutoUpdateAlertDestinationEndpoint)
	}
	return alerts.EndpointsAlertDestinationV1Client{
		Client: alerts.NewAlertDestinationV1Client(conn),

		AutoAddAlertDestinationEndpoint:    lAutoAddAlertDestinationEndpoint,
		AutoDeleteAlertDestinationEndpoint: lAutoDeleteAlertDestinationEndpoint,
		AutoGetAlertDestinationEndpoint:    lAutoGetAlertDestinationEndpoint,
		AutoListAlertDestinationEndpoint:   lAutoListAlertDestinationEndpoint,
		AutoUpdateAlertDestinationEndpoint: lAutoUpdateAlertDestinationEndpoint,
	}
}

// NewAlertDestinationV1Backend creates an instrumented client with middleware
func NewAlertDestinationV1Backend(conn *grpc.ClientConn, logger log.Logger) alerts.ServiceAlertDestinationV1Client {
	cl := NewAlertDestinationV1(conn, logger)
	cl = alerts.LoggingAlertDestinationV1MiddlewareClient(logger)(cl)
	return cl
}

// NewAlertPolicyV1 sets up a new client for AlertPolicyV1
func NewAlertPolicyV1(conn *grpc.ClientConn, logger log.Logger) alerts.ServiceAlertPolicyV1Client {

	var lAutoAddAlertPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddAlertPolicyEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertPolicyV1",
			"AutoAddAlertPolicy",
			alerts.EncodeGrpcReqAlertPolicy,
			alerts.DecodeGrpcRespAlertPolicy,
			&alerts.AlertPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddAlertPolicyEndpoint = trace.ClientEndPoint("AlertPolicyV1:AutoAddAlertPolicy")(lAutoAddAlertPolicyEndpoint)
	}
	var lAutoDeleteAlertPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteAlertPolicyEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertPolicyV1",
			"AutoDeleteAlertPolicy",
			alerts.EncodeGrpcReqAlertPolicy,
			alerts.DecodeGrpcRespAlertPolicy,
			&alerts.AlertPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteAlertPolicyEndpoint = trace.ClientEndPoint("AlertPolicyV1:AutoDeleteAlertPolicy")(lAutoDeleteAlertPolicyEndpoint)
	}
	var lAutoGetAlertPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetAlertPolicyEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertPolicyV1",
			"AutoGetAlertPolicy",
			alerts.EncodeGrpcReqAlertPolicy,
			alerts.DecodeGrpcRespAlertPolicy,
			&alerts.AlertPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetAlertPolicyEndpoint = trace.ClientEndPoint("AlertPolicyV1:AutoGetAlertPolicy")(lAutoGetAlertPolicyEndpoint)
	}
	var lAutoListAlertPolicyEndpoint endpoint.Endpoint
	{
		lAutoListAlertPolicyEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertPolicyV1",
			"AutoListAlertPolicy",
			alerts.EncodeGrpcReqListWatchOptions,
			alerts.DecodeGrpcRespAlertPolicyList,
			&alerts.AlertPolicyList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListAlertPolicyEndpoint = trace.ClientEndPoint("AlertPolicyV1:AutoListAlertPolicy")(lAutoListAlertPolicyEndpoint)
	}
	var lAutoUpdateAlertPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateAlertPolicyEndpoint = grpctransport.NewClient(
			conn,
			"alerts.AlertPolicyV1",
			"AutoUpdateAlertPolicy",
			alerts.EncodeGrpcReqAlertPolicy,
			alerts.DecodeGrpcRespAlertPolicy,
			&alerts.AlertPolicy{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateAlertPolicyEndpoint = trace.ClientEndPoint("AlertPolicyV1:AutoUpdateAlertPolicy")(lAutoUpdateAlertPolicyEndpoint)
	}
	return alerts.EndpointsAlertPolicyV1Client{
		Client: alerts.NewAlertPolicyV1Client(conn),

		AutoAddAlertPolicyEndpoint:    lAutoAddAlertPolicyEndpoint,
		AutoDeleteAlertPolicyEndpoint: lAutoDeleteAlertPolicyEndpoint,
		AutoGetAlertPolicyEndpoint:    lAutoGetAlertPolicyEndpoint,
		AutoListAlertPolicyEndpoint:   lAutoListAlertPolicyEndpoint,
		AutoUpdateAlertPolicyEndpoint: lAutoUpdateAlertPolicyEndpoint,
	}
}

// NewAlertPolicyV1Backend creates an instrumented client with middleware
func NewAlertPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) alerts.ServiceAlertPolicyV1Client {
	cl := NewAlertPolicyV1(conn, logger)
	cl = alerts.LoggingAlertPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjAlertDestinationV1AlertDestination struct {
	logger log.Logger
	client alerts.ServiceAlertDestinationV1Client
}

func (a *grpcObjAlertDestinationV1AlertDestination) Create(ctx context.Context, in *alerts.AlertDestination) (*alerts.AlertDestination, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddAlertDestination(nctx, in)
}

func (a *grpcObjAlertDestinationV1AlertDestination) Update(ctx context.Context, in *alerts.AlertDestination) (*alerts.AlertDestination, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateAlertDestination(nctx, in)
}

func (a *grpcObjAlertDestinationV1AlertDestination) Get(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertDestination, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertDestination{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetAlertDestination(nctx, &in)
}

func (a *grpcObjAlertDestinationV1AlertDestination) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertDestination, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertDestination{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteAlertDestination(nctx, &in)
}

func (a *grpcObjAlertDestinationV1AlertDestination) List(ctx context.Context, options *api.ListWatchOptions) ([]*alerts.AlertDestination, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListAlertDestination(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAlertDestinationV1AlertDestination) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertDestination", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchAlertDestination(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(alerts.AlertDestinationV1_AutoWatchAlertDestinationClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAlertDestinationV1AlertDestination) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjAlertDestinationV1AlertDestination struct {
	endpoints alerts.EndpointsAlertDestinationV1RestClient
	instance  string
}

func (a *restObjAlertDestinationV1AlertDestination) Create(ctx context.Context, in *alerts.AlertDestination) (*alerts.AlertDestination, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddAlertDestination(ctx, in)
}

func (a *restObjAlertDestinationV1AlertDestination) Update(ctx context.Context, in *alerts.AlertDestination) (*alerts.AlertDestination, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateAlertDestination(ctx, in)
}

func (a *restObjAlertDestinationV1AlertDestination) Get(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertDestination, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertDestination{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetAlertDestination(ctx, &in)
}

func (a *restObjAlertDestinationV1AlertDestination) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertDestination, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertDestination{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteAlertDestination(ctx, &in)
}

func (a *restObjAlertDestinationV1AlertDestination) List(ctx context.Context, options *api.ListWatchOptions) ([]*alerts.AlertDestination, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListAlertDestination(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAlertDestinationV1AlertDestination) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjAlertDestinationV1AlertDestination) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return true
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type grpcObjAlertPolicyV1AlertPolicy struct {
	logger log.Logger
	client alerts.ServiceAlertPolicyV1Client
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Create(ctx context.Context, in *alerts.AlertPolicy) (*alerts.AlertPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddAlertPolicy(nctx, in)
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Update(ctx context.Context, in *alerts.AlertPolicy) (*alerts.AlertPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateAlertPolicy(nctx, in)
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetAlertPolicy(nctx, &in)
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteAlertPolicy(nctx, &in)
}

func (a *grpcObjAlertPolicyV1AlertPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*alerts.AlertPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListAlertPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "AlertPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchAlertPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(alerts.AlertPolicyV1_AutoWatchAlertPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on receive", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			select {
			case lw.OutCh <- &ev:
			case <-wstream.Context().Done():
				close(lw.OutCh)
				return
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjAlertPolicyV1AlertPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjAlertPolicyV1AlertPolicy struct {
	endpoints alerts.EndpointsAlertPolicyV1RestClient
	instance  string
}

func (a *restObjAlertPolicyV1AlertPolicy) Create(ctx context.Context, in *alerts.AlertPolicy) (*alerts.AlertPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddAlertPolicy(ctx, in)
}

func (a *restObjAlertPolicyV1AlertPolicy) Update(ctx context.Context, in *alerts.AlertPolicy) (*alerts.AlertPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateAlertPolicy(ctx, in)
}

func (a *restObjAlertPolicyV1AlertPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetAlertPolicy(ctx, &in)
}

func (a *restObjAlertPolicyV1AlertPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*alerts.AlertPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := alerts.AlertPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteAlertPolicy(ctx, &in)
}

func (a *restObjAlertPolicyV1AlertPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*alerts.AlertPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListAlertPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjAlertPolicyV1AlertPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjAlertPolicyV1AlertPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return true
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientAlertDestinationV1 struct {
	grpcAlertDestination alerts.AlertDestinationInterface
}

// NewGrpcCrudClientAlertDestinationV1 creates a GRPC client for the service
func NewGrpcCrudClientAlertDestinationV1(conn *grpc.ClientConn, logger log.Logger) alerts.AlertDestinationV1Interface {
	client := NewAlertDestinationV1Backend(conn, logger)
	return &crudClientAlertDestinationV1{

		grpcAlertDestination: &grpcObjAlertDestinationV1AlertDestination{client: client, logger: logger},
	}
}

func (a *crudClientAlertDestinationV1) AlertDestination() alerts.AlertDestinationInterface {
	return a.grpcAlertDestination
}

type crudRestClientAlertDestinationV1 struct {
	restAlertDestination alerts.AlertDestinationInterface
}

// NewRestCrudClientAlertDestinationV1 creates a REST client for the service.
func NewRestCrudClientAlertDestinationV1(url string) alerts.AlertDestinationV1Interface {
	endpoints, err := alerts.MakeAlertDestinationV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientAlertDestinationV1{

		restAlertDestination: &restObjAlertDestinationV1AlertDestination{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientAlertDestinationV1) AlertDestination() alerts.AlertDestinationInterface {
	return a.restAlertDestination
}

type crudClientAlertPolicyV1 struct {
	grpcAlertPolicy alerts.AlertPolicyInterface
}

// NewGrpcCrudClientAlertPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientAlertPolicyV1(conn *grpc.ClientConn, logger log.Logger) alerts.AlertPolicyV1Interface {
	client := NewAlertPolicyV1Backend(conn, logger)
	return &crudClientAlertPolicyV1{

		grpcAlertPolicy: &grpcObjAlertPolicyV1AlertPolicy{client: client, logger: logger},
	}
}

func (a *crudClientAlertPolicyV1) AlertPolicy() alerts.AlertPolicyInterface {
	return a.grpcAlertPolicy
}

type crudRestClientAlertPolicyV1 struct {
	restAlertPolicy alerts.AlertPolicyInterface
}

// NewRestCrudClientAlertPolicyV1 creates a REST client for the service.
func NewRestCrudClientAlertPolicyV1(url string) alerts.AlertPolicyV1Interface {
	endpoints, err := alerts.MakeAlertPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientAlertPolicyV1{

		restAlertPolicy: &restObjAlertPolicyV1AlertPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientAlertPolicyV1) AlertPolicy() alerts.AlertPolicyInterface {
	return a.restAlertPolicy
}
