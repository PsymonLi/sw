// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package alertsApiServer is a auto generated package.
Input file: protos/alerts.proto
*/
package alertsApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"
	"github.com/satori/go.uuid"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	alerts "github.com/pensando/sw/api/generated/alerts"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type salertsAlertsBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message

	endpointsAlertDestinationV1 *eAlertDestinationV1Endpoints
	endpointsAlertPolicyV1      *eAlertPolicyV1Endpoints
}

type eAlertDestinationV1Endpoints struct {
	Svc salertsAlertsBackend

	fnAutoAddAlertDestination    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteAlertDestination func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetAlertDestination    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListAlertDestination   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateAlertDestination func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchAlertDestination func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}
type eAlertPolicyV1Endpoints struct {
	Svc salertsAlertsBackend

	fnAutoAddAlertPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteAlertPolicy func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetAlertPolicy    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListAlertPolicy   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateAlertPolicy func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchAlertPolicy func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *salertsAlertsBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	s.Messages = map[string]apiserver.Message{

		"alerts.Alert": apisrvpkg.NewMessage("alerts.Alert").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := alerts.Alert{}
				return r.MakeKey(prefix)
			}
			r := i.(alerts.Alert)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(alerts.Alert)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(alerts.Alert)
			key := r.MakeKey(prefix)
			r.Kind = "Alert"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*alerts.Alert)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &alerts.Alert{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(alerts.Alert)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.Alert)
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.Alert)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.Alert)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithSelfLinkWriter(func(path string, i interface{}) (interface{}, error) {
			r := i.(alerts.Alert)
			r.SelfLink = path
			return r, nil
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.Alert{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.Alert{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(alerts.Alert)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"alerts.AlertDestination": apisrvpkg.NewMessage("alerts.AlertDestination").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := alerts.AlertDestination{}
				return r.MakeKey(prefix)
			}
			r := i.(alerts.AlertDestination)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(alerts.AlertDestination)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(alerts.AlertDestination)
			key := r.MakeKey(prefix)
			r.Kind = "AlertDestination"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*alerts.AlertDestination)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &alerts.AlertDestination{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(alerts.AlertDestination)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertDestination)
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertDestination)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertDestination)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithSelfLinkWriter(func(path string, i interface{}) (interface{}, error) {
			r := i.(alerts.AlertDestination)
			r.SelfLink = path
			return r, nil
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.AlertDestination{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.AlertDestination{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(alerts.AlertDestination)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"alerts.AlertDestinationList": apisrvpkg.NewMessage("alerts.AlertDestinationList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := alerts.AlertDestinationList{}
			r := alerts.AlertDestination{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"alerts.AlertDestinationSpec":   apisrvpkg.NewMessage("alerts.AlertDestinationSpec"),
		"alerts.AlertDestinationStatus": apisrvpkg.NewMessage("alerts.AlertDestinationStatus"),
		"alerts.AlertPolicy": apisrvpkg.NewMessage("alerts.AlertPolicy").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := alerts.AlertPolicy{}
				return r.MakeKey(prefix)
			}
			r := i.(alerts.AlertPolicy)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(alerts.AlertPolicy)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(alerts.AlertPolicy)
			key := r.MakeKey(prefix)
			r.Kind = "AlertPolicy"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*alerts.AlertPolicy)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &alerts.AlertPolicy{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						logger.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(alerts.AlertPolicy)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertPolicy)
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertPolicy)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(alerts.AlertPolicy)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithSelfLinkWriter(func(path string, i interface{}) (interface{}, error) {
			r := i.(alerts.AlertPolicy)
			r.SelfLink = path
			return r, nil
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.AlertPolicy{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := alerts.AlertPolicy{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(alerts.AlertPolicy)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),
		"alerts.AlertPolicyList": apisrvpkg.NewMessage("alerts.AlertPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := alerts.AlertPolicyList{}
			r := alerts.AlertPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"alerts.AlertPolicySpec":                    apisrvpkg.NewMessage("alerts.AlertPolicySpec"),
		"alerts.AlertPolicyStatus":                  apisrvpkg.NewMessage("alerts.AlertPolicyStatus"),
		"alerts.AlertReason":                        apisrvpkg.NewMessage("alerts.AlertReason"),
		"alerts.AlertSource":                        apisrvpkg.NewMessage("alerts.AlertSource"),
		"alerts.AlertSpec":                          apisrvpkg.NewMessage("alerts.AlertSpec"),
		"alerts.AlertStatus":                        apisrvpkg.NewMessage("alerts.AlertStatus"),
		"alerts.AuditInfo":                          apisrvpkg.NewMessage("alerts.AuditInfo"),
		"alerts.AuthConfig":                         apisrvpkg.NewMessage("alerts.AuthConfig"),
		"alerts.AutoMsgAlertDestinationWatchHelper": apisrvpkg.NewMessage("alerts.AutoMsgAlertDestinationWatchHelper"),
		"alerts.AutoMsgAlertPolicyWatchHelper":      apisrvpkg.NewMessage("alerts.AutoMsgAlertPolicyWatchHelper"),
		"alerts.MatchedRequirement":                 apisrvpkg.NewMessage("alerts.MatchedRequirement"),
		"alerts.PrivacyConfig":                      apisrvpkg.NewMessage("alerts.PrivacyConfig"),
		"alerts.Requirement":                        apisrvpkg.NewMessage("alerts.Requirement"),
		"alerts.SNMPTrapServer":                     apisrvpkg.NewMessage("alerts.SNMPTrapServer"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	scheme.AddKnownTypes(
		&alerts.Alert{},
		&alerts.AlertDestination{},
		&alerts.AlertPolicy{},
	)

	apisrv.RegisterMessages("alerts", s.Messages)

	{
		srv := apisrvpkg.NewService("AlertDestinationV1")

		s.endpointsAlertDestinationV1.fnAutoAddAlertDestination = srv.AddMethod("AutoAddAlertDestination",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertDestination"], s.Messages["alerts.AlertDestination"], "alertDestinations", "AutoAddAlertDestination")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertDestinations/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertDestinationV1.fnAutoDeleteAlertDestination = srv.AddMethod("AutoDeleteAlertDestination",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertDestination"], s.Messages["alerts.AlertDestination"], "alertDestinations", "AutoDeleteAlertDestination")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertDestinations/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertDestinationV1.fnAutoGetAlertDestination = srv.AddMethod("AutoGetAlertDestination",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertDestination"], s.Messages["alerts.AlertDestination"], "alertDestinations", "AutoGetAlertDestination")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertDestinations/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertDestinationV1.fnAutoListAlertDestination = srv.AddMethod("AutoListAlertDestination",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["alerts.AlertDestinationList"], "alertDestinations", "AutoListAlertDestination")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertDestinations/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertDestinationV1.fnAutoUpdateAlertDestination = srv.AddMethod("AutoUpdateAlertDestination",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertDestination"], s.Messages["alerts.AlertDestination"], "alertDestinations", "AutoUpdateAlertDestination")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertDestinations/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertDestinationV1.fnAutoWatchAlertDestination = s.Messages["alerts.AlertDestination"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"alerts.AlertDestinationV1": srv,
		}
		apisrv.RegisterService("alerts.AlertDestinationV1", srv)
		endpoints := alerts.MakeAlertDestinationV1ServerEndpoints(s.endpointsAlertDestinationV1, logger)
		server := alerts.MakeGRPCServerAlertDestinationV1(ctx, endpoints, logger)
		alerts.RegisterAlertDestinationV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["alerts.AlertDestination"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := alerts.AlertDestination{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(alerts.AlertDestinationV1_AutoWatchAlertDestinationServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "AlertDestination")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for AlertDestination Watcher")
						return nil
					}
					in, ok := ev.Object.(*alerts.AlertDestination)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := alerts.AutoMsgAlertDestinationWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received AlertDestination watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "AlertDestination", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*alerts.AlertDestination)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for AlertDestination", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for AlertDestination Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	{
		srv := apisrvpkg.NewService("AlertPolicyV1")

		s.endpointsAlertPolicyV1.fnAutoAddAlertPolicy = srv.AddMethod("AutoAddAlertPolicy",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertPolicy"], s.Messages["alerts.AlertPolicy"], "alertPolicies", "AutoAddAlertPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertPolicies/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertPolicyV1.fnAutoDeleteAlertPolicy = srv.AddMethod("AutoDeleteAlertPolicy",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertPolicy"], s.Messages["alerts.AlertPolicy"], "alertPolicies", "AutoDeleteAlertPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertPolicies/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertPolicyV1.fnAutoGetAlertPolicy = srv.AddMethod("AutoGetAlertPolicy",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertPolicy"], s.Messages["alerts.AlertPolicy"], "alertPolicies", "AutoGetAlertPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertPolicies/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertPolicyV1.fnAutoListAlertPolicy = srv.AddMethod("AutoListAlertPolicy",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["alerts.AlertPolicyList"], "alertPolicies", "AutoListAlertPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertPolicies/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertPolicyV1.fnAutoUpdateAlertPolicy = srv.AddMethod("AutoUpdateAlertPolicy",
			apisrvpkg.NewMethod(s.Messages["alerts.AlertPolicy"], s.Messages["alerts.AlertPolicy"], "alertPolicies", "AutoUpdateAlertPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(alerts.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "alertPolicies/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsAlertPolicyV1.fnAutoWatchAlertPolicy = s.Messages["alerts.AlertPolicy"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"alerts.AlertPolicyV1": srv,
		}
		apisrv.RegisterService("alerts.AlertPolicyV1", srv)
		endpoints := alerts.MakeAlertPolicyV1ServerEndpoints(s.endpointsAlertPolicyV1, logger)
		server := alerts.MakeGRPCServerAlertPolicyV1(ctx, endpoints, logger)
		alerts.RegisterAlertPolicyV1Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{

		s.Messages["alerts.AlertPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := alerts.AlertPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(alerts.AlertPolicyV1_AutoWatchAlertPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "AlertPolicy")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for AlertPolicy Watcher")
						return nil
					}
					in, ok := ev.Object.(*alerts.AlertPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := alerts.AutoMsgAlertPolicyWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received AlertPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "AlertPolicy", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*alerts.AlertPolicy)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for AlertPolicy", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for AlertPolicy Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	return nil
}

func (e *eAlertDestinationV1Endpoints) AutoAddAlertDestination(ctx context.Context, t alerts.AlertDestination) (alerts.AlertDestination, error) {
	r, err := e.fnAutoAddAlertDestination(ctx, t)
	if err == nil {
		return r.(alerts.AlertDestination), err
	}
	return alerts.AlertDestination{}, err

}
func (e *eAlertDestinationV1Endpoints) AutoDeleteAlertDestination(ctx context.Context, t alerts.AlertDestination) (alerts.AlertDestination, error) {
	r, err := e.fnAutoDeleteAlertDestination(ctx, t)
	if err == nil {
		return r.(alerts.AlertDestination), err
	}
	return alerts.AlertDestination{}, err

}
func (e *eAlertDestinationV1Endpoints) AutoGetAlertDestination(ctx context.Context, t alerts.AlertDestination) (alerts.AlertDestination, error) {
	r, err := e.fnAutoGetAlertDestination(ctx, t)
	if err == nil {
		return r.(alerts.AlertDestination), err
	}
	return alerts.AlertDestination{}, err

}
func (e *eAlertDestinationV1Endpoints) AutoListAlertDestination(ctx context.Context, t api.ListWatchOptions) (alerts.AlertDestinationList, error) {
	r, err := e.fnAutoListAlertDestination(ctx, t)
	if err == nil {
		return r.(alerts.AlertDestinationList), err
	}
	return alerts.AlertDestinationList{}, err

}
func (e *eAlertDestinationV1Endpoints) AutoUpdateAlertDestination(ctx context.Context, t alerts.AlertDestination) (alerts.AlertDestination, error) {
	r, err := e.fnAutoUpdateAlertDestination(ctx, t)
	if err == nil {
		return r.(alerts.AlertDestination), err
	}
	return alerts.AlertDestination{}, err

}

func (e *eAlertDestinationV1Endpoints) AutoWatchAlertDestination(in *api.ListWatchOptions, stream alerts.AlertDestinationV1_AutoWatchAlertDestinationServer) error {
	return e.fnAutoWatchAlertDestination(in, stream, "alertDestinations")
}
func (e *eAlertPolicyV1Endpoints) AutoAddAlertPolicy(ctx context.Context, t alerts.AlertPolicy) (alerts.AlertPolicy, error) {
	r, err := e.fnAutoAddAlertPolicy(ctx, t)
	if err == nil {
		return r.(alerts.AlertPolicy), err
	}
	return alerts.AlertPolicy{}, err

}
func (e *eAlertPolicyV1Endpoints) AutoDeleteAlertPolicy(ctx context.Context, t alerts.AlertPolicy) (alerts.AlertPolicy, error) {
	r, err := e.fnAutoDeleteAlertPolicy(ctx, t)
	if err == nil {
		return r.(alerts.AlertPolicy), err
	}
	return alerts.AlertPolicy{}, err

}
func (e *eAlertPolicyV1Endpoints) AutoGetAlertPolicy(ctx context.Context, t alerts.AlertPolicy) (alerts.AlertPolicy, error) {
	r, err := e.fnAutoGetAlertPolicy(ctx, t)
	if err == nil {
		return r.(alerts.AlertPolicy), err
	}
	return alerts.AlertPolicy{}, err

}
func (e *eAlertPolicyV1Endpoints) AutoListAlertPolicy(ctx context.Context, t api.ListWatchOptions) (alerts.AlertPolicyList, error) {
	r, err := e.fnAutoListAlertPolicy(ctx, t)
	if err == nil {
		return r.(alerts.AlertPolicyList), err
	}
	return alerts.AlertPolicyList{}, err

}
func (e *eAlertPolicyV1Endpoints) AutoUpdateAlertPolicy(ctx context.Context, t alerts.AlertPolicy) (alerts.AlertPolicy, error) {
	r, err := e.fnAutoUpdateAlertPolicy(ctx, t)
	if err == nil {
		return r.(alerts.AlertPolicy), err
	}
	return alerts.AlertPolicy{}, err

}

func (e *eAlertPolicyV1Endpoints) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream alerts.AlertPolicyV1_AutoWatchAlertPolicyServer) error {
	return e.fnAutoWatchAlertPolicy(in, stream, "alertPolicies")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := salertsAlertsBackend{}

	{
		e := eAlertDestinationV1Endpoints{Svc: svc}
		svc.endpointsAlertDestinationV1 = &e
	}
	{
		e := eAlertPolicyV1Endpoints{Svc: svc}
		svc.endpointsAlertPolicyV1 = &e
	}
	apisrv.Register("alerts.protos/alerts.proto", &svc)
}
