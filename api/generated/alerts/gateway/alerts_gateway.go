// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package alertsGwService is a auto generated package.
Input file: protos/alerts.proto
*/
package alertsGwService

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"

	"github.com/pensando/sw/api"
	alerts "github.com/pensando/sw/api/generated/alerts"
	"github.com/pensando/sw/api/generated/alerts/grpc/client"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta

type sAlertDestinationV1GwService struct {
	logger log.Logger
}

type adapterAlertDestinationV1 struct {
	conn    *rpckit.RPCClient
	service alerts.ServiceAlertDestinationV1Client
}

func (a adapterAlertDestinationV1) AutoAddAlertDestination(oldctx oldcontext.Context, t *alerts.AlertDestination, options ...grpc.CallOption) (*alerts.AlertDestination, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddAlertDestination(ctx, t)
}

func (a adapterAlertDestinationV1) AutoDeleteAlertDestination(oldctx oldcontext.Context, t *alerts.AlertDestination, options ...grpc.CallOption) (*alerts.AlertDestination, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteAlertDestination(ctx, t)
}

func (a adapterAlertDestinationV1) AutoGetAlertDestination(oldctx oldcontext.Context, t *alerts.AlertDestination, options ...grpc.CallOption) (*alerts.AlertDestination, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetAlertDestination(ctx, t)
}

func (a adapterAlertDestinationV1) AutoListAlertDestination(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*alerts.AlertDestinationList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListAlertDestination(ctx, t)
}

func (a adapterAlertDestinationV1) AutoUpdateAlertDestination(oldctx oldcontext.Context, t *alerts.AlertDestination, options ...grpc.CallOption) (*alerts.AlertDestination, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateAlertDestination(ctx, t)
}

func (a adapterAlertDestinationV1) AutoWatchAlertDestination(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (alerts.AlertDestinationV1_AutoWatchAlertDestinationClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchAlertDestination(ctx, in)
}

func (e *sAlertDestinationV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()

	fileCount++

	if fileCount == 1 {
		err := registerSwaggerDef(m, logger)
		if err != nil {
			logger.ErrorLog("msg", "failed to register swagger spec", "service", "alerts.AlertDestinationV1", "error", err)
		}
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = alerts.RegisterAlertDestinationV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service alerts.AlertDestinationV1")
					m.Handle("/v1/alertDestinations/", http.StripPrefix("/v1/alertDestinations", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "alerts.AlertDestinationV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sAlertDestinationV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterAlertDestinationV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterAlertDestinationV1{conn: client, service: grpcclient.NewAlertDestinationV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

type sAlertPolicyV1GwService struct {
	logger log.Logger
}

type adapterAlertPolicyV1 struct {
	conn    *rpckit.RPCClient
	service alerts.ServiceAlertPolicyV1Client
}

func (a adapterAlertPolicyV1) AutoAddAlertPolicy(oldctx oldcontext.Context, t *alerts.AlertPolicy, options ...grpc.CallOption) (*alerts.AlertPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoAddAlertPolicy(ctx, t)
}

func (a adapterAlertPolicyV1) AutoDeleteAlertPolicy(oldctx oldcontext.Context, t *alerts.AlertPolicy, options ...grpc.CallOption) (*alerts.AlertPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoDeleteAlertPolicy(ctx, t)
}

func (a adapterAlertPolicyV1) AutoGetAlertPolicy(oldctx oldcontext.Context, t *alerts.AlertPolicy, options ...grpc.CallOption) (*alerts.AlertPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoGetAlertPolicy(ctx, t)
}

func (a adapterAlertPolicyV1) AutoListAlertPolicy(oldctx oldcontext.Context, t *api.ListWatchOptions, options ...grpc.CallOption) (*alerts.AlertPolicyList, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoListAlertPolicy(ctx, t)
}

func (a adapterAlertPolicyV1) AutoUpdateAlertPolicy(oldctx oldcontext.Context, t *alerts.AlertPolicy, options ...grpc.CallOption) (*alerts.AlertPolicy, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.AutoUpdateAlertPolicy(ctx, t)
}

func (a adapterAlertPolicyV1) AutoWatchAlertPolicy(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) (alerts.AlertPolicyV1_AutoWatchAlertPolicyClient, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatchAlertPolicy(ctx, in)
}

func (e *sAlertPolicyV1GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	grpcaddr := "pen-apiserver"
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()

	fileCount++

	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = alerts.RegisterAlertPolicyV1HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service alerts.AlertPolicyV1")
					m.Handle("/v1/alertPolicies/", http.StripPrefix("/v1/alertPolicies", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "alerts.AlertPolicyV1", "error", err)
			select {
			case <-ctx.Done():
				return
			case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *sAlertPolicyV1GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapterAlertPolicyV1, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := &adapterAlertPolicyV1{conn: client, service: grpcclient.NewAlertPolicyV1Backend(client.ClientConn, e.logger)}
	return cl, nil
}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()

	svcAlertDestinationV1 := sAlertDestinationV1GwService{}
	apigw.Register("alerts.AlertDestinationV1", "alertDestinations/", &svcAlertDestinationV1)
	svcAlertPolicyV1 := sAlertPolicyV1GwService{}
	apigw.Register("alerts.AlertPolicyV1", "alertPolicies/", &svcAlertPolicyV1)
}
