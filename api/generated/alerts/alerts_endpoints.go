// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package alerts is a auto generated package.
Input file: protos/alerts.proto
*/
package alerts

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareAlertDestinationV1Client add middleware to the client
type MiddlewareAlertDestinationV1Client func(ServiceAlertDestinationV1Client) ServiceAlertDestinationV1Client

// EndpointsAlertDestinationV1Client is the endpoints for the client
type EndpointsAlertDestinationV1Client struct {
	Client AlertDestinationV1Client

	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint
}

// EndpointsAlertDestinationV1RestClient is the REST client
type EndpointsAlertDestinationV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint
	AutoWatchAlertDestinationEndpoint  endpoint.Endpoint
}

// MiddlewareAlertDestinationV1Server adds middle ware to the server
type MiddlewareAlertDestinationV1Server func(ServiceAlertDestinationV1Server) ServiceAlertDestinationV1Server

// EndpointsAlertDestinationV1Server is the server endpoints
type EndpointsAlertDestinationV1Server struct {
	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint

	watchHandlerAlertDestination func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAlertDestination is endpoint for AutoAddAlertDestination
func (e EndpointsAlertDestinationV1Client) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respAlertDestinationV1AutoAddAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoDeleteAlertDestination is endpoint for AutoDeleteAlertDestination
func (e EndpointsAlertDestinationV1Client) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respAlertDestinationV1AutoDeleteAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoGetAlertDestination is endpoint for AutoGetAlertDestination
func (e EndpointsAlertDestinationV1Client) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respAlertDestinationV1AutoGetAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoListAlertDestination is endpoint for AutoListAlertDestination
func (e EndpointsAlertDestinationV1Client) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (*AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestinationList{}, err
	}
	return resp.(*AlertDestinationList), nil
}

type respAlertDestinationV1AutoListAlertDestination struct {
	V   AlertDestinationList
	Err error
}

// AutoUpdateAlertDestination is endpoint for AutoUpdateAlertDestination
func (e EndpointsAlertDestinationV1Client) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respAlertDestinationV1AutoUpdateAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoWatchAlertDestination performs Watch for AlertDestination
func (e EndpointsAlertDestinationV1Client) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (AlertDestinationV1_AutoWatchAlertDestinationClient, error) {
	return e.Client.AutoWatchAlertDestination(ctx, in)
}

// AutoAddAlertDestination implementation on server Endpoint
func (e EndpointsAlertDestinationV1Server) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeAlertDestinationV1AutoAddAlertDestinationEndpoint creates  AutoAddAlertDestination endpoints for the service
func MakeAlertDestinationV1AutoAddAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoAddAlertDestination(ctx, *req)
		return respAlertDestinationV1AutoAddAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertDestinationV1:AutoAddAlertDestination")(f)
}

// AutoDeleteAlertDestination implementation on server Endpoint
func (e EndpointsAlertDestinationV1Server) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeAlertDestinationV1AutoDeleteAlertDestinationEndpoint creates  AutoDeleteAlertDestination endpoints for the service
func MakeAlertDestinationV1AutoDeleteAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoDeleteAlertDestination(ctx, *req)
		return respAlertDestinationV1AutoDeleteAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertDestinationV1:AutoDeleteAlertDestination")(f)
}

// AutoGetAlertDestination implementation on server Endpoint
func (e EndpointsAlertDestinationV1Server) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeAlertDestinationV1AutoGetAlertDestinationEndpoint creates  AutoGetAlertDestination endpoints for the service
func MakeAlertDestinationV1AutoGetAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoGetAlertDestination(ctx, *req)
		return respAlertDestinationV1AutoGetAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertDestinationV1:AutoGetAlertDestination")(f)
}

// AutoListAlertDestination implementation on server Endpoint
func (e EndpointsAlertDestinationV1Server) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestinationList{}, err
	}
	return *resp.(*AlertDestinationList), nil
}

// MakeAlertDestinationV1AutoListAlertDestinationEndpoint creates  AutoListAlertDestination endpoints for the service
func MakeAlertDestinationV1AutoListAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertDestination(ctx, *req)
		return respAlertDestinationV1AutoListAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertDestinationV1:AutoListAlertDestination")(f)
}

// AutoUpdateAlertDestination implementation on server Endpoint
func (e EndpointsAlertDestinationV1Server) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeAlertDestinationV1AutoUpdateAlertDestinationEndpoint creates  AutoUpdateAlertDestination endpoints for the service
func MakeAlertDestinationV1AutoUpdateAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoUpdateAlertDestination(ctx, *req)
		return respAlertDestinationV1AutoUpdateAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertDestinationV1:AutoUpdateAlertDestination")(f)
}

// AutoWatchAlertDestination is the watch handler for AlertDestination on the server side.
func (e EndpointsAlertDestinationV1Server) AutoWatchAlertDestination(in *api.ListWatchOptions, stream AlertDestinationV1_AutoWatchAlertDestinationServer) error {
	return e.watchHandlerAlertDestination(in, stream)
}

// MakeAutoWatchAlertDestinationEndpoint creates the Watch endpoint
func MakeAutoWatchAlertDestinationEndpoint(s ServiceAlertDestinationV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AlertDestinationV1_AutoWatchAlertDestinationServer)
		return s.AutoWatchAlertDestination(options, wstream)
	}
}

// MakeAlertDestinationV1ServerEndpoints creates server endpoints
func MakeAlertDestinationV1ServerEndpoints(s ServiceAlertDestinationV1Server, logger log.Logger) EndpointsAlertDestinationV1Server {
	return EndpointsAlertDestinationV1Server{

		AutoAddAlertDestinationEndpoint:    MakeAlertDestinationV1AutoAddAlertDestinationEndpoint(s, logger),
		AutoDeleteAlertDestinationEndpoint: MakeAlertDestinationV1AutoDeleteAlertDestinationEndpoint(s, logger),
		AutoGetAlertDestinationEndpoint:    MakeAlertDestinationV1AutoGetAlertDestinationEndpoint(s, logger),
		AutoListAlertDestinationEndpoint:   MakeAlertDestinationV1AutoListAlertDestinationEndpoint(s, logger),
		AutoUpdateAlertDestinationEndpoint: MakeAlertDestinationV1AutoUpdateAlertDestinationEndpoint(s, logger),

		watchHandlerAlertDestination: MakeAutoWatchAlertDestinationEndpoint(s, logger),
	}
}

// LoggingAlertDestinationV1MiddlewareClient adds middleware for the client
func LoggingAlertDestinationV1MiddlewareClient(logger log.Logger) MiddlewareAlertDestinationV1Client {
	return func(next ServiceAlertDestinationV1Client) ServiceAlertDestinationV1Client {
		return loggingAlertDestinationV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAlertDestinationV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceAlertDestinationV1Client
}

// LoggingAlertDestinationV1MiddlewareServer adds middleware for the client
func LoggingAlertDestinationV1MiddlewareServer(logger log.Logger) MiddlewareAlertDestinationV1Server {
	return func(next ServiceAlertDestinationV1Server) ServiceAlertDestinationV1Server {
		return loggingAlertDestinationV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAlertDestinationV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceAlertDestinationV1Server
}

func (m loggingAlertDestinationV1MiddlewareClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareClient) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp *AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}

func (m loggingAlertDestinationV1MiddlewareClient) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp AlertDestinationV1_AutoWatchAlertDestinationClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAlertDestination(ctx, in)
	return
}

func (m loggingAlertDestinationV1MiddlewareServer) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareServer) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareServer) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareServer) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (resp AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingAlertDestinationV1MiddlewareServer) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertDestinationV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}

func (m loggingAlertDestinationV1MiddlewareServer) AutoWatchAlertDestination(in *api.ListWatchOptions, stream AlertDestinationV1_AutoWatchAlertDestinationServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AlertDestinationV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertDestination(in, stream)
	return
}
func (r *EndpointsAlertDestinationV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIAlertDestinationV1AutoAddAlertDestinationCreateOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/alertDestinations", "/", in.Tenant, "/alertDestinations")
}

//
func makeURIAlertDestinationV1AutoDeleteAlertDestinationDeleteOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/alertDestinations", "/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIAlertDestinationV1AutoGetAlertDestinationGetOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/alertDestinations", "/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIAlertDestinationV1AutoListAlertDestinationListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/alertDestinations", "/", in.Tenant, "/alertDestinations")
}

//
func makeURIAlertDestinationV1AutoUpdateAlertDestinationUpdateOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/alertDestinations", "/", in.Tenant, "/alertDestinations/", in.Name)
}

// AutoAddAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIAlertDestinationV1AutoAddAlertDestinationCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertDestinationV1AutoAddAlertDestination(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), nil
}

// AutoUpdateAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIAlertDestinationV1AutoUpdateAlertDestinationUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertDestinationV1AutoUpdateAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoGetAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIAlertDestinationV1AutoGetAlertDestinationGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertDestinationV1AutoGetAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoDeleteAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIAlertDestinationV1AutoDeleteAlertDestinationDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertDestinationV1AutoDeleteAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoListAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoListAlertDestination(ctx context.Context, options *api.ListWatchOptions) (*AlertDestinationList, error) {
	path := makeURIAlertDestinationV1AutoListAlertDestinationListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertDestinationV1AutoListAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestinationList), err
}

// AutoWatchAlertDestination CRUD method for AlertDestination
func (r *EndpointsAlertDestinationV1RestClient) AutoWatchAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	return nil, errors.New("not allowed")
}

// MakeAlertDestinationV1RestClientEndpoints make REST client endpoints
func MakeAlertDestinationV1RestClientEndpoints(instance string) (EndpointsAlertDestinationV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAlertDestinationV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}

// MiddlewareAlertPolicyV1Client add middleware to the client
type MiddlewareAlertPolicyV1Client func(ServiceAlertPolicyV1Client) ServiceAlertPolicyV1Client

// EndpointsAlertPolicyV1Client is the endpoints for the client
type EndpointsAlertPolicyV1Client struct {
	Client AlertPolicyV1Client

	AutoAddAlertPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint endpoint.Endpoint
	AutoGetAlertPolicyEndpoint    endpoint.Endpoint
	AutoListAlertPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint endpoint.Endpoint
}

// EndpointsAlertPolicyV1RestClient is the REST client
type EndpointsAlertPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAlertPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint endpoint.Endpoint
	AutoGetAlertPolicyEndpoint    endpoint.Endpoint
	AutoListAlertPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint endpoint.Endpoint
	AutoWatchAlertPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareAlertPolicyV1Server adds middle ware to the server
type MiddlewareAlertPolicyV1Server func(ServiceAlertPolicyV1Server) ServiceAlertPolicyV1Server

// EndpointsAlertPolicyV1Server is the server endpoints
type EndpointsAlertPolicyV1Server struct {
	AutoAddAlertPolicyEndpoint    endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint endpoint.Endpoint
	AutoGetAlertPolicyEndpoint    endpoint.Endpoint
	AutoListAlertPolicyEndpoint   endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint endpoint.Endpoint

	watchHandlerAlertPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAlertPolicy is endpoint for AutoAddAlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respAlertPolicyV1AutoAddAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoDeleteAlertPolicy is endpoint for AutoDeleteAlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respAlertPolicyV1AutoDeleteAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoGetAlertPolicy is endpoint for AutoGetAlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respAlertPolicyV1AutoGetAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoListAlertPolicy is endpoint for AutoListAlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (*AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicyList{}, err
	}
	return resp.(*AlertPolicyList), nil
}

type respAlertPolicyV1AutoListAlertPolicy struct {
	V   AlertPolicyList
	Err error
}

// AutoUpdateAlertPolicy is endpoint for AutoUpdateAlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respAlertPolicyV1AutoUpdateAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoWatchAlertPolicy performs Watch for AlertPolicy
func (e EndpointsAlertPolicyV1Client) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (AlertPolicyV1_AutoWatchAlertPolicyClient, error) {
	return e.Client.AutoWatchAlertPolicy(ctx, in)
}

// AutoAddAlertPolicy implementation on server Endpoint
func (e EndpointsAlertPolicyV1Server) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeAlertPolicyV1AutoAddAlertPolicyEndpoint creates  AutoAddAlertPolicy endpoints for the service
func MakeAlertPolicyV1AutoAddAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoAddAlertPolicy(ctx, *req)
		return respAlertPolicyV1AutoAddAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertPolicyV1:AutoAddAlertPolicy")(f)
}

// AutoDeleteAlertPolicy implementation on server Endpoint
func (e EndpointsAlertPolicyV1Server) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeAlertPolicyV1AutoDeleteAlertPolicyEndpoint creates  AutoDeleteAlertPolicy endpoints for the service
func MakeAlertPolicyV1AutoDeleteAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoDeleteAlertPolicy(ctx, *req)
		return respAlertPolicyV1AutoDeleteAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertPolicyV1:AutoDeleteAlertPolicy")(f)
}

// AutoGetAlertPolicy implementation on server Endpoint
func (e EndpointsAlertPolicyV1Server) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeAlertPolicyV1AutoGetAlertPolicyEndpoint creates  AutoGetAlertPolicy endpoints for the service
func MakeAlertPolicyV1AutoGetAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoGetAlertPolicy(ctx, *req)
		return respAlertPolicyV1AutoGetAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertPolicyV1:AutoGetAlertPolicy")(f)
}

// AutoListAlertPolicy implementation on server Endpoint
func (e EndpointsAlertPolicyV1Server) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicyList{}, err
	}
	return *resp.(*AlertPolicyList), nil
}

// MakeAlertPolicyV1AutoListAlertPolicyEndpoint creates  AutoListAlertPolicy endpoints for the service
func MakeAlertPolicyV1AutoListAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertPolicy(ctx, *req)
		return respAlertPolicyV1AutoListAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertPolicyV1:AutoListAlertPolicy")(f)
}

// AutoUpdateAlertPolicy implementation on server Endpoint
func (e EndpointsAlertPolicyV1Server) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeAlertPolicyV1AutoUpdateAlertPolicyEndpoint creates  AutoUpdateAlertPolicy endpoints for the service
func MakeAlertPolicyV1AutoUpdateAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoUpdateAlertPolicy(ctx, *req)
		return respAlertPolicyV1AutoUpdateAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("AlertPolicyV1:AutoUpdateAlertPolicy")(f)
}

// AutoWatchAlertPolicy is the watch handler for AlertPolicy on the server side.
func (e EndpointsAlertPolicyV1Server) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream AlertPolicyV1_AutoWatchAlertPolicyServer) error {
	return e.watchHandlerAlertPolicy(in, stream)
}

// MakeAutoWatchAlertPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchAlertPolicyEndpoint(s ServiceAlertPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(AlertPolicyV1_AutoWatchAlertPolicyServer)
		return s.AutoWatchAlertPolicy(options, wstream)
	}
}

// MakeAlertPolicyV1ServerEndpoints creates server endpoints
func MakeAlertPolicyV1ServerEndpoints(s ServiceAlertPolicyV1Server, logger log.Logger) EndpointsAlertPolicyV1Server {
	return EndpointsAlertPolicyV1Server{

		AutoAddAlertPolicyEndpoint:    MakeAlertPolicyV1AutoAddAlertPolicyEndpoint(s, logger),
		AutoDeleteAlertPolicyEndpoint: MakeAlertPolicyV1AutoDeleteAlertPolicyEndpoint(s, logger),
		AutoGetAlertPolicyEndpoint:    MakeAlertPolicyV1AutoGetAlertPolicyEndpoint(s, logger),
		AutoListAlertPolicyEndpoint:   MakeAlertPolicyV1AutoListAlertPolicyEndpoint(s, logger),
		AutoUpdateAlertPolicyEndpoint: MakeAlertPolicyV1AutoUpdateAlertPolicyEndpoint(s, logger),

		watchHandlerAlertPolicy: MakeAutoWatchAlertPolicyEndpoint(s, logger),
	}
}

// LoggingAlertPolicyV1MiddlewareClient adds middleware for the client
func LoggingAlertPolicyV1MiddlewareClient(logger log.Logger) MiddlewareAlertPolicyV1Client {
	return func(next ServiceAlertPolicyV1Client) ServiceAlertPolicyV1Client {
		return loggingAlertPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAlertPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceAlertPolicyV1Client
}

// LoggingAlertPolicyV1MiddlewareServer adds middleware for the client
func LoggingAlertPolicyV1MiddlewareServer(logger log.Logger) MiddlewareAlertPolicyV1Server {
	return func(next ServiceAlertPolicyV1Server) ServiceAlertPolicyV1Server {
		return loggingAlertPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingAlertPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceAlertPolicyV1Server
}

func (m loggingAlertPolicyV1MiddlewareClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareClient) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}

func (m loggingAlertPolicyV1MiddlewareClient) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp AlertPolicyV1_AutoWatchAlertPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAlertPolicy(ctx, in)
	return
}

func (m loggingAlertPolicyV1MiddlewareServer) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareServer) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareServer) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareServer) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (resp AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingAlertPolicyV1MiddlewareServer) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "AlertPolicyV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}

func (m loggingAlertPolicyV1MiddlewareServer) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream AlertPolicyV1_AutoWatchAlertPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "AlertPolicyV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertPolicy(in, stream)
	return
}
func (r *EndpointsAlertPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIAlertPolicyV1AutoAddAlertPolicyCreateOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/alertPolicies", "/", in.Tenant, "/alertPolicies")
}

//
func makeURIAlertPolicyV1AutoDeleteAlertPolicyDeleteOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/alertPolicies", "/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIAlertPolicyV1AutoGetAlertPolicyGetOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/alertPolicies", "/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIAlertPolicyV1AutoListAlertPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/alertPolicies", "/", in.Tenant, "/alertPolicies")
}

//
func makeURIAlertPolicyV1AutoUpdateAlertPolicyUpdateOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/alertPolicies", "/", in.Tenant, "/alertPolicies/", in.Name)
}

// AutoAddAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIAlertPolicyV1AutoAddAlertPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertPolicyV1AutoAddAlertPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), nil
}

// AutoUpdateAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIAlertPolicyV1AutoUpdateAlertPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertPolicyV1AutoUpdateAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoGetAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIAlertPolicyV1AutoGetAlertPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertPolicyV1AutoGetAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoDeleteAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIAlertPolicyV1AutoDeleteAlertPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertPolicyV1AutoDeleteAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoListAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoListAlertPolicy(ctx context.Context, options *api.ListWatchOptions) (*AlertPolicyList, error) {
	path := makeURIAlertPolicyV1AutoListAlertPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespAlertPolicyV1AutoListAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicyList), err
}

// AutoWatchAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsAlertPolicyV1RestClient) AutoWatchAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeAlertPolicyV1RestClientEndpoints make REST client endpoints
func MakeAlertPolicyV1RestClientEndpoints(instance string) (EndpointsAlertPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsAlertPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
