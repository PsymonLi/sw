{
  "swagger": "2.0",
  "info": {
    "title": "Service name",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/{O.Tenant}/alertDestinations": {
      "get": {
        "operationId": "AutoListAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertDestinationList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AlertDestinationV1"
        ]
      },
      "post": {
        "operationId": "AutoAddAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        ],
        "tags": [
          "AlertDestinationV1"
        ]
      }
    },
    "/{O.Tenant}/alertDestinations/{O.Name}": {
      "get": {
        "operationId": "AutoGetAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Default",
            "description": "Name of the user performed some action.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.EmailList",
            "description": "Time at which the action was performed.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.totalNotificationsSent",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AlertDestinationV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AlertDestinationV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertsAlertDestination"
            }
          }
        ],
        "tags": [
          "AlertDestinationV1"
        ]
      }
    },
    "/{O.Tenant}/alertPolicies": {
      "get": {
        "operationId": "AutoListAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicyList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AlertPolicyV1"
        ]
      },
      "post": {
        "operationId": "AutoAddAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        ],
        "tags": [
          "AlertPolicyV1"
        ]
      }
    },
    "/{O.Tenant}/alertPolicies/{O.Name}": {
      "get": {
        "operationId": "AutoGetAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Resource",
            "description": "Resource type - target resource to run this policy.\ne.g. Network, Endpoint - object based alert policy\n     Event - event based alert policy\n     EndpointMetrics - metric based alert policy\nbased on the resource type, the policy gets interpreted.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Severity",
            "description": "Severity to be set for an alert that gets triggered from this rule.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Message",
            "description": "Message to be used while generating the alert\nXXX: Event based alerts should not carry a message. It will be derived from the event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.PersistenceDuration",
            "description": "Met rule (requirements) needs to sustain for the given duration to qualify to be an alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.ClearDuration",
            "description": "Met rule (requirements) needs to be cleared for the given duration to resolve an alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.Enable",
            "description": "User can disable the policy by setting this field.\nDisabled policies will not generate any more alerts but the outstanding ones will remain as is.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.AutoResolve",
            "description": "If set, the underlying alert will be auto-resolved if the rule that\ntriggered the alert is cleared.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "Spec.Destinations",
            "description": "name of the alert destinations to be used to send out notification when an alert\ngets generated.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Status.TotalHits",
            "description": "Total hits on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Status.OpenAlerts",
            "description": "Open alerts based on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Status.AcknowledgedAlerts",
            "description": "Acknowledged alerts based on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AlertPolicyV1"
        ]
      },
      "delete": {
        "operationId": "AutoDeleteAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AlertPolicyV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertsAlertPolicy"
            }
          }
        ],
        "tags": [
          "AlertPolicyV1"
        ]
      }
    },
    "/{O.Tenant}/alerts": {
      "get": {
        "operationId": "AutoListAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlertList"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "LabelSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "FieldSelector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "PrefixWatch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "FieldChangeSelector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AlertsV1"
        ]
      }
    },
    "/{O.Tenant}/alerts/{O.Name}": {
      "get": {
        "operationId": "AutoGetAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlert"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.APIVersion",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.ResourceVersion",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.UUID",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.CreationTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.ModTime.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.SelfLink",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Spec.State",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Severity",
            "description": "Host where the trap needs to be sent.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Source.Component",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Source.NodeName",
            "description": "Password contains the authentication password.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.ObjectRef.Kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.ObjectRef.Namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.ObjectRef.Name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Message",
            "description": "CommunityOrUser contains community string for v2c, user for v3.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Reason.PolicyID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Acknowledged.User",
            "description": "If set, this will be the default notification option for the alert policies unless otherwise\nsomething else is mentioned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Acknowledged.Time.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "Status.Resolved.User",
            "description": "If set, this will be the default notification option for the alert policies unless otherwise\nsomething else is mentioned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Status.Resolved.Time.time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "AlertsV1"
        ]
      },
      "put": {
        "operationId": "AutoUpdateAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/alertsAlert"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alertsAlert"
            }
          }
        ],
        "tags": [
          "AlertsV1"
        ]
      }
    }
  },
  "definitions": {
    "alertsAlert": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/alertsAlertSpec"
        },
        "Status": {
          "$ref": "#/definitions/alertsAlertStatus"
        }
      },
      "title": "Source of an alert; for alerts generated from events, it maps to event.Source"
    },
    "alertsAlertDestination": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "Requirement from the alert rule that was met"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta",
          "title": "The value at which the requirement was met.\nsame as Requirement.value for operator `Equals` but could vary for other operators\ne.g. requirement - CPU;Gt;90 could have a matching value 96"
        },
        "Spec": {
          "$ref": "#/definitions/alertsAlertDestinationSpec"
        },
        "Status": {
          "$ref": "#/definitions/alertsAlertDestinationStatus"
        }
      },
      "title": "One of the requirement from the expression that was met"
    },
    "alertsAlertDestinationList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "List of requirements from the alert policy with it's matched value"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta",
          "title": "Alert Policy ID that matched"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsAlertDestination"
          }
        }
      },
      "title": "AlertReason captures all the requirements with matched value from the alert policy rule\nat the time of creating an alert.\ne.g. \"matched-requirements\": [{\"field\": \"cpu\", \"operator\": \"Gt\", \"values\": [90], \"observed-value\": 95}]"
    },
    "alertsAlertDestinationSpec": {
      "type": "object",
      "properties": {
        "Default": {
          "type": "boolean",
          "format": "boolean",
          "description": "Name of the user performed some action."
        },
        "EmailList": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Time at which the action was performed."
        },
        "SNMPTrapServers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsSNMPTrapServer"
          }
        }
      },
      "description": "AuditInfo captures the user performed the action and the time at which the\naction was performed."
    },
    "alertsAlertDestinationStatus": {
      "type": "object",
      "properties": {
        "totalNotificationsSent": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "User can change the state of the alert by changing the spec"
    },
    "alertsAlertList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "Severity of an alert"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta",
          "title": "Alert source or origin"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsAlert"
          },
          "title": "Affected object"
        }
      },
      "title": "Status part of the alert object"
    },
    "alertsAlertPolicy": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "Spec": {
          "$ref": "#/definitions/alertsAlertPolicySpec"
        },
        "Status": {
          "$ref": "#/definitions/alertsAlertPolicyStatus"
        }
      },
      "title": "Alert defines an alert object"
    },
    "alertsAlertPolicyList": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "name of the field or metric"
        },
        "ListMeta": {
          "$ref": "#/definitions/apiListMeta"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsAlertPolicy"
          },
          "description": "Values contains one or more values corresponding to the field-or-metric. \"Equals\",\n\"NotEquals\", \"Gt\" and \"Lt\" operators need a single value. \"In\" and \"NotIn\" operators\ncan have one or more values."
        }
      },
      "title": "Requirement specifies each\n{\"field\": \"Status.Phase\", \"operator\":\"Equals\", \"values\":[\"JOINED\"]}"
    },
    "alertsAlertPolicySpec": {
      "type": "object",
      "properties": {
        "Resource": {
          "type": "string",
          "description": "Resource type - target resource to run this policy.\ne.g. Network, Endpoint - object based alert policy\n     Event - event based alert policy\n     EndpointMetrics - metric based alert policy\nbased on the resource type, the policy gets interpreted."
        },
        "Severity": {
          "type": "string",
          "title": "Severity to be set for an alert that gets triggered from this rule"
        },
        "Message": {
          "type": "string",
          "description": "Message to be used while generating the alert\nXXX: Event based alerts should not carry a message. It will be derived from the event."
        },
        "Requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsRequirement"
          },
          "title": "List of requirements that needs to be met to trigger an alert"
        },
        "PersistenceDuration": {
          "type": "string",
          "title": "Met rule (requirements) needs to sustain for the given duration to qualify to be an alert"
        },
        "ClearDuration": {
          "type": "string",
          "title": "Met rule (requirements) needs to be cleared for the given duration to resolve an alert"
        },
        "Enable": {
          "type": "boolean",
          "format": "boolean",
          "description": "User can disable the policy by setting this field.\nDisabled policies will not generate any more alerts but the outstanding ones will remain as is."
        },
        "AutoResolve": {
          "type": "boolean",
          "format": "boolean",
          "title": "If set, the underlying alert will be auto-resolved if the rule that\ntriggered the alert is cleared"
        },
        "Destinations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "name of the alert destinations to be used to send out notification when an alert\ngets generated."
        }
      }
    },
    "alertsAlertPolicyStatus": {
      "type": "object",
      "properties": {
        "TotalHits": {
          "type": "integer",
          "format": "int32",
          "title": "Total hits on this policy"
        },
        "OpenAlerts": {
          "type": "integer",
          "format": "int32",
          "title": "Open alerts based on this policy"
        },
        "AcknowledgedAlerts": {
          "type": "integer",
          "format": "int32",
          "title": "Acknowledged alerts based on this policy"
        }
      }
    },
    "alertsAlertReason": {
      "type": "object",
      "properties": {
        "MatchedRequirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/alertsMatchedRequirement"
          }
        },
        "PolicyID": {
          "type": "string"
        }
      },
      "title": "AlertPolicy - tenant scoped"
    },
    "alertsAlertSource": {
      "type": "object",
      "properties": {
        "Component": {
          "type": "string"
        },
        "NodeName": {
          "type": "string",
          "description": "Password contains the authentication password."
        }
      },
      "description": "AuthConfig contains the configuration for SNMP Trap authentication."
    },
    "alertsAlertSpec": {
      "type": "object",
      "properties": {
        "State": {
          "type": "string"
        }
      },
      "description": "PrivacyConfig contains the configuration for SNMP Trap encryption."
    },
    "alertsAlertStatus": {
      "type": "object",
      "properties": {
        "Severity": {
          "type": "string",
          "description": "Host where the trap needs to be sent."
        },
        "Source": {
          "$ref": "#/definitions/alertsAlertSource",
          "description": "Port on the Host where the trap needs to be sent, default is 162."
        },
        "ObjectRef": {
          "$ref": "#/definitions/apiObjectRef"
        },
        "Message": {
          "type": "string",
          "description": "CommunityOrUser contains community string for v2c, user for v3."
        },
        "Reason": {
          "$ref": "#/definitions/alertsAlertReason",
          "description": "AuthConfig contains the configuration for authentication, valid only for v3."
        },
        "Acknowledged": {
          "$ref": "#/definitions/alertsAuditInfo",
          "description": "PrivacyConfig contains the configuration for encryption, valid only for v3."
        },
        "Resolved": {
          "$ref": "#/definitions/alertsAuditInfo"
        }
      },
      "description": "SNMPTrapServer contains the configuration for sending SNMP traps to a receiver."
    },
    "alertsAuditInfo": {
      "type": "object",
      "properties": {
        "User": {
          "type": "string",
          "description": "If set, this will be the default notification option for the alert policies unless otherwise\nsomething else is mentioned."
        },
        "Time": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "Email notification"
        }
      }
    },
    "alertsAuthConfig": {
      "type": "object",
      "properties": {
        "Algo": {
          "type": "string",
          "title": "total number of notifications sent using this notification mechanism"
        },
        "Password": {
          "type": "string"
        }
      }
    },
    "alertsAutoMsgAlertDestinationWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/alertsAlertDestination"
        }
      },
      "title": "AlertDestination - tenant scoped"
    },
    "alertsAutoMsgAlertPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/alertsAlertPolicy"
        }
      }
    },
    "alertsAutoMsgAlertWatchHelper": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/alertsAlert"
        }
      }
    },
    "alertsMatchedRequirement": {
      "type": "object",
      "properties": {
        "Requirement": {
          "$ref": "#/definitions/alertsRequirement"
        },
        "ObservedValue": {
          "type": "string"
        }
      }
    },
    "alertsPrivacyConfig": {
      "type": "object",
      "properties": {
        "Algo": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        }
      }
    },
    "alertsRequirement": {
      "type": "object",
      "properties": {
        "FieldOrMetric": {
          "type": "string"
        },
        "Operator": {
          "type": "string"
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "alertsSNMPTrapServer": {
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "CommunityOrUser": {
          "type": "string"
        },
        "AuthConfig": {
          "$ref": "#/definitions/alertsAuthConfig"
        },
        "PrivacyConfig": {
          "$ref": "#/definitions/alertsPrivacyConfig"
        }
      }
    },
    "apiListMeta": {
      "type": "object",
      "properties": {
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "LabelSelector": {
          "type": "string"
        },
        "FieldSelector": {
          "type": "string"
        },
        "PrefixWatch": {
          "type": "boolean",
          "format": "boolean"
        },
        "FieldChangeSelector": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "Tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "UUID": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "CreationTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "CreationTime is the creation time of Object"
        },
        "ModTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "ModTime is the Last Modification time of Object"
        },
        "SelfLink": {
          "type": "string",
          "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway."
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiObjectRef": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        }
      },
      "description": "ObjectRef contains identifying information about an object."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "APIVersion": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    }
  }
}
