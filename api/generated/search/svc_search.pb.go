// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_search.proto

package search

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchV1 service

type SearchV1Client interface {
	AutoWatchSvcSearchV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SearchV1_AutoWatchSvcSearchV1Client, error)
	// Security Policy Query
	PolicyQuery(ctx context.Context, in *PolicySearchRequest, opts ...grpc.CallOption) (*PolicySearchResponse, error)
	// Structured or free-form search
	Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchV1Client struct {
	cc *grpc.ClientConn
}

func NewSearchV1Client(cc *grpc.ClientConn) SearchV1Client {
	return &searchV1Client{cc}
}

func (c *searchV1Client) AutoWatchSvcSearchV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (SearchV1_AutoWatchSvcSearchV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_SearchV1_serviceDesc.Streams[0], c.cc, "/search.SearchV1/AutoWatchSvcSearchV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchV1AutoWatchSvcSearchV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchV1_AutoWatchSvcSearchV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type searchV1AutoWatchSvcSearchV1Client struct {
	grpc.ClientStream
}

func (x *searchV1AutoWatchSvcSearchV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchV1Client) PolicyQuery(ctx context.Context, in *PolicySearchRequest, opts ...grpc.CallOption) (*PolicySearchResponse, error) {
	out := new(PolicySearchResponse)
	err := grpc.Invoke(ctx, "/search.SearchV1/PolicyQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/search.SearchV1/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchV1 service

type SearchV1Server interface {
	AutoWatchSvcSearchV1(*api.ListWatchOptions, SearchV1_AutoWatchSvcSearchV1Server) error
	// Security Policy Query
	PolicyQuery(context.Context, *PolicySearchRequest) (*PolicySearchResponse, error)
	// Structured or free-form search
	Query(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterSearchV1Server(s *grpc.Server, srv SearchV1Server) {
	s.RegisterService(&_SearchV1_serviceDesc, srv)
}

func _SearchV1_AutoWatchSvcSearchV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchV1Server).AutoWatchSvcSearchV1(m, &searchV1AutoWatchSvcSearchV1Server{stream})
}

type SearchV1_AutoWatchSvcSearchV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type searchV1AutoWatchSvcSearchV1Server struct {
	grpc.ServerStream
}

func (x *searchV1AutoWatchSvcSearchV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _SearchV1_PolicyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).PolicyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchV1/PolicyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).PolicyQuery(ctx, req.(*PolicySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchV1/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).Query(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchV1",
	HandlerType: (*SearchV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PolicyQuery",
			Handler:    _SearchV1_PolicyQuery_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _SearchV1_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcSearchV1",
			Handler:       _SearchV1_AutoWatchSvcSearchV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_search.proto",
}

func init() { proto.RegisterFile("svc_search.proto", fileDescriptorSvcSearch) }

var fileDescriptorSvcSearch = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6b, 0xdb, 0x40,
	0x1c, 0xc5, 0x25, 0x83, 0x8d, 0x51, 0x5d, 0xda, 0xaa, 0x75, 0xe1, 0x64, 0xa3, 0x41, 0xa5, 0x43,
	0x0b, 0xd6, 0xd5, 0xed, 0xd6, 0xad, 0x05, 0x6f, 0x85, 0x3a, 0x31, 0xc4, 0x90, 0x25, 0x9c, 0xcf,
	0x17, 0xf9, 0x40, 0xbe, 0x3b, 0xfb, 0x4e, 0x32, 0x5e, 0x65, 0x7f, 0x82, 0x64, 0xf3, 0x94, 0x39,
	0x63, 0xa6, 0x64, 0xcb, 0x98, 0x31, 0x90, 0x2f, 0x10, 0x44, 0x86, 0x7c, 0x8c, 0xa0, 0x93, 0x6c,
	0xec, 0x90, 0x6c, 0x7a, 0xbf, 0xff, 0xff, 0xff, 0xde, 0x43, 0x9c, 0xf5, 0x5e, 0xc6, 0xf8, 0x48,
	0x12, 0x34, 0xc5, 0x23, 0x5f, 0x4c, 0xb9, 0xe2, 0x76, 0x25, 0x57, 0x4e, 0x33, 0xe0, 0x3c, 0x08,
	0x09, 0x44, 0x82, 0x42, 0xc4, 0x18, 0x57, 0x48, 0x51, 0xce, 0x64, 0xbe, 0xe5, 0x74, 0x02, 0xaa,
	0x46, 0xd1, 0xc0, 0xc7, 0x7c, 0x0c, 0x05, 0x61, 0x12, 0xb1, 0x21, 0x87, 0x72, 0x06, 0x63, 0xc2,
	0x28, 0x26, 0x30, 0x52, 0x34, 0x94, 0xd9, 0x69, 0x40, 0xd8, 0xf6, 0x35, 0xa4, 0x0c, 0x87, 0xd1,
	0x90, 0xac, 0x6d, 0x5a, 0x5b, 0x36, 0x01, 0x0f, 0x38, 0xd4, 0x78, 0x10, 0x1d, 0x6b, 0xa5, 0x85,
	0xfe, 0x2a, 0xd6, 0x6b, 0x8a, 0x30, 0xc4, 0xd4, 0x5a, 0x6d, 0xf7, 0x76, 0xbe, 0xbe, 0xd2, 0x28,
	0xeb, 0x3f, 0x26, 0x0a, 0xe5, 0x6b, 0x3f, 0xaf, 0x4a, 0x56, 0xb5, 0xa7, 0xef, 0x0e, 0xda, 0x76,
	0xdf, 0xfa, 0xf4, 0x27, 0x52, 0xbc, 0x8f, 0x14, 0x1e, 0xf5, 0x62, 0xbc, 0xe1, 0x75, 0x1f, 0x09,
	0xea, 0xff, 0xa3, 0x52, 0xe9, 0xd1, 0x7f, 0xa1, 0xcb, 0x3b, 0x1f, 0x35, 0xd6, 0xa8, 0x13, 0x13,
	0xa6, 0xb2, 0x05, 0xef, 0xc3, 0xc5, 0x12, 0x94, 0x67, 0x19, 0xbb, 0x5c, 0x02, 0xf3, 0x7a, 0x09,
	0x8c, 0x1f, 0xa6, 0x2d, 0xad, 0x37, 0x5d, 0x1e, 0x52, 0x3c, 0xdf, 0x8b, 0xc8, 0x74, 0x6e, 0x37,
	0xfc, 0xa2, 0x6a, 0x0e, 0xf3, 0x9c, 0x7d, 0x32, 0x89, 0x88, 0x54, 0x4e, 0xf3, 0xe5, 0xa1, 0x14,
	0x9c, 0x49, 0xe2, 0x7d, 0x4b, 0xee, 0x1e, 0x4e, 0x4b, 0x5f, 0xbc, 0xb7, 0x50, 0xe8, 0x71, 0x6b,
	0x92, 0x39, 0xfe, 0x36, 0xbf, 0x1f, 0xbe, 0xb3, 0x77, 0x99, 0xdd, 0xb3, 0xca, 0x79, 0x5c, 0x7d,
	0xed, 0xb8, 0x1b, 0xf4, 0xf9, 0x39, 0x2e, 0x22, 0x1a, 0x3a, 0xa2, 0xee, 0x55, 0xe0, 0xc6, 0xbb,
	0x6a, 0x17, 0xc2, 0xb1, 0x4e, 0x16, 0xa0, 0x14, 0xb7, 0x57, 0x0b, 0x60, 0xfc, 0xf5, 0x57, 0x09,
	0xa8, 0x09, 0xc2, 0x5a, 0x52, 0xcc, 0x83, 0x10, 0x49, 0x79, 0x96, 0x00, 0xe3, 0x3c, 0x01, 0xc5,
	0x93, 0xb9, 0x49, 0x5d, 0xf3, 0x36, 0x75, 0xcd, 0xfb, 0xd4, 0x35, 0x1f, 0x53, 0xd7, 0xe8, 0x9a,
	0x83, 0x8a, 0xfe, 0xe9, 0xbf, 0x9e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x9d, 0xc4, 0xde, 0x67,
	0x02, 0x00, 0x00,
}
