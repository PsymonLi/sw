// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_search.proto

package search

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchV1 service

type SearchV1Client interface {
	// In the example below a query like
	//    http://<...>/venice/v1/search/query?QueryString=XXXXX&MaxResults=100
	//  generates a RPC call Query with the parameter as
	//  SearchRequest{ QueryString: "XXXXX", MaxResults:100}
	Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type searchV1Client struct {
	cc *grpc.ClientConn
}

func NewSearchV1Client(cc *grpc.ClientConn) SearchV1Client {
	return &searchV1Client{cc}
}

func (c *searchV1Client) Query(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/search.SearchV1/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchV1 service

type SearchV1Server interface {
	// In the example below a query like
	//    http://<...>/venice/v1/search/query?QueryString=XXXXX&MaxResults=100
	//  generates a RPC call Query with the parameter as
	//  SearchRequest{ QueryString: "XXXXX", MaxResults:100}
	Query(context.Context, *SearchRequest) (*SearchResponse, error)
}

func RegisterSearchV1Server(s *grpc.Server, srv SearchV1Server) {
	s.RegisterService(&_SearchV1_serviceDesc, srv)
}

func _SearchV1_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchV1/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).Query(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchV1",
	HandlerType: (*SearchV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _SearchV1_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc_search.proto",
}

func init() { proto.RegisterFile("svc_search.proto", fileDescriptorSvcSearch) }

var fileDescriptorSvcSearch = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x4d, 0xc1, 0x52, 0x42, 0x91, 0x12, 0x50, 0x48, 0x90, 0x20, 0x82, 0xc7, 0x66, 0xa9,
	0xbe, 0x81, 0xa0, 0x67, 0xff, 0x80, 0x57, 0xd9, 0x24, 0xe3, 0x76, 0x21, 0xdd, 0xd9, 0x66, 0x76,
	0x23, 0xbd, 0xa6, 0x6f, 0xa0, 0xb7, 0x9e, 0x7c, 0x1c, 0x8f, 0x82, 0x2f, 0x20, 0xc1, 0x07, 0x91,
	0x6c, 0x22, 0x04, 0xc1, 0xdb, 0x7e, 0xb3, 0xdf, 0x6f, 0x76, 0x76, 0xfc, 0x19, 0x55, 0xd9, 0x23,
	0x01, 0x2f, 0xb3, 0x65, 0xa2, 0x4b, 0x34, 0x18, 0x8c, 0x3b, 0x8a, 0x8e, 0x05, 0xa2, 0x28, 0x80,
	0x71, 0x2d, 0x19, 0x57, 0x0a, 0x0d, 0x37, 0x12, 0x15, 0x75, 0x56, 0x74, 0x25, 0xa4, 0x59, 0xda,
	0x34, 0xc9, 0x70, 0xc5, 0x34, 0x28, 0xe2, 0x2a, 0x47, 0x46, 0xcf, 0xac, 0x02, 0x25, 0x33, 0x60,
	0xd6, 0xc8, 0x82, 0xda, 0xa8, 0x00, 0x35, 0x4c, 0x33, 0xa9, 0xb2, 0xc2, 0xe6, 0xf0, 0xdb, 0x66,
	0x3e, 0x68, 0x23, 0x50, 0x20, 0x73, 0xe5, 0xd4, 0x3e, 0x39, 0x72, 0xe0, 0x4e, 0xbd, 0x7e, 0xf6,
	0xcf, 0xab, 0xed, 0x8c, 0x2b, 0x30, 0xbc, 0xd7, 0xa6, 0xc3, 0x0f, 0x9d, 0xe7, 0xfe, 0xe4, 0xde,
	0xf1, 0xc3, 0x22, 0xb8, 0xf6, 0xf7, 0x6f, 0x2d, 0x94, 0x9b, 0xe0, 0x30, 0xe9, 0x9d, 0xee, 0xea,
	0x0e, 0xd6, 0x16, 0xc8, 0x44, 0x47, 0x7f, 0xcb, 0xa4, 0x51, 0x11, 0x9c, 0x1e, 0xd4, 0x9f, 0xdf,
	0xaf, 0xa3, 0x49, 0x30, 0x66, 0xeb, 0x36, 0x1e, 0xcd, 0x5e, 0xb6, 0xe1, 0xa8, 0x5a, 0xec, 0xb6,
	0x61, 0xbf, 0xae, 0xcb, 0x93, 0x5d, 0x1d, 0x4e, 0x35, 0xa8, 0x39, 0xe9, 0x8d, 0x28, 0x38, 0xd1,
	0x5b, 0x1d, 0xee, 0xbd, 0x37, 0xb1, 0xf7, 0xd1, 0xc4, 0xde, 0x57, 0x13, 0x7b, 0x37, 0x5e, 0x3a,
	0x76, 0x03, 0x5d, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x36, 0xb0, 0x64, 0x94, 0x75, 0x01, 0x00,
	0x00,
}
