// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package search is a auto generated package.
Input file: protos/search.proto
*/
package search

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerSearchV1 struct {
	Endpoints EndpointsSearchV1Server

	QueryHdlr grpctransport.Handler
}

// MakeGRPCServerSearchV1 creates a GRPC server for SearchV1 service
func MakeGRPCServerSearchV1(ctx context.Context, endpoints EndpointsSearchV1Server, logger log.Logger) SearchV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerSearchV1{
		Endpoints: endpoints,
		QueryHdlr: grpctransport.NewServer(
			endpoints.QueryEndpoint,
			DecodeGrpcReqSearchRequest,
			EncodeGrpcRespSearchResponse,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Query", logger)))...,
		),
	}
}

func (s *grpcServerSearchV1) Query(ctx oldcontext.Context, req *SearchRequest) (*SearchResponse, error) {
	_, resp, err := s.QueryHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respSearchV1Query).V
	return &r, resp.(respSearchV1Query).Err
}

func decodeHTTPrespSearchV1Query(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp SearchResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func encodeHTTPAggregation(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAggregation(_ context.Context, r *http.Request) (interface{}, error) {
	var req Aggregation
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAggregation encodes GRPC request
func EncodeGrpcReqAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Aggregation)
	return req, nil
}

// DecodeGrpcReqAggregation decodes GRPC request
func DecodeGrpcReqAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Aggregation)
	return req, nil
}

// EncodeGrpcRespAggregation encodes GRC response
func EncodeGrpcRespAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAggregation decodes GRPC response
func DecodeGrpcRespAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCategory(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCategory(_ context.Context, r *http.Request) (interface{}, error) {
	var req Category
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCategory encodes GRPC request
func EncodeGrpcReqCategory(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Category)
	return req, nil
}

// DecodeGrpcReqCategory decodes GRPC request
func DecodeGrpcReqCategory(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Category)
	return req, nil
}

// EncodeGrpcRespCategory encodes GRC response
func EncodeGrpcRespCategory(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCategory decodes GRPC response
func DecodeGrpcRespCategory(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEntry(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEntry(_ context.Context, r *http.Request) (interface{}, error) {
	var req Entry
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEntry encodes GRPC request
func EncodeGrpcReqEntry(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Entry)
	return req, nil
}

// DecodeGrpcReqEntry decodes GRPC request
func DecodeGrpcReqEntry(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Entry)
	return req, nil
}

// EncodeGrpcRespEntry encodes GRC response
func EncodeGrpcRespEntry(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEntry decodes GRPC response
func DecodeGrpcRespEntry(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEntryList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEntryList(_ context.Context, r *http.Request) (interface{}, error) {
	var req EntryList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEntryList encodes GRPC request
func EncodeGrpcReqEntryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EntryList)
	return req, nil
}

// DecodeGrpcReqEntryList decodes GRPC request
func DecodeGrpcReqEntryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EntryList)
	return req, nil
}

// EncodeGrpcRespEntryList encodes GRC response
func EncodeGrpcRespEntryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEntryList decodes GRPC response
func DecodeGrpcRespEntryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPError(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPError(_ context.Context, r *http.Request) (interface{}, error) {
	var req Error
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqError encodes GRPC request
func EncodeGrpcReqError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Error)
	return req, nil
}

// DecodeGrpcReqError decodes GRPC request
func DecodeGrpcReqError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Error)
	return req, nil
}

// EncodeGrpcRespError encodes GRC response
func EncodeGrpcRespError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespError decodes GRPC response
func DecodeGrpcRespError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPKind(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPKind(_ context.Context, r *http.Request) (interface{}, error) {
	var req Kind
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqKind encodes GRPC request
func EncodeGrpcReqKind(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Kind)
	return req, nil
}

// DecodeGrpcReqKind decodes GRPC request
func DecodeGrpcReqKind(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Kind)
	return req, nil
}

// EncodeGrpcRespKind encodes GRC response
func EncodeGrpcRespKind(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespKind decodes GRPC response
func DecodeGrpcRespKind(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNestedAggregation(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNestedAggregation(_ context.Context, r *http.Request) (interface{}, error) {
	var req NestedAggregation
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNestedAggregation encodes GRPC request
func EncodeGrpcReqNestedAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NestedAggregation)
	return req, nil
}

// DecodeGrpcReqNestedAggregation decodes GRPC request
func DecodeGrpcReqNestedAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NestedAggregation)
	return req, nil
}

// EncodeGrpcRespNestedAggregation encodes GRC response
func EncodeGrpcRespNestedAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNestedAggregation decodes GRPC response
func DecodeGrpcRespNestedAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchQuery(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchQuery(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchQuery
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchQuery encodes GRPC request
func EncodeGrpcReqSearchQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchQuery)
	return req, nil
}

// DecodeGrpcReqSearchQuery decodes GRPC request
func DecodeGrpcReqSearchQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchQuery)
	return req, nil
}

// EncodeGrpcRespSearchQuery encodes GRC response
func EncodeGrpcRespSearchQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchQuery decodes GRPC response
func DecodeGrpcRespSearchQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchRequest encodes GRPC request
func EncodeGrpcReqSearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchRequest)
	return req, nil
}

// DecodeGrpcReqSearchRequest decodes GRPC request
func DecodeGrpcReqSearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchRequest)
	return req, nil
}

// EncodeGrpcRespSearchRequest encodes GRC response
func EncodeGrpcRespSearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchRequest decodes GRPC response
func DecodeGrpcRespSearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchResponse encodes GRPC request
func EncodeGrpcReqSearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchResponse)
	return req, nil
}

// DecodeGrpcReqSearchResponse decodes GRPC request
func DecodeGrpcReqSearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchResponse)
	return req, nil
}

// EncodeGrpcRespSearchResponse encodes GRC response
func EncodeGrpcRespSearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchResponse decodes GRPC response
func DecodeGrpcRespSearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTextRequirement(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTextRequirement(_ context.Context, r *http.Request) (interface{}, error) {
	var req TextRequirement
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTextRequirement encodes GRPC request
func EncodeGrpcReqTextRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TextRequirement)
	return req, nil
}

// DecodeGrpcReqTextRequirement decodes GRPC request
func DecodeGrpcReqTextRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TextRequirement)
	return req, nil
}

// EncodeGrpcRespTextRequirement encodes GRC response
func EncodeGrpcRespTextRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTextRequirement decodes GRPC response
func DecodeGrpcRespTextRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
