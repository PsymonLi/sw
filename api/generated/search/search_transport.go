// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package search is a auto generated package.
Input file: search.proto
*/
package search

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPCategory(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCategory(_ context.Context, r *http.Request) (interface{}, error) {
	var req Category
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCategory encodes GRPC request
func EncodeGrpcReqCategory(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Category)
	return req, nil
}

// DecodeGrpcReqCategory decodes GRPC request
func DecodeGrpcReqCategory(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Category)
	return req, nil
}

// EncodeGrpcRespCategory encodes GRC response
func EncodeGrpcRespCategory(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCategory decodes GRPC response
func DecodeGrpcRespCategory(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCategoryAggregation(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCategoryAggregation(_ context.Context, r *http.Request) (interface{}, error) {
	var req CategoryAggregation
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCategoryAggregation encodes GRPC request
func EncodeGrpcReqCategoryAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CategoryAggregation)
	return req, nil
}

// DecodeGrpcReqCategoryAggregation decodes GRPC request
func DecodeGrpcReqCategoryAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CategoryAggregation)
	return req, nil
}

// EncodeGrpcRespCategoryAggregation encodes GRC response
func EncodeGrpcRespCategoryAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCategoryAggregation decodes GRPC response
func DecodeGrpcRespCategoryAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCategoryPreview(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCategoryPreview(_ context.Context, r *http.Request) (interface{}, error) {
	var req CategoryPreview
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCategoryPreview encodes GRPC request
func EncodeGrpcReqCategoryPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CategoryPreview)
	return req, nil
}

// DecodeGrpcReqCategoryPreview decodes GRPC request
func DecodeGrpcReqCategoryPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CategoryPreview)
	return req, nil
}

// EncodeGrpcRespCategoryPreview encodes GRC response
func EncodeGrpcRespCategoryPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCategoryPreview decodes GRPC response
func DecodeGrpcRespCategoryPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEntry(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEntry(_ context.Context, r *http.Request) (interface{}, error) {
	var req Entry
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEntry encodes GRPC request
func EncodeGrpcReqEntry(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Entry)
	return req, nil
}

// DecodeGrpcReqEntry decodes GRPC request
func DecodeGrpcReqEntry(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Entry)
	return req, nil
}

// EncodeGrpcRespEntry encodes GRC response
func EncodeGrpcRespEntry(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEntry decodes GRPC response
func DecodeGrpcRespEntry(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEntryList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEntryList(_ context.Context, r *http.Request) (interface{}, error) {
	var req EntryList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEntryList encodes GRPC request
func EncodeGrpcReqEntryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EntryList)
	return req, nil
}

// DecodeGrpcReqEntryList decodes GRPC request
func DecodeGrpcReqEntryList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EntryList)
	return req, nil
}

// EncodeGrpcRespEntryList encodes GRC response
func EncodeGrpcRespEntryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEntryList decodes GRPC response
func DecodeGrpcRespEntryList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPError(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPError(_ context.Context, r *http.Request) (interface{}, error) {
	var req Error
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqError encodes GRPC request
func EncodeGrpcReqError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Error)
	return req, nil
}

// DecodeGrpcReqError decodes GRPC request
func DecodeGrpcReqError(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Error)
	return req, nil
}

// EncodeGrpcRespError encodes GRC response
func EncodeGrpcRespError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespError decodes GRPC response
func DecodeGrpcRespError(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPKind(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPKind(_ context.Context, r *http.Request) (interface{}, error) {
	var req Kind
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqKind encodes GRPC request
func EncodeGrpcReqKind(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Kind)
	return req, nil
}

// DecodeGrpcReqKind decodes GRPC request
func DecodeGrpcReqKind(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Kind)
	return req, nil
}

// EncodeGrpcRespKind encodes GRC response
func EncodeGrpcRespKind(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespKind decodes GRPC response
func DecodeGrpcRespKind(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPKindAggregation(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPKindAggregation(_ context.Context, r *http.Request) (interface{}, error) {
	var req KindAggregation
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqKindAggregation encodes GRPC request
func EncodeGrpcReqKindAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KindAggregation)
	return req, nil
}

// DecodeGrpcReqKindAggregation decodes GRPC request
func DecodeGrpcReqKindAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KindAggregation)
	return req, nil
}

// EncodeGrpcRespKindAggregation encodes GRC response
func EncodeGrpcRespKindAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespKindAggregation decodes GRPC response
func DecodeGrpcRespKindAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPKindPreview(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPKindPreview(_ context.Context, r *http.Request) (interface{}, error) {
	var req KindPreview
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqKindPreview encodes GRPC request
func EncodeGrpcReqKindPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KindPreview)
	return req, nil
}

// DecodeGrpcReqKindPreview decodes GRPC request
func DecodeGrpcReqKindPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*KindPreview)
	return req, nil
}

// EncodeGrpcRespKindPreview encodes GRC response
func EncodeGrpcRespKindPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespKindPreview decodes GRPC response
func DecodeGrpcRespKindPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPolicySearchRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPolicySearchRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req PolicySearchRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPolicySearchRequest encodes GRPC request
func EncodeGrpcReqPolicySearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicySearchRequest)
	return req, nil
}

// DecodeGrpcReqPolicySearchRequest decodes GRPC request
func DecodeGrpcReqPolicySearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicySearchRequest)
	return req, nil
}

// EncodeGrpcRespPolicySearchRequest encodes GRC response
func EncodeGrpcRespPolicySearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPolicySearchRequest decodes GRPC response
func DecodeGrpcRespPolicySearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPolicySearchResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPolicySearchResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req PolicySearchResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPolicySearchResponse encodes GRPC request
func EncodeGrpcReqPolicySearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicySearchResponse)
	return req, nil
}

// DecodeGrpcReqPolicySearchResponse decodes GRPC request
func DecodeGrpcReqPolicySearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PolicySearchResponse)
	return req, nil
}

// EncodeGrpcRespPolicySearchResponse encodes GRC response
func EncodeGrpcRespPolicySearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPolicySearchResponse decodes GRPC response
func DecodeGrpcRespPolicySearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchQuery(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchQuery(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchQuery
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchQuery encodes GRPC request
func EncodeGrpcReqSearchQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchQuery)
	return req, nil
}

// DecodeGrpcReqSearchQuery decodes GRPC request
func DecodeGrpcReqSearchQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchQuery)
	return req, nil
}

// EncodeGrpcRespSearchQuery encodes GRC response
func EncodeGrpcRespSearchQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchQuery decodes GRPC response
func DecodeGrpcRespSearchQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchRequest encodes GRPC request
func EncodeGrpcReqSearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchRequest)
	return req, nil
}

// DecodeGrpcReqSearchRequest decodes GRPC request
func DecodeGrpcReqSearchRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchRequest)
	return req, nil
}

// EncodeGrpcRespSearchRequest encodes GRC response
func EncodeGrpcRespSearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchRequest decodes GRPC response
func DecodeGrpcRespSearchRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSearchResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSearchResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req SearchResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSearchResponse encodes GRPC request
func EncodeGrpcReqSearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchResponse)
	return req, nil
}

// DecodeGrpcReqSearchResponse decodes GRPC request
func DecodeGrpcReqSearchResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SearchResponse)
	return req, nil
}

// EncodeGrpcRespSearchResponse encodes GRC response
func EncodeGrpcRespSearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSearchResponse decodes GRPC response
func DecodeGrpcRespSearchResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantAggregation(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantAggregation(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantAggregation
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantAggregation encodes GRPC request
func EncodeGrpcReqTenantAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantAggregation)
	return req, nil
}

// DecodeGrpcReqTenantAggregation decodes GRPC request
func DecodeGrpcReqTenantAggregation(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantAggregation)
	return req, nil
}

// EncodeGrpcRespTenantAggregation encodes GRC response
func EncodeGrpcRespTenantAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantAggregation decodes GRPC response
func DecodeGrpcRespTenantAggregation(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTenantPreview(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTenantPreview(_ context.Context, r *http.Request) (interface{}, error) {
	var req TenantPreview
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTenantPreview encodes GRPC request
func EncodeGrpcReqTenantPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantPreview)
	return req, nil
}

// DecodeGrpcReqTenantPreview decodes GRPC request
func DecodeGrpcReqTenantPreview(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TenantPreview)
	return req, nil
}

// EncodeGrpcRespTenantPreview encodes GRC response
func EncodeGrpcRespTenantPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTenantPreview decodes GRPC response
func DecodeGrpcRespTenantPreview(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTextRequirement(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTextRequirement(_ context.Context, r *http.Request) (interface{}, error) {
	var req TextRequirement
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTextRequirement encodes GRPC request
func EncodeGrpcReqTextRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TextRequirement)
	return req, nil
}

// DecodeGrpcReqTextRequirement decodes GRPC request
func DecodeGrpcReqTextRequirement(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TextRequirement)
	return req, nil
}

// EncodeGrpcRespTextRequirement encodes GRC response
func EncodeGrpcRespTextRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTextRequirement decodes GRPC response
func DecodeGrpcRespTextRequirement(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
