// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package search is a auto generated package.
Input file: search.proto
*/
package search

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapSearch = make(map[string]map[string][]func(interface{}) bool)

// Clone clones the object into into or creates one of into is nil
func (m *Category) Clone(into interface{}) (interface{}, error) {
	var out *Category
	var ok bool
	if into == nil {
		out = &Category{}
	} else {
		out, ok = into.(*Category)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Category) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *CategoryAggregation) Clone(into interface{}) (interface{}, error) {
	var out *CategoryAggregation
	var ok bool
	if into == nil {
		out = &CategoryAggregation{}
	} else {
		out, ok = into.(*CategoryAggregation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *CategoryAggregation) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Entry) Clone(into interface{}) (interface{}, error) {
	var out *Entry
	var ok bool
	if into == nil {
		out = &Entry{}
	} else {
		out, ok = into.(*Entry)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Entry) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *EntryList) Clone(into interface{}) (interface{}, error) {
	var out *EntryList
	var ok bool
	if into == nil {
		out = &EntryList{}
	} else {
		out, ok = into.(*EntryList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *EntryList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Error) Clone(into interface{}) (interface{}, error) {
	var out *Error
	var ok bool
	if into == nil {
		out = &Error{}
	} else {
		out, ok = into.(*Error)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Error) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Kind) Clone(into interface{}) (interface{}, error) {
	var out *Kind
	var ok bool
	if into == nil {
		out = &Kind{}
	} else {
		out, ok = into.(*Kind)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Kind) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *KindAggregation) Clone(into interface{}) (interface{}, error) {
	var out *KindAggregation
	var ok bool
	if into == nil {
		out = &KindAggregation{}
	} else {
		out, ok = into.(*KindAggregation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *KindAggregation) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchQuery) Clone(into interface{}) (interface{}, error) {
	var out *SearchQuery
	var ok bool
	if into == nil {
		out = &SearchQuery{}
	} else {
		out, ok = into.(*SearchQuery)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchQuery) Defaults(ver string) bool {
	var ret bool
	for k := range m.Texts {
		if m.Texts[k] != nil {
			ret = m.Texts[k].Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		for k := range m.Categories {
			m.Categories[k] = Category_Type_name[0]
		}
		for k := range m.Kinds {
			m.Kinds[k] = Kind_Type_name[0]
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchRequest) Clone(into interface{}) (interface{}, error) {
	var out *SearchRequest
	var ok bool
	if into == nil {
		out = &SearchRequest{}
	} else {
		out, ok = into.(*SearchRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchRequest) Defaults(ver string) bool {
	var ret bool
	if m.Query != nil {
		ret = m.Query.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.MaxResults = 10
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchResponse) Clone(into interface{}) (interface{}, error) {
	var out *SearchResponse
	var ok bool
	if into == nil {
		out = &SearchResponse{}
	} else {
		out, ok = into.(*SearchResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TenantAggregation) Clone(into interface{}) (interface{}, error) {
	var out *TenantAggregation
	var ok bool
	if into == nil {
		out = &TenantAggregation{}
	} else {
		out, ok = into.(*TenantAggregation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TenantAggregation) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TextRequirement) Clone(into interface{}) (interface{}, error) {
	var out *TextRequirement
	var ok bool
	if into == nil {
		out = &TextRequirement{}
	} else {
		out, ok = into.(*TextRequirement)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TextRequirement) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Validators

func (m *Category) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *CategoryAggregation) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Entry) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EntryList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Error) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Kind) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *KindAggregation) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SearchQuery) Validate(ver string, ignoreStatus bool) bool {
	if m.Fields != nil && !m.Fields.Validate(ver, ignoreStatus) {
		return false
	}
	if m.Labels != nil && !m.Labels.Validate(ver, ignoreStatus) {
		return false
	}
	for _, v := range m.Texts {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := validatorMapSearch["SearchQuery"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapSearch["SearchQuery"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SearchRequest) Validate(ver string, ignoreStatus bool) bool {
	if m.Query != nil && !m.Query.Validate(ver, ignoreStatus) {
		return false
	}
	if vs, ok := validatorMapSearch["SearchRequest"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapSearch["SearchRequest"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SearchResponse) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TenantAggregation) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *TextRequirement) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapSearch["TextRequirement"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapSearch["TextRequirement"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

	validatorMapSearch = make(map[string]map[string][]func(interface{}) bool)

	validatorMapSearch["SearchQuery"] = make(map[string][]func(interface{}) bool)
	validatorMapSearch["SearchQuery"]["all"] = append(validatorMapSearch["SearchQuery"]["all"], func(i interface{}) bool {
		m := i.(*SearchQuery)

		for _, v := range m.Categories {
			if _, ok := Category_Type_value[v]; !ok {
				return false
			}
		}
		return true
	})
	validatorMapSearch["SearchQuery"]["all"] = append(validatorMapSearch["SearchQuery"]["all"], func(i interface{}) bool {
		m := i.(*SearchQuery)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "64")

		for _, v := range m.Categories {
			if !validators.StrLen(v, args) {
				return false
			}
		}
		return true
	})

	validatorMapSearch["SearchQuery"]["all"] = append(validatorMapSearch["SearchQuery"]["all"], func(i interface{}) bool {
		m := i.(*SearchQuery)

		for _, v := range m.Kinds {
			if _, ok := Kind_Type_value[v]; !ok {
				return false
			}
		}
		return true
	})
	validatorMapSearch["SearchQuery"]["all"] = append(validatorMapSearch["SearchQuery"]["all"], func(i interface{}) bool {
		m := i.(*SearchQuery)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "64")

		for _, v := range m.Kinds {
			if !validators.StrLen(v, args) {
				return false
			}
		}
		return true
	})

	validatorMapSearch["SearchRequest"] = make(map[string][]func(interface{}) bool)
	validatorMapSearch["SearchRequest"]["all"] = append(validatorMapSearch["SearchRequest"]["all"], func(i interface{}) bool {
		m := i.(*SearchRequest)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "1023")

		if !validators.IntRange(m.From, args) {
			return false
		}
		return true
	})

	validatorMapSearch["SearchRequest"]["all"] = append(validatorMapSearch["SearchRequest"]["all"], func(i interface{}) bool {
		m := i.(*SearchRequest)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "8192")

		if !validators.IntRange(m.MaxResults, args) {
			return false
		}
		return true
	})

	validatorMapSearch["SearchRequest"]["all"] = append(validatorMapSearch["SearchRequest"]["all"], func(i interface{}) bool {
		m := i.(*SearchRequest)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "256")

		if !validators.StrLen(m.QueryString, args) {
			return false
		}
		return true
	})

	validatorMapSearch["SearchRequest"]["all"] = append(validatorMapSearch["SearchRequest"]["all"], func(i interface{}) bool {
		m := i.(*SearchRequest)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "256")

		if !validators.StrLen(m.SortBy, args) {
			return false
		}
		return true
	})

	validatorMapSearch["TextRequirement"] = make(map[string][]func(interface{}) bool)
	validatorMapSearch["TextRequirement"]["all"] = append(validatorMapSearch["TextRequirement"]["all"], func(i interface{}) bool {
		m := i.(*TextRequirement)
		args := make([]string, 0)
		args = append(args, "0")
		args = append(args, "256")

		for _, v := range m.Text {
			if !validators.StrLen(v, args) {
				return false
			}
		}
		return true
	})

}
