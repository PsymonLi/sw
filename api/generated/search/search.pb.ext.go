// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package search is a auto generated package.
Input file: protos/search.proto
*/
package search

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// Clone clones the object into into or creates one of into is nil
func (m *Aggregation) Clone(into interface{}) (interface{}, error) {
	var out *Aggregation
	var ok bool
	if into == nil {
		out = &Aggregation{}
	} else {
		out, ok = into.(*Aggregation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Aggregation) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Entry) Clone(into interface{}) (interface{}, error) {
	var out *Entry
	var ok bool
	if into == nil {
		out = &Entry{}
	} else {
		out, ok = into.(*Entry)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Entry) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *EntryList) Clone(into interface{}) (interface{}, error) {
	var out *EntryList
	var ok bool
	if into == nil {
		out = &EntryList{}
	} else {
		out, ok = into.(*EntryList)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *EntryList) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Error) Clone(into interface{}) (interface{}, error) {
	var out *Error
	var ok bool
	if into == nil {
		out = &Error{}
	} else {
		out, ok = into.(*Error)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Error) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *NestedAggregation) Clone(into interface{}) (interface{}, error) {
	var out *NestedAggregation
	var ok bool
	if into == nil {
		out = &NestedAggregation{}
	} else {
		out, ok = into.(*NestedAggregation)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *NestedAggregation) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Requirement) Clone(into interface{}) (interface{}, error) {
	var out *Requirement
	var ok bool
	if into == nil {
		out = &Requirement{}
	} else {
		out, ok = into.(*Requirement)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Requirement) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchCriteria) Clone(into interface{}) (interface{}, error) {
	var out *SearchCriteria
	var ok bool
	if into == nil {
		out = &SearchCriteria{}
	} else {
		out, ok = into.(*SearchCriteria)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchCriteria) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchRequest) Clone(into interface{}) (interface{}, error) {
	var out *SearchRequest
	var ok bool
	if into == nil {
		out = &SearchRequest{}
	} else {
		out, ok = into.(*SearchRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchResponse) Clone(into interface{}) (interface{}, error) {
	var out *SearchResponse
	var ok bool
	if into == nil {
		out = &SearchResponse{}
	} else {
		out, ok = into.(*SearchResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SearchResult) Clone(into interface{}) (interface{}, error) {
	var out *SearchResult
	var ok bool
	if into == nil {
		out = &SearchResult{}
	} else {
		out, ok = into.(*SearchResult)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SearchResult) Defaults(ver string) bool {
	return false
}

// Validators

func (m *Aggregation) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Entry) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *EntryList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Error) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *NestedAggregation) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Requirement) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SearchCriteria) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SearchRequest) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SearchResponse) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *SearchResult) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func init() {
}
