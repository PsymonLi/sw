// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package searchApiServer is a auto generated package.
Input file: search.proto
*/
package search

import (
	"reflect"

	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapSearch = map[string]*runtime.Struct{

	"search.Category": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(Category{}) },
		Fields:    map[string]runtime.Field{},
	},
	"search.CategoryAggregation": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(CategoryAggregation{}) },
		Fields: map[string]runtime.Field{
			"Categories": runtime.Field{Name: "Categories", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "categories", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "search.KindAggregation"},
		},
	},
	"search.CategoryAggregation.CategoriesEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.KindAggregation"},
		},
	},
	"search.CategoryPreview": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(CategoryPreview{}) },
		Fields: map[string]runtime.Field{
			"Categories": runtime.Field{Name: "Categories", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "categories", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "search.KindPreview"},
		},
	},
	"search.CategoryPreview.CategoriesEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.KindPreview"},
		},
	},
	"search.Entry": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(Entry{}) },
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},
		},
	},
	"search.EntryList": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(EntryList{}) },
		Fields: map[string]runtime.Field{
			"Entries": runtime.Field{Name: "Entries", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "entries", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "search.Entry"},
		},
	},
	"search.Error": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(Error{}) },
		Fields: map[string]runtime.Field{
			"Type": runtime.Field{Name: "Type", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "type", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Reason": runtime.Field{Name: "Reason", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "reason", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"search.Kind": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(Kind{}) },
		Fields:    map[string]runtime.Field{},
	},
	"search.KindAggregation": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(KindAggregation{}) },
		Fields: map[string]runtime.Field{
			"Kinds": runtime.Field{Name: "Kinds", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "kinds", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "search.EntryList"},
		},
	},
	"search.KindAggregation.KindsEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.EntryList"},
		},
	},
	"search.KindPreview": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(KindPreview{}) },
		Fields: map[string]runtime.Field{
			"Kinds": runtime.Field{Name: "Kinds", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "kinds", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "TYPE_INT64"},
		},
	},
	"search.KindPreview.KindsEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT64"},
		},
	},
	"search.PolicySearchRequest": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(PolicySearchRequest{}) },
		Fields: map[string]runtime.Field{
			"Tenant": runtime.Field{Name: "Tenant", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tenant", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"SGPolicy": runtime.Field{Name: "SGPolicy", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sg-policy", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"App": runtime.Field{Name: "App", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "app", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"FromIPAddress": runtime.Field{Name: "FromIPAddress", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "from-ip-address", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ToIPAddress": runtime.Field{Name: "ToIPAddress", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "to-ip-address", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"FromSecurityGroup": runtime.Field{Name: "FromSecurityGroup", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "from-security-group", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ToSecurityGroup": runtime.Field{Name: "ToSecurityGroup", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "to-security-group", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"search.PolicySearchResponse": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(PolicySearchResponse{}) },
		Fields: map[string]runtime.Field{
			"Status": runtime.Field{Name: "Status", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"SGPolicy": runtime.Field{Name: "SGPolicy", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sg-policy", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Rule": runtime.Field{Name: "Rule", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "rule", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "security.SGRule"},

			"Index": runtime.Field{Name: "Index", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "index", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},
		},
	},
	"search.SearchQuery": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SearchQuery{}) },
		Fields: map[string]runtime.Field{
			"Texts": runtime.Field{Name: "Texts", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "texts", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "search.TextRequirement"},

			"Categories": runtime.Field{Name: "Categories", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "categories", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Kinds": runtime.Field{Name: "Kinds", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "kinds", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Fields": runtime.Field{Name: "Fields", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "fields", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "fields.Selector"},

			"Labels": runtime.Field{Name: "Labels", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "labels", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "labels.Selector"},
		},
	},
	"search.SearchRequest": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SearchRequest{}) },
		Fields: map[string]runtime.Field{
			"QueryString": runtime.Field{Name: "QueryString", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "query-string", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"From": runtime.Field{Name: "From", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "from", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT32"},

			"MaxResults": runtime.Field{Name: "MaxResults", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "max-results", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT32"},

			"SortBy": runtime.Field{Name: "SortBy", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sort-by", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Mode": runtime.Field{Name: "Mode", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "mode", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Query": runtime.Field{Name: "Query", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "query", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.SearchQuery"},
		},
	},
	"search.SearchResponse": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(SearchResponse{}) },
		Fields: map[string]runtime.Field{
			"TotalHits": runtime.Field{Name: "TotalHits", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "total-hits", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT64"},

			"ActualHits": runtime.Field{Name: "ActualHits", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "actual-hits", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT64"},

			"TimeTakenMsecs": runtime.Field{Name: "TimeTakenMsecs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "time-taken-msecs", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT64"},

			"Error": runtime.Field{Name: "Error", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "error", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.Error"},

			"Entries": runtime.Field{Name: "Entries", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "entries", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "search.Entry"},

			"PreviewEntries": runtime.Field{Name: "PreviewEntries", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "preview-entries", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.TenantPreview"},

			"AggregatedEntries": runtime.Field{Name: "AggregatedEntries", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "aggregated-entries", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.TenantAggregation"},
		},
	},
	"search.TenantAggregation": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TenantAggregation{}) },
		Fields: map[string]runtime.Field{
			"Tenants": runtime.Field{Name: "Tenants", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tenants", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "search.CategoryAggregation"},
		},
	},
	"search.TenantAggregation.TenantsEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.CategoryAggregation"},
		},
	},
	"search.TenantPreview": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TenantPreview{}) },
		Fields: map[string]runtime.Field{
			"Tenants": runtime.Field{Name: "Tenants", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tenants", Pointer: false, Slice: false, Map: true, KeyType: "TYPE_STRING", Type: "search.CategoryPreview"},
		},
	},
	"search.TenantPreview.TenantsEntry": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"key": runtime.Field{Name: "key", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"value": runtime.Field{Name: "value", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "search.CategoryPreview"},
		},
	},
	"search.TextRequirement": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TextRequirement{}) },
		Fields: map[string]runtime.Field{
			"Text": runtime.Field{Name: "Text", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "text", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapSearch)
}
