{
  "swagger": "2.0",
  "info": {
    "title": "Service name",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/query": {
      "get": {
        "summary": "In the example below a query like\n   http://\u003c...\u003e/venice/v1/search/query?QueryString=XXXXX\u0026MaxResults=100\n generates a RPC call Query with the parameter as\n SearchRequest{ QueryString: \"XXXXX\", MaxResults:100}",
        "operationId": "Query",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/searchSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "QueryString",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "From",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "MaxResults",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Query.Categories",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "Query.Kinds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "SearchV1"
        ]
      }
    }
  },
  "definitions": {
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "Tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "Namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "ResourceVersion": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "UUID": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "Labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "CreationTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "CreationTime is the creation time of Object"
        },
        "ModTime": {
          "$ref": "#/definitions/apiTimestamp",
          "title": "ModTime is the Last Modification time of Object"
        },
        "SelfLink": {
          "type": "string",
          "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway."
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "Kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "APIVersion": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "fieldsRequirement": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string",
          "description": "The label key that the condition applies to."
        },
        "Operator": {
          "type": "string",
          "description": "Condition checked for the key."
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Values contains one or more values corresponding to the label key. \"equals\" and\n\"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have\none or more values."
        }
      },
      "description": "Requirement defines a single matching condition for a selector."
    },
    "fieldsSelector": {
      "type": "object",
      "properties": {
        "Requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fieldsRequirement"
          },
          "description": "Requirements are ANDed."
        }
      },
      "description": "Selector is used to select objects by fields. Requirements in the selector are ANDed.\nA selector with no Requirements does not select anything."
    },
    "labelsRequirement": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string",
          "description": "The label key that the condition applies to."
        },
        "Operator": {
          "type": "string",
          "description": "Condition checked for the key."
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Values contains one or more values corresponding to the label key. \"equals\" and\n\"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have\none or more values."
        }
      },
      "description": "Requirement defines a single matching condition for a selector."
    },
    "labelsSelector": {
      "type": "object",
      "properties": {
        "Requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/labelsRequirement"
          },
          "description": "Requirements are ANDed."
        }
      },
      "description": "Selector is used to select objects by labels. Requirements in the selector are ANDed.\nA selector with no Requirements does not select anything."
    },
    "searchAggregation": {
      "type": "object",
      "properties": {
        "Entries": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/searchEntryList"
          }
        }
      },
      "title": "List of search categories, specified via \"category\" modifier\nTODO: generate these enums if possible and use it for validation"
    },
    "searchEntry": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "AND of words or phrases to be matched"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta"
        }
      },
      "description": "TextRequirement is AND of text-strings in the list\nIt is comprised of words or phrases for text search support.\nIf a text-string has space separated multi-word, it will be\ninterpreted as a phrase.\n\nIn the example below :\n- \"link down\" will be a phrase query\n- network, production, staging will be a word query\n\nFor eg:\n   network                      (match network)\n   link down                    (match \"link down\" phrase)\n   network,production           (match network AND production)\n   network,link down,staging    (match network AND \"link down\" AND staging)"
    },
    "searchEntryList": {
      "type": "object",
      "properties": {
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/searchEntry"
          },
          "title": "OR of Text-requirements to be matched, Exclude is not supported for Text search"
        }
      }
    },
    "searchError": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string",
          "title": "Type of error"
        },
        "Reason": {
          "type": "string",
          "title": "Reason or description of the failure"
        }
      },
      "title": "Error contains the error code, description and\nassociated details"
    },
    "searchNestedAggregation": {
      "type": "object",
      "properties": {
        "Entries": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/searchAggregation"
          }
        }
      },
      "title": "EntryList is list of search result entries"
    },
    "searchSearchQuery": {
      "type": "object",
      "properties": {
        "Texts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/searchTextRequirement"
          }
        },
        "Categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Kinds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Fields": {
          "$ref": "#/definitions/fieldsSelector"
        },
        "Labels": {
          "$ref": "#/definitions/labelsSelector"
        }
      },
      "title": "Aggregation contains map of search results entries\ngrouped by a Key.\nFor eg: search result entries grouped by Kind as key"
    },
    "searchSearchRequest": {
      "type": "object",
      "properties": {
        "QueryString": {
          "type": "string"
        },
        "From": {
          "type": "integer",
          "format": "int32"
        },
        "MaxResults": {
          "type": "integer",
          "format": "int32"
        },
        "Query": {
          "$ref": "#/definitions/searchSearchQuery"
        }
      },
      "description": "NestedAggregation contains map of search results\ngrouped by two levels of Aggregation\nFor eg: search result entries grouped first by Tenant\n        name and subsequently grouped by Kind."
    },
    "searchSearchResponse": {
      "type": "object",
      "properties": {
        "T": {
          "$ref": "#/definitions/apiTypeMeta",
          "title": "Simple query string\nThis can be specified as URI parameter.\nFor advanced query cases, Users should use specify SearchQuery\nand pass the SearchRequest in a GET/POST Body"
        },
        "O": {
          "$ref": "#/definitions/apiObjectMeta",
          "description": "From represents the start offset (zero based), used in paginated search requests\nThe results returned would be in the range [From ... From+MaxResults-1]\nTODO: Add venice option to set default to 0.\nThis can be specified as URI parameter."
        },
        "TotalHits": {
          "type": "string",
          "format": "int64",
          "description": "MaxResults is the max-count of search results\nTODO: Add venice option to set some default value (TBD)\nThis can be specified as URI parameter."
        },
        "ActualHits": {
          "type": "string",
          "format": "int64",
          "description": "Search query contains the search requirements\nThis is intended for advanced query use cases involving\nboolean query, structured term query and supports various\ncombinations of text, phrase strings and search modifiers \nfor specific categories, kinds, fields and labels.\nThis cannot be specified as URI parameter."
        },
        "TimeTakenMsecs": {
          "type": "string",
          "format": "int64"
        },
        "Error": {
          "$ref": "#/definitions/searchError"
        },
        "Entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/searchEntry"
          }
        },
        "AggregatedEntries": {
          "$ref": "#/definitions/searchNestedAggregation"
        }
      },
      "description": "Simple queries can be specified as URI param using \"QueryString\".\nFor advanced queries, it is recommended to use the \"SearchQuery\" structure\nand specify them in BODY of the GET/POST method.\n\nExamples of search query in query-string format:\n\n 1. Find all occurrences matching text “Network” \n    Network\n 2. Find all occurrences matching phrase “link down”\n    “link down”\n 3. Find all occurrences matching text production OR \"staging\"\n    production staging\n 4. Find all occurrences matching text “Network” AND \"link down\"\n    Network,\"link down\"\n    Network AND \"link down\"\n 5. Find all config objects with label1=foo\n    category:config label:label1=foo\n 6. Find all objects created on or after certain date+time\n    category:config field:meta.created-time\u003e=”date-time-string”\n 7. Find all Network objects with type=vlan\n    kind:Network field:spec.type=vlan\n 8. Find all Naples nodes with admission-phase = pending or rejected\n    kind:SmartNIC field:spec.phase in (pending, rejected)\n 9. Find all events with text matching “disconnected”\n    category:events disconnected\n10. Find all Critical events for Network objects\n    category:events kind:Network field:severity=CRITICAL \n11. Find all Alerts generated from Naples MAC1\n    category:alerts field:status.source.node=MAC1\n    category:alerts MAC1\n12. Find all Naples nodes with metric filter : mem\u003e90 \u0026\u0026 cpu\u003e90\n    category:metrics kind:SmartNIC field:metric.mem\u003e90,metric.cpu\u003e90\n13. Find all Endpoints with label Tier=Web with counter1\u003e=100\n    category:metrics kind:Endpoint label:Tier=Web field:metric.counter1 \u003e 100\n14. Find all Endpoints objects with label target=prod with crc-error-count != 0\n    category:metrics kind:Endpoint label:target=prod field:status.crc-error-count!=0\n15. Find all occurences matching the words and phrase in a certain category \u0026 kinds with certain field and label match\n    production \"status down\" category:Network kind:Network,Service field:spec.service-type=external label:tier=web",
      "title": "SearchRequest is the input to the search API"
    },
    "searchTextRequirement": {
      "type": "object",
      "properties": {
        "Text": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "SearchResponse is the output provided by the search API\nBased on the search request, search results would be part\nof one of the entities : Entries or NestedAggregation.\nIn case of failures, Error would indicate the error status and\ndescription."
    }
  }
}
