// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	search "github.com/pensando/sw/api/generated/search"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewSearchV1 sets up a new client for SearchV1
func NewSearchV1(conn *grpc.ClientConn, logger log.Logger) search.ServiceSearchV1Client {

	var lPolicyQueryEndpoint endpoint.Endpoint
	{
		lPolicyQueryEndpoint = grpctransport.NewClient(
			conn,
			"search.SearchV1",
			"PolicyQuery",
			search.EncodeGrpcReqPolicySearchRequest,
			search.DecodeGrpcRespPolicySearchResponse,
			&search.PolicySearchResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lPolicyQueryEndpoint = trace.ClientEndPoint("SearchV1:PolicyQuery")(lPolicyQueryEndpoint)
	}
	var lQueryEndpoint endpoint.Endpoint
	{
		lQueryEndpoint = grpctransport.NewClient(
			conn,
			"search.SearchV1",
			"Query",
			search.EncodeGrpcReqSearchRequest,
			search.DecodeGrpcRespSearchResponse,
			&search.SearchResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lQueryEndpoint = trace.ClientEndPoint("SearchV1:Query")(lQueryEndpoint)
	}
	return search.EndpointsSearchV1Client{
		Client: search.NewSearchV1Client(conn),

		PolicyQueryEndpoint: lPolicyQueryEndpoint,
		QueryEndpoint:       lQueryEndpoint,
	}
}

// NewSearchV1Backend creates an instrumented client with middleware
func NewSearchV1Backend(conn *grpc.ClientConn, logger log.Logger) search.ServiceSearchV1Client {
	cl := NewSearchV1(conn, logger)
	cl = search.LoggingSearchV1MiddlewareClient(logger)(cl)
	return cl
}

type crudClientSearchV1 struct {
	logger log.Logger
	client search.ServiceSearchV1Client
}

// NewGrpcCrudClientSearchV1 creates a GRPC client for the service
func NewGrpcCrudClientSearchV1(conn *grpc.ClientConn, logger log.Logger) search.SearchV1Interface {
	client := NewSearchV1Backend(conn, logger)
	return &crudClientSearchV1{
		logger: logger,
		client: client,
	}
}

type crudRestClientSearchV1 struct {
}

// NewRestCrudClientSearchV1 creates a REST client for the service.
func NewRestCrudClientSearchV1(url string, httpClient *http.Client) search.SearchV1Interface {
	return &crudRestClientSearchV1{}
}

// NewStagedRestCrudClientSearchV1 creates a REST client for the service.
func NewStagedRestCrudClientSearchV1(url string, id string, httpClient *http.Client) search.SearchV1Interface {
	return &crudRestClientSearchV1{}
}

func (a *crudRestClientSearchV1) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
