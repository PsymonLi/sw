// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package diagnostics is a auto generated package.
Input file: module.proto
*/
package diagnostics

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPDiagnosticsRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDiagnosticsRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req DiagnosticsRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDiagnosticsRequest encodes GRPC request
func EncodeGrpcReqDiagnosticsRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DiagnosticsRequest)
	return req, nil
}

// DecodeGrpcReqDiagnosticsRequest decodes GRPC request
func DecodeGrpcReqDiagnosticsRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DiagnosticsRequest)
	return req, nil
}

// EncodeGrpcRespDiagnosticsRequest encodes GRC response
func EncodeGrpcRespDiagnosticsRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDiagnosticsRequest decodes GRPC response
func DecodeGrpcRespDiagnosticsRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPDiagnosticsResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPDiagnosticsResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req DiagnosticsResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqDiagnosticsResponse encodes GRPC request
func EncodeGrpcReqDiagnosticsResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DiagnosticsResponse)
	return req, nil
}

// DecodeGrpcReqDiagnosticsResponse decodes GRPC request
func DecodeGrpcReqDiagnosticsResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*DiagnosticsResponse)
	return req, nil
}

// EncodeGrpcRespDiagnosticsResponse encodes GRC response
func EncodeGrpcRespDiagnosticsResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespDiagnosticsResponse decodes GRPC response
func DecodeGrpcRespDiagnosticsResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPModule(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPModule(_ context.Context, r *http.Request) (interface{}, error) {
	var req Module
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqModule encodes GRPC request
func EncodeGrpcReqModule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Module)
	return req, nil
}

// DecodeGrpcReqModule decodes GRPC request
func DecodeGrpcReqModule(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Module)
	return req, nil
}

// EncodeGrpcRespModule encodes GRC response
func EncodeGrpcRespModule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespModule decodes GRPC response
func DecodeGrpcRespModule(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPModuleSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPModuleSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ModuleSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqModuleSpec encodes GRPC request
func EncodeGrpcReqModuleSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleSpec)
	return req, nil
}

// DecodeGrpcReqModuleSpec decodes GRPC request
func DecodeGrpcReqModuleSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleSpec)
	return req, nil
}

// EncodeGrpcRespModuleSpec encodes GRC response
func EncodeGrpcRespModuleSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespModuleSpec decodes GRPC response
func DecodeGrpcRespModuleSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPModuleStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPModuleStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ModuleStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqModuleStatus encodes GRPC request
func EncodeGrpcReqModuleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleStatus)
	return req, nil
}

// DecodeGrpcReqModuleStatus decodes GRPC request
func DecodeGrpcReqModuleStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleStatus)
	return req, nil
}

// EncodeGrpcRespModuleStatus encodes GRC response
func EncodeGrpcRespModuleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespModuleStatus decodes GRPC response
func DecodeGrpcRespModuleStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
