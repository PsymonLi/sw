// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: module.proto

/*
	Package diagnostics is a generated protocol buffer package.

	Service name

	It is generated from these files:
		module.proto
		svc_diagnostics.proto

	It has these top-level messages:
		DiagnosticsRequest
		DiagnosticsResponse
		Module
		ModuleSpec
		ModuleStatus
		AutoMsgModuleWatchHelper
		ModuleList
*/
package diagnostics

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Type of diagnostic query
type DiagnosticsRequest_QueryType int32

const (
	//
	DiagnosticsRequest_Log DiagnosticsRequest_QueryType = 0
	//
	DiagnosticsRequest_Profile DiagnosticsRequest_QueryType = 1
	//
	DiagnosticsRequest_Stats DiagnosticsRequest_QueryType = 2
)

var DiagnosticsRequest_QueryType_name = map[int32]string{
	0: "Log",
	1: "Profile",
	2: "Stats",
}
var DiagnosticsRequest_QueryType_value = map[string]int32{
	"Log":     0,
	"Profile": 1,
	"Stats":   2,
}

func (x DiagnosticsRequest_QueryType) String() string {
	return proto.EnumName(DiagnosticsRequest_QueryType_name, int32(x))
}
func (DiagnosticsRequest_QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorModule, []int{0, 0}
}

// LoggingLevel defines various logging levels for each module
type ModuleSpec_LoggingLevel int32

const (
	//
	ModuleSpec_Info ModuleSpec_LoggingLevel = 0
	//
	ModuleSpec_Warn ModuleSpec_LoggingLevel = 1
	//
	ModuleSpec_Error ModuleSpec_LoggingLevel = 2
	//
	ModuleSpec_Debug ModuleSpec_LoggingLevel = 3
)

var ModuleSpec_LoggingLevel_name = map[int32]string{
	0: "Info",
	1: "Warn",
	2: "Error",
	3: "Debug",
}
var ModuleSpec_LoggingLevel_value = map[string]int32{
	"Info":  0,
	"Warn":  1,
	"Error": 2,
	"Debug": 3,
}

func (x ModuleSpec_LoggingLevel) String() string {
	return proto.EnumName(ModuleSpec_LoggingLevel_name, int32(x))
}
func (ModuleSpec_LoggingLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorModule, []int{3, 0}
}

// CategoryType defines whether process is part of Venice(controller) or Naples(io) subsystem
type ModuleStatus_CategoryType int32

const (
	//
	ModuleStatus_Venice ModuleStatus_CategoryType = 0
	//
	ModuleStatus_Naples ModuleStatus_CategoryType = 1
)

var ModuleStatus_CategoryType_name = map[int32]string{
	0: "Venice",
	1: "Naples",
}
var ModuleStatus_CategoryType_value = map[string]int32{
	"Venice": 0,
	"Naples": 1,
}

func (x ModuleStatus_CategoryType) String() string {
	return proto.EnumName(ModuleStatus_CategoryType_name, int32(x))
}
func (ModuleStatus_CategoryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorModule, []int{4, 0}
}

// DiagnosticsRequest sends a diagnostics request to the service
type DiagnosticsRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Query is type of diagnostic information requested like Profile, Log. This string is service specific and meaning is assigned by the service
	Query string `protobuf:"bytes,3,opt,name=Query,json=query,omitempty,proto3" json:"query,omitempty"`
	// Parameters to be passed for a diagnostic query
	Parameters map[string]string `protobuf:"bytes,4,rep,name=Parameters,json=parameters,omitempty" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DiagnosticsRequest) Reset()                    { *m = DiagnosticsRequest{} }
func (m *DiagnosticsRequest) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticsRequest) ProtoMessage()               {}
func (*DiagnosticsRequest) Descriptor() ([]byte, []int) { return fileDescriptorModule, []int{0} }

func (m *DiagnosticsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DiagnosticsRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// DiagnosticsResponse contains the response returned by service for the diagnostics query
type DiagnosticsResponse struct {
	//
	Object *api.Any `protobuf:"bytes,1,opt,name=Object,json=diagnostics,omitempty" json:"diagnostics,omitempty"`
}

func (m *DiagnosticsResponse) Reset()                    { *m = DiagnosticsResponse{} }
func (m *DiagnosticsResponse) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticsResponse) ProtoMessage()               {}
func (*DiagnosticsResponse) Descriptor() ([]byte, []int) { return fileDescriptorModule, []int{1} }

func (m *DiagnosticsResponse) GetObject() *api.Any {
	if m != nil {
		return m.Object
	}
	return nil
}

// Module contains configuration to collect diagnostics information about a process and collected diagnostics
type Module struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta, omitempty,embedded=O" json:"meta, omitempty"`
	//
	Spec ModuleSpec `protobuf:"bytes,3,opt,name=Spec,json=spec, omitempty" json:"spec, omitempty"`
	//
	Status ModuleStatus `protobuf:"bytes,4,opt,name=Status,json=status, omitempty" json:"status, omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptorModule, []int{2} }

func (m *Module) GetSpec() ModuleSpec {
	if m != nil {
		return m.Spec
	}
	return ModuleSpec{}
}

func (m *Module) GetStatus() ModuleStatus {
	if m != nil {
		return m.Status
	}
	return ModuleStatus{}
}

// ModuleSpec contains configuration to collect diagnostics information about a process
type ModuleSpec struct {
	// LogLevel is the logging level of this module. Default is Info.
	LogLevel string `protobuf:"bytes,1,opt,name=LogLevel,json=log-level,omitempty,proto3" json:"log-level,omitempty"`
	// EnableTrace enables traces for a module. Default is false.
	EnableTrace bool `protobuf:"varint,2,opt,name=EnableTrace,json=enable-trace,omitempty,proto3" json:"enable-trace,omitempty"`
	// Args are command line arguments passed to the module
	Args []string `protobuf:"bytes,3,rep,name=Args,json=args,omitempty" json:"args,omitempty"`
}

func (m *ModuleSpec) Reset()                    { *m = ModuleSpec{} }
func (m *ModuleSpec) String() string            { return proto.CompactTextString(m) }
func (*ModuleSpec) ProtoMessage()               {}
func (*ModuleSpec) Descriptor() ([]byte, []int) { return fileDescriptorModule, []int{3} }

func (m *ModuleSpec) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *ModuleSpec) GetEnableTrace() bool {
	if m != nil {
		return m.EnableTrace
	}
	return false
}

func (m *ModuleSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// ModuleStatus contains collected diagnostics of a process
type ModuleStatus struct {
	// Node on which this process is running
	Node string `protobuf:"bytes,1,opt,name=Node,json=node,omitempty,proto3" json:"node,omitempty"`
	// Module is the name of the process/container
	Module string `protobuf:"bytes,2,opt,name=Module,json=module,omitempty,proto3" json:"module,omitempty"`
	// Category specifies whether process is part of Venice(controller) or Naples(io) subsystem
	Category string `protobuf:"bytes,3,opt,name=Category,json=category,omitempty,proto3" json:"category,omitempty"`
	// Last start time
	LastStart *api.Timestamp `protobuf:"bytes,4,opt,name=LastStart,json=last-start,omitempty" json:"last-start,omitempty"`
	// Number of times process got restarted. zero if never restarted
	RestartCount int32 `protobuf:"varint,5,opt,name=RestartCount,json=restart-count,omitempty,proto3" json:"restart-count,omitempty"`
	// Arbitrary string, json, backtrace, etc. offering clues for restart
	LastRestartReason string `protobuf:"bytes,6,opt,name=LastRestartReason,json=last-restart-reason,omitempty,proto3" json:"last-restart-reason,omitempty"`
	// Service is the name of the service/pod this process is part of
	Service string `protobuf:"bytes,7,opt,name=Service,json=service,omitempty,proto3" json:"service,omitempty"`
	// Ports on which this process is listening
	Ports []int32 `protobuf:"varint,8,rep,packed,name=Ports,json=ports,omitempty" json:"ports,omitempty"`
}

func (m *ModuleStatus) Reset()                    { *m = ModuleStatus{} }
func (m *ModuleStatus) String() string            { return proto.CompactTextString(m) }
func (*ModuleStatus) ProtoMessage()               {}
func (*ModuleStatus) Descriptor() ([]byte, []int) { return fileDescriptorModule, []int{4} }

func (m *ModuleStatus) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ModuleStatus) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ModuleStatus) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ModuleStatus) GetLastStart() *api.Timestamp {
	if m != nil {
		return m.LastStart
	}
	return nil
}

func (m *ModuleStatus) GetRestartCount() int32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *ModuleStatus) GetLastRestartReason() string {
	if m != nil {
		return m.LastRestartReason
	}
	return ""
}

func (m *ModuleStatus) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ModuleStatus) GetPorts() []int32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

func init() {
	proto.RegisterType((*DiagnosticsRequest)(nil), "diagnostics.DiagnosticsRequest")
	proto.RegisterType((*DiagnosticsResponse)(nil), "diagnostics.DiagnosticsResponse")
	proto.RegisterType((*Module)(nil), "diagnostics.Module")
	proto.RegisterType((*ModuleSpec)(nil), "diagnostics.ModuleSpec")
	proto.RegisterType((*ModuleStatus)(nil), "diagnostics.ModuleStatus")
	proto.RegisterEnum("diagnostics.DiagnosticsRequest_QueryType", DiagnosticsRequest_QueryType_name, DiagnosticsRequest_QueryType_value)
	proto.RegisterEnum("diagnostics.ModuleSpec_LoggingLevel", ModuleSpec_LoggingLevel_name, ModuleSpec_LoggingLevel_value)
	proto.RegisterEnum("diagnostics.ModuleStatus_CategoryType", ModuleStatus_CategoryType_name, ModuleStatus_CategoryType_value)
}
func (m *DiagnosticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Query) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if len(m.Parameters) > 0 {
		for k, _ := range m.Parameters {
			dAtA[i] = 0x22
			i++
			v := m.Parameters[k]
			mapSize := 1 + len(k) + sovModule(uint64(len(k))) + 1 + len(v) + sovModule(uint64(len(v)))
			i = encodeVarintModule(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintModule(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintModule(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *DiagnosticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Object != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.Object.Size()))
		n3, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintModule(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *ModuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LogLevel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.LogLevel)))
		i += copy(dAtA[i:], m.LogLevel)
	}
	if m.EnableTrace {
		dAtA[i] = 0x10
		i++
		if m.EnableTrace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ModuleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	if len(m.Module) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	if m.LastStart != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.LastStart.Size()))
		n8, err := m.LastStart.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.RestartCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModule(dAtA, i, uint64(m.RestartCount))
	}
	if len(m.LastRestartReason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.LastRestartReason)))
		i += copy(dAtA[i:], m.LastRestartReason)
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModule(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Ports) > 0 {
		dAtA10 := make([]byte, len(m.Ports)*10)
		var j9 int
		for _, num1 := range m.Ports {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintModule(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func encodeVarintModule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DiagnosticsRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovModule(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovModule(uint64(l))
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if len(m.Parameters) > 0 {
		for k, v := range m.Parameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModule(uint64(len(k))) + 1 + len(v) + sovModule(uint64(len(v)))
			n += mapEntrySize + 1 + sovModule(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DiagnosticsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovModule(uint64(l))
	}
	return n
}

func (m *Module) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovModule(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovModule(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovModule(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovModule(uint64(l))
	return n
}

func (m *ModuleSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.LogLevel)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if m.EnableTrace {
		n += 2
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	return n
}

func (m *ModuleStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if m.LastStart != nil {
		l = m.LastStart.Size()
		n += 1 + l + sovModule(uint64(l))
	}
	if m.RestartCount != 0 {
		n += 1 + sovModule(uint64(m.RestartCount))
	}
	l = len(m.LastRestartReason)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovModule(uint64(l))
	}
	if len(m.Ports) > 0 {
		l = 0
		for _, e := range m.Ports {
			l += sovModule(uint64(e))
		}
		n += 1 + sovModule(uint64(l)) + l
	}
	return n
}

func sovModule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModule(x uint64) (n int) {
	return sovModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiagnosticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameters == nil {
				m.Parameters = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModule
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthModule
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModule(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthModule
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Parameters[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiagnosticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &api.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTrace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTrace = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStart == nil {
				m.LastStart = &api.Timestamp{}
			}
			if err := m.LastStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			m.RestartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRestartReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastRestartReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ports = append(m.Ports, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModule
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ports = append(m.Ports, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModule   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("module.proto", fileDescriptorModule) }

var fileDescriptorModule = []byte{
	// 958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0x4b, 0xb2, 0x56, 0x4a, 0xcc, 0xac, 0x9d, 0x98, 0x52, 0x12, 0x4b, 0x15, 0xd0,
	0x42, 0x05, 0x2c, 0xb2, 0x70, 0x80, 0x34, 0x75, 0xdb, 0x43, 0x98, 0xa8, 0x7f, 0x50, 0x6c, 0x57,
	0x72, 0x9b, 0x43, 0x4f, 0x2b, 0x6a, 0xcc, 0xb2, 0xa5, 0x76, 0x19, 0xee, 0xd2, 0x85, 0x50, 0xf4,
	0x98, 0xbc, 0x49, 0x2f, 0x79, 0x8d, 0x5e, 0x0c, 0xf4, 0x12, 0xe4, 0x01, 0x84, 0xc2, 0x47, 0x9d,
	0xfb, 0x00, 0xc5, 0x2e, 0xa5, 0x68, 0x4d, 0xcb, 0x39, 0xf4, 0xb6, 0xf3, 0xed, 0xcc, 0x37, 0xb3,
	0x33, 0xdf, 0x90, 0xa8, 0x3a, 0x66, 0xa3, 0x24, 0x04, 0x3b, 0x8a, 0x99, 0x60, 0xb8, 0x32, 0x0a,
	0x88, 0x4f, 0x19, 0x17, 0x81, 0xc7, 0xeb, 0xf7, 0x7c, 0xc6, 0xfc, 0x10, 0x1c, 0x12, 0x05, 0x0e,
	0xa1, 0x94, 0x09, 0x22, 0x02, 0x46, 0x79, 0xea, 0x5a, 0xef, 0xfa, 0x81, 0xf8, 0x39, 0x19, 0xda,
	0x1e, 0x1b, 0x3b, 0x11, 0x50, 0x4e, 0xe8, 0x88, 0x39, 0xfc, 0x37, 0xe7, 0x0c, 0x68, 0xe0, 0x81,
	0x93, 0x88, 0x20, 0xe4, 0x32, 0xd4, 0x07, 0xaa, 0x47, 0x3b, 0x01, 0xf5, 0xc2, 0x64, 0x04, 0x0b,
	0x9a, 0x8e, 0x46, 0xe3, 0x33, 0x9f, 0x39, 0x0a, 0x1e, 0x26, 0xa7, 0xca, 0x52, 0x86, 0x3a, 0xcd,
	0xdd, 0x3f, 0xbc, 0x26, 0xab, 0xac, 0x71, 0x0c, 0x82, 0xa4, 0x6e, 0xad, 0xbf, 0xf3, 0x08, 0x3f,
	0x5d, 0x3e, 0xa5, 0x0f, 0x2f, 0x12, 0xe0, 0x02, 0x3f, 0x44, 0xc6, 0x89, 0x65, 0x34, 0x8d, 0x76,
	0x65, 0xff, 0x86, 0x4d, 0xa2, 0xc0, 0x3e, 0x99, 0x44, 0xf0, 0x0c, 0x04, 0x71, 0xb7, 0xce, 0xa7,
	0x8d, 0xb5, 0x37, 0xd3, 0x86, 0x31, 0x9b, 0x36, 0x4a, 0x7b, 0x01, 0x0d, 0x03, 0x0a, 0xfd, 0xc5,
	0x01, 0x7f, 0x85, 0x8c, 0x23, 0x2b, 0xa7, 0xe2, 0x36, 0x55, 0xdc, 0xd1, 0xf0, 0x17, 0xf0, 0x84,
	0x8a, 0xac, 0x6b, 0x91, 0x37, 0x65, 0x09, 0x7b, 0x6c, 0x1c, 0x08, 0x18, 0x47, 0x62, 0xd2, 0xcf,
	0xd8, 0xf8, 0x53, 0x54, 0xf8, 0x3e, 0x81, 0x78, 0x62, 0xe5, 0x9b, 0x46, 0xbb, 0xec, 0xee, 0x9c,
	0xa7, 0x61, 0x9b, 0x2f, 0x24, 0xa8, 0xc5, 0x65, 0x01, 0xcc, 0x11, 0x3a, 0x26, 0x31, 0x19, 0x83,
	0x80, 0x98, 0x5b, 0xeb, 0xcd, 0x7c, 0xbb, 0xb2, 0xef, 0xd8, 0xda, 0xb0, 0xec, 0xab, 0xaf, 0xb5,
	0x97, 0x11, 0x5d, 0x2a, 0xe2, 0x89, 0x6b, 0xcd, 0xa6, 0x8d, 0xed, 0xe8, 0x1d, 0xa8, 0xe5, 0x5b,
	0x89, 0xd6, 0xbf, 0x44, 0x9b, 0x19, 0x0a, 0x6c, 0xa2, 0xfc, 0xaf, 0x30, 0x51, 0x2d, 0x2c, 0xf7,
	0xe5, 0x11, 0x6f, 0xa3, 0xc2, 0x19, 0x09, 0x13, 0x50, 0xed, 0x29, 0xf7, 0x53, 0xe3, 0x20, 0xf7,
	0xc8, 0x68, 0xed, 0xa1, 0xb2, 0x7a, 0xac, 0xec, 0x31, 0x2e, 0xa1, 0x7c, 0x8f, 0xf9, 0xe6, 0x1a,
	0xae, 0xa0, 0xd2, 0x71, 0xcc, 0x4e, 0x83, 0x10, 0x4c, 0x03, 0x97, 0x51, 0x61, 0x20, 0x88, 0xe0,
	0x66, 0xee, 0xa0, 0xfe, 0xf6, 0x65, 0xed, 0x0e, 0xaa, 0x38, 0xbf, 0x1f, 0xd9, 0x27, 0x40, 0x09,
	0x15, 0x7f, 0xe0, 0x52, 0x2a, 0x4d, 0xde, 0x02, 0xb4, 0x75, 0xe9, 0x79, 0x3c, 0x62, 0x94, 0x03,
	0x3e, 0x44, 0xc5, 0x74, 0x0e, 0xf3, 0x91, 0x6e, 0xa8, 0xd1, 0x3c, 0xa6, 0x13, 0xf7, 0xfe, 0xbc,
	0xb1, 0xb7, 0xb5, 0x0e, 0x69, 0xcf, 0x5d, 0x0d, 0xb7, 0xfe, 0xca, 0xa1, 0xe2, 0x33, 0x95, 0xf2,
	0x7f, 0x0b, 0xe5, 0x9b, 0xf7, 0x08, 0xe5, 0xae, 0x16, 0xb9, 0xa9, 0x84, 0xd1, 0xd4, 0x26, 0x9e,
	0x01, 0xf0, 0x11, 0x5a, 0x1f, 0x44, 0xe0, 0x29, 0xa5, 0x54, 0xf6, 0x77, 0x2e, 0xcd, 0x3a, 0x2d,
	0x52, 0x5e, 0x2b, 0x09, 0xad, 0x49, 0x42, 0x1e, 0x81, 0x77, 0x89, 0x30, 0x03, 0xe0, 0xe7, 0xa8,
	0x28, 0x7b, 0x9d, 0x48, 0xf9, 0x48, 0xca, 0xda, 0x2a, 0x4a, 0xe5, 0xe0, 0xd6, 0xe6, 0xa4, 0xb7,
	0xb8, 0xb2, 0x75, 0xda, 0xab, 0xd0, 0xc1, 0x8d, 0xb7, 0x2f, 0x6b, 0xe5, 0xe5, 0xb0, 0xfe, 0xcc,
	0x21, 0xb4, 0x2c, 0x10, 0x0f, 0xd1, 0x46, 0x8f, 0xf9, 0x3d, 0x38, 0x83, 0x30, 0x95, 0x8d, 0xfb,
	0xf9, 0xeb, 0x57, 0xb5, 0xe6, 0x40, 0xc4, 0x5d, 0x9a, 0x8c, 0xdb, 0x4b, 0x4f, 0xbb, 0xc7, 0x7c,
	0x3f, 0xa0, 0xa9, 0xeb, 0xc7, 0xb3, 0x69, 0x63, 0x2b, 0x64, 0x7e, 0x27, 0x94, 0x96, 0x36, 0xba,
	0x55, 0x20, 0xfe, 0x1a, 0x55, 0xba, 0x94, 0x0c, 0x43, 0x38, 0x89, 0x89, 0x97, 0x2a, 0x71, 0xc3,
	0xad, 0xcf, 0xa6, 0x8d, 0x3b, 0xa0, 0xe0, 0x8e, 0x90, 0xb8, 0xc6, 0x72, 0x0d, 0x8e, 0x3f, 0x41,
	0xeb, 0x8f, 0x63, 0x9f, 0x5b, 0xf9, 0x66, 0xbe, 0x5d, 0x76, 0xb1, 0xdc, 0x68, 0x12, 0xfb, 0xba,
	0x74, 0x32, 0x76, 0xeb, 0x11, 0xaa, 0xea, 0x75, 0xe3, 0x0d, 0xb4, 0xfe, 0x2d, 0x3d, 0x65, 0xe6,
	0x9a, 0x3c, 0x3d, 0x27, 0x31, 0x4d, 0x55, 0xde, 0x8d, 0x63, 0x16, 0x9b, 0x39, 0x79, 0x7c, 0x0a,
	0xc3, 0xc4, 0x37, 0xf3, 0xad, 0x7f, 0xd7, 0x51, 0x55, 0xef, 0xba, 0x4c, 0x7e, 0xc8, 0x46, 0x30,
	0xef, 0x92, 0x4a, 0x4e, 0xd9, 0x48, 0x2f, 0x3b, 0x63, 0xe3, 0x87, 0x0b, 0xbd, 0xa6, 0xcb, 0xe7,
	0x6e, 0xcf, 0xa6, 0x0d, 0x33, 0x9d, 0x83, 0x16, 0x75, 0x05, 0x91, 0x33, 0x79, 0x42, 0x04, 0xf8,
	0xec, 0xdd, 0x97, 0xe8, 0x8b, 0xd7, 0xaf, 0x6a, 0xad, 0xcc, 0x4c, 0x54, 0x55, 0xf6, 0xc2, 0x51,
	0x2e, 0x80, 0x9c, 0x0a, 0xf6, 0xe6, 0x80, 0x96, 0x61, 0x05, 0x86, 0x7f, 0x40, 0xe5, 0x1e, 0xe1,
	0x62, 0x20, 0x48, 0x2c, 0xe6, 0x8a, 0xbb, 0x99, 0x6e, 0x52, 0x30, 0x06, 0x2e, 0xc8, 0x38, 0x72,
	0xef, 0xcd, 0xb7, 0x74, 0x3b, 0x24, 0x5c, 0x74, 0xb8, 0xf4, 0xd4, 0xbf, 0x49, 0xab, 0x50, 0xfc,
	0x1d, 0xaa, 0xf6, 0x41, 0x81, 0x4f, 0x58, 0x42, 0x85, 0x55, 0x68, 0x1a, 0xed, 0x82, 0x7b, 0x77,
	0x36, 0x6d, 0xec, 0xc4, 0x29, 0xde, 0xf1, 0xe4, 0x85, 0x46, 0x74, 0xdd, 0x05, 0xfe, 0x09, 0xdd,
	0x92, 0x25, 0xce, 0xf9, 0xfa, 0x40, 0x38, 0xa3, 0x56, 0x51, 0xf5, 0xe3, 0x83, 0xd9, 0xb4, 0x71,
	0x5f, 0x15, 0xb0, 0x08, 0x8e, 0xd5, 0xb5, 0x46, 0xfb, 0xfe, 0x6b, 0xfc, 0x19, 0x2a, 0x0d, 0x20,
	0x3e, 0x0b, 0x3c, 0xb0, 0x4a, 0x8a, 0xf2, 0xb6, 0x5a, 0xa8, 0x14, 0xda, 0xd3, 0x17, 0x2a, 0x0b,
	0xe1, 0x07, 0xa8, 0x70, 0xcc, 0x62, 0xc1, 0xad, 0x8d, 0x66, 0xbe, 0x5d, 0x70, 0xb7, 0xe4, 0x7a,
	0x47, 0x12, 0xd0, 0xff, 0x10, 0x19, 0xa0, 0xf5, 0x11, 0xaa, 0xea, 0xa3, 0xc2, 0x08, 0x15, 0x7f,
	0x54, 0x7f, 0x62, 0x73, 0x4d, 0x9e, 0x0f, 0x49, 0x14, 0x02, 0x37, 0x0d, 0xb7, 0x7a, 0x7e, 0xb1,
	0x6b, 0xbc, 0xb9, 0xd8, 0x35, 0xfe, 0xb9, 0xd8, 0x35, 0x8e, 0x8d, 0x61, 0x51, 0xfd, 0x30, 0x1f,
	0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x9f, 0x83, 0x13, 0x08, 0x08, 0x00, 0x00,
}
