// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package diagnostics is a auto generated package.
Input file: svc_diagnostics.proto
*/
package diagnostics

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerDiagnosticsV1 struct {
	Endpoints EndpointsDiagnosticsV1Server

	AutoAddModuleHdlr    grpctransport.Handler
	AutoDeleteModuleHdlr grpctransport.Handler
	AutoGetModuleHdlr    grpctransport.Handler
	AutoLabelModuleHdlr  grpctransport.Handler
	AutoListModuleHdlr   grpctransport.Handler
	AutoUpdateModuleHdlr grpctransport.Handler
	DebugHdlr            grpctransport.Handler
}

// MakeGRPCServerDiagnosticsV1 creates a GRPC server for DiagnosticsV1 service
func MakeGRPCServerDiagnosticsV1(ctx context.Context, endpoints EndpointsDiagnosticsV1Server, logger log.Logger) DiagnosticsV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerDiagnosticsV1{
		Endpoints: endpoints,
		AutoAddModuleHdlr: grpctransport.NewServer(
			endpoints.AutoAddModuleEndpoint,
			DecodeGrpcReqModule,
			EncodeGrpcRespModule,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddModule", logger)))...,
		),

		AutoDeleteModuleHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteModuleEndpoint,
			DecodeGrpcReqModule,
			EncodeGrpcRespModule,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteModule", logger)))...,
		),

		AutoGetModuleHdlr: grpctransport.NewServer(
			endpoints.AutoGetModuleEndpoint,
			DecodeGrpcReqModule,
			EncodeGrpcRespModule,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetModule", logger)))...,
		),

		AutoLabelModuleHdlr: grpctransport.NewServer(
			endpoints.AutoLabelModuleEndpoint,
			DecodeGrpcReqLabel,
			EncodeGrpcRespModule,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoLabelModule", logger)))...,
		),

		AutoListModuleHdlr: grpctransport.NewServer(
			endpoints.AutoListModuleEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespModuleList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListModule", logger)))...,
		),

		AutoUpdateModuleHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateModuleEndpoint,
			DecodeGrpcReqModule,
			EncodeGrpcRespModule,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateModule", logger)))...,
		),

		DebugHdlr: grpctransport.NewServer(
			endpoints.DebugEndpoint,
			DecodeGrpcReqDiagnosticsRequest,
			EncodeGrpcRespDiagnosticsResponse,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("Debug", logger)))...,
		),
	}
}

func (s *grpcServerDiagnosticsV1) AutoAddModule(ctx oldcontext.Context, req *Module) (*Module, error) {
	_, resp, err := s.AutoAddModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoAddModule).V
	return &r, resp.(respDiagnosticsV1AutoAddModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoAddModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Module
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoDeleteModule(ctx oldcontext.Context, req *Module) (*Module, error) {
	_, resp, err := s.AutoDeleteModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoDeleteModule).V
	return &r, resp.(respDiagnosticsV1AutoDeleteModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoDeleteModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Module
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoGetModule(ctx oldcontext.Context, req *Module) (*Module, error) {
	_, resp, err := s.AutoGetModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoGetModule).V
	return &r, resp.(respDiagnosticsV1AutoGetModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoGetModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Module
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoLabelModule(ctx oldcontext.Context, req *api.Label) (*Module, error) {
	_, resp, err := s.AutoLabelModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoLabelModule).V
	return &r, resp.(respDiagnosticsV1AutoLabelModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoLabelModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Module
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoListModule(ctx oldcontext.Context, req *api.ListWatchOptions) (*ModuleList, error) {
	_, resp, err := s.AutoListModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoListModule).V
	return &r, resp.(respDiagnosticsV1AutoListModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoListModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp ModuleList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoUpdateModule(ctx oldcontext.Context, req *Module) (*Module, error) {
	_, resp, err := s.AutoUpdateModuleHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1AutoUpdateModule).V
	return &r, resp.(respDiagnosticsV1AutoUpdateModule).Err
}

func decodeHTTPrespDiagnosticsV1AutoUpdateModule(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Module
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) Debug(ctx oldcontext.Context, req *DiagnosticsRequest) (*DiagnosticsResponse, error) {
	_, resp, err := s.DebugHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respDiagnosticsV1Debug).V
	return &r, resp.(respDiagnosticsV1Debug).Err
}

func decodeHTTPrespDiagnosticsV1Debug(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp DiagnosticsResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerDiagnosticsV1) AutoWatchSvcDiagnosticsV1(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchSvcDiagnosticsV1Server) error {
	return s.Endpoints.AutoWatchSvcDiagnosticsV1(in, stream)
}

func (s *grpcServerDiagnosticsV1) AutoWatchModule(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchModuleServer) error {
	return s.Endpoints.AutoWatchModule(in, stream)
}

func encodeHTTPModuleList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPModuleList(_ context.Context, r *http.Request) (interface{}, error) {
	var req ModuleList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqModuleList encodes GRPC request
func EncodeGrpcReqModuleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleList)
	return req, nil
}

// DecodeGrpcReqModuleList decodes GRPC request
func DecodeGrpcReqModuleList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ModuleList)
	return req, nil
}

// EncodeGrpcRespModuleList endodes the GRPC response
func EncodeGrpcRespModuleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespModuleList decodes the GRPC response
func DecodeGrpcRespModuleList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
