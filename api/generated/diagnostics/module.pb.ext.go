// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package diagnostics is a auto generated package.
Input file: module.proto
*/
package diagnostics

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// DiagnosticsRequest_QueryType_normal is a map of normalized values for the enum
var DiagnosticsRequest_QueryType_normal = map[string]string{
	"log":     "log",
	"profile": "profile",
	"stats":   "stats",
}

var DiagnosticsRequest_QueryType_vname = map[int32]string{
	0: "log",
	1: "profile",
	2: "stats",
}

var DiagnosticsRequest_QueryType_vvalue = map[string]int32{
	"log":     0,
	"profile": 1,
	"stats":   2,
}

func (x DiagnosticsRequest_QueryType) String() string {
	return DiagnosticsRequest_QueryType_vname[int32(x)]
}

// ModuleSpec_LoggingLevel_normal is a map of normalized values for the enum
var ModuleSpec_LoggingLevel_normal = map[string]string{
	"debug": "debug",
	"error": "error",
	"info":  "info",
	"warn":  "warn",
}

var ModuleSpec_LoggingLevel_vname = map[int32]string{
	0: "info",
	1: "warn",
	2: "error",
	3: "debug",
}

var ModuleSpec_LoggingLevel_vvalue = map[string]int32{
	"info":  0,
	"warn":  1,
	"error": 2,
	"debug": 3,
}

func (x ModuleSpec_LoggingLevel) String() string {
	return ModuleSpec_LoggingLevel_vname[int32(x)]
}

// ModuleStatus_CategoryType_normal is a map of normalized values for the enum
var ModuleStatus_CategoryType_normal = map[string]string{
	"naples": "naples",
	"venice": "venice",
}

var ModuleStatus_CategoryType_vname = map[int32]string{
	0: "venice",
	1: "naples",
}

var ModuleStatus_CategoryType_vvalue = map[string]int32{
	"venice": 0,
	"naples": 1,
}

func (x ModuleStatus_CategoryType) String() string {
	return ModuleStatus_CategoryType_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapModule = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *DiagnosticsRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "modules/", m.Tenant, "/", m.Name)
}

func (m *DiagnosticsRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/modules/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *Module) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "modules/", m.Name)
}

func (m *Module) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/modules/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *DiagnosticsRequest) Clone(into interface{}) (interface{}, error) {
	var out *DiagnosticsRequest
	var ok bool
	if into == nil {
		out = &DiagnosticsRequest{}
	} else {
		out, ok = into.(*DiagnosticsRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*DiagnosticsRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *DiagnosticsRequest) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *DiagnosticsResponse) Clone(into interface{}) (interface{}, error) {
	var out *DiagnosticsResponse
	var ok bool
	if into == nil {
		out = &DiagnosticsResponse{}
	} else {
		out, ok = into.(*DiagnosticsResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*DiagnosticsResponse))
	return out, nil
}

// Default sets up the defaults for the object
func (m *DiagnosticsResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *Module) Clone(into interface{}) (interface{}, error) {
	var out *Module
	var ok bool
	if into == nil {
		out = &Module{}
	} else {
		out, ok = into.(*Module)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*Module))
	return out, nil
}

// Default sets up the defaults for the object
func (m *Module) Defaults(ver string) bool {
	var ret bool
	m.Kind = "Module"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ModuleSpec) Clone(into interface{}) (interface{}, error) {
	var out *ModuleSpec
	var ok bool
	if into == nil {
		out = &ModuleSpec{}
	} else {
		out, ok = into.(*ModuleSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ModuleSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ModuleSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.LogLevel = "info"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ModuleStatus) Clone(into interface{}) (interface{}, error) {
	var out *ModuleStatus
	var ok bool
	if into == nil {
		out = &ModuleStatus{}
	} else {
		out, ok = into.(*ModuleStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ModuleStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ModuleStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Category = "venice"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ServicePort) Clone(into interface{}) (interface{}, error) {
	var out *ServicePort
	var ok bool
	if into == nil {
		out = &ServicePort{}
	} else {
		out, ok = into.(*ServicePort)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ServicePort))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ServicePort) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *DiagnosticsRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *DiagnosticsRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *DiagnosticsRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

func (m *DiagnosticsResponse) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *DiagnosticsResponse) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *DiagnosticsResponse) Normalize() {

}

func (m *Module) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *Module) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for Module"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for Module"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *Module) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *ModuleSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ModuleSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapModule["ModuleSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapModule["ModuleSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ModuleSpec) Normalize() {

	m.LogLevel = ModuleSpec_LoggingLevel_normal[strings.ToLower(m.LogLevel)]

}

func (m *ModuleStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ModuleStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapModule["ModuleStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapModule["ModuleStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ModuleStatus) Normalize() {

	m.Category = ModuleStatus_CategoryType_normal[strings.ToLower(m.Category)]

}

func (m *ServicePort) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ServicePort) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *ServicePort) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&DiagnosticsRequest{},
		&Module{},
	)

	validatorMapModule = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapModule["ModuleSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapModule["ModuleSpec"]["all"] = append(validatorMapModule["ModuleSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*ModuleSpec)

		if _, ok := ModuleSpec_LoggingLevel_vvalue[m.LogLevel]; !ok {
			vals := []string{}
			for k1, _ := range ModuleSpec_LoggingLevel_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"LogLevel", vals)
		}
		return nil
	})

	validatorMapModule["ModuleStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapModule["ModuleStatus"]["all"] = append(validatorMapModule["ModuleStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*ModuleStatus)

		if _, ok := ModuleStatus_CategoryType_vvalue[m.Category]; !ok {
			vals := []string{}
			for k1, _ := range ModuleStatus_CategoryType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Category", vals)
		}
		return nil
	})

}
