// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package diagnostics is a auto generated package.
Input file: svc_diagnostics.proto
*/
package diagnostics

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareDiagnosticsV1Client add middleware to the client
type MiddlewareDiagnosticsV1Client func(ServiceDiagnosticsV1Client) ServiceDiagnosticsV1Client

// EndpointsDiagnosticsV1Client is the endpoints for the client
type EndpointsDiagnosticsV1Client struct {
	Client                            DiagnosticsV1Client
	AutoWatchSvcDiagnosticsV1Endpoint endpoint.Endpoint

	AutoAddModuleEndpoint    endpoint.Endpoint
	AutoDeleteModuleEndpoint endpoint.Endpoint
	AutoGetModuleEndpoint    endpoint.Endpoint
	AutoLabelModuleEndpoint  endpoint.Endpoint
	AutoListModuleEndpoint   endpoint.Endpoint
	AutoUpdateModuleEndpoint endpoint.Endpoint
	DebugEndpoint            endpoint.Endpoint
}

// EndpointsDiagnosticsV1RestClient is the REST client
type EndpointsDiagnosticsV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddModuleEndpoint             endpoint.Endpoint
	AutoDeleteModuleEndpoint          endpoint.Endpoint
	AutoGetModuleEndpoint             endpoint.Endpoint
	AutoLabelModuleEndpoint           endpoint.Endpoint
	AutoListModuleEndpoint            endpoint.Endpoint
	AutoUpdateModuleEndpoint          endpoint.Endpoint
	AutoWatchModuleEndpoint           endpoint.Endpoint
	AutoWatchSvcDiagnosticsV1Endpoint endpoint.Endpoint
	DebugEndpoint                     endpoint.Endpoint
}

// MiddlewareDiagnosticsV1Server adds middle ware to the server
type MiddlewareDiagnosticsV1Server func(ServiceDiagnosticsV1Server) ServiceDiagnosticsV1Server

// EndpointsDiagnosticsV1Server is the server endpoints
type EndpointsDiagnosticsV1Server struct {
	svcWatchHandlerDiagnosticsV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddModuleEndpoint    endpoint.Endpoint
	AutoDeleteModuleEndpoint endpoint.Endpoint
	AutoGetModuleEndpoint    endpoint.Endpoint
	AutoLabelModuleEndpoint  endpoint.Endpoint
	AutoListModuleEndpoint   endpoint.Endpoint
	AutoUpdateModuleEndpoint endpoint.Endpoint
	DebugEndpoint            endpoint.Endpoint

	watchHandlerModule func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddModule is endpoint for AutoAddModule
func (e EndpointsDiagnosticsV1Client) AutoAddModule(ctx context.Context, in *Module) (*Module, error) {
	resp, err := e.AutoAddModuleEndpoint(ctx, in)
	if err != nil {
		return &Module{}, err
	}
	return resp.(*Module), nil
}

type respDiagnosticsV1AutoAddModule struct {
	V   Module
	Err error
}

// AutoDeleteModule is endpoint for AutoDeleteModule
func (e EndpointsDiagnosticsV1Client) AutoDeleteModule(ctx context.Context, in *Module) (*Module, error) {
	resp, err := e.AutoDeleteModuleEndpoint(ctx, in)
	if err != nil {
		return &Module{}, err
	}
	return resp.(*Module), nil
}

type respDiagnosticsV1AutoDeleteModule struct {
	V   Module
	Err error
}

// AutoGetModule is endpoint for AutoGetModule
func (e EndpointsDiagnosticsV1Client) AutoGetModule(ctx context.Context, in *Module) (*Module, error) {
	resp, err := e.AutoGetModuleEndpoint(ctx, in)
	if err != nil {
		return &Module{}, err
	}
	return resp.(*Module), nil
}

type respDiagnosticsV1AutoGetModule struct {
	V   Module
	Err error
}

// AutoLabelModule is endpoint for AutoLabelModule
func (e EndpointsDiagnosticsV1Client) AutoLabelModule(ctx context.Context, in *api.Label) (*Module, error) {
	resp, err := e.AutoLabelModuleEndpoint(ctx, in)
	if err != nil {
		return &Module{}, err
	}
	return resp.(*Module), nil
}

type respDiagnosticsV1AutoLabelModule struct {
	V   Module
	Err error
}

// AutoListModule is endpoint for AutoListModule
func (e EndpointsDiagnosticsV1Client) AutoListModule(ctx context.Context, in *api.ListWatchOptions) (*ModuleList, error) {
	resp, err := e.AutoListModuleEndpoint(ctx, in)
	if err != nil {
		return &ModuleList{}, err
	}
	return resp.(*ModuleList), nil
}

type respDiagnosticsV1AutoListModule struct {
	V   ModuleList
	Err error
}

// AutoUpdateModule is endpoint for AutoUpdateModule
func (e EndpointsDiagnosticsV1Client) AutoUpdateModule(ctx context.Context, in *Module) (*Module, error) {
	resp, err := e.AutoUpdateModuleEndpoint(ctx, in)
	if err != nil {
		return &Module{}, err
	}
	return resp.(*Module), nil
}

type respDiagnosticsV1AutoUpdateModule struct {
	V   Module
	Err error
}

// Debug is endpoint for Debug
func (e EndpointsDiagnosticsV1Client) Debug(ctx context.Context, in *DiagnosticsRequest) (*DiagnosticsResponse, error) {
	resp, err := e.DebugEndpoint(ctx, in)
	if err != nil {
		return &DiagnosticsResponse{}, err
	}
	return resp.(*DiagnosticsResponse), nil
}

type respDiagnosticsV1Debug struct {
	V   DiagnosticsResponse
	Err error
}

func (e EndpointsDiagnosticsV1Client) AutoWatchSvcDiagnosticsV1(ctx context.Context, in *api.ListWatchOptions) (DiagnosticsV1_AutoWatchSvcDiagnosticsV1Client, error) {
	return e.Client.AutoWatchSvcDiagnosticsV1(ctx, in)
}

// AutoWatchModule performs Watch for Module
func (e EndpointsDiagnosticsV1Client) AutoWatchModule(ctx context.Context, in *api.ListWatchOptions) (DiagnosticsV1_AutoWatchModuleClient, error) {
	return e.Client.AutoWatchModule(ctx, in)
}

// AutoAddModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoAddModule(ctx context.Context, in Module) (Module, error) {
	resp, err := e.AutoAddModuleEndpoint(ctx, in)
	if err != nil {
		return Module{}, err
	}
	return *resp.(*Module), nil
}

// MakeDiagnosticsV1AutoAddModuleEndpoint creates  AutoAddModule endpoints for the service
func MakeDiagnosticsV1AutoAddModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Module)
		v, err := s.AutoAddModule(ctx, *req)
		return respDiagnosticsV1AutoAddModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoAddModule")(f)
}

// AutoDeleteModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoDeleteModule(ctx context.Context, in Module) (Module, error) {
	resp, err := e.AutoDeleteModuleEndpoint(ctx, in)
	if err != nil {
		return Module{}, err
	}
	return *resp.(*Module), nil
}

// MakeDiagnosticsV1AutoDeleteModuleEndpoint creates  AutoDeleteModule endpoints for the service
func MakeDiagnosticsV1AutoDeleteModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Module)
		v, err := s.AutoDeleteModule(ctx, *req)
		return respDiagnosticsV1AutoDeleteModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoDeleteModule")(f)
}

// AutoGetModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoGetModule(ctx context.Context, in Module) (Module, error) {
	resp, err := e.AutoGetModuleEndpoint(ctx, in)
	if err != nil {
		return Module{}, err
	}
	return *resp.(*Module), nil
}

// MakeDiagnosticsV1AutoGetModuleEndpoint creates  AutoGetModule endpoints for the service
func MakeDiagnosticsV1AutoGetModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Module)
		v, err := s.AutoGetModule(ctx, *req)
		return respDiagnosticsV1AutoGetModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoGetModule")(f)
}

// AutoLabelModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoLabelModule(ctx context.Context, in api.Label) (Module, error) {
	resp, err := e.AutoLabelModuleEndpoint(ctx, in)
	if err != nil {
		return Module{}, err
	}
	return *resp.(*Module), nil
}

// MakeDiagnosticsV1AutoLabelModuleEndpoint creates  AutoLabelModule endpoints for the service
func MakeDiagnosticsV1AutoLabelModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelModule(ctx, *req)
		return respDiagnosticsV1AutoLabelModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoLabelModule")(f)
}

// AutoListModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoListModule(ctx context.Context, in api.ListWatchOptions) (ModuleList, error) {
	resp, err := e.AutoListModuleEndpoint(ctx, in)
	if err != nil {
		return ModuleList{}, err
	}
	return *resp.(*ModuleList), nil
}

// MakeDiagnosticsV1AutoListModuleEndpoint creates  AutoListModule endpoints for the service
func MakeDiagnosticsV1AutoListModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListModule(ctx, *req)
		return respDiagnosticsV1AutoListModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoListModule")(f)
}

// AutoUpdateModule implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) AutoUpdateModule(ctx context.Context, in Module) (Module, error) {
	resp, err := e.AutoUpdateModuleEndpoint(ctx, in)
	if err != nil {
		return Module{}, err
	}
	return *resp.(*Module), nil
}

// MakeDiagnosticsV1AutoUpdateModuleEndpoint creates  AutoUpdateModule endpoints for the service
func MakeDiagnosticsV1AutoUpdateModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Module)
		v, err := s.AutoUpdateModule(ctx, *req)
		return respDiagnosticsV1AutoUpdateModule{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:AutoUpdateModule")(f)
}

// Debug implementation on server Endpoint
func (e EndpointsDiagnosticsV1Server) Debug(ctx context.Context, in DiagnosticsRequest) (DiagnosticsResponse, error) {
	resp, err := e.DebugEndpoint(ctx, in)
	if err != nil {
		return DiagnosticsResponse{}, err
	}
	return *resp.(*DiagnosticsResponse), nil
}

// MakeDiagnosticsV1DebugEndpoint creates  Debug endpoints for the service
func MakeDiagnosticsV1DebugEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*DiagnosticsRequest)
		v, err := s.Debug(ctx, *req)
		return respDiagnosticsV1Debug{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("DiagnosticsV1:Debug")(f)
}

func (e EndpointsDiagnosticsV1Server) AutoWatchSvcDiagnosticsV1(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchSvcDiagnosticsV1Server) error {
	return e.svcWatchHandlerDiagnosticsV1(in, stream)
}

// MakeAutoWatchSvcDiagnosticsV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcDiagnosticsV1Endpoint(s ServiceDiagnosticsV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(DiagnosticsV1_AutoWatchSvcDiagnosticsV1Server)
		return s.AutoWatchSvcDiagnosticsV1(options, wstream)
	}
}

// AutoWatchModule is the watch handler for Module on the server side.
func (e EndpointsDiagnosticsV1Server) AutoWatchModule(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchModuleServer) error {
	return e.watchHandlerModule(in, stream)
}

// MakeAutoWatchModuleEndpoint creates the Watch endpoint
func MakeAutoWatchModuleEndpoint(s ServiceDiagnosticsV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(DiagnosticsV1_AutoWatchModuleServer)
		return s.AutoWatchModule(options, wstream)
	}
}

// MakeDiagnosticsV1ServerEndpoints creates server endpoints
func MakeDiagnosticsV1ServerEndpoints(s ServiceDiagnosticsV1Server, logger log.Logger) EndpointsDiagnosticsV1Server {
	return EndpointsDiagnosticsV1Server{
		svcWatchHandlerDiagnosticsV1: MakeAutoWatchSvcDiagnosticsV1Endpoint(s, logger),

		AutoAddModuleEndpoint:    MakeDiagnosticsV1AutoAddModuleEndpoint(s, logger),
		AutoDeleteModuleEndpoint: MakeDiagnosticsV1AutoDeleteModuleEndpoint(s, logger),
		AutoGetModuleEndpoint:    MakeDiagnosticsV1AutoGetModuleEndpoint(s, logger),
		AutoLabelModuleEndpoint:  MakeDiagnosticsV1AutoLabelModuleEndpoint(s, logger),
		AutoListModuleEndpoint:   MakeDiagnosticsV1AutoListModuleEndpoint(s, logger),
		AutoUpdateModuleEndpoint: MakeDiagnosticsV1AutoUpdateModuleEndpoint(s, logger),
		DebugEndpoint:            MakeDiagnosticsV1DebugEndpoint(s, logger),

		watchHandlerModule: MakeAutoWatchModuleEndpoint(s, logger),
	}
}

// LoggingDiagnosticsV1MiddlewareClient adds middleware for the client
func LoggingDiagnosticsV1MiddlewareClient(logger log.Logger) MiddlewareDiagnosticsV1Client {
	return func(next ServiceDiagnosticsV1Client) ServiceDiagnosticsV1Client {
		return loggingDiagnosticsV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingDiagnosticsV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceDiagnosticsV1Client
}

// LoggingDiagnosticsV1MiddlewareServer adds middleware for the client
func LoggingDiagnosticsV1MiddlewareServer(logger log.Logger) MiddlewareDiagnosticsV1Server {
	return func(next ServiceDiagnosticsV1Server) ServiceDiagnosticsV1Server {
		return loggingDiagnosticsV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingDiagnosticsV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceDiagnosticsV1Server
}

func (m loggingDiagnosticsV1MiddlewareClient) AutoAddModule(ctx context.Context, in *Module) (resp *Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoAddModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) AutoDeleteModule(ctx context.Context, in *Module) (resp *Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoDeleteModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) AutoGetModule(ctx context.Context, in *Module) (resp *Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoGetModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) AutoLabelModule(ctx context.Context, in *api.Label) (resp *Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoLabelModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) AutoListModule(ctx context.Context, in *api.ListWatchOptions) (resp *ModuleList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoListModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) AutoUpdateModule(ctx context.Context, in *Module) (resp *Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoUpdateModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareClient) Debug(ctx context.Context, in *DiagnosticsRequest) (resp *DiagnosticsResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "Debug", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Debug(ctx, in)
	return
}

func (m loggingDiagnosticsV1MiddlewareClient) AutoWatchSvcDiagnosticsV1(ctx context.Context, in *api.ListWatchOptions) (resp DiagnosticsV1_AutoWatchSvcDiagnosticsV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoWatchSvcDiagnosticsV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcDiagnosticsV1(ctx, in)
	return
}

func (m loggingDiagnosticsV1MiddlewareClient) AutoWatchModule(ctx context.Context, in *api.ListWatchOptions) (resp DiagnosticsV1_AutoWatchModuleClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoWatchModule", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchModule(ctx, in)
	return
}

func (m loggingDiagnosticsV1MiddlewareServer) AutoAddModule(ctx context.Context, in Module) (resp Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoAddModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) AutoDeleteModule(ctx context.Context, in Module) (resp Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoDeleteModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) AutoGetModule(ctx context.Context, in Module) (resp Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoGetModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) AutoLabelModule(ctx context.Context, in api.Label) (resp Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoLabelModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) AutoListModule(ctx context.Context, in api.ListWatchOptions) (resp ModuleList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoListModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) AutoUpdateModule(ctx context.Context, in Module) (resp Module, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "AutoUpdateModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateModule(ctx, in)
	return
}
func (m loggingDiagnosticsV1MiddlewareServer) Debug(ctx context.Context, in DiagnosticsRequest) (resp DiagnosticsResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "DiagnosticsV1", "method", "Debug", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Debug(ctx, in)
	return
}

func (m loggingDiagnosticsV1MiddlewareServer) AutoWatchSvcDiagnosticsV1(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchSvcDiagnosticsV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "DiagnosticsV1", "method", "AutoWatchSvcDiagnosticsV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcDiagnosticsV1(in, stream)
	return
}

func (m loggingDiagnosticsV1MiddlewareServer) AutoWatchModule(in *api.ListWatchOptions, stream DiagnosticsV1_AutoWatchModuleServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "DiagnosticsV1", "method", "AutoWatchModule", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchModule(in, stream)
	return
}

func (r *EndpointsDiagnosticsV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsDiagnosticsV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIDiagnosticsV1AutoAddModuleCreateOper(in *Module) string {
	return ""

}

//
func makeURIDiagnosticsV1AutoDeleteModuleDeleteOper(in *Module) string {
	return ""

}

//
func makeURIDiagnosticsV1AutoGetModuleGetOper(in *Module) string {
	return fmt.Sprint("/configs/diagnostics/v1", "/modules/", in.Name)
}

//
func makeURIDiagnosticsV1AutoLabelModuleLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIDiagnosticsV1AutoListModuleListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/diagnostics/v1", "/modules")
}

//
func makeURIDiagnosticsV1AutoUpdateModuleUpdateOper(in *Module) string {
	return fmt.Sprint("/configs/diagnostics/v1", "/modules/", in.Name)
}

//
func makeURIDiagnosticsV1AutoWatchModuleWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/diagnostics/v1", "/watch/modules")
}

//
func makeURIDiagnosticsV1AutoWatchSvcDiagnosticsV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIDiagnosticsV1DebugCreateOper(in *DiagnosticsRequest) string {
	return fmt.Sprint("/configs/diagnostics/v1", "/modules/", in.Name, "/Debug")
}

// AutoAddModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoAddModule(ctx context.Context, in *Module) (*Module, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoUpdateModule(ctx context.Context, in *Module) (*Module, error) {
	path := makeURIDiagnosticsV1AutoUpdateModuleUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespDiagnosticsV1AutoUpdateModule(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Module), err
}

// AutoLabelModule label method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoLabelModule(ctx context.Context, in *api.Label) (*Module, error) {
	return nil, errors.New("not allowed")
}

// AutoGetModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoGetModule(ctx context.Context, in *Module) (*Module, error) {
	path := makeURIDiagnosticsV1AutoGetModuleGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespDiagnosticsV1AutoGetModule(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Module), err
}

// AutoDeleteModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoDeleteModule(ctx context.Context, in *Module) (*Module, error) {
	return nil, errors.New("not allowed")
}

// AutoListModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoListModule(ctx context.Context, options *api.ListWatchOptions) (*ModuleList, error) {
	path := makeURIDiagnosticsV1AutoListModuleListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespDiagnosticsV1AutoListModule(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ModuleList), err
}

// AutoWatchModule CRUD method for Module
func (r *EndpointsDiagnosticsV1RestClient) AutoWatchModule(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIDiagnosticsV1AutoWatchModuleWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgModuleWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsDiagnosticsV1RestClient) DebugModule(ctx context.Context, in *DiagnosticsRequest) (*DiagnosticsResponse, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIDiagnosticsV1DebugCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespDiagnosticsV1Debug(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*DiagnosticsResponse), err
}

// MakeDiagnosticsV1RestClientEndpoints make REST client endpoints
func MakeDiagnosticsV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsDiagnosticsV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsDiagnosticsV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeDiagnosticsV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeDiagnosticsV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsDiagnosticsV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsDiagnosticsV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
