// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_browser.proto

package browser

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BrowserV1 service

type BrowserV1Client interface {
	AutoWatchSvcBrowserV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BrowserV1_AutoWatchSvcBrowserV1Client, error)
	//
	Query(ctx context.Context, in *BrowseRequestList, opts ...grpc.CallOption) (*BrowseResponseList, error)
	//
	References(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error)
	//
	Referrers(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error)
}

type browserV1Client struct {
	cc *grpc.ClientConn
}

func NewBrowserV1Client(cc *grpc.ClientConn) BrowserV1Client {
	return &browserV1Client{cc}
}

func (c *browserV1Client) AutoWatchSvcBrowserV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (BrowserV1_AutoWatchSvcBrowserV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_BrowserV1_serviceDesc.Streams[0], c.cc, "/browser.BrowserV1/AutoWatchSvcBrowserV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &browserV1AutoWatchSvcBrowserV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrowserV1_AutoWatchSvcBrowserV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type browserV1AutoWatchSvcBrowserV1Client struct {
	grpc.ClientStream
}

func (x *browserV1AutoWatchSvcBrowserV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *browserV1Client) Query(ctx context.Context, in *BrowseRequestList, opts ...grpc.CallOption) (*BrowseResponseList, error) {
	out := new(BrowseResponseList)
	err := grpc.Invoke(ctx, "/browser.BrowserV1/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserV1Client) References(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error) {
	out := new(BrowseResponse)
	err := grpc.Invoke(ctx, "/browser.BrowserV1/References", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserV1Client) Referrers(ctx context.Context, in *BrowseRequest, opts ...grpc.CallOption) (*BrowseResponse, error) {
	out := new(BrowseResponse)
	err := grpc.Invoke(ctx, "/browser.BrowserV1/Referrers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrowserV1 service

type BrowserV1Server interface {
	AutoWatchSvcBrowserV1(*api.ListWatchOptions, BrowserV1_AutoWatchSvcBrowserV1Server) error
	//
	Query(context.Context, *BrowseRequestList) (*BrowseResponseList, error)
	//
	References(context.Context, *BrowseRequest) (*BrowseResponse, error)
	//
	Referrers(context.Context, *BrowseRequest) (*BrowseResponse, error)
}

func RegisterBrowserV1Server(s *grpc.Server, srv BrowserV1Server) {
	s.RegisterService(&_BrowserV1_serviceDesc, srv)
}

func _BrowserV1_AutoWatchSvcBrowserV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrowserV1Server).AutoWatchSvcBrowserV1(m, &browserV1AutoWatchSvcBrowserV1Server{stream})
}

type BrowserV1_AutoWatchSvcBrowserV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type browserV1AutoWatchSvcBrowserV1Server struct {
	grpc.ServerStream
}

func (x *browserV1AutoWatchSvcBrowserV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _BrowserV1_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserV1Server).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/browser.BrowserV1/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserV1Server).Query(ctx, req.(*BrowseRequestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserV1_References_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserV1Server).References(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/browser.BrowserV1/References",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserV1Server).References(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrowserV1_Referrers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserV1Server).Referrers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/browser.BrowserV1/Referrers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserV1Server).Referrers(ctx, req.(*BrowseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrowserV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "browser.BrowserV1",
	HandlerType: (*BrowserV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _BrowserV1_Query_Handler,
		},
		{
			MethodName: "References",
			Handler:    _BrowserV1_References_Handler,
		},
		{
			MethodName: "Referrers",
			Handler:    _BrowserV1_Referrers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcBrowserV1",
			Handler:       _BrowserV1_AutoWatchSvcBrowserV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_browser.proto",
}

func init() { proto.RegisterFile("svc_browser.proto", fileDescriptorSvcBrowser) }

var fileDescriptorSvcBrowser = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0xca, 0xd3, 0x40,
	0x14, 0x85, 0xff, 0xfc, 0xa5, 0xd5, 0x06, 0x94, 0x76, 0xa4, 0x4a, 0xa2, 0x46, 0x28, 0x74, 0x13,
	0x30, 0x63, 0x75, 0xe7, 0xce, 0x42, 0x77, 0x82, 0x5a, 0x41, 0x45, 0x41, 0x99, 0x4c, 0x6e, 0xa7,
	0x03, 0xed, 0x4c, 0x3a, 0x33, 0x49, 0xe9, 0xd6, 0xe6, 0x09, 0x74, 0xe7, 0xc2, 0x87, 0xe8, 0xca,
	0xa5, 0x4b, 0x97, 0x82, 0x2f, 0x20, 0xc1, 0x85, 0x8f, 0x21, 0x99, 0x26, 0x58, 0xd1, 0x6e, 0xdc,
	0xe5, 0x9c, 0x7b, 0xee, 0x77, 0x6e, 0x48, 0xdc, 0xbe, 0xce, 0xe9, 0x9b, 0x58, 0xc9, 0x8d, 0x06,
	0x15, 0xa5, 0x4a, 0x1a, 0x89, 0x2e, 0xd4, 0xd2, 0xbf, 0xc1, 0xa4, 0x64, 0x4b, 0xc0, 0x24, 0xe5,
	0x98, 0x08, 0x21, 0x0d, 0x31, 0x5c, 0x0a, 0x7d, 0x88, 0xf9, 0x53, 0xc6, 0xcd, 0x22, 0x8b, 0x23,
	0x2a, 0x57, 0x38, 0x05, 0xa1, 0x89, 0x48, 0x24, 0xd6, 0x1b, 0x9c, 0x83, 0xe0, 0x14, 0x70, 0x66,
	0xf8, 0x52, 0x57, 0xab, 0x0c, 0xc4, 0xf1, 0x36, 0xe6, 0x82, 0x2e, 0xb3, 0x04, 0x1a, 0xcc, 0xed,
	0x23, 0x0c, 0x93, 0x4c, 0x62, 0x6b, 0xc7, 0xd9, 0xdc, 0x2a, 0x2b, 0xec, 0x53, 0x1d, 0x1f, 0x9d,
	0x68, 0xad, 0x6e, 0x5c, 0x81, 0x21, 0x75, 0xec, 0xd2, 0x1f, 0xaf, 0x74, 0xf7, 0x63, 0xcb, 0xed,
	0x4e, 0x0e, 0xce, 0xb3, 0x31, 0x7a, 0xe1, 0x0e, 0x1e, 0x64, 0x46, 0x3e, 0x27, 0x86, 0x2e, 0x9e,
	0xe6, 0xf4, 0xf7, 0x60, 0x10, 0x91, 0x94, 0x47, 0x0f, 0xb9, 0x36, 0x76, 0xf6, 0x28, 0xb5, 0x17,
	0xfb, 0x57, 0xac, 0x6d, 0xad, 0x69, 0x0e, 0xc2, 0x54, 0x81, 0x61, 0x7f, 0x5f, 0x78, 0xed, 0x4d,
	0xe5, 0x7d, 0x2a, 0x3c, 0xe7, 0x73, 0xe1, 0x9d, 0xdd, 0x71, 0x10, 0x73, 0xdb, 0x4f, 0x32, 0x50,
	0x5b, 0xe4, 0x47, 0xcd, 0x01, 0x07, 0xfa, 0x0c, 0xd6, 0x19, 0x68, 0xbb, 0xe9, 0x5f, 0xff, 0x6b,
	0xa6, 0x53, 0x29, 0x34, 0x58, 0xec, 0x68, 0x5f, 0x78, 0x1d, 0xaa, 0x80, 0x18, 0x78, 0xfb, 0xed,
	0xc7, 0xfb, 0xf3, 0xc1, 0xb0, 0x83, 0xd7, 0x15, 0xf2, 0xbe, 0x13, 0xbe, 0xbc, 0x88, 0x6a, 0x81,
	0x5e, 0xbb, 0xee, 0x0c, 0xe6, 0xa0, 0x40, 0x50, 0xd0, 0xe8, 0xea, 0xbf, 0xdb, 0xfc, 0x6b, 0x27,
	0x9a, 0x86, 0xb7, 0xf6, 0x85, 0xd7, 0x62, 0x60, 0x6c, 0x05, 0x42, 0x3d, 0x9c, 0x40, 0x0a, 0x22,
	0x01, 0x41, 0x39, 0x68, 0x1c, 0x86, 0xe8, 0x95, 0xdb, 0xb5, 0x7c, 0x05, 0xea, 0x3f, 0xf0, 0x37,
	0x8f, 0xf1, 0x3d, 0x74, 0xb9, 0xc1, 0x27, 0xf1, 0x16, 0x87, 0xa1, 0xdf, 0x7f, 0xb7, 0xf3, 0xce,
	0xf3, 0xf1, 0x87, 0x9d, 0xd7, 0xfc, 0x6a, 0x93, 0xde, 0x97, 0x32, 0x70, 0xbe, 0x96, 0x81, 0xf3,
	0xbd, 0x0c, 0x9c, 0x9f, 0x65, 0x70, 0xf6, 0xd8, 0x89, 0x3b, 0xf6, 0xdb, 0xdd, 0xfb, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0xd5, 0x09, 0xd2, 0xa3, 0x02, 0x00, 0x00,
}
