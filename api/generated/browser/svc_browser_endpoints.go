// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package browser is a auto generated package.
Input file: svc_browser.proto
*/
package browser

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareBrowserV1Client add middleware to the client
type MiddlewareBrowserV1Client func(ServiceBrowserV1Client) ServiceBrowserV1Client

// EndpointsBrowserV1Client is the endpoints for the client
type EndpointsBrowserV1Client struct {
	Client                        BrowserV1Client
	AutoWatchSvcBrowserV1Endpoint endpoint.Endpoint

	QueryEndpoint      endpoint.Endpoint
	ReferencesEndpoint endpoint.Endpoint
	ReferrersEndpoint  endpoint.Endpoint
}

// EndpointsBrowserV1RestClient is the REST client
type EndpointsBrowserV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoWatchSvcBrowserV1Endpoint endpoint.Endpoint
	QueryEndpoint                 endpoint.Endpoint
	ReferencesEndpoint            endpoint.Endpoint
	ReferrersEndpoint             endpoint.Endpoint
}

// MiddlewareBrowserV1Server adds middle ware to the server
type MiddlewareBrowserV1Server func(ServiceBrowserV1Server) ServiceBrowserV1Server

// EndpointsBrowserV1Server is the server endpoints
type EndpointsBrowserV1Server struct {
	svcWatchHandlerBrowserV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	QueryEndpoint      endpoint.Endpoint
	ReferencesEndpoint endpoint.Endpoint
	ReferrersEndpoint  endpoint.Endpoint
}

// Query is endpoint for Query
func (e EndpointsBrowserV1Client) Query(ctx context.Context, in *BrowseRequestList) (*BrowseResponseList, error) {
	resp, err := e.QueryEndpoint(ctx, in)
	if err != nil {
		return &BrowseResponseList{}, err
	}
	return resp.(*BrowseResponseList), nil
}

type respBrowserV1Query struct {
	V   BrowseResponseList
	Err error
}

// References is endpoint for References
func (e EndpointsBrowserV1Client) References(ctx context.Context, in *BrowseRequest) (*BrowseResponse, error) {
	resp, err := e.ReferencesEndpoint(ctx, in)
	if err != nil {
		return &BrowseResponse{}, err
	}
	return resp.(*BrowseResponse), nil
}

type respBrowserV1References struct {
	V   BrowseResponse
	Err error
}

// Referrers is endpoint for Referrers
func (e EndpointsBrowserV1Client) Referrers(ctx context.Context, in *BrowseRequest) (*BrowseResponse, error) {
	resp, err := e.ReferrersEndpoint(ctx, in)
	if err != nil {
		return &BrowseResponse{}, err
	}
	return resp.(*BrowseResponse), nil
}

type respBrowserV1Referrers struct {
	V   BrowseResponse
	Err error
}

func (e EndpointsBrowserV1Client) AutoWatchSvcBrowserV1(ctx context.Context, in *api.ListWatchOptions) (BrowserV1_AutoWatchSvcBrowserV1Client, error) {
	return nil, errors.New("not implemented")
}

// Query implementation on server Endpoint
func (e EndpointsBrowserV1Server) Query(ctx context.Context, in BrowseRequestList) (BrowseResponseList, error) {
	resp, err := e.QueryEndpoint(ctx, in)
	if err != nil {
		return BrowseResponseList{}, err
	}
	return *resp.(*BrowseResponseList), nil
}

// MakeBrowserV1QueryEndpoint creates  Query endpoints for the service
func MakeBrowserV1QueryEndpoint(s ServiceBrowserV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*BrowseRequestList)
		v, err := s.Query(ctx, *req)
		return respBrowserV1Query{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BrowserV1:Query")(f)
}

// References implementation on server Endpoint
func (e EndpointsBrowserV1Server) References(ctx context.Context, in BrowseRequest) (BrowseResponse, error) {
	resp, err := e.ReferencesEndpoint(ctx, in)
	if err != nil {
		return BrowseResponse{}, err
	}
	return *resp.(*BrowseResponse), nil
}

// MakeBrowserV1ReferencesEndpoint creates  References endpoints for the service
func MakeBrowserV1ReferencesEndpoint(s ServiceBrowserV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*BrowseRequest)
		v, err := s.References(ctx, *req)
		return respBrowserV1References{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BrowserV1:References")(f)
}

// Referrers implementation on server Endpoint
func (e EndpointsBrowserV1Server) Referrers(ctx context.Context, in BrowseRequest) (BrowseResponse, error) {
	resp, err := e.ReferrersEndpoint(ctx, in)
	if err != nil {
		return BrowseResponse{}, err
	}
	return *resp.(*BrowseResponse), nil
}

// MakeBrowserV1ReferrersEndpoint creates  Referrers endpoints for the service
func MakeBrowserV1ReferrersEndpoint(s ServiceBrowserV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*BrowseRequest)
		v, err := s.Referrers(ctx, *req)
		return respBrowserV1Referrers{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("BrowserV1:Referrers")(f)
}

// MakeAutoWatchSvcBrowserV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcBrowserV1Endpoint(s ServiceBrowserV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		return errors.New("not implemented")
	}
}

// MakeBrowserV1ServerEndpoints creates server endpoints
func MakeBrowserV1ServerEndpoints(s ServiceBrowserV1Server, logger log.Logger) EndpointsBrowserV1Server {
	return EndpointsBrowserV1Server{
		svcWatchHandlerBrowserV1: MakeAutoWatchSvcBrowserV1Endpoint(s, logger),

		QueryEndpoint:      MakeBrowserV1QueryEndpoint(s, logger),
		ReferencesEndpoint: MakeBrowserV1ReferencesEndpoint(s, logger),
		ReferrersEndpoint:  MakeBrowserV1ReferrersEndpoint(s, logger),
	}
}

// LoggingBrowserV1MiddlewareClient adds middleware for the client
func LoggingBrowserV1MiddlewareClient(logger log.Logger) MiddlewareBrowserV1Client {
	return func(next ServiceBrowserV1Client) ServiceBrowserV1Client {
		return loggingBrowserV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBrowserV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceBrowserV1Client
}

// LoggingBrowserV1MiddlewareServer adds middleware for the client
func LoggingBrowserV1MiddlewareServer(logger log.Logger) MiddlewareBrowserV1Server {
	return func(next ServiceBrowserV1Server) ServiceBrowserV1Server {
		return loggingBrowserV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingBrowserV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceBrowserV1Server
}

func (m loggingBrowserV1MiddlewareClient) Query(ctx context.Context, in *BrowseRequestList) (resp *BrowseResponseList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "Query", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Query(ctx, in)
	return
}
func (m loggingBrowserV1MiddlewareClient) References(ctx context.Context, in *BrowseRequest) (resp *BrowseResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "References", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.References(ctx, in)
	return
}
func (m loggingBrowserV1MiddlewareClient) Referrers(ctx context.Context, in *BrowseRequest) (resp *BrowseResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "Referrers", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Referrers(ctx, in)
	return
}

func (m loggingBrowserV1MiddlewareClient) AutoWatchSvcBrowserV1(ctx context.Context, in *api.ListWatchOptions) (BrowserV1_AutoWatchSvcBrowserV1Client, error) {
	return nil, errors.New("not implemented")
}

func (m loggingBrowserV1MiddlewareServer) Query(ctx context.Context, in BrowseRequestList) (resp BrowseResponseList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "Query", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Query(ctx, in)
	return
}
func (m loggingBrowserV1MiddlewareServer) References(ctx context.Context, in BrowseRequest) (resp BrowseResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "References", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.References(ctx, in)
	return
}
func (m loggingBrowserV1MiddlewareServer) Referrers(ctx context.Context, in BrowseRequest) (resp BrowseResponse, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "BrowserV1", "method", "Referrers", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Referrers(ctx, in)
	return
}

func (m loggingBrowserV1MiddlewareServer) AutoWatchSvcBrowserV1(in *api.ListWatchOptions, stream BrowserV1_AutoWatchSvcBrowserV1Server) error {
	return errors.New("Not implemented")
}

func (r *EndpointsBrowserV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
}
func (r *EndpointsBrowserV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIBrowserV1AutoWatchSvcBrowserV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

func (r *EndpointsBrowserV1RestClient) BrowserV1QueryEndpoint(ctx context.Context, in *BrowseRequestList) (*BrowseResponseList, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsBrowserV1RestClient) BrowserV1ReferencesEndpoint(ctx context.Context, in *BrowseRequest) (*BrowseResponse, error) {
	return nil, errors.New("not allowed")
}

func (r *EndpointsBrowserV1RestClient) BrowserV1ReferrersEndpoint(ctx context.Context, in *BrowseRequest) (*BrowseResponse, error) {
	return nil, errors.New("not allowed")
}

// MakeBrowserV1RestClientEndpoints make REST client endpoints
func MakeBrowserV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsBrowserV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsBrowserV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeBrowserV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeBrowserV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsBrowserV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsBrowserV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
