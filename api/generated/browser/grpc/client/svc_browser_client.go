// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	browser "github.com/pensando/sw/api/generated/browser"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewBrowserV1 sets up a new client for BrowserV1
func NewBrowserV1(conn *grpc.ClientConn, logger log.Logger) browser.ServiceBrowserV1Client {

	var lQueryEndpoint endpoint.Endpoint
	{
		lQueryEndpoint = grpctransport.NewClient(
			conn,
			"browser.BrowserV1",
			"Query",
			browser.EncodeGrpcReqBrowseRequestList,
			browser.DecodeGrpcRespBrowseResponseList,
			&browser.BrowseResponseList{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lQueryEndpoint = trace.ClientEndPoint("BrowserV1:Query")(lQueryEndpoint)
	}
	var lReferencesEndpoint endpoint.Endpoint
	{
		lReferencesEndpoint = grpctransport.NewClient(
			conn,
			"browser.BrowserV1",
			"References",
			browser.EncodeGrpcReqBrowseRequest,
			browser.DecodeGrpcRespBrowseResponse,
			&browser.BrowseResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lReferencesEndpoint = trace.ClientEndPoint("BrowserV1:References")(lReferencesEndpoint)
	}
	var lReferrersEndpoint endpoint.Endpoint
	{
		lReferrersEndpoint = grpctransport.NewClient(
			conn,
			"browser.BrowserV1",
			"Referrers",
			browser.EncodeGrpcReqBrowseRequest,
			browser.DecodeGrpcRespBrowseResponse,
			&browser.BrowseResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lReferrersEndpoint = trace.ClientEndPoint("BrowserV1:Referrers")(lReferrersEndpoint)
	}
	return browser.EndpointsBrowserV1Client{
		Client: browser.NewBrowserV1Client(conn),

		QueryEndpoint:      lQueryEndpoint,
		ReferencesEndpoint: lReferencesEndpoint,
		ReferrersEndpoint:  lReferrersEndpoint,
	}
}

// NewBrowserV1Backend creates an instrumented client with middleware
func NewBrowserV1Backend(conn *grpc.ClientConn, logger log.Logger) browser.ServiceBrowserV1Client {
	cl := NewBrowserV1(conn, logger)
	cl = browser.LoggingBrowserV1MiddlewareClient(logger)(cl)
	return cl
}
