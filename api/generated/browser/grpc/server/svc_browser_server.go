// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package browserApiServer is a auto generated package.
Input file: svc_browser.proto
*/
package browserApiServer

import (
	"context"
	"fmt"

	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	browser "github.com/pensando/sw/api/generated/browser"
	fieldhooks "github.com/pensando/sw/api/hooks/apiserver/fields"
	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer
var _ fieldhooks.Dummy

type sbrowserSvc_browserBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsBrowserV1 *eBrowserV1Endpoints
}

type eBrowserV1Endpoints struct {
	Svc                     sbrowserSvc_browserBackend
	fnAutoWatchSvcBrowserV1 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnQuery      func(ctx context.Context, t interface{}) (interface{}, error)
	fnReferences func(ctx context.Context, t interface{}) (interface{}, error)
	fnReferrers  func(ctx context.Context, t interface{}) (interface{}, error)
}

func (s *sbrowserSvc_browserBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for sbrowserSvc_browserBackend")
	s.Messages = map[string]apiserver.Message{

		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("browser", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *sbrowserSvc_browserBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("browser.BrowserV1")
		s.endpointsBrowserV1.fnAutoWatchSvcBrowserV1 = srv.WatchFromKv

		s.endpointsBrowserV1.fnQuery = srv.AddMethod("Query",
			apisrvpkg.NewMethod(srv, pkgMessages["browser.BrowseRequestList"], pkgMessages["browser.BrowseResponseList"], "browser", "Query")).WithOper(apiintf.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "browser/v1/BrowseRequest"), nil
		}).HandleInvocation

		s.endpointsBrowserV1.fnReferences = srv.AddMethod("References",
			apisrvpkg.NewMethod(srv, pkgMessages["browser.BrowseRequest"], pkgMessages["browser.BrowseResponse"], "browser", "References")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "browser/v1/BrowseRequest"), nil
		}).HandleInvocation

		s.endpointsBrowserV1.fnReferrers = srv.AddMethod("Referrers",
			apisrvpkg.NewMethod(srv, pkgMessages["browser.BrowseRequest"], pkgMessages["browser.BrowseResponse"], "browser", "Referrers")).WithOper(apiintf.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "browser/v1/BrowseRequest"), nil
		}).HandleInvocation

		s.Services = map[string]apiserver.Service{
			"browser.BrowserV1": srv,
		}
		apisrv.RegisterService("browser.BrowserV1", srv)
		endpoints := browser.MakeBrowserV1ServerEndpoints(s.endpointsBrowserV1, logger)
		server := browser.MakeGRPCServerBrowserV1(ctx, endpoints, logger)
		browser.RegisterBrowserV1Server(grpcserver.GrpcServer, server)

	}
}

func (s *sbrowserSvc_browserBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

	}

}

func (s *sbrowserSvc_browserBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *sbrowserSvc_browserBackend) Reset() {
	cleanupRegistration()
}

func (e *eBrowserV1Endpoints) Query(ctx context.Context, t browser.BrowseRequestList) (browser.BrowseResponseList, error) {
	r, err := e.fnQuery(ctx, t)
	if err == nil {
		return r.(browser.BrowseResponseList), err
	}
	return browser.BrowseResponseList{}, err

}
func (e *eBrowserV1Endpoints) References(ctx context.Context, t browser.BrowseRequest) (browser.BrowseResponse, error) {
	r, err := e.fnReferences(ctx, t)
	if err == nil {
		return r.(browser.BrowseResponse), err
	}
	return browser.BrowseResponse{}, err

}
func (e *eBrowserV1Endpoints) Referrers(ctx context.Context, t browser.BrowseRequest) (browser.BrowseResponse, error) {
	r, err := e.fnReferrers(ctx, t)
	if err == nil {
		return r.(browser.BrowseResponse), err
	}
	return browser.BrowseResponse{}, err

}

func (e *eBrowserV1Endpoints) AutoWatchSvcBrowserV1(in *api.ListWatchOptions, stream browser.BrowserV1_AutoWatchSvcBrowserV1Server) error {
	return e.fnAutoWatchSvcBrowserV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := sbrowserSvc_browserBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eBrowserV1Endpoints{Svc: svc}
		svc.endpointsBrowserV1 = &e
	}
	apisrv.Register("browser.svc_browser.proto", &svc)
}
