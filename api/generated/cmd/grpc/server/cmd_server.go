// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cmdApiServer is a auto generated package.
Input file: protos/cmd.proto
*/
package cmdApiServer

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	cmd "github.com/pensando/sw/api/generated/cmd"
	"github.com/pensando/sw/apiserver"
	"github.com/pensando/sw/apiserver/pkg"
	"github.com/pensando/sw/utils/kvstore"
	"github.com/pensando/sw/utils/log"
	"github.com/pensando/sw/utils/runtime"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
)

var apisrv apiserver.Server

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type scmdBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message

	endpointsCmdV1 *eCmdV1Endpoints
}

type eCmdV1Endpoints struct {
	Svc scmdBackend

	fnAutoAddCluster    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddNode       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteCluster func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteNode    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetCluster    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetNode       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListCluster   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListNode      func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateCluster func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateNode    func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchNode    func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchCluster func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *scmdBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *grpc.Server, scheme *runtime.Scheme) error {
	s.Messages = map[string]apiserver.Message{

		"cmd.AutoMsgClusterListHelper": apisrvpkg.NewMessage("cmd.AutoMsgClusterListHelper").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cmd.AutoMsgClusterListHelper{}
			r := cmd.Cluster{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"cmd.AutoMsgClusterWatchHelper": apisrvpkg.NewMessage("cmd.AutoMsgClusterWatchHelper"),
		"cmd.AutoMsgNodeListHelper": apisrvpkg.NewMessage("cmd.AutoMsgNodeListHelper").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := cmd.AutoMsgNodeListHelper{}
			r := cmd.Node{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"cmd.AutoMsgNodeWatchHelper": apisrvpkg.NewMessage("cmd.AutoMsgNodeWatchHelper"),
		"cmd.Cluster": apisrvpkg.NewMessage("cmd.Cluster").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := cmd.Cluster{}
				return r.MakeKey(prefix)
			}
			r := i.(cmd.Cluster)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(cmd.Cluster)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create bool) (interface{}, error) {
			r := i.(cmd.Cluster)
			key := r.MakeKey(prefix)
			r.Kind = "Cluster"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if r.ResourceVersion != "" {
					logger.Infof("resource version is specified %s\n", r.ResourceVersion)
					err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
				} else {
					err = kvs.Update(ctx, key, &r)
				}
				err = errors.Wrap(err, "KV update failed")
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(cmd.Cluster)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := cmd.Cluster{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := cmd.Cluster{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}),
		"cmd.ClusterSpec":   apisrvpkg.NewMessage("cmd.ClusterSpec"),
		"cmd.ClusterStatus": apisrvpkg.NewMessage("cmd.ClusterStatus"),
		"cmd.Node": apisrvpkg.NewMessage("cmd.Node").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := cmd.Node{}
				return r.MakeKey(prefix)
			}
			r := i.(cmd.Node)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(cmd.Node)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create bool) (interface{}, error) {
			r := i.(cmd.Node)
			key := r.MakeKey(prefix)
			r.Kind = "Node"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if r.ResourceVersion != "" {
					logger.Infof("resource version is specified %s\n", r.ResourceVersion)
					err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
				} else {
					err = kvs.Update(ctx, key, &r)
				}
				err = errors.Wrap(err, "KV update failed")
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(cmd.Node)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := cmd.Node{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := cmd.Node{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}),
		"cmd.NodeSpec":   apisrvpkg.NewMessage("cmd.NodeSpec"),
		"cmd.NodeStatus": apisrvpkg.NewMessage("cmd.NodeStatus"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	scheme.AddKnownTypes(
		&cmd.Cluster{},
		&cmd.Node{},
	)

	apisrv.RegisterMessages("cmd", s.Messages)

	{
		srv := apisrvpkg.NewService("CmdV1")

		s.endpointsCmdV1.fnAutoAddCluster = srv.AddMethod("AutoAddCluster",
			apisrvpkg.NewMethod(s.Messages["cmd.Cluster"], s.Messages["cmd.Cluster"], "cmd", "AutoAddCluster")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoAddNode = srv.AddMethod("AutoAddNode",
			apisrvpkg.NewMethod(s.Messages["cmd.Node"], s.Messages["cmd.Node"], "cmd", "AutoAddNode")).WithOper(apiserver.CreateOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoDeleteCluster = srv.AddMethod("AutoDeleteCluster",
			apisrvpkg.NewMethod(s.Messages["cmd.Cluster"], s.Messages["cmd.Cluster"], "cmd", "AutoDeleteCluster")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoDeleteNode = srv.AddMethod("AutoDeleteNode",
			apisrvpkg.NewMethod(s.Messages["cmd.Node"], s.Messages["cmd.Node"], "cmd", "AutoDeleteNode")).WithOper(apiserver.DeleteOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoGetCluster = srv.AddMethod("AutoGetCluster",
			apisrvpkg.NewMethod(s.Messages["cmd.Cluster"], s.Messages["cmd.Cluster"], "cmd", "AutoGetCluster")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoGetNode = srv.AddMethod("AutoGetNode",
			apisrvpkg.NewMethod(s.Messages["cmd.Node"], s.Messages["cmd.Node"], "cmd", "AutoGetNode")).WithOper(apiserver.GetOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoListCluster = srv.AddMethod("AutoListCluster",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["cmd.AutoMsgClusterListHelper"], "cmd", "AutoListCluster")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoListNode = srv.AddMethod("AutoListNode",
			apisrvpkg.NewMethod(s.Messages["api.ListWatchOptions"], s.Messages["cmd.AutoMsgNodeListHelper"], "cmd", "AutoListNode")).WithOper(apiserver.ListOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoUpdateCluster = srv.AddMethod("AutoUpdateCluster",
			apisrvpkg.NewMethod(s.Messages["cmd.Cluster"], s.Messages["cmd.Cluster"], "cmd", "AutoUpdateCluster")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoUpdateNode = srv.AddMethod("AutoUpdateNode",
			apisrvpkg.NewMethod(s.Messages["cmd.Node"], s.Messages["cmd.Node"], "cmd", "AutoUpdateNode")).WithOper(apiserver.UpdateOper).WithVersion("v1").HandleInvocation

		s.endpointsCmdV1.fnAutoWatchNode = s.Messages["cmd.Node"].WatchFromKv

		s.endpointsCmdV1.fnAutoWatchCluster = s.Messages["cmd.Cluster"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"cmd.CmdV1": srv,
		}
		apisrv.RegisterService("cmd.CmdV1", srv)
		endpoints := cmd.MakeCmdV1ServerEndpoints(s.endpointsCmdV1, logger)
		server := cmd.MakeGRPCServerCmdV1(ctx, endpoints, logger)
		cmd.RegisterCmdV1Server(grpcserver, server)
	}
	// Add Watchers
	{

		s.Messages["cmd.Node"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cmd.Node{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(cmd.CmdV1_AutoWatchNodeServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "Node")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for Node Watcher")
						return nil
					}
					in, ok := ev.Object.(*cmd.Node)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := cmd.AutoMsgNodeWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved Node watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Node", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*cmd.Node)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for Node", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Node Watcher")
					return wstream.Context().Err()
				}
			}
		})

		s.Messages["cmd.Cluster"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := cmd.Cluster{}
			key := o.MakeKey(svcprefix)
			wstream := stream.(cmd.CmdV1_AutoWatchClusterServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "Cluster")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for Cluster Watcher")
						return nil
					}
					in, ok := ev.Object.(*cmd.Cluster)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := cmd.AutoMsgClusterWatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved Cluster watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Cluster", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*cmd.Cluster)
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for Cluster", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Cluster Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

	return nil
}

func (e *eCmdV1Endpoints) AutoAddCluster(ctx context.Context, t cmd.Cluster) (cmd.Cluster, error) {
	r, err := e.fnAutoAddCluster(ctx, t)
	if err == nil {
		return r.(cmd.Cluster), err
	}
	return cmd.Cluster{}, err

}
func (e *eCmdV1Endpoints) AutoAddNode(ctx context.Context, t cmd.Node) (cmd.Node, error) {
	r, err := e.fnAutoAddNode(ctx, t)
	if err == nil {
		return r.(cmd.Node), err
	}
	return cmd.Node{}, err

}
func (e *eCmdV1Endpoints) AutoDeleteCluster(ctx context.Context, t cmd.Cluster) (cmd.Cluster, error) {
	r, err := e.fnAutoDeleteCluster(ctx, t)
	if err == nil {
		return r.(cmd.Cluster), err
	}
	return cmd.Cluster{}, err

}
func (e *eCmdV1Endpoints) AutoDeleteNode(ctx context.Context, t cmd.Node) (cmd.Node, error) {
	r, err := e.fnAutoDeleteNode(ctx, t)
	if err == nil {
		return r.(cmd.Node), err
	}
	return cmd.Node{}, err

}
func (e *eCmdV1Endpoints) AutoGetCluster(ctx context.Context, t cmd.Cluster) (cmd.Cluster, error) {
	r, err := e.fnAutoGetCluster(ctx, t)
	if err == nil {
		return r.(cmd.Cluster), err
	}
	return cmd.Cluster{}, err

}
func (e *eCmdV1Endpoints) AutoGetNode(ctx context.Context, t cmd.Node) (cmd.Node, error) {
	r, err := e.fnAutoGetNode(ctx, t)
	if err == nil {
		return r.(cmd.Node), err
	}
	return cmd.Node{}, err

}
func (e *eCmdV1Endpoints) AutoListCluster(ctx context.Context, t api.ListWatchOptions) (cmd.AutoMsgClusterListHelper, error) {
	r, err := e.fnAutoListCluster(ctx, t)
	if err == nil {
		return r.(cmd.AutoMsgClusterListHelper), err
	}
	return cmd.AutoMsgClusterListHelper{}, err

}
func (e *eCmdV1Endpoints) AutoListNode(ctx context.Context, t api.ListWatchOptions) (cmd.AutoMsgNodeListHelper, error) {
	r, err := e.fnAutoListNode(ctx, t)
	if err == nil {
		return r.(cmd.AutoMsgNodeListHelper), err
	}
	return cmd.AutoMsgNodeListHelper{}, err

}
func (e *eCmdV1Endpoints) AutoUpdateCluster(ctx context.Context, t cmd.Cluster) (cmd.Cluster, error) {
	r, err := e.fnAutoUpdateCluster(ctx, t)
	if err == nil {
		return r.(cmd.Cluster), err
	}
	return cmd.Cluster{}, err

}
func (e *eCmdV1Endpoints) AutoUpdateNode(ctx context.Context, t cmd.Node) (cmd.Node, error) {
	r, err := e.fnAutoUpdateNode(ctx, t)
	if err == nil {
		return r.(cmd.Node), err
	}
	return cmd.Node{}, err

}

func (e *eCmdV1Endpoints) AutoWatchNode(in *api.ListWatchOptions, stream cmd.CmdV1_AutoWatchNodeServer) error {
	return e.fnAutoWatchNode(in, stream, "cmd")
}
func (e *eCmdV1Endpoints) AutoWatchCluster(in *api.ListWatchOptions, stream cmd.CmdV1_AutoWatchClusterServer) error {
	return e.fnAutoWatchCluster(in, stream, "cmd")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := scmdBackend{}

	{
		e := eCmdV1Endpoints{Svc: svc}
		svc.endpointsCmdV1 = &e
	}
	apisrv.Register("cmd.protos/cmd.proto", &svc)
}
