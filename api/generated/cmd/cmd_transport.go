// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cmd is a auto generated package.
Input file: protos/cmd.proto
*/
package cmd

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc/metadata"

	"github.com/pensando/sw/api"
	apiserver "github.com/pensando/sw/apiserver"
	"github.com/pensando/sw/utils/log"
)

var (
	errInconsistentIDs = errors.New("inconsistent IDs")
	errAlreadyExists   = errors.New("already exists")
	errNotFound        = errors.New("not found")
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

// FIXME: add HTTP handler here.
func recoverVersion(ctx context.Context, md metadata.MD) context.Context {
	var pairs []string
	xmd := md
	v, ok := xmd[apiserver.RequestParamVersion]
	if ok {
		pairs = append(pairs, apiserver.RequestParamVersion, v[0])
	}
	if v, ok = xmd["req-uri"]; ok {
		pairs = append(pairs, "req-uri", v[0])
	}
	if v, ok = xmd[apiserver.RequestParamMethod]; ok {
		pairs = append(pairs, apiserver.RequestParamMethod, v[0])
	}
	nmd := metadata.Pairs(pairs...)
	nmd = metadata.Join(nmd, md)
	ctx = metadata.NewContext(ctx, nmd)
	return ctx
}

type grpcServerCmdV1 struct {
	Endpoints EndpointsCmdV1Server

	AutoAddClusterHdlr    grpctransport.Handler
	AutoAddNodeHdlr       grpctransport.Handler
	AutoDeleteClusterHdlr grpctransport.Handler
	AutoDeleteNodeHdlr    grpctransport.Handler
	AutoGetClusterHdlr    grpctransport.Handler
	AutoGetNodeHdlr       grpctransport.Handler
	AutoListClusterHdlr   grpctransport.Handler
	AutoListNodeHdlr      grpctransport.Handler
	AutoUpdateClusterHdlr grpctransport.Handler
	AutoUpdateNodeHdlr    grpctransport.Handler
}

// MakeGRPCServerCmdV1 creates a GRPC server for CmdV1 service
func MakeGRPCServerCmdV1(ctx context.Context, endpoints EndpointsCmdV1Server, logger log.Logger) CmdV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerCmdV1{
		Endpoints: endpoints,
		AutoAddClusterHdlr: grpctransport.NewServer(
			endpoints.AutoAddClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddCluster", logger)))...,
		),

		AutoAddNodeHdlr: grpctransport.NewServer(
			endpoints.AutoAddNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoAddNode", logger)))...,
		),

		AutoDeleteClusterHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteCluster", logger)))...,
		),

		AutoDeleteNodeHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoDeleteNode", logger)))...,
		),

		AutoGetClusterHdlr: grpctransport.NewServer(
			endpoints.AutoGetClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetCluster", logger)))...,
		),

		AutoGetNodeHdlr: grpctransport.NewServer(
			endpoints.AutoGetNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoGetNode", logger)))...,
		),

		AutoListClusterHdlr: grpctransport.NewServer(
			endpoints.AutoListClusterEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAutoMsgClusterListHelper,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListCluster", logger)))...,
		),

		AutoListNodeHdlr: grpctransport.NewServer(
			endpoints.AutoListNodeEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAutoMsgNodeListHelper,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoListNode", logger)))...,
		),

		AutoUpdateClusterHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateClusterEndpoint,
			DecodeGrpcReqCluster,
			EncodeGrpcRespCluster,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateCluster", logger)))...,
		),

		AutoUpdateNodeHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateNodeEndpoint,
			DecodeGrpcReqNode,
			EncodeGrpcRespNode,
			append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "AutoUpdateNode", logger)))...,
		),
	}
}

func (s *grpcServerCmdV1) AutoAddCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoAddClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoAddCluster).V
	return &r, resp.(respCmdV1AutoAddCluster).Err
}

func decodeHTTPrespCmdV1AutoAddCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoAddNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoAddNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoAddNode).V
	return &r, resp.(respCmdV1AutoAddNode).Err
}

func decodeHTTPrespCmdV1AutoAddNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoDeleteCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoDeleteClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoDeleteCluster).V
	return &r, resp.(respCmdV1AutoDeleteCluster).Err
}

func decodeHTTPrespCmdV1AutoDeleteCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoDeleteNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoDeleteNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoDeleteNode).V
	return &r, resp.(respCmdV1AutoDeleteNode).Err
}

func decodeHTTPrespCmdV1AutoDeleteNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoGetCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoGetClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoGetCluster).V
	return &r, resp.(respCmdV1AutoGetCluster).Err
}

func decodeHTTPrespCmdV1AutoGetCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoGetNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoGetNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoGetNode).V
	return &r, resp.(respCmdV1AutoGetNode).Err
}

func decodeHTTPrespCmdV1AutoGetNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoListCluster(ctx oldcontext.Context, req *api.ListWatchOptions) (*AutoMsgClusterListHelper, error) {
	_, resp, err := s.AutoListClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoListCluster).V
	return &r, resp.(respCmdV1AutoListCluster).Err
}

func decodeHTTPrespCmdV1AutoListCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AutoMsgClusterListHelper
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoListNode(ctx oldcontext.Context, req *api.ListWatchOptions) (*AutoMsgNodeListHelper, error) {
	_, resp, err := s.AutoListNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoListNode).V
	return &r, resp.(respCmdV1AutoListNode).Err
}

func decodeHTTPrespCmdV1AutoListNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AutoMsgNodeListHelper
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoUpdateCluster(ctx oldcontext.Context, req *Cluster) (*Cluster, error) {
	_, resp, err := s.AutoUpdateClusterHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoUpdateCluster).V
	return &r, resp.(respCmdV1AutoUpdateCluster).Err
}

func decodeHTTPrespCmdV1AutoUpdateCluster(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Cluster
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoUpdateNode(ctx oldcontext.Context, req *Node) (*Node, error) {
	_, resp, err := s.AutoUpdateNodeHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respCmdV1AutoUpdateNode).V
	return &r, resp.(respCmdV1AutoUpdateNode).Err
}

func decodeHTTPrespCmdV1AutoUpdateNode(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Node
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerCmdV1) AutoWatchNode(in *api.ListWatchOptions, stream CmdV1_AutoWatchNodeServer) error {
	return s.Endpoints.AutoWatchNode(in, stream)
}

func (s *grpcServerCmdV1) AutoWatchCluster(in *api.ListWatchOptions, stream CmdV1_AutoWatchClusterServer) error {
	return s.Endpoints.AutoWatchCluster(in, stream)
}

func encodeHTTPAutoMsgClusterListHelper(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAutoMsgClusterListHelper(_ context.Context, r *http.Request) (interface{}, error) {
	var req AutoMsgClusterListHelper
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAutoMsgClusterListHelper encodes GRPC request
func EncodeGrpcReqAutoMsgClusterListHelper(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AutoMsgClusterListHelper)
	return req, nil
}

// DecodeGrpcReqAutoMsgClusterListHelper decodes GRPC request
func DecodeGrpcReqAutoMsgClusterListHelper(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AutoMsgClusterListHelper)
	return req, nil
}

// EncodeGrpcRespAutoMsgClusterListHelper endodes the GRPC response
func EncodeGrpcRespAutoMsgClusterListHelper(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAutoMsgClusterListHelper decodes the GRPC response
func DecodeGrpcRespAutoMsgClusterListHelper(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAutoMsgNodeListHelper(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAutoMsgNodeListHelper(_ context.Context, r *http.Request) (interface{}, error) {
	var req AutoMsgNodeListHelper
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAutoMsgNodeListHelper encodes GRPC request
func EncodeGrpcReqAutoMsgNodeListHelper(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AutoMsgNodeListHelper)
	return req, nil
}

// DecodeGrpcReqAutoMsgNodeListHelper decodes GRPC request
func DecodeGrpcReqAutoMsgNodeListHelper(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AutoMsgNodeListHelper)
	return req, nil
}

// EncodeGrpcRespAutoMsgNodeListHelper endodes the GRPC response
func EncodeGrpcRespAutoMsgNodeListHelper(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAutoMsgNodeListHelper decodes the GRPC response
func DecodeGrpcRespAutoMsgNodeListHelper(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCluster(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCluster(_ context.Context, r *http.Request) (interface{}, error) {
	var req Cluster
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCluster encodes GRPC request
func EncodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// DecodeGrpcReqCluster decodes GRPC request
func DecodeGrpcReqCluster(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Cluster)
	return req, nil
}

// EncodeGrpcRespCluster encodes GRC response
func EncodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCluster decodes GRPC response
func DecodeGrpcRespCluster(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterSpec encodes GRPC request
func EncodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// DecodeGrpcReqClusterSpec decodes GRPC request
func DecodeGrpcReqClusterSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterSpec)
	return req, nil
}

// EncodeGrpcRespClusterSpec encodes GRC response
func EncodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterSpec decodes GRPC response
func DecodeGrpcRespClusterSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPClusterStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPClusterStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ClusterStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqClusterStatus encodes GRPC request
func EncodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// DecodeGrpcReqClusterStatus decodes GRPC request
func DecodeGrpcReqClusterStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ClusterStatus)
	return req, nil
}

// EncodeGrpcRespClusterStatus encodes GRC response
func EncodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespClusterStatus decodes GRPC response
func DecodeGrpcRespClusterStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNode(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNode(_ context.Context, r *http.Request) (interface{}, error) {
	var req Node
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNode encodes GRPC request
func EncodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// DecodeGrpcReqNode decodes GRPC request
func DecodeGrpcReqNode(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*Node)
	return req, nil
}

// EncodeGrpcRespNode encodes GRC response
func EncodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNode decodes GRPC response
func DecodeGrpcRespNode(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeList(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeList encodes GRPC request
func EncodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// DecodeGrpcReqNodeList decodes GRPC request
func DecodeGrpcReqNodeList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeList)
	return req, nil
}

// EncodeGrpcRespNodeList encodes GRC response
func EncodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeList decodes GRPC response
func DecodeGrpcRespNodeList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeSpec encodes GRPC request
func EncodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// DecodeGrpcReqNodeSpec decodes GRPC request
func DecodeGrpcReqNodeSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeSpec)
	return req, nil
}

// EncodeGrpcRespNodeSpec encodes GRC response
func EncodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeSpec decodes GRPC response
func DecodeGrpcRespNodeSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPNodeStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPNodeStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req NodeStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqNodeStatus encodes GRPC request
func EncodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// DecodeGrpcReqNodeStatus decodes GRPC request
func DecodeGrpcReqNodeStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*NodeStatus)
	return req, nil
}

// EncodeGrpcRespNodeStatus encodes GRC response
func EncodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespNodeStatus decodes GRPC response
func DecodeGrpcRespNodeStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPListWatchOptions(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPListWatchOptions(_ context.Context, r *http.Request) (interface{}, error) {
	var req api.ListWatchOptions
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqListWatchOptions encodes ListWatchOptions
func EncodeGrpcReqListWatchOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*api.ListWatchOptions)
	return req, nil
}

// DecodeGrpcReqListWatchOptions encodes ListWatchOptions
func DecodeGrpcReqListWatchOptions(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*(api.ListWatchOptions))
	return req, nil
}

// EncodeGrpcRespListWatchOptions encodes response
func EncodeGrpcRespListWatchOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespListWatchOptions decodes response
func DecodeGrpcRespListWatchOptions(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if e, ok := response.(errorer); ok && e.error() != nil {
		// Not a Go kit transport error, but a business-logic error.
		// Provide those as HTTP errors.
		encodeError(ctx, e.error(), w)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

func encodeHTTPRequest(_ context.Context, req *http.Request, request interface{}) error {
	var buf bytes.Buffer
	err := json.NewEncoder(&buf).Encode(request)
	if err != nil {
		return err
	}
	req.Body = ioutil.NopCloser(&buf)
	return nil
}

type errorer interface {
	error() error
}

func encodeError(_ context.Context, err error, w http.ResponseWriter) {
	if err == nil {
		panic("encodeError with nil error")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(codeFrom(err))
	json.NewEncoder(w).Encode(map[string]interface{}{
		"error": err.Error(),
	})
}

func errorDecoder(r *http.Response) error {
	var w errorWrapper
	if err := json.NewDecoder(r.Body).Decode(&w); err != nil {
		return err
	}
	return fmt.Errorf("Status:(%v) Reason:(%s)", r.StatusCode, w.Error)
}

type errorWrapper struct {
	Error string `json:"error"`
}

func codeFrom(err error) int {
	switch err {
	case errNotFound:
		return http.StatusNotFound
	case errAlreadyExists, errInconsistentIDs:
		return http.StatusBadRequest
	default:
		return http.StatusInternalServerError
	}
}
