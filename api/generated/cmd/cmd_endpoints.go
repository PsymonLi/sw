// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cmd is a auto generated package.
Input file: protos/cmd.proto
*/
package cmd

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareCmdV1Client add middleware to the client
type MiddlewareCmdV1Client func(ServiceCmdV1Client) ServiceCmdV1Client

// EndpointsCmdV1Client is the endpoints for the client
type EndpointsCmdV1Client struct {
	Client CmdV1Client

	AutoAddClusterEndpoint     endpoint.Endpoint
	AutoAddNodeEndpoint        endpoint.Endpoint
	AutoAddSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteClusterEndpoint  endpoint.Endpoint
	AutoDeleteNodeEndpoint     endpoint.Endpoint
	AutoDeleteSmartNICEndpoint endpoint.Endpoint
	AutoGetClusterEndpoint     endpoint.Endpoint
	AutoGetNodeEndpoint        endpoint.Endpoint
	AutoGetSmartNICEndpoint    endpoint.Endpoint
	AutoListClusterEndpoint    endpoint.Endpoint
	AutoListNodeEndpoint       endpoint.Endpoint
	AutoListSmartNICEndpoint   endpoint.Endpoint
	AutoUpdateClusterEndpoint  endpoint.Endpoint
	AutoUpdateNodeEndpoint     endpoint.Endpoint
	AutoUpdateSmartNICEndpoint endpoint.Endpoint
}

// EndpointsCmdV1RestClient is the REST client
type EndpointsCmdV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddClusterEndpoint     endpoint.Endpoint
	AutoAddNodeEndpoint        endpoint.Endpoint
	AutoAddSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteClusterEndpoint  endpoint.Endpoint
	AutoDeleteNodeEndpoint     endpoint.Endpoint
	AutoDeleteSmartNICEndpoint endpoint.Endpoint
	AutoGetClusterEndpoint     endpoint.Endpoint
	AutoGetNodeEndpoint        endpoint.Endpoint
	AutoGetSmartNICEndpoint    endpoint.Endpoint
	AutoListClusterEndpoint    endpoint.Endpoint
	AutoListNodeEndpoint       endpoint.Endpoint
	AutoListSmartNICEndpoint   endpoint.Endpoint
	AutoUpdateClusterEndpoint  endpoint.Endpoint
	AutoUpdateNodeEndpoint     endpoint.Endpoint
	AutoUpdateSmartNICEndpoint endpoint.Endpoint
	AutoWatchClusterEndpoint   endpoint.Endpoint
	AutoWatchNodeEndpoint      endpoint.Endpoint
	AutoWatchSmartNICEndpoint  endpoint.Endpoint
}

// MiddlewareCmdV1Server adds middle ware to the server
type MiddlewareCmdV1Server func(ServiceCmdV1Server) ServiceCmdV1Server

// EndpointsCmdV1Server is the server endpoints
type EndpointsCmdV1Server struct {
	AutoAddClusterEndpoint     endpoint.Endpoint
	AutoAddNodeEndpoint        endpoint.Endpoint
	AutoAddSmartNICEndpoint    endpoint.Endpoint
	AutoDeleteClusterEndpoint  endpoint.Endpoint
	AutoDeleteNodeEndpoint     endpoint.Endpoint
	AutoDeleteSmartNICEndpoint endpoint.Endpoint
	AutoGetClusterEndpoint     endpoint.Endpoint
	AutoGetNodeEndpoint        endpoint.Endpoint
	AutoGetSmartNICEndpoint    endpoint.Endpoint
	AutoListClusterEndpoint    endpoint.Endpoint
	AutoListNodeEndpoint       endpoint.Endpoint
	AutoListSmartNICEndpoint   endpoint.Endpoint
	AutoUpdateClusterEndpoint  endpoint.Endpoint
	AutoUpdateNodeEndpoint     endpoint.Endpoint
	AutoUpdateSmartNICEndpoint endpoint.Endpoint

	watchHandlerCluster  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerNode     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerSmartNIC func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddCluster is endpoint for AutoAddCluster
func (e EndpointsCmdV1Client) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respCmdV1AutoAddCluster struct {
	V   Cluster
	Err error
}

// AutoAddNode is endpoint for AutoAddNode
func (e EndpointsCmdV1Client) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respCmdV1AutoAddNode struct {
	V   Node
	Err error
}

// AutoAddSmartNIC is endpoint for AutoAddSmartNIC
func (e EndpointsCmdV1Client) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoAddSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respCmdV1AutoAddSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoDeleteCluster is endpoint for AutoDeleteCluster
func (e EndpointsCmdV1Client) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respCmdV1AutoDeleteCluster struct {
	V   Cluster
	Err error
}

// AutoDeleteNode is endpoint for AutoDeleteNode
func (e EndpointsCmdV1Client) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respCmdV1AutoDeleteNode struct {
	V   Node
	Err error
}

// AutoDeleteSmartNIC is endpoint for AutoDeleteSmartNIC
func (e EndpointsCmdV1Client) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoDeleteSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respCmdV1AutoDeleteSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoGetCluster is endpoint for AutoGetCluster
func (e EndpointsCmdV1Client) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respCmdV1AutoGetCluster struct {
	V   Cluster
	Err error
}

// AutoGetNode is endpoint for AutoGetNode
func (e EndpointsCmdV1Client) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respCmdV1AutoGetNode struct {
	V   Node
	Err error
}

// AutoGetSmartNIC is endpoint for AutoGetSmartNIC
func (e EndpointsCmdV1Client) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoGetSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respCmdV1AutoGetSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoListCluster is endpoint for AutoListCluster
func (e EndpointsCmdV1Client) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (*ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return &ClusterList{}, err
	}
	return resp.(*ClusterList), nil
}

type respCmdV1AutoListCluster struct {
	V   ClusterList
	Err error
}

// AutoListNode is endpoint for AutoListNode
func (e EndpointsCmdV1Client) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (*NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return &NodeList{}, err
	}
	return resp.(*NodeList), nil
}

type respCmdV1AutoListNode struct {
	V   NodeList
	Err error
}

// AutoListSmartNIC is endpoint for AutoListSmartNIC
func (e EndpointsCmdV1Client) AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions) (*SmartNICList, error) {
	resp, err := e.AutoListSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNICList{}, err
	}
	return resp.(*SmartNICList), nil
}

type respCmdV1AutoListSmartNIC struct {
	V   SmartNICList
	Err error
}

// AutoUpdateCluster is endpoint for AutoUpdateCluster
func (e EndpointsCmdV1Client) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return &Cluster{}, err
	}
	return resp.(*Cluster), nil
}

type respCmdV1AutoUpdateCluster struct {
	V   Cluster
	Err error
}

// AutoUpdateNode is endpoint for AutoUpdateNode
func (e EndpointsCmdV1Client) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return &Node{}, err
	}
	return resp.(*Node), nil
}

type respCmdV1AutoUpdateNode struct {
	V   Node
	Err error
}

// AutoUpdateSmartNIC is endpoint for AutoUpdateSmartNIC
func (e EndpointsCmdV1Client) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	resp, err := e.AutoUpdateSmartNICEndpoint(ctx, in)
	if err != nil {
		return &SmartNIC{}, err
	}
	return resp.(*SmartNIC), nil
}

type respCmdV1AutoUpdateSmartNIC struct {
	V   SmartNIC
	Err error
}

// AutoWatchCluster performs Watch for Cluster
func (e EndpointsCmdV1Client) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (CmdV1_AutoWatchClusterClient, error) {
	return e.Client.AutoWatchCluster(ctx, in)
}

// AutoWatchNode performs Watch for Node
func (e EndpointsCmdV1Client) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (CmdV1_AutoWatchNodeClient, error) {
	return e.Client.AutoWatchNode(ctx, in)
}

// AutoWatchSmartNIC performs Watch for SmartNIC
func (e EndpointsCmdV1Client) AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions) (CmdV1_AutoWatchSmartNICClient, error) {
	return e.Client.AutoWatchSmartNIC(ctx, in)
}

// AutoAddCluster implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoAddCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoAddClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeCmdV1AutoAddClusterEndpoint creates  AutoAddCluster endpoints for the service
func MakeCmdV1AutoAddClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoAddCluster(ctx, *req)
		return respCmdV1AutoAddCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoAddCluster")(f)
}

// AutoAddNode implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoAddNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoAddNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeCmdV1AutoAddNodeEndpoint creates  AutoAddNode endpoints for the service
func MakeCmdV1AutoAddNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoAddNode(ctx, *req)
		return respCmdV1AutoAddNode{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoAddNode")(f)
}

// AutoAddSmartNIC implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoAddSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoAddSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeCmdV1AutoAddSmartNICEndpoint creates  AutoAddSmartNIC endpoints for the service
func MakeCmdV1AutoAddSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoAddSmartNIC(ctx, *req)
		return respCmdV1AutoAddSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoAddSmartNIC")(f)
}

// AutoDeleteCluster implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoDeleteCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoDeleteClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeCmdV1AutoDeleteClusterEndpoint creates  AutoDeleteCluster endpoints for the service
func MakeCmdV1AutoDeleteClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoDeleteCluster(ctx, *req)
		return respCmdV1AutoDeleteCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoDeleteCluster")(f)
}

// AutoDeleteNode implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoDeleteNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoDeleteNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeCmdV1AutoDeleteNodeEndpoint creates  AutoDeleteNode endpoints for the service
func MakeCmdV1AutoDeleteNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoDeleteNode(ctx, *req)
		return respCmdV1AutoDeleteNode{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoDeleteNode")(f)
}

// AutoDeleteSmartNIC implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoDeleteSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoDeleteSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeCmdV1AutoDeleteSmartNICEndpoint creates  AutoDeleteSmartNIC endpoints for the service
func MakeCmdV1AutoDeleteSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoDeleteSmartNIC(ctx, *req)
		return respCmdV1AutoDeleteSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoDeleteSmartNIC")(f)
}

// AutoGetCluster implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoGetCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoGetClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeCmdV1AutoGetClusterEndpoint creates  AutoGetCluster endpoints for the service
func MakeCmdV1AutoGetClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoGetCluster(ctx, *req)
		return respCmdV1AutoGetCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoGetCluster")(f)
}

// AutoGetNode implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoGetNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoGetNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeCmdV1AutoGetNodeEndpoint creates  AutoGetNode endpoints for the service
func MakeCmdV1AutoGetNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoGetNode(ctx, *req)
		return respCmdV1AutoGetNode{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoGetNode")(f)
}

// AutoGetSmartNIC implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoGetSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoGetSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeCmdV1AutoGetSmartNICEndpoint creates  AutoGetSmartNIC endpoints for the service
func MakeCmdV1AutoGetSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoGetSmartNIC(ctx, *req)
		return respCmdV1AutoGetSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoGetSmartNIC")(f)
}

// AutoListCluster implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (ClusterList, error) {
	resp, err := e.AutoListClusterEndpoint(ctx, in)
	if err != nil {
		return ClusterList{}, err
	}
	return *resp.(*ClusterList), nil
}

// MakeCmdV1AutoListClusterEndpoint creates  AutoListCluster endpoints for the service
func MakeCmdV1AutoListClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListCluster(ctx, *req)
		return respCmdV1AutoListCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoListCluster")(f)
}

// AutoListNode implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoListNode(ctx context.Context, in api.ListWatchOptions) (NodeList, error) {
	resp, err := e.AutoListNodeEndpoint(ctx, in)
	if err != nil {
		return NodeList{}, err
	}
	return *resp.(*NodeList), nil
}

// MakeCmdV1AutoListNodeEndpoint creates  AutoListNode endpoints for the service
func MakeCmdV1AutoListNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListNode(ctx, *req)
		return respCmdV1AutoListNode{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoListNode")(f)
}

// AutoListSmartNIC implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoListSmartNIC(ctx context.Context, in api.ListWatchOptions) (SmartNICList, error) {
	resp, err := e.AutoListSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNICList{}, err
	}
	return *resp.(*SmartNICList), nil
}

// MakeCmdV1AutoListSmartNICEndpoint creates  AutoListSmartNIC endpoints for the service
func MakeCmdV1AutoListSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListSmartNIC(ctx, *req)
		return respCmdV1AutoListSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoListSmartNIC")(f)
}

// AutoUpdateCluster implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoUpdateCluster(ctx context.Context, in Cluster) (Cluster, error) {
	resp, err := e.AutoUpdateClusterEndpoint(ctx, in)
	if err != nil {
		return Cluster{}, err
	}
	return *resp.(*Cluster), nil
}

// MakeCmdV1AutoUpdateClusterEndpoint creates  AutoUpdateCluster endpoints for the service
func MakeCmdV1AutoUpdateClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Cluster)
		v, err := s.AutoUpdateCluster(ctx, *req)
		return respCmdV1AutoUpdateCluster{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoUpdateCluster")(f)
}

// AutoUpdateNode implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoUpdateNode(ctx context.Context, in Node) (Node, error) {
	resp, err := e.AutoUpdateNodeEndpoint(ctx, in)
	if err != nil {
		return Node{}, err
	}
	return *resp.(*Node), nil
}

// MakeCmdV1AutoUpdateNodeEndpoint creates  AutoUpdateNode endpoints for the service
func MakeCmdV1AutoUpdateNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Node)
		v, err := s.AutoUpdateNode(ctx, *req)
		return respCmdV1AutoUpdateNode{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoUpdateNode")(f)
}

// AutoUpdateSmartNIC implementation on server Endpoint
func (e EndpointsCmdV1Server) AutoUpdateSmartNIC(ctx context.Context, in SmartNIC) (SmartNIC, error) {
	resp, err := e.AutoUpdateSmartNICEndpoint(ctx, in)
	if err != nil {
		return SmartNIC{}, err
	}
	return *resp.(*SmartNIC), nil
}

// MakeCmdV1AutoUpdateSmartNICEndpoint creates  AutoUpdateSmartNIC endpoints for the service
func MakeCmdV1AutoUpdateSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*SmartNIC)
		v, err := s.AutoUpdateSmartNIC(ctx, *req)
		return respCmdV1AutoUpdateSmartNIC{
			V:   v,
			Err: err,
		}, nil
	}
	return opentracing.TraceServer(stdopentracing.GlobalTracer(), "CmdV1:AutoUpdateSmartNIC")(f)
}

// AutoWatchCluster is the watch handler for Cluster on the server side.
func (e EndpointsCmdV1Server) AutoWatchCluster(in *api.ListWatchOptions, stream CmdV1_AutoWatchClusterServer) error {
	return e.watchHandlerCluster(in, stream)
}

// MakeAutoWatchClusterEndpoint creates the Watch endpoint
func MakeAutoWatchClusterEndpoint(s ServiceCmdV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(CmdV1_AutoWatchClusterServer)
		return s.AutoWatchCluster(options, wstream)
	}
}

// AutoWatchNode is the watch handler for Node on the server side.
func (e EndpointsCmdV1Server) AutoWatchNode(in *api.ListWatchOptions, stream CmdV1_AutoWatchNodeServer) error {
	return e.watchHandlerNode(in, stream)
}

// MakeAutoWatchNodeEndpoint creates the Watch endpoint
func MakeAutoWatchNodeEndpoint(s ServiceCmdV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(CmdV1_AutoWatchNodeServer)
		return s.AutoWatchNode(options, wstream)
	}
}

// AutoWatchSmartNIC is the watch handler for SmartNIC on the server side.
func (e EndpointsCmdV1Server) AutoWatchSmartNIC(in *api.ListWatchOptions, stream CmdV1_AutoWatchSmartNICServer) error {
	return e.watchHandlerSmartNIC(in, stream)
}

// MakeAutoWatchSmartNICEndpoint creates the Watch endpoint
func MakeAutoWatchSmartNICEndpoint(s ServiceCmdV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(CmdV1_AutoWatchSmartNICServer)
		return s.AutoWatchSmartNIC(options, wstream)
	}
}

// MakeCmdV1ServerEndpoints creates server endpoints
func MakeCmdV1ServerEndpoints(s ServiceCmdV1Server, logger log.Logger) EndpointsCmdV1Server {
	return EndpointsCmdV1Server{

		AutoAddClusterEndpoint:     MakeCmdV1AutoAddClusterEndpoint(s, logger),
		AutoAddNodeEndpoint:        MakeCmdV1AutoAddNodeEndpoint(s, logger),
		AutoAddSmartNICEndpoint:    MakeCmdV1AutoAddSmartNICEndpoint(s, logger),
		AutoDeleteClusterEndpoint:  MakeCmdV1AutoDeleteClusterEndpoint(s, logger),
		AutoDeleteNodeEndpoint:     MakeCmdV1AutoDeleteNodeEndpoint(s, logger),
		AutoDeleteSmartNICEndpoint: MakeCmdV1AutoDeleteSmartNICEndpoint(s, logger),
		AutoGetClusterEndpoint:     MakeCmdV1AutoGetClusterEndpoint(s, logger),
		AutoGetNodeEndpoint:        MakeCmdV1AutoGetNodeEndpoint(s, logger),
		AutoGetSmartNICEndpoint:    MakeCmdV1AutoGetSmartNICEndpoint(s, logger),
		AutoListClusterEndpoint:    MakeCmdV1AutoListClusterEndpoint(s, logger),
		AutoListNodeEndpoint:       MakeCmdV1AutoListNodeEndpoint(s, logger),
		AutoListSmartNICEndpoint:   MakeCmdV1AutoListSmartNICEndpoint(s, logger),
		AutoUpdateClusterEndpoint:  MakeCmdV1AutoUpdateClusterEndpoint(s, logger),
		AutoUpdateNodeEndpoint:     MakeCmdV1AutoUpdateNodeEndpoint(s, logger),
		AutoUpdateSmartNICEndpoint: MakeCmdV1AutoUpdateSmartNICEndpoint(s, logger),

		watchHandlerCluster:  MakeAutoWatchClusterEndpoint(s, logger),
		watchHandlerNode:     MakeAutoWatchNodeEndpoint(s, logger),
		watchHandlerSmartNIC: MakeAutoWatchSmartNICEndpoint(s, logger),
	}
}

// LoggingCmdV1MiddlewareClient adds middleware for the client
func LoggingCmdV1MiddlewareClient(logger log.Logger) MiddlewareCmdV1Client {
	return func(next ServiceCmdV1Client) ServiceCmdV1Client {
		return loggingCmdV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCmdV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceCmdV1Client
}

// LoggingCmdV1MiddlewareServer adds middleware for the client
func LoggingCmdV1MiddlewareServer(logger log.Logger) MiddlewareCmdV1Server {
	return func(next ServiceCmdV1Server) ServiceCmdV1Server {
		return loggingCmdV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingCmdV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceCmdV1Server
}

func (m loggingCmdV1MiddlewareClient) AutoAddCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoAddNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoDeleteNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoGetCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoGetNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoListCluster(ctx context.Context, in *api.ListWatchOptions) (resp *ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoListNode(ctx context.Context, in *api.ListWatchOptions) (resp *NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoListSmartNIC(ctx context.Context, in *api.ListWatchOptions) (resp *SmartNICList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (resp *Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoUpdateNode(ctx context.Context, in *Node) (resp *Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (resp *SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSmartNIC(ctx, in)
	return
}

func (m loggingCmdV1MiddlewareClient) AutoWatchCluster(ctx context.Context, in *api.ListWatchOptions) (resp CmdV1_AutoWatchClusterClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoWatchNode(ctx context.Context, in *api.ListWatchOptions) (resp CmdV1_AutoWatchNodeClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareClient) AutoWatchSmartNIC(ctx context.Context, in *api.ListWatchOptions) (resp CmdV1_AutoWatchSmartNICClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoWatchSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchSmartNIC(ctx, in)
	return
}

func (m loggingCmdV1MiddlewareServer) AutoAddCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoAddNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoAddSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoAddSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoDeleteCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoDeleteNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoDeleteSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoDeleteSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoGetCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoGetNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoGetSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoGetSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoListCluster(ctx context.Context, in api.ListWatchOptions) (resp ClusterList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoListNode(ctx context.Context, in api.ListWatchOptions) (resp NodeList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoListSmartNIC(ctx context.Context, in api.ListWatchOptions) (resp SmartNICList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoListSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListSmartNIC(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoUpdateCluster(ctx context.Context, in Cluster) (resp Cluster, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateCluster(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoUpdateNode(ctx context.Context, in Node) (resp Node, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateNode(ctx, in)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoUpdateSmartNIC(ctx context.Context, in SmartNIC) (resp SmartNIC, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "CmdV1", "method", "AutoUpdateSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateSmartNIC(ctx, in)
	return
}

func (m loggingCmdV1MiddlewareServer) AutoWatchCluster(in *api.ListWatchOptions, stream CmdV1_AutoWatchClusterServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "CmdV1", "method", "AutoWatchCluster", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchCluster(in, stream)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoWatchNode(in *api.ListWatchOptions, stream CmdV1_AutoWatchNodeServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "CmdV1", "method", "AutoWatchNode", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchNode(in, stream)
	return
}
func (m loggingCmdV1MiddlewareServer) AutoWatchSmartNIC(in *api.ListWatchOptions, stream CmdV1_AutoWatchSmartNICServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "CmdV1", "method", "AutoWatchSmartNIC", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSmartNIC(in, stream)
	return
}
func (r *EndpointsCmdV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURICmdV1AutoAddNodeCreateOper(in *Node) string {
	return fmt.Sprint("/v1/cmd", "/nodes")
}

//
func makeURICmdV1AutoDeleteClusterDeleteOper(in *Cluster) string {
	return fmt.Sprint("/v1/cmd", "/cluster/", in.Name)
}

//
func makeURICmdV1AutoDeleteNodeDeleteOper(in *Node) string {
	return fmt.Sprint("/v1/cmd", "/nodes/", in.Name)
}

//
func makeURICmdV1AutoDeleteSmartNICDeleteOper(in *SmartNIC) string {
	return fmt.Sprint("/v1/cmd", "/smartnics/", in.Name)
}

//
func makeURICmdV1AutoGetClusterGetOper(in *Cluster) string {
	return fmt.Sprint("/v1/cmd", "/cluster/", in.Name)
}

//
func makeURICmdV1AutoGetNodeGetOper(in *Node) string {
	return fmt.Sprint("/v1/cmd", "/nodes/", in.Name)
}

//
func makeURICmdV1AutoGetSmartNICGetOper(in *SmartNIC) string {
	return fmt.Sprint("/v1/cmd", "/smartnics/", in.Name)
}

//
func makeURICmdV1AutoListClusterListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/cmd", "/cluster")
}

//
func makeURICmdV1AutoListNodeListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/cmd", "/nodes")
}

//
func makeURICmdV1AutoListSmartNICListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/cmd", "/smartnics")
}

//
func makeURICmdV1AutoUpdateClusterUpdateOper(in *Cluster) string {
	return fmt.Sprint("/v1/cmd", "/cluster/", in.Name)
}

//
func makeURICmdV1AutoUpdateNodeUpdateOper(in *Node) string {
	return fmt.Sprint("/v1/cmd", "/nodes/", in.Name)
}

//
func makeURICmdV1AutoUpdateSmartNICUpdateOper(in *SmartNIC) string {
	return fmt.Sprint("/v1/cmd", "/smartnics/", in.Name)
}

// AutoAddCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoAddCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoUpdateCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURICmdV1AutoUpdateClusterUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoUpdateCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoGetCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoGetCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURICmdV1AutoGetClusterGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoGetCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoDeleteCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoDeleteCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	path := makeURICmdV1AutoDeleteClusterDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoDeleteCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Cluster), err
}

// AutoListCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoListCluster(ctx context.Context, options *api.ListWatchOptions) (*ClusterList, error) {
	path := makeURICmdV1AutoListClusterListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoListCluster(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ClusterList), err
}

// AutoWatchCluster CRUD method for Cluster
func (r *EndpointsCmdV1RestClient) AutoWatchCluster(ctx context.Context, in *Cluster) (*Cluster, error) {
	return nil, errors.New("not allowed")
}

// AutoAddNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoAddNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURICmdV1AutoAddNodeCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoAddNode(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), nil
}

// AutoUpdateNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoUpdateNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURICmdV1AutoUpdateNodeUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoUpdateNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoGetNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoGetNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURICmdV1AutoGetNodeGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoGetNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoDeleteNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoDeleteNode(ctx context.Context, in *Node) (*Node, error) {
	path := makeURICmdV1AutoDeleteNodeDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoDeleteNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Node), err
}

// AutoListNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoListNode(ctx context.Context, options *api.ListWatchOptions) (*NodeList, error) {
	path := makeURICmdV1AutoListNodeListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoListNode(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*NodeList), err
}

// AutoWatchNode CRUD method for Node
func (r *EndpointsCmdV1RestClient) AutoWatchNode(ctx context.Context, in *Node) (*Node, error) {
	return nil, errors.New("not allowed")
}

// AutoAddSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoAddSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoUpdateSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURICmdV1AutoUpdateSmartNICUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoUpdateSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoGetSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoGetSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURICmdV1AutoGetSmartNICGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoGetSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoDeleteSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoDeleteSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	path := makeURICmdV1AutoDeleteSmartNICDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoDeleteSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNIC), err
}

// AutoListSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoListSmartNIC(ctx context.Context, options *api.ListWatchOptions) (*SmartNICList, error) {
	path := makeURICmdV1AutoListSmartNICListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespCmdV1AutoListSmartNIC(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*SmartNICList), err
}

// AutoWatchSmartNIC CRUD method for SmartNIC
func (r *EndpointsCmdV1RestClient) AutoWatchSmartNIC(ctx context.Context, in *SmartNIC) (*SmartNIC, error) {
	return nil, errors.New("not allowed")
}

// MakeCmdV1RestClientEndpoints make REST client endpoints
func MakeCmdV1RestClientEndpoints(instance string) (EndpointsCmdV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsCmdV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
