// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package cmd is a auto generated package.
Input file: protos/cmd.proto
*/
package cmd

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/globals"
	validators "github.com/pensando/sw/venice/utils/apigen/validators"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var funcMapCmd = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Cluster) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "cluster/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *Node) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "nodes/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *SmartNIC) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "smartnics/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *ClusterList) MakeKey(prefix string) string {
	obj := Cluster{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *NodeList) MakeKey(prefix string) string {
	obj := Node{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *SmartNICList) MakeKey(prefix string) string {
	obj := SmartNIC{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgClusterWatchHelper) MakeKey(prefix string) string {
	obj := Cluster{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgNodeWatchHelper) MakeKey(prefix string) string {
	obj := Node{}
	return obj.MakeKey(prefix)
}

// MakeKey generates a KV store key for the object
func (m *AutoMsgSmartNICWatchHelper) MakeKey(prefix string) string {
	obj := SmartNIC{}
	return obj.MakeKey(prefix)
}

func (m *AutoMsgClusterWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgClusterWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgNodeWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgNodeWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *AutoMsgSmartNICWatchHelper) Clone(into interface{}) error {
	out, ok := into.(*AutoMsgSmartNICWatchHelper)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Cluster) Clone(into interface{}) error {
	out, ok := into.(*Cluster)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ClusterList) Clone(into interface{}) error {
	out, ok := into.(*ClusterList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ClusterSpec) Clone(into interface{}) error {
	out, ok := into.(*ClusterSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *ClusterStatus) Clone(into interface{}) error {
	out, ok := into.(*ClusterStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *Node) Clone(into interface{}) error {
	out, ok := into.(*Node)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NodeCondition) Clone(into interface{}) error {
	out, ok := into.(*NodeCondition)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NodeList) Clone(into interface{}) error {
	out, ok := into.(*NodeList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NodeSpec) Clone(into interface{}) error {
	out, ok := into.(*NodeSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *NodeStatus) Clone(into interface{}) error {
	out, ok := into.(*NodeStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *PortCondition) Clone(into interface{}) error {
	out, ok := into.(*PortCondition)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *PortSpec) Clone(into interface{}) error {
	out, ok := into.(*PortSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *PortStatus) Clone(into interface{}) error {
	out, ok := into.(*PortStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SmartNIC) Clone(into interface{}) error {
	out, ok := into.(*SmartNIC)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SmartNICCondition) Clone(into interface{}) error {
	out, ok := into.(*SmartNICCondition)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SmartNICList) Clone(into interface{}) error {
	out, ok := into.(*SmartNICList)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SmartNICSpec) Clone(into interface{}) error {
	out, ok := into.(*SmartNICSpec)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

func (m *SmartNICStatus) Clone(into interface{}) error {
	out, ok := into.(*SmartNICStatus)
	if !ok {
		return fmt.Errorf("mismatched object types")
	}
	*out = *m
	return nil
}

// Validators

func (m *AutoMsgClusterWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AutoMsgNodeWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AutoMsgSmartNICWatchHelper) Validate(ver string, ignoreStatus bool) bool {
	if m.Object != nil && !m.Object.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *Cluster) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ClusterList) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ClusterSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *ClusterStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *Node) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *NodeCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapCmd["NodeCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["NodeCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *NodeList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *NodeSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapCmd["NodeSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["NodeSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *NodeStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := funcMapCmd["NodeStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["NodeStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *PortCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapCmd["PortCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["PortCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *PortSpec) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *PortStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SmartNIC) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SmartNICCondition) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapCmd["SmartNICCondition"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["SmartNICCondition"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SmartNICList) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Items {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *SmartNICSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := funcMapCmd["SmartNICSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := funcMapCmd["SmartNICSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SmartNICStatus) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Conditions {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	for _, v := range m.Ports {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func init() {
	funcMapCmd = make(map[string]map[string][]func(interface{}) bool)

	funcMapCmd["NodeCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["NodeCondition"]["all"] = append(funcMapCmd["NodeCondition"]["all"], func(i interface{}) bool {
		m := i.(*NodeCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["NodeCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["NodeCondition"]["all"] = append(funcMapCmd["NodeCondition"]["all"], func(i interface{}) bool {
		m := i.(*NodeCondition)

		if _, ok := NodeCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["NodeSpec"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["NodeSpec"]["all"] = append(funcMapCmd["NodeSpec"]["all"], func(i interface{}) bool {
		m := i.(*NodeSpec)

		for _, v := range m.Roles {
			if _, ok := NodeSpec_NodeRole_value[v]; !ok {
				return false
			}
		}
		return true
	})

	funcMapCmd["NodeStatus"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["NodeStatus"]["all"] = append(funcMapCmd["NodeStatus"]["all"], func(i interface{}) bool {
		m := i.(*NodeStatus)

		if _, ok := NodeStatus_NodePhase_value[m.Phase]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["PortCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["PortCondition"]["all"] = append(funcMapCmd["PortCondition"]["all"], func(i interface{}) bool {
		m := i.(*PortCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["PortCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["PortCondition"]["all"] = append(funcMapCmd["PortCondition"]["all"], func(i interface{}) bool {
		m := i.(*PortCondition)

		if _, ok := PortCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["SmartNICCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["SmartNICCondition"]["all"] = append(funcMapCmd["SmartNICCondition"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICCondition)

		if _, ok := ConditionStatus_value[m.Status]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["SmartNICCondition"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["SmartNICCondition"]["all"] = append(funcMapCmd["SmartNICCondition"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICCondition)

		if _, ok := SmartNICCondition_ConditionType_value[m.Type]; !ok {
			return false
		}
		return true
	})

	funcMapCmd["SmartNICSpec"] = make(map[string][]func(interface{}) bool)

	funcMapCmd["SmartNICSpec"]["all"] = append(funcMapCmd["SmartNICSpec"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICSpec)
		if !validators.IPAddr(m.MgmtIp) {
			return false
		}
		return true
	})

	funcMapCmd["SmartNICSpec"] = make(map[string][]func(interface{}) bool)
	funcMapCmd["SmartNICSpec"]["all"] = append(funcMapCmd["SmartNICSpec"]["all"], func(i interface{}) bool {
		m := i.(*SmartNICSpec)

		if _, ok := SmartNICSpec_SmartNICPhase_value[m.Phase]; !ok {
			return false
		}
		return true
	})

}
