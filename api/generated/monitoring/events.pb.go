// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"
import fields "github.com/pensando/sw/api/fields"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MonitoringExportFormat int32

const (
	MonitoringExportFormat_SYSLOG_BSD     MonitoringExportFormat = 0
	MonitoringExportFormat_SYSLOG_RFC5424 MonitoringExportFormat = 1
)

var MonitoringExportFormat_name = map[int32]string{
	0: "SYSLOG_BSD",
	1: "SYSLOG_RFC5424",
}
var MonitoringExportFormat_value = map[string]int32{
	"SYSLOG_BSD":     0,
	"SYSLOG_RFC5424": 1,
}

func (x MonitoringExportFormat) String() string {
	return proto.EnumName(MonitoringExportFormat_name, int32(x))
}
func (MonitoringExportFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

// -------------------------- Event -----------------------------
// Severity Level of an event
type SeverityLevel int32

const (
	SeverityLevel_INFO     SeverityLevel = 0
	SeverityLevel_WARNING  SeverityLevel = 1
	SeverityLevel_CRITICAL SeverityLevel = 2
)

var SeverityLevel_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "CRITICAL",
}
var SeverityLevel_value = map[string]int32{
	"INFO":     0,
	"WARNING":  1,
	"CRITICAL": 2,
}

func (x SeverityLevel) String() string {
	return proto.EnumName(SeverityLevel_name, int32(x))
}
func (SeverityLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

// -------------------------- Event Policy -----------------------------
// Event Policy represents the policy definition for Events.
// Event Client module will be consumer of this policy.
type Event struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of an event policy.
	EventAttributes `protobuf:"bytes,3,opt,name=Attributes,embedded=Attributes" json:",inline"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

type EventAttributes struct {
	// export target ip/port/protocol
	Severity string `protobuf:"bytes,1,opt,name=Severity,proto3" json:"severity,omitempty"`
	// event export format, SYSLOG_BSD default
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type,omitempty"`
	// export events matched by the selector
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"message,omitempty"`
	// syslog specific configuration
	ObjectRef      *api.ObjectRef `protobuf:"bytes,4,opt,name=ObjectRef" json:"object-ref,omitempty"`
	Source         *EventSource   `protobuf:"bytes,5,opt,name=Source" json:"source,omitempty"`
	Count          uint32         `protobuf:"varint,6,opt,name=Count,proto3" json:"count,omitempty"`
	FirstTimestamp string         `protobuf:"bytes,7,opt,name=FirstTimestamp,proto3" json:"first-timestamp,omitempty"`
	LastTimestamp  string         `protobuf:"bytes,8,opt,name=LastTimestamp,proto3" json:"last-timestamp,omitempty"`
}

func (m *EventAttributes) Reset()                    { *m = EventAttributes{} }
func (m *EventAttributes) String() string            { return proto.CompactTextString(m) }
func (*EventAttributes) ProtoMessage()               {}
func (*EventAttributes) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

func (m *EventAttributes) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *EventAttributes) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventAttributes) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EventAttributes) GetObjectRef() *api.ObjectRef {
	if m != nil {
		return m.ObjectRef
	}
	return nil
}

func (m *EventAttributes) GetSource() *EventSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EventAttributes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EventAttributes) GetFirstTimestamp() string {
	if m != nil {
		return m.FirstTimestamp
	}
	return ""
}

func (m *EventAttributes) GetLastTimestamp() string {
	if m != nil {
		return m.LastTimestamp
	}
	return ""
}

// EventPolicySpec is the specification of an Event Policy,
// It consists of Retention and Export.
type EventExport struct {
	// export configuration
	Targets []*api1.ExportConfig `protobuf:"bytes,1,rep,name=Targets" json:"targets,omitempty"`
	// MaxRetentionTime defines for how long to keep the data before it is deleted
	// The value is specified as a string format e.g. 30d (30 days)
	Format       string                   `protobuf:"bytes,2,opt,name=Format,proto3" json:"format, omitempty"`
	Selector     *fields.Selector         `protobuf:"bytes,3,opt,name=Selector" json:"selector,omitempty"`
	SyslogConfig *api1.SyslogExportConfig `protobuf:"bytes,4,opt,name=SyslogConfig" json:"syslog-config,omitempty"`
}

func (m *EventExport) Reset()                    { *m = EventExport{} }
func (m *EventExport) String() string            { return proto.CompactTextString(m) }
func (*EventExport) ProtoMessage()               {}
func (*EventExport) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{2} }

func (m *EventExport) GetTargets() []*api1.ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *EventExport) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *EventExport) GetSelector() *fields.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *EventExport) GetSyslogConfig() *api1.SyslogExportConfig {
	if m != nil {
		return m.SyslogConfig
	}
	return nil
}

// EventPolicyStatus
type EventPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           EventPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         EventPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *EventPolicy) Reset()                    { *m = EventPolicy{} }
func (m *EventPolicy) String() string            { return proto.CompactTextString(m) }
func (*EventPolicy) ProtoMessage()               {}
func (*EventPolicy) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{3} }

func (m *EventPolicy) GetSpec() EventPolicySpec {
	if m != nil {
		return m.Spec
	}
	return EventPolicySpec{}
}

func (m *EventPolicy) GetStatus() EventPolicyStatus {
	if m != nil {
		return m.Status
	}
	return EventPolicyStatus{}
}

// Event is a system notification of a fault, condition or configuration
// that should be user visible. These objects are created internally by
// Event client and persisted in EventDB.
type EventPolicySpec struct {
	Exports []*EventExport `protobuf:"bytes,1,rep,name=Exports" json:"exports,omitempty"`
	// ObjectMeta.Name will be the UUID for an event object.
	// TODO: Should there be a predefined list of labels or keep it free form ?
	MaxRetentionTime string `protobuf:"bytes,2,opt,name=MaxRetentionTime,proto3" json:"max-retention-time,omitempty"`
}

func (m *EventPolicySpec) Reset()                    { *m = EventPolicySpec{} }
func (m *EventPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*EventPolicySpec) ProtoMessage()               {}
func (*EventPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{4} }

func (m *EventPolicySpec) GetExports() []*EventExport {
	if m != nil {
		return m.Exports
	}
	return nil
}

func (m *EventPolicySpec) GetMaxRetentionTime() string {
	if m != nil {
		return m.MaxRetentionTime
	}
	return ""
}

// EventAttributes contains all the event attributes
type EventPolicyStatus struct {
}

func (m *EventPolicyStatus) Reset()                    { *m = EventPolicyStatus{} }
func (m *EventPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyStatus) ProtoMessage()               {}
func (*EventPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{5} }

// EventSource has info about the component and
// host/node that generated the event
type EventSource struct {
	// Component from which the event is generated.
	Component string `protobuf:"bytes,1,opt,name=Component,proto3" json:"component,omitempty"`
	// Name of the venice or workload node which is generating the event.
	NodeName string `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"node-name,omitempty"`
}

func (m *EventSource) Reset()                    { *m = EventSource{} }
func (m *EventSource) String() string            { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()               {}
func (*EventSource) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{6} }

func (m *EventSource) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *EventSource) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

// list of events
type EventsList struct {
	Events []*Event `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *EventsList) Reset()                    { *m = EventsList{} }
func (m *EventsList) String() string            { return proto.CompactTextString(m) }
func (*EventsList) ProtoMessage()               {}
func (*EventsList) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{7} }

func (m *EventsList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "monitoring.Event")
	proto.RegisterType((*EventAttributes)(nil), "monitoring.EventAttributes")
	proto.RegisterType((*EventExport)(nil), "monitoring.EventExport")
	proto.RegisterType((*EventPolicy)(nil), "monitoring.EventPolicy")
	proto.RegisterType((*EventPolicySpec)(nil), "monitoring.EventPolicySpec")
	proto.RegisterType((*EventPolicyStatus)(nil), "monitoring.EventPolicyStatus")
	proto.RegisterType((*EventSource)(nil), "monitoring.EventSource")
	proto.RegisterType((*EventsList)(nil), "monitoring.EventsList")
	proto.RegisterEnum("monitoring.MonitoringExportFormat", MonitoringExportFormat_name, MonitoringExportFormat_value)
	proto.RegisterEnum("monitoring.SeverityLevel", SeverityLevel_name, SeverityLevel_value)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.EventAttributes.Size()))
	n3, err := m.EventAttributes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *EventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Severity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Severity)))
		i += copy(dAtA[i:], m.Severity)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.ObjectRef != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ObjectRef.Size()))
		n4, err := m.ObjectRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Source != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Source.Size()))
		n5, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Count))
	}
	if len(m.FirstTimestamp) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FirstTimestamp)))
		i += copy(dAtA[i:], m.FirstTimestamp)
	}
	if len(m.LastTimestamp) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LastTimestamp)))
		i += copy(dAtA[i:], m.LastTimestamp)
	}
	return i, nil
}

func (m *EventExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.Selector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Selector.Size()))
		n6, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.SyslogConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SyslogConfig.Size()))
		n7, err := m.SyslogConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *EventPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.TypeMeta.Size()))
	n8, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ObjectMeta.Size()))
	n9, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Spec.Size()))
	n10, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Status.Size()))
	n11, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *EventPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MaxRetentionTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MaxRetentionTime)))
		i += copy(dAtA[i:], m.MaxRetentionTime)
	}
	return i, nil
}

func (m *EventPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EventSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Component) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Component)))
		i += copy(dAtA[i:], m.Component)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *EventsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.EventAttributes.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventAttributes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ObjectRef != nil {
		l = m.ObjectRef.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovEvents(uint64(m.Count))
	}
	l = len(m.FirstTimestamp)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.LastTimestamp)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventExport) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SyslogConfig != nil {
		l = m.SyslogConfig.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.MaxRetentionTime)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EventSource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Component)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventsList) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EventAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectRef == nil {
				m.ObjectRef = &api.ObjectRef{}
			}
			if err := m.ObjectRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &EventSource{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &api1.ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &fields.Selector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyslogConfig == nil {
				m.SyslogConfig = &api1.SyslogExportConfig{}
			}
			if err := m.SyslogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, &EventExport{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0x67, 0xf9, 0x63, 0xc3, 0x98, 0x3f, 0x66, 0x48, 0x60, 0x4d, 0x08, 0x8b, 0x2c, 0xb5, 0x25,
	0x11, 0xf6, 0x22, 0x42, 0xa4, 0x36, 0x6a, 0x0f, 0xac, 0x63, 0x28, 0x92, 0xc1, 0xc8, 0xb6, 0xd4,
	0xf6, 0x54, 0x2d, 0xcb, 0xf3, 0x76, 0x2a, 0xef, 0xcc, 0x6a, 0x67, 0x4c, 0xb1, 0xaa, 0x1e, 0x93,
	0xef, 0xd2, 0x9c, 0xfb, 0x0d, 0x7a, 0xe1, 0x18, 0xe5, 0x03, 0xac, 0x5a, 0x8e, 0xfb, 0x1d, 0x2a,
	0x55, 0x3b, 0x33, 0x36, 0x6b, 0x08, 0x39, 0xe6, 0xb6, 0xf3, 0xde, 0xef, 0xf7, 0xdb, 0xf7, 0xde,
	0xbc, 0xf7, 0x06, 0xcd, 0xc3, 0x25, 0x50, 0xc1, 0xab, 0x61, 0xc4, 0x04, 0xc3, 0x28, 0x60, 0x94,
	0x08, 0x16, 0x11, 0xea, 0xaf, 0x6f, 0xf8, 0x8c, 0xf9, 0x3d, 0xb0, 0xdd, 0x90, 0xd8, 0x2e, 0xa5,
	0x4c, 0xb8, 0x82, 0x30, 0xaa, 0x91, 0xeb, 0x75, 0x9f, 0x88, 0x5f, 0xfa, 0xe7, 0x55, 0x8f, 0x05,
	0x76, 0x08, 0x94, 0xbb, 0xf4, 0x82, 0xd9, 0xfc, 0x37, 0xfb, 0x12, 0x28, 0xf1, 0xc0, 0xee, 0x0b,
	0xd2, 0xe3, 0x29, 0xd5, 0x07, 0x9a, 0x65, 0xdb, 0x84, 0x7a, 0xbd, 0xfe, 0x05, 0x0c, 0x65, 0x2a,
	0x19, 0x19, 0x9f, 0xf9, 0xcc, 0x96, 0xe6, 0xf3, 0x7e, 0x57, 0x9e, 0xe4, 0x41, 0x7e, 0x69, 0xf8,
	0x17, 0x0f, 0xfc, 0x35, 0x8d, 0x31, 0x00, 0xe1, 0x6a, 0xd8, 0x57, 0x9f, 0x80, 0xc1, 0x55, 0xc8,
	0x22, 0xa1, 0x81, 0xbb, 0x9f, 0x00, 0x76, 0x09, 0xf4, 0x2e, 0xb8, 0xcd, 0xa1, 0x07, 0x9e, 0x60,
	0x91, 0x62, 0x94, 0xff, 0x35, 0xd0, 0x4c, 0x3d, 0x2d, 0x19, 0xde, 0x45, 0x46, 0xc7, 0x34, 0xb6,
	0x8c, 0xed, 0xc2, 0xde, 0x42, 0xd5, 0x0d, 0x49, 0xb5, 0x33, 0x08, 0xe1, 0x04, 0x84, 0xeb, 0xac,
	0x5c, 0xc7, 0xd6, 0xc4, 0xfb, 0xd8, 0x32, 0x92, 0xd8, 0xca, 0xef, 0x10, 0xda, 0x23, 0x14, 0x5a,
	0x46, 0x07, 0x7f, 0x83, 0x8c, 0xa6, 0x39, 0x29, 0x19, 0x4b, 0x92, 0xd1, 0x3c, 0xff, 0x15, 0x3c,
	0x21, 0x39, 0xeb, 0x19, 0xce, 0x62, 0x9a, 0xca, 0x0e, 0x0b, 0x88, 0x80, 0x20, 0x14, 0x83, 0x96,
	0xd1, 0xc4, 0x67, 0x08, 0x1d, 0x08, 0x11, 0x91, 0xf3, 0xbe, 0x00, 0x6e, 0x4e, 0x49, 0x8d, 0x27,
	0xd5, 0xdb, 0xdb, 0xaa, 0xca, 0x98, 0x6e, 0x21, 0x1f, 0x8f, 0x21, 0xa3, 0xf1, 0xaa, 0xf4, 0xe1,
	0x4d, 0xe9, 0x31, 0x2a, 0xd8, 0xbf, 0x37, 0xab, 0x1d, 0xa0, 0x2e, 0x15, 0x7f, 0xe0, 0x9c, 0xea,
	0x85, 0xf2, 0x7f, 0x53, 0x68, 0xe9, 0x8e, 0x1e, 0x6e, 0xa0, 0xd9, 0x36, 0x5c, 0x42, 0x44, 0xc4,
	0x40, 0x26, 0x3d, 0xe7, 0xec, 0xbe, 0x7b, 0x5b, 0x5a, 0x6d, 0x8b, 0xa8, 0x4e, 0xfb, 0xc1, 0xf6,
	0xd0, 0xd7, 0x80, 0x4b, 0xe8, 0x3d, 0x4b, 0x62, 0x0b, 0x73, 0x6d, 0xc9, 0xe4, 0x31, 0x52, 0xc0,
	0x5f, 0xa2, 0xe9, 0xb4, 0x5a, 0xb2, 0x18, 0x73, 0x0e, 0x4e, 0x73, 0x16, 0x83, 0x10, 0x32, 0x58,
	0xe9, 0xc7, 0x36, 0xca, 0x9f, 0x00, 0xe7, 0xae, 0x0f, 0x32, 0xe7, 0x39, 0xe7, 0x71, 0x12, 0x5b,
	0xcb, 0x81, 0x32, 0x65, 0xd0, 0x43, 0x14, 0x3e, 0x44, 0x73, 0xaa, 0xa8, 0x2d, 0xe8, 0x9a, 0xd3,
	0xb2, 0x4c, 0x8b, 0x99, 0x52, 0xb7, 0xa0, 0xeb, 0x98, 0x49, 0x6c, 0x3d, 0x62, 0xf2, 0x58, 0x89,
	0xa0, 0x9b, 0x51, 0xb9, 0xa5, 0xe2, 0x3a, 0xca, 0xb5, 0x59, 0x3f, 0xf2, 0xc0, 0x9c, 0x91, 0x22,
	0x6b, 0xf7, 0x6a, 0xad, 0xdc, 0xce, 0xa3, 0x24, 0xb6, 0x8a, 0x5c, 0x7e, 0x67, 0x94, 0x34, 0x19,
	0x3f, 0x43, 0x33, 0x35, 0xd6, 0xa7, 0xc2, 0xcc, 0x6d, 0x19, 0xdb, 0x0b, 0xce, 0x4a, 0x12, 0x5b,
	0x4b, 0x5e, 0x6a, 0xc8, 0x60, 0x15, 0x02, 0xd7, 0xd1, 0xe2, 0x21, 0x89, 0xb8, 0xe8, 0x90, 0x00,
	0xb8, 0x70, 0x83, 0xd0, 0xcc, 0xcb, 0x8c, 0x9f, 0x26, 0xb1, 0x55, 0xea, 0xa6, 0x9e, 0x8a, 0x18,
	0xba, 0x32, 0xec, 0x3b, 0x24, 0xec, 0xa0, 0x85, 0x86, 0x9b, 0x55, 0x99, 0x95, 0x2a, 0x1b, 0x49,
	0x6c, 0x99, 0x3d, 0xf7, 0x01, 0x91, 0x71, 0x4a, 0xf9, 0xef, 0x49, 0x54, 0x90, 0x39, 0xd6, 0xe5,
	0xac, 0x60, 0x07, 0xe5, 0x3b, 0x6e, 0xe4, 0x83, 0xe0, 0xa6, 0xb1, 0x35, 0xb5, 0x5d, 0xd8, 0x5b,
	0x96, 0x25, 0x55, 0xde, 0x1a, 0xa3, 0x5d, 0xe2, 0xab, 0x8b, 0x11, 0x0a, 0x95, 0xbd, 0x18, 0x4d,
	0xc4, 0x67, 0x28, 0x77, 0xc8, 0xa2, 0xc0, 0x15, 0xfa, 0xce, 0xbf, 0x7e, 0xf7, 0xb6, 0x64, 0x0d,
	0xbb, 0xe7, 0x64, 0x54, 0x5b, 0xa5, 0xa9, 0x90, 0x69, 0x1b, 0x2d, 0x77, 0xe5, 0xe7, 0xce, 0x56,
	0xa6, 0xb6, 0xca, 0x8b, 0x5f, 0xa7, 0x1d, 0xa9, 0x66, 0x53, 0x0f, 0x44, 0xb1, 0xaa, 0x66, 0xb6,
	0x3a, 0xb4, 0x3b, 0xab, 0xaa, 0x13, 0xd5, 0x69, 0xbc, 0x13, 0x95, 0x0d, 0xff, 0x88, 0xe6, 0xdb,
	0x03, 0xde, 0x63, 0xbe, 0xca, 0x43, 0xf7, 0xcc, 0x9a, 0x4c, 0x50, 0x39, 0xc6, 0xd2, 0x7c, 0x92,
	0xc4, 0xd6, 0x1a, 0x97, 0xf6, 0x8a, 0x27, 0x4d, 0x19, 0xd5, 0x31, 0xa5, 0xf2, 0x5f, 0xc3, 0x2a,
	0x9e, 0xb1, 0x1e, 0xf1, 0x06, 0x9f, 0x77, 0x5f, 0x1c, 0xa1, 0xe9, 0x76, 0x08, 0xde, 0x83, 0x9b,
	0x42, 0xc5, 0x94, 0x42, 0x9c, 0xd5, 0x54, 0x29, 0x55, 0xe1, 0x21, 0x78, 0xd9, 0x09, 0x4c, 0xbd,
	0xb8, 0x89, 0x72, 0x6d, 0xe1, 0x8a, 0x3e, 0xd7, 0x95, 0x79, 0xfa, 0x90, 0x94, 0x04, 0x39, 0xa6,
	0x16, 0x2b, 0x72, 0x79, 0x1e, 0x1b, 0x09, 0x69, 0x79, 0xb5, 0xf9, 0xe1, 0x4d, 0x69, 0x7d, 0x7c,
	0xef, 0x14, 0xe0, 0x56, 0xa7, 0xfc, 0xa7, 0xa1, 0x97, 0xcf, 0x6d, 0x88, 0xf8, 0x7b, 0x94, 0x57,
	0xb7, 0x30, 0x6c, 0xc0, 0xfb, 0xe3, 0xa8, 0xfc, 0xaa, 0x0d, 0xd5, 0x8a, 0x1f, 0x6b, 0x43, 0x4d,
	0xc7, 0x0d, 0x54, 0x3c, 0x71, 0xaf, 0x5a, 0x20, 0x80, 0xa6, 0xef, 0x51, 0xda, 0xf3, 0xba, 0x21,
	0xb7, 0x92, 0xd8, 0xda, 0x08, 0xdc, 0xab, 0x4a, 0x34, 0x74, 0xca, 0x51, 0xc9, 0x88, 0xdc, 0x63,
	0x96, 0x57, 0xd0, 0xf2, 0xbd, 0x12, 0x94, 0x07, 0xfa, 0xda, 0xf5, 0x0a, 0x78, 0x89, 0xe6, 0x6a,
	0x2c, 0x08, 0x19, 0x05, 0x2a, 0xf4, 0xe6, 0x5c, 0x4b, 0x62, 0x6b, 0xc5, 0x1b, 0x1a, 0xb3, 0x0b,
	0x68, 0x84, 0xc4, 0x2f, 0xd0, 0xec, 0x29, 0xbb, 0x80, 0x53, 0x77, 0x14, 0xa0, 0x64, 0x51, 0x76,
	0x01, 0x15, 0xea, 0x8e, 0xc5, 0x35, 0x02, 0x96, 0xbf, 0x43, 0x48, 0xfe, 0x9a, 0x37, 0x08, 0x17,
	0xd8, 0x46, 0x39, 0x75, 0x1a, 0x4d, 0xed, 0xdd, 0xa2, 0x39, 0xd3, 0xd7, 0xb1, 0x65, 0xb4, 0x34,
	0xec, 0xf9, 0xb7, 0x68, 0xf5, 0xe3, 0x93, 0x88, 0x17, 0x11, 0x6a, 0xff, 0xd4, 0x6e, 0x34, 0x8f,
	0x7e, 0x76, 0xda, 0xaf, 0x8b, 0x13, 0x18, 0xa3, 0x45, 0x7d, 0x6e, 0x1d, 0xd6, 0x5e, 0xee, 0xef,
	0xed, 0x17, 0x8d, 0xe7, 0xfb, 0x68, 0x61, 0xec, 0x15, 0xc0, 0xb3, 0x68, 0xfa, 0xf8, 0xf4, 0xb0,
	0x59, 0x9c, 0xc0, 0x05, 0x94, 0xff, 0xe1, 0xa0, 0x75, 0x7a, 0x7c, 0x7a, 0x54, 0x34, 0xf0, 0x3c,
	0x9a, 0xad, 0xb5, 0x8e, 0x3b, 0xc7, 0xb5, 0x83, 0x46, 0x71, 0xd2, 0x99, 0xbf, 0xbe, 0xd9, 0x34,
	0xde, 0xdf, 0x6c, 0x1a, 0xff, 0xdc, 0x6c, 0x1a, 0x67, 0xc6, 0x79, 0x4e, 0x3e, 0xb3, 0x2f, 0xfe,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x4f, 0x5c, 0xe7, 0x98, 0x08, 0x00, 0x00,
}
