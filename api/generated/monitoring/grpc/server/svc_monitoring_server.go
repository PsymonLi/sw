// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringApiServer is a auto generated package.
Input file: svc_monitoring.proto
*/
package monitoringApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type smonitoringSvc_monitoringBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsMonitoringV1 *eMonitoringV1Endpoints
}

type eMonitoringV1Endpoints struct {
	Svc                        smonitoringSvc_monitoringBackend
	fnAutoWatchSvcMonitoringV1 func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error

	fnAutoAddAlert                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddAlertDestination          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddAlertPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddEventPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddFlowExportPolicy          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddFwlogPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddMirrorSession             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddStatsPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddTechSupportRequest        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoAddTroubleshootingSession    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteAlert                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteAlertDestination       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteAlertPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteEventPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteFlowExportPolicy       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteFwlogPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteMirrorSession          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteStatsPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteTechSupportRequest     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteTroubleshootingSession func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetAlert                     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetAlertDestination          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetAlertPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetEventPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetFlowExportPolicy          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetFwlogPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetMirrorSession             func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetStatsPolicy               func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetTechSupportRequest        func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetTroubleshootingSession    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListAlert                    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListAlertDestination         func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListAlertPolicy              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListEventPolicy              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListFlowExportPolicy         func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListFwlogPolicy              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListMirrorSession            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListStatsPolicy              func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListTechSupportRequest       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListTroubleshootingSession   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateAlert                  func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateAlertDestination       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateAlertPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateEventPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateFlowExportPolicy       func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateFwlogPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateMirrorSession          func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateStatsPolicy            func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateTechSupportRequest     func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateTroubleshootingSession func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchEventPolicy            func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchStatsPolicy            func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchFwlogPolicy            func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchFlowExportPolicy       func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchAlert                  func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchAlertPolicy            func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchAlertDestination       func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchMirrorSession          func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchTroubleshootingSession func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	fnAutoWatchTechSupportRequest     func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *smonitoringSvc_monitoringBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for smonitoringSvc_monitoringBackend")
	s.Messages = map[string]apiserver.Message{

		"monitoring.AlertDestinationList": apisrvpkg.NewMessage("monitoring.AlertDestinationList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.AlertDestinationList{}
			into.Kind = "AlertDestinationList"
			r := monitoring.AlertDestination{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.AlertDestination")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.AlertDestinationList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.AlertDestinationList)
			return &r
		}),
		"monitoring.AlertList": apisrvpkg.NewMessage("monitoring.AlertList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.AlertList{}
			into.Kind = "AlertList"
			r := monitoring.Alert{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.Alert")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.AlertList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.AlertList)
			return &r
		}),
		"monitoring.AlertPolicyList": apisrvpkg.NewMessage("monitoring.AlertPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.AlertPolicyList{}
			into.Kind = "AlertPolicyList"
			r := monitoring.AlertPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.AlertPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.AlertPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.AlertPolicyList)
			return &r
		}),
		"monitoring.AutoMsgAlertDestinationWatchHelper":       apisrvpkg.NewMessage("monitoring.AutoMsgAlertDestinationWatchHelper"),
		"monitoring.AutoMsgAlertPolicyWatchHelper":            apisrvpkg.NewMessage("monitoring.AutoMsgAlertPolicyWatchHelper"),
		"monitoring.AutoMsgAlertWatchHelper":                  apisrvpkg.NewMessage("monitoring.AutoMsgAlertWatchHelper"),
		"monitoring.AutoMsgEventPolicyWatchHelper":            apisrvpkg.NewMessage("monitoring.AutoMsgEventPolicyWatchHelper"),
		"monitoring.AutoMsgFlowExportPolicyWatchHelper":       apisrvpkg.NewMessage("monitoring.AutoMsgFlowExportPolicyWatchHelper"),
		"monitoring.AutoMsgFwlogPolicyWatchHelper":            apisrvpkg.NewMessage("monitoring.AutoMsgFwlogPolicyWatchHelper"),
		"monitoring.AutoMsgMirrorSessionWatchHelper":          apisrvpkg.NewMessage("monitoring.AutoMsgMirrorSessionWatchHelper"),
		"monitoring.AutoMsgStatsPolicyWatchHelper":            apisrvpkg.NewMessage("monitoring.AutoMsgStatsPolicyWatchHelper"),
		"monitoring.AutoMsgTechSupportRequestWatchHelper":     apisrvpkg.NewMessage("monitoring.AutoMsgTechSupportRequestWatchHelper"),
		"monitoring.AutoMsgTroubleshootingSessionWatchHelper": apisrvpkg.NewMessage("monitoring.AutoMsgTroubleshootingSessionWatchHelper"),
		"monitoring.EventPolicyList": apisrvpkg.NewMessage("monitoring.EventPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.EventPolicyList{}
			into.Kind = "EventPolicyList"
			r := monitoring.EventPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.EventPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.EventPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.EventPolicyList)
			return &r
		}),
		"monitoring.FlowExportPolicyList": apisrvpkg.NewMessage("monitoring.FlowExportPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.FlowExportPolicyList{}
			into.Kind = "FlowExportPolicyList"
			r := monitoring.FlowExportPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.FlowExportPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.FlowExportPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.FlowExportPolicyList)
			return &r
		}),
		"monitoring.FwlogPolicyList": apisrvpkg.NewMessage("monitoring.FwlogPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.FwlogPolicyList{}
			into.Kind = "FwlogPolicyList"
			r := monitoring.FwlogPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.FwlogPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.FwlogPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.FwlogPolicyList)
			return &r
		}),
		"monitoring.MirrorSessionList": apisrvpkg.NewMessage("monitoring.MirrorSessionList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.MirrorSessionList{}
			into.Kind = "MirrorSessionList"
			r := monitoring.MirrorSession{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.MirrorSession")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.MirrorSessionList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.MirrorSessionList)
			return &r
		}),
		"monitoring.StatsPolicyList": apisrvpkg.NewMessage("monitoring.StatsPolicyList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.StatsPolicyList{}
			into.Kind = "StatsPolicyList"
			r := monitoring.StatsPolicy{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.StatsPolicy")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.StatsPolicyList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.StatsPolicyList)
			return &r
		}),
		"monitoring.TechSupportRequestList": apisrvpkg.NewMessage("monitoring.TechSupportRequestList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.TechSupportRequestList{}
			into.Kind = "TechSupportRequestList"
			r := monitoring.TechSupportRequest{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.TechSupportRequest")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.TechSupportRequestList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.TechSupportRequestList)
			return &r
		}),
		"monitoring.TroubleshootingSessionList": apisrvpkg.NewMessage("monitoring.TroubleshootingSessionList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.TroubleshootingSessionList{}
			into.Kind = "TroubleshootingSessionList"
			r := monitoring.TroubleshootingSession{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			ctx = apiutils.SetVar(ctx, "ObjKind", "monitoring.TroubleshootingSession")
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}
			return into, nil
		}).WithSelfLinkWriter(func(path, ver, prefix string, i interface{}) (interface{}, error) {
			r := i.(monitoring.TroubleshootingSessionList)
			r.APIVersion = ver
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("configs", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object {
			r := i.(monitoring.TroubleshootingSessionList)
			return &r
		}),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("monitoring", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *smonitoringSvc_monitoringBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("monitoring.MonitoringV1")
		s.endpointsMonitoringV1.fnAutoWatchSvcMonitoringV1 = srv.WatchFromKv

		s.endpointsMonitoringV1.fnAutoAddAlert = srv.AddMethod("AutoAddAlert",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.Alert"], pkgMessages["monitoring.Alert"], "monitoring", "AutoAddAlert")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddAlertDestination = srv.AddMethod("AutoAddAlertDestination",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertDestination"], pkgMessages["monitoring.AlertDestination"], "monitoring", "AutoAddAlertDestination")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddAlertPolicy = srv.AddMethod("AutoAddAlertPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertPolicy"], pkgMessages["monitoring.AlertPolicy"], "monitoring", "AutoAddAlertPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddEventPolicy = srv.AddMethod("AutoAddEventPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.EventPolicy"], pkgMessages["monitoring.EventPolicy"], "monitoring", "AutoAddEventPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.EventPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/event-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddFlowExportPolicy = srv.AddMethod("AutoAddFlowExportPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FlowExportPolicy"], pkgMessages["monitoring.FlowExportPolicy"], "monitoring", "AutoAddFlowExportPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FlowExportPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/flowExportPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddFwlogPolicy = srv.AddMethod("AutoAddFwlogPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FwlogPolicy"], pkgMessages["monitoring.FwlogPolicy"], "monitoring", "AutoAddFwlogPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FwlogPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/fwlogPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddMirrorSession = srv.AddMethod("AutoAddMirrorSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "monitoring", "AutoAddMirrorSession")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddStatsPolicy = srv.AddMethod("AutoAddStatsPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.StatsPolicy"], pkgMessages["monitoring.StatsPolicy"], "monitoring", "AutoAddStatsPolicy")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddTechSupportRequest = srv.AddMethod("AutoAddTechSupportRequest",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TechSupportRequest"], pkgMessages["monitoring.TechSupportRequest"], "monitoring", "AutoAddTechSupportRequest")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TechSupportRequest)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/techsupport/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoAddTroubleshootingSession = srv.AddMethod("AutoAddTroubleshootingSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TroubleshootingSession"], pkgMessages["monitoring.TroubleshootingSession"], "monitoring", "AutoAddTroubleshootingSession")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TroubleshootingSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteAlert = srv.AddMethod("AutoDeleteAlert",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.Alert"], pkgMessages["monitoring.Alert"], "monitoring", "AutoDeleteAlert")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteAlertDestination = srv.AddMethod("AutoDeleteAlertDestination",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertDestination"], pkgMessages["monitoring.AlertDestination"], "monitoring", "AutoDeleteAlertDestination")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteAlertPolicy = srv.AddMethod("AutoDeleteAlertPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertPolicy"], pkgMessages["monitoring.AlertPolicy"], "monitoring", "AutoDeleteAlertPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteEventPolicy = srv.AddMethod("AutoDeleteEventPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.EventPolicy"], pkgMessages["monitoring.EventPolicy"], "monitoring", "AutoDeleteEventPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.EventPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/event-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteFlowExportPolicy = srv.AddMethod("AutoDeleteFlowExportPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FlowExportPolicy"], pkgMessages["monitoring.FlowExportPolicy"], "monitoring", "AutoDeleteFlowExportPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FlowExportPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/flowExportPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteFwlogPolicy = srv.AddMethod("AutoDeleteFwlogPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FwlogPolicy"], pkgMessages["monitoring.FwlogPolicy"], "monitoring", "AutoDeleteFwlogPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FwlogPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/fwlogPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteMirrorSession = srv.AddMethod("AutoDeleteMirrorSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "monitoring", "AutoDeleteMirrorSession")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteStatsPolicy = srv.AddMethod("AutoDeleteStatsPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.StatsPolicy"], pkgMessages["monitoring.StatsPolicy"], "monitoring", "AutoDeleteStatsPolicy")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteTechSupportRequest = srv.AddMethod("AutoDeleteTechSupportRequest",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TechSupportRequest"], pkgMessages["monitoring.TechSupportRequest"], "monitoring", "AutoDeleteTechSupportRequest")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TechSupportRequest)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/techsupport/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoDeleteTroubleshootingSession = srv.AddMethod("AutoDeleteTroubleshootingSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TroubleshootingSession"], pkgMessages["monitoring.TroubleshootingSession"], "monitoring", "AutoDeleteTroubleshootingSession")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TroubleshootingSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetAlert = srv.AddMethod("AutoGetAlert",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.Alert"], pkgMessages["monitoring.Alert"], "monitoring", "AutoGetAlert")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.Alert)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alerts/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetAlertDestination = srv.AddMethod("AutoGetAlertDestination",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertDestination"], pkgMessages["monitoring.AlertDestination"], "monitoring", "AutoGetAlertDestination")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetAlertPolicy = srv.AddMethod("AutoGetAlertPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertPolicy"], pkgMessages["monitoring.AlertPolicy"], "monitoring", "AutoGetAlertPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetEventPolicy = srv.AddMethod("AutoGetEventPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.EventPolicy"], pkgMessages["monitoring.EventPolicy"], "monitoring", "AutoGetEventPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.EventPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/event-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetFlowExportPolicy = srv.AddMethod("AutoGetFlowExportPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FlowExportPolicy"], pkgMessages["monitoring.FlowExportPolicy"], "monitoring", "AutoGetFlowExportPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FlowExportPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/flowExportPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetFwlogPolicy = srv.AddMethod("AutoGetFwlogPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FwlogPolicy"], pkgMessages["monitoring.FwlogPolicy"], "monitoring", "AutoGetFwlogPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FwlogPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/fwlogPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetMirrorSession = srv.AddMethod("AutoGetMirrorSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "monitoring", "AutoGetMirrorSession")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetStatsPolicy = srv.AddMethod("AutoGetStatsPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.StatsPolicy"], pkgMessages["monitoring.StatsPolicy"], "monitoring", "AutoGetStatsPolicy")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.StatsPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/statsPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetTechSupportRequest = srv.AddMethod("AutoGetTechSupportRequest",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TechSupportRequest"], pkgMessages["monitoring.TechSupportRequest"], "monitoring", "AutoGetTechSupportRequest")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TechSupportRequest)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/techsupport/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoGetTroubleshootingSession = srv.AddMethod("AutoGetTroubleshootingSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TroubleshootingSession"], pkgMessages["monitoring.TroubleshootingSession"], "monitoring", "AutoGetTroubleshootingSession")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TroubleshootingSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListAlert = srv.AddMethod("AutoListAlert",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.AlertList"], "monitoring", "AutoListAlert")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alerts/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListAlertDestination = srv.AddMethod("AutoListAlertDestination",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.AlertDestinationList"], "monitoring", "AutoListAlertDestination")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListAlertPolicy = srv.AddMethod("AutoListAlertPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.AlertPolicyList"], "monitoring", "AutoListAlertPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListEventPolicy = srv.AddMethod("AutoListEventPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.EventPolicyList"], "monitoring", "AutoListEventPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/event-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListFlowExportPolicy = srv.AddMethod("AutoListFlowExportPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.FlowExportPolicyList"], "monitoring", "AutoListFlowExportPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/flowExportPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListFwlogPolicy = srv.AddMethod("AutoListFwlogPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.FwlogPolicyList"], "monitoring", "AutoListFwlogPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/fwlogPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListMirrorSession = srv.AddMethod("AutoListMirrorSession",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.MirrorSessionList"], "monitoring", "AutoListMirrorSession")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListStatsPolicy = srv.AddMethod("AutoListStatsPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.StatsPolicyList"], "monitoring", "AutoListStatsPolicy")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/statsPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListTechSupportRequest = srv.AddMethod("AutoListTechSupportRequest",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.TechSupportRequestList"], "monitoring", "AutoListTechSupportRequest")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/techsupport/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoListTroubleshootingSession = srv.AddMethod("AutoListTroubleshootingSession",
			apisrvpkg.NewMethod(srv, pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.TroubleshootingSessionList"], "monitoring", "AutoListTroubleshootingSession")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateAlert = srv.AddMethod("AutoUpdateAlert",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.Alert"], pkgMessages["monitoring.Alert"], "monitoring", "AutoUpdateAlert")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.Alert)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alerts/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateAlertDestination = srv.AddMethod("AutoUpdateAlertDestination",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertDestination"], pkgMessages["monitoring.AlertDestination"], "monitoring", "AutoUpdateAlertDestination")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertDestination)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertDestinations/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateAlertPolicy = srv.AddMethod("AutoUpdateAlertPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.AlertPolicy"], pkgMessages["monitoring.AlertPolicy"], "monitoring", "AutoUpdateAlertPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.AlertPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/alertPolicies/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateEventPolicy = srv.AddMethod("AutoUpdateEventPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.EventPolicy"], pkgMessages["monitoring.EventPolicy"], "monitoring", "AutoUpdateEventPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.EventPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/event-policy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateFlowExportPolicy = srv.AddMethod("AutoUpdateFlowExportPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FlowExportPolicy"], pkgMessages["monitoring.FlowExportPolicy"], "monitoring", "AutoUpdateFlowExportPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FlowExportPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/flowExportPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateFwlogPolicy = srv.AddMethod("AutoUpdateFwlogPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.FwlogPolicy"], pkgMessages["monitoring.FwlogPolicy"], "monitoring", "AutoUpdateFwlogPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.FwlogPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/fwlogPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateMirrorSession = srv.AddMethod("AutoUpdateMirrorSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "monitoring", "AutoUpdateMirrorSession")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateStatsPolicy = srv.AddMethod("AutoUpdateStatsPolicy",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.StatsPolicy"], pkgMessages["monitoring.StatsPolicy"], "monitoring", "AutoUpdateStatsPolicy")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.StatsPolicy)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/statsPolicy/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateTechSupportRequest = srv.AddMethod("AutoUpdateTechSupportRequest",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TechSupportRequest"], pkgMessages["monitoring.TechSupportRequest"], "monitoring", "AutoUpdateTechSupportRequest")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			return "", fmt.Errorf("not rest endpoint")
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoUpdateTroubleshootingSession = srv.AddMethod("AutoUpdateTroubleshootingSession",
			apisrvpkg.NewMethod(srv, pkgMessages["monitoring.TroubleshootingSession"], pkgMessages["monitoring.TroubleshootingSession"], "monitoring", "AutoUpdateTroubleshootingSession")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.TroubleshootingSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", "monitoring/v1/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMonitoringV1.fnAutoWatchEventPolicy = pkgMessages["monitoring.EventPolicy"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchStatsPolicy = pkgMessages["monitoring.StatsPolicy"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchFwlogPolicy = pkgMessages["monitoring.FwlogPolicy"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchFlowExportPolicy = pkgMessages["monitoring.FlowExportPolicy"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchAlert = pkgMessages["monitoring.Alert"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchAlertPolicy = pkgMessages["monitoring.AlertPolicy"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchAlertDestination = pkgMessages["monitoring.AlertDestination"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchMirrorSession = pkgMessages["monitoring.MirrorSession"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchTroubleshootingSession = pkgMessages["monitoring.TroubleshootingSession"].WatchFromKv

		s.endpointsMonitoringV1.fnAutoWatchTechSupportRequest = pkgMessages["monitoring.TechSupportRequest"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"monitoring.MonitoringV1": srv,
		}
		apisrv.RegisterService("monitoring.MonitoringV1", srv)
		endpoints := monitoring.MakeMonitoringV1ServerEndpoints(s.endpointsMonitoringV1, logger)
		server := monitoring.MakeGRPCServerMonitoringV1(ctx, endpoints, logger)
		monitoring.RegisterMonitoringV1Server(grpcserver.GrpcServer, server)
	}
}

func (s *smonitoringSvc_monitoringBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		// Service watcher
		svc := s.Services["monitoring.MonitoringV1"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				key := globals.ConfigRootPrefix + "/monitoring"
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				defer cancel()
				watcher, err := kvs.WatchFiltered(nctx, key, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "error", err, "service", "MonitoringV1")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		pkgMessages["monitoring.EventPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.EventPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchEventPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.EventPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.EventPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.EventPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgEventPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.EventPolicy")
					return err
				}
				events = &monitoring.AutoMsgEventPolicyWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.EventPolicy")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.EventPolicy")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.EventPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.EventPolicy)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgEventPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received EventPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "EventPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.EventPolicy")
							break
						}
						strEvent.Object = i.(*monitoring.EventPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.EventPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.StatsPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.StatsPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchStatsPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.StatsPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.StatsPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.StatsPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgStatsPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.StatsPolicy")
					return err
				}
				events = &monitoring.AutoMsgStatsPolicyWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.StatsPolicy")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.StatsPolicy")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.StatsPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.StatsPolicy)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgStatsPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received StatsPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "StatsPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.StatsPolicy")
							break
						}
						strEvent.Object = i.(*monitoring.StatsPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.StatsPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.FwlogPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.FwlogPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchFwlogPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.FwlogPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.FwlogPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.FwlogPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgFwlogPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.FwlogPolicy")
					return err
				}
				events = &monitoring.AutoMsgFwlogPolicyWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.FwlogPolicy")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.FwlogPolicy")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.FwlogPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.FwlogPolicy)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgFwlogPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received FwlogPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "FwlogPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.FwlogPolicy")
							break
						}
						strEvent.Object = i.(*monitoring.FwlogPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.FwlogPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.FlowExportPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.FlowExportPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchFlowExportPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.FlowExportPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.FlowExportPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.FlowExportPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgFlowExportPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.FlowExportPolicy")
					return err
				}
				events = &monitoring.AutoMsgFlowExportPolicyWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.FlowExportPolicy")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.FlowExportPolicy")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.FlowExportPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.FlowExportPolicy)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgFlowExportPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received FlowExportPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "FlowExportPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.FlowExportPolicy")
							break
						}
						strEvent.Object = i.(*monitoring.FlowExportPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.FlowExportPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.Alert"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.Alert{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchAlertServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.Alert")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.Alert")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.Alert")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgAlertWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.Alert")
					return err
				}
				events = &monitoring.AutoMsgAlertWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.Alert")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.Alert")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.Alert)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.Alert)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgAlertWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received Alert watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "Alert", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.Alert")
							break
						}
						strEvent.Object = i.(*monitoring.Alert)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.Alert")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.AlertPolicy"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.AlertPolicy{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchAlertPolicyServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.AlertPolicy")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.AlertPolicy")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.AlertPolicy")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgAlertPolicyWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.AlertPolicy")
					return err
				}
				events = &monitoring.AutoMsgAlertPolicyWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.AlertPolicy")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.AlertPolicy")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.AlertPolicy)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.AlertPolicy)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgAlertPolicyWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received AlertPolicy watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "AlertPolicy", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.AlertPolicy")
							break
						}
						strEvent.Object = i.(*monitoring.AlertPolicy)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.AlertPolicy")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.AlertDestination"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.AlertDestination{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchAlertDestinationServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.AlertDestination")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.AlertDestination")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.AlertDestination")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgAlertDestinationWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.AlertDestination")
					return err
				}
				events = &monitoring.AutoMsgAlertDestinationWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.AlertDestination")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.AlertDestination")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.AlertDestination)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.AlertDestination)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgAlertDestinationWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received AlertDestination watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "AlertDestination", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.AlertDestination")
							break
						}
						strEvent.Object = i.(*monitoring.AlertDestination)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.AlertDestination")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.MirrorSession"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.MirrorSession{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchMirrorSessionServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.MirrorSession")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.MirrorSession")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.MirrorSession")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgMirrorSessionWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.MirrorSession")
					return err
				}
				events = &monitoring.AutoMsgMirrorSessionWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.MirrorSession")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.MirrorSession")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.MirrorSession)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.MirrorSession)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgMirrorSessionWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received MirrorSession watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "MirrorSession", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.MirrorSession")
							break
						}
						strEvent.Object = i.(*monitoring.MirrorSession)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.MirrorSession")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.TroubleshootingSession"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.TroubleshootingSession{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchTroubleshootingSessionServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.TroubleshootingSession")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.TroubleshootingSession")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.TroubleshootingSession")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgTroubleshootingSessionWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.TroubleshootingSession")
					return err
				}
				events = &monitoring.AutoMsgTroubleshootingSessionWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.TroubleshootingSession")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.TroubleshootingSession")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.TroubleshootingSession)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.TroubleshootingSession)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgTroubleshootingSessionWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received TroubleshootingSession watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "TroubleshootingSession", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.TroubleshootingSession")
							break
						}
						strEvent.Object = i.(*monitoring.TroubleshootingSession)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.TroubleshootingSession")
					return wstream.Context().Err()
				}
			}
		})

		pkgMessages["monitoring.TechSupportRequest"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.TechSupportRequest{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MonitoringV1_AutoWatchTechSupportRequestServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			nctx = apiutils.SetVar(nctx, "ObjKind", "monitoring.TechSupportRequest")
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "object", "monitoring.TechSupportRequest")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "monitoring.TechSupportRequest")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgTechSupportRequestWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "monitoring.TechSupportRequest")
					return err
				}
				events = &monitoring.AutoMsgTechSupportRequestWatchHelper{}
				return nil
			}
			defer l.InfoLog("msg", "exiting watcher", "service", "monitoring.TechSupportRequest")
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "monitoring.TechSupportRequest")
						return nil
					}
					evin, ok := ev.Object.(*monitoring.TechSupportRequest)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					// XXX-TODO(sanjayt): Avoid a copy and update selflink at enqueue.
					cin, err := evin.Clone(nil)
					if err != nil {
						return fmt.Errorf("unable to clone object (%s)", err)
					}
					in := cin.(*monitoring.TechSupportRequest)
					in.SelfLink = in.MakeURI(globals.ConfigURIPrefix, "v1", "monitoring")

					strEvent := &monitoring.AutoMsgTechSupportRequestWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received TechSupportRequest watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "TechSupportRequest", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "monitoring.TechSupportRequest")
							break
						}
						strEvent.Object = i.(*monitoring.TechSupportRequest)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "monitoring.TechSupportRequest")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *smonitoringSvc_monitoringBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *smonitoringSvc_monitoringBackend) Reset() {
	cleanupRegistration()
}

func (e *eMonitoringV1Endpoints) AutoAddAlert(ctx context.Context, t monitoring.Alert) (monitoring.Alert, error) {
	r, err := e.fnAutoAddAlert(ctx, t)
	if err == nil {
		return r.(monitoring.Alert), err
	}
	return monitoring.Alert{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddAlertDestination(ctx context.Context, t monitoring.AlertDestination) (monitoring.AlertDestination, error) {
	r, err := e.fnAutoAddAlertDestination(ctx, t)
	if err == nil {
		return r.(monitoring.AlertDestination), err
	}
	return monitoring.AlertDestination{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddAlertPolicy(ctx context.Context, t monitoring.AlertPolicy) (monitoring.AlertPolicy, error) {
	r, err := e.fnAutoAddAlertPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.AlertPolicy), err
	}
	return monitoring.AlertPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddEventPolicy(ctx context.Context, t monitoring.EventPolicy) (monitoring.EventPolicy, error) {
	r, err := e.fnAutoAddEventPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.EventPolicy), err
	}
	return monitoring.EventPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddFlowExportPolicy(ctx context.Context, t monitoring.FlowExportPolicy) (monitoring.FlowExportPolicy, error) {
	r, err := e.fnAutoAddFlowExportPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FlowExportPolicy), err
	}
	return monitoring.FlowExportPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddFwlogPolicy(ctx context.Context, t monitoring.FwlogPolicy) (monitoring.FwlogPolicy, error) {
	r, err := e.fnAutoAddFwlogPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FwlogPolicy), err
	}
	return monitoring.FwlogPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoAddMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddStatsPolicy(ctx context.Context, t monitoring.StatsPolicy) (monitoring.StatsPolicy, error) {
	r, err := e.fnAutoAddStatsPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.StatsPolicy), err
	}
	return monitoring.StatsPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddTechSupportRequest(ctx context.Context, t monitoring.TechSupportRequest) (monitoring.TechSupportRequest, error) {
	r, err := e.fnAutoAddTechSupportRequest(ctx, t)
	if err == nil {
		return r.(monitoring.TechSupportRequest), err
	}
	return monitoring.TechSupportRequest{}, err

}
func (e *eMonitoringV1Endpoints) AutoAddTroubleshootingSession(ctx context.Context, t monitoring.TroubleshootingSession) (monitoring.TroubleshootingSession, error) {
	r, err := e.fnAutoAddTroubleshootingSession(ctx, t)
	if err == nil {
		return r.(monitoring.TroubleshootingSession), err
	}
	return monitoring.TroubleshootingSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteAlert(ctx context.Context, t monitoring.Alert) (monitoring.Alert, error) {
	r, err := e.fnAutoDeleteAlert(ctx, t)
	if err == nil {
		return r.(monitoring.Alert), err
	}
	return monitoring.Alert{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteAlertDestination(ctx context.Context, t monitoring.AlertDestination) (monitoring.AlertDestination, error) {
	r, err := e.fnAutoDeleteAlertDestination(ctx, t)
	if err == nil {
		return r.(monitoring.AlertDestination), err
	}
	return monitoring.AlertDestination{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteAlertPolicy(ctx context.Context, t monitoring.AlertPolicy) (monitoring.AlertPolicy, error) {
	r, err := e.fnAutoDeleteAlertPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.AlertPolicy), err
	}
	return monitoring.AlertPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteEventPolicy(ctx context.Context, t monitoring.EventPolicy) (monitoring.EventPolicy, error) {
	r, err := e.fnAutoDeleteEventPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.EventPolicy), err
	}
	return monitoring.EventPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteFlowExportPolicy(ctx context.Context, t monitoring.FlowExportPolicy) (monitoring.FlowExportPolicy, error) {
	r, err := e.fnAutoDeleteFlowExportPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FlowExportPolicy), err
	}
	return monitoring.FlowExportPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteFwlogPolicy(ctx context.Context, t monitoring.FwlogPolicy) (monitoring.FwlogPolicy, error) {
	r, err := e.fnAutoDeleteFwlogPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FwlogPolicy), err
	}
	return monitoring.FwlogPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoDeleteMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteStatsPolicy(ctx context.Context, t monitoring.StatsPolicy) (monitoring.StatsPolicy, error) {
	r, err := e.fnAutoDeleteStatsPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.StatsPolicy), err
	}
	return monitoring.StatsPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteTechSupportRequest(ctx context.Context, t monitoring.TechSupportRequest) (monitoring.TechSupportRequest, error) {
	r, err := e.fnAutoDeleteTechSupportRequest(ctx, t)
	if err == nil {
		return r.(monitoring.TechSupportRequest), err
	}
	return monitoring.TechSupportRequest{}, err

}
func (e *eMonitoringV1Endpoints) AutoDeleteTroubleshootingSession(ctx context.Context, t monitoring.TroubleshootingSession) (monitoring.TroubleshootingSession, error) {
	r, err := e.fnAutoDeleteTroubleshootingSession(ctx, t)
	if err == nil {
		return r.(monitoring.TroubleshootingSession), err
	}
	return monitoring.TroubleshootingSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetAlert(ctx context.Context, t monitoring.Alert) (monitoring.Alert, error) {
	r, err := e.fnAutoGetAlert(ctx, t)
	if err == nil {
		return r.(monitoring.Alert), err
	}
	return monitoring.Alert{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetAlertDestination(ctx context.Context, t monitoring.AlertDestination) (monitoring.AlertDestination, error) {
	r, err := e.fnAutoGetAlertDestination(ctx, t)
	if err == nil {
		return r.(monitoring.AlertDestination), err
	}
	return monitoring.AlertDestination{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetAlertPolicy(ctx context.Context, t monitoring.AlertPolicy) (monitoring.AlertPolicy, error) {
	r, err := e.fnAutoGetAlertPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.AlertPolicy), err
	}
	return monitoring.AlertPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetEventPolicy(ctx context.Context, t monitoring.EventPolicy) (monitoring.EventPolicy, error) {
	r, err := e.fnAutoGetEventPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.EventPolicy), err
	}
	return monitoring.EventPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetFlowExportPolicy(ctx context.Context, t monitoring.FlowExportPolicy) (monitoring.FlowExportPolicy, error) {
	r, err := e.fnAutoGetFlowExportPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FlowExportPolicy), err
	}
	return monitoring.FlowExportPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetFwlogPolicy(ctx context.Context, t monitoring.FwlogPolicy) (monitoring.FwlogPolicy, error) {
	r, err := e.fnAutoGetFwlogPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FwlogPolicy), err
	}
	return monitoring.FwlogPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoGetMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetStatsPolicy(ctx context.Context, t monitoring.StatsPolicy) (monitoring.StatsPolicy, error) {
	r, err := e.fnAutoGetStatsPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.StatsPolicy), err
	}
	return monitoring.StatsPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetTechSupportRequest(ctx context.Context, t monitoring.TechSupportRequest) (monitoring.TechSupportRequest, error) {
	r, err := e.fnAutoGetTechSupportRequest(ctx, t)
	if err == nil {
		return r.(monitoring.TechSupportRequest), err
	}
	return monitoring.TechSupportRequest{}, err

}
func (e *eMonitoringV1Endpoints) AutoGetTroubleshootingSession(ctx context.Context, t monitoring.TroubleshootingSession) (monitoring.TroubleshootingSession, error) {
	r, err := e.fnAutoGetTroubleshootingSession(ctx, t)
	if err == nil {
		return r.(monitoring.TroubleshootingSession), err
	}
	return monitoring.TroubleshootingSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoListAlert(ctx context.Context, t api.ListWatchOptions) (monitoring.AlertList, error) {
	r, err := e.fnAutoListAlert(ctx, t)
	if err == nil {
		return r.(monitoring.AlertList), err
	}
	return monitoring.AlertList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListAlertDestination(ctx context.Context, t api.ListWatchOptions) (monitoring.AlertDestinationList, error) {
	r, err := e.fnAutoListAlertDestination(ctx, t)
	if err == nil {
		return r.(monitoring.AlertDestinationList), err
	}
	return monitoring.AlertDestinationList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListAlertPolicy(ctx context.Context, t api.ListWatchOptions) (monitoring.AlertPolicyList, error) {
	r, err := e.fnAutoListAlertPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.AlertPolicyList), err
	}
	return monitoring.AlertPolicyList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListEventPolicy(ctx context.Context, t api.ListWatchOptions) (monitoring.EventPolicyList, error) {
	r, err := e.fnAutoListEventPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.EventPolicyList), err
	}
	return monitoring.EventPolicyList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListFlowExportPolicy(ctx context.Context, t api.ListWatchOptions) (monitoring.FlowExportPolicyList, error) {
	r, err := e.fnAutoListFlowExportPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FlowExportPolicyList), err
	}
	return monitoring.FlowExportPolicyList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListFwlogPolicy(ctx context.Context, t api.ListWatchOptions) (monitoring.FwlogPolicyList, error) {
	r, err := e.fnAutoListFwlogPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FwlogPolicyList), err
	}
	return monitoring.FwlogPolicyList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListMirrorSession(ctx context.Context, t api.ListWatchOptions) (monitoring.MirrorSessionList, error) {
	r, err := e.fnAutoListMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSessionList), err
	}
	return monitoring.MirrorSessionList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListStatsPolicy(ctx context.Context, t api.ListWatchOptions) (monitoring.StatsPolicyList, error) {
	r, err := e.fnAutoListStatsPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.StatsPolicyList), err
	}
	return monitoring.StatsPolicyList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListTechSupportRequest(ctx context.Context, t api.ListWatchOptions) (monitoring.TechSupportRequestList, error) {
	r, err := e.fnAutoListTechSupportRequest(ctx, t)
	if err == nil {
		return r.(monitoring.TechSupportRequestList), err
	}
	return monitoring.TechSupportRequestList{}, err

}
func (e *eMonitoringV1Endpoints) AutoListTroubleshootingSession(ctx context.Context, t api.ListWatchOptions) (monitoring.TroubleshootingSessionList, error) {
	r, err := e.fnAutoListTroubleshootingSession(ctx, t)
	if err == nil {
		return r.(monitoring.TroubleshootingSessionList), err
	}
	return monitoring.TroubleshootingSessionList{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateAlert(ctx context.Context, t monitoring.Alert) (monitoring.Alert, error) {
	r, err := e.fnAutoUpdateAlert(ctx, t)
	if err == nil {
		return r.(monitoring.Alert), err
	}
	return monitoring.Alert{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateAlertDestination(ctx context.Context, t monitoring.AlertDestination) (monitoring.AlertDestination, error) {
	r, err := e.fnAutoUpdateAlertDestination(ctx, t)
	if err == nil {
		return r.(monitoring.AlertDestination), err
	}
	return monitoring.AlertDestination{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateAlertPolicy(ctx context.Context, t monitoring.AlertPolicy) (monitoring.AlertPolicy, error) {
	r, err := e.fnAutoUpdateAlertPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.AlertPolicy), err
	}
	return monitoring.AlertPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateEventPolicy(ctx context.Context, t monitoring.EventPolicy) (monitoring.EventPolicy, error) {
	r, err := e.fnAutoUpdateEventPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.EventPolicy), err
	}
	return monitoring.EventPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateFlowExportPolicy(ctx context.Context, t monitoring.FlowExportPolicy) (monitoring.FlowExportPolicy, error) {
	r, err := e.fnAutoUpdateFlowExportPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FlowExportPolicy), err
	}
	return monitoring.FlowExportPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateFwlogPolicy(ctx context.Context, t monitoring.FwlogPolicy) (monitoring.FwlogPolicy, error) {
	r, err := e.fnAutoUpdateFwlogPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.FwlogPolicy), err
	}
	return monitoring.FwlogPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoUpdateMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateStatsPolicy(ctx context.Context, t monitoring.StatsPolicy) (monitoring.StatsPolicy, error) {
	r, err := e.fnAutoUpdateStatsPolicy(ctx, t)
	if err == nil {
		return r.(monitoring.StatsPolicy), err
	}
	return monitoring.StatsPolicy{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateTechSupportRequest(ctx context.Context, t monitoring.TechSupportRequest) (monitoring.TechSupportRequest, error) {
	r, err := e.fnAutoUpdateTechSupportRequest(ctx, t)
	if err == nil {
		return r.(monitoring.TechSupportRequest), err
	}
	return monitoring.TechSupportRequest{}, err

}
func (e *eMonitoringV1Endpoints) AutoUpdateTroubleshootingSession(ctx context.Context, t monitoring.TroubleshootingSession) (monitoring.TroubleshootingSession, error) {
	r, err := e.fnAutoUpdateTroubleshootingSession(ctx, t)
	if err == nil {
		return r.(monitoring.TroubleshootingSession), err
	}
	return monitoring.TroubleshootingSession{}, err

}

func (e *eMonitoringV1Endpoints) AutoWatchEventPolicy(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchEventPolicyServer) error {
	return e.fnAutoWatchEventPolicy(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchStatsPolicyServer) error {
	return e.fnAutoWatchStatsPolicy(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchFwlogPolicyServer) error {
	return e.fnAutoWatchFwlogPolicy(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchFlowExportPolicyServer) error {
	return e.fnAutoWatchFlowExportPolicy(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchAlert(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchAlertServer) error {
	return e.fnAutoWatchAlert(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchAlertPolicyServer) error {
	return e.fnAutoWatchAlertPolicy(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchAlertDestination(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchAlertDestinationServer) error {
	return e.fnAutoWatchAlertDestination(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchMirrorSession(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchMirrorSessionServer) error {
	return e.fnAutoWatchMirrorSession(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchTroubleshootingSession(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchTroubleshootingSessionServer) error {
	return e.fnAutoWatchTroubleshootingSession(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchTechSupportRequest(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchTechSupportRequestServer) error {
	return e.fnAutoWatchTechSupportRequest(in, stream, "monitoring")
}
func (e *eMonitoringV1Endpoints) AutoWatchSvcMonitoringV1(in *api.ListWatchOptions, stream monitoring.MonitoringV1_AutoWatchSvcMonitoringV1Server) error {
	return e.fnAutoWatchSvcMonitoringV1(in, stream, "")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := smonitoringSvc_monitoringBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eMonitoringV1Endpoints{Svc: svc}
		svc.endpointsMonitoringV1 = &e
	}
	apisrv.Register("monitoring.svc_monitoring.proto", &svc)
}
