// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringApiServer is a auto generated package.
Input file: mirror.proto
*/
package monitoringApiServer

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"
	"github.com/satori/go.uuid"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
)

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type smonitoringMirrorBackend struct {
	Services map[string]apiserver.Service
	Messages map[string]apiserver.Message
	logger   log.Logger
	scheme   *runtime.Scheme

	endpointsMirrorSessionV1 *eMirrorSessionV1Endpoints
}

type eMirrorSessionV1Endpoints struct {
	Svc smonitoringMirrorBackend

	fnAutoAddMirrorSession    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoDeleteMirrorSession func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoGetMirrorSession    func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoListMirrorSession   func(ctx context.Context, t interface{}) (interface{}, error)
	fnAutoUpdateMirrorSession func(ctx context.Context, t interface{}) (interface{}, error)

	fnAutoWatchMirrorSession func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
}

func (s *smonitoringMirrorBackend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for smonitoringMirrorBackend")
	s.Messages = map[string]apiserver.Message{

		"monitoring.AppProtoSelector":                apisrvpkg.NewMessage("monitoring.AppProtoSelector"),
		"monitoring.AutoMsgMirrorSessionWatchHelper": apisrvpkg.NewMessage("monitoring.AutoMsgMirrorSessionWatchHelper"),
		"monitoring.MatchRule":                       apisrvpkg.NewMessage("monitoring.MatchRule"),
		"monitoring.MatchSelector":                   apisrvpkg.NewMessage("monitoring.MatchSelector"),
		"monitoring.MirrorCollector":                 apisrvpkg.NewMessage("monitoring.MirrorCollector"),
		"monitoring.MirrorSession": apisrvpkg.NewMessage("monitoring.MirrorSession").WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := monitoring.MirrorSession{}
				return r.MakeKey(prefix)
			}
			r := i.(monitoring.MirrorSession)
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.(monitoring.MirrorSession)
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create, ignoreStatus bool) (interface{}, error) {
			r := i.(monitoring.MirrorSession)
			key := r.MakeKey(prefix)
			r.Kind = "MirrorSession"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if ignoreStatus {
					updateFunc := func(obj runtime.Object) (runtime.Object, error) {
						saved := obj.(*monitoring.MirrorSession)
						if r.ResourceVersion != "" && r.ResourceVersion != saved.ResourceVersion {
							return nil, fmt.Errorf("Resource Version specified does not match Object version")
						}
						r.Status = saved.Status
						return &r, nil
					}
					into := &monitoring.MirrorSession{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFunc)
				} else {
					if r.ResourceVersion != "" {
						l.Infof("resource version is specified %s\n", r.ResourceVersion)
						err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
					} else {
						err = kvs.Update(ctx, key, &r)
					}
					err = errors.Wrap(err, "KV update failed")
				}
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.(monitoring.MirrorSession)
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.(monitoring.MirrorSession)
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(monitoring.MirrorSession)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.(monitoring.MirrorSession)
			var err error
			ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithSelfLinkWriter(func(path string, i interface{}) (interface{}, error) {
			r := i.(monitoring.MirrorSession)
			r.SelfLink = path
			return r, nil
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := monitoring.MirrorSession{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := monitoring.MirrorSession{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}).WithValidate(func(i interface{}, ver string, ignoreStatus bool) error {
			r := i.(monitoring.MirrorSession)
			if !r.Validate(ver, ignoreStatus) {
				return fmt.Errorf("Default Validation failed")
			}
			return nil
		}),

		"monitoring.MirrorSessionList": apisrvpkg.NewMessage("monitoring.MirrorSessionList").WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {

			into := monitoring.MirrorSessionList{}
			r := monitoring.MirrorSession{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				return nil, err
			}
			return into, nil
		}),
		"monitoring.MirrorSessionSpec":           apisrvpkg.NewMessage("monitoring.MirrorSessionSpec"),
		"monitoring.MirrorSessionStatus":         apisrvpkg.NewMessage("monitoring.MirrorSessionStatus"),
		"monitoring.MirrorStartConditions":       apisrvpkg.NewMessage("monitoring.MirrorStartConditions"),
		"monitoring.MirrorStopConditions":        apisrvpkg.NewMessage("monitoring.MirrorStopConditions"),
		"monitoring.SmartNICMirrorSessionStatus": apisrvpkg.NewMessage("monitoring.SmartNICMirrorSessionStatus"),
		// Add a message handler for ListWatch options
		"api.ListWatchOptions": apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("monitoring", s.Messages)
	// add messages to package.
	if pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *smonitoringMirrorBackend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	{
		srv := apisrvpkg.NewService("MirrorSessionV1")

		s.endpointsMirrorSessionV1.fnAutoAddMirrorSession = srv.AddMethod("AutoAddMirrorSession",
			apisrvpkg.NewMethod(pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "MirrorSession", "AutoAddMirrorSession")).WithOper(apiserver.CreateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "MirrorSession/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMirrorSessionV1.fnAutoDeleteMirrorSession = srv.AddMethod("AutoDeleteMirrorSession",
			apisrvpkg.NewMethod(pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "MirrorSession", "AutoDeleteMirrorSession")).WithOper(apiserver.DeleteOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "MirrorSession/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMirrorSessionV1.fnAutoGetMirrorSession = srv.AddMethod("AutoGetMirrorSession",
			apisrvpkg.NewMethod(pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "MirrorSession", "AutoGetMirrorSession")).WithOper(apiserver.GetOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "MirrorSession/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMirrorSessionV1.fnAutoListMirrorSession = srv.AddMethod("AutoListMirrorSession",
			apisrvpkg.NewMethod(pkgMessages["api.ListWatchOptions"], pkgMessages["monitoring.MirrorSessionList"], "MirrorSession", "AutoListMirrorSession")).WithOper(apiserver.ListOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(api.ListWatchOptions)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "MirrorSession/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMirrorSessionV1.fnAutoUpdateMirrorSession = srv.AddMethod("AutoUpdateMirrorSession",
			apisrvpkg.NewMethod(pkgMessages["monitoring.MirrorSession"], pkgMessages["monitoring.MirrorSession"], "MirrorSession", "AutoUpdateMirrorSession")).WithOper(apiserver.UpdateOper).WithVersion("v1").WithMakeURI(func(i interface{}) (string, error) {
			in, ok := i.(monitoring.MirrorSession)
			if !ok {
				return "", fmt.Errorf("wrong type")
			}
			return fmt.Sprint("/v1/", "MirrorSession/", in.Tenant, "/MirrorSession/", in.Name), nil
		}).HandleInvocation

		s.endpointsMirrorSessionV1.fnAutoWatchMirrorSession = pkgMessages["monitoring.MirrorSession"].WatchFromKv

		s.Services = map[string]apiserver.Service{
			"monitoring.MirrorSessionV1": srv,
		}
		apisrv.RegisterService("monitoring.MirrorSessionV1", srv)
		endpoints := monitoring.MakeMirrorSessionV1ServerEndpoints(s.endpointsMirrorSessionV1, logger)
		server := monitoring.MakeGRPCServerMirrorSessionV1(ctx, endpoints, logger)
		monitoring.RegisterMirrorSessionV1Server(grpcserver.GrpcServer, server)
	}
}

func (s *smonitoringMirrorBackend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {

	// Add Watchers
	{

		pkgMessages["monitoring.MirrorSession"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := monitoring.MirrorSession{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.(monitoring.MirrorSessionV1_AutoWatchMirrorSessionServer)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "MirrorSession")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<-timer.C
			}
			running := false
			events := &monitoring.AutoMsgMirrorSessionWatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.DebugLog("msg", "Stream send error'ed for Order", "error", err)
					return err
				}
				events = &monitoring.AutoMsgMirrorSessionWatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for MirrorSession Watcher")
						return nil
					}
					in, ok := ev.Object.(*monitoring.MirrorSession)
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}

					strEvent := &monitoring.AutoMsgMirrorSessionWatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received MirrorSession watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "MirrorSession", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*monitoring.MirrorSession)
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<-timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
					running = false
					if err = sendToStream(); err != nil {
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for MirrorSession Watcher")
					return wstream.Context().Err()
				}
			}
		})

	}

}

func (s *smonitoringMirrorBackend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *smonitoringMirrorBackend) Reset() {
	cleanupRegistration()
}

func (e *eMirrorSessionV1Endpoints) AutoAddMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoAddMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMirrorSessionV1Endpoints) AutoDeleteMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoDeleteMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMirrorSessionV1Endpoints) AutoGetMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoGetMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}
func (e *eMirrorSessionV1Endpoints) AutoListMirrorSession(ctx context.Context, t api.ListWatchOptions) (monitoring.MirrorSessionList, error) {
	r, err := e.fnAutoListMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSessionList), err
	}
	return monitoring.MirrorSessionList{}, err

}
func (e *eMirrorSessionV1Endpoints) AutoUpdateMirrorSession(ctx context.Context, t monitoring.MirrorSession) (monitoring.MirrorSession, error) {
	r, err := e.fnAutoUpdateMirrorSession(ctx, t)
	if err == nil {
		return r.(monitoring.MirrorSession), err
	}
	return monitoring.MirrorSession{}, err

}

func (e *eMirrorSessionV1Endpoints) AutoWatchMirrorSession(in *api.ListWatchOptions, stream monitoring.MirrorSessionV1_AutoWatchMirrorSessionServer) error {
	return e.fnAutoWatchMirrorSession(in, stream, "MirrorSession")
}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := smonitoringMirrorBackend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{
		e := eMirrorSessionV1Endpoints{Svc: svc}
		svc.endpointsMirrorSessionV1 = &e
	}
	apisrv.Register("monitoring.mirror.proto", &svc)
}
