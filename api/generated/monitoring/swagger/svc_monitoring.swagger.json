{
  "swagger": "2.0",
  "info": {
    "title": "svc_monitoring.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/monitoring/{O.Tenant}/MirrorSession": {
      "get": {
        "summary": "Retreives a list of MirrorSession objects",
        "operationId": "ListMirrorSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSessionList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new MirrorSession object",
        "operationId": "AddMirrorSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/MirrorSession/{O.Name}": {
      "get": {
        "summary": "Retreives the MirrorSession object",
        "operationId": "GetMirrorSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mirror-session-spec.packet-size",
            "description": "PacketSize: Max size of a mirrored packet.\nPacketSize = 0 indicates complete packet is mirrored, except when mirrored packets are sent to Venice.\nFor packets mirrored to Venice, max mirror packet size allowed is 256 B.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start-condition.schedule-time",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "stop-condition.max-packets",
            "description": "Stop after capturing specified number of packets.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "stop-condition.expiry-duration",
            "description": "Stop after specified amount of time. E.g. 1h, 20min\nWhen ExpiryDuration is not specified, Default is \"2h\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mirror-session-spec.packet-filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "status.oper-state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.src-packet-capture-url",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.dst-packet-capture-url",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the MirrorSession object",
        "operationId": "DeleteMirrorSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateMirrorSession",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringMirrorSession"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alertDestinations": {
      "get": {
        "summary": "Retreives a list of AlertDestination objects",
        "operationId": "ListAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestinationList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new AlertDestination object",
        "operationId": "AddAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alertDestinations/{O.Name}": {
      "get": {
        "summary": "Retreives the AlertDestination object",
        "operationId": "GetAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.default",
            "description": "If set, this will be the default notification option for the alert policies unless otherwise\nsomething else is mentioned.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "spec.email-list",
            "description": "Email notification.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "status.total-notifications-sent",
            "description": "total number of notifications sent using this notification mechanism.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the AlertDestination object",
        "operationId": "DeleteAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateAlertDestination",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringAlertDestination"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alertPolicies": {
      "get": {
        "summary": "Retreives a list of AlertPolicy objects",
        "operationId": "ListAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicyList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new AlertPolicy object",
        "operationId": "AddAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alertPolicies/{O.Name}": {
      "get": {
        "summary": "Retreives the AlertPolicy object",
        "operationId": "GetAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.resource",
            "description": "Resource type - target resource to run this policy.\ne.g. Network, Endpoint - object based alert policy\n     Event - event based alert policy\n     EndpointMetrics - metric based alert policy\nbased on the resource type, the policy gets interpreted.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.severity",
            "description": "Severity to be set for an alert that gets triggered from this rule.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.message",
            "description": "Message to be used while generating the alert\nXXX: Event based alerts should not carry a message. It will be derived from the event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.persistence-duration",
            "description": "Met rule (requirements) needs to sustain for the given duration to qualify to be an alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.clear-duration",
            "description": "Met rule (requirements) needs to be cleared for the given duration to resolve an alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.enable",
            "description": "User can disable the policy by setting this field.\nDisabled policies will not generate any more alerts but the outstanding ones will remain as is.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "spec.auto-resolve",
            "description": "If set, the underlying alert will be auto-resolved if the rule that\ntriggered the alert is cleared.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "spec.destinations",
            "description": "name of the alert destinations to be used to send out notification when an alert\ngets generated.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "status.total-hits",
            "description": "Total hits on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status.open-alerts",
            "description": "Open alerts based on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status.acknowledged-alerts",
            "description": "Acknowledged alerts based on this policy.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the AlertPolicy object",
        "operationId": "DeleteAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateAlertPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringAlertPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alerts": {
      "get": {
        "summary": "Retreives a list of Alert objects",
        "operationId": "ListAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlertList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/alerts/{O.Name}": {
      "get": {
        "summary": "Retreives the Alert object",
        "operationId": "GetAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlert"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.state",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.severity",
            "description": "Severity of an alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source.component",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source.node-name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.tenant",
            "description": "Tenant of the object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.uri",
            "description": "URI is a link to accessing the referenced object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.message",
            "description": "Message from the alert rule that triggered the alert.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reason.alert-policy-id",
            "description": "Alert Policy ID that matched.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "acknowledged.user",
            "description": "Name of the user performed some action.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "acknowledged.time",
            "description": "Time at which the action was performed.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "resolved.user",
            "description": "Name of the user performed some action.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resolved.time",
            "description": "Time at which the action was performed.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateAlert",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringAlert"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringAlert"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/eventPolicy": {
      "post": {
        "summary": "Creates a new EventPolicy object",
        "operationId": "AddEventPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/eventPolicy/{O.Name}": {
      "get": {
        "summary": "Retreives the EventPolicy object",
        "operationId": "GetEventPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.max-retention-time",
            "description": "MaxRetentionTime defines for how long to keep the data before it is deleted\nThe value is specified as a string format e.g. 30d (30 days).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the EventPolicy object",
        "operationId": "DeleteEventPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateEventPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringEventPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/events": {
      "get": {
        "summary": "Retreives a list of Event objects",
        "operationId": "ListEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEventList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/events/{O.Name}": {
      "get": {
        "summary": "Retreives the Event object",
        "operationId": "GetEvent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringEvent"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Attributes.severity",
            "description": "Severity represents the criticality level of an event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Attributes.type",
            "description": "Type represents the type of an event. e.g. NICAdmittedEvent, NodeJoined.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Attributes.message",
            "description": "Message represents the human readable description of an event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.tenant",
            "description": "Tenant of the object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "object-ref.uri",
            "description": "URI is a link to accessing the referenced object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source.component",
            "description": "Component from which the event is generated.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source.node-name",
            "description": "Name of the venice or workload node which is generating the event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Attributes.count",
            "description": "Number of occurrence of this event in the active interval.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/flowExportPolicy": {
      "get": {
        "summary": "Retreives a list of FlowExportPolicy objects",
        "operationId": "ListFlowExportPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicyList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "post": {
        "summary": "Creates a new FlowExportPolicy object",
        "operationId": "AddFlowExportPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/flowExportPolicy/{O.Name}": {
      "get": {
        "summary": "Retreives the FlowExportPolicy object",
        "operationId": "GetFlowExportPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "delete": {
        "summary": "Deletes the FlowExportPolicy object",
        "operationId": "DeleteFlowExportPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateFlowExportPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringFlowExportPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/fwlogPolicy": {
      "get": {
        "summary": "Retreives a list of FwlogPolicy objects",
        "operationId": "ListFwlogPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFwlogPolicyList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/fwlogPolicy/{O.Name}": {
      "get": {
        "summary": "Retreives the FwlogPolicy object",
        "operationId": "GetFwlogPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFwlogPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.retention-time",
            "description": "RetentionTime defines for how long to keep the fwlog before it is deleted.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.filter",
            "description": "filter firewall logs for venice, FWLOG_ALL default.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateFwlogPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringFwlogPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringFwlogPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/statsPolicy": {
      "get": {
        "summary": "Retreives a list of StatsPolicy objects",
        "operationId": "ListStatsPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringStatsPolicyList"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.name",
            "description": "Name of the object, unique within a Namespace for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "O.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "O.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "field-selector",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prefix-watch",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "field-change-selector",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    },
    "/v1/monitoring/{O.Tenant}/statsPolicy/{O.Name}": {
      "get": {
        "summary": "Retreives the StatsPolicy object",
        "operationId": "GetStatsPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringStatsPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "T.kind",
            "description": "Kind represents the type of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "T.api-version",
            "description": "APIVersion defines the version of the API object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.namespace",
            "description": "Namespace of the object, for scoped objects.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.resource-version",
            "description": "Resource version in the object store. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.uuid",
            "description": "UUID is the unique identifier for the object. This can only be set by the server.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "meta.creation-time",
            "description": "CreationTime is the creation time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.mod-time",
            "description": "ModTime is the Last Modification time of Object.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "meta.self-link",
            "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.compaction-interval ",
            "description": "Compaction Interval is the down sampling interval in minutes, hours or days\nthis would be mapped to GROUP BY TIME() in influxdb CQ\nexample: SELECT MAX(*) INTO downsampled_xxx FROM xxx GROUP BY time(CompactionInterval),host.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.retention-time",
            "description": "RetentionTime defines for how long to keep the stats data before it is deleted\nThe value is specified as a string format to be hours, days, or months etc.\ne.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "spec.downsample-retention-time",
            "description": "DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted\nThe value is specified as a string format to be hours, days, or months etc.\ne.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      },
      "put": {
        "operationId": "UpdateStatsPolicy",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/monitoringStatsPolicy"
            }
          },
          "400": {
            "description": "Bad request parameters",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "401": {
            "description": "Unauthorized request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "409": {
            "description": "Conflict while processing request",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "412": {
            "description": "Pre-condition failed",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "501": {
            "description": "Request not implemented",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "O.Tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "O.Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/monitoringStatsPolicy"
            }
          }
        ],
        "tags": [
          "MonitoringV1",
          "version:v1"
        ]
      }
    }
  },
  "definitions": {
    "apiExportConfig": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string",
          "title": "IP address or URL of the collector/entity to which the data is to be exported"
        },
        "transport": {
          "type": "string",
          "title": "protocol and Port number where an external collector is gathering the data\nexample \"TCP/2055\""
        },
        "credentials": {
          "$ref": "#/definitions/apiExternalCred",
          "title": "Credentials provide secure access to the collector"
        }
      },
      "title": "----------------------------- Export Config -----------------------------\nExport Config specifies server address and user credentials"
    },
    "apiExternalCred": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "UserName is the login id to be used towards the external entity"
        },
        "password": {
          "type": "string",
          "title": "Password is one time specified, not visibile on read operations\nOnly valid when UserName is defined\nTBD: need to add (venice.secret) = \"true\" support for this"
        },
        "bearer-token": {
          "type": "string",
          "title": "External entity supports bearer tokens for authentication and authorization\nToken refresh is not supported using OAuth2\nTBD: need to add (venice.secret) = \"true\" support for this"
        },
        "cert-data": {
          "type": "string",
          "format": "byte",
          "description": "CertData holds PEM-encoded bytes (typically read from a client certificate file)."
        },
        "key-data": {
          "type": "string",
          "format": "byte",
          "title": "KeyData holds PEM-encoded bytes (typically read from a client certificate key file).\nTBD: need to add (venice.secret) = \"true\" support for this"
        },
        "ca-data": {
          "type": "string",
          "format": "byte",
          "description": "CaData holds PEM-encoded bytes (typically read from a root certificates bundle)."
        }
      },
      "title": "------------------------ ExternalCred Object ----------------------------\nExternalCred defines credentials required to access an external entity, such as\na stats collector, compute orchestration entity, or a syslog server.\nExternal entity may support a variety of methods, like username/password,\nTLS Client authentication, or Bearer Token based authentication. User is\nexpected to configure one of the methods"
    },
    "apiListMeta": {
      "type": "object",
      "properties": {
        "resource-version": {
          "type": "string",
          "description": "Resource version of object store at the time of list generation."
        }
      },
      "description": "ListMeta contains the metadata for list of objects."
    },
    "apiListWatchOptions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creation-time": {
          "type": "string",
          "format": "date-time"
        },
        "mod-time": {
          "type": "string",
          "format": "date-time"
        },
        "self-link": {
          "type": "string"
        },
        "label-selector": {
          "type": "string"
        },
        "field-selector": {
          "type": "string"
        },
        "prefix-watch": {
          "type": "boolean",
          "format": "boolean"
        },
        "field-change-selector": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiObjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant is global namespace isolation for various objects. This can be automatically\nfilled in many cases based on the tenant a user, who created the object, belongs go."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "resource-version": {
          "type": "string",
          "description": "Resource version in the object store. This can only be set by the server."
        },
        "uuid": {
          "type": "string",
          "description": "UUID is the unique identifier for the object. This can only be set by the server."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are arbitrary (key,value) pairs associated with any object."
        },
        "creation-time": {
          "type": "string",
          "format": "date-time",
          "title": "CreationTime is the creation time of Object"
        },
        "mod-time": {
          "type": "string",
          "format": "date-time",
          "title": "ModTime is the Last Modification time of Object"
        },
        "self-link": {
          "type": "string",
          "description": "SelfLink is a link to accessing this object. When stored in the KV store this is\n the key in the kvstore and when the object is served from the API-GW it is the\n URI path. Examples\n   - \"/venice/tenants/tenants/tenant2\" in the kvstore\n   - \"/v1/tenants/tenants/tenant2\" when served by API Gateway."
        }
      },
      "description": "ObjectMeta contains metadata that all objects stored in kvstore must have."
    },
    "apiObjectRef": {
      "type": "object",
      "properties": {
        "tenant": {
          "type": "string",
          "description": "Tenant of the object."
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the object, for scoped objects."
        },
        "kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "name": {
          "type": "string",
          "description": "Name of the object, unique within a Namespace for scoped objects."
        },
        "uri": {
          "type": "string",
          "description": "URI is a link to accessing the referenced object."
        }
      },
      "description": "ObjectRef contains identifying information about an object."
    },
    "apiStatus": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/apiStatusResult",
          "description": "Result contains the status of the operation, success or failure."
        },
        "message": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Message contains human readable form of the error."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Code is the HTTP status code."
        },
        "object-ref": {
          "$ref": "#/definitions/apiObjectRef",
          "description": "Reference to the object (optional) for which this status is being sent."
        }
      },
      "description": "Status is returned for calls that dont return objects."
    },
    "apiStatusResult": {
      "type": "object",
      "properties": {
        "Str": {
          "type": "string"
        }
      },
      "description": "StatusResult contains possible statuses for a NIC."
    },
    "apiSyslogExportConfig": {
      "type": "object",
      "properties": {
        "facility-override": {
          "type": "string",
          "title": "override default facility with this in exported logs"
        },
        "prefix": {
          "type": "string",
          "title": "add prefix in exported logs"
        }
      },
      "title": "syslog export configurations"
    },
    "apiTimestamp": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64"
        },
        "nanos": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiTypeMeta": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind represents the type of the API object."
        },
        "api-version": {
          "type": "string",
          "description": "APIVersion defines the version of the API object."
        }
      },
      "description": "TypeMeta contains the metadata about kind and version for all API objects."
    },
    "fieldsRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key that the condition applies to."
        },
        "operator": {
          "type": "string",
          "enum": [
            "equals",
            "notEquals",
            "in",
            "notIn",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "default": "equals",
          "x-ui-hints": {
            "gt": "greater than",
            "gte": "greater than or equals",
            "lt": "less than",
            "lte": "less than or equals",
            "notEquals": "not equals",
            "notIn": "not in"
          },
          "description": "Condition checked for the key."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Values contains one or more values corresponding to the label key. \"equals\" and\n\"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have\none or more values."
        }
      },
      "description": "Requirement defines a single matching condition for a selector."
    },
    "fieldsSelector": {
      "type": "object",
      "properties": {
        "requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/fieldsRequirement"
          },
          "description": "Requirements are ANDed."
        }
      },
      "description": "Selector is used to select objects by fields. Requirements in the selector are ANDed.\nA selector with no Requirements does not select anything."
    },
    "monitoringAlert": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringAlertSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringAlertStatus"
        }
      },
      "title": "Alert defines an alert object"
    },
    "monitoringAlertDestination": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringAlertDestinationSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringAlertDestinationStatus"
        }
      },
      "title": "AlertDestination - tenant scoped"
    },
    "monitoringAlertDestinationList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAlertDestination"
          },
          "title": "List of AlertDestination objects"
        }
      },
      "title": "AlertDestinationList is a container object for list of AlertDestination objects"
    },
    "monitoringAlertDestinationSpec": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set, this will be the default notification option for the alert policies unless otherwise\nsomething else is mentioned."
        },
        "email-list": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Email notification"
        },
        "snmp-trap-servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringSNMPTrapServer"
          },
          "title": "SNMP trap destination(s)"
        }
      }
    },
    "monitoringAlertDestinationStatus": {
      "type": "object",
      "properties": {
        "total-notifications-sent": {
          "type": "integer",
          "format": "int32",
          "title": "total number of notifications sent using this notification mechanism"
        }
      }
    },
    "monitoringAlertList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAlert"
          },
          "title": "List of Alert objects"
        }
      },
      "title": "AlertList is a container object for list of Alert objects"
    },
    "monitoringAlertPolicy": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringAlertPolicySpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringAlertPolicyStatus"
        }
      },
      "title": "AlertPolicy - tenant scoped"
    },
    "monitoringAlertPolicyList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAlertPolicy"
          },
          "title": "List of AlertPolicy objects"
        }
      },
      "title": "AlertPolicyList is a container object for list of AlertPolicy objects"
    },
    "monitoringAlertPolicySpec": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string",
          "description": "Resource type - target resource to run this policy.\ne.g. Network, Endpoint - object based alert policy\n     Event - event based alert policy\n     EndpointMetrics - metric based alert policy\nbased on the resource type, the policy gets interpreted."
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "CRITICAL"
          ],
          "default": "INFO",
          "x-ui-hints": {
            "CRITICAL": "Critical",
            "INFO": "Informational",
            "WARNING": "Warning"
          },
          "title": "Severity to be set for an alert that gets triggered from this rule"
        },
        "message": {
          "type": "string",
          "description": "Message to be used while generating the alert\nXXX: Event based alerts should not carry a message. It will be derived from the event."
        },
        "requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringRequirement"
          },
          "title": "List of requirements that needs to be met to trigger an alert"
        },
        "persistence-duration": {
          "type": "string",
          "title": "Met rule (requirements) needs to sustain for the given duration to qualify to be an alert"
        },
        "clear-duration": {
          "type": "string",
          "title": "Met rule (requirements) needs to be cleared for the given duration to resolve an alert"
        },
        "enable": {
          "type": "boolean",
          "format": "boolean",
          "description": "User can disable the policy by setting this field.\nDisabled policies will not generate any more alerts but the outstanding ones will remain as is."
        },
        "auto-resolve": {
          "type": "boolean",
          "format": "boolean",
          "title": "If set, the underlying alert will be auto-resolved if the rule that\ntriggered the alert is cleared"
        },
        "destinations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "name of the alert destinations to be used to send out notification when an alert\ngets generated."
        }
      }
    },
    "monitoringAlertPolicyStatus": {
      "type": "object",
      "properties": {
        "total-hits": {
          "type": "integer",
          "format": "int32",
          "title": "Total hits on this policy"
        },
        "open-alerts": {
          "type": "integer",
          "format": "int32",
          "title": "Open alerts based on this policy"
        },
        "acknowledged-alerts": {
          "type": "integer",
          "format": "int32",
          "title": "Acknowledged alerts based on this policy"
        }
      }
    },
    "monitoringAlertReason": {
      "type": "object",
      "properties": {
        "matched-requirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringMatchedRequirement"
          },
          "title": "List of requirements from the alert policy with it's matched value"
        },
        "alert-policy-id": {
          "type": "string",
          "title": "Alert Policy ID that matched"
        }
      },
      "title": "AlertReason captures all the requirements with matched value from the alert policy rule\nat the time of creating an alert.\ne.g. \"matched-requirements\": [{\"field\": \"cpu\", \"operator\": \"Gt\", \"values\": [90], \"observed-value\": 95}]"
    },
    "monitoringAlertSource": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "node-name": {
          "type": "string"
        }
      },
      "title": "Source of an alert; for alerts generated from events, it maps to event.Source"
    },
    "monitoringAlertSpec": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "OPEN",
            "RESOLVED",
            "ACKNOWLEDGED"
          ],
          "default": "OPEN",
          "x-ui-hints": {
            "ACKNOWLEDGED": "Acknowledged",
            "OPEN": "Open",
            "RESOLVED": "Resolved"
          }
        }
      },
      "title": "User can change the state of the alert by changing the spec"
    },
    "monitoringAlertStatus": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "CRITICAL"
          ],
          "default": "INFO",
          "x-ui-hints": {
            "CRITICAL": "Critical",
            "INFO": "Informational",
            "WARNING": "Warning"
          },
          "title": "Severity of an alert"
        },
        "source": {
          "$ref": "#/definitions/monitoringAlertSource",
          "title": "Alert source or origin"
        },
        "object-ref": {
          "$ref": "#/definitions/apiObjectRef",
          "title": "Affected object"
        },
        "message": {
          "type": "string",
          "title": "Message from the alert rule that triggered the alert"
        },
        "reason": {
          "$ref": "#/definitions/monitoringAlertReason",
          "description": "Captures all the requirements from the alert policy rule with matched value.\nAll these requirements must be cleared to auto-resolve an alert."
        },
        "acknowledged": {
          "$ref": "#/definitions/monitoringAuditInfo",
          "title": "Username and time at which the alert was acknowledged"
        },
        "resolved": {
          "$ref": "#/definitions/monitoringAuditInfo",
          "title": "Username and time at which the alert was resolved"
        }
      },
      "title": "Status part of the alert object"
    },
    "monitoringAppProtoSelector": {
      "type": "object",
      "properties": {
        "ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ports - Includes protocol name and port Eg [\"tcp/1234\", \"udp\"]"
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Apps - E.g. [\"Redis\"]"
        }
      },
      "title": "Application/protocol selector"
    },
    "monitoringAuditInfo": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "description": "Name of the user performed some action."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Time at which the action was performed."
        }
      },
      "description": "AuditInfo captures the user performed the action and the time at which the\naction was performed."
    },
    "monitoringAuthConfig": {
      "type": "object",
      "properties": {
        "algo": {
          "type": "string",
          "enum": [
            "MD5",
            "SHA1"
          ],
          "default": "MD5"
        },
        "password": {
          "type": "string",
          "description": "Password contains the authentication password."
        }
      },
      "description": "AuthConfig contains the configuration for SNMP Trap authentication."
    },
    "monitoringAutoMsgAlertDestinationWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgAlertDestinationWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgAlertDestinationWatchHelper is a wrapper object for watch events for AlertDestination objects"
    },
    "monitoringAutoMsgAlertDestinationWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringAlertDestination"
        }
      }
    },
    "monitoringAutoMsgAlertPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgAlertPolicyWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgAlertPolicyWatchHelper is a wrapper object for watch events for AlertPolicy objects"
    },
    "monitoringAutoMsgAlertPolicyWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringAlertPolicy"
        }
      }
    },
    "monitoringAutoMsgAlertWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgAlertWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgAlertWatchHelper is a wrapper object for watch events for Alert objects"
    },
    "monitoringAutoMsgAlertWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringAlert"
        }
      }
    },
    "monitoringAutoMsgEventPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgEventPolicyWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgEventPolicyWatchHelper is a wrapper object for watch events for EventPolicy objects"
    },
    "monitoringAutoMsgEventPolicyWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringEventPolicy"
        }
      }
    },
    "monitoringAutoMsgEventWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgEventWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgEventWatchHelper is a wrapper object for watch events for Event objects"
    },
    "monitoringAutoMsgEventWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringEvent"
        }
      }
    },
    "monitoringAutoMsgFlowExportPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgFlowExportPolicyWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgFlowExportPolicyWatchHelper is a wrapper object for watch events for FlowExportPolicy objects"
    },
    "monitoringAutoMsgFlowExportPolicyWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringFlowExportPolicy"
        }
      }
    },
    "monitoringAutoMsgFwlogPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgFwlogPolicyWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgFwlogPolicyWatchHelper is a wrapper object for watch events for FwlogPolicy objects"
    },
    "monitoringAutoMsgFwlogPolicyWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringFwlogPolicy"
        }
      }
    },
    "monitoringAutoMsgMirrorSessionWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgMirrorSessionWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgMirrorSessionWatchHelper is a wrapper object for watch events for MirrorSession objects"
    },
    "monitoringAutoMsgMirrorSessionWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringMirrorSession"
        }
      }
    },
    "monitoringAutoMsgStatsPolicyWatchHelper": {
      "type": "object",
      "properties": {
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringAutoMsgStatsPolicyWatchHelperWatchEvent"
          }
        }
      },
      "title": "AutoMsgStatsPolicyWatchHelper is a wrapper object for watch events for StatsPolicy objects"
    },
    "monitoringAutoMsgStatsPolicyWatchHelperWatchEvent": {
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "Object": {
          "$ref": "#/definitions/monitoringStatsPolicy"
        }
      }
    },
    "monitoringEvent": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta",
          "title": "ObjectMeta.Name will be the UUID for an event object.\nTODO: Should there be a predefined list of labels or keep it free form ?"
        },
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "CRITICAL"
          ],
          "default": "INFO",
          "x-ui-hints": {
            "CRITICAL": "Critical",
            "INFO": "Informational",
            "WARNING": "Warning"
          }
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "object-ref": {
          "$ref": "#/definitions/apiObjectRef"
        },
        "source": {
          "$ref": "#/definitions/monitoringEventSource"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Event is a system notification of a fault, condition or configuration\nthat should be user visible. These objects are created internally by\nEvent client and persisted in EventDB."
    },
    "monitoringEventAttributes": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "enum": [
            "INFO",
            "WARNING",
            "CRITICAL"
          ],
          "default": "INFO",
          "x-ui-hints": {
            "CRITICAL": "Critical",
            "INFO": "Informational",
            "WARNING": "Warning"
          },
          "title": "Severity represents the criticality level of an event"
        },
        "type": {
          "type": "string",
          "title": "Type represents the type of an event. e.g. NICAdmittedEvent, NodeJoined"
        },
        "message": {
          "type": "string",
          "title": "Message represents the human readable description of an event"
        },
        "object-ref": {
          "$ref": "#/definitions/apiObjectRef",
          "title": "ObjectRef is the reference to the object associated with an event"
        },
        "source": {
          "$ref": "#/definitions/monitoringEventSource",
          "title": "Source is the component and host/node which generated an event"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "Number of occurrence of this event in the active interval"
        }
      },
      "title": "EventAttributes contains all the event attributes"
    },
    "monitoringEventExport": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiExportConfig"
          },
          "title": "export target ip/port/protocol"
        },
        "format": {
          "type": "string",
          "enum": [
            "SYSLOG_BSD",
            "SYSLOG_RFC5424"
          ],
          "default": "SYSLOG_BSD",
          "title": "event export format, SYSLOG_BSD default"
        },
        "selector": {
          "$ref": "#/definitions/fieldsSelector",
          "title": "export events matched by the selector"
        },
        "syslog-config": {
          "$ref": "#/definitions/apiSyslogExportConfig",
          "title": "syslog specific configuration"
        }
      }
    },
    "monitoringEventList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringEvent"
          },
          "title": "List of Event objects"
        }
      },
      "title": "EventList is a container object for list of Event objects"
    },
    "monitoringEventPolicy": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringEventPolicySpec",
          "description": "Spec contains the configuration of an event policy."
        },
        "status": {
          "$ref": "#/definitions/monitoringEventPolicyStatus",
          "description": "Status contains the current state of an event policy."
        }
      },
      "description": "-------------------------- Event Policy -----------------------------\nEvent Policy represents the policy definition for Events.\nEvent Client module will be consumer of this policy."
    },
    "monitoringEventPolicyList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringEventPolicy"
          },
          "title": "List of EventPolicy objects"
        }
      },
      "title": "EventPolicyList is a container object for list of EventPolicy objects"
    },
    "monitoringEventPolicySpec": {
      "type": "object",
      "properties": {
        "exports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringEventExport"
          },
          "title": "export configuration"
        },
        "max-retention-time": {
          "type": "string",
          "title": "MaxRetentionTime defines for how long to keep the data before it is deleted\nThe value is specified as a string format e.g. 30d (30 days)"
        }
      },
      "description": "EventPolicySpec is the specification of an Event Policy,\nIt consists of Retention and Export."
    },
    "monitoringEventPolicyStatus": {
      "type": "object",
      "title": "EventPolicyStatus"
    },
    "monitoringEventSource": {
      "type": "object",
      "properties": {
        "component": {
          "type": "string",
          "description": "Component from which the event is generated."
        },
        "node-name": {
          "type": "string",
          "description": "Name of the venice or workload node which is generating the event."
        }
      },
      "title": "EventSource has info about the component and\nhost/node that generated the event"
    },
    "monitoringFlowExportPolicy": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringFlowExportSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringFlowExportStatus",
          "description": "Status contains the current state of the export policy."
        }
      }
    },
    "monitoringFlowExportPolicyList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringFlowExportPolicy"
          },
          "title": "List of FlowExportPolicy objects"
        }
      },
      "title": "FlowExportPolicyList is a container object for list of FlowExportPolicy objects"
    },
    "monitoringFlowExportSpec": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringFlowExportTarget"
          }
        }
      }
    },
    "monitoringFlowExportStatus": {
      "type": "object",
      "title": "========================================================================================\n flow export policy\n========================================================================================"
    },
    "monitoringFlowExportTarget": {
      "type": "object",
      "properties": {
        "interval": {
          "type": "string",
          "title": "Interval defines how often to push the records to an external or internal collector\nThe value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'"
        },
        "format": {
          "type": "string",
          "enum": [
            "Ipfix"
          ],
          "default": "Ipfix"
        },
        "exports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiExportConfig"
          },
          "description": "Export contains export parameters."
        }
      }
    },
    "monitoringFwlogExport": {
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiExportConfig"
          },
          "title": "Target contains ip/port/protocol"
        },
        "format": {
          "type": "string",
          "enum": [
            "SYSLOG_BSD",
            "SYSLOG_RFC5424"
          ],
          "default": "SYSLOG_BSD",
          "title": "fwlog format, SYSLOG_BSD default"
        },
        "export-filter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "enum": [
            "FWLOG_ALL",
            "FWLOG_ACCEPT",
            "FWLOG_REJECT",
            "FWLOG_DENY"
          ],
          "default": "FWLOG_ALL",
          "x-ui-hints": {
            "FWLOG_ACCEPT": "Accept",
            "FWLOG_ALL": "All",
            "FWLOG_DENY": "Deny",
            "FWLOG_REJECT": "Reject"
          },
          "title": "filter firewall logs, FWLOG_ALL default"
        },
        "syslog-config": {
          "$ref": "#/definitions/apiSyslogExportConfig",
          "title": "configuration to use for syslog format\ndefault facility is set to \"local4\", can be overridden with FacilityOverride\nfwlog serverity is set to \"Informational\""
        }
      },
      "title": "firewall log export config"
    },
    "monitoringFwlogPolicy": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringFwlogSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringFwlogStatus",
          "description": "Status contains the current state of the policy."
        }
      }
    },
    "monitoringFwlogPolicyList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringFwlogPolicy"
          },
          "title": "List of FwlogPolicy objects"
        }
      },
      "title": "FwlogPolicyList is a container object for list of FwlogPolicy objects"
    },
    "monitoringFwlogSpec": {
      "type": "object",
      "properties": {
        "retention-time": {
          "type": "string",
          "title": "RetentionTime defines for how long to keep the fwlog before it is deleted"
        },
        "filter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "enum": [
            "FWLOG_ALL",
            "FWLOG_ACCEPT",
            "FWLOG_REJECT",
            "FWLOG_DENY"
          ],
          "default": "FWLOG_ALL",
          "x-ui-hints": {
            "FWLOG_ACCEPT": "Accept",
            "FWLOG_ALL": "All",
            "FWLOG_DENY": "Deny",
            "FWLOG_REJECT": "Reject"
          },
          "title": "filter firewall logs for venice, FWLOG_ALL default"
        },
        "exports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringFwlogExport"
          },
          "title": "Export contains the export config"
        }
      },
      "title": "Venice collects fwlog irrespective of the export config"
    },
    "monitoringFwlogStatus": {
      "type": "object"
    },
    "monitoringMatchRule": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/monitoringMatchSelector",
          "title": "Either Src or Dst or both must be specified, both cannot be *\nSrc = * when not specified\nWhen Src is specified and resides on Pesnsando SmartNIC, matching pkts to/from src will be mirrored"
        },
        "destination": {
          "$ref": "#/definitions/monitoringMatchSelector",
          "title": "Dst = * when not specified\nWhen Dst is specified and resides on Pesnsando SmartNIC, matching pkts to/from dst will be mirrored"
        },
        "app-protocol-selectors": {
          "$ref": "#/definitions/monitoringAppProtoSelector",
          "title": "App = * when not specified"
        }
      },
      "title": "MatchRule : This is used to select packets that need to be monitored (mirrored)"
    },
    "monitoringMatchSelector": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Any one of the following match selector can be specified to select a packet from mirroring"
        },
        "ip-addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)"
        },
        "mac-addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of MacAddresses - \"aa:bb:cc:dd:ee:ff\", \"00:01:02:03:04:05\""
        }
      },
      "title": "Traffic Selection Rules\nTraffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses"
    },
    "monitoringMatchedRequirement": {
      "type": "object",
      "properties": {
        "field-or-metric": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "Equals",
            "In",
            "NotEquals",
            "NotIn",
            "Gt",
            "Lt"
          ],
          "default": "Equals",
          "x-ui-hints": {
            "Gt": "Greater Than",
            "Lt": "Less Than",
            "NotEquals": "Not Equals",
            "NotIn": "Not In"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "observed-value": {
          "type": "string",
          "title": "The value at which the requirement was met.\nsame as Requirement.value for operator `Equals` but could vary for other operators\ne.g. requirement - CPU;Gt;90 could have a matching value 96"
        }
      },
      "title": "One of the requirement from the expression that was met"
    },
    "monitoringMirrorCollector": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "VENICE",
            "ERSPAN"
          ],
          "default": "VENICE",
          "x-ui-hints": {
            "VENICE": "Venice"
          }
        },
        "export-config": {
          "$ref": "#/definitions/apiExportConfig",
          "title": "When collector type is Venice, collector export information is not required"
        }
      },
      "title": "Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)"
    },
    "monitoringMirrorSession": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "mirror-session-spec": {
          "$ref": "#/definitions/monitoringMirrorSessionSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringMirrorSessionStatus"
        }
      },
      "title": "------------------\n---- MirrorSession\n------------------"
    },
    "monitoringMirrorSessionList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringMirrorSession"
          },
          "title": "List of MirrorSession objects"
        }
      },
      "title": "MirrorSessionList is a container object for list of MirrorSession objects"
    },
    "monitoringMirrorSessionSpec": {
      "type": "object",
      "properties": {
        "packet-size": {
          "type": "integer",
          "format": "int64",
          "title": "PacketSize: Max size of a mirrored packet.\nPacketSize = 0 indicates complete packet is mirrored, except when mirrored packets are sent to Venice.\nFor packets mirrored to Venice, max mirror packet size allowed is 256 B"
        },
        "start-condition": {
          "$ref": "#/definitions/monitoringMirrorStartConditions",
          "title": "StartConditions"
        },
        "stop-condition": {
          "$ref": "#/definitions/monitoringMirrorStopConditions"
        },
        "collectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringMirrorCollector"
          },
          "title": "Mirrored packet collectors"
        },
        "match-rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringMatchRule"
          },
          "title": "Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions"
        },
        "packet-filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "enum": [
            "ALL_PKTS",
            "ALL_DROPS",
            "NETWORK_POLICY_DROP",
            "FIREWALL_POLICY_DROP"
          ],
          "default": "ALL_PKTS",
          "x-ui-hints": {
            "ALL_DROPS": "All Drops",
            "ALL_PKTS": "All Packets",
            "FIREWALL_POLICY_DROP": "Firewall Policy Drops",
            "NETWORK_POLICY_DROP": "Network Policy Drops"
          }
        }
      },
      "title": "========================================================================================\nPacket Mirroring\n========================================================================================\n-----------------------\n---- MirrorSessionSpec\n-----------------------"
    },
    "monitoringMirrorSessionStatus": {
      "type": "object",
      "properties": {
        "oper-state": {
          "type": "string",
          "enum": [
            "RUNNING",
            "STOPPED",
            "SCHEDULED",
            "READY_TO_RUN"
          ],
          "default": "RUNNING",
          "x-ui-hints": {
            "READY_TO_RUN": "Ready To Run",
            "RUNNING": "Running",
            "SCHEDULED": "Scheduled",
            "STOPPED": "Stopped"
          }
        },
        "smart-nic-status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringSmartNICMirrorSessionStatus"
          }
        },
        "src-packet-capture-url": {
          "type": "string"
        },
        "dst-packet-capture-url": {
          "type": "string"
        }
      }
    },
    "monitoringMirrorStartConditions": {
      "type": "object",
      "properties": {
        "schedule-time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "MirrorStartConditions - Conditions to start mirroring"
    },
    "monitoringMirrorStopConditions": {
      "type": "object",
      "properties": {
        "max-packets": {
          "type": "integer",
          "format": "int64",
          "title": "Stop after capturing specified number of packets"
        },
        "expiry-duration": {
          "type": "string",
          "title": "Stop after specified amount of time. E.g. 1h, 20min\nWhen ExpiryDuration is not specified, Default is \"2h\""
        }
      },
      "title": "MirrorStopConditions - A MirrorSession will stop mirroring after this condition is met"
    },
    "monitoringPrivacyConfig": {
      "type": "object",
      "properties": {
        "algo": {
          "type": "string",
          "enum": [
            "DES56",
            "AES128"
          ],
          "default": "DES56"
        },
        "password": {
          "type": "string",
          "description": "Password contains the privacy password."
        }
      },
      "description": "PrivacyConfig contains the configuration for SNMP Trap encryption."
    },
    "monitoringRequirement": {
      "type": "object",
      "properties": {
        "field-or-metric": {
          "type": "string",
          "title": "name of the field or metric"
        },
        "operator": {
          "type": "string",
          "enum": [
            "Equals",
            "In",
            "NotEquals",
            "NotIn",
            "Gt",
            "Lt"
          ],
          "default": "Equals",
          "x-ui-hints": {
            "Gt": "Greater Than",
            "Lt": "Less Than",
            "NotEquals": "Not Equals",
            "NotIn": "Not In"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Values contains one or more values corresponding to the field-or-metric. \"Equals\",\n\"NotEquals\", \"Gt\" and \"Lt\" operators need a single value. \"In\" and \"NotIn\" operators\ncan have one or more values."
        }
      },
      "title": "Requirement specifies each\n{\"field\": \"Status.Phase\", \"operator\":\"Equals\", \"values\":[\"JOINED\"]}"
    },
    "monitoringSNMPTrapServer": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Host where the trap needs to be sent."
        },
        "port": {
          "type": "string",
          "description": "Port on the Host where the trap needs to be sent, default is 162."
        },
        "version": {
          "type": "string",
          "enum": [
            "V2C",
            "V3"
          ],
          "default": "V2C"
        },
        "community-or-user": {
          "type": "string",
          "description": "CommunityOrUser contains community string for v2c, user for v3."
        },
        "auth-config": {
          "$ref": "#/definitions/monitoringAuthConfig",
          "description": "AuthConfig contains the configuration for authentication, valid only for v3."
        },
        "privacy-config": {
          "$ref": "#/definitions/monitoringPrivacyConfig",
          "description": "PrivacyConfig contains the configuration for encryption, valid only for v3."
        }
      },
      "description": "SNMPTrapServer contains the configuration for sending SNMP traps to a receiver."
    },
    "monitoringSmartNICMirrorSessionStatus": {
      "type": "object",
      "properties": {
        "smart-nic": {
          "type": "string"
        },
        "num-src-packets": {
          "type": "integer",
          "format": "int64"
        },
        "num-dst-packets": {
          "type": "integer",
          "format": "int64"
        },
        "session-id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "monitoringStatsPolicy": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/apiObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/monitoringStatsSpec"
        },
        "status": {
          "$ref": "#/definitions/monitoringStatsStatus",
          "description": "Status contains the current state of the policy."
        }
      }
    },
    "monitoringStatsPolicyList": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "api-version": {
          "type": "string"
        },
        "resource-version": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoringStatsPolicy"
          },
          "title": "List of StatsPolicy objects"
        }
      },
      "title": "StatsPolicyList is a container object for list of StatsPolicy objects"
    },
    "monitoringStatsSpec": {
      "type": "object",
      "properties": {
        "compaction-interval ": {
          "type": "string",
          "title": "Compaction Interval is the down sampling interval in minutes, hours or days\nthis would be mapped to GROUP BY TIME() in influxdb CQ\nexample: SELECT MAX(*) INTO downsampled_xxx FROM xxx GROUP BY time(CompactionInterval),host"
        },
        "retention-time": {
          "type": "string",
          "title": "RetentionTime defines for how long to keep the stats data before it is deleted\nThe value is specified as a string format to be hours, days, or months etc.\ne.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'"
        },
        "downsample-retention-time": {
          "type": "string",
          "title": "DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted\nThe value is specified as a string format to be hours, days, or months etc.\ne.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'"
        }
      },
      "title": "compaction method will be selected by Venice based on the mesaurement/table\ncollection interval will be selected by Venice based on workloads"
    },
    "monitoringStatsStatus": {
      "type": "object",
      "description": "=========================================================================================\n stats policy\n=========================================================================================",
      "title": "telemetry policies:\n-------------------------------------------------------------------------------\npolicy name         |  intended for        |     description                 |\n-------------------------------------------------------------------------------\nstats               |  sys admins          |    for all stats other than     |\n                    |                      |    fwlog/netflow.               |\n                    |                      |    includes retention,compaction|\n-------------------------------------------------------------------------------\nfwlog               |  security admins     |    firewall log policy          |\n                    |                      |    includes retention,          |\n                    |                      |    export parameters            |\n-------------------------------------------------------------------------------\n                    |                      |                                 |\nflowexport          |  network admins      |    netflow export policy        |\n                    |                      |    includes interval,           |\n                    |                      |    export parameters            |\n-------------------------------------------------------------------------------"
    }
  }
}
