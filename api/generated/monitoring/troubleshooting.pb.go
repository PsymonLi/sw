// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: troubleshooting.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import events "github.com/pensando/sw/api/generated/events"
import security "github.com/pensando/sw/api/generated/security"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type TroubleshootingSessionState int32

const (
	// ui-hint: Running
	TroubleshootingSessionState_TS_RUNNING TroubleshootingSessionState = 0
	// ui-hint: Stopped
	TroubleshootingSessionState_TS_STOPPED TroubleshootingSessionState = 1
	// ui-hint: Scheduled
	TroubleshootingSessionState_TS_SCHEDULED TroubleshootingSessionState = 2
)

var TroubleshootingSessionState_name = map[int32]string{
	0: "TS_RUNNING",
	1: "TS_STOPPED",
	2: "TS_SCHEDULED",
}
var TroubleshootingSessionState_value = map[string]int32{
	"TS_RUNNING":   0,
	"TS_STOPPED":   1,
	"TS_SCHEDULED": 2,
}

func (x TroubleshootingSessionState) String() string {
	return proto.EnumName(TroubleshootingSessionState_name, int32(x))
}
func (TroubleshootingSessionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTroubleshooting, []int{0}
}

//
type PingPktStats struct {
	//
	NoResp bool `protobuf:"varint,1,opt,name=NoResp,json=no-response,inline,proto3" json:"no-response,inline"`
	//
	RttMs uint32 `protobuf:"varint,2,opt,name=RttMs,json=round-trip-time,inline,proto3" json:"round-trip-time,inline"`
}

func (m *PingPktStats) Reset()                    { *m = PingPktStats{} }
func (m *PingPktStats) String() string            { return proto.CompactTextString(m) }
func (*PingPktStats) ProtoMessage()               {}
func (*PingPktStats) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{0} }

func (m *PingPktStats) GetNoResp() bool {
	if m != nil {
		return m.NoResp
	}
	return false
}

func (m *PingPktStats) GetRttMs() uint32 {
	if m != nil {
		return m.RttMs
	}
	return 0
}

//
type PingStats struct {
	//
	SmartNIC string `protobuf:"bytes,1,opt,name=SmartNIC,json=smart-nic,inline,proto3" json:"smart-nic,inline"`
	//
	PacketsTx uint32 `protobuf:"varint,2,opt,name=PacketsTx,json=packets-sent,inline,proto3" json:"packets-sent,inline"`
	//
	PacketsRx uint32 `protobuf:"varint,3,opt,name=PacketsRx,json=packets-received,inline,proto3" json:"packets-received,inline"`
	//
	PacketLoss uint32 `protobuf:"varint,4,opt,name=PacketLoss,json=packet-loss,inline,proto3" json:"packet-loss,inline"`
	//
	MinRttMs float32 `protobuf:"fixed32,5,opt,name=MinRttMs,json=min-round-trip-time,inline,proto3" json:"min-round-trip-time,inline"`
	//
	MaxRttMs float32 `protobuf:"fixed32,6,opt,name=MaxRttMs,json=max-round-trip-time,inline,proto3" json:"max-round-trip-time,inline"`
	//
	AvgRttMs float32 `protobuf:"fixed32,7,opt,name=AvgRttMs,json=avg-round-trip-time,inline,proto3" json:"avg-round-trip-time,inline"`
	// Per packet stats
	PktStats []*PingPktStats `protobuf:"bytes,8,rep,name=PktStats,json=per-packet-stats,inline" json:"per-packet-stats,inline"`
}

func (m *PingStats) Reset()                    { *m = PingStats{} }
func (m *PingStats) String() string            { return proto.CompactTextString(m) }
func (*PingStats) ProtoMessage()               {}
func (*PingStats) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{1} }

func (m *PingStats) GetSmartNIC() string {
	if m != nil {
		return m.SmartNIC
	}
	return ""
}

func (m *PingStats) GetPacketsTx() uint32 {
	if m != nil {
		return m.PacketsTx
	}
	return 0
}

func (m *PingStats) GetPacketsRx() uint32 {
	if m != nil {
		return m.PacketsRx
	}
	return 0
}

func (m *PingStats) GetPacketLoss() uint32 {
	if m != nil {
		return m.PacketLoss
	}
	return 0
}

func (m *PingStats) GetMinRttMs() float32 {
	if m != nil {
		return m.MinRttMs
	}
	return 0
}

func (m *PingStats) GetMaxRttMs() float32 {
	if m != nil {
		return m.MaxRttMs
	}
	return 0
}

func (m *PingStats) GetAvgRttMs() float32 {
	if m != nil {
		return m.AvgRttMs
	}
	return 0
}

func (m *PingStats) GetPktStats() []*PingPktStats {
	if m != nil {
		return m.PktStats
	}
	return nil
}

//
type TimeWindow struct {
	// Start/Stop Time - when start time is not specified, it implies start NOW.
	StartTime *api.Timestamp `protobuf:"bytes,1,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	// Stop time - when not specified, default will be used
	StopTime *api.Timestamp `protobuf:"bytes,2,opt,name=StopTime,json=stop-time,omitempty" json:"stop-time,omitempty"`
}

func (m *TimeWindow) Reset()                    { *m = TimeWindow{} }
func (m *TimeWindow) String() string            { return proto.CompactTextString(m) }
func (*TimeWindow) ProtoMessage()               {}
func (*TimeWindow) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{2} }

func (m *TimeWindow) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeWindow) GetStopTime() *api.Timestamp {
	if m != nil {
		return m.StopTime
	}
	return nil
}

//
type TraceRouteInfo struct {
}

func (m *TraceRouteInfo) Reset()                    { *m = TraceRouteInfo{} }
func (m *TraceRouteInfo) String() string            { return proto.CompactTextString(m) }
func (*TraceRouteInfo) ProtoMessage()               {}
func (*TraceRouteInfo) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{3} }

// ----- Troubleshooting session object
type TroubleshootingSession struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec TroubleshootingSessionSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,inline" json:"spec,inline"`
	//
	Status TroubleshootingSessionStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *TroubleshootingSession) Reset()         { *m = TroubleshootingSession{} }
func (m *TroubleshootingSession) String() string { return proto.CompactTextString(m) }
func (*TroubleshootingSession) ProtoMessage()    {}
func (*TroubleshootingSession) Descriptor() ([]byte, []int) {
	return fileDescriptorTroubleshooting, []int{4}
}

func (m *TroubleshootingSession) GetSpec() TroubleshootingSessionSpec {
	if m != nil {
		return m.Spec
	}
	return TroubleshootingSessionSpec{}
}

func (m *TroubleshootingSession) GetStatus() TroubleshootingSessionStatus {
	if m != nil {
		return m.Status
	}
	return TroubleshootingSessionStatus{}
}

// ----- Troubleshooting Session Spec
type TroubleshootingSessionSpec struct {
	//
	FlowSelector MatchRule `protobuf:"bytes,1,opt,name=FlowSelector,json=flow-selector,inline" json:"flow-selector,inline"`
	//
	TimeWindow *TimeWindow `protobuf:"bytes,2,opt,name=TimeWindow,json=time-window,omitempty" json:"time-window,omitempty"`
	//
	RepeatEvery string `protobuf:"bytes,3,opt,name=RepeatEvery,json=repeat-every,omitempty,proto3" json:"repeat-every,omitempty"`
	// If packet capture is enabled, a mirror-session will be internally created
	EnableMirroring bool `protobuf:"varint,4,opt,name=EnableMirroring,json=enable-mirroring,omitempty,proto3" json:"enable-mirroring,omitempty"`
}

func (m *TroubleshootingSessionSpec) Reset()         { *m = TroubleshootingSessionSpec{} }
func (m *TroubleshootingSessionSpec) String() string { return proto.CompactTextString(m) }
func (*TroubleshootingSessionSpec) ProtoMessage()    {}
func (*TroubleshootingSessionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorTroubleshooting, []int{5}
}

func (m *TroubleshootingSessionSpec) GetFlowSelector() MatchRule {
	if m != nil {
		return m.FlowSelector
	}
	return MatchRule{}
}

func (m *TroubleshootingSessionSpec) GetTimeWindow() *TimeWindow {
	if m != nil {
		return m.TimeWindow
	}
	return nil
}

func (m *TroubleshootingSessionSpec) GetRepeatEvery() string {
	if m != nil {
		return m.RepeatEvery
	}
	return ""
}

func (m *TroubleshootingSessionSpec) GetEnableMirroring() bool {
	if m != nil {
		return m.EnableMirroring
	}
	return false
}

// ----- Troubleshooting Session Status
type TroubleshootingSessionStatus struct {
	//
	State string `protobuf:"bytes,1,opt,name=State,json=state,inline,proto3" json:"state,inline"`
	// report is generated each time troubleshooting session is activated i.e time-window
	TsResults []*TsResult `protobuf:"bytes,2,rep,name=TsResults,json=troubleshooting-results,inline" json:"troubleshooting-results,inline"`
}

func (m *TroubleshootingSessionStatus) Reset()         { *m = TroubleshootingSessionStatus{} }
func (m *TroubleshootingSessionStatus) String() string { return proto.CompactTextString(m) }
func (*TroubleshootingSessionStatus) ProtoMessage()    {}
func (*TroubleshootingSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorTroubleshooting, []int{6}
}

func (m *TroubleshootingSessionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *TroubleshootingSessionStatus) GetTsResults() []*TsResult {
	if m != nil {
		return m.TsResults
	}
	return nil
}

//
type TsAuditTrail struct {
}

func (m *TsAuditTrail) Reset()                    { *m = TsAuditTrail{} }
func (m *TsAuditTrail) String() string            { return proto.CompactTextString(m) }
func (*TsAuditTrail) ProtoMessage()               {}
func (*TsAuditTrail) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{7} }

//
type TsFlowCounters struct {
}

func (m *TsFlowCounters) Reset()                    { *m = TsFlowCounters{} }
func (m *TsFlowCounters) String() string            { return proto.CompactTextString(m) }
func (*TsFlowCounters) ProtoMessage()               {}
func (*TsFlowCounters) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{8} }

//
type TsFlowLogs struct {
}

func (m *TsFlowLogs) Reset()                    { *m = TsFlowLogs{} }
func (m *TsFlowLogs) String() string            { return proto.CompactTextString(m) }
func (*TsFlowLogs) ProtoMessage()               {}
func (*TsFlowLogs) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{9} }

// ----- Troubleshooting Report
// Following information is available in TS report
type TsPolicy struct {
	// Policy and associated rules that affect the flow
	// Parent policy
	Sgpolicy *api.ObjectRef `protobuf:"bytes,1,opt,name=Sgpolicy,json=sg-policy,omitempty" json:"sg-policy,omitempty"`
	// InRules affecting TsFlow
	InRules []*security.SGRule `protobuf:"bytes,2,rep,name=InRules,json=in-rules,omitempty" json:"in-rules,omitempty"`
	// OutRules affecting TsFlow
	OutRules []*security.SGRule `protobuf:"bytes,3,rep,name=OutRules,json=out-rules,omitempty" json:"out-rules,omitempty"`
}

func (m *TsPolicy) Reset()                    { *m = TsPolicy{} }
func (m *TsPolicy) String() string            { return proto.CompactTextString(m) }
func (*TsPolicy) ProtoMessage()               {}
func (*TsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{10} }

func (m *TsPolicy) GetSgpolicy() *api.ObjectRef {
	if m != nil {
		return m.Sgpolicy
	}
	return nil
}

func (m *TsPolicy) GetInRules() []*security.SGRule {
	if m != nil {
		return m.InRules
	}
	return nil
}

func (m *TsPolicy) GetOutRules() []*security.SGRule {
	if m != nil {
		return m.OutRules
	}
	return nil
}

// Format the information stored at the objectstore URL into a single report
// - Events and Alerts from src/dst NICs
// - AuditTrail of actions that affect the TS flow
// - Packet stats (delta in the given time window)
// - flow logs and counter (delta in the given time window)
type TsReport struct {
	//
	TimeWindow TimeWindow `protobuf:"bytes,1,opt,name=TimeWindow,json=time-window,omitempty" json:"time-window,omitempty"`
	//
	ReportSummary string `protobuf:"bytes,2,opt,name=ReportSummary,json=report-summary,inline,proto3" json:"report-summary,inline"`
	//
	Events []events.Event `protobuf:"bytes,3,rep,name=Events,json=events,omitempty" json:"events,omitempty"`
	//
	Alerts []AlertStatus `protobuf:"bytes,4,rep,name=Alerts,json=alerts,omitempty" json:"alerts,omitempty"`
	//
	Stats *TsStats `protobuf:"bytes,5,opt,name=Stats,json=stats,omitempty" json:"stats,omitempty"`
	//
	FlowCounters *TsFlowCounters `protobuf:"bytes,6,opt,name=FlowCounters,json=flow-counters,omitempty" json:"flow-counters,omitempty"`
	//
	FlowLogs *TsFlowLogs `protobuf:"bytes,7,opt,name=FlowLogs,json=flow-logs,omitempty" json:"flow-logs,omitempty"`
	//
	AuditTrail *TsAuditTrail `protobuf:"bytes,8,opt,name=AuditTrail,json=audit-trail,omitempty" json:"audit-trail,omitempty"`
	//
	Policies []TsPolicy `protobuf:"bytes,9,rep,name=Policies,json=policies,omitempty" json:"policies,omitempty"`
	// MirrorSession internally created if client enabled mirroring on trouble shooting session
	MirrorStatus *MirrorSessionStatus `protobuf:"bytes,10,opt,name=MirrorStatus,json=mirror-session-status,inline" json:"mirror-session-status,inline"`
	// Tools like Ping, Traceroute will be used for trouble shooting. Results obtained from these tools are preserved in the status
	PingStats *PingStats `protobuf:"bytes,11,opt,name=PingStats,json=ping-stats,inline" json:"ping-stats,inline"`
	//
	TracedRouteInfo *TraceRouteInfo `protobuf:"bytes,12,opt,name=TracedRouteInfo,json=traced-route-info,inline" json:"traced-route-info,inline"`
}

func (m *TsReport) Reset()                    { *m = TsReport{} }
func (m *TsReport) String() string            { return proto.CompactTextString(m) }
func (*TsReport) ProtoMessage()               {}
func (*TsReport) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{11} }

func (m *TsReport) GetTimeWindow() TimeWindow {
	if m != nil {
		return m.TimeWindow
	}
	return TimeWindow{}
}

func (m *TsReport) GetReportSummary() string {
	if m != nil {
		return m.ReportSummary
	}
	return ""
}

func (m *TsReport) GetEvents() []events.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *TsReport) GetAlerts() []AlertStatus {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *TsReport) GetStats() *TsStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *TsReport) GetFlowCounters() *TsFlowCounters {
	if m != nil {
		return m.FlowCounters
	}
	return nil
}

func (m *TsReport) GetFlowLogs() *TsFlowLogs {
	if m != nil {
		return m.FlowLogs
	}
	return nil
}

func (m *TsReport) GetAuditTrail() *TsAuditTrail {
	if m != nil {
		return m.AuditTrail
	}
	return nil
}

func (m *TsReport) GetPolicies() []TsPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *TsReport) GetMirrorStatus() *MirrorSessionStatus {
	if m != nil {
		return m.MirrorStatus
	}
	return nil
}

func (m *TsReport) GetPingStats() *PingStats {
	if m != nil {
		return m.PingStats
	}
	return nil
}

func (m *TsReport) GetTracedRouteInfo() *TraceRouteInfo {
	if m != nil {
		return m.TracedRouteInfo
	}
	return nil
}

//
type TsResult struct {
	// time window for which the information was collected
	TimeWindow TimeWindow `protobuf:"bytes,1,opt,name=TimeWindow,json=time-window,inline" json:"time-window,inline"`
	//
	ReportURL string `protobuf:"bytes,2,opt,name=ReportURL,json=report-url,inline,proto3" json:"report-url,inline"`
}

func (m *TsResult) Reset()                    { *m = TsResult{} }
func (m *TsResult) String() string            { return proto.CompactTextString(m) }
func (*TsResult) ProtoMessage()               {}
func (*TsResult) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{12} }

func (m *TsResult) GetTimeWindow() TimeWindow {
	if m != nil {
		return m.TimeWindow
	}
	return TimeWindow{}
}

func (m *TsResult) GetReportURL() string {
	if m != nil {
		return m.ReportURL
	}
	return ""
}

//
type TsStats struct {
}

func (m *TsStats) Reset()                    { *m = TsStats{} }
func (m *TsStats) String() string            { return proto.CompactTextString(m) }
func (*TsStats) ProtoMessage()               {}
func (*TsStats) Descriptor() ([]byte, []int) { return fileDescriptorTroubleshooting, []int{13} }

func init() {
	proto.RegisterType((*PingPktStats)(nil), "monitoring.PingPktStats")
	proto.RegisterType((*PingStats)(nil), "monitoring.PingStats")
	proto.RegisterType((*TimeWindow)(nil), "monitoring.TimeWindow")
	proto.RegisterType((*TraceRouteInfo)(nil), "monitoring.TraceRouteInfo")
	proto.RegisterType((*TroubleshootingSession)(nil), "monitoring.TroubleshootingSession")
	proto.RegisterType((*TroubleshootingSessionSpec)(nil), "monitoring.TroubleshootingSessionSpec")
	proto.RegisterType((*TroubleshootingSessionStatus)(nil), "monitoring.TroubleshootingSessionStatus")
	proto.RegisterType((*TsAuditTrail)(nil), "monitoring.TsAuditTrail")
	proto.RegisterType((*TsFlowCounters)(nil), "monitoring.TsFlowCounters")
	proto.RegisterType((*TsFlowLogs)(nil), "monitoring.TsFlowLogs")
	proto.RegisterType((*TsPolicy)(nil), "monitoring.TsPolicy")
	proto.RegisterType((*TsReport)(nil), "monitoring.TsReport")
	proto.RegisterType((*TsResult)(nil), "monitoring.TsResult")
	proto.RegisterType((*TsStats)(nil), "monitoring.TsStats")
	proto.RegisterEnum("monitoring.TroubleshootingSessionState", TroubleshootingSessionState_name, TroubleshootingSessionState_value)
}
func (m *PingPktStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingPktStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NoResp {
		dAtA[i] = 0x8
		i++
		if m.NoResp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RttMs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.RttMs))
	}
	return i, nil
}

func (m *PingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SmartNIC) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.SmartNIC)))
		i += copy(dAtA[i:], m.SmartNIC)
	}
	if m.PacketsTx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.PacketsTx))
	}
	if m.PacketsRx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.PacketsRx))
	}
	if m.PacketLoss != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.PacketLoss))
	}
	if m.MinRttMs != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinRttMs))))
		i += 4
	}
	if m.MaxRttMs != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxRttMs))))
		i += 4
	}
	if m.AvgRttMs != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AvgRttMs))))
		i += 4
	}
	if len(m.PktStats) > 0 {
		for _, msg := range m.PktStats {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TimeWindow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeWindow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.StartTime.Size()))
		n1, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StopTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.StopTime.Size()))
		n2, err := m.StopTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TraceRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TroubleshootingSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootingSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.ObjectMeta.Size()))
	n4, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.Spec.Size()))
	n5, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x22
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.Status.Size()))
	n6, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *TroubleshootingSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootingSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.FlowSelector.Size()))
	n7, err := m.FlowSelector.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.TimeWindow != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.TimeWindow.Size()))
		n8, err := m.TimeWindow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.RepeatEvery) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.RepeatEvery)))
		i += copy(dAtA[i:], m.RepeatEvery)
	}
	if m.EnableMirroring {
		dAtA[i] = 0x20
		i++
		if m.EnableMirroring {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TroubleshootingSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootingSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.TsResults) > 0 {
		for _, msg := range m.TsResults {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TsAuditTrail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsAuditTrail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TsFlowCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsFlowCounters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TsFlowLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsFlowLogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TsPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sgpolicy != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.Sgpolicy.Size()))
		n9, err := m.Sgpolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.InRules) > 0 {
		for _, msg := range m.InRules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutRules) > 0 {
		for _, msg := range m.OutRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TsReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.TimeWindow.Size()))
	n10, err := m.TimeWindow.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.ReportSummary) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.ReportSummary)))
		i += copy(dAtA[i:], m.ReportSummary)
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Alerts) > 0 {
		for _, msg := range m.Alerts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.Stats.Size()))
		n11, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.FlowCounters != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.FlowCounters.Size()))
		n12, err := m.FlowCounters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.FlowLogs != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.FlowLogs.Size()))
		n13, err := m.FlowLogs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.AuditTrail != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.AuditTrail.Size()))
		n14, err := m.AuditTrail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Policies) > 0 {
		for _, msg := range m.Policies {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintTroubleshooting(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MirrorStatus != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.MirrorStatus.Size()))
		n15, err := m.MirrorStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.PingStats != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.PingStats.Size()))
		n16, err := m.PingStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.TracedRouteInfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.TracedRouteInfo.Size()))
		n17, err := m.TracedRouteInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *TsResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTroubleshooting(dAtA, i, uint64(m.TimeWindow.Size()))
	n18, err := m.TimeWindow.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.ReportURL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.ReportURL)))
		i += copy(dAtA[i:], m.ReportURL)
	}
	return i, nil
}

func (m *TsStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TsStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTroubleshooting(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PingPktStats) Size() (n int) {
	var l int
	_ = l
	if m.NoResp {
		n += 2
	}
	if m.RttMs != 0 {
		n += 1 + sovTroubleshooting(uint64(m.RttMs))
	}
	return n
}

func (m *PingStats) Size() (n int) {
	var l int
	_ = l
	l = len(m.SmartNIC)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.PacketsTx != 0 {
		n += 1 + sovTroubleshooting(uint64(m.PacketsTx))
	}
	if m.PacketsRx != 0 {
		n += 1 + sovTroubleshooting(uint64(m.PacketsRx))
	}
	if m.PacketLoss != 0 {
		n += 1 + sovTroubleshooting(uint64(m.PacketLoss))
	}
	if m.MinRttMs != 0 {
		n += 5
	}
	if m.MaxRttMs != 0 {
		n += 5
	}
	if m.AvgRttMs != 0 {
		n += 5
	}
	if len(m.PktStats) > 0 {
		for _, e := range m.PktStats {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	return n
}

func (m *TimeWindow) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.StopTime != nil {
		l = m.StopTime.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	return n
}

func (m *TraceRouteInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TroubleshootingSession) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	return n
}

func (m *TroubleshootingSessionSpec) Size() (n int) {
	var l int
	_ = l
	l = m.FlowSelector.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	if m.TimeWindow != nil {
		l = m.TimeWindow.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	l = len(m.RepeatEvery)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.EnableMirroring {
		n += 2
	}
	return n
}

func (m *TroubleshootingSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if len(m.TsResults) > 0 {
		for _, e := range m.TsResults {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	return n
}

func (m *TsAuditTrail) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TsFlowCounters) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TsFlowLogs) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TsPolicy) Size() (n int) {
	var l int
	_ = l
	if m.Sgpolicy != nil {
		l = m.Sgpolicy.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if len(m.InRules) > 0 {
		for _, e := range m.InRules {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if len(m.OutRules) > 0 {
		for _, e := range m.OutRules {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	return n
}

func (m *TsReport) Size() (n int) {
	var l int
	_ = l
	l = m.TimeWindow.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	l = len(m.ReportSummary)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.FlowCounters != nil {
		l = m.FlowCounters.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.FlowLogs != nil {
		l = m.FlowLogs.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.AuditTrail != nil {
		l = m.AuditTrail.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if m.MirrorStatus != nil {
		l = m.MirrorStatus.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.PingStats != nil {
		l = m.PingStats.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.TracedRouteInfo != nil {
		l = m.TracedRouteInfo.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	return n
}

func (m *TsResult) Size() (n int) {
	var l int
	_ = l
	l = m.TimeWindow.Size()
	n += 1 + l + sovTroubleshooting(uint64(l))
	l = len(m.ReportURL)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	return n
}

func (m *TsStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTroubleshooting(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTroubleshooting(x uint64) (n int) {
	return sovTroubleshooting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PingPktStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingPktStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingPktStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoResp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoResp = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttMs", wireType)
			}
			m.RttMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RttMs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNIC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartNIC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsTx", wireType)
			}
			m.PacketsTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsTx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsRx", wireType)
			}
			m.PacketsRx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsRx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketLoss", wireType)
			}
			m.PacketLoss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketLoss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRttMs", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinRttMs = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRttMs", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxRttMs = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgRttMs", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AvgRttMs = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PktStats = append(m.PktStats, &PingPktStats{})
			if err := m.PktStats[len(m.PktStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeWindow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeWindow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeWindow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StopTime == nil {
				m.StopTime = &api.Timestamp{}
			}
			if err := m.StopTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootingSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootingSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootingSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootingSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootingSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootingSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FlowSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeWindow == nil {
				m.TimeWindow = &TimeWindow{}
			}
			if err := m.TimeWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatEvery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatEvery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMirroring", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableMirroring = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootingSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootingSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootingSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TsResults = append(m.TsResults, &TsResult{})
			if err := m.TsResults[len(m.TsResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsAuditTrail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsAuditTrail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsAuditTrail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsFlowCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsFlowCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsFlowCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsFlowLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsFlowLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsFlowLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sgpolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sgpolicy == nil {
				m.Sgpolicy = &api.ObjectRef{}
			}
			if err := m.Sgpolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InRules = append(m.InRules, &security.SGRule{})
			if err := m.InRules[len(m.InRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutRules = append(m.OutRules, &security.SGRule{})
			if err := m.OutRules[len(m.OutRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, events.Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, AlertStatus{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TsStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowCounters == nil {
				m.FlowCounters = &TsFlowCounters{}
			}
			if err := m.FlowCounters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowLogs == nil {
				m.FlowLogs = &TsFlowLogs{}
			}
			if err := m.FlowLogs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditTrail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuditTrail == nil {
				m.AuditTrail = &TsAuditTrail{}
			}
			if err := m.AuditTrail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, TsPolicy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MirrorStatus == nil {
				m.MirrorStatus = &MirrorSessionStatus{}
			}
			if err := m.MirrorStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PingStats == nil {
				m.PingStats = &PingStats{}
			}
			if err := m.PingStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracedRouteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TracedRouteInfo == nil {
				m.TracedRouteInfo = &TraceRouteInfo{}
			}
			if err := m.TracedRouteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TsStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TsStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TsStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTroubleshooting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTroubleshooting
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTroubleshooting
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTroubleshooting(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTroubleshooting = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTroubleshooting   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("troubleshooting.proto", fileDescriptorTroubleshooting) }

var fileDescriptorTroubleshooting = []byte{
	// 1510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4b, 0x6f, 0xdb, 0x48,
	0x12, 0x0e, 0x6d, 0xc7, 0x96, 0x5a, 0xb2, 0xad, 0x6d, 0xbf, 0x14, 0xc5, 0x6b, 0x1a, 0xc2, 0x66,
	0xe1, 0x2c, 0x96, 0xd2, 0xc2, 0x0b, 0x2c, 0x82, 0x2c, 0xb0, 0x0b, 0x33, 0x51, 0xbc, 0xc6, 0xfa,
	0x21, 0x48, 0x72, 0x02, 0xe4, 0x92, 0xd0, 0x52, 0x9b, 0xe9, 0x98, 0xea, 0x26, 0xd8, 0x4d, 0x3f,
	0x30, 0x98, 0xc3, 0x1c, 0x32, 0xb7, 0xf9, 0x15, 0x73, 0x9b, 0x3f, 0x30, 0x7f, 0x21, 0xc7, 0x60,
	0xae, 0x03, 0x70, 0x06, 0x3e, 0xea, 0x2f, 0xcc, 0x65, 0xd0, 0x0f, 0x4a, 0x94, 0x44, 0x3a, 0x93,
	0x9b, 0xfa, 0xab, 0xaa, 0xaf, 0x8b, 0xd5, 0xf5, 0x12, 0x58, 0xe3, 0x01, 0x0d, 0xcf, 0x3c, 0xc4,
	0xde, 0x51, 0xca, 0x31, 0x71, 0x6b, 0x7e, 0x40, 0x39, 0x85, 0xa0, 0x4f, 0x09, 0xe6, 0x34, 0xc0,
	0xc4, 0xad, 0x6c, 0xba, 0x94, 0xba, 0x1e, 0xaa, 0x3b, 0x3e, 0xae, 0x3b, 0x84, 0x50, 0xee, 0x70,
	0x4c, 0x09, 0x53, 0x9a, 0x95, 0x86, 0x8b, 0xf9, 0xbb, 0xf0, 0xac, 0xd6, 0xa5, 0xfd, 0xba, 0x8f,
	0x08, 0x73, 0x48, 0x8f, 0xd6, 0xd9, 0x55, 0xfd, 0x12, 0x11, 0xdc, 0x45, 0xf5, 0x90, 0x63, 0x8f,
	0x09, 0x53, 0x17, 0x91, 0xa4, 0x75, 0x1d, 0x93, 0xae, 0x17, 0xf6, 0x50, 0x4c, 0x63, 0x25, 0x68,
	0x5c, 0xea, 0xd2, 0xba, 0x84, 0xcf, 0xc2, 0x73, 0x79, 0x92, 0x07, 0xf9, 0x4b, 0xab, 0x3f, 0xca,
	0xb8, 0x55, 0xf8, 0xd8, 0x47, 0xdc, 0xd1, 0x6a, 0xb5, 0x3b, 0xd4, 0xa4, 0x06, 0xab, 0xa3, 0x4b,
	0x44, 0x78, 0xec, 0xc5, 0x3f, 0x3e, 0xaf, 0xcf, 0x5c, 0x9f, 0x7a, 0xb8, 0x7b, 0xa3, 0x2d, 0x8a,
	0x8e, 0x87, 0x82, 0xa1, 0x7d, 0xb1, 0x8f, 0x83, 0x80, 0x06, 0xea, 0x54, 0xfd, 0xce, 0x00, 0xc5,
	0x26, 0x26, 0x6e, 0xf3, 0x82, 0xb7, 0xb9, 0xc3, 0x19, 0x7c, 0x0a, 0xe6, 0x8f, 0x69, 0x0b, 0x31,
	0xbf, 0x6c, 0x6c, 0x1b, 0x3b, 0x39, 0x7b, 0x7d, 0x10, 0x99, 0x90, 0x50, 0x2b, 0x40, 0xcc, 0xa7,
	0x84, 0xa1, 0xbf, 0x63, 0xe2, 0x61, 0x82, 0x5a, 0x29, 0x18, 0xdc, 0x03, 0xf7, 0x5b, 0x9c, 0x1f,
	0xb1, 0xf2, 0xcc, 0xb6, 0xb1, 0xb3, 0x68, 0x57, 0x06, 0x91, 0xb9, 0x1e, 0xd0, 0x90, 0xf4, 0x2c,
	0x1e, 0x60, 0xdf, 0xe2, 0xb8, 0x3f, 0x34, 0xcf, 0xc0, 0xab, 0x3f, 0xcf, 0x81, 0xbc, 0xf0, 0x47,
	0x39, 0xf3, 0x04, 0xe4, 0xda, 0x7d, 0x27, 0xe0, 0xc7, 0x07, 0xcf, 0xa4, 0x3b, 0x79, 0x7b, 0x75,
	0x10, 0x99, 0x25, 0x26, 0x30, 0x8b, 0xe0, 0x6e, 0xcc, 0x36, 0x85, 0xc0, 0xff, 0x82, 0x7c, 0xd3,
	0xe9, 0x5e, 0x20, 0xce, 0x3a, 0xd7, 0xda, 0x9d, 0x8d, 0x41, 0x64, 0xae, 0xf8, 0x0a, 0xb4, 0x18,
	0x22, 0x3c, 0xb6, 0x4e, 0x03, 0xe1, 0xfe, 0x90, 0xa0, 0x75, 0x5d, 0x9e, 0x95, 0x04, 0x0f, 0x07,
	0x91, 0xb9, 0x11, 0xeb, 0x06, 0xa8, 0x8b, 0xf0, 0x25, 0xea, 0xc5, 0x24, 0x59, 0x02, 0xf8, 0x1f,
	0x00, 0x14, 0xd1, 0x21, 0x65, 0xac, 0x3c, 0x27, 0x99, 0x64, 0x50, 0x95, 0x81, 0xe5, 0x51, 0xc6,
	0x86, 0x41, 0x9d, 0xc6, 0xe0, 0x21, 0xc8, 0x1d, 0x61, 0xa2, 0xe2, 0x7a, 0x7f, 0xdb, 0xd8, 0x99,
	0xb1, 0xb7, 0x06, 0x91, 0x59, 0xe9, 0x63, 0x62, 0x65, 0xc4, 0xf6, 0x0e, 0x99, 0x64, 0x73, 0xae,
	0x15, 0xdb, 0x7c, 0x82, 0xcd, 0xb9, 0xce, 0x66, 0xcb, 0x94, 0x09, 0xb6, 0xbd, 0x4b, 0x57, 0xb1,
	0x2d, 0x8c, 0xd8, 0x9c, 0x4b, 0x37, 0x93, 0x2d, 0x5b, 0x06, 0xdf, 0x82, 0x5c, 0x9c, 0x86, 0xe5,
	0xdc, 0xf6, 0xec, 0x4e, 0x61, 0xb7, 0x5c, 0x1b, 0xd5, 0x78, 0x2d, 0x99, 0xa6, 0xfa, 0x2d, 0x50,
	0x60, 0xe9, 0x88, 0x31, 0x81, 0x8e, 0xde, 0x22, 0x5d, 0x50, 0xfd, 0xd1, 0x00, 0xa0, 0x83, 0xfb,
	0xe8, 0x15, 0x26, 0x3d, 0x7a, 0x05, 0x4f, 0x41, 0xbe, 0xcd, 0x9d, 0x80, 0x0b, 0x48, 0xe6, 0x57,
	0x61, 0x77, 0xa9, 0xe6, 0xf8, 0xb8, 0x26, 0x00, 0xc6, 0x9d, 0xbe, 0x6f, 0x6f, 0x7e, 0x8c, 0x4c,
	0x63, 0x10, 0x99, 0xab, 0x4c, 0x28, 0x2a, 0x77, 0x69, 0x1f, 0x73, 0xd4, 0xf7, 0xf9, 0x4d, 0x2b,
	0x15, 0x85, 0x2d, 0x90, 0x6b, 0x73, 0xea, 0x4b, 0xd6, 0x99, 0x54, 0xd6, 0x87, 0x9a, 0x75, 0x85,
	0x71, 0xea, 0x4f, 0x92, 0xa6, 0x81, 0xd5, 0x12, 0x58, 0xea, 0x04, 0x4e, 0x17, 0xb5, 0x68, 0xc8,
	0xd1, 0x01, 0x39, 0xa7, 0xd5, 0x6f, 0x66, 0xc1, 0x7a, 0x67, 0xbc, 0x31, 0xb6, 0x11, 0x63, 0x98,
	0x12, 0xf8, 0x2f, 0x60, 0x74, 0xf4, 0xf7, 0x2c, 0xaa, 0x9b, 0x6f, 0x7c, 0x74, 0x84, 0xb8, 0x63,
	0xaf, 0x7c, 0x8c, 0xcc, 0x7b, 0x9f, 0xd4, 0xe5, 0x0b, 0x71, 0xb8, 0xe2, 0x1f, 0xf0, 0x05, 0x30,
	0x4e, 0xb4, 0xc7, 0xcb, 0xd2, 0xee, 0xe4, 0xec, 0x3d, 0xea, 0x72, 0x69, 0x59, 0x49, 0x58, 0x2e,
	0x89, 0xf6, 0x95, 0xf0, 0x78, 0xe2, 0x0c, 0x5f, 0x82, 0xb9, 0xb6, 0x8f, 0xba, 0xb2, 0x6c, 0x0a,
	0xbb, 0x7f, 0x4d, 0x3e, 0x62, 0xba, 0xc7, 0x42, 0x5b, 0xf9, 0x36, 0x88, 0xcc, 0x02, 0xf3, 0xd1,
	0xb0, 0xb2, 0x93, 0x07, 0xd8, 0x03, 0xf3, 0xe2, 0xf5, 0x43, 0x55, 0x46, 0x85, 0xdd, 0x9d, 0x3f,
	0xc0, 0x2c, 0xf5, 0xed, 0xb2, 0xe6, 0x2e, 0x31, 0x79, 0x4e, 0xf8, 0x3e, 0x85, 0x3c, 0x7d, 0xfc,
	0xd3, 0x87, 0x07, 0x8f, 0x40, 0xa1, 0xfe, 0xd5, 0x49, 0xad, 0x83, 0x88, 0x43, 0xf8, 0xd7, 0x30,
	0x23, 0xd0, 0xd5, 0x0f, 0xb3, 0xa0, 0x92, 0xfd, 0x45, 0xf0, 0x0d, 0x28, 0xbe, 0xf0, 0xe8, 0x55,
	0x1b, 0x79, 0xa8, 0xcb, 0x69, 0xa0, 0x9f, 0x64, 0x2d, 0xe9, 0xf5, 0x91, 0xc3, 0xbb, 0xef, 0x5a,
	0xa1, 0x87, 0x64, 0xa6, 0x09, 0x17, 0x57, 0xcf, 0x3d, 0x7a, 0x65, 0x31, 0x6d, 0x13, 0xc7, 0x21,
	0x15, 0x85, 0x6f, 0x93, 0xe9, 0xac, 0x5f, 0x6e, 0x7d, 0x2c, 0x28, 0x43, 0xa9, 0xfd, 0x67, 0x9d,
	0x73, 0x6b, 0x22, 0xb3, 0xac, 0x2b, 0x09, 0x26, 0xe2, 0x90, 0x0e, 0xc3, 0xff, 0x83, 0x42, 0x0b,
	0xf9, 0xc8, 0xe1, 0x8d, 0x4b, 0x14, 0xdc, 0xc8, 0x17, 0xcd, 0xdb, 0x5b, 0x9a, 0x6a, 0x3d, 0x90,
	0x22, 0x0b, 0x09, 0x59, 0x82, 0x2b, 0x03, 0x87, 0xaf, 0xc0, 0x72, 0x83, 0x38, 0x67, 0x1e, 0x3a,
	0x92, 0x23, 0x08, 0x13, 0x57, 0x3e, 0x64, 0xce, 0xae, 0x6a, 0xc2, 0x0a, 0x92, 0x62, 0xab, 0x1f,
	0xcb, 0x13, 0xa4, 0x77, 0xc8, 0xaa, 0xb7, 0x06, 0xd8, 0xbc, 0xeb, 0xfd, 0xe1, 0x29, 0xb8, 0x2f,
	0x7e, 0x21, 0x3d, 0x45, 0x9e, 0xfc, 0xf0, 0xed, 0x83, 0xbf, 0xb4, 0x79, 0xd0, 0x20, 0x61, 0x7f,
	0x27, 0xdb, 0x10, 0x3d, 0x1e, 0x44, 0x66, 0x51, 0x24, 0xc8, 0xb0, 0x7f, 0x8d, 0x9d, 0xe0, 0x05,
	0xc8, 0x77, 0x58, 0x0b, 0xb1, 0xd0, 0xe3, 0x62, 0xe8, 0x89, 0x96, 0xb5, 0x3a, 0x16, 0x7e, 0x2d,
	0xb4, 0xab, 0x83, 0xc8, 0xdc, 0x9a, 0x58, 0x63, 0xc4, 0xf8, 0x14, 0x86, 0x31, 0xf5, 0x67, 0xe4,
	0xd5, 0x25, 0x50, 0xec, 0xb0, 0xbd, 0xb0, 0x87, 0x79, 0x27, 0x70, 0xb0, 0x27, 0x5b, 0x02, 0x13,
	0xf9, 0xf5, 0x8c, 0x86, 0x84, 0xa3, 0x80, 0x55, 0x8b, 0x00, 0x28, 0xe4, 0x90, 0xba, 0xac, 0xfa,
	0x9b, 0x01, 0x72, 0x1d, 0xd6, 0x94, 0x9b, 0x00, 0x3c, 0x06, 0xb9, 0xb6, 0xde, 0x0a, 0xc6, 0x3a,
	0x9d, 0xaa, 0xf0, 0x16, 0x3a, 0x57, 0xe3, 0x91, 0xb9, 0x96, 0x52, 0x1a, 0xeb, 0x47, 0xd3, 0x20,
	0x3c, 0x02, 0x0b, 0x07, 0x44, 0xe4, 0x6d, 0xfc, 0xdd, 0xa5, 0x1a, 0x43, 0xdd, 0x30, 0xc0, 0xfc,
	0xa6, 0xd6, 0xde, 0x97, 0x09, 0x2d, 0x87, 0x9c, 0x98, 0x44, 0x42, 0x2b, 0xc1, 0x97, 0x82, 0xc1,
	0x26, 0xc8, 0x9d, 0x84, 0x5c, 0xf1, 0xcd, 0x66, 0xf0, 0x49, 0x07, 0x69, 0xc8, 0xa7, 0x08, 0xd3,
	0xc0, 0xea, 0x2f, 0x39, 0xf1, 0xf5, 0x2d, 0xe4, 0xd3, 0x80, 0x4f, 0xd4, 0x89, 0xf1, 0xd9, 0x3a,
	0xb9, 0xf7, 0xc5, 0x75, 0xb2, 0x0f, 0x16, 0xd5, 0x5d, 0xed, 0xb0, 0xdf, 0x77, 0x82, 0x1b, 0x59,
	0x8c, 0x79, 0xfb, 0x81, 0x20, 0x0a, 0xa4, 0xc0, 0x62, 0x4a, 0x12, 0x3f, 0x77, 0x3a, 0x0c, 0x0f,
	0xc0, 0x7c, 0x43, 0xae, 0x7b, 0x3a, 0x0e, 0x8b, 0x35, 0xbd, 0xfd, 0x49, 0x74, 0xd4, 0xc8, 0x14,
	0x9a, 0x6c, 0x64, 0x93, 0x08, 0x6c, 0x83, 0xf9, 0x3d, 0xb9, 0xf9, 0x95, 0xe7, 0x24, 0xd5, 0x46,
	0xf2, 0x8b, 0xa5, 0x64, 0xb2, 0x3b, 0xaa, 0x45, 0x31, 0x49, 0x3a, 0x89, 0xc0, 0x43, 0x55, 0x49,
	0x6a, 0x17, 0x29, 0xec, 0xae, 0x8c, 0xa7, 0xbb, 0x1a, 0xce, 0x1b, 0xba, 0x9c, 0x97, 0xd5, 0xf0,
	0x1d, 0xd1, 0x4d, 0x02, 0xf0, 0xbd, 0xea, 0x90, 0x71, 0x06, 0xcb, 0x95, 0xa4, 0xb0, 0x5b, 0x19,
	0x27, 0x4d, 0x6a, 0xd8, 0xa6, 0xe6, 0xde, 0x90, 0x0d, 0xb1, 0xab, 0xe1, 0xc4, 0x1d, 0x59, 0x02,
	0xf8, 0x1a, 0xe4, 0xe2, 0xda, 0x90, 0xcb, 0xca, 0x64, 0x0a, 0x0c, 0x2b, 0x67, 0x34, 0x9e, 0x25,
	0x95, 0x47, 0xdd, 0xb1, 0x6c, 0x4b, 0x01, 0xe1, 0x19, 0x00, 0xa3, 0xca, 0x2c, 0xe7, 0x24, 0x7b,
	0x79, 0x9c, 0x7d, 0x24, 0x1f, 0xb5, 0x62, 0x47, 0x60, 0x16, 0x17, 0x60, 0x32, 0xc5, 0x52, 0x61,
	0xf8, 0x12, 0xe4, 0x64, 0x31, 0x63, 0xc4, 0xca, 0xf9, 0xb4, 0x5e, 0xa3, 0x4a, 0x5d, 0x4d, 0x6a,
	0xb9, 0x60, 0x6a, 0xed, 0x64, 0xed, 0x4d, 0x63, 0x30, 0x04, 0x45, 0xd5, 0x8f, 0xf5, 0x6c, 0x05,
	0xd2, 0x7b, 0x73, 0x6c, 0x4a, 0x29, 0xf9, 0xd8, 0x48, 0xdd, 0x1e, 0x44, 0xe6, 0xa6, 0x6a, 0xc6,
	0x16, 0x53, 0x12, 0x4b, 0xcf, 0x52, 0x9d, 0xe1, 0x77, 0x4a, 0x61, 0x2b, 0xb1, 0xe8, 0x97, 0x0b,
	0xd3, 0x93, 0x71, 0x28, 0xb4, 0xd7, 0x06, 0x91, 0xf9, 0x27, 0x5f, 0x74, 0xc4, 0xb1, 0x2d, 0x6f,
	0x1a, 0x82, 0x17, 0x60, 0x59, 0x6e, 0x49, 0xbd, 0xe1, 0x9a, 0x54, 0x2e, 0xa6, 0x64, 0xd4, 0xd8,
	0x22, 0x65, 0x6f, 0x0e, 0x22, 0xb3, 0xcc, 0xa5, 0x99, 0xd8, 0x4c, 0x39, 0xb2, 0x30, 0x39, 0xa7,
	0xf1, 0x2d, 0x99, 0x92, 0xea, 0xf7, 0x86, 0xea, 0x30, 0xa2, 0x49, 0xc3, 0xd7, 0x5f, 0xd0, 0x61,
	0x86, 0x0f, 0x94, 0x6c, 0x25, 0xf1, 0x3f, 0x80, 0x69, 0x0c, 0xfe, 0x1b, 0xe4, 0x55, 0x6f, 0x39,
	0x6d, 0x1d, 0xea, 0xbe, 0x22, 0x43, 0xa2, 0x1b, 0x48, 0x18, 0x78, 0xc3, 0x90, 0x4c, 0x41, 0xd5,
	0x3c, 0x58, 0xd0, 0x65, 0xf9, 0xb7, 0x13, 0xf0, 0xf0, 0x8e, 0x59, 0x07, 0x97, 0x00, 0xe8, 0xb4,
	0xdf, 0xb4, 0x4e, 0x8f, 0x8f, 0x0f, 0x8e, 0xf7, 0x4b, 0xf7, 0xf4, 0xb9, 0xdd, 0x39, 0x69, 0x36,
	0x1b, 0xcf, 0x4b, 0x06, 0x2c, 0x81, 0xa2, 0x38, 0x3f, 0xfb, 0x5f, 0xe3, 0xf9, 0xe9, 0x61, 0xe3,
	0x79, 0x69, 0xc6, 0x2e, 0x7e, 0xbc, 0xdd, 0x32, 0x3e, 0xdd, 0x6e, 0x19, 0xbf, 0xde, 0x6e, 0x19,
	0x4d, 0xe3, 0x6c, 0x5e, 0xfe, 0xa7, 0xfc, 0xe7, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x98, 0xb1,
	0xab, 0xf5, 0xb1, 0x0f, 0x00, 0x00,
}
