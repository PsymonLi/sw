// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: svc_monitoring.proto
*/
package monitoring

import (
	"context"
	"crypto/tls"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/gorilla/websocket"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter
var _ *listerwatcher.WatcherClient

// MiddlewareMonitoringV1Client add middleware to the client
type MiddlewareMonitoringV1Client func(ServiceMonitoringV1Client) ServiceMonitoringV1Client

// EndpointsMonitoringV1Client is the endpoints for the client
type EndpointsMonitoringV1Client struct {
	Client                           MonitoringV1Client
	AutoWatchSvcMonitoringV1Endpoint endpoint.Endpoint

	AutoAddAlertEndpoint                     endpoint.Endpoint
	AutoAddAlertDestinationEndpoint          endpoint.Endpoint
	AutoAddAlertPolicyEndpoint               endpoint.Endpoint
	AutoAddArchiveRequestEndpoint            endpoint.Endpoint
	AutoAddEventPolicyEndpoint               endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint               endpoint.Endpoint
	AutoAddMirrorSessionEndpoint             endpoint.Endpoint
	AutoAddTechSupportRequestEndpoint        endpoint.Endpoint
	AutoAddTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoDeleteAlertEndpoint                  endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint       endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint            endpoint.Endpoint
	AutoDeleteArchiveRequestEndpoint         endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint            endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint            endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint          endpoint.Endpoint
	AutoDeleteTechSupportRequestEndpoint     endpoint.Endpoint
	AutoDeleteTroubleshootingSessionEndpoint endpoint.Endpoint
	AutoGetAlertEndpoint                     endpoint.Endpoint
	AutoGetAlertDestinationEndpoint          endpoint.Endpoint
	AutoGetAlertPolicyEndpoint               endpoint.Endpoint
	AutoGetArchiveRequestEndpoint            endpoint.Endpoint
	AutoGetEventPolicyEndpoint               endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint               endpoint.Endpoint
	AutoGetMirrorSessionEndpoint             endpoint.Endpoint
	AutoGetTechSupportRequestEndpoint        endpoint.Endpoint
	AutoGetTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoLabelAlertEndpoint                   endpoint.Endpoint
	AutoLabelAlertDestinationEndpoint        endpoint.Endpoint
	AutoLabelAlertPolicyEndpoint             endpoint.Endpoint
	AutoLabelArchiveRequestEndpoint          endpoint.Endpoint
	AutoLabelEventPolicyEndpoint             endpoint.Endpoint
	AutoLabelFlowExportPolicyEndpoint        endpoint.Endpoint
	AutoLabelFwlogPolicyEndpoint             endpoint.Endpoint
	AutoLabelMirrorSessionEndpoint           endpoint.Endpoint
	AutoLabelTechSupportRequestEndpoint      endpoint.Endpoint
	AutoLabelTroubleshootingSessionEndpoint  endpoint.Endpoint
	AutoListAlertEndpoint                    endpoint.Endpoint
	AutoListAlertDestinationEndpoint         endpoint.Endpoint
	AutoListAlertPolicyEndpoint              endpoint.Endpoint
	AutoListArchiveRequestEndpoint           endpoint.Endpoint
	AutoListEventPolicyEndpoint              endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint         endpoint.Endpoint
	AutoListFwlogPolicyEndpoint              endpoint.Endpoint
	AutoListMirrorSessionEndpoint            endpoint.Endpoint
	AutoListTechSupportRequestEndpoint       endpoint.Endpoint
	AutoListTroubleshootingSessionEndpoint   endpoint.Endpoint
	AutoUpdateAlertEndpoint                  endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint       endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint            endpoint.Endpoint
	AutoUpdateArchiveRequestEndpoint         endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint            endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint            endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint          endpoint.Endpoint
	AutoUpdateTechSupportRequestEndpoint     endpoint.Endpoint
	AutoUpdateTroubleshootingSessionEndpoint endpoint.Endpoint
	CancelEndpoint                           endpoint.Endpoint
}

// EndpointsMonitoringV1RestClient is the REST client
type EndpointsMonitoringV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string
	bufferId string

	AutoAddAlertEndpoint                     endpoint.Endpoint
	AutoAddAlertDestinationEndpoint          endpoint.Endpoint
	AutoAddAlertPolicyEndpoint               endpoint.Endpoint
	AutoAddArchiveRequestEndpoint            endpoint.Endpoint
	AutoAddEventPolicyEndpoint               endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint               endpoint.Endpoint
	AutoAddMirrorSessionEndpoint             endpoint.Endpoint
	AutoAddTechSupportRequestEndpoint        endpoint.Endpoint
	AutoAddTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoDeleteAlertEndpoint                  endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint       endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint            endpoint.Endpoint
	AutoDeleteArchiveRequestEndpoint         endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint            endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint            endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint          endpoint.Endpoint
	AutoDeleteTechSupportRequestEndpoint     endpoint.Endpoint
	AutoDeleteTroubleshootingSessionEndpoint endpoint.Endpoint
	AutoGetAlertEndpoint                     endpoint.Endpoint
	AutoGetAlertDestinationEndpoint          endpoint.Endpoint
	AutoGetAlertPolicyEndpoint               endpoint.Endpoint
	AutoGetArchiveRequestEndpoint            endpoint.Endpoint
	AutoGetEventPolicyEndpoint               endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint               endpoint.Endpoint
	AutoGetMirrorSessionEndpoint             endpoint.Endpoint
	AutoGetTechSupportRequestEndpoint        endpoint.Endpoint
	AutoGetTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoLabelAlertEndpoint                   endpoint.Endpoint
	AutoLabelAlertDestinationEndpoint        endpoint.Endpoint
	AutoLabelAlertPolicyEndpoint             endpoint.Endpoint
	AutoLabelArchiveRequestEndpoint          endpoint.Endpoint
	AutoLabelEventPolicyEndpoint             endpoint.Endpoint
	AutoLabelFlowExportPolicyEndpoint        endpoint.Endpoint
	AutoLabelFwlogPolicyEndpoint             endpoint.Endpoint
	AutoLabelMirrorSessionEndpoint           endpoint.Endpoint
	AutoLabelTechSupportRequestEndpoint      endpoint.Endpoint
	AutoLabelTroubleshootingSessionEndpoint  endpoint.Endpoint
	AutoListAlertEndpoint                    endpoint.Endpoint
	AutoListAlertDestinationEndpoint         endpoint.Endpoint
	AutoListAlertPolicyEndpoint              endpoint.Endpoint
	AutoListArchiveRequestEndpoint           endpoint.Endpoint
	AutoListEventPolicyEndpoint              endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint         endpoint.Endpoint
	AutoListFwlogPolicyEndpoint              endpoint.Endpoint
	AutoListMirrorSessionEndpoint            endpoint.Endpoint
	AutoListTechSupportRequestEndpoint       endpoint.Endpoint
	AutoListTroubleshootingSessionEndpoint   endpoint.Endpoint
	AutoUpdateAlertEndpoint                  endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint       endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint            endpoint.Endpoint
	AutoUpdateArchiveRequestEndpoint         endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint            endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint            endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint          endpoint.Endpoint
	AutoUpdateTechSupportRequestEndpoint     endpoint.Endpoint
	AutoUpdateTroubleshootingSessionEndpoint endpoint.Endpoint
	AutoWatchAlertEndpoint                   endpoint.Endpoint
	AutoWatchAlertDestinationEndpoint        endpoint.Endpoint
	AutoWatchAlertPolicyEndpoint             endpoint.Endpoint
	AutoWatchArchiveRequestEndpoint          endpoint.Endpoint
	AutoWatchEventPolicyEndpoint             endpoint.Endpoint
	AutoWatchFlowExportPolicyEndpoint        endpoint.Endpoint
	AutoWatchFwlogPolicyEndpoint             endpoint.Endpoint
	AutoWatchMirrorSessionEndpoint           endpoint.Endpoint
	AutoWatchSvcMonitoringV1Endpoint         endpoint.Endpoint
	AutoWatchTechSupportRequestEndpoint      endpoint.Endpoint
	AutoWatchTroubleshootingSessionEndpoint  endpoint.Endpoint
	CancelEndpoint                           endpoint.Endpoint
}

// MiddlewareMonitoringV1Server adds middle ware to the server
type MiddlewareMonitoringV1Server func(ServiceMonitoringV1Server) ServiceMonitoringV1Server

// EndpointsMonitoringV1Server is the server endpoints
type EndpointsMonitoringV1Server struct {
	svcWatchHandlerMonitoringV1 func(options *api.ListWatchOptions, stream grpc.ServerStream) error

	AutoAddAlertEndpoint                     endpoint.Endpoint
	AutoAddAlertDestinationEndpoint          endpoint.Endpoint
	AutoAddAlertPolicyEndpoint               endpoint.Endpoint
	AutoAddArchiveRequestEndpoint            endpoint.Endpoint
	AutoAddEventPolicyEndpoint               endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint               endpoint.Endpoint
	AutoAddMirrorSessionEndpoint             endpoint.Endpoint
	AutoAddTechSupportRequestEndpoint        endpoint.Endpoint
	AutoAddTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoDeleteAlertEndpoint                  endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint       endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint            endpoint.Endpoint
	AutoDeleteArchiveRequestEndpoint         endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint            endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint            endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint          endpoint.Endpoint
	AutoDeleteTechSupportRequestEndpoint     endpoint.Endpoint
	AutoDeleteTroubleshootingSessionEndpoint endpoint.Endpoint
	AutoGetAlertEndpoint                     endpoint.Endpoint
	AutoGetAlertDestinationEndpoint          endpoint.Endpoint
	AutoGetAlertPolicyEndpoint               endpoint.Endpoint
	AutoGetArchiveRequestEndpoint            endpoint.Endpoint
	AutoGetEventPolicyEndpoint               endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint          endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint               endpoint.Endpoint
	AutoGetMirrorSessionEndpoint             endpoint.Endpoint
	AutoGetTechSupportRequestEndpoint        endpoint.Endpoint
	AutoGetTroubleshootingSessionEndpoint    endpoint.Endpoint
	AutoLabelAlertEndpoint                   endpoint.Endpoint
	AutoLabelAlertDestinationEndpoint        endpoint.Endpoint
	AutoLabelAlertPolicyEndpoint             endpoint.Endpoint
	AutoLabelArchiveRequestEndpoint          endpoint.Endpoint
	AutoLabelEventPolicyEndpoint             endpoint.Endpoint
	AutoLabelFlowExportPolicyEndpoint        endpoint.Endpoint
	AutoLabelFwlogPolicyEndpoint             endpoint.Endpoint
	AutoLabelMirrorSessionEndpoint           endpoint.Endpoint
	AutoLabelTechSupportRequestEndpoint      endpoint.Endpoint
	AutoLabelTroubleshootingSessionEndpoint  endpoint.Endpoint
	AutoListAlertEndpoint                    endpoint.Endpoint
	AutoListAlertDestinationEndpoint         endpoint.Endpoint
	AutoListAlertPolicyEndpoint              endpoint.Endpoint
	AutoListArchiveRequestEndpoint           endpoint.Endpoint
	AutoListEventPolicyEndpoint              endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint         endpoint.Endpoint
	AutoListFwlogPolicyEndpoint              endpoint.Endpoint
	AutoListMirrorSessionEndpoint            endpoint.Endpoint
	AutoListTechSupportRequestEndpoint       endpoint.Endpoint
	AutoListTroubleshootingSessionEndpoint   endpoint.Endpoint
	AutoUpdateAlertEndpoint                  endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint       endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint            endpoint.Endpoint
	AutoUpdateArchiveRequestEndpoint         endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint            endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint       endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint            endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint          endpoint.Endpoint
	AutoUpdateTechSupportRequestEndpoint     endpoint.Endpoint
	AutoUpdateTroubleshootingSessionEndpoint endpoint.Endpoint
	CancelEndpoint                           endpoint.Endpoint

	watchHandlerEventPolicy            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerFwlogPolicy            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerFlowExportPolicy       func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlert                  func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlertPolicy            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlertDestination       func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerMirrorSession          func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTroubleshootingSession func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerTechSupportRequest     func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerArchiveRequest         func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAlert is endpoint for AutoAddAlert
func (e EndpointsMonitoringV1Client) AutoAddAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoAddAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoAddAlert struct {
	V   Alert
	Err error
}

// AutoAddAlertDestination is endpoint for AutoAddAlertDestination
func (e EndpointsMonitoringV1Client) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoAddAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoAddAlertPolicy is endpoint for AutoAddAlertPolicy
func (e EndpointsMonitoringV1Client) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoAddAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoAddArchiveRequest is endpoint for AutoAddArchiveRequest
func (e EndpointsMonitoringV1Client) AutoAddArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	resp, err := e.AutoAddArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1AutoAddArchiveRequest struct {
	V   ArchiveRequest
	Err error
}

// AutoAddEventPolicy is endpoint for AutoAddEventPolicy
func (e EndpointsMonitoringV1Client) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoAddEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoAddEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoAddFlowExportPolicy is endpoint for AutoAddFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoAddFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoAddFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoAddFwlogPolicy is endpoint for AutoAddFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoAddFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoAddMirrorSession is endpoint for AutoAddMirrorSession
func (e EndpointsMonitoringV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoAddMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoAddTechSupportRequest is endpoint for AutoAddTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoAddTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	resp, err := e.AutoAddTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequest{}, err
	}
	return resp.(*TechSupportRequest), nil
}

type respMonitoringV1AutoAddTechSupportRequest struct {
	V   TechSupportRequest
	Err error
}

// AutoAddTroubleshootingSession is endpoint for AutoAddTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoAddTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	resp, err := e.AutoAddTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSession{}, err
	}
	return resp.(*TroubleshootingSession), nil
}

type respMonitoringV1AutoAddTroubleshootingSession struct {
	V   TroubleshootingSession
	Err error
}

// AutoDeleteAlert is endpoint for AutoDeleteAlert
func (e EndpointsMonitoringV1Client) AutoDeleteAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoDeleteAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoDeleteAlert struct {
	V   Alert
	Err error
}

// AutoDeleteAlertDestination is endpoint for AutoDeleteAlertDestination
func (e EndpointsMonitoringV1Client) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoDeleteAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoDeleteAlertPolicy is endpoint for AutoDeleteAlertPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoDeleteAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoDeleteArchiveRequest is endpoint for AutoDeleteArchiveRequest
func (e EndpointsMonitoringV1Client) AutoDeleteArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	resp, err := e.AutoDeleteArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1AutoDeleteArchiveRequest struct {
	V   ArchiveRequest
	Err error
}

// AutoDeleteEventPolicy is endpoint for AutoDeleteEventPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoDeleteEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoDeleteEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoDeleteFlowExportPolicy is endpoint for AutoDeleteFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoDeleteFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoDeleteFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoDeleteFwlogPolicy is endpoint for AutoDeleteFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoDeleteFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoDeleteMirrorSession is endpoint for AutoDeleteMirrorSession
func (e EndpointsMonitoringV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoDeleteMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoDeleteTechSupportRequest is endpoint for AutoDeleteTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoDeleteTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	resp, err := e.AutoDeleteTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequest{}, err
	}
	return resp.(*TechSupportRequest), nil
}

type respMonitoringV1AutoDeleteTechSupportRequest struct {
	V   TechSupportRequest
	Err error
}

// AutoDeleteTroubleshootingSession is endpoint for AutoDeleteTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoDeleteTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	resp, err := e.AutoDeleteTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSession{}, err
	}
	return resp.(*TroubleshootingSession), nil
}

type respMonitoringV1AutoDeleteTroubleshootingSession struct {
	V   TroubleshootingSession
	Err error
}

// AutoGetAlert is endpoint for AutoGetAlert
func (e EndpointsMonitoringV1Client) AutoGetAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoGetAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoGetAlert struct {
	V   Alert
	Err error
}

// AutoGetAlertDestination is endpoint for AutoGetAlertDestination
func (e EndpointsMonitoringV1Client) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoGetAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoGetAlertPolicy is endpoint for AutoGetAlertPolicy
func (e EndpointsMonitoringV1Client) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoGetAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoGetArchiveRequest is endpoint for AutoGetArchiveRequest
func (e EndpointsMonitoringV1Client) AutoGetArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	resp, err := e.AutoGetArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1AutoGetArchiveRequest struct {
	V   ArchiveRequest
	Err error
}

// AutoGetEventPolicy is endpoint for AutoGetEventPolicy
func (e EndpointsMonitoringV1Client) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoGetEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoGetEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoGetFlowExportPolicy is endpoint for AutoGetFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoGetFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoGetFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoGetFwlogPolicy is endpoint for AutoGetFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoGetFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoGetMirrorSession is endpoint for AutoGetMirrorSession
func (e EndpointsMonitoringV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoGetMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoGetTechSupportRequest is endpoint for AutoGetTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoGetTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	resp, err := e.AutoGetTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequest{}, err
	}
	return resp.(*TechSupportRequest), nil
}

type respMonitoringV1AutoGetTechSupportRequest struct {
	V   TechSupportRequest
	Err error
}

// AutoGetTroubleshootingSession is endpoint for AutoGetTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoGetTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	resp, err := e.AutoGetTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSession{}, err
	}
	return resp.(*TroubleshootingSession), nil
}

type respMonitoringV1AutoGetTroubleshootingSession struct {
	V   TroubleshootingSession
	Err error
}

// AutoLabelAlert is endpoint for AutoLabelAlert
func (e EndpointsMonitoringV1Client) AutoLabelAlert(ctx context.Context, in *api.Label) (*Alert, error) {
	resp, err := e.AutoLabelAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoLabelAlert struct {
	V   Alert
	Err error
}

// AutoLabelAlertDestination is endpoint for AutoLabelAlertDestination
func (e EndpointsMonitoringV1Client) AutoLabelAlertDestination(ctx context.Context, in *api.Label) (*AlertDestination, error) {
	resp, err := e.AutoLabelAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoLabelAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoLabelAlertPolicy is endpoint for AutoLabelAlertPolicy
func (e EndpointsMonitoringV1Client) AutoLabelAlertPolicy(ctx context.Context, in *api.Label) (*AlertPolicy, error) {
	resp, err := e.AutoLabelAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoLabelAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoLabelArchiveRequest is endpoint for AutoLabelArchiveRequest
func (e EndpointsMonitoringV1Client) AutoLabelArchiveRequest(ctx context.Context, in *api.Label) (*ArchiveRequest, error) {
	resp, err := e.AutoLabelArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1AutoLabelArchiveRequest struct {
	V   ArchiveRequest
	Err error
}

// AutoLabelEventPolicy is endpoint for AutoLabelEventPolicy
func (e EndpointsMonitoringV1Client) AutoLabelEventPolicy(ctx context.Context, in *api.Label) (*EventPolicy, error) {
	resp, err := e.AutoLabelEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoLabelEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoLabelFlowExportPolicy is endpoint for AutoLabelFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoLabelFlowExportPolicy(ctx context.Context, in *api.Label) (*FlowExportPolicy, error) {
	resp, err := e.AutoLabelFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoLabelFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoLabelFwlogPolicy is endpoint for AutoLabelFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoLabelFwlogPolicy(ctx context.Context, in *api.Label) (*FwlogPolicy, error) {
	resp, err := e.AutoLabelFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoLabelFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoLabelMirrorSession is endpoint for AutoLabelMirrorSession
func (e EndpointsMonitoringV1Client) AutoLabelMirrorSession(ctx context.Context, in *api.Label) (*MirrorSession, error) {
	resp, err := e.AutoLabelMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoLabelMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoLabelTechSupportRequest is endpoint for AutoLabelTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoLabelTechSupportRequest(ctx context.Context, in *api.Label) (*TechSupportRequest, error) {
	resp, err := e.AutoLabelTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequest{}, err
	}
	return resp.(*TechSupportRequest), nil
}

type respMonitoringV1AutoLabelTechSupportRequest struct {
	V   TechSupportRequest
	Err error
}

// AutoLabelTroubleshootingSession is endpoint for AutoLabelTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoLabelTroubleshootingSession(ctx context.Context, in *api.Label) (*TroubleshootingSession, error) {
	resp, err := e.AutoLabelTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSession{}, err
	}
	return resp.(*TroubleshootingSession), nil
}

type respMonitoringV1AutoLabelTroubleshootingSession struct {
	V   TroubleshootingSession
	Err error
}

// AutoListAlert is endpoint for AutoListAlert
func (e EndpointsMonitoringV1Client) AutoListAlert(ctx context.Context, in *api.ListWatchOptions) (*AlertList, error) {
	resp, err := e.AutoListAlertEndpoint(ctx, in)
	if err != nil {
		return &AlertList{}, err
	}
	return resp.(*AlertList), nil
}

type respMonitoringV1AutoListAlert struct {
	V   AlertList
	Err error
}

// AutoListAlertDestination is endpoint for AutoListAlertDestination
func (e EndpointsMonitoringV1Client) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (*AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestinationList{}, err
	}
	return resp.(*AlertDestinationList), nil
}

type respMonitoringV1AutoListAlertDestination struct {
	V   AlertDestinationList
	Err error
}

// AutoListAlertPolicy is endpoint for AutoListAlertPolicy
func (e EndpointsMonitoringV1Client) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (*AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicyList{}, err
	}
	return resp.(*AlertPolicyList), nil
}

type respMonitoringV1AutoListAlertPolicy struct {
	V   AlertPolicyList
	Err error
}

// AutoListArchiveRequest is endpoint for AutoListArchiveRequest
func (e EndpointsMonitoringV1Client) AutoListArchiveRequest(ctx context.Context, in *api.ListWatchOptions) (*ArchiveRequestList, error) {
	resp, err := e.AutoListArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequestList{}, err
	}
	return resp.(*ArchiveRequestList), nil
}

type respMonitoringV1AutoListArchiveRequest struct {
	V   ArchiveRequestList
	Err error
}

// AutoListEventPolicy is endpoint for AutoListEventPolicy
func (e EndpointsMonitoringV1Client) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions) (*EventPolicyList, error) {
	resp, err := e.AutoListEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicyList{}, err
	}
	return resp.(*EventPolicyList), nil
}

type respMonitoringV1AutoListEventPolicy struct {
	V   EventPolicyList
	Err error
}

// AutoListFlowExportPolicy is endpoint for AutoListFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	resp, err := e.AutoListFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicyList{}, err
	}
	return resp.(*FlowExportPolicyList), nil
}

type respMonitoringV1AutoListFlowExportPolicy struct {
	V   FlowExportPolicyList
	Err error
}

// AutoListFwlogPolicy is endpoint for AutoListFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (*FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicyList{}, err
	}
	return resp.(*FwlogPolicyList), nil
}

type respMonitoringV1AutoListFwlogPolicy struct {
	V   FwlogPolicyList
	Err error
}

// AutoListMirrorSession is endpoint for AutoListMirrorSession
func (e EndpointsMonitoringV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (*MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSessionList{}, err
	}
	return resp.(*MirrorSessionList), nil
}

type respMonitoringV1AutoListMirrorSession struct {
	V   MirrorSessionList
	Err error
}

// AutoListTechSupportRequest is endpoint for AutoListTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoListTechSupportRequest(ctx context.Context, in *api.ListWatchOptions) (*TechSupportRequestList, error) {
	resp, err := e.AutoListTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequestList{}, err
	}
	return resp.(*TechSupportRequestList), nil
}

type respMonitoringV1AutoListTechSupportRequest struct {
	V   TechSupportRequestList
	Err error
}

// AutoListTroubleshootingSession is endpoint for AutoListTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoListTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions) (*TroubleshootingSessionList, error) {
	resp, err := e.AutoListTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSessionList{}, err
	}
	return resp.(*TroubleshootingSessionList), nil
}

type respMonitoringV1AutoListTroubleshootingSession struct {
	V   TroubleshootingSessionList
	Err error
}

// AutoUpdateAlert is endpoint for AutoUpdateAlert
func (e EndpointsMonitoringV1Client) AutoUpdateAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoUpdateAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoUpdateAlert struct {
	V   Alert
	Err error
}

// AutoUpdateAlertDestination is endpoint for AutoUpdateAlertDestination
func (e EndpointsMonitoringV1Client) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoUpdateAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoUpdateAlertPolicy is endpoint for AutoUpdateAlertPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoUpdateAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoUpdateArchiveRequest is endpoint for AutoUpdateArchiveRequest
func (e EndpointsMonitoringV1Client) AutoUpdateArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	resp, err := e.AutoUpdateArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1AutoUpdateArchiveRequest struct {
	V   ArchiveRequest
	Err error
}

// AutoUpdateEventPolicy is endpoint for AutoUpdateEventPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoUpdateEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoUpdateEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoUpdateFlowExportPolicy is endpoint for AutoUpdateFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoUpdateFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoUpdateFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoUpdateFwlogPolicy is endpoint for AutoUpdateFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoUpdateFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoUpdateMirrorSession is endpoint for AutoUpdateMirrorSession
func (e EndpointsMonitoringV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoUpdateMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoUpdateTechSupportRequest is endpoint for AutoUpdateTechSupportRequest
func (e EndpointsMonitoringV1Client) AutoUpdateTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	resp, err := e.AutoUpdateTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return &TechSupportRequest{}, err
	}
	return resp.(*TechSupportRequest), nil
}

type respMonitoringV1AutoUpdateTechSupportRequest struct {
	V   TechSupportRequest
	Err error
}

// AutoUpdateTroubleshootingSession is endpoint for AutoUpdateTroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoUpdateTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	resp, err := e.AutoUpdateTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return &TroubleshootingSession{}, err
	}
	return resp.(*TroubleshootingSession), nil
}

type respMonitoringV1AutoUpdateTroubleshootingSession struct {
	V   TroubleshootingSession
	Err error
}

// Cancel is endpoint for Cancel
func (e EndpointsMonitoringV1Client) Cancel(ctx context.Context, in *CancelArchiveRequest) (*ArchiveRequest, error) {
	resp, err := e.CancelEndpoint(ctx, in)
	if err != nil {
		return &ArchiveRequest{}, err
	}
	return resp.(*ArchiveRequest), nil
}

type respMonitoringV1Cancel struct {
	V   ArchiveRequest
	Err error
}

func (e EndpointsMonitoringV1Client) AutoWatchSvcMonitoringV1(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchSvcMonitoringV1Client, error) {
	return e.Client.AutoWatchSvcMonitoringV1(ctx, in)
}

// AutoWatchEventPolicy performs Watch for EventPolicy
func (e EndpointsMonitoringV1Client) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchEventPolicyClient, error) {
	return e.Client.AutoWatchEventPolicy(ctx, in)
}

// AutoWatchFwlogPolicy performs Watch for FwlogPolicy
func (e EndpointsMonitoringV1Client) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchFwlogPolicyClient, error) {
	return e.Client.AutoWatchFwlogPolicy(ctx, in)
}

// AutoWatchFlowExportPolicy performs Watch for FlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchFlowExportPolicyClient, error) {
	return e.Client.AutoWatchFlowExportPolicy(ctx, in)
}

// AutoWatchAlert performs Watch for Alert
func (e EndpointsMonitoringV1Client) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertClient, error) {
	return e.Client.AutoWatchAlert(ctx, in)
}

// AutoWatchAlertPolicy performs Watch for AlertPolicy
func (e EndpointsMonitoringV1Client) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertPolicyClient, error) {
	return e.Client.AutoWatchAlertPolicy(ctx, in)
}

// AutoWatchAlertDestination performs Watch for AlertDestination
func (e EndpointsMonitoringV1Client) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertDestinationClient, error) {
	return e.Client.AutoWatchAlertDestination(ctx, in)
}

// AutoWatchMirrorSession performs Watch for MirrorSession
func (e EndpointsMonitoringV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchMirrorSessionClient, error) {
	return e.Client.AutoWatchMirrorSession(ctx, in)
}

// AutoWatchTroubleshootingSession performs Watch for TroubleshootingSession
func (e EndpointsMonitoringV1Client) AutoWatchTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchTroubleshootingSessionClient, error) {
	return e.Client.AutoWatchTroubleshootingSession(ctx, in)
}

// AutoWatchTechSupportRequest performs Watch for TechSupportRequest
func (e EndpointsMonitoringV1Client) AutoWatchTechSupportRequest(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchTechSupportRequestClient, error) {
	return e.Client.AutoWatchTechSupportRequest(ctx, in)
}

// AutoWatchArchiveRequest performs Watch for ArchiveRequest
func (e EndpointsMonitoringV1Client) AutoWatchArchiveRequest(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchArchiveRequestClient, error) {
	return e.Client.AutoWatchArchiveRequest(ctx, in)
}

// AutoAddAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoAddAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoAddAlertEndpoint creates  AutoAddAlert endpoints for the service
func MakeMonitoringV1AutoAddAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoAddAlert(ctx, *req)
		return respMonitoringV1AutoAddAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlert")(f)
}

// AutoAddAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoAddAlertDestinationEndpoint creates  AutoAddAlertDestination endpoints for the service
func MakeMonitoringV1AutoAddAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoAddAlertDestination(ctx, *req)
		return respMonitoringV1AutoAddAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlertDestination")(f)
}

// AutoAddAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoAddAlertPolicyEndpoint creates  AutoAddAlertPolicy endpoints for the service
func MakeMonitoringV1AutoAddAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoAddAlertPolicy(ctx, *req)
		return respMonitoringV1AutoAddAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlertPolicy")(f)
}

// AutoAddArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddArchiveRequest(ctx context.Context, in ArchiveRequest) (ArchiveRequest, error) {
	resp, err := e.AutoAddArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1AutoAddArchiveRequestEndpoint creates  AutoAddArchiveRequest endpoints for the service
func MakeMonitoringV1AutoAddArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ArchiveRequest)
		v, err := s.AutoAddArchiveRequest(ctx, *req)
		return respMonitoringV1AutoAddArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddArchiveRequest")(f)
}

// AutoAddEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoAddEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoAddEventPolicyEndpoint creates  AutoAddEventPolicy endpoints for the service
func MakeMonitoringV1AutoAddEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoAddEventPolicy(ctx, *req)
		return respMonitoringV1AutoAddEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddEventPolicy")(f)
}

// AutoAddFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoAddFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoAddFlowExportPolicyEndpoint creates  AutoAddFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoAddFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoAddFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoAddFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddFlowExportPolicy")(f)
}

// AutoAddFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoAddFwlogPolicyEndpoint creates  AutoAddFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoAddFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoAddFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoAddFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddFwlogPolicy")(f)
}

// AutoAddMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoAddMirrorSessionEndpoint creates  AutoAddMirrorSession endpoints for the service
func MakeMonitoringV1AutoAddMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoAddMirrorSession(ctx, *req)
		return respMonitoringV1AutoAddMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddMirrorSession")(f)
}

// AutoAddTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddTechSupportRequest(ctx context.Context, in TechSupportRequest) (TechSupportRequest, error) {
	resp, err := e.AutoAddTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequest{}, err
	}
	return *resp.(*TechSupportRequest), nil
}

// MakeMonitoringV1AutoAddTechSupportRequestEndpoint creates  AutoAddTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoAddTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TechSupportRequest)
		v, err := s.AutoAddTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoAddTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddTechSupportRequest")(f)
}

// AutoAddTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (TroubleshootingSession, error) {
	resp, err := e.AutoAddTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSession{}, err
	}
	return *resp.(*TroubleshootingSession), nil
}

// MakeMonitoringV1AutoAddTroubleshootingSessionEndpoint creates  AutoAddTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoAddTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TroubleshootingSession)
		v, err := s.AutoAddTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoAddTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddTroubleshootingSession")(f)
}

// AutoDeleteAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoDeleteAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoDeleteAlertEndpoint creates  AutoDeleteAlert endpoints for the service
func MakeMonitoringV1AutoDeleteAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoDeleteAlert(ctx, *req)
		return respMonitoringV1AutoDeleteAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlert")(f)
}

// AutoDeleteAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoDeleteAlertDestinationEndpoint creates  AutoDeleteAlertDestination endpoints for the service
func MakeMonitoringV1AutoDeleteAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoDeleteAlertDestination(ctx, *req)
		return respMonitoringV1AutoDeleteAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlertDestination")(f)
}

// AutoDeleteAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoDeleteAlertPolicyEndpoint creates  AutoDeleteAlertPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoDeleteAlertPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlertPolicy")(f)
}

// AutoDeleteArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteArchiveRequest(ctx context.Context, in ArchiveRequest) (ArchiveRequest, error) {
	resp, err := e.AutoDeleteArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1AutoDeleteArchiveRequestEndpoint creates  AutoDeleteArchiveRequest endpoints for the service
func MakeMonitoringV1AutoDeleteArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ArchiveRequest)
		v, err := s.AutoDeleteArchiveRequest(ctx, *req)
		return respMonitoringV1AutoDeleteArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteArchiveRequest")(f)
}

// AutoDeleteEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoDeleteEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoDeleteEventPolicyEndpoint creates  AutoDeleteEventPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoDeleteEventPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteEventPolicy")(f)
}

// AutoDeleteFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoDeleteFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint creates  AutoDeleteFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoDeleteFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteFlowExportPolicy")(f)
}

// AutoDeleteFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint creates  AutoDeleteFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoDeleteFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteFwlogPolicy")(f)
}

// AutoDeleteMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoDeleteMirrorSessionEndpoint creates  AutoDeleteMirrorSession endpoints for the service
func MakeMonitoringV1AutoDeleteMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoDeleteMirrorSession(ctx, *req)
		return respMonitoringV1AutoDeleteMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteMirrorSession")(f)
}

// AutoDeleteTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteTechSupportRequest(ctx context.Context, in TechSupportRequest) (TechSupportRequest, error) {
	resp, err := e.AutoDeleteTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequest{}, err
	}
	return *resp.(*TechSupportRequest), nil
}

// MakeMonitoringV1AutoDeleteTechSupportRequestEndpoint creates  AutoDeleteTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoDeleteTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TechSupportRequest)
		v, err := s.AutoDeleteTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoDeleteTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteTechSupportRequest")(f)
}

// AutoDeleteTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (TroubleshootingSession, error) {
	resp, err := e.AutoDeleteTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSession{}, err
	}
	return *resp.(*TroubleshootingSession), nil
}

// MakeMonitoringV1AutoDeleteTroubleshootingSessionEndpoint creates  AutoDeleteTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoDeleteTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TroubleshootingSession)
		v, err := s.AutoDeleteTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoDeleteTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteTroubleshootingSession")(f)
}

// AutoGetAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoGetAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoGetAlertEndpoint creates  AutoGetAlert endpoints for the service
func MakeMonitoringV1AutoGetAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoGetAlert(ctx, *req)
		return respMonitoringV1AutoGetAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlert")(f)
}

// AutoGetAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoGetAlertDestinationEndpoint creates  AutoGetAlertDestination endpoints for the service
func MakeMonitoringV1AutoGetAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoGetAlertDestination(ctx, *req)
		return respMonitoringV1AutoGetAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlertDestination")(f)
}

// AutoGetAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoGetAlertPolicyEndpoint creates  AutoGetAlertPolicy endpoints for the service
func MakeMonitoringV1AutoGetAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoGetAlertPolicy(ctx, *req)
		return respMonitoringV1AutoGetAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlertPolicy")(f)
}

// AutoGetArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetArchiveRequest(ctx context.Context, in ArchiveRequest) (ArchiveRequest, error) {
	resp, err := e.AutoGetArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1AutoGetArchiveRequestEndpoint creates  AutoGetArchiveRequest endpoints for the service
func MakeMonitoringV1AutoGetArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ArchiveRequest)
		v, err := s.AutoGetArchiveRequest(ctx, *req)
		return respMonitoringV1AutoGetArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetArchiveRequest")(f)
}

// AutoGetEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoGetEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoGetEventPolicyEndpoint creates  AutoGetEventPolicy endpoints for the service
func MakeMonitoringV1AutoGetEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoGetEventPolicy(ctx, *req)
		return respMonitoringV1AutoGetEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetEventPolicy")(f)
}

// AutoGetFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoGetFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoGetFlowExportPolicyEndpoint creates  AutoGetFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoGetFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoGetFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoGetFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetFlowExportPolicy")(f)
}

// AutoGetFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoGetFwlogPolicyEndpoint creates  AutoGetFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoGetFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoGetFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoGetFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetFwlogPolicy")(f)
}

// AutoGetMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoGetMirrorSessionEndpoint creates  AutoGetMirrorSession endpoints for the service
func MakeMonitoringV1AutoGetMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoGetMirrorSession(ctx, *req)
		return respMonitoringV1AutoGetMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetMirrorSession")(f)
}

// AutoGetTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetTechSupportRequest(ctx context.Context, in TechSupportRequest) (TechSupportRequest, error) {
	resp, err := e.AutoGetTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequest{}, err
	}
	return *resp.(*TechSupportRequest), nil
}

// MakeMonitoringV1AutoGetTechSupportRequestEndpoint creates  AutoGetTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoGetTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TechSupportRequest)
		v, err := s.AutoGetTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoGetTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetTechSupportRequest")(f)
}

// AutoGetTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (TroubleshootingSession, error) {
	resp, err := e.AutoGetTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSession{}, err
	}
	return *resp.(*TroubleshootingSession), nil
}

// MakeMonitoringV1AutoGetTroubleshootingSessionEndpoint creates  AutoGetTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoGetTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TroubleshootingSession)
		v, err := s.AutoGetTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoGetTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetTroubleshootingSession")(f)
}

// AutoLabelAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelAlert(ctx context.Context, in api.Label) (Alert, error) {
	resp, err := e.AutoLabelAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoLabelAlertEndpoint creates  AutoLabelAlert endpoints for the service
func MakeMonitoringV1AutoLabelAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelAlert(ctx, *req)
		return respMonitoringV1AutoLabelAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelAlert")(f)
}

// AutoLabelAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelAlertDestination(ctx context.Context, in api.Label) (AlertDestination, error) {
	resp, err := e.AutoLabelAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoLabelAlertDestinationEndpoint creates  AutoLabelAlertDestination endpoints for the service
func MakeMonitoringV1AutoLabelAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelAlertDestination(ctx, *req)
		return respMonitoringV1AutoLabelAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelAlertDestination")(f)
}

// AutoLabelAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelAlertPolicy(ctx context.Context, in api.Label) (AlertPolicy, error) {
	resp, err := e.AutoLabelAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoLabelAlertPolicyEndpoint creates  AutoLabelAlertPolicy endpoints for the service
func MakeMonitoringV1AutoLabelAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelAlertPolicy(ctx, *req)
		return respMonitoringV1AutoLabelAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelAlertPolicy")(f)
}

// AutoLabelArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelArchiveRequest(ctx context.Context, in api.Label) (ArchiveRequest, error) {
	resp, err := e.AutoLabelArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1AutoLabelArchiveRequestEndpoint creates  AutoLabelArchiveRequest endpoints for the service
func MakeMonitoringV1AutoLabelArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelArchiveRequest(ctx, *req)
		return respMonitoringV1AutoLabelArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelArchiveRequest")(f)
}

// AutoLabelEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelEventPolicy(ctx context.Context, in api.Label) (EventPolicy, error) {
	resp, err := e.AutoLabelEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoLabelEventPolicyEndpoint creates  AutoLabelEventPolicy endpoints for the service
func MakeMonitoringV1AutoLabelEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelEventPolicy(ctx, *req)
		return respMonitoringV1AutoLabelEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelEventPolicy")(f)
}

// AutoLabelFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelFlowExportPolicy(ctx context.Context, in api.Label) (FlowExportPolicy, error) {
	resp, err := e.AutoLabelFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoLabelFlowExportPolicyEndpoint creates  AutoLabelFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoLabelFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoLabelFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelFlowExportPolicy")(f)
}

// AutoLabelFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelFwlogPolicy(ctx context.Context, in api.Label) (FwlogPolicy, error) {
	resp, err := e.AutoLabelFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoLabelFwlogPolicyEndpoint creates  AutoLabelFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoLabelFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoLabelFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelFwlogPolicy")(f)
}

// AutoLabelMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelMirrorSession(ctx context.Context, in api.Label) (MirrorSession, error) {
	resp, err := e.AutoLabelMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoLabelMirrorSessionEndpoint creates  AutoLabelMirrorSession endpoints for the service
func MakeMonitoringV1AutoLabelMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelMirrorSession(ctx, *req)
		return respMonitoringV1AutoLabelMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelMirrorSession")(f)
}

// AutoLabelTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelTechSupportRequest(ctx context.Context, in api.Label) (TechSupportRequest, error) {
	resp, err := e.AutoLabelTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequest{}, err
	}
	return *resp.(*TechSupportRequest), nil
}

// MakeMonitoringV1AutoLabelTechSupportRequestEndpoint creates  AutoLabelTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoLabelTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoLabelTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelTechSupportRequest")(f)
}

// AutoLabelTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoLabelTroubleshootingSession(ctx context.Context, in api.Label) (TroubleshootingSession, error) {
	resp, err := e.AutoLabelTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSession{}, err
	}
	return *resp.(*TroubleshootingSession), nil
}

// MakeMonitoringV1AutoLabelTroubleshootingSessionEndpoint creates  AutoLabelTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoLabelTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.Label)
		v, err := s.AutoLabelTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoLabelTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoLabelTroubleshootingSession")(f)
}

// AutoListAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlert(ctx context.Context, in api.ListWatchOptions) (AlertList, error) {
	resp, err := e.AutoListAlertEndpoint(ctx, in)
	if err != nil {
		return AlertList{}, err
	}
	return *resp.(*AlertList), nil
}

// MakeMonitoringV1AutoListAlertEndpoint creates  AutoListAlert endpoints for the service
func MakeMonitoringV1AutoListAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlert(ctx, *req)
		return respMonitoringV1AutoListAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlert")(f)
}

// AutoListAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestinationList{}, err
	}
	return *resp.(*AlertDestinationList), nil
}

// MakeMonitoringV1AutoListAlertDestinationEndpoint creates  AutoListAlertDestination endpoints for the service
func MakeMonitoringV1AutoListAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertDestination(ctx, *req)
		return respMonitoringV1AutoListAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlertDestination")(f)
}

// AutoListAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicyList{}, err
	}
	return *resp.(*AlertPolicyList), nil
}

// MakeMonitoringV1AutoListAlertPolicyEndpoint creates  AutoListAlertPolicy endpoints for the service
func MakeMonitoringV1AutoListAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertPolicy(ctx, *req)
		return respMonitoringV1AutoListAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlertPolicy")(f)
}

// AutoListArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListArchiveRequest(ctx context.Context, in api.ListWatchOptions) (ArchiveRequestList, error) {
	resp, err := e.AutoListArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequestList{}, err
	}
	return *resp.(*ArchiveRequestList), nil
}

// MakeMonitoringV1AutoListArchiveRequestEndpoint creates  AutoListArchiveRequest endpoints for the service
func MakeMonitoringV1AutoListArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListArchiveRequest(ctx, *req)
		return respMonitoringV1AutoListArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListArchiveRequest")(f)
}

// AutoListEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListEventPolicy(ctx context.Context, in api.ListWatchOptions) (EventPolicyList, error) {
	resp, err := e.AutoListEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicyList{}, err
	}
	return *resp.(*EventPolicyList), nil
}

// MakeMonitoringV1AutoListEventPolicyEndpoint creates  AutoListEventPolicy endpoints for the service
func MakeMonitoringV1AutoListEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListEventPolicy(ctx, *req)
		return respMonitoringV1AutoListEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListEventPolicy")(f)
}

// AutoListFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListFlowExportPolicy(ctx context.Context, in api.ListWatchOptions) (FlowExportPolicyList, error) {
	resp, err := e.AutoListFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicyList{}, err
	}
	return *resp.(*FlowExportPolicyList), nil
}

// MakeMonitoringV1AutoListFlowExportPolicyEndpoint creates  AutoListFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoListFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoListFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListFlowExportPolicy")(f)
}

// AutoListFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicyList{}, err
	}
	return *resp.(*FwlogPolicyList), nil
}

// MakeMonitoringV1AutoListFwlogPolicyEndpoint creates  AutoListFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoListFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoListFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListFwlogPolicy")(f)
}

// AutoListMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSessionList{}, err
	}
	return *resp.(*MirrorSessionList), nil
}

// MakeMonitoringV1AutoListMirrorSessionEndpoint creates  AutoListMirrorSession endpoints for the service
func MakeMonitoringV1AutoListMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListMirrorSession(ctx, *req)
		return respMonitoringV1AutoListMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListMirrorSession")(f)
}

// AutoListTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListTechSupportRequest(ctx context.Context, in api.ListWatchOptions) (TechSupportRequestList, error) {
	resp, err := e.AutoListTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequestList{}, err
	}
	return *resp.(*TechSupportRequestList), nil
}

// MakeMonitoringV1AutoListTechSupportRequestEndpoint creates  AutoListTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoListTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoListTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListTechSupportRequest")(f)
}

// AutoListTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListTroubleshootingSession(ctx context.Context, in api.ListWatchOptions) (TroubleshootingSessionList, error) {
	resp, err := e.AutoListTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSessionList{}, err
	}
	return *resp.(*TroubleshootingSessionList), nil
}

// MakeMonitoringV1AutoListTroubleshootingSessionEndpoint creates  AutoListTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoListTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoListTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListTroubleshootingSession")(f)
}

// AutoUpdateAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoUpdateAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoUpdateAlertEndpoint creates  AutoUpdateAlert endpoints for the service
func MakeMonitoringV1AutoUpdateAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoUpdateAlert(ctx, *req)
		return respMonitoringV1AutoUpdateAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlert")(f)
}

// AutoUpdateAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoUpdateAlertDestinationEndpoint creates  AutoUpdateAlertDestination endpoints for the service
func MakeMonitoringV1AutoUpdateAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoUpdateAlertDestination(ctx, *req)
		return respMonitoringV1AutoUpdateAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlertDestination")(f)
}

// AutoUpdateAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoUpdateAlertPolicyEndpoint creates  AutoUpdateAlertPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoUpdateAlertPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlertPolicy")(f)
}

// AutoUpdateArchiveRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateArchiveRequest(ctx context.Context, in ArchiveRequest) (ArchiveRequest, error) {
	resp, err := e.AutoUpdateArchiveRequestEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1AutoUpdateArchiveRequestEndpoint creates  AutoUpdateArchiveRequest endpoints for the service
func MakeMonitoringV1AutoUpdateArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*ArchiveRequest)
		v, err := s.AutoUpdateArchiveRequest(ctx, *req)
		return respMonitoringV1AutoUpdateArchiveRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateArchiveRequest")(f)
}

// AutoUpdateEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoUpdateEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoUpdateEventPolicyEndpoint creates  AutoUpdateEventPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoUpdateEventPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateEventPolicy")(f)
}

// AutoUpdateFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoUpdateFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint creates  AutoUpdateFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoUpdateFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateFlowExportPolicy")(f)
}

// AutoUpdateFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint creates  AutoUpdateFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoUpdateFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateFwlogPolicy")(f)
}

// AutoUpdateMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoUpdateMirrorSessionEndpoint creates  AutoUpdateMirrorSession endpoints for the service
func MakeMonitoringV1AutoUpdateMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoUpdateMirrorSession(ctx, *req)
		return respMonitoringV1AutoUpdateMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateMirrorSession")(f)
}

// AutoUpdateTechSupportRequest implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateTechSupportRequest(ctx context.Context, in TechSupportRequest) (TechSupportRequest, error) {
	resp, err := e.AutoUpdateTechSupportRequestEndpoint(ctx, in)
	if err != nil {
		return TechSupportRequest{}, err
	}
	return *resp.(*TechSupportRequest), nil
}

// MakeMonitoringV1AutoUpdateTechSupportRequestEndpoint creates  AutoUpdateTechSupportRequest endpoints for the service
func MakeMonitoringV1AutoUpdateTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TechSupportRequest)
		v, err := s.AutoUpdateTechSupportRequest(ctx, *req)
		return respMonitoringV1AutoUpdateTechSupportRequest{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateTechSupportRequest")(f)
}

// AutoUpdateTroubleshootingSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (TroubleshootingSession, error) {
	resp, err := e.AutoUpdateTroubleshootingSessionEndpoint(ctx, in)
	if err != nil {
		return TroubleshootingSession{}, err
	}
	return *resp.(*TroubleshootingSession), nil
}

// MakeMonitoringV1AutoUpdateTroubleshootingSessionEndpoint creates  AutoUpdateTroubleshootingSession endpoints for the service
func MakeMonitoringV1AutoUpdateTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*TroubleshootingSession)
		v, err := s.AutoUpdateTroubleshootingSession(ctx, *req)
		return respMonitoringV1AutoUpdateTroubleshootingSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateTroubleshootingSession")(f)
}

// Cancel implementation on server Endpoint
func (e EndpointsMonitoringV1Server) Cancel(ctx context.Context, in CancelArchiveRequest) (ArchiveRequest, error) {
	resp, err := e.CancelEndpoint(ctx, in)
	if err != nil {
		return ArchiveRequest{}, err
	}
	return *resp.(*ArchiveRequest), nil
}

// MakeMonitoringV1CancelEndpoint creates  Cancel endpoints for the service
func MakeMonitoringV1CancelEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*CancelArchiveRequest)
		v, err := s.Cancel(ctx, *req)
		return respMonitoringV1Cancel{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:Cancel")(f)
}

func (e EndpointsMonitoringV1Server) AutoWatchSvcMonitoringV1(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchSvcMonitoringV1Server) error {
	return e.svcWatchHandlerMonitoringV1(in, stream)
}

// MakeAutoWatchSvcMonitoringV1Endpoint creates the Watch endpoint for the service
func MakeAutoWatchSvcMonitoringV1Endpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchSvcMonitoringV1Server)
		return s.AutoWatchSvcMonitoringV1(options, wstream)
	}
}

// AutoWatchEventPolicy is the watch handler for EventPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchEventPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventPolicyServer) error {
	return e.watchHandlerEventPolicy(in, stream)
}

// MakeAutoWatchEventPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchEventPolicyServer)
		return s.AutoWatchEventPolicy(options, wstream)
	}
}

// AutoWatchFwlogPolicy is the watch handler for FwlogPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFwlogPolicyServer) error {
	return e.watchHandlerFwlogPolicy(in, stream)
}

// MakeAutoWatchFwlogPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchFwlogPolicyServer)
		return s.AutoWatchFwlogPolicy(options, wstream)
	}
}

// AutoWatchFlowExportPolicy is the watch handler for FlowExportPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFlowExportPolicyServer) error {
	return e.watchHandlerFlowExportPolicy(in, stream)
}

// MakeAutoWatchFlowExportPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchFlowExportPolicyServer)
		return s.AutoWatchFlowExportPolicy(options, wstream)
	}
}

// AutoWatchAlert is the watch handler for Alert on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlert(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertServer) error {
	return e.watchHandlerAlert(in, stream)
}

// MakeAutoWatchAlertEndpoint creates the Watch endpoint
func MakeAutoWatchAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertServer)
		return s.AutoWatchAlert(options, wstream)
	}
}

// AutoWatchAlertPolicy is the watch handler for AlertPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertPolicyServer) error {
	return e.watchHandlerAlertPolicy(in, stream)
}

// MakeAutoWatchAlertPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertPolicyServer)
		return s.AutoWatchAlertPolicy(options, wstream)
	}
}

// AutoWatchAlertDestination is the watch handler for AlertDestination on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlertDestination(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertDestinationServer) error {
	return e.watchHandlerAlertDestination(in, stream)
}

// MakeAutoWatchAlertDestinationEndpoint creates the Watch endpoint
func MakeAutoWatchAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertDestinationServer)
		return s.AutoWatchAlertDestination(options, wstream)
	}
}

// AutoWatchMirrorSession is the watch handler for MirrorSession on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchMirrorSessionServer) error {
	return e.watchHandlerMirrorSession(in, stream)
}

// MakeAutoWatchMirrorSessionEndpoint creates the Watch endpoint
func MakeAutoWatchMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchMirrorSessionServer)
		return s.AutoWatchMirrorSession(options, wstream)
	}
}

// AutoWatchTroubleshootingSession is the watch handler for TroubleshootingSession on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchTroubleshootingSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchTroubleshootingSessionServer) error {
	return e.watchHandlerTroubleshootingSession(in, stream)
}

// MakeAutoWatchTroubleshootingSessionEndpoint creates the Watch endpoint
func MakeAutoWatchTroubleshootingSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchTroubleshootingSessionServer)
		return s.AutoWatchTroubleshootingSession(options, wstream)
	}
}

// AutoWatchTechSupportRequest is the watch handler for TechSupportRequest on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchTechSupportRequest(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchTechSupportRequestServer) error {
	return e.watchHandlerTechSupportRequest(in, stream)
}

// MakeAutoWatchTechSupportRequestEndpoint creates the Watch endpoint
func MakeAutoWatchTechSupportRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchTechSupportRequestServer)
		return s.AutoWatchTechSupportRequest(options, wstream)
	}
}

// AutoWatchArchiveRequest is the watch handler for ArchiveRequest on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchArchiveRequest(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchArchiveRequestServer) error {
	return e.watchHandlerArchiveRequest(in, stream)
}

// MakeAutoWatchArchiveRequestEndpoint creates the Watch endpoint
func MakeAutoWatchArchiveRequestEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchArchiveRequestServer)
		return s.AutoWatchArchiveRequest(options, wstream)
	}
}

// MakeMonitoringV1ServerEndpoints creates server endpoints
func MakeMonitoringV1ServerEndpoints(s ServiceMonitoringV1Server, logger log.Logger) EndpointsMonitoringV1Server {
	return EndpointsMonitoringV1Server{
		svcWatchHandlerMonitoringV1: MakeAutoWatchSvcMonitoringV1Endpoint(s, logger),

		AutoAddAlertEndpoint:                     MakeMonitoringV1AutoAddAlertEndpoint(s, logger),
		AutoAddAlertDestinationEndpoint:          MakeMonitoringV1AutoAddAlertDestinationEndpoint(s, logger),
		AutoAddAlertPolicyEndpoint:               MakeMonitoringV1AutoAddAlertPolicyEndpoint(s, logger),
		AutoAddArchiveRequestEndpoint:            MakeMonitoringV1AutoAddArchiveRequestEndpoint(s, logger),
		AutoAddEventPolicyEndpoint:               MakeMonitoringV1AutoAddEventPolicyEndpoint(s, logger),
		AutoAddFlowExportPolicyEndpoint:          MakeMonitoringV1AutoAddFlowExportPolicyEndpoint(s, logger),
		AutoAddFwlogPolicyEndpoint:               MakeMonitoringV1AutoAddFwlogPolicyEndpoint(s, logger),
		AutoAddMirrorSessionEndpoint:             MakeMonitoringV1AutoAddMirrorSessionEndpoint(s, logger),
		AutoAddTechSupportRequestEndpoint:        MakeMonitoringV1AutoAddTechSupportRequestEndpoint(s, logger),
		AutoAddTroubleshootingSessionEndpoint:    MakeMonitoringV1AutoAddTroubleshootingSessionEndpoint(s, logger),
		AutoDeleteAlertEndpoint:                  MakeMonitoringV1AutoDeleteAlertEndpoint(s, logger),
		AutoDeleteAlertDestinationEndpoint:       MakeMonitoringV1AutoDeleteAlertDestinationEndpoint(s, logger),
		AutoDeleteAlertPolicyEndpoint:            MakeMonitoringV1AutoDeleteAlertPolicyEndpoint(s, logger),
		AutoDeleteArchiveRequestEndpoint:         MakeMonitoringV1AutoDeleteArchiveRequestEndpoint(s, logger),
		AutoDeleteEventPolicyEndpoint:            MakeMonitoringV1AutoDeleteEventPolicyEndpoint(s, logger),
		AutoDeleteFlowExportPolicyEndpoint:       MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint(s, logger),
		AutoDeleteFwlogPolicyEndpoint:            MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint(s, logger),
		AutoDeleteMirrorSessionEndpoint:          MakeMonitoringV1AutoDeleteMirrorSessionEndpoint(s, logger),
		AutoDeleteTechSupportRequestEndpoint:     MakeMonitoringV1AutoDeleteTechSupportRequestEndpoint(s, logger),
		AutoDeleteTroubleshootingSessionEndpoint: MakeMonitoringV1AutoDeleteTroubleshootingSessionEndpoint(s, logger),
		AutoGetAlertEndpoint:                     MakeMonitoringV1AutoGetAlertEndpoint(s, logger),
		AutoGetAlertDestinationEndpoint:          MakeMonitoringV1AutoGetAlertDestinationEndpoint(s, logger),
		AutoGetAlertPolicyEndpoint:               MakeMonitoringV1AutoGetAlertPolicyEndpoint(s, logger),
		AutoGetArchiveRequestEndpoint:            MakeMonitoringV1AutoGetArchiveRequestEndpoint(s, logger),
		AutoGetEventPolicyEndpoint:               MakeMonitoringV1AutoGetEventPolicyEndpoint(s, logger),
		AutoGetFlowExportPolicyEndpoint:          MakeMonitoringV1AutoGetFlowExportPolicyEndpoint(s, logger),
		AutoGetFwlogPolicyEndpoint:               MakeMonitoringV1AutoGetFwlogPolicyEndpoint(s, logger),
		AutoGetMirrorSessionEndpoint:             MakeMonitoringV1AutoGetMirrorSessionEndpoint(s, logger),
		AutoGetTechSupportRequestEndpoint:        MakeMonitoringV1AutoGetTechSupportRequestEndpoint(s, logger),
		AutoGetTroubleshootingSessionEndpoint:    MakeMonitoringV1AutoGetTroubleshootingSessionEndpoint(s, logger),
		AutoLabelAlertEndpoint:                   MakeMonitoringV1AutoLabelAlertEndpoint(s, logger),
		AutoLabelAlertDestinationEndpoint:        MakeMonitoringV1AutoLabelAlertDestinationEndpoint(s, logger),
		AutoLabelAlertPolicyEndpoint:             MakeMonitoringV1AutoLabelAlertPolicyEndpoint(s, logger),
		AutoLabelArchiveRequestEndpoint:          MakeMonitoringV1AutoLabelArchiveRequestEndpoint(s, logger),
		AutoLabelEventPolicyEndpoint:             MakeMonitoringV1AutoLabelEventPolicyEndpoint(s, logger),
		AutoLabelFlowExportPolicyEndpoint:        MakeMonitoringV1AutoLabelFlowExportPolicyEndpoint(s, logger),
		AutoLabelFwlogPolicyEndpoint:             MakeMonitoringV1AutoLabelFwlogPolicyEndpoint(s, logger),
		AutoLabelMirrorSessionEndpoint:           MakeMonitoringV1AutoLabelMirrorSessionEndpoint(s, logger),
		AutoLabelTechSupportRequestEndpoint:      MakeMonitoringV1AutoLabelTechSupportRequestEndpoint(s, logger),
		AutoLabelTroubleshootingSessionEndpoint:  MakeMonitoringV1AutoLabelTroubleshootingSessionEndpoint(s, logger),
		AutoListAlertEndpoint:                    MakeMonitoringV1AutoListAlertEndpoint(s, logger),
		AutoListAlertDestinationEndpoint:         MakeMonitoringV1AutoListAlertDestinationEndpoint(s, logger),
		AutoListAlertPolicyEndpoint:              MakeMonitoringV1AutoListAlertPolicyEndpoint(s, logger),
		AutoListArchiveRequestEndpoint:           MakeMonitoringV1AutoListArchiveRequestEndpoint(s, logger),
		AutoListEventPolicyEndpoint:              MakeMonitoringV1AutoListEventPolicyEndpoint(s, logger),
		AutoListFlowExportPolicyEndpoint:         MakeMonitoringV1AutoListFlowExportPolicyEndpoint(s, logger),
		AutoListFwlogPolicyEndpoint:              MakeMonitoringV1AutoListFwlogPolicyEndpoint(s, logger),
		AutoListMirrorSessionEndpoint:            MakeMonitoringV1AutoListMirrorSessionEndpoint(s, logger),
		AutoListTechSupportRequestEndpoint:       MakeMonitoringV1AutoListTechSupportRequestEndpoint(s, logger),
		AutoListTroubleshootingSessionEndpoint:   MakeMonitoringV1AutoListTroubleshootingSessionEndpoint(s, logger),
		AutoUpdateAlertEndpoint:                  MakeMonitoringV1AutoUpdateAlertEndpoint(s, logger),
		AutoUpdateAlertDestinationEndpoint:       MakeMonitoringV1AutoUpdateAlertDestinationEndpoint(s, logger),
		AutoUpdateAlertPolicyEndpoint:            MakeMonitoringV1AutoUpdateAlertPolicyEndpoint(s, logger),
		AutoUpdateArchiveRequestEndpoint:         MakeMonitoringV1AutoUpdateArchiveRequestEndpoint(s, logger),
		AutoUpdateEventPolicyEndpoint:            MakeMonitoringV1AutoUpdateEventPolicyEndpoint(s, logger),
		AutoUpdateFlowExportPolicyEndpoint:       MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint(s, logger),
		AutoUpdateFwlogPolicyEndpoint:            MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint(s, logger),
		AutoUpdateMirrorSessionEndpoint:          MakeMonitoringV1AutoUpdateMirrorSessionEndpoint(s, logger),
		AutoUpdateTechSupportRequestEndpoint:     MakeMonitoringV1AutoUpdateTechSupportRequestEndpoint(s, logger),
		AutoUpdateTroubleshootingSessionEndpoint: MakeMonitoringV1AutoUpdateTroubleshootingSessionEndpoint(s, logger),
		CancelEndpoint:                           MakeMonitoringV1CancelEndpoint(s, logger),

		watchHandlerEventPolicy:            MakeAutoWatchEventPolicyEndpoint(s, logger),
		watchHandlerFwlogPolicy:            MakeAutoWatchFwlogPolicyEndpoint(s, logger),
		watchHandlerFlowExportPolicy:       MakeAutoWatchFlowExportPolicyEndpoint(s, logger),
		watchHandlerAlert:                  MakeAutoWatchAlertEndpoint(s, logger),
		watchHandlerAlertPolicy:            MakeAutoWatchAlertPolicyEndpoint(s, logger),
		watchHandlerAlertDestination:       MakeAutoWatchAlertDestinationEndpoint(s, logger),
		watchHandlerMirrorSession:          MakeAutoWatchMirrorSessionEndpoint(s, logger),
		watchHandlerTroubleshootingSession: MakeAutoWatchTroubleshootingSessionEndpoint(s, logger),
		watchHandlerTechSupportRequest:     MakeAutoWatchTechSupportRequestEndpoint(s, logger),
		watchHandlerArchiveRequest:         MakeAutoWatchArchiveRequestEndpoint(s, logger),
	}
}

// LoggingMonitoringV1MiddlewareClient adds middleware for the client
func LoggingMonitoringV1MiddlewareClient(logger log.Logger) MiddlewareMonitoringV1Client {
	return func(next ServiceMonitoringV1Client) ServiceMonitoringV1Client {
		return loggingMonitoringV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceMonitoringV1Client
}

// LoggingMonitoringV1MiddlewareServer adds middleware for the client
func LoggingMonitoringV1MiddlewareServer(logger log.Logger) MiddlewareMonitoringV1Server {
	return func(next ServiceMonitoringV1Server) ServiceMonitoringV1Server {
		return loggingMonitoringV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceMonitoringV1Server
}

func (m loggingMonitoringV1MiddlewareClient) AutoAddAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddArchiveRequest(ctx context.Context, in *ArchiveRequest) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddTechSupportRequest(ctx context.Context, in *TechSupportRequest) (resp *TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (resp *TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoAddTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteArchiveRequest(ctx context.Context, in *ArchiveRequest) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteTechSupportRequest(ctx context.Context, in *TechSupportRequest) (resp *TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (resp *TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoDeleteTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetArchiveRequest(ctx context.Context, in *ArchiveRequest) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetTechSupportRequest(ctx context.Context, in *TechSupportRequest) (resp *TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (resp *TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoGetTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelAlert(ctx context.Context, in *api.Label) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelAlertDestination(ctx context.Context, in *api.Label) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelAlertPolicy(ctx context.Context, in *api.Label) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelArchiveRequest(ctx context.Context, in *api.Label) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelEventPolicy(ctx context.Context, in *api.Label) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelFlowExportPolicy(ctx context.Context, in *api.Label) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelFwlogPolicy(ctx context.Context, in *api.Label) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelMirrorSession(ctx context.Context, in *api.Label) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelTechSupportRequest(ctx context.Context, in *api.Label) (resp *TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoLabelTroubleshootingSession(ctx context.Context, in *api.Label) (resp *TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoLabelTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlert(ctx context.Context, in *api.ListWatchOptions) (resp *AlertList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp *AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListArchiveRequest(ctx context.Context, in *api.ListWatchOptions) (resp *ArchiveRequestList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *EventPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *FlowExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp *MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListTechSupportRequest(ctx context.Context, in *api.ListWatchOptions) (resp *TechSupportRequestList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions) (resp *TroubleshootingSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoListTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateArchiveRequest(ctx context.Context, in *ArchiveRequest) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateTechSupportRequest(ctx context.Context, in *TechSupportRequest) (resp *TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (resp *TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoUpdateTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) Cancel(ctx context.Context, in *CancelArchiveRequest) (resp *ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "Cancel", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.Cancel(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareClient) AutoWatchSvcMonitoringV1(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchSvcMonitoringV1Client, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchSvcMonitoringV1", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchSvcMonitoringV1(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareClient) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchEventPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchEventPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchFwlogPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchFlowExportPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchFlowExportPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlert", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertDestinationClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchMirrorSessionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchTroubleshootingSessionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchTroubleshootingSession", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchTechSupportRequest(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchTechSupportRequestClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchTechSupportRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchArchiveRequest(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchArchiveRequestClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchArchiveRequest", "result", rslt, "duration", time.Since(begin), "error", err)
	}(time.Now())
	resp, err = m.next.AutoWatchArchiveRequest(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareServer) AutoAddAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddArchiveRequest(ctx context.Context, in ArchiveRequest) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddTechSupportRequest(ctx context.Context, in TechSupportRequest) (resp TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (resp TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteArchiveRequest(ctx context.Context, in ArchiveRequest) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteTechSupportRequest(ctx context.Context, in TechSupportRequest) (resp TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (resp TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetArchiveRequest(ctx context.Context, in ArchiveRequest) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetTechSupportRequest(ctx context.Context, in TechSupportRequest) (resp TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (resp TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelAlert(ctx context.Context, in api.Label) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelAlertDestination(ctx context.Context, in api.Label) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelAlertPolicy(ctx context.Context, in api.Label) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelArchiveRequest(ctx context.Context, in api.Label) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelEventPolicy(ctx context.Context, in api.Label) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelFlowExportPolicy(ctx context.Context, in api.Label) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelFwlogPolicy(ctx context.Context, in api.Label) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelMirrorSession(ctx context.Context, in api.Label) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelTechSupportRequest(ctx context.Context, in api.Label) (resp TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoLabelTroubleshootingSession(ctx context.Context, in api.Label) (resp TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoLabelTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoLabelTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlert(ctx context.Context, in api.ListWatchOptions) (resp AlertList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (resp AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (resp AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListArchiveRequest(ctx context.Context, in api.ListWatchOptions) (resp ArchiveRequestList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListEventPolicy(ctx context.Context, in api.ListWatchOptions) (resp EventPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListFlowExportPolicy(ctx context.Context, in api.ListWatchOptions) (resp FlowExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (resp FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (resp MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListTechSupportRequest(ctx context.Context, in api.ListWatchOptions) (resp TechSupportRequestList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListTroubleshootingSession(ctx context.Context, in api.ListWatchOptions) (resp TroubleshootingSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateArchiveRequest(ctx context.Context, in ArchiveRequest) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateArchiveRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateTechSupportRequest(ctx context.Context, in TechSupportRequest) (resp TechSupportRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTechSupportRequest(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateTroubleshootingSession(ctx context.Context, in TroubleshootingSession) (resp TroubleshootingSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateTroubleshootingSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) Cancel(ctx context.Context, in CancelArchiveRequest) (resp ArchiveRequest, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "Cancel", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.Cancel(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareServer) AutoWatchSvcMonitoringV1(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchSvcMonitoringV1Server) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchSvcMonitoringV1", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchSvcMonitoringV1(in, stream)
	return
}

func (m loggingMonitoringV1MiddlewareServer) AutoWatchEventPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchEventPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFwlogPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFwlogPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFlowExportPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFlowExportPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlert(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlert(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlertDestination(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertDestinationServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertDestination(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchMirrorSessionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchMirrorSession(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchTroubleshootingSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchTroubleshootingSessionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchTroubleshootingSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTroubleshootingSession(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchTechSupportRequest(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchTechSupportRequestServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchTechSupportRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchTechSupportRequest(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchArchiveRequest(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchArchiveRequestServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchArchiveRequest", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchArchiveRequest(in, stream)
	return
}

func (r *EndpointsMonitoringV1RestClient) updateHTTPHeader(ctx context.Context, header *http.Header) {
	val, ok := loginctx.AuthzHeaderFromContext(ctx)
	if ok {
		header.Add("Authorization", val)
	}
	val, ok = loginctx.ExtRequestIDHeaderFromContext(ctx)
	if ok {
		header.Add("Pensando-Psm-External-Request-Id", val)
	}
}
func (r *EndpointsMonitoringV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	r.updateHTTPHeader(ctx, &req.Header)
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIMonitoringV1AutoAddAlertCreateOper(in *Alert) string {
	return ""

}

//
func makeURIMonitoringV1AutoAddAlertDestinationCreateOper(in *AlertDestination) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations")
}

//
func makeURIMonitoringV1AutoAddAlertPolicyCreateOper(in *AlertPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies")
}

//
func makeURIMonitoringV1AutoAddArchiveRequestCreateOper(in *ArchiveRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/archive-requests")
}

//
func makeURIMonitoringV1AutoAddEventPolicyCreateOper(in *EventPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy")
}

//
func makeURIMonitoringV1AutoAddFlowExportPolicyCreateOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy")
}

//
func makeURIMonitoringV1AutoAddFwlogPolicyCreateOper(in *FwlogPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIMonitoringV1AutoAddMirrorSessionCreateOper(in *MirrorSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession")
}

//
func makeURIMonitoringV1AutoAddTechSupportRequestCreateOper(in *TechSupportRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/techsupport")
}

//
func makeURIMonitoringV1AutoAddTroubleshootingSessionCreateOper(in *TroubleshootingSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession")
}

//
func makeURIMonitoringV1AutoDeleteAlertDeleteOper(in *Alert) string {
	return ""

}

//
func makeURIMonitoringV1AutoDeleteAlertDestinationDeleteOper(in *AlertDestination) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteAlertPolicyDeleteOper(in *AlertPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteArchiveRequestDeleteOper(in *ArchiveRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/archive-requests/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteEventPolicyDeleteOper(in *EventPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteFlowExportPolicyDeleteOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteFwlogPolicyDeleteOper(in *FwlogPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteMirrorSessionDeleteOper(in *MirrorSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteTechSupportRequestDeleteOper(in *TechSupportRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/techsupport/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteTroubleshootingSessionDeleteOper(in *TroubleshootingSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertGetOper(in *Alert) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alerts/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertDestinationGetOper(in *AlertDestination) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertPolicyGetOper(in *AlertPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoGetArchiveRequestGetOper(in *ArchiveRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/archive-requests/", in.Name)
}

//
func makeURIMonitoringV1AutoGetEventPolicyGetOper(in *EventPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetFlowExportPolicyGetOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetFwlogPolicyGetOper(in *FwlogPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetMirrorSessionGetOper(in *MirrorSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoGetTechSupportRequestGetOper(in *TechSupportRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/techsupport/", in.Name)
}

//
func makeURIMonitoringV1AutoGetTroubleshootingSessionGetOper(in *TroubleshootingSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name)
}

//
func makeURIMonitoringV1AutoLabelAlertLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alerts/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelAlertDestinationLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelAlertPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelArchiveRequestLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIMonitoringV1AutoLabelEventPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelFlowExportPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelFwlogPolicyLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelMirrorSessionLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoLabelTechSupportRequestLabelOper(in *api.Label) string {
	return ""

}

//
func makeURIMonitoringV1AutoLabelTroubleshootingSessionLabelOper(in *api.Label) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name, "/label")
}

//
func makeURIMonitoringV1AutoListAlertListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alerts")
}

//
func makeURIMonitoringV1AutoListAlertDestinationListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations")
}

//
func makeURIMonitoringV1AutoListAlertPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies")
}

//
func makeURIMonitoringV1AutoListArchiveRequestListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/archive-requests")
}

//
func makeURIMonitoringV1AutoListEventPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy")
}

//
func makeURIMonitoringV1AutoListFlowExportPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy")
}

//
func makeURIMonitoringV1AutoListFwlogPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIMonitoringV1AutoListMirrorSessionListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession")
}

//
func makeURIMonitoringV1AutoListTechSupportRequestListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/techsupport")
}

//
func makeURIMonitoringV1AutoListTroubleshootingSessionListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession")
}

//
func makeURIMonitoringV1AutoUpdateAlertUpdateOper(in *Alert) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alerts/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateAlertDestinationUpdateOper(in *AlertDestination) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateAlertPolicyUpdateOper(in *AlertPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateArchiveRequestUpdateOper(in *ArchiveRequest) string {
	return ""

}

//
func makeURIMonitoringV1AutoUpdateEventPolicyUpdateOper(in *EventPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/event-policy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateFlowExportPolicyUpdateOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateFwlogPolicyUpdateOper(in *FwlogPolicy) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateMirrorSessionUpdateOper(in *MirrorSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateTechSupportRequestUpdateOper(in *TechSupportRequest) string {
	return ""

}

//
func makeURIMonitoringV1AutoUpdateTroubleshootingSessionUpdateOper(in *TroubleshootingSession) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/TroubleshootingSession/", in.Name)
}

//
func makeURIMonitoringV1AutoWatchAlertWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/alerts")
}

//
func makeURIMonitoringV1AutoWatchAlertDestinationWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/alertDestinations")
}

//
func makeURIMonitoringV1AutoWatchAlertPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/alertPolicies")
}

//
func makeURIMonitoringV1AutoWatchArchiveRequestWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/archive-requests")
}

//
func makeURIMonitoringV1AutoWatchEventPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/event-policy")
}

//
func makeURIMonitoringV1AutoWatchFlowExportPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/flowExportPolicy")
}

//
func makeURIMonitoringV1AutoWatchFwlogPolicyWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIMonitoringV1AutoWatchMirrorSessionWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/tenant/", in.Tenant, "/MirrorSession")
}

//
func makeURIMonitoringV1AutoWatchSvcMonitoringV1WatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIMonitoringV1AutoWatchTechSupportRequestWatchOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/configs/monitoring/v1", "/watch/techsupport")
}

//
func makeURIMonitoringV1AutoWatchTroubleshootingSessionWatchOper(in *api.ListWatchOptions) string {
	return ""

}

//
func makeURIMonitoringV1CancelCreateOper(in *CancelArchiveRequest) string {
	return fmt.Sprint("/configs/monitoring/v1", "/tenant/", in.Tenant, "/archive-requests/", in.Name, "/Cancel")
}

// AutoAddEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoAddEventPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddEventPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), nil
}

// AutoUpdateEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateEventPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoLabelEventPolicy label method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoLabelEventPolicy(ctx context.Context, in *api.Label) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoLabelEventPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoGetEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoGetEventPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoDeleteEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteEventPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoListEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListEventPolicy(ctx context.Context, options *api.ListWatchOptions) (*EventPolicyList, error) {
	path := makeURIMonitoringV1AutoListEventPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicyList), err
}

// AutoWatchEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchEventPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchEventPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgEventPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoAddFwlogPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddFwlogPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), nil
}

// AutoUpdateFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateFwlogPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoLabelFwlogPolicy label method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoLabelFwlogPolicy(ctx context.Context, in *api.Label) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoLabelFwlogPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoGetFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoGetFwlogPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoDeleteFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteFwlogPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoListFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListFwlogPolicy(ctx context.Context, options *api.ListWatchOptions) (*FwlogPolicyList, error) {
	path := makeURIMonitoringV1AutoListFwlogPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicyList), err
}

// AutoWatchFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchFwlogPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchFwlogPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgFwlogPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoAddFlowExportPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddFlowExportPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), nil
}

// AutoUpdateFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateFlowExportPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoLabelFlowExportPolicy label method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoLabelFlowExportPolicy(ctx context.Context, in *api.Label) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoLabelFlowExportPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoGetFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoGetFlowExportPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoDeleteFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteFlowExportPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoListFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListFlowExportPolicy(ctx context.Context, options *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	path := makeURIMonitoringV1AutoListFlowExportPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicyList), err
}

// AutoWatchFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchFlowExportPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchFlowExportPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgFlowExportPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoAddAlert(ctx context.Context, in *Alert) (*Alert, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlert(ctx context.Context, in *Alert) (*Alert, error) {
	path := makeURIMonitoringV1AutoUpdateAlertUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Alert), err
}

// AutoLabelAlert label method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoLabelAlert(ctx context.Context, in *api.Label) (*Alert, error) {
	path := makeURIMonitoringV1AutoLabelAlertLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Alert), err
}

// AutoGetAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoGetAlert(ctx context.Context, in *Alert) (*Alert, error) {
	path := makeURIMonitoringV1AutoGetAlertGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Alert), err
}

// AutoDeleteAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlert(ctx context.Context, in *Alert) (*Alert, error) {
	return nil, errors.New("not allowed")
}

// AutoListAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoListAlert(ctx context.Context, options *api.ListWatchOptions) (*AlertList, error) {
	path := makeURIMonitoringV1AutoListAlertListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertList), err
}

// AutoWatchAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlert(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchAlertWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgAlertWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoAddAlertPolicyCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddAlertPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), nil
}

// AutoUpdateAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateAlertPolicyUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoLabelAlertPolicy label method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoLabelAlertPolicy(ctx context.Context, in *api.Label) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoLabelAlertPolicyLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoGetAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoGetAlertPolicyGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoDeleteAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteAlertPolicyDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoListAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListAlertPolicy(ctx context.Context, options *api.ListWatchOptions) (*AlertPolicyList, error) {
	path := makeURIMonitoringV1AutoListAlertPolicyListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicyList), err
}

// AutoWatchAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlertPolicy(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchAlertPolicyWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgAlertPolicyWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoAddAlertDestinationCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddAlertDestination(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), nil
}

// AutoUpdateAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoUpdateAlertDestinationUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoLabelAlertDestination label method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoLabelAlertDestination(ctx context.Context, in *api.Label) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoLabelAlertDestinationLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoGetAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoGetAlertDestinationGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoDeleteAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoDeleteAlertDestinationDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoListAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoListAlertDestination(ctx context.Context, options *api.ListWatchOptions) (*AlertDestinationList, error) {
	path := makeURIMonitoringV1AutoListAlertDestinationListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestinationList), err
}

// AutoWatchAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlertDestination(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchAlertDestinationWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgAlertDestinationWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoAddMirrorSessionCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddMirrorSession(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), nil
}

// AutoUpdateMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoUpdateMirrorSessionUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoLabelMirrorSession label method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoLabelMirrorSession(ctx context.Context, in *api.Label) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoLabelMirrorSessionLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoGetMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoGetMirrorSessionGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoDeleteMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoDeleteMirrorSessionDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoListMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoListMirrorSession(ctx context.Context, options *api.ListWatchOptions) (*MirrorSessionList, error) {
	path := makeURIMonitoringV1AutoListMirrorSessionListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSessionList), err
}

// AutoWatchMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoWatchMirrorSession(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchMirrorSessionWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgMirrorSessionWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoAddTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	path := makeURIMonitoringV1AutoAddTroubleshootingSessionCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddTroubleshootingSession(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSession), nil
}

// AutoUpdateTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoUpdateTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	path := makeURIMonitoringV1AutoUpdateTroubleshootingSessionUpdateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateTroubleshootingSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSession), err
}

// AutoLabelTroubleshootingSession label method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoLabelTroubleshootingSession(ctx context.Context, in *api.Label) (*TroubleshootingSession, error) {
	path := makeURIMonitoringV1AutoLabelTroubleshootingSessionLabelOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoLabelTroubleshootingSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSession), err
}

// AutoGetTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoGetTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	path := makeURIMonitoringV1AutoGetTroubleshootingSessionGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetTroubleshootingSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSession), err
}

// AutoDeleteTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoDeleteTroubleshootingSession(ctx context.Context, in *TroubleshootingSession) (*TroubleshootingSession, error) {
	path := makeURIMonitoringV1AutoDeleteTroubleshootingSessionDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteTroubleshootingSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSession), err
}

// AutoListTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoListTroubleshootingSession(ctx context.Context, options *api.ListWatchOptions) (*TroubleshootingSessionList, error) {
	path := makeURIMonitoringV1AutoListTroubleshootingSessionListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListTroubleshootingSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TroubleshootingSessionList), err
}

// AutoWatchTroubleshootingSession CRUD method for TroubleshootingSession
func (r *EndpointsMonitoringV1RestClient) AutoWatchTroubleshootingSession(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchTroubleshootingSessionWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgTroubleshootingSessionWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoAddTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	path := makeURIMonitoringV1AutoAddTechSupportRequestCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddTechSupportRequest(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*TechSupportRequest), nil
}

// AutoUpdateTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoUpdateTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelTechSupportRequest label method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoLabelTechSupportRequest(ctx context.Context, in *api.Label) (*TechSupportRequest, error) {
	return nil, errors.New("not allowed")
}

// AutoGetTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoGetTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	path := makeURIMonitoringV1AutoGetTechSupportRequestGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetTechSupportRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TechSupportRequest), err
}

// AutoDeleteTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoDeleteTechSupportRequest(ctx context.Context, in *TechSupportRequest) (*TechSupportRequest, error) {
	path := makeURIMonitoringV1AutoDeleteTechSupportRequestDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteTechSupportRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TechSupportRequest), err
}

// AutoListTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoListTechSupportRequest(ctx context.Context, options *api.ListWatchOptions) (*TechSupportRequestList, error) {
	path := makeURIMonitoringV1AutoListTechSupportRequestListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListTechSupportRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*TechSupportRequestList), err
}

// AutoWatchTechSupportRequest CRUD method for TechSupportRequest
func (r *EndpointsMonitoringV1RestClient) AutoWatchTechSupportRequest(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchTechSupportRequestWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgTechSupportRequestWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

// AutoAddArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoAddArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	path := makeURIMonitoringV1AutoAddArchiveRequestCreateOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer httpresp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoAddArchiveRequest(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*ArchiveRequest), nil
}

// AutoUpdateArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoUpdateArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	return nil, errors.New("not allowed")
}

// AutoLabelArchiveRequest label method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoLabelArchiveRequest(ctx context.Context, in *api.Label) (*ArchiveRequest, error) {
	return nil, errors.New("not allowed")
}

// AutoGetArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoGetArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	path := makeURIMonitoringV1AutoGetArchiveRequestGetOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoGetArchiveRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ArchiveRequest), err
}

// AutoDeleteArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoDeleteArchiveRequest(ctx context.Context, in *ArchiveRequest) (*ArchiveRequest, error) {
	path := makeURIMonitoringV1AutoDeleteArchiveRequestDeleteOper(in)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteArchiveRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ArchiveRequest), err
}

// AutoListArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoListArchiveRequest(ctx context.Context, options *api.ListWatchOptions) (*ArchiveRequestList, error) {
	path := makeURIMonitoringV1AutoListArchiveRequestListOper(options)
	if r.bufferId != "" {
		path = strings.Replace(path, "/configs", "/staging/"+r.bufferId, 1)
	}
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1AutoListArchiveRequest(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ArchiveRequestList), err
}

// AutoWatchArchiveRequest CRUD method for ArchiveRequest
func (r *EndpointsMonitoringV1RestClient) AutoWatchArchiveRequest(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	path := r.instance + makeURIMonitoringV1AutoWatchArchiveRequestWatchOper(options)
	path = strings.Replace(path, "http://", "ws://", 1)
	path = strings.Replace(path, "https://", "wss://", 1)
	params := apiutils.GetQueryStringFromListWatchOptions(options)
	if params != "" {
		path = path + "?" + params
	}
	header := http.Header{}
	r.updateHTTPHeader(ctx, &header)
	dialer := websocket.DefaultDialer
	dialer.TLSClientConfig = &tls.Config{InsecureSkipVerify: true}
	conn, hresp, err := dialer.Dial(path, header)
	if err != nil {
		return nil, fmt.Errorf("failed to connect web socket to [%s](%s)[%+v]", path, err, hresp)
	}
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			in := &AutoMsgArchiveRequestWatchHelper{}
			err := conn.ReadJSON(in)
			if err != nil {
				return
			}
			for _, e := range in.Events {
				ev := kvstore.WatchEvent{
					Type:   kvstore.WatchEventType(e.Type),
					Object: e.Object,
				}
				select {
				case lw.OutCh <- &ev:
				case <-ctx.Done():
					close(lw.OutCh)
					conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
					return
				}
			}
		}
	}
	lw := listerwatcher.NewWatcherClient(nil, bridgefn)
	lw.Run()
	go func() {
		<-ctx.Done()
		conn.WriteControl(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing"), time.Now().Add(3*time.Second))
	}()
	return lw, nil
}

func (r *EndpointsMonitoringV1RestClient) CancelArchiveRequest(ctx context.Context, in *CancelArchiveRequest) (*ArchiveRequest, error) {
	if r.bufferId != "" {
		return nil, errors.New("staging not allowed")
	}
	path := makeURIMonitoringV1CancelCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	defer resp.Body.Close()
	ret, err := decodeHTTPrespMonitoringV1Cancel(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*ArchiveRequest), err
}

// MakeMonitoringV1RestClientEndpoints make REST client endpoints
func MakeMonitoringV1RestClientEndpoints(instance string, httpClient *http.Client) (EndpointsMonitoringV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsMonitoringV1RestClient{
		instance: instance,
		client:   httpClient,
	}, nil

}

// MakeMonitoringV1StagedRestClientEndpoints makes staged REST client endpoints
func MakeMonitoringV1StagedRestClientEndpoints(instance string, bufferId string, httpClient *http.Client) (EndpointsMonitoringV1RestClient, error) {
	if !strings.HasPrefix(instance, "https") {
		instance = "https://" + instance
	}

	return EndpointsMonitoringV1RestClient{
		instance: instance,
		bufferId: bufferId,
		client:   httpClient,
	}, nil
}
