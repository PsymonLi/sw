// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: svc_monitoring.proto
*/
package monitoring

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareMonitoringV1Client add middleware to the client
type MiddlewareMonitoringV1Client func(ServiceMonitoringV1Client) ServiceMonitoringV1Client

// EndpointsMonitoringV1Client is the endpoints for the client
type EndpointsMonitoringV1Client struct {
	Client MonitoringV1Client

	AutoAddAlertEndpoint               endpoint.Endpoint
	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoAddAlertPolicyEndpoint         endpoint.Endpoint
	AutoAddEventEndpoint               endpoint.Endpoint
	AutoAddEventPolicyEndpoint         endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint         endpoint.Endpoint
	AutoAddMirrorSessionEndpoint       endpoint.Endpoint
	AutoAddStatsPolicyEndpoint         endpoint.Endpoint
	AutoDeleteAlertEndpoint            endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint      endpoint.Endpoint
	AutoDeleteEventEndpoint            endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint      endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint      endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint      endpoint.Endpoint
	AutoGetAlertEndpoint               endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoGetAlertPolicyEndpoint         endpoint.Endpoint
	AutoGetEventEndpoint               endpoint.Endpoint
	AutoGetEventPolicyEndpoint         endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint         endpoint.Endpoint
	AutoGetMirrorSessionEndpoint       endpoint.Endpoint
	AutoGetStatsPolicyEndpoint         endpoint.Endpoint
	AutoListAlertEndpoint              endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoListAlertPolicyEndpoint        endpoint.Endpoint
	AutoListEventEndpoint              endpoint.Endpoint
	AutoListEventPolicyEndpoint        endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint   endpoint.Endpoint
	AutoListFwlogPolicyEndpoint        endpoint.Endpoint
	AutoListMirrorSessionEndpoint      endpoint.Endpoint
	AutoListStatsPolicyEndpoint        endpoint.Endpoint
	AutoUpdateAlertEndpoint            endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint      endpoint.Endpoint
	AutoUpdateEventEndpoint            endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint      endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint      endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint    endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint      endpoint.Endpoint
}

// EndpointsMonitoringV1RestClient is the REST client
type EndpointsMonitoringV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddAlertEndpoint               endpoint.Endpoint
	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoAddAlertPolicyEndpoint         endpoint.Endpoint
	AutoAddEventEndpoint               endpoint.Endpoint
	AutoAddEventPolicyEndpoint         endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint         endpoint.Endpoint
	AutoAddMirrorSessionEndpoint       endpoint.Endpoint
	AutoAddStatsPolicyEndpoint         endpoint.Endpoint
	AutoDeleteAlertEndpoint            endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint      endpoint.Endpoint
	AutoDeleteEventEndpoint            endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint      endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint      endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint      endpoint.Endpoint
	AutoGetAlertEndpoint               endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoGetAlertPolicyEndpoint         endpoint.Endpoint
	AutoGetEventEndpoint               endpoint.Endpoint
	AutoGetEventPolicyEndpoint         endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint         endpoint.Endpoint
	AutoGetMirrorSessionEndpoint       endpoint.Endpoint
	AutoGetStatsPolicyEndpoint         endpoint.Endpoint
	AutoListAlertEndpoint              endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoListAlertPolicyEndpoint        endpoint.Endpoint
	AutoListEventEndpoint              endpoint.Endpoint
	AutoListEventPolicyEndpoint        endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint   endpoint.Endpoint
	AutoListFwlogPolicyEndpoint        endpoint.Endpoint
	AutoListMirrorSessionEndpoint      endpoint.Endpoint
	AutoListStatsPolicyEndpoint        endpoint.Endpoint
	AutoUpdateAlertEndpoint            endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint      endpoint.Endpoint
	AutoUpdateEventEndpoint            endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint      endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint      endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint    endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint      endpoint.Endpoint
	AutoWatchAlertEndpoint             endpoint.Endpoint
	AutoWatchAlertDestinationEndpoint  endpoint.Endpoint
	AutoWatchAlertPolicyEndpoint       endpoint.Endpoint
	AutoWatchEventEndpoint             endpoint.Endpoint
	AutoWatchEventPolicyEndpoint       endpoint.Endpoint
	AutoWatchFlowExportPolicyEndpoint  endpoint.Endpoint
	AutoWatchFwlogPolicyEndpoint       endpoint.Endpoint
	AutoWatchMirrorSessionEndpoint     endpoint.Endpoint
	AutoWatchStatsPolicyEndpoint       endpoint.Endpoint
}

// MiddlewareMonitoringV1Server adds middle ware to the server
type MiddlewareMonitoringV1Server func(ServiceMonitoringV1Server) ServiceMonitoringV1Server

// EndpointsMonitoringV1Server is the server endpoints
type EndpointsMonitoringV1Server struct {
	AutoAddAlertEndpoint               endpoint.Endpoint
	AutoAddAlertDestinationEndpoint    endpoint.Endpoint
	AutoAddAlertPolicyEndpoint         endpoint.Endpoint
	AutoAddEventEndpoint               endpoint.Endpoint
	AutoAddEventPolicyEndpoint         endpoint.Endpoint
	AutoAddFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoAddFwlogPolicyEndpoint         endpoint.Endpoint
	AutoAddMirrorSessionEndpoint       endpoint.Endpoint
	AutoAddStatsPolicyEndpoint         endpoint.Endpoint
	AutoDeleteAlertEndpoint            endpoint.Endpoint
	AutoDeleteAlertDestinationEndpoint endpoint.Endpoint
	AutoDeleteAlertPolicyEndpoint      endpoint.Endpoint
	AutoDeleteEventEndpoint            endpoint.Endpoint
	AutoDeleteEventPolicyEndpoint      endpoint.Endpoint
	AutoDeleteFlowExportPolicyEndpoint endpoint.Endpoint
	AutoDeleteFwlogPolicyEndpoint      endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteStatsPolicyEndpoint      endpoint.Endpoint
	AutoGetAlertEndpoint               endpoint.Endpoint
	AutoGetAlertDestinationEndpoint    endpoint.Endpoint
	AutoGetAlertPolicyEndpoint         endpoint.Endpoint
	AutoGetEventEndpoint               endpoint.Endpoint
	AutoGetEventPolicyEndpoint         endpoint.Endpoint
	AutoGetFlowExportPolicyEndpoint    endpoint.Endpoint
	AutoGetFwlogPolicyEndpoint         endpoint.Endpoint
	AutoGetMirrorSessionEndpoint       endpoint.Endpoint
	AutoGetStatsPolicyEndpoint         endpoint.Endpoint
	AutoListAlertEndpoint              endpoint.Endpoint
	AutoListAlertDestinationEndpoint   endpoint.Endpoint
	AutoListAlertPolicyEndpoint        endpoint.Endpoint
	AutoListEventEndpoint              endpoint.Endpoint
	AutoListEventPolicyEndpoint        endpoint.Endpoint
	AutoListFlowExportPolicyEndpoint   endpoint.Endpoint
	AutoListFwlogPolicyEndpoint        endpoint.Endpoint
	AutoListMirrorSessionEndpoint      endpoint.Endpoint
	AutoListStatsPolicyEndpoint        endpoint.Endpoint
	AutoUpdateAlertEndpoint            endpoint.Endpoint
	AutoUpdateAlertDestinationEndpoint endpoint.Endpoint
	AutoUpdateAlertPolicyEndpoint      endpoint.Endpoint
	AutoUpdateEventEndpoint            endpoint.Endpoint
	AutoUpdateEventPolicyEndpoint      endpoint.Endpoint
	AutoUpdateFlowExportPolicyEndpoint endpoint.Endpoint
	AutoUpdateFwlogPolicyEndpoint      endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint    endpoint.Endpoint
	AutoUpdateStatsPolicyEndpoint      endpoint.Endpoint

	watchHandlerEvent            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerEventPolicy      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerStatsPolicy      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerFwlogPolicy      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerFlowExportPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlert            func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlertPolicy      func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerAlertDestination func(options *api.ListWatchOptions, stream grpc.ServerStream) error
	watchHandlerMirrorSession    func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddAlert is endpoint for AutoAddAlert
func (e EndpointsMonitoringV1Client) AutoAddAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoAddAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoAddAlert struct {
	V   Alert
	Err error
}

// AutoAddAlertDestination is endpoint for AutoAddAlertDestination
func (e EndpointsMonitoringV1Client) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoAddAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoAddAlertPolicy is endpoint for AutoAddAlertPolicy
func (e EndpointsMonitoringV1Client) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoAddAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoAddEvent is endpoint for AutoAddEvent
func (e EndpointsMonitoringV1Client) AutoAddEvent(ctx context.Context, in *Event) (*Event, error) {
	resp, err := e.AutoAddEventEndpoint(ctx, in)
	if err != nil {
		return &Event{}, err
	}
	return resp.(*Event), nil
}

type respMonitoringV1AutoAddEvent struct {
	V   Event
	Err error
}

// AutoAddEventPolicy is endpoint for AutoAddEventPolicy
func (e EndpointsMonitoringV1Client) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoAddEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoAddEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoAddFlowExportPolicy is endpoint for AutoAddFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoAddFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoAddFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoAddFwlogPolicy is endpoint for AutoAddFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoAddFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoAddMirrorSession is endpoint for AutoAddMirrorSession
func (e EndpointsMonitoringV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoAddMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoAddStatsPolicy is endpoint for AutoAddStatsPolicy
func (e EndpointsMonitoringV1Client) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoAddStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respMonitoringV1AutoAddStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoDeleteAlert is endpoint for AutoDeleteAlert
func (e EndpointsMonitoringV1Client) AutoDeleteAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoDeleteAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoDeleteAlert struct {
	V   Alert
	Err error
}

// AutoDeleteAlertDestination is endpoint for AutoDeleteAlertDestination
func (e EndpointsMonitoringV1Client) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoDeleteAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoDeleteAlertPolicy is endpoint for AutoDeleteAlertPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoDeleteAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoDeleteEvent is endpoint for AutoDeleteEvent
func (e EndpointsMonitoringV1Client) AutoDeleteEvent(ctx context.Context, in *Event) (*Event, error) {
	resp, err := e.AutoDeleteEventEndpoint(ctx, in)
	if err != nil {
		return &Event{}, err
	}
	return resp.(*Event), nil
}

type respMonitoringV1AutoDeleteEvent struct {
	V   Event
	Err error
}

// AutoDeleteEventPolicy is endpoint for AutoDeleteEventPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoDeleteEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoDeleteEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoDeleteFlowExportPolicy is endpoint for AutoDeleteFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoDeleteFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoDeleteFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoDeleteFwlogPolicy is endpoint for AutoDeleteFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoDeleteFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoDeleteMirrorSession is endpoint for AutoDeleteMirrorSession
func (e EndpointsMonitoringV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoDeleteMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoDeleteStatsPolicy is endpoint for AutoDeleteStatsPolicy
func (e EndpointsMonitoringV1Client) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoDeleteStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respMonitoringV1AutoDeleteStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoGetAlert is endpoint for AutoGetAlert
func (e EndpointsMonitoringV1Client) AutoGetAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoGetAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoGetAlert struct {
	V   Alert
	Err error
}

// AutoGetAlertDestination is endpoint for AutoGetAlertDestination
func (e EndpointsMonitoringV1Client) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoGetAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoGetAlertPolicy is endpoint for AutoGetAlertPolicy
func (e EndpointsMonitoringV1Client) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoGetAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoGetEvent is endpoint for AutoGetEvent
func (e EndpointsMonitoringV1Client) AutoGetEvent(ctx context.Context, in *Event) (*Event, error) {
	resp, err := e.AutoGetEventEndpoint(ctx, in)
	if err != nil {
		return &Event{}, err
	}
	return resp.(*Event), nil
}

type respMonitoringV1AutoGetEvent struct {
	V   Event
	Err error
}

// AutoGetEventPolicy is endpoint for AutoGetEventPolicy
func (e EndpointsMonitoringV1Client) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoGetEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoGetEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoGetFlowExportPolicy is endpoint for AutoGetFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoGetFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoGetFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoGetFwlogPolicy is endpoint for AutoGetFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoGetFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoGetMirrorSession is endpoint for AutoGetMirrorSession
func (e EndpointsMonitoringV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoGetMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoGetStatsPolicy is endpoint for AutoGetStatsPolicy
func (e EndpointsMonitoringV1Client) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoGetStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respMonitoringV1AutoGetStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoListAlert is endpoint for AutoListAlert
func (e EndpointsMonitoringV1Client) AutoListAlert(ctx context.Context, in *api.ListWatchOptions) (*AlertList, error) {
	resp, err := e.AutoListAlertEndpoint(ctx, in)
	if err != nil {
		return &AlertList{}, err
	}
	return resp.(*AlertList), nil
}

type respMonitoringV1AutoListAlert struct {
	V   AlertList
	Err error
}

// AutoListAlertDestination is endpoint for AutoListAlertDestination
func (e EndpointsMonitoringV1Client) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (*AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestinationList{}, err
	}
	return resp.(*AlertDestinationList), nil
}

type respMonitoringV1AutoListAlertDestination struct {
	V   AlertDestinationList
	Err error
}

// AutoListAlertPolicy is endpoint for AutoListAlertPolicy
func (e EndpointsMonitoringV1Client) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (*AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicyList{}, err
	}
	return resp.(*AlertPolicyList), nil
}

type respMonitoringV1AutoListAlertPolicy struct {
	V   AlertPolicyList
	Err error
}

// AutoListEvent is endpoint for AutoListEvent
func (e EndpointsMonitoringV1Client) AutoListEvent(ctx context.Context, in *api.ListWatchOptions) (*EventList, error) {
	resp, err := e.AutoListEventEndpoint(ctx, in)
	if err != nil {
		return &EventList{}, err
	}
	return resp.(*EventList), nil
}

type respMonitoringV1AutoListEvent struct {
	V   EventList
	Err error
}

// AutoListEventPolicy is endpoint for AutoListEventPolicy
func (e EndpointsMonitoringV1Client) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions) (*EventPolicyList, error) {
	resp, err := e.AutoListEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicyList{}, err
	}
	return resp.(*EventPolicyList), nil
}

type respMonitoringV1AutoListEventPolicy struct {
	V   EventPolicyList
	Err error
}

// AutoListFlowExportPolicy is endpoint for AutoListFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	resp, err := e.AutoListFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicyList{}, err
	}
	return resp.(*FlowExportPolicyList), nil
}

type respMonitoringV1AutoListFlowExportPolicy struct {
	V   FlowExportPolicyList
	Err error
}

// AutoListFwlogPolicy is endpoint for AutoListFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (*FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicyList{}, err
	}
	return resp.(*FwlogPolicyList), nil
}

type respMonitoringV1AutoListFwlogPolicy struct {
	V   FwlogPolicyList
	Err error
}

// AutoListMirrorSession is endpoint for AutoListMirrorSession
func (e EndpointsMonitoringV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (*MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSessionList{}, err
	}
	return resp.(*MirrorSessionList), nil
}

type respMonitoringV1AutoListMirrorSession struct {
	V   MirrorSessionList
	Err error
}

// AutoListStatsPolicy is endpoint for AutoListStatsPolicy
func (e EndpointsMonitoringV1Client) AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (*StatsPolicyList, error) {
	resp, err := e.AutoListStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicyList{}, err
	}
	return resp.(*StatsPolicyList), nil
}

type respMonitoringV1AutoListStatsPolicy struct {
	V   StatsPolicyList
	Err error
}

// AutoUpdateAlert is endpoint for AutoUpdateAlert
func (e EndpointsMonitoringV1Client) AutoUpdateAlert(ctx context.Context, in *Alert) (*Alert, error) {
	resp, err := e.AutoUpdateAlertEndpoint(ctx, in)
	if err != nil {
		return &Alert{}, err
	}
	return resp.(*Alert), nil
}

type respMonitoringV1AutoUpdateAlert struct {
	V   Alert
	Err error
}

// AutoUpdateAlertDestination is endpoint for AutoUpdateAlertDestination
func (e EndpointsMonitoringV1Client) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return &AlertDestination{}, err
	}
	return resp.(*AlertDestination), nil
}

type respMonitoringV1AutoUpdateAlertDestination struct {
	V   AlertDestination
	Err error
}

// AutoUpdateAlertPolicy is endpoint for AutoUpdateAlertPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return &AlertPolicy{}, err
	}
	return resp.(*AlertPolicy), nil
}

type respMonitoringV1AutoUpdateAlertPolicy struct {
	V   AlertPolicy
	Err error
}

// AutoUpdateEvent is endpoint for AutoUpdateEvent
func (e EndpointsMonitoringV1Client) AutoUpdateEvent(ctx context.Context, in *Event) (*Event, error) {
	resp, err := e.AutoUpdateEventEndpoint(ctx, in)
	if err != nil {
		return &Event{}, err
	}
	return resp.(*Event), nil
}

type respMonitoringV1AutoUpdateEvent struct {
	V   Event
	Err error
}

// AutoUpdateEventPolicy is endpoint for AutoUpdateEventPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	resp, err := e.AutoUpdateEventPolicyEndpoint(ctx, in)
	if err != nil {
		return &EventPolicy{}, err
	}
	return resp.(*EventPolicy), nil
}

type respMonitoringV1AutoUpdateEventPolicy struct {
	V   EventPolicy
	Err error
}

// AutoUpdateFlowExportPolicy is endpoint for AutoUpdateFlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	resp, err := e.AutoUpdateFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return &FlowExportPolicy{}, err
	}
	return resp.(*FlowExportPolicy), nil
}

type respMonitoringV1AutoUpdateFlowExportPolicy struct {
	V   FlowExportPolicy
	Err error
}

// AutoUpdateFwlogPolicy is endpoint for AutoUpdateFwlogPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return &FwlogPolicy{}, err
	}
	return resp.(*FwlogPolicy), nil
}

type respMonitoringV1AutoUpdateFwlogPolicy struct {
	V   FwlogPolicy
	Err error
}

// AutoUpdateMirrorSession is endpoint for AutoUpdateMirrorSession
func (e EndpointsMonitoringV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMonitoringV1AutoUpdateMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoUpdateStatsPolicy is endpoint for AutoUpdateStatsPolicy
func (e EndpointsMonitoringV1Client) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	resp, err := e.AutoUpdateStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return &StatsPolicy{}, err
	}
	return resp.(*StatsPolicy), nil
}

type respMonitoringV1AutoUpdateStatsPolicy struct {
	V   StatsPolicy
	Err error
}

// AutoWatchEvent performs Watch for Event
func (e EndpointsMonitoringV1Client) AutoWatchEvent(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchEventClient, error) {
	return e.Client.AutoWatchEvent(ctx, in)
}

// AutoWatchEventPolicy performs Watch for EventPolicy
func (e EndpointsMonitoringV1Client) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchEventPolicyClient, error) {
	return e.Client.AutoWatchEventPolicy(ctx, in)
}

// AutoWatchStatsPolicy performs Watch for StatsPolicy
func (e EndpointsMonitoringV1Client) AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchStatsPolicyClient, error) {
	return e.Client.AutoWatchStatsPolicy(ctx, in)
}

// AutoWatchFwlogPolicy performs Watch for FwlogPolicy
func (e EndpointsMonitoringV1Client) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchFwlogPolicyClient, error) {
	return e.Client.AutoWatchFwlogPolicy(ctx, in)
}

// AutoWatchFlowExportPolicy performs Watch for FlowExportPolicy
func (e EndpointsMonitoringV1Client) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchFlowExportPolicyClient, error) {
	return e.Client.AutoWatchFlowExportPolicy(ctx, in)
}

// AutoWatchAlert performs Watch for Alert
func (e EndpointsMonitoringV1Client) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertClient, error) {
	return e.Client.AutoWatchAlert(ctx, in)
}

// AutoWatchAlertPolicy performs Watch for AlertPolicy
func (e EndpointsMonitoringV1Client) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertPolicyClient, error) {
	return e.Client.AutoWatchAlertPolicy(ctx, in)
}

// AutoWatchAlertDestination performs Watch for AlertDestination
func (e EndpointsMonitoringV1Client) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchAlertDestinationClient, error) {
	return e.Client.AutoWatchAlertDestination(ctx, in)
}

// AutoWatchMirrorSession performs Watch for MirrorSession
func (e EndpointsMonitoringV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (MonitoringV1_AutoWatchMirrorSessionClient, error) {
	return e.Client.AutoWatchMirrorSession(ctx, in)
}

// AutoAddAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoAddAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoAddAlertEndpoint creates  AutoAddAlert endpoints for the service
func MakeMonitoringV1AutoAddAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoAddAlert(ctx, *req)
		return respMonitoringV1AutoAddAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlert")(f)
}

// AutoAddAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoAddAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoAddAlertDestinationEndpoint creates  AutoAddAlertDestination endpoints for the service
func MakeMonitoringV1AutoAddAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoAddAlertDestination(ctx, *req)
		return respMonitoringV1AutoAddAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlertDestination")(f)
}

// AutoAddAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoAddAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoAddAlertPolicyEndpoint creates  AutoAddAlertPolicy endpoints for the service
func MakeMonitoringV1AutoAddAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoAddAlertPolicy(ctx, *req)
		return respMonitoringV1AutoAddAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddAlertPolicy")(f)
}

// AutoAddEvent implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddEvent(ctx context.Context, in Event) (Event, error) {
	resp, err := e.AutoAddEventEndpoint(ctx, in)
	if err != nil {
		return Event{}, err
	}
	return *resp.(*Event), nil
}

// MakeMonitoringV1AutoAddEventEndpoint creates  AutoAddEvent endpoints for the service
func MakeMonitoringV1AutoAddEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Event)
		v, err := s.AutoAddEvent(ctx, *req)
		return respMonitoringV1AutoAddEvent{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddEvent")(f)
}

// AutoAddEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoAddEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoAddEventPolicyEndpoint creates  AutoAddEventPolicy endpoints for the service
func MakeMonitoringV1AutoAddEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoAddEventPolicy(ctx, *req)
		return respMonitoringV1AutoAddEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddEventPolicy")(f)
}

// AutoAddFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoAddFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoAddFlowExportPolicyEndpoint creates  AutoAddFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoAddFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoAddFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoAddFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddFlowExportPolicy")(f)
}

// AutoAddFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoAddFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoAddFwlogPolicyEndpoint creates  AutoAddFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoAddFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoAddFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoAddFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddFwlogPolicy")(f)
}

// AutoAddMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoAddMirrorSessionEndpoint creates  AutoAddMirrorSession endpoints for the service
func MakeMonitoringV1AutoAddMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoAddMirrorSession(ctx, *req)
		return respMonitoringV1AutoAddMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddMirrorSession")(f)
}

// AutoAddStatsPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoAddStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoAddStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeMonitoringV1AutoAddStatsPolicyEndpoint creates  AutoAddStatsPolicy endpoints for the service
func MakeMonitoringV1AutoAddStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoAddStatsPolicy(ctx, *req)
		return respMonitoringV1AutoAddStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoAddStatsPolicy")(f)
}

// AutoDeleteAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoDeleteAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoDeleteAlertEndpoint creates  AutoDeleteAlert endpoints for the service
func MakeMonitoringV1AutoDeleteAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoDeleteAlert(ctx, *req)
		return respMonitoringV1AutoDeleteAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlert")(f)
}

// AutoDeleteAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoDeleteAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoDeleteAlertDestinationEndpoint creates  AutoDeleteAlertDestination endpoints for the service
func MakeMonitoringV1AutoDeleteAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoDeleteAlertDestination(ctx, *req)
		return respMonitoringV1AutoDeleteAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlertDestination")(f)
}

// AutoDeleteAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoDeleteAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoDeleteAlertPolicyEndpoint creates  AutoDeleteAlertPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoDeleteAlertPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteAlertPolicy")(f)
}

// AutoDeleteEvent implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteEvent(ctx context.Context, in Event) (Event, error) {
	resp, err := e.AutoDeleteEventEndpoint(ctx, in)
	if err != nil {
		return Event{}, err
	}
	return *resp.(*Event), nil
}

// MakeMonitoringV1AutoDeleteEventEndpoint creates  AutoDeleteEvent endpoints for the service
func MakeMonitoringV1AutoDeleteEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Event)
		v, err := s.AutoDeleteEvent(ctx, *req)
		return respMonitoringV1AutoDeleteEvent{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteEvent")(f)
}

// AutoDeleteEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoDeleteEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoDeleteEventPolicyEndpoint creates  AutoDeleteEventPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoDeleteEventPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteEventPolicy")(f)
}

// AutoDeleteFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoDeleteFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint creates  AutoDeleteFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoDeleteFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteFlowExportPolicy")(f)
}

// AutoDeleteFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoDeleteFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint creates  AutoDeleteFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoDeleteFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteFwlogPolicy")(f)
}

// AutoDeleteMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoDeleteMirrorSessionEndpoint creates  AutoDeleteMirrorSession endpoints for the service
func MakeMonitoringV1AutoDeleteMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoDeleteMirrorSession(ctx, *req)
		return respMonitoringV1AutoDeleteMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteMirrorSession")(f)
}

// AutoDeleteStatsPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoDeleteStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoDeleteStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeMonitoringV1AutoDeleteStatsPolicyEndpoint creates  AutoDeleteStatsPolicy endpoints for the service
func MakeMonitoringV1AutoDeleteStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoDeleteStatsPolicy(ctx, *req)
		return respMonitoringV1AutoDeleteStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoDeleteStatsPolicy")(f)
}

// AutoGetAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoGetAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoGetAlertEndpoint creates  AutoGetAlert endpoints for the service
func MakeMonitoringV1AutoGetAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoGetAlert(ctx, *req)
		return respMonitoringV1AutoGetAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlert")(f)
}

// AutoGetAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoGetAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoGetAlertDestinationEndpoint creates  AutoGetAlertDestination endpoints for the service
func MakeMonitoringV1AutoGetAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoGetAlertDestination(ctx, *req)
		return respMonitoringV1AutoGetAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlertDestination")(f)
}

// AutoGetAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoGetAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoGetAlertPolicyEndpoint creates  AutoGetAlertPolicy endpoints for the service
func MakeMonitoringV1AutoGetAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoGetAlertPolicy(ctx, *req)
		return respMonitoringV1AutoGetAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetAlertPolicy")(f)
}

// AutoGetEvent implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetEvent(ctx context.Context, in Event) (Event, error) {
	resp, err := e.AutoGetEventEndpoint(ctx, in)
	if err != nil {
		return Event{}, err
	}
	return *resp.(*Event), nil
}

// MakeMonitoringV1AutoGetEventEndpoint creates  AutoGetEvent endpoints for the service
func MakeMonitoringV1AutoGetEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Event)
		v, err := s.AutoGetEvent(ctx, *req)
		return respMonitoringV1AutoGetEvent{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetEvent")(f)
}

// AutoGetEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoGetEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoGetEventPolicyEndpoint creates  AutoGetEventPolicy endpoints for the service
func MakeMonitoringV1AutoGetEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoGetEventPolicy(ctx, *req)
		return respMonitoringV1AutoGetEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetEventPolicy")(f)
}

// AutoGetFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoGetFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoGetFlowExportPolicyEndpoint creates  AutoGetFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoGetFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoGetFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoGetFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetFlowExportPolicy")(f)
}

// AutoGetFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoGetFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoGetFwlogPolicyEndpoint creates  AutoGetFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoGetFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoGetFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoGetFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetFwlogPolicy")(f)
}

// AutoGetMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoGetMirrorSessionEndpoint creates  AutoGetMirrorSession endpoints for the service
func MakeMonitoringV1AutoGetMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoGetMirrorSession(ctx, *req)
		return respMonitoringV1AutoGetMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetMirrorSession")(f)
}

// AutoGetStatsPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoGetStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoGetStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeMonitoringV1AutoGetStatsPolicyEndpoint creates  AutoGetStatsPolicy endpoints for the service
func MakeMonitoringV1AutoGetStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoGetStatsPolicy(ctx, *req)
		return respMonitoringV1AutoGetStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoGetStatsPolicy")(f)
}

// AutoListAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlert(ctx context.Context, in api.ListWatchOptions) (AlertList, error) {
	resp, err := e.AutoListAlertEndpoint(ctx, in)
	if err != nil {
		return AlertList{}, err
	}
	return *resp.(*AlertList), nil
}

// MakeMonitoringV1AutoListAlertEndpoint creates  AutoListAlert endpoints for the service
func MakeMonitoringV1AutoListAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlert(ctx, *req)
		return respMonitoringV1AutoListAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlert")(f)
}

// AutoListAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (AlertDestinationList, error) {
	resp, err := e.AutoListAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestinationList{}, err
	}
	return *resp.(*AlertDestinationList), nil
}

// MakeMonitoringV1AutoListAlertDestinationEndpoint creates  AutoListAlertDestination endpoints for the service
func MakeMonitoringV1AutoListAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertDestination(ctx, *req)
		return respMonitoringV1AutoListAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlertDestination")(f)
}

// AutoListAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (AlertPolicyList, error) {
	resp, err := e.AutoListAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicyList{}, err
	}
	return *resp.(*AlertPolicyList), nil
}

// MakeMonitoringV1AutoListAlertPolicyEndpoint creates  AutoListAlertPolicy endpoints for the service
func MakeMonitoringV1AutoListAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListAlertPolicy(ctx, *req)
		return respMonitoringV1AutoListAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListAlertPolicy")(f)
}

// AutoListEvent implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListEvent(ctx context.Context, in api.ListWatchOptions) (EventList, error) {
	resp, err := e.AutoListEventEndpoint(ctx, in)
	if err != nil {
		return EventList{}, err
	}
	return *resp.(*EventList), nil
}

// MakeMonitoringV1AutoListEventEndpoint creates  AutoListEvent endpoints for the service
func MakeMonitoringV1AutoListEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListEvent(ctx, *req)
		return respMonitoringV1AutoListEvent{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListEvent")(f)
}

// AutoListEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListEventPolicy(ctx context.Context, in api.ListWatchOptions) (EventPolicyList, error) {
	resp, err := e.AutoListEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicyList{}, err
	}
	return *resp.(*EventPolicyList), nil
}

// MakeMonitoringV1AutoListEventPolicyEndpoint creates  AutoListEventPolicy endpoints for the service
func MakeMonitoringV1AutoListEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListEventPolicy(ctx, *req)
		return respMonitoringV1AutoListEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListEventPolicy")(f)
}

// AutoListFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListFlowExportPolicy(ctx context.Context, in api.ListWatchOptions) (FlowExportPolicyList, error) {
	resp, err := e.AutoListFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicyList{}, err
	}
	return *resp.(*FlowExportPolicyList), nil
}

// MakeMonitoringV1AutoListFlowExportPolicyEndpoint creates  AutoListFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoListFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoListFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListFlowExportPolicy")(f)
}

// AutoListFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (FwlogPolicyList, error) {
	resp, err := e.AutoListFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicyList{}, err
	}
	return *resp.(*FwlogPolicyList), nil
}

// MakeMonitoringV1AutoListFwlogPolicyEndpoint creates  AutoListFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoListFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoListFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListFwlogPolicy")(f)
}

// AutoListMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSessionList{}, err
	}
	return *resp.(*MirrorSessionList), nil
}

// MakeMonitoringV1AutoListMirrorSessionEndpoint creates  AutoListMirrorSession endpoints for the service
func MakeMonitoringV1AutoListMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListMirrorSession(ctx, *req)
		return respMonitoringV1AutoListMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListMirrorSession")(f)
}

// AutoListStatsPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoListStatsPolicy(ctx context.Context, in api.ListWatchOptions) (StatsPolicyList, error) {
	resp, err := e.AutoListStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicyList{}, err
	}
	return *resp.(*StatsPolicyList), nil
}

// MakeMonitoringV1AutoListStatsPolicyEndpoint creates  AutoListStatsPolicy endpoints for the service
func MakeMonitoringV1AutoListStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListStatsPolicy(ctx, *req)
		return respMonitoringV1AutoListStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoListStatsPolicy")(f)
}

// AutoUpdateAlert implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlert(ctx context.Context, in Alert) (Alert, error) {
	resp, err := e.AutoUpdateAlertEndpoint(ctx, in)
	if err != nil {
		return Alert{}, err
	}
	return *resp.(*Alert), nil
}

// MakeMonitoringV1AutoUpdateAlertEndpoint creates  AutoUpdateAlert endpoints for the service
func MakeMonitoringV1AutoUpdateAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Alert)
		v, err := s.AutoUpdateAlert(ctx, *req)
		return respMonitoringV1AutoUpdateAlert{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlert")(f)
}

// AutoUpdateAlertDestination implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (AlertDestination, error) {
	resp, err := e.AutoUpdateAlertDestinationEndpoint(ctx, in)
	if err != nil {
		return AlertDestination{}, err
	}
	return *resp.(*AlertDestination), nil
}

// MakeMonitoringV1AutoUpdateAlertDestinationEndpoint creates  AutoUpdateAlertDestination endpoints for the service
func MakeMonitoringV1AutoUpdateAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertDestination)
		v, err := s.AutoUpdateAlertDestination(ctx, *req)
		return respMonitoringV1AutoUpdateAlertDestination{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlertDestination")(f)
}

// AutoUpdateAlertPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (AlertPolicy, error) {
	resp, err := e.AutoUpdateAlertPolicyEndpoint(ctx, in)
	if err != nil {
		return AlertPolicy{}, err
	}
	return *resp.(*AlertPolicy), nil
}

// MakeMonitoringV1AutoUpdateAlertPolicyEndpoint creates  AutoUpdateAlertPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*AlertPolicy)
		v, err := s.AutoUpdateAlertPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateAlertPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateAlertPolicy")(f)
}

// AutoUpdateEvent implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateEvent(ctx context.Context, in Event) (Event, error) {
	resp, err := e.AutoUpdateEventEndpoint(ctx, in)
	if err != nil {
		return Event{}, err
	}
	return *resp.(*Event), nil
}

// MakeMonitoringV1AutoUpdateEventEndpoint creates  AutoUpdateEvent endpoints for the service
func MakeMonitoringV1AutoUpdateEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*Event)
		v, err := s.AutoUpdateEvent(ctx, *req)
		return respMonitoringV1AutoUpdateEvent{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateEvent")(f)
}

// AutoUpdateEventPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateEventPolicy(ctx context.Context, in EventPolicy) (EventPolicy, error) {
	resp, err := e.AutoUpdateEventPolicyEndpoint(ctx, in)
	if err != nil {
		return EventPolicy{}, err
	}
	return *resp.(*EventPolicy), nil
}

// MakeMonitoringV1AutoUpdateEventPolicyEndpoint creates  AutoUpdateEventPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*EventPolicy)
		v, err := s.AutoUpdateEventPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateEventPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateEventPolicy")(f)
}

// AutoUpdateFlowExportPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (FlowExportPolicy, error) {
	resp, err := e.AutoUpdateFlowExportPolicyEndpoint(ctx, in)
	if err != nil {
		return FlowExportPolicy{}, err
	}
	return *resp.(*FlowExportPolicy), nil
}

// MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint creates  AutoUpdateFlowExportPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FlowExportPolicy)
		v, err := s.AutoUpdateFlowExportPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateFlowExportPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateFlowExportPolicy")(f)
}

// AutoUpdateFwlogPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (FwlogPolicy, error) {
	resp, err := e.AutoUpdateFwlogPolicyEndpoint(ctx, in)
	if err != nil {
		return FwlogPolicy{}, err
	}
	return *resp.(*FwlogPolicy), nil
}

// MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint creates  AutoUpdateFwlogPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*FwlogPolicy)
		v, err := s.AutoUpdateFwlogPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateFwlogPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateFwlogPolicy")(f)
}

// AutoUpdateMirrorSession implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMonitoringV1AutoUpdateMirrorSessionEndpoint creates  AutoUpdateMirrorSession endpoints for the service
func MakeMonitoringV1AutoUpdateMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoUpdateMirrorSession(ctx, *req)
		return respMonitoringV1AutoUpdateMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateMirrorSession")(f)
}

// AutoUpdateStatsPolicy implementation on server Endpoint
func (e EndpointsMonitoringV1Server) AutoUpdateStatsPolicy(ctx context.Context, in StatsPolicy) (StatsPolicy, error) {
	resp, err := e.AutoUpdateStatsPolicyEndpoint(ctx, in)
	if err != nil {
		return StatsPolicy{}, err
	}
	return *resp.(*StatsPolicy), nil
}

// MakeMonitoringV1AutoUpdateStatsPolicyEndpoint creates  AutoUpdateStatsPolicy endpoints for the service
func MakeMonitoringV1AutoUpdateStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*StatsPolicy)
		v, err := s.AutoUpdateStatsPolicy(ctx, *req)
		return respMonitoringV1AutoUpdateStatsPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MonitoringV1:AutoUpdateStatsPolicy")(f)
}

// AutoWatchEvent is the watch handler for Event on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchEvent(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventServer) error {
	return e.watchHandlerEvent(in, stream)
}

// MakeAutoWatchEventEndpoint creates the Watch endpoint
func MakeAutoWatchEventEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchEventServer)
		return s.AutoWatchEvent(options, wstream)
	}
}

// AutoWatchEventPolicy is the watch handler for EventPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchEventPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventPolicyServer) error {
	return e.watchHandlerEventPolicy(in, stream)
}

// MakeAutoWatchEventPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchEventPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchEventPolicyServer)
		return s.AutoWatchEventPolicy(options, wstream)
	}
}

// AutoWatchStatsPolicy is the watch handler for StatsPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchStatsPolicyServer) error {
	return e.watchHandlerStatsPolicy(in, stream)
}

// MakeAutoWatchStatsPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchStatsPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchStatsPolicyServer)
		return s.AutoWatchStatsPolicy(options, wstream)
	}
}

// AutoWatchFwlogPolicy is the watch handler for FwlogPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFwlogPolicyServer) error {
	return e.watchHandlerFwlogPolicy(in, stream)
}

// MakeAutoWatchFwlogPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchFwlogPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchFwlogPolicyServer)
		return s.AutoWatchFwlogPolicy(options, wstream)
	}
}

// AutoWatchFlowExportPolicy is the watch handler for FlowExportPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFlowExportPolicyServer) error {
	return e.watchHandlerFlowExportPolicy(in, stream)
}

// MakeAutoWatchFlowExportPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchFlowExportPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchFlowExportPolicyServer)
		return s.AutoWatchFlowExportPolicy(options, wstream)
	}
}

// AutoWatchAlert is the watch handler for Alert on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlert(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertServer) error {
	return e.watchHandlerAlert(in, stream)
}

// MakeAutoWatchAlertEndpoint creates the Watch endpoint
func MakeAutoWatchAlertEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertServer)
		return s.AutoWatchAlert(options, wstream)
	}
}

// AutoWatchAlertPolicy is the watch handler for AlertPolicy on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertPolicyServer) error {
	return e.watchHandlerAlertPolicy(in, stream)
}

// MakeAutoWatchAlertPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchAlertPolicyEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertPolicyServer)
		return s.AutoWatchAlertPolicy(options, wstream)
	}
}

// AutoWatchAlertDestination is the watch handler for AlertDestination on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchAlertDestination(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertDestinationServer) error {
	return e.watchHandlerAlertDestination(in, stream)
}

// MakeAutoWatchAlertDestinationEndpoint creates the Watch endpoint
func MakeAutoWatchAlertDestinationEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchAlertDestinationServer)
		return s.AutoWatchAlertDestination(options, wstream)
	}
}

// AutoWatchMirrorSession is the watch handler for MirrorSession on the server side.
func (e EndpointsMonitoringV1Server) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchMirrorSessionServer) error {
	return e.watchHandlerMirrorSession(in, stream)
}

// MakeAutoWatchMirrorSessionEndpoint creates the Watch endpoint
func MakeAutoWatchMirrorSessionEndpoint(s ServiceMonitoringV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MonitoringV1_AutoWatchMirrorSessionServer)
		return s.AutoWatchMirrorSession(options, wstream)
	}
}

// MakeMonitoringV1ServerEndpoints creates server endpoints
func MakeMonitoringV1ServerEndpoints(s ServiceMonitoringV1Server, logger log.Logger) EndpointsMonitoringV1Server {
	return EndpointsMonitoringV1Server{

		AutoAddAlertEndpoint:               MakeMonitoringV1AutoAddAlertEndpoint(s, logger),
		AutoAddAlertDestinationEndpoint:    MakeMonitoringV1AutoAddAlertDestinationEndpoint(s, logger),
		AutoAddAlertPolicyEndpoint:         MakeMonitoringV1AutoAddAlertPolicyEndpoint(s, logger),
		AutoAddEventEndpoint:               MakeMonitoringV1AutoAddEventEndpoint(s, logger),
		AutoAddEventPolicyEndpoint:         MakeMonitoringV1AutoAddEventPolicyEndpoint(s, logger),
		AutoAddFlowExportPolicyEndpoint:    MakeMonitoringV1AutoAddFlowExportPolicyEndpoint(s, logger),
		AutoAddFwlogPolicyEndpoint:         MakeMonitoringV1AutoAddFwlogPolicyEndpoint(s, logger),
		AutoAddMirrorSessionEndpoint:       MakeMonitoringV1AutoAddMirrorSessionEndpoint(s, logger),
		AutoAddStatsPolicyEndpoint:         MakeMonitoringV1AutoAddStatsPolicyEndpoint(s, logger),
		AutoDeleteAlertEndpoint:            MakeMonitoringV1AutoDeleteAlertEndpoint(s, logger),
		AutoDeleteAlertDestinationEndpoint: MakeMonitoringV1AutoDeleteAlertDestinationEndpoint(s, logger),
		AutoDeleteAlertPolicyEndpoint:      MakeMonitoringV1AutoDeleteAlertPolicyEndpoint(s, logger),
		AutoDeleteEventEndpoint:            MakeMonitoringV1AutoDeleteEventEndpoint(s, logger),
		AutoDeleteEventPolicyEndpoint:      MakeMonitoringV1AutoDeleteEventPolicyEndpoint(s, logger),
		AutoDeleteFlowExportPolicyEndpoint: MakeMonitoringV1AutoDeleteFlowExportPolicyEndpoint(s, logger),
		AutoDeleteFwlogPolicyEndpoint:      MakeMonitoringV1AutoDeleteFwlogPolicyEndpoint(s, logger),
		AutoDeleteMirrorSessionEndpoint:    MakeMonitoringV1AutoDeleteMirrorSessionEndpoint(s, logger),
		AutoDeleteStatsPolicyEndpoint:      MakeMonitoringV1AutoDeleteStatsPolicyEndpoint(s, logger),
		AutoGetAlertEndpoint:               MakeMonitoringV1AutoGetAlertEndpoint(s, logger),
		AutoGetAlertDestinationEndpoint:    MakeMonitoringV1AutoGetAlertDestinationEndpoint(s, logger),
		AutoGetAlertPolicyEndpoint:         MakeMonitoringV1AutoGetAlertPolicyEndpoint(s, logger),
		AutoGetEventEndpoint:               MakeMonitoringV1AutoGetEventEndpoint(s, logger),
		AutoGetEventPolicyEndpoint:         MakeMonitoringV1AutoGetEventPolicyEndpoint(s, logger),
		AutoGetFlowExportPolicyEndpoint:    MakeMonitoringV1AutoGetFlowExportPolicyEndpoint(s, logger),
		AutoGetFwlogPolicyEndpoint:         MakeMonitoringV1AutoGetFwlogPolicyEndpoint(s, logger),
		AutoGetMirrorSessionEndpoint:       MakeMonitoringV1AutoGetMirrorSessionEndpoint(s, logger),
		AutoGetStatsPolicyEndpoint:         MakeMonitoringV1AutoGetStatsPolicyEndpoint(s, logger),
		AutoListAlertEndpoint:              MakeMonitoringV1AutoListAlertEndpoint(s, logger),
		AutoListAlertDestinationEndpoint:   MakeMonitoringV1AutoListAlertDestinationEndpoint(s, logger),
		AutoListAlertPolicyEndpoint:        MakeMonitoringV1AutoListAlertPolicyEndpoint(s, logger),
		AutoListEventEndpoint:              MakeMonitoringV1AutoListEventEndpoint(s, logger),
		AutoListEventPolicyEndpoint:        MakeMonitoringV1AutoListEventPolicyEndpoint(s, logger),
		AutoListFlowExportPolicyEndpoint:   MakeMonitoringV1AutoListFlowExportPolicyEndpoint(s, logger),
		AutoListFwlogPolicyEndpoint:        MakeMonitoringV1AutoListFwlogPolicyEndpoint(s, logger),
		AutoListMirrorSessionEndpoint:      MakeMonitoringV1AutoListMirrorSessionEndpoint(s, logger),
		AutoListStatsPolicyEndpoint:        MakeMonitoringV1AutoListStatsPolicyEndpoint(s, logger),
		AutoUpdateAlertEndpoint:            MakeMonitoringV1AutoUpdateAlertEndpoint(s, logger),
		AutoUpdateAlertDestinationEndpoint: MakeMonitoringV1AutoUpdateAlertDestinationEndpoint(s, logger),
		AutoUpdateAlertPolicyEndpoint:      MakeMonitoringV1AutoUpdateAlertPolicyEndpoint(s, logger),
		AutoUpdateEventEndpoint:            MakeMonitoringV1AutoUpdateEventEndpoint(s, logger),
		AutoUpdateEventPolicyEndpoint:      MakeMonitoringV1AutoUpdateEventPolicyEndpoint(s, logger),
		AutoUpdateFlowExportPolicyEndpoint: MakeMonitoringV1AutoUpdateFlowExportPolicyEndpoint(s, logger),
		AutoUpdateFwlogPolicyEndpoint:      MakeMonitoringV1AutoUpdateFwlogPolicyEndpoint(s, logger),
		AutoUpdateMirrorSessionEndpoint:    MakeMonitoringV1AutoUpdateMirrorSessionEndpoint(s, logger),
		AutoUpdateStatsPolicyEndpoint:      MakeMonitoringV1AutoUpdateStatsPolicyEndpoint(s, logger),

		watchHandlerEvent:            MakeAutoWatchEventEndpoint(s, logger),
		watchHandlerEventPolicy:      MakeAutoWatchEventPolicyEndpoint(s, logger),
		watchHandlerStatsPolicy:      MakeAutoWatchStatsPolicyEndpoint(s, logger),
		watchHandlerFwlogPolicy:      MakeAutoWatchFwlogPolicyEndpoint(s, logger),
		watchHandlerFlowExportPolicy: MakeAutoWatchFlowExportPolicyEndpoint(s, logger),
		watchHandlerAlert:            MakeAutoWatchAlertEndpoint(s, logger),
		watchHandlerAlertPolicy:      MakeAutoWatchAlertPolicyEndpoint(s, logger),
		watchHandlerAlertDestination: MakeAutoWatchAlertDestinationEndpoint(s, logger),
		watchHandlerMirrorSession:    MakeAutoWatchMirrorSessionEndpoint(s, logger),
	}
}

// LoggingMonitoringV1MiddlewareClient adds middleware for the client
func LoggingMonitoringV1MiddlewareClient(logger log.Logger) MiddlewareMonitoringV1Client {
	return func(next ServiceMonitoringV1Client) ServiceMonitoringV1Client {
		return loggingMonitoringV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceMonitoringV1Client
}

// LoggingMonitoringV1MiddlewareServer adds middleware for the client
func LoggingMonitoringV1MiddlewareServer(logger log.Logger) MiddlewareMonitoringV1Server {
	return func(next ServiceMonitoringV1Server) ServiceMonitoringV1Server {
		return loggingMonitoringV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMonitoringV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceMonitoringV1Server
}

func (m loggingMonitoringV1MiddlewareClient) AutoAddAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddEvent(ctx context.Context, in *Event) (resp *Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteEvent(ctx context.Context, in *Event) (resp *Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetEvent(ctx context.Context, in *Event) (resp *Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlert(ctx context.Context, in *api.ListWatchOptions) (resp *AlertList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp *AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListEvent(ctx context.Context, in *api.ListWatchOptions) (resp *EventList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *EventPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *FlowExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp *MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *StatsPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlert(ctx context.Context, in *Alert) (resp *Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (resp *AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (resp *AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateEvent(ctx context.Context, in *Event) (resp *Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (resp *EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (resp *FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (resp *FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (resp *StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStatsPolicy(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareClient) AutoWatchEvent(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchEventClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchEventPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchStatsPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchFwlogPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchFlowExportPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchAlertDestinationClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareClient) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp MonitoringV1_AutoWatchMirrorSessionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchMirrorSession(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareServer) AutoAddAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddEvent(ctx context.Context, in Event) (resp Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoAddStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoAddStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteEvent(ctx context.Context, in Event) (resp Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoDeleteStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoDeleteStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetEvent(ctx context.Context, in Event) (resp Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoGetStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoGetStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlert(ctx context.Context, in api.ListWatchOptions) (resp AlertList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlertDestination(ctx context.Context, in api.ListWatchOptions) (resp AlertDestinationList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListAlertPolicy(ctx context.Context, in api.ListWatchOptions) (resp AlertPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListEvent(ctx context.Context, in api.ListWatchOptions) (resp EventList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListEventPolicy(ctx context.Context, in api.ListWatchOptions) (resp EventPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListFlowExportPolicy(ctx context.Context, in api.ListWatchOptions) (resp FlowExportPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListFwlogPolicy(ctx context.Context, in api.ListWatchOptions) (resp FwlogPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (resp MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoListStatsPolicy(ctx context.Context, in api.ListWatchOptions) (resp StatsPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoListStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListStatsPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlert(ctx context.Context, in Alert) (resp Alert, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlert(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlertDestination(ctx context.Context, in AlertDestination) (resp AlertDestination, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertDestination(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateAlertPolicy(ctx context.Context, in AlertPolicy) (resp AlertPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateAlertPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateEvent(ctx context.Context, in Event) (resp Event, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEvent(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateEventPolicy(ctx context.Context, in EventPolicy) (resp EventPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateEventPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateFlowExportPolicy(ctx context.Context, in FlowExportPolicy) (resp FlowExportPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFlowExportPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateFwlogPolicy(ctx context.Context, in FwlogPolicy) (resp FwlogPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateFwlogPolicy(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoUpdateStatsPolicy(ctx context.Context, in StatsPolicy) (resp StatsPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MonitoringV1", "method", "AutoUpdateStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateStatsPolicy(ctx, in)
	return
}

func (m loggingMonitoringV1MiddlewareServer) AutoWatchEvent(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchEvent", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchEvent(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchEventPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchEventPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchEventPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchStatsPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchStatsPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchStatsPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFwlogPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchFwlogPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFwlogPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFlowExportPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchFlowExportPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchFlowExportPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlert(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlert", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlert(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlertPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertPolicy(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchAlertDestination(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertDestinationServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchAlertDestination", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchAlertDestination(in, stream)
	return
}
func (m loggingMonitoringV1MiddlewareServer) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchMirrorSessionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MonitoringV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchMirrorSession(in, stream)
	return
}
func (r *EndpointsMonitoringV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIMonitoringV1AutoAddAlertDestinationCreateOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertDestinations")
}

//
func makeURIMonitoringV1AutoAddAlertPolicyCreateOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertPolicies")
}

//
func makeURIMonitoringV1AutoAddEventPolicyCreateOper(in *EventPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/eventPolicy")
}

//
func makeURIMonitoringV1AutoAddFlowExportPolicyCreateOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/flowExportPolicy")
}

//
func makeURIMonitoringV1AutoAddMirrorSessionCreateOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/MirrorSession")
}

//
func makeURIMonitoringV1AutoDeleteAlertDestinationDeleteOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteAlertPolicyDeleteOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteEventPolicyDeleteOper(in *EventPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/eventPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteFlowExportPolicyDeleteOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoDeleteMirrorSessionDeleteOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertGetOper(in *Alert) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alerts/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertDestinationGetOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoGetAlertPolicyGetOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoGetEventGetOper(in *Event) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/events/", in.Name)
}

//
func makeURIMonitoringV1AutoGetEventPolicyGetOper(in *EventPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/eventPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetFlowExportPolicyGetOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetFwlogPolicyGetOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoGetMirrorSessionGetOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoGetStatsPolicyGetOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/statsPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoListAlertListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alerts")
}

//
func makeURIMonitoringV1AutoListAlertDestinationListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertDestinations")
}

//
func makeURIMonitoringV1AutoListAlertPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertPolicies")
}

//
func makeURIMonitoringV1AutoListEventListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/events")
}

//
func makeURIMonitoringV1AutoListFlowExportPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/flowExportPolicy")
}

//
func makeURIMonitoringV1AutoListFwlogPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/fwlogPolicy")
}

//
func makeURIMonitoringV1AutoListMirrorSessionListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/MirrorSession")
}

//
func makeURIMonitoringV1AutoListStatsPolicyListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/statsPolicy")
}

//
func makeURIMonitoringV1AutoUpdateAlertUpdateOper(in *Alert) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alerts/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateAlertDestinationUpdateOper(in *AlertDestination) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertDestinations/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateAlertPolicyUpdateOper(in *AlertPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/alertPolicies/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateEventPolicyUpdateOper(in *EventPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/eventPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateFlowExportPolicyUpdateOper(in *FlowExportPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/flowExportPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateFwlogPolicyUpdateOper(in *FwlogPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/fwlogPolicy/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateMirrorSessionUpdateOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMonitoringV1AutoUpdateStatsPolicyUpdateOper(in *StatsPolicy) string {
	return fmt.Sprint("/v1/monitoring", "/", in.Tenant, "/statsPolicy/", in.Name)
}

// AutoAddEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoAddEvent(ctx context.Context, in *Event) (*Event, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoUpdateEvent(ctx context.Context, in *Event) (*Event, error) {
	return nil, errors.New("not allowed")
}

// AutoGetEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoGetEvent(ctx context.Context, in *Event) (*Event, error) {
	path := makeURIMonitoringV1AutoGetEventGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetEvent(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Event), err
}

// AutoDeleteEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoDeleteEvent(ctx context.Context, in *Event) (*Event, error) {
	return nil, errors.New("not allowed")
}

// AutoListEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoListEvent(ctx context.Context, options *api.ListWatchOptions) (*EventList, error) {
	path := makeURIMonitoringV1AutoListEventListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListEvent(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventList), err
}

// AutoWatchEvent CRUD method for Event
func (r *EndpointsMonitoringV1RestClient) AutoWatchEvent(ctx context.Context, in *Event) (*Event, error) {
	return nil, errors.New("not allowed")
}

// AutoAddEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoAddEventPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoAddEventPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), nil
}

// AutoUpdateEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateEventPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoGetEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoGetEventPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoDeleteEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteEventPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteEventPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*EventPolicy), err
}

// AutoListEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListEventPolicy(ctx context.Context, options *api.ListWatchOptions) (*EventPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchEventPolicy CRUD method for EventPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchEventPolicy(ctx context.Context, in *EventPolicy) (*EventPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoAddStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateStatsPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), err
}

// AutoGetStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	path := makeURIMonitoringV1AutoGetStatsPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicy), err
}

// AutoDeleteStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoListStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListStatsPolicy(ctx context.Context, options *api.ListWatchOptions) (*StatsPolicyList, error) {
	path := makeURIMonitoringV1AutoListStatsPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListStatsPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*StatsPolicyList), err
}

// AutoWatchStatsPolicy CRUD method for StatsPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchStatsPolicy(ctx context.Context, in *StatsPolicy) (*StatsPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoAddFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateFwlogPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoGetFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	path := makeURIMonitoringV1AutoGetFwlogPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicy), err
}

// AutoDeleteFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoListFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListFwlogPolicy(ctx context.Context, options *api.ListWatchOptions) (*FwlogPolicyList, error) {
	path := makeURIMonitoringV1AutoListFwlogPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListFwlogPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FwlogPolicyList), err
}

// AutoWatchFwlogPolicy CRUD method for FwlogPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchFwlogPolicy(ctx context.Context, in *FwlogPolicy) (*FwlogPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoAddFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoAddFlowExportPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoAddFlowExportPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), nil
}

// AutoUpdateFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateFlowExportPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoGetFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoGetFlowExportPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoDeleteFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteFlowExportPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicy), err
}

// AutoListFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListFlowExportPolicy(ctx context.Context, options *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	path := makeURIMonitoringV1AutoListFlowExportPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListFlowExportPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*FlowExportPolicyList), err
}

// AutoWatchFlowExportPolicy CRUD method for FlowExportPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchFlowExportPolicy(ctx context.Context, in *FlowExportPolicy) (*FlowExportPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoAddAlert(ctx context.Context, in *Alert) (*Alert, error) {
	return nil, errors.New("not allowed")
}

// AutoUpdateAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlert(ctx context.Context, in *Alert) (*Alert, error) {
	path := makeURIMonitoringV1AutoUpdateAlertUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Alert), err
}

// AutoGetAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoGetAlert(ctx context.Context, in *Alert) (*Alert, error) {
	path := makeURIMonitoringV1AutoGetAlertGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*Alert), err
}

// AutoDeleteAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlert(ctx context.Context, in *Alert) (*Alert, error) {
	return nil, errors.New("not allowed")
}

// AutoListAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoListAlert(ctx context.Context, options *api.ListWatchOptions) (*AlertList, error) {
	path := makeURIMonitoringV1AutoListAlertListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListAlert(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertList), err
}

// AutoWatchAlert CRUD method for Alert
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlert(ctx context.Context, in *Alert) (*Alert, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoAddAlertPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoAddAlertPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), nil
}

// AutoUpdateAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoUpdateAlertPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoGetAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoGetAlertPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoDeleteAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	path := makeURIMonitoringV1AutoDeleteAlertPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicy), err
}

// AutoListAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoListAlertPolicy(ctx context.Context, options *api.ListWatchOptions) (*AlertPolicyList, error) {
	path := makeURIMonitoringV1AutoListAlertPolicyListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListAlertPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertPolicyList), err
}

// AutoWatchAlertPolicy CRUD method for AlertPolicy
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlertPolicy(ctx context.Context, in *AlertPolicy) (*AlertPolicy, error) {
	return nil, errors.New("not allowed")
}

// AutoAddAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoAddAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoAddAlertDestinationCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoAddAlertDestination(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), nil
}

// AutoUpdateAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoUpdateAlertDestinationUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoGetAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoGetAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoGetAlertDestinationGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoDeleteAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	path := makeURIMonitoringV1AutoDeleteAlertDestinationDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestination), err
}

// AutoListAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoListAlertDestination(ctx context.Context, options *api.ListWatchOptions) (*AlertDestinationList, error) {
	path := makeURIMonitoringV1AutoListAlertDestinationListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListAlertDestination(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*AlertDestinationList), err
}

// AutoWatchAlertDestination CRUD method for AlertDestination
func (r *EndpointsMonitoringV1RestClient) AutoWatchAlertDestination(ctx context.Context, in *AlertDestination) (*AlertDestination, error) {
	return nil, errors.New("not allowed")
}

// AutoAddMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoAddMirrorSessionCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoAddMirrorSession(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), nil
}

// AutoUpdateMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoUpdateMirrorSessionUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoUpdateMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoGetMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoGetMirrorSessionGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoGetMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoDeleteMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMonitoringV1AutoDeleteMirrorSessionDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoDeleteMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoListMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoListMirrorSession(ctx context.Context, options *api.ListWatchOptions) (*MirrorSessionList, error) {
	path := makeURIMonitoringV1AutoListMirrorSessionListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMonitoringV1AutoListMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSessionList), err
}

// AutoWatchMirrorSession CRUD method for MirrorSession
func (r *EndpointsMonitoringV1RestClient) AutoWatchMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	return nil, errors.New("not allowed")
}

// MakeMonitoringV1RestClientEndpoints make REST client endpoints
func MakeMonitoringV1RestClientEndpoints(instance string) (EndpointsMonitoringV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsMonitoringV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
