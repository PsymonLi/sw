// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auditpolicy.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AuditPolicy represents the policy definition for Audit Events.
type AuditPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of an audit event policy.
	Spec AuditPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of an audit event policy.
	Status AuditPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *AuditPolicy) Reset()                    { *m = AuditPolicy{} }
func (m *AuditPolicy) String() string            { return proto.CompactTextString(m) }
func (*AuditPolicy) ProtoMessage()               {}
func (*AuditPolicy) Descriptor() ([]byte, []int) { return fileDescriptorAuditpolicy, []int{0} }

func (m *AuditPolicy) GetSpec() AuditPolicySpec {
	if m != nil {
		return m.Spec
	}
	return AuditPolicySpec{}
}

func (m *AuditPolicy) GetStatus() AuditPolicyStatus {
	if m != nil {
		return m.Status
	}
	return AuditPolicyStatus{}
}

// AuditPolicySpec is the specification of an AuditEvent Policy.
type AuditPolicySpec struct {
	//
	Syslog *SyslogAuditor `protobuf:"bytes,1,opt,name=Syslog,json=syslog-auditor,omitempty" json:"syslog-auditor,omitempty"`
}

func (m *AuditPolicySpec) Reset()                    { *m = AuditPolicySpec{} }
func (m *AuditPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*AuditPolicySpec) ProtoMessage()               {}
func (*AuditPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorAuditpolicy, []int{1} }

func (m *AuditPolicySpec) GetSyslog() *SyslogAuditor {
	if m != nil {
		return m.Syslog
	}
	return nil
}

// AuditPolicyStatus
type AuditPolicyStatus struct {
}

func (m *AuditPolicyStatus) Reset()                    { *m = AuditPolicyStatus{} }
func (m *AuditPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*AuditPolicyStatus) ProtoMessage()               {}
func (*AuditPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorAuditpolicy, []int{2} }

//
type SyslogAuditor struct {
	// flag to enable sending audit events to syslog
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,json=enabled,proto3" json:"enabled"`
	// audit event export format, SYSLOG_BSD default
	Format string `protobuf:"bytes,2,opt,name=Format,json=format, omitempty,proto3" json:"format, omitempty"`
	// export target ip/port/protocol
	Targets []*ExportConfig `protobuf:"bytes,3,rep,name=Targets,json=targets,omitempty" json:"targets,omitempty"`
	// once we support other formats, it should be one of the supported configs
	// syslog specific configuration
	SyslogConfig *SyslogExportConfig `protobuf:"bytes,4,opt,name=SyslogConfig,json=config,omitempty" json:"config,omitempty"`
}

func (m *SyslogAuditor) Reset()                    { *m = SyslogAuditor{} }
func (m *SyslogAuditor) String() string            { return proto.CompactTextString(m) }
func (*SyslogAuditor) ProtoMessage()               {}
func (*SyslogAuditor) Descriptor() ([]byte, []int) { return fileDescriptorAuditpolicy, []int{3} }

func (m *SyslogAuditor) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SyslogAuditor) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *SyslogAuditor) GetTargets() []*ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *SyslogAuditor) GetSyslogConfig() *SyslogExportConfig {
	if m != nil {
		return m.SyslogConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*AuditPolicy)(nil), "monitoring.AuditPolicy")
	proto.RegisterType((*AuditPolicySpec)(nil), "monitoring.AuditPolicySpec")
	proto.RegisterType((*AuditPolicyStatus)(nil), "monitoring.AuditPolicyStatus")
	proto.RegisterType((*SyslogAuditor)(nil), "monitoring.SyslogAuditor")
}
func (m *AuditPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAuditpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAuditpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAuditpolicy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintAuditpolicy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AuditPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Syslog != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuditpolicy(dAtA, i, uint64(m.Syslog.Size()))
		n5, err := m.Syslog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AuditPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SyslogAuditor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyslogAuditor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuditpolicy(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAuditpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SyslogConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuditpolicy(dAtA, i, uint64(m.SyslogConfig.Size()))
		n6, err := m.SyslogConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintAuditpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuditPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAuditpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAuditpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAuditpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAuditpolicy(uint64(l))
	return n
}

func (m *AuditPolicySpec) Size() (n int) {
	var l int
	_ = l
	if m.Syslog != nil {
		l = m.Syslog.Size()
		n += 1 + l + sovAuditpolicy(uint64(l))
	}
	return n
}

func (m *AuditPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SyslogAuditor) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovAuditpolicy(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovAuditpolicy(uint64(l))
		}
	}
	if m.SyslogConfig != nil {
		l = m.SyslogConfig.Size()
		n += 1 + l + sovAuditpolicy(uint64(l))
	}
	return n
}

func sovAuditpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuditpolicy(x uint64) (n int) {
	return sovAuditpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Syslog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Syslog == nil {
				m.Syslog = &SyslogAuditor{}
			}
			if err := m.Syslog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuditpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyslogAuditor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuditpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyslogAuditor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyslogAuditor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyslogConfig == nil {
				m.SyslogConfig = &SyslogExportConfig{}
			}
			if err := m.SyslogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuditpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuditpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuditpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuditpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuditpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuditpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuditpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuditpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuditpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuditpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("auditpolicy.proto", fileDescriptorAuditpolicy) }

var fileDescriptorAuditpolicy = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xee, 0x42, 0x03, 0x3a, 0x50, 0x5b, 0xb6, 0x6a, 0x16, 0xaa, 0x2c, 0x21, 0x69, 0x82, 0x09,
	0xec, 0x26, 0x35, 0x31, 0xc6, 0x9b, 0x6b, 0xe8, 0xad, 0xa1, 0x02, 0x17, 0xa3, 0x97, 0x61, 0x19,
	0xd6, 0x31, 0xbb, 0x33, 0x9b, 0xdd, 0x59, 0x2d, 0x31, 0x1e, 0xf5, 0xc7, 0xf8, 0x43, 0x0c, 0xc7,
	0xc6, 0xb3, 0x21, 0x86, 0x93, 0xe9, 0xaf, 0x30, 0xf3, 0x06, 0xda, 0x01, 0xc2, 0xed, 0xbd, 0x6f,
	0xbf, 0xef, 0x9b, 0x6f, 0xde, 0x9b, 0x45, 0x15, 0x9c, 0x8d, 0xa9, 0x88, 0x79, 0x48, 0xfd, 0xa9,
	0x13, 0x27, 0x5c, 0x70, 0x13, 0x45, 0x9c, 0x51, 0xc1, 0x13, 0xca, 0x82, 0xda, 0x93, 0x80, 0xf3,
	0x20, 0x24, 0x2e, 0x8e, 0xa9, 0x8b, 0x19, 0xe3, 0x02, 0x0b, 0xca, 0x59, 0xaa, 0x98, 0xb5, 0x6e,
	0x40, 0xc5, 0xc7, 0x6c, 0xe4, 0xf8, 0x3c, 0x72, 0x63, 0xc2, 0x52, 0xcc, 0xc6, 0xdc, 0x4d, 0xbf,
	0xb8, 0x9f, 0x09, 0xa3, 0x3e, 0x71, 0x33, 0x41, 0xc3, 0x54, 0x4a, 0x03, 0xc2, 0x74, 0xb5, 0x4b,
	0x99, 0x1f, 0x66, 0x63, 0xb2, 0xb2, 0xe9, 0x68, 0x36, 0x01, 0x0f, 0xb8, 0x0b, 0xf0, 0x28, 0x9b,
	0x40, 0x07, 0x0d, 0x54, 0x4b, 0xfa, 0xe9, 0x8e, 0x53, 0x65, 0xc6, 0x88, 0x08, 0xbc, 0xa4, 0x95,
	0xc9, 0x55, 0xcc, 0x13, 0xa1, 0xba, 0xe6, 0x9f, 0x1c, 0x2a, 0xbd, 0x96, 0x57, 0xbd, 0x84, 0xab,
	0x9a, 0x2f, 0x90, 0x31, 0xb4, 0x8c, 0x86, 0xd1, 0x2a, 0x9d, 0x1d, 0x38, 0x38, 0xa6, 0xce, 0x70,
	0x1a, 0x93, 0x0b, 0x22, 0xb0, 0x77, 0x3c, 0x9b, 0xdb, 0x7b, 0xd7, 0x73, 0xdb, 0xb8, 0x99, 0xdb,
	0xc5, 0x36, 0x65, 0x21, 0x65, 0xa4, 0xbf, 0x2a, 0xcc, 0x73, 0x64, 0xf4, 0xac, 0x1c, 0xe8, 0x0e,
	0x41, 0xd7, 0x1b, 0x7d, 0x22, 0xbe, 0x00, 0x65, 0x4d, 0x53, 0x3e, 0x90, 0x49, 0xda, 0x3c, 0xa2,
	0x82, 0x44, 0xb1, 0x98, 0xf6, 0x37, 0x7a, 0xf3, 0x2d, 0xda, 0x1f, 0xc4, 0xc4, 0xb7, 0xf2, 0x60,
	0x75, 0xe2, 0xdc, 0xcd, 0xdc, 0xd1, 0x62, 0x4a, 0x8a, 0xf7, 0x58, 0xda, 0x4a, 0xcb, 0x34, 0x26,
	0xbe, 0x6e, 0xb9, 0xde, 0x9b, 0xef, 0x50, 0x61, 0x20, 0xb0, 0xc8, 0x52, 0x6b, 0x1f, 0x4c, 0x9f,
	0xee, 0x32, 0x05, 0x92, 0x67, 0x2d, 0x6d, 0x8f, 0x52, 0xe8, 0x35, 0xe3, 0x2d, 0xe4, 0x95, 0xfd,
	0xfb, 0x7b, 0xf5, 0x04, 0x95, 0xdc, 0xaf, 0x3d, 0x67, 0x48, 0x18, 0x66, 0xe2, 0x5b, 0xad, 0x0c,
	0x0f, 0xa7, 0xa3, 0x5e, 0x4e, 0xf3, 0x0a, 0x1d, 0x6e, 0xc4, 0x36, 0x09, 0x2a, 0x0c, 0xa6, 0x69,
	0xc8, 0x83, 0xe5, 0x98, 0xab, 0x7a, 0x1c, 0xf5, 0x05, 0x24, 0x3c, 0xf1, 0x1a, 0x33, 0x35, 0x34,
	0x2b, 0x05, 0xb8, 0x83, 0x15, 0xae, 0x45, 0xda, 0xf9, 0xa5, 0x79, 0x8c, 0x2a, 0x5b, 0x77, 0x6b,
	0xfe, 0xca, 0xa1, 0x83, 0xb5, 0x23, 0xcc, 0x53, 0x54, 0xec, 0x32, 0x3c, 0x0a, 0xc9, 0x18, 0xe2,
	0xdc, 0xf3, 0x4a, 0x72, 0xbd, 0x44, 0x41, 0xfd, 0x55, 0x61, 0xbe, 0x47, 0x85, 0x73, 0x9e, 0x44,
	0x58, 0xc0, 0x8e, 0xef, 0x7b, 0x2f, 0x7f, 0xfe, 0xa8, 0xda, 0x03, 0x91, 0x74, 0x59, 0x16, 0xb5,
	0x2e, 0x6e, 0xf3, 0x77, 0xe1, 0x69, 0x29, 0xe6, 0xb3, 0x9b, 0xb9, 0x5d, 0x99, 0x40, 0xd9, 0x6e,
	0xdc, 0x25, 0xde, 0x86, 0xcc, 0x01, 0x2a, 0x0e, 0x71, 0x12, 0x10, 0x91, 0x5a, 0xf9, 0x46, 0xbe,
	0x55, 0x3a, 0xb3, 0xf4, 0x91, 0x28, 0xcf, 0x37, 0x9c, 0x4d, 0x68, 0xe0, 0x3d, 0x92, 0xa6, 0x42,
	0x91, 0xb5, 0x31, 0x6c, 0x43, 0xe6, 0x07, 0x54, 0x56, 0x37, 0x55, 0xca, 0xe5, 0xee, 0xeb, 0xdb,
	0xc3, 0x5e, 0xf3, 0x7f, 0x28, 0x17, 0xef, 0x43, 0xad, 0x2f, 0x7e, 0x13, 0xf1, 0x8e, 0x66, 0x8b,
	0xba, 0x71, 0xbd, 0xa8, 0x1b, 0x7f, 0x17, 0x75, 0xe3, 0xdf, 0xa2, 0xbe, 0x77, 0x69, 0x8c, 0x0a,
	0xf0, 0x47, 0x3d, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x3b, 0x33, 0x0f, 0x3b, 0x04, 0x00,
	0x00,
}
