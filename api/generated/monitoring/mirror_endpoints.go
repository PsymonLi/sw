// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: protos/mirror.proto
*/
package monitoring

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareMirrorSessionV1Client add middleware to the client
type MiddlewareMirrorSessionV1Client func(ServiceMirrorSessionV1Client) ServiceMirrorSessionV1Client

// EndpointsMirrorSessionV1Client is the endpoints for the client
type EndpointsMirrorSessionV1Client struct {
	Client MirrorSessionV1Client

	AutoAddMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint endpoint.Endpoint
	AutoGetMirrorSessionEndpoint    endpoint.Endpoint
	AutoListMirrorSessionEndpoint   endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint endpoint.Endpoint
}

// EndpointsMirrorSessionV1RestClient is the REST client
type EndpointsMirrorSessionV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint endpoint.Endpoint
	AutoGetMirrorSessionEndpoint    endpoint.Endpoint
	AutoListMirrorSessionEndpoint   endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint endpoint.Endpoint
	AutoWatchMirrorSessionEndpoint  endpoint.Endpoint
}

// MiddlewareMirrorSessionV1Server adds middle ware to the server
type MiddlewareMirrorSessionV1Server func(ServiceMirrorSessionV1Server) ServiceMirrorSessionV1Server

// EndpointsMirrorSessionV1Server is the server endpoints
type EndpointsMirrorSessionV1Server struct {
	AutoAddMirrorSessionEndpoint    endpoint.Endpoint
	AutoDeleteMirrorSessionEndpoint endpoint.Endpoint
	AutoGetMirrorSessionEndpoint    endpoint.Endpoint
	AutoListMirrorSessionEndpoint   endpoint.Endpoint
	AutoUpdateMirrorSessionEndpoint endpoint.Endpoint

	watchHandlerMirrorSession func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddMirrorSession is endpoint for AutoAddMirrorSession
func (e EndpointsMirrorSessionV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMirrorSessionV1AutoAddMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoDeleteMirrorSession is endpoint for AutoDeleteMirrorSession
func (e EndpointsMirrorSessionV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMirrorSessionV1AutoDeleteMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoGetMirrorSession is endpoint for AutoGetMirrorSession
func (e EndpointsMirrorSessionV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMirrorSessionV1AutoGetMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoListMirrorSession is endpoint for AutoListMirrorSession
func (e EndpointsMirrorSessionV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (*MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSessionList{}, err
	}
	return resp.(*MirrorSessionList), nil
}

type respMirrorSessionV1AutoListMirrorSession struct {
	V   MirrorSessionList
	Err error
}

// AutoUpdateMirrorSession is endpoint for AutoUpdateMirrorSession
func (e EndpointsMirrorSessionV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return &MirrorSession{}, err
	}
	return resp.(*MirrorSession), nil
}

type respMirrorSessionV1AutoUpdateMirrorSession struct {
	V   MirrorSession
	Err error
}

// AutoWatchMirrorSession performs Watch for MirrorSession
func (e EndpointsMirrorSessionV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (MirrorSessionV1_AutoWatchMirrorSessionClient, error) {
	return e.Client.AutoWatchMirrorSession(ctx, in)
}

// AutoAddMirrorSession implementation on server Endpoint
func (e EndpointsMirrorSessionV1Server) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoAddMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMirrorSessionV1AutoAddMirrorSessionEndpoint creates  AutoAddMirrorSession endpoints for the service
func MakeMirrorSessionV1AutoAddMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoAddMirrorSession(ctx, *req)
		return respMirrorSessionV1AutoAddMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MirrorSessionV1:AutoAddMirrorSession")(f)
}

// AutoDeleteMirrorSession implementation on server Endpoint
func (e EndpointsMirrorSessionV1Server) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoDeleteMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMirrorSessionV1AutoDeleteMirrorSessionEndpoint creates  AutoDeleteMirrorSession endpoints for the service
func MakeMirrorSessionV1AutoDeleteMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoDeleteMirrorSession(ctx, *req)
		return respMirrorSessionV1AutoDeleteMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MirrorSessionV1:AutoDeleteMirrorSession")(f)
}

// AutoGetMirrorSession implementation on server Endpoint
func (e EndpointsMirrorSessionV1Server) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoGetMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMirrorSessionV1AutoGetMirrorSessionEndpoint creates  AutoGetMirrorSession endpoints for the service
func MakeMirrorSessionV1AutoGetMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoGetMirrorSession(ctx, *req)
		return respMirrorSessionV1AutoGetMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MirrorSessionV1:AutoGetMirrorSession")(f)
}

// AutoListMirrorSession implementation on server Endpoint
func (e EndpointsMirrorSessionV1Server) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (MirrorSessionList, error) {
	resp, err := e.AutoListMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSessionList{}, err
	}
	return *resp.(*MirrorSessionList), nil
}

// MakeMirrorSessionV1AutoListMirrorSessionEndpoint creates  AutoListMirrorSession endpoints for the service
func MakeMirrorSessionV1AutoListMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListMirrorSession(ctx, *req)
		return respMirrorSessionV1AutoListMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MirrorSessionV1:AutoListMirrorSession")(f)
}

// AutoUpdateMirrorSession implementation on server Endpoint
func (e EndpointsMirrorSessionV1Server) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (MirrorSession, error) {
	resp, err := e.AutoUpdateMirrorSessionEndpoint(ctx, in)
	if err != nil {
		return MirrorSession{}, err
	}
	return *resp.(*MirrorSession), nil
}

// MakeMirrorSessionV1AutoUpdateMirrorSessionEndpoint creates  AutoUpdateMirrorSession endpoints for the service
func MakeMirrorSessionV1AutoUpdateMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*MirrorSession)
		v, err := s.AutoUpdateMirrorSession(ctx, *req)
		return respMirrorSessionV1AutoUpdateMirrorSession{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("MirrorSessionV1:AutoUpdateMirrorSession")(f)
}

// AutoWatchMirrorSession is the watch handler for MirrorSession on the server side.
func (e EndpointsMirrorSessionV1Server) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MirrorSessionV1_AutoWatchMirrorSessionServer) error {
	return e.watchHandlerMirrorSession(in, stream)
}

// MakeAutoWatchMirrorSessionEndpoint creates the Watch endpoint
func MakeAutoWatchMirrorSessionEndpoint(s ServiceMirrorSessionV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(MirrorSessionV1_AutoWatchMirrorSessionServer)
		return s.AutoWatchMirrorSession(options, wstream)
	}
}

// MakeMirrorSessionV1ServerEndpoints creates server endpoints
func MakeMirrorSessionV1ServerEndpoints(s ServiceMirrorSessionV1Server, logger log.Logger) EndpointsMirrorSessionV1Server {
	return EndpointsMirrorSessionV1Server{

		AutoAddMirrorSessionEndpoint:    MakeMirrorSessionV1AutoAddMirrorSessionEndpoint(s, logger),
		AutoDeleteMirrorSessionEndpoint: MakeMirrorSessionV1AutoDeleteMirrorSessionEndpoint(s, logger),
		AutoGetMirrorSessionEndpoint:    MakeMirrorSessionV1AutoGetMirrorSessionEndpoint(s, logger),
		AutoListMirrorSessionEndpoint:   MakeMirrorSessionV1AutoListMirrorSessionEndpoint(s, logger),
		AutoUpdateMirrorSessionEndpoint: MakeMirrorSessionV1AutoUpdateMirrorSessionEndpoint(s, logger),

		watchHandlerMirrorSession: MakeAutoWatchMirrorSessionEndpoint(s, logger),
	}
}

// LoggingMirrorSessionV1MiddlewareClient adds middleware for the client
func LoggingMirrorSessionV1MiddlewareClient(logger log.Logger) MiddlewareMirrorSessionV1Client {
	return func(next ServiceMirrorSessionV1Client) ServiceMirrorSessionV1Client {
		return loggingMirrorSessionV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMirrorSessionV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceMirrorSessionV1Client
}

// LoggingMirrorSessionV1MiddlewareServer adds middleware for the client
func LoggingMirrorSessionV1MiddlewareServer(logger log.Logger) MiddlewareMirrorSessionV1Server {
	return func(next ServiceMirrorSessionV1Server) ServiceMirrorSessionV1Server {
		return loggingMirrorSessionV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMirrorSessionV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceMirrorSessionV1Server
}

func (m loggingMirrorSessionV1MiddlewareClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareClient) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp *MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (resp *MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}

func (m loggingMirrorSessionV1MiddlewareClient) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions) (resp MirrorSessionV1_AutoWatchMirrorSessionClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchMirrorSession(ctx, in)
	return
}

func (m loggingMirrorSessionV1MiddlewareServer) AutoAddMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoAddMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareServer) AutoDeleteMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoDeleteMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareServer) AutoGetMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoGetMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareServer) AutoListMirrorSession(ctx context.Context, in api.ListWatchOptions) (resp MirrorSessionList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoListMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListMirrorSession(ctx, in)
	return
}
func (m loggingMirrorSessionV1MiddlewareServer) AutoUpdateMirrorSession(ctx context.Context, in MirrorSession) (resp MirrorSession, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "MirrorSessionV1", "method", "AutoUpdateMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateMirrorSession(ctx, in)
	return
}

func (m loggingMirrorSessionV1MiddlewareServer) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MirrorSessionV1_AutoWatchMirrorSessionServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "MirrorSessionV1", "method", "AutoWatchMirrorSession", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchMirrorSession(in, stream)
	return
}
func (r *EndpointsMirrorSessionV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIMirrorSessionV1AutoAddMirrorSessionCreateOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/MirrorSession", "/", in.Tenant, "/MirrorSession")
}

//
func makeURIMirrorSessionV1AutoDeleteMirrorSessionDeleteOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/MirrorSession", "/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMirrorSessionV1AutoGetMirrorSessionGetOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/MirrorSession", "/", in.Tenant, "/MirrorSession/", in.Name)
}

//
func makeURIMirrorSessionV1AutoListMirrorSessionListOper(in *api.ListWatchOptions) string {
	return fmt.Sprint("/v1/MirrorSession", "/", in.Tenant, "/MirrorSession")
}

//
func makeURIMirrorSessionV1AutoUpdateMirrorSessionUpdateOper(in *MirrorSession) string {
	return fmt.Sprint("/v1/MirrorSession", "/", in.Tenant, "/MirrorSession/", in.Name)
}

// AutoAddMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoAddMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMirrorSessionV1AutoAddMirrorSessionCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMirrorSessionV1AutoAddMirrorSession(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), nil
}

// AutoUpdateMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMirrorSessionV1AutoUpdateMirrorSessionUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMirrorSessionV1AutoUpdateMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoGetMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoGetMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMirrorSessionV1AutoGetMirrorSessionGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMirrorSessionV1AutoGetMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoDeleteMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	path := makeURIMirrorSessionV1AutoDeleteMirrorSessionDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMirrorSessionV1AutoDeleteMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSession), err
}

// AutoListMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoListMirrorSession(ctx context.Context, options *api.ListWatchOptions) (*MirrorSessionList, error) {
	path := makeURIMirrorSessionV1AutoListMirrorSessionListOper(options)
	req, err := r.getHTTPRequest(ctx, options, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespMirrorSessionV1AutoListMirrorSession(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*MirrorSessionList), err
}

// AutoWatchMirrorSession CRUD method for MirrorSession
func (r *EndpointsMirrorSessionV1RestClient) AutoWatchMirrorSession(ctx context.Context, in *MirrorSession) (*MirrorSession, error) {
	return nil, errors.New("not allowed")
}

// MakeMirrorSessionV1RestClientEndpoints make REST client endpoints
func MakeMirrorSessionV1RestClientEndpoints(instance string) (EndpointsMirrorSessionV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsMirrorSessionV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
