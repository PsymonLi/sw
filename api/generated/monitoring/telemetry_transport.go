// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: telemetry.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPFlowExportPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicy encodes GRPC request
func EncodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicy decodes GRPC request
func DecodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicy encodes GRC response
func EncodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicy decodes GRPC response
func DecodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportSpec encodes GRPC request
func EncodeGrpcReqFlowExportSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportSpec)
	return req, nil
}

// DecodeGrpcReqFlowExportSpec decodes GRPC request
func DecodeGrpcReqFlowExportSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportSpec)
	return req, nil
}

// EncodeGrpcRespFlowExportSpec encodes GRC response
func EncodeGrpcRespFlowExportSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportSpec decodes GRPC response
func DecodeGrpcRespFlowExportSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportStatus encodes GRPC request
func EncodeGrpcReqFlowExportStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportStatus)
	return req, nil
}

// DecodeGrpcReqFlowExportStatus decodes GRPC request
func DecodeGrpcReqFlowExportStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportStatus)
	return req, nil
}

// EncodeGrpcRespFlowExportStatus encodes GRC response
func EncodeGrpcRespFlowExportStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportStatus decodes GRPC response
func DecodeGrpcRespFlowExportStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportTarget(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportTarget(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportTarget
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportTarget encodes GRPC request
func EncodeGrpcReqFlowExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportTarget)
	return req, nil
}

// DecodeGrpcReqFlowExportTarget decodes GRPC request
func DecodeGrpcReqFlowExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportTarget)
	return req, nil
}

// EncodeGrpcRespFlowExportTarget encodes GRC response
func EncodeGrpcRespFlowExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportTarget decodes GRPC response
func DecodeGrpcRespFlowExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogExport(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogExport(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogExport
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogExport encodes GRPC request
func EncodeGrpcReqFwlogExport(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogExport)
	return req, nil
}

// DecodeGrpcReqFwlogExport decodes GRPC request
func DecodeGrpcReqFwlogExport(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogExport)
	return req, nil
}

// EncodeGrpcRespFwlogExport encodes GRC response
func EncodeGrpcRespFwlogExport(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogExport decodes GRPC response
func DecodeGrpcRespFwlogExport(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicy encodes GRPC request
func EncodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// DecodeGrpcReqFwlogPolicy decodes GRPC request
func DecodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// EncodeGrpcRespFwlogPolicy encodes GRC response
func EncodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicy decodes GRPC response
func DecodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogSpec encodes GRPC request
func EncodeGrpcReqFwlogSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogSpec)
	return req, nil
}

// DecodeGrpcReqFwlogSpec decodes GRPC request
func DecodeGrpcReqFwlogSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogSpec)
	return req, nil
}

// EncodeGrpcRespFwlogSpec encodes GRC response
func EncodeGrpcRespFwlogSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogSpec decodes GRPC response
func DecodeGrpcRespFwlogSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogStatus encodes GRPC request
func EncodeGrpcReqFwlogStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogStatus)
	return req, nil
}

// DecodeGrpcReqFwlogStatus decodes GRPC request
func DecodeGrpcReqFwlogStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogStatus)
	return req, nil
}

// EncodeGrpcRespFwlogStatus encodes GRC response
func EncodeGrpcRespFwlogStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogStatus decodes GRPC response
func DecodeGrpcRespFwlogStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicy encodes GRPC request
func EncodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// DecodeGrpcReqStatsPolicy decodes GRPC request
func DecodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// EncodeGrpcRespStatsPolicy encodes GRC response
func EncodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicy decodes GRPC response
func DecodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsSpec encodes GRPC request
func EncodeGrpcReqStatsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsSpec)
	return req, nil
}

// DecodeGrpcReqStatsSpec decodes GRPC request
func DecodeGrpcReqStatsSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsSpec)
	return req, nil
}

// EncodeGrpcRespStatsSpec encodes GRC response
func EncodeGrpcRespStatsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsSpec decodes GRPC response
func DecodeGrpcRespStatsSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsStatus encodes GRPC request
func EncodeGrpcReqStatsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsStatus)
	return req, nil
}

// DecodeGrpcReqStatsStatus decodes GRPC request
func DecodeGrpcReqStatsStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsStatus)
	return req, nil
}

// EncodeGrpcRespStatsStatus encodes GRC response
func EncodeGrpcRespStatsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsStatus decodes GRPC response
func DecodeGrpcRespStatsStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
