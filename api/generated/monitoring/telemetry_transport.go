// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: telemetry.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPFlowExportPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicy encodes GRPC request
func EncodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicy decodes GRPC request
func DecodeGrpcReqFlowExportPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicy)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicy encodes GRC response
func EncodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicy decodes GRPC response
func DecodeGrpcRespFlowExportPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicySpec encodes GRPC request
func EncodeGrpcReqFlowExportPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicySpec)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicySpec decodes GRPC request
func DecodeGrpcReqFlowExportPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicySpec)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicySpec encodes GRC response
func EncodeGrpcRespFlowExportPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicySpec decodes GRPC response
func DecodeGrpcRespFlowExportPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicyStatus encodes GRPC request
func EncodeGrpcReqFlowExportPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyStatus)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicyStatus decodes GRPC request
func DecodeGrpcReqFlowExportPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyStatus)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicyStatus encodes GRC response
func EncodeGrpcRespFlowExportPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicyStatus decodes GRPC response
func DecodeGrpcRespFlowExportPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicy encodes GRPC request
func EncodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// DecodeGrpcReqFwlogPolicy decodes GRPC request
func DecodeGrpcReqFwlogPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicy)
	return req, nil
}

// EncodeGrpcRespFwlogPolicy encodes GRC response
func EncodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicy decodes GRPC response
func DecodeGrpcRespFwlogPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicySpec encodes GRPC request
func EncodeGrpcReqFwlogPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicySpec)
	return req, nil
}

// DecodeGrpcReqFwlogPolicySpec decodes GRPC request
func DecodeGrpcReqFwlogPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicySpec)
	return req, nil
}

// EncodeGrpcRespFwlogPolicySpec encodes GRC response
func EncodeGrpcRespFwlogPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicySpec decodes GRPC response
func DecodeGrpcRespFwlogPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicyStatus encodes GRPC request
func EncodeGrpcReqFwlogPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyStatus)
	return req, nil
}

// DecodeGrpcReqFwlogPolicyStatus decodes GRPC request
func DecodeGrpcReqFwlogPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyStatus)
	return req, nil
}

// EncodeGrpcRespFwlogPolicyStatus encodes GRC response
func EncodeGrpcRespFwlogPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicyStatus decodes GRPC response
func DecodeGrpcRespFwlogPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicy encodes GRPC request
func EncodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// DecodeGrpcReqStatsPolicy decodes GRPC request
func DecodeGrpcReqStatsPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicy)
	return req, nil
}

// EncodeGrpcRespStatsPolicy encodes GRC response
func EncodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicy decodes GRPC response
func DecodeGrpcRespStatsPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicySpec encodes GRPC request
func EncodeGrpcReqStatsPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicySpec)
	return req, nil
}

// DecodeGrpcReqStatsPolicySpec decodes GRPC request
func DecodeGrpcReqStatsPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicySpec)
	return req, nil
}

// EncodeGrpcRespStatsPolicySpec encodes GRC response
func EncodeGrpcRespStatsPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicySpec decodes GRPC response
func DecodeGrpcRespStatsPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicyStatus encodes GRPC request
func EncodeGrpcReqStatsPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyStatus)
	return req, nil
}

// DecodeGrpcReqStatsPolicyStatus decodes GRPC request
func DecodeGrpcReqStatsPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyStatus)
	return req, nil
}

// EncodeGrpcRespStatsPolicyStatus encodes GRC response
func EncodeGrpcRespStatsPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicyStatus decodes GRPC response
func DecodeGrpcRespStatsPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
