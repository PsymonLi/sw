// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: eventpolicy.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPEventPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventPolicy encodes GRPC request
func EncodeGrpcReqEventPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicy)
	return req, nil
}

// DecodeGrpcReqEventPolicy decodes GRPC request
func DecodeGrpcReqEventPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicy)
	return req, nil
}

// EncodeGrpcRespEventPolicy encodes GRC response
func EncodeGrpcRespEventPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventPolicy decodes GRPC response
func DecodeGrpcRespEventPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventPolicySpec encodes GRPC request
func EncodeGrpcReqEventPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicySpec)
	return req, nil
}

// DecodeGrpcReqEventPolicySpec decodes GRPC request
func DecodeGrpcReqEventPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicySpec)
	return req, nil
}

// EncodeGrpcRespEventPolicySpec encodes GRC response
func EncodeGrpcRespEventPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventPolicySpec decodes GRPC response
func DecodeGrpcRespEventPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventPolicyStatus encodes GRPC request
func EncodeGrpcReqEventPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicyStatus)
	return req, nil
}

// DecodeGrpcReqEventPolicyStatus decodes GRPC request
func DecodeGrpcReqEventPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicyStatus)
	return req, nil
}

// EncodeGrpcRespEventPolicyStatus encodes GRC response
func EncodeGrpcRespEventPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventPolicyStatus decodes GRPC response
func DecodeGrpcRespEventPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
