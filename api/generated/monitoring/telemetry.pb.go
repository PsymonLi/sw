// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type FwlogFilter int32

const (
	// ui-hint: No Logs
	FwlogFilter_FIREWALL_ACTION_NONE FwlogFilter = 0
	// ui-hint: Allow Logs
	FwlogFilter_FIREWALL_ACTION_ALLOW FwlogFilter = 1
	// ui-hint: Deny Logs
	FwlogFilter_FIREWALL_ACTION_DENY FwlogFilter = 2
	// ui-hint: Reject Logs
	FwlogFilter_FIREWALL_ACTION_REJECT FwlogFilter = 3
	// ui-hint: All Logs
	FwlogFilter_FIREWALL_ACTION_ALL FwlogFilter = 4
)

var FwlogFilter_name = map[int32]string{
	0: "FIREWALL_ACTION_NONE",
	1: "FIREWALL_ACTION_ALLOW",
	2: "FIREWALL_ACTION_DENY",
	3: "FIREWALL_ACTION_REJECT",
	4: "FIREWALL_ACTION_ALL",
}
var FwlogFilter_value = map[string]int32{
	"FIREWALL_ACTION_NONE":   0,
	"FIREWALL_ACTION_ALLOW":  1,
	"FIREWALL_ACTION_DENY":   2,
	"FIREWALL_ACTION_REJECT": 3,
	"FIREWALL_ACTION_ALL":    4,
}

func (x FwlogFilter) String() string {
	return proto.EnumName(FwlogFilter_name, int32(x))
}
func (FwlogFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

//
type FlowExportPolicySpec_Formats int32

const (
	//
	FlowExportPolicySpec_Ipfix FlowExportPolicySpec_Formats = 0
)

var FlowExportPolicySpec_Formats_name = map[int32]string{
	0: "Ipfix",
}
var FlowExportPolicySpec_Formats_value = map[string]int32{
	"Ipfix": 0,
}

func (x FlowExportPolicySpec_Formats) String() string {
	return proto.EnumName(FlowExportPolicySpec_Formats_name, int32(x))
}
func (FlowExportPolicySpec_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{1, 0}
}

//
type FlowExportPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FlowExportPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the export policy.
	Status FlowExportPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FlowExportPolicy) Reset()                    { *m = FlowExportPolicy{} }
func (m *FlowExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicy) ProtoMessage()               {}
func (*FlowExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

func (m *FlowExportPolicy) GetSpec() FlowExportPolicySpec {
	if m != nil {
		return m.Spec
	}
	return FlowExportPolicySpec{}
}

func (m *FlowExportPolicy) GetStatus() FlowExportPolicyStatus {
	if m != nil {
		return m.Status
	}
	return FlowExportPolicyStatus{}
}

//
type FlowExportPolicySpec struct {
	// Interval defines how often to push the records to an external collector
	// The value is specified as a string format, '10s', '20m'
	Interval string `protobuf:"bytes,1,opt,name=Interval,json=interval,omitempty,proto3" json:"interval,omitempty"`
	//
	Format string `protobuf:"bytes,2,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	//
	MatchRules []MatchRule `protobuf:"bytes,3,rep,name=MatchRules,json=match-rules,omitempty" json:"match-rules,omitempty"`
	// Export contains export parameters.
	Exports []ExportConfig `protobuf:"bytes,4,rep,name=Exports,json=exports,omitempty" json:"exports,omitempty"`
}

func (m *FlowExportPolicySpec) Reset()                    { *m = FlowExportPolicySpec{} }
func (m *FlowExportPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicySpec) ProtoMessage()               {}
func (*FlowExportPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{1} }

func (m *FlowExportPolicySpec) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *FlowExportPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FlowExportPolicySpec) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *FlowExportPolicySpec) GetExports() []ExportConfig {
	if m != nil {
		return m.Exports
	}
	return nil
}

// ========================================================================================
//  flow export policy
// ========================================================================================
type FlowExportPolicyStatus struct {
}

func (m *FlowExportPolicyStatus) Reset()                    { *m = FlowExportPolicyStatus{} }
func (m *FlowExportPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyStatus) ProtoMessage()               {}
func (*FlowExportPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{2} }

//
type FwlogPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FwlogPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the policy.
	Status FwlogPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{3} }

func (m *FwlogPolicy) GetSpec() FwlogPolicySpec {
	if m != nil {
		return m.Spec
	}
	return FwlogPolicySpec{}
}

func (m *FwlogPolicy) GetStatus() FwlogPolicyStatus {
	if m != nil {
		return m.Status
	}
	return FwlogPolicyStatus{}
}

// Venice collects fwlog irrespective of the export config
type FwlogPolicySpec struct {
	// Target contains ip/port/protocol
	Targets []ExportConfig `protobuf:"bytes,1,rep,name=Targets,json=targets,omitempty" json:"targets,omitempty"`
	// fwlog format, SYSLOG_BSD default
	Format string `protobuf:"bytes,2,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	// filter firewall logs, FWLOG_ALL default
	Filter []string `protobuf:"bytes,3,rep,name=Filter,json=filter,omitempty" json:"filter,omitempty"`
	// configuration to use for syslog format
	// default facility is set to "local4", can be overridden with FacilityOverride
	// fwlog severity is set to "Informational"
	Config *SyslogExportConfig `protobuf:"bytes,4,opt,name=Config,json=config,omitempty" json:"config,omitempty"`
}

func (m *FwlogPolicySpec) Reset()                    { *m = FwlogPolicySpec{} }
func (m *FwlogPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicySpec) ProtoMessage()               {}
func (*FwlogPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *FwlogPolicySpec) GetTargets() []ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *FwlogPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FwlogPolicySpec) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogPolicySpec) GetConfig() *SyslogExportConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

//
type FwlogPolicyStatus struct {
}

func (m *FwlogPolicyStatus) Reset()                    { *m = FwlogPolicyStatus{} }
func (m *FwlogPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyStatus) ProtoMessage()               {}
func (*FwlogPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{5} }

//
type StatsPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec StatsPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the policy.
	Status StatsPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *StatsPolicy) Reset()                    { *m = StatsPolicy{} }
func (m *StatsPolicy) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicy) ProtoMessage()               {}
func (*StatsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{6} }

func (m *StatsPolicy) GetSpec() StatsPolicySpec {
	if m != nil {
		return m.Spec
	}
	return StatsPolicySpec{}
}

func (m *StatsPolicy) GetStatus() StatsPolicyStatus {
	if m != nil {
		return m.Status
	}
	return StatsPolicyStatus{}
}

// compaction method will be selected by Venice based on the mesaurement/table
// collection interval will be selected by Venice based on workloads
type StatsPolicySpec struct {
	// RetentionTime defines for how long to keep the stats data before it is deleted
	// The value is specified as a string format to be hours, days, or months etc.
	// e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
	// Default is 48h.
	RetentionTime string `protobuf:"bytes,1,opt,name=RetentionTime,json=retention-time,omitempty,proto3" json:"retention-time,omitempty"`
	// DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted
	// The value is specified as a string format to be hours, days, or months etc.
	// e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
	// Default is 168h
	DownSampleRetentionTime string `protobuf:"bytes,2,opt,name=DownSampleRetentionTime,json=downsample-retention-time,omitempty,proto3" json:"downsample-retention-time,omitempty"`
}

func (m *StatsPolicySpec) Reset()                    { *m = StatsPolicySpec{} }
func (m *StatsPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicySpec) ProtoMessage()               {}
func (*StatsPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{7} }

func (m *StatsPolicySpec) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *StatsPolicySpec) GetDownSampleRetentionTime() string {
	if m != nil {
		return m.DownSampleRetentionTime
	}
	return ""
}

// telemetry policies:
// -------------------------------------------------------------------------------
// policy name         |  intended for        |     description                 |
// -------------------------------------------------------------------------------
// stats               |  sys admins          |    for all stats other than     |
//                     |                      |    fwlog/netflow.               |
//                     |                      |    includes retention,compaction|
// -------------------------------------------------------------------------------
// fwlog               |  security admins     |    firewall log policy          |
//                     |                      |    includes retention,          |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//                     |                      |                                 |
// flowexport          |  network admins      |    netflow export policy        |
//                     |                      |    includes interval,           |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//
// =========================================================================================
//  stats policy
// =========================================================================================
type StatsPolicyStatus struct {
}

func (m *StatsPolicyStatus) Reset()                    { *m = StatsPolicyStatus{} }
func (m *StatsPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicyStatus) ProtoMessage()               {}
func (*StatsPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{8} }

func init() {
	proto.RegisterType((*FlowExportPolicy)(nil), "monitoring.FlowExportPolicy")
	proto.RegisterType((*FlowExportPolicySpec)(nil), "monitoring.FlowExportPolicySpec")
	proto.RegisterType((*FlowExportPolicyStatus)(nil), "monitoring.FlowExportPolicyStatus")
	proto.RegisterType((*FwlogPolicy)(nil), "monitoring.FwlogPolicy")
	proto.RegisterType((*FwlogPolicySpec)(nil), "monitoring.FwlogPolicySpec")
	proto.RegisterType((*FwlogPolicyStatus)(nil), "monitoring.FwlogPolicyStatus")
	proto.RegisterType((*StatsPolicy)(nil), "monitoring.StatsPolicy")
	proto.RegisterType((*StatsPolicySpec)(nil), "monitoring.StatsPolicySpec")
	proto.RegisterType((*StatsPolicyStatus)(nil), "monitoring.StatsPolicyStatus")
	proto.RegisterEnum("monitoring.FwlogFilter", FwlogFilter_name, FwlogFilter_value)
	proto.RegisterEnum("monitoring.FlowExportPolicySpec_Formats", FlowExportPolicySpec_Formats_name, FlowExportPolicySpec_Formats_value)
}
func (m *FlowExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *FlowExportPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *FwlogPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Config != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Config.Size()))
		n9, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *FwlogPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatsPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n11, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n12, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n13, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *StatsPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RetentionTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionTime)))
		i += copy(dAtA[i:], m.RetentionTime)
	}
	if len(m.DownSampleRetentionTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.DownSampleRetentionTime)))
		i += copy(dAtA[i:], m.DownSampleRetentionTime)
	}
	return i, nil
}

func (m *StatsPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FlowExportPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FwlogPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *FwlogPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatsPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *StatsPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.DownSampleRetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *StatsPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, ExportConfig{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &SyslogExportConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSampleRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownSampleRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0x67, 0x6d, 0x6a, 0xca, 0x38, 0x94, 0xcd, 0x60, 0xc8, 0xae, 0xdb, 0xd8, 0xc8, 0x51, 0x24,
	0x52, 0x81, 0x17, 0x28, 0x4a, 0xab, 0x4a, 0x95, 0xca, 0x82, 0x2d, 0x51, 0x01, 0x4e, 0x6d, 0x2b,
	0x28, 0x97, 0xa2, 0x65, 0x19, 0x2f, 0x53, 0xed, 0xce, 0xac, 0x76, 0xc7, 0x71, 0xac, 0xaa, 0x87,
	0x4a, 0x8d, 0xef, 0xfd, 0x06, 0x3d, 0xfb, 0xd8, 0x4f, 0x91, 0x63, 0x94, 0x6b, 0x25, 0xab, 0xe2,
	0xc8, 0xa5, 0x5f, 0xa1, 0x9a, 0xd9, 0x35, 0x8c, 0xd7, 0x4b, 0x45, 0xa4, 0x1c, 0x72, 0x9b, 0xf7,
	0xe6, 0xbd, 0xdf, 0xfb, 0xfb, 0xdb, 0x59, 0xb0, 0xc8, 0x90, 0x8b, 0x3c, 0xc4, 0x82, 0x7e, 0xd5,
	0x0f, 0x28, 0xa3, 0x10, 0x78, 0x94, 0x60, 0x46, 0x03, 0x4c, 0x9c, 0xe2, 0x17, 0x0e, 0xa5, 0x8e,
	0x8b, 0x0c, 0xcb, 0xc7, 0x86, 0x45, 0x08, 0x65, 0x16, 0xc3, 0x94, 0x84, 0x91, 0x65, 0xb1, 0xe6,
	0x60, 0x76, 0xd1, 0x3d, 0xab, 0xda, 0xd4, 0x33, 0x7c, 0x44, 0x42, 0x8b, 0x9c, 0x53, 0x23, 0xec,
	0x19, 0x2f, 0x11, 0xc1, 0x36, 0x32, 0xba, 0x0c, 0xbb, 0x21, 0x77, 0x75, 0x10, 0x91, 0xbd, 0x0d,
	0x4c, 0x6c, 0xb7, 0x7b, 0x8e, 0xc6, 0x30, 0x1b, 0x12, 0x8c, 0x43, 0x1d, 0x6a, 0x08, 0xf5, 0x59,
	0xb7, 0x23, 0x24, 0x21, 0x88, 0x53, 0x6c, 0xfe, 0xf8, 0x96, 0xa8, 0x3c, 0x47, 0x0f, 0x31, 0x2b,
	0x36, 0xbb, 0x87, 0x5e, 0xf9, 0x34, 0x60, 0x63, 0xc9, 0xc3, 0x41, 0x40, 0x83, 0x48, 0xaa, 0xfc,
	0x9b, 0x01, 0x6a, 0xdd, 0xa5, 0xbd, 0x9a, 0x30, 0x79, 0x46, 0x5d, 0x6c, 0xf7, 0xe1, 0x53, 0xa0,
	0xb4, 0x35, 0x65, 0x55, 0x59, 0xcb, 0x6f, 0x2f, 0x54, 0x2d, 0x1f, 0x57, 0xdb, 0x7d, 0x1f, 0x1d,
	0x21, 0x66, 0x99, 0x4b, 0x6f, 0x46, 0xe5, 0x99, 0xb7, 0xa3, 0xb2, 0x72, 0x35, 0x2a, 0xcf, 0xad,
	0x63, 0xe2, 0x62, 0x82, 0x9a, 0xe3, 0x03, 0xac, 0x03, 0xa5, 0xa1, 0x65, 0x84, 0xdf, 0xa2, 0xf0,
	0x6b, 0x9c, 0xfd, 0x8c, 0x6c, 0x26, 0x3c, 0x8b, 0x92, 0xe7, 0x67, 0x3c, 0xb9, 0x75, 0xea, 0x61,
	0x86, 0x3c, 0x9f, 0xf5, 0x9b, 0x09, 0x19, 0x3e, 0x07, 0xb3, 0x2d, 0x1f, 0xd9, 0x5a, 0x56, 0x40,
	0xad, 0x56, 0x6f, 0xc6, 0x50, 0x4d, 0xe6, 0xca, 0xed, 0xcc, 0x15, 0x8e, 0xcd, 0x71, 0x43, 0x1f,
	0xd9, 0x32, 0xee, 0xa4, 0x0c, 0x7f, 0x02, 0xb9, 0x16, 0xb3, 0x58, 0x37, 0xd4, 0x66, 0x05, 0x72,
	0xe5, 0x7f, 0x91, 0x85, 0xa5, 0xa9, 0xc5, 0xd8, 0x6a, 0x28, 0x64, 0x09, 0x7d, 0x4a, 0xf3, 0xed,
	0xa3, 0x77, 0xaf, 0xf5, 0x32, 0xc8, 0x1b, 0xbf, 0x34, 0xaa, 0x6d, 0x44, 0x2c, 0xc2, 0x7e, 0x85,
	0x6a, 0x27, 0x01, 0x5b, 0xf9, 0x33, 0x0b, 0x0a, 0x69, 0x55, 0xc0, 0x13, 0xf0, 0xe9, 0x01, 0x61,
	0x28, 0x78, 0x69, 0xb9, 0xa2, 0xf9, 0xf3, 0xe6, 0xd6, 0x70, 0xa0, 0xab, 0xfb, 0xdd, 0x40, 0x2c,
	0xcb, 0xda, 0x56, 0xb8, 0xbe, 0xbd, 0x73, 0xf1, 0xe4, 0xaf, 0x81, 0x9e, 0xdd, 0xda, 0x0c, 0xaf,
	0x46, 0x65, 0x88, 0x63, 0x73, 0x29, 0xa9, 0x14, 0x1d, 0x3c, 0x05, 0xb9, 0x3a, 0x0d, 0x3c, 0x8b,
	0x89, 0xd9, 0xcc, 0x9b, 0xdf, 0x0d, 0x07, 0xfa, 0xe3, 0x16, 0x0b, 0x6a, 0xa4, 0xeb, 0xad, 0xa5,
	0xa5, 0x52, 0x8d, 0xcc, 0xc3, 0x27, 0xbc, 0xee, 0x8e, 0x38, 0xcb, 0x75, 0x27, 0x35, 0xf0, 0x14,
	0x80, 0x23, 0x8b, 0xd9, 0x17, 0xcd, 0xae, 0x8b, 0x42, 0x2d, 0xbb, 0x9a, 0x5d, 0xcb, 0x6f, 0x2f,
	0xcb, 0xbd, 0xbd, 0xbe, 0x35, 0x1f, 0xc6, 0xed, 0x5c, 0xf6, 0xb8, 0x6a, 0x23, 0xe0, 0x1e, 0x12,
	0x76, 0xba, 0x1a, 0x9e, 0x80, 0xb9, 0x28, 0x47, 0x3e, 0x39, 0x8e, 0xae, 0xc9, 0xe8, 0xd1, 0xd5,
	0x1e, 0x25, 0x1d, 0xec, 0x98, 0x7a, 0x1c, 0xe0, 0x7e, 0xb4, 0xf4, 0x32, 0xf8, 0xb4, 0xaa, 0x52,
	0x00, 0x73, 0x71, 0xad, 0x70, 0x1e, 0x7c, 0x72, 0xe0, 0x77, 0xf0, 0x2b, 0x75, 0xa6, 0xa2, 0x81,
	0x95, 0xf4, 0x6d, 0xa8, 0xfc, 0x9d, 0x01, 0xf9, 0x7a, 0xcf, 0xa5, 0xce, 0x47, 0xc2, 0x94, 0x1f,
	0x27, 0x98, 0xf2, 0xf9, 0xc4, 0x3e, 0xdf, 0xa4, 0xf9, 0x5e, 0x24, 0x79, 0x91, 0x20, 0xc9, 0xc3,
	0xdb, 0x40, 0xdf, 0x9f, 0x1f, 0xa5, 0x77, 0xaf, 0xf5, 0xe2, 0x24, 0x3f, 0xf2, 0x9d, 0x1b, 0xc4,
	0xca, 0xef, 0x59, 0xb0, 0x98, 0x48, 0x9b, 0x8f, 0xbe, 0x6d, 0x05, 0x0e, 0x62, 0xa1, 0xa6, 0xdc,
	0x75, 0xf4, 0x2c, 0x72, 0x90, 0x47, 0x3f, 0xa5, 0xe2, 0x75, 0x4e, 0xb0, 0xe2, 0xeb, 0xe1, 0x40,
	0x2f, 0x8f, 0x59, 0x71, 0x74, 0x1d, 0x22, 0x8a, 0x10, 0x59, 0xde, 0x95, 0x0f, 0x08, 0xe4, 0xea,
	0xd8, 0x65, 0x28, 0x10, 0x5c, 0x98, 0x37, 0xf7, 0x86, 0x03, 0xbd, 0x70, 0x4d, 0x38, 0x5e, 0x60,
	0x74, 0xcd, 0xb9, 0xbc, 0x54, 0x3f, 0x68, 0xd6, 0x4e, 0x76, 0x0f, 0x0f, 0x4f, 0x77, 0xf7, 0xda,
	0x07, 0x8d, 0xe3, 0xd3, 0xdd, 0xc3, 0x43, 0x11, 0x46, 0x58, 0x4c, 0x84, 0x49, 0x68, 0xe0, 0x73,
	0x90, 0x8b, 0x2a, 0x8f, 0x27, 0x55, 0x92, 0x3b, 0xd3, 0xea, 0x87, 0x2e, 0x75, 0x26, 0xfa, 0x53,
	0xe0, 0xb8, 0xb6, 0x38, 0xcb, 0xb8, 0x49, 0x4d, 0x65, 0x09, 0xdc, 0x9f, 0x9a, 0xb3, 0xd8, 0x7c,
	0x7e, 0x0c, 0x3f, 0xfe, 0xcd, 0x97, 0xd2, 0xfc, 0x70, 0x9b, 0x2f, 0x83, 0x7e, 0x98, 0xcd, 0x0f,
	0x6f, 0x10, 0x2b, 0xbf, 0x65, 0xc0, 0x62, 0x22, 0x6d, 0x88, 0xc0, 0x42, 0x13, 0x31, 0x44, 0xf8,
	0xc7, 0xbf, 0x8d, 0x3d, 0x14, 0x3f, 0x0a, 0x3b, 0xc3, 0x81, 0xbe, 0x70, 0xfd, 0x28, 0x6c, 0xae,
	0x6f, 0x8a, 0x17, 0x61, 0xe7, 0x9b, 0x8b, 0xab, 0x51, 0x59, 0x0b, 0xc6, 0x0e, 0x1b, 0x0c, 0x7b,
	0x48, 0x4a, 0xe9, 0xd6, 0x1b, 0x38, 0x50, 0xc0, 0x83, 0x7d, 0xda, 0x23, 0x2d, 0xcb, 0xf3, 0x5d,
	0x34, 0x19, 0x31, 0x62, 0xc6, 0xf7, 0x69, 0x11, 0x67, 0xb7, 0x9e, 0x8a, 0x90, 0x8f, 0xce, 0x69,
	0x8f, 0x84, 0xc2, 0x77, 0xe3, 0xd6, 0xe8, 0x77, 0x31, 0xe2, 0x6b, 0x37, 0xd5, 0xe4, 0x2f, 0xff,
	0x50, 0xe2, 0x0f, 0x6e, 0xc4, 0x18, 0xa8, 0x81, 0x42, 0x92, 0x30, 0xc7, 0x8d, 0xe3, 0x9a, 0x3a,
	0x03, 0x75, 0xb0, 0x9c, 0x42, 0xa5, 0xc6, 0x89, 0xaa, 0xa4, 0x39, 0xed, 0xd7, 0x8e, 0x5f, 0xa8,
	0x19, 0x58, 0x04, 0x2b, 0xc9, 0x9b, 0x66, 0xed, 0x87, 0xda, 0x5e, 0x5b, 0xcd, 0xc2, 0x07, 0x20,
	0x8d, 0x9b, 0xea, 0xac, 0x79, 0xef, 0xcd, 0x65, 0x49, 0x79, 0x7b, 0x59, 0x52, 0xfe, 0xb9, 0x2c,
	0x29, 0xcf, 0x94, 0xb3, 0x9c, 0xf8, 0x95, 0xfa, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1,
	0xd5, 0x7e, 0xc9, 0x40, 0x0a, 0x00, 0x00,
}
