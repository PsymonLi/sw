// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FwlogFilter int32

const (
	FwlogFilter_FWLOG_ALL    FwlogFilter = 0
	FwlogFilter_FWLOG_ACCEPT FwlogFilter = 1
	FwlogFilter_FWLOG_REJECT FwlogFilter = 2
	FwlogFilter_FWLOG_DENY   FwlogFilter = 3
)

var FwlogFilter_name = map[int32]string{
	0: "FWLOG_ALL",
	1: "FWLOG_ACCEPT",
	2: "FWLOG_REJECT",
	3: "FWLOG_DENY",
}
var FwlogFilter_value = map[string]int32{
	"FWLOG_ALL":    0,
	"FWLOG_ACCEPT": 1,
	"FWLOG_REJECT": 2,
	"FWLOG_DENY":   3,
}

func (x FwlogFilter) String() string {
	return proto.EnumName(FwlogFilter_name, int32(x))
}
func (FwlogFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

type FlowExportTarget_Formats int32

const (
	FlowExportTarget_Ipfix FlowExportTarget_Formats = 0
)

var FlowExportTarget_Formats_name = map[int32]string{
	0: "Ipfix",
}
var FlowExportTarget_Formats_value = map[string]int32{
	"Ipfix": 0,
}

func (x FlowExportTarget_Formats) String() string {
	return proto.EnumName(FlowExportTarget_Formats_name, int32(x))
}
func (FlowExportTarget_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{3, 0}
}

// telemetry policies:
// -------------------------------------------------------------------------------
// policy name         |  intended for        |     description                 |
// -------------------------------------------------------------------------------
// stats               |  sys admins          |    for all stats other than     |
//                     |                      |    fwlog/netflow.               |
//                     |                      |    includes retention,compaction|
// -------------------------------------------------------------------------------
// fwlog               |  security admins     |    firewall log policy          |
//                     |                      |    includes retention,          |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//                     |                      |                                 |
// flowexport          |  network admins      |    netflow export policy        |
//                     |                      |    includes interval,           |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//
// =========================================================================================
//  stats policy
// =========================================================================================
type FlowExportPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           FlowExportSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         FlowExportStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *FlowExportPolicy) Reset()                    { *m = FlowExportPolicy{} }
func (m *FlowExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicy) ProtoMessage()               {}
func (*FlowExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

func (m *FlowExportPolicy) GetSpec() FlowExportSpec {
	if m != nil {
		return m.Spec
	}
	return FlowExportSpec{}
}

func (m *FlowExportPolicy) GetStatus() FlowExportStatus {
	if m != nil {
		return m.Status
	}
	return FlowExportStatus{}
}

// compaction method will be selected by Venice based on the mesaurement/table
// collection interval will be selected by Venice based on workloads
type FlowExportSpec struct {
	// Compaction Interval is the down sampling interval in minutes, hours or days
	// this would be mapped to GROUP BY TIME() in influxdb CQ
	// example: SELECT MAX(*) INTO downsampled_xxx FROM xxx GROUP BY time(CompactionInterval),host
	Targets []FlowExportTarget `protobuf:"bytes,1,rep,name=Targets" json:"targets,omitempty"`
}

func (m *FlowExportSpec) Reset()                    { *m = FlowExportSpec{} }
func (m *FlowExportSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowExportSpec) ProtoMessage()               {}
func (*FlowExportSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{1} }

func (m *FlowExportSpec) GetTargets() []FlowExportTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

type FlowExportStatus struct {
}

func (m *FlowExportStatus) Reset()                    { *m = FlowExportStatus{} }
func (m *FlowExportStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExportStatus) ProtoMessage()               {}
func (*FlowExportStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{2} }

type FlowExportTarget struct {
	Interval string              `protobuf:"bytes,1,opt,name=Interval,proto3" json:"interval,omitempty"`
	Format   string              `protobuf:"bytes,2,opt,name=Format,proto3" json:"format,omitempty"`
	Exports  []api1.ExportConfig `protobuf:"bytes,3,rep,name=Exports" json:"exports,omitempty"`
}

func (m *FlowExportTarget) Reset()                    { *m = FlowExportTarget{} }
func (m *FlowExportTarget) String() string            { return proto.CompactTextString(m) }
func (*FlowExportTarget) ProtoMessage()               {}
func (*FlowExportTarget) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{3} }

func (m *FlowExportTarget) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *FlowExportTarget) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FlowExportTarget) GetExports() []api1.ExportConfig {
	if m != nil {
		return m.Exports
	}
	return nil
}

// firewall log export config
type FwlogExport struct {
	// Target contains ip/port/protocol
	Targets []api1.ExportConfig `protobuf:"bytes,1,rep,name=Targets" json:"targets,omitempty"`
	// fwlog format, SYSLOG_BSD default
	Format string `protobuf:"bytes,2,opt,name=Format,proto3" json:"format,omitempty"`
	// filter firewall logs, FWLOG_ALL default
	Filter []string `protobuf:"bytes,3,rep,name=Filter" json:"export-filter,omitempty"`
	// configuration to use for syslog format
	// default facility is set to "local4", can be overridden with FacilityOverride
	// fwlog serverity is set to "Informational"
	SyslogConfig *api1.SyslogExportConfig `protobuf:"bytes,4,opt,name=SyslogConfig" json:"syslog-config,omitempty"`
}

func (m *FwlogExport) Reset()                    { *m = FwlogExport{} }
func (m *FwlogExport) String() string            { return proto.CompactTextString(m) }
func (*FwlogExport) ProtoMessage()               {}
func (*FwlogExport) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *FwlogExport) GetTargets() []api1.ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *FwlogExport) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FwlogExport) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogExport) GetSyslogConfig() *api1.SyslogExportConfig {
	if m != nil {
		return m.SyslogConfig
	}
	return nil
}

// Venice collects fwlog irrespective of the export config
type FwlogPolicy struct {
	// RetentionTime defines for how long to keep the fwlog before it is deleted
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// filter firewall logs for venice, FWLOG_ALL default
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Export contains the export config
	Spec   FwlogSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status FwlogStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{5} }

func (m *FwlogPolicy) GetSpec() FwlogSpec {
	if m != nil {
		return m.Spec
	}
	return FwlogSpec{}
}

func (m *FwlogPolicy) GetStatus() FwlogStatus {
	if m != nil {
		return m.Status
	}
	return FwlogStatus{}
}

type FwlogSpec struct {
	RetentionTime string         `protobuf:"bytes,1,opt,name=RetentionTime,proto3" json:"retention-time,omitempty"`
	Filter        []string       `protobuf:"bytes,2,rep,name=Filter" json:"filter,omitempty"`
	Exports       []*FwlogExport `protobuf:"bytes,3,rep,name=Exports" json:"exports,omitempty"`
}

func (m *FwlogSpec) Reset()                    { *m = FwlogSpec{} }
func (m *FwlogSpec) String() string            { return proto.CompactTextString(m) }
func (*FwlogSpec) ProtoMessage()               {}
func (*FwlogSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{6} }

func (m *FwlogSpec) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *FwlogSpec) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogSpec) GetExports() []*FwlogExport {
	if m != nil {
		return m.Exports
	}
	return nil
}

// ========================================================================================
//  flow export policy
// ========================================================================================
type FwlogStatus struct {
}

func (m *FwlogStatus) Reset()                    { *m = FwlogStatus{} }
func (m *FwlogStatus) String() string            { return proto.CompactTextString(m) }
func (*FwlogStatus) ProtoMessage()               {}
func (*FwlogStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{7} }

type StatsPolicy struct {
	// Interval defines how often to push the records to an external or internal collector
	// The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Export contains export parameters.
	Spec   StatsSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status StatsStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *StatsPolicy) Reset()                    { *m = StatsPolicy{} }
func (m *StatsPolicy) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicy) ProtoMessage()               {}
func (*StatsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{8} }

func (m *StatsPolicy) GetSpec() StatsSpec {
	if m != nil {
		return m.Spec
	}
	return StatsSpec{}
}

func (m *StatsPolicy) GetStatus() StatsStatus {
	if m != nil {
		return m.Status
	}
	return StatsStatus{}
}

type StatsSpec struct {
	CompactionInterval      string `protobuf:"bytes,1,opt,name=CompactionInterval,proto3" json:"compaction-interval ,omitempty"`
	RetentionTime           string `protobuf:"bytes,2,opt,name=RetentionTime,proto3" json:"retention-time,omitempty"`
	DownSampleRetentionTime string `protobuf:"bytes,3,opt,name=DownSampleRetentionTime,proto3" json:"downsample-retention-time,omitempty"`
}

func (m *StatsSpec) Reset()                    { *m = StatsSpec{} }
func (m *StatsSpec) String() string            { return proto.CompactTextString(m) }
func (*StatsSpec) ProtoMessage()               {}
func (*StatsSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{9} }

func (m *StatsSpec) GetCompactionInterval() string {
	if m != nil {
		return m.CompactionInterval
	}
	return ""
}

func (m *StatsSpec) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *StatsSpec) GetDownSampleRetentionTime() string {
	if m != nil {
		return m.DownSampleRetentionTime
	}
	return ""
}

type StatsStatus struct {
}

func (m *StatsStatus) Reset()                    { *m = StatsStatus{} }
func (m *StatsStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsStatus) ProtoMessage()               {}
func (*StatsStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{10} }

func init() {
	proto.RegisterType((*FlowExportPolicy)(nil), "monitoring.FlowExportPolicy")
	proto.RegisterType((*FlowExportSpec)(nil), "monitoring.FlowExportSpec")
	proto.RegisterType((*FlowExportStatus)(nil), "monitoring.FlowExportStatus")
	proto.RegisterType((*FlowExportTarget)(nil), "monitoring.FlowExportTarget")
	proto.RegisterType((*FwlogExport)(nil), "monitoring.FwlogExport")
	proto.RegisterType((*FwlogPolicy)(nil), "monitoring.FwlogPolicy")
	proto.RegisterType((*FwlogSpec)(nil), "monitoring.FwlogSpec")
	proto.RegisterType((*FwlogStatus)(nil), "monitoring.FwlogStatus")
	proto.RegisterType((*StatsPolicy)(nil), "monitoring.StatsPolicy")
	proto.RegisterType((*StatsSpec)(nil), "monitoring.StatsSpec")
	proto.RegisterType((*StatsStatus)(nil), "monitoring.StatsStatus")
	proto.RegisterEnum("monitoring.FwlogFilter", FwlogFilter_name, FwlogFilter_value)
	proto.RegisterEnum("monitoring.FlowExportTarget_Formats", FlowExportTarget_Formats_name, FlowExportTarget_Formats_value)
}
func (m *FlowExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *FlowExportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FlowExportTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogExport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SyslogConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.SyslogConfig.Size()))
		n5, err := m.SyslogConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n8, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *FwlogSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RetentionTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionTime)))
		i += copy(dAtA[i:], m.RetentionTime)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatsPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n11, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n12, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n13, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *StatsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompactionInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CompactionInterval)))
		i += copy(dAtA[i:], m.CompactionInterval)
	}
	if len(m.RetentionTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionTime)))
		i += copy(dAtA[i:], m.RetentionTime)
	}
	if len(m.DownSampleRetentionTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.DownSampleRetentionTime)))
		i += copy(dAtA[i:], m.DownSampleRetentionTime)
	}
	return i, nil
}

func (m *StatsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FlowExportSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FlowExportStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FlowExportTarget) Size() (n int) {
	var l int
	_ = l
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FwlogExport) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if m.SyslogConfig != nil {
		l = m.SyslogConfig.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FwlogSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FwlogStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatsPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *StatsSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompactionInterval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.DownSampleRetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *StatsStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, FlowExportTarget{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, api1.ExportConfig{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, api1.ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyslogConfig == nil {
				m.SyslogConfig = &api1.SyslogExportConfig{}
			}
			if err := m.SyslogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, &FwlogExport{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSampleRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownSampleRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x5e, 0x27, 0x65, 0x97, 0xcc, 0xfe, 0xd4, 0x1d, 0xda, 0xc6, 0x09, 0xab, 0x78, 0x71, 0x85,
	0x5a, 0xd0, 0xc6, 0x46, 0xed, 0x05, 0x2a, 0x77, 0x75, 0x36, 0x81, 0x85, 0x6d, 0x93, 0x26, 0x96,
	0x80, 0x2b, 0xe4, 0x78, 0x27, 0x66, 0x90, 0x3d, 0x63, 0xd9, 0x93, 0xa6, 0x11, 0xe2, 0xb2, 0x79,
	0x16, 0xb4, 0xcf, 0xc0, 0x03, 0xf4, 0x06, 0xa9, 0xea, 0x03, 0x04, 0xb4, 0x97, 0x79, 0x01, 0x6e,
	0xd1, 0xcc, 0x38, 0x89, 0x9d, 0x25, 0xa1, 0xa8, 0x17, 0xf4, 0xce, 0x73, 0xe6, 0x3b, 0xdf, 0x39,
	0xf3, 0xcd, 0x77, 0x46, 0x06, 0xd7, 0x19, 0x0a, 0x50, 0x88, 0x58, 0x3c, 0x36, 0xa3, 0x98, 0x32,
	0x0a, 0x41, 0x48, 0x09, 0x66, 0x34, 0xc6, 0xc4, 0xaf, 0x1e, 0xfa, 0x94, 0xfa, 0x01, 0xb2, 0xdc,
	0x08, 0x5b, 0x2e, 0x21, 0x94, 0xb9, 0x0c, 0x53, 0x92, 0x48, 0x64, 0xb5, 0xe9, 0x63, 0xf6, 0xe3,
	0xb0, 0x6f, 0x7a, 0x34, 0xb4, 0x22, 0x44, 0x12, 0x97, 0x9c, 0x53, 0x2b, 0x19, 0x59, 0xcf, 0x10,
	0xc1, 0x1e, 0xb2, 0x86, 0x0c, 0x07, 0x09, 0x4f, 0xf5, 0x11, 0xc9, 0x66, 0x5b, 0x98, 0x78, 0xc1,
	0xf0, 0x1c, 0xcd, 0x69, 0xea, 0x19, 0x1a, 0x9f, 0xfa, 0xd4, 0x12, 0xe1, 0xfe, 0x70, 0x20, 0x56,
	0x62, 0x21, 0xbe, 0x52, 0xf8, 0xc7, 0x6b, 0xaa, 0xf2, 0x1e, 0x43, 0xc4, 0xdc, 0x14, 0x76, 0x77,
	0x03, 0x0c, 0x3d, 0x8f, 0x68, 0xcc, 0x24, 0xd0, 0xf8, 0xad, 0x00, 0xd4, 0x56, 0x40, 0x47, 0x4d,
	0x11, 0xec, 0xd0, 0x00, 0x7b, 0x63, 0xf8, 0x19, 0x50, 0x1c, 0x4d, 0x39, 0x52, 0xee, 0xed, 0xde,
	0xdf, 0x37, 0xdd, 0x08, 0x9b, 0xce, 0x38, 0x42, 0x8f, 0x11, 0x73, 0xed, 0x0f, 0x5e, 0x4e, 0xf5,
	0xad, 0x57, 0x53, 0x5d, 0x99, 0x4d, 0xf5, 0x9d, 0x63, 0x4c, 0x02, 0x4c, 0x50, 0x57, 0x71, 0xe0,
	0x43, 0xa0, 0xb4, 0xb5, 0x82, 0xc8, 0xb8, 0x2e, 0x32, 0xda, 0xfd, 0x9f, 0x90, 0xc7, 0x44, 0x4e,
	0x35, 0x93, 0x73, 0xc0, 0x7b, 0x3c, 0xa6, 0x21, 0x66, 0x28, 0x8c, 0xd8, 0xb8, 0xab, 0xb4, 0x61,
	0x0b, 0x5c, 0xeb, 0x45, 0xc8, 0xd3, 0x8a, 0x22, 0xbb, 0x6a, 0x2e, 0x2f, 0xc0, 0x5c, 0x36, 0xc6,
	0x11, 0xf6, 0x6d, 0x4e, 0xc4, 0x49, 0x92, 0x08, 0x79, 0x19, 0x12, 0x91, 0x0f, 0x9f, 0x80, 0xed,
	0x1e, 0x73, 0xd9, 0x30, 0xd1, 0xae, 0x09, 0xa6, 0xc3, 0x35, 0x4c, 0x02, 0x63, 0x6b, 0x29, 0x97,
	0x9a, 0x88, 0x75, 0x86, 0x2d, 0x65, 0xf9, 0xe2, 0xce, 0xeb, 0x17, 0x15, 0x1d, 0xec, 0x5a, 0x3f,
	0xb7, 0x4d, 0x07, 0x11, 0x97, 0xb0, 0x5f, 0xa0, 0x3a, 0x58, 0x51, 0xca, 0xf0, 0xc0, 0x41, 0xbe,
	0x49, 0xf8, 0x14, 0xec, 0x38, 0x6e, 0xec, 0x23, 0x96, 0x68, 0xca, 0x51, 0x71, 0x7d, 0x1f, 0x12,
	0x64, 0x57, 0xd2, 0x3e, 0x6e, 0x30, 0x99, 0x94, 0x69, 0x64, 0xce, 0x63, 0xc0, 0xec, 0x15, 0xc9,
	0xee, 0x8c, 0xbf, 0x94, 0x6c, 0x50, 0x22, 0xe1, 0x7d, 0xf0, 0xfe, 0x29, 0x61, 0x28, 0x7e, 0xe6,
	0x06, 0xe2, 0xfa, 0x4a, 0xf6, 0xed, 0xd9, 0x54, 0x87, 0x38, 0x8d, 0x65, 0xb8, 0x17, 0x38, 0xf8,
	0x14, 0x6c, 0xb7, 0x68, 0x1c, 0xba, 0x4c, 0x5c, 0x5f, 0xc9, 0x7e, 0x78, 0x31, 0xa9, 0x7c, 0xd4,
	0x63, 0x71, 0x93, 0x0c, 0xc3, 0x7b, 0xab, 0x15, 0x4c, 0x09, 0x4d, 0x3e, 0xe1, 0xca, 0x0d, 0xc4,
	0x77, 0x56, 0x39, 0xb9, 0x0b, 0x5b, 0x60, 0x47, 0x26, 0x25, 0x5a, 0x51, 0x48, 0x70, 0x43, 0x58,
	0x42, 0xc6, 0x1a, 0x94, 0x0c, 0xb0, 0xbf, 0x3c, 0xb7, 0x74, 0x63, 0xee, 0xdc, 0x69, 0xb2, 0x71,
	0x13, 0xec, 0xa4, 0xf5, 0x60, 0x09, 0xbc, 0x77, 0x1a, 0x0d, 0xf0, 0x73, 0x75, 0xcb, 0xf8, 0xbd,
	0x00, 0x76, 0x5b, 0xa3, 0x80, 0xfa, 0x12, 0xc6, 0xab, 0xe5, 0x05, 0xdf, 0x54, 0x6d, 0xbd, 0xca,
	0xb0, 0xbd, 0x22, 0xc4, 0xe7, 0x17, 0x93, 0x8a, 0x3e, 0x17, 0xe2, 0xf1, 0xe2, 0x0a, 0x25, 0xaf,
	0x44, 0x6e, 0x96, 0xe1, 0x1b, 0xb0, 0xdd, 0xc2, 0x01, 0x43, 0xb1, 0x50, 0xa1, 0x64, 0x3f, 0xb8,
	0x98, 0x54, 0x6e, 0x2e, 0x94, 0xe5, 0x27, 0x90, 0xdb, 0x9c, 0xa5, 0x2c, 0x65, 0xa8, 0x0f, 0x44,
	0x24, 0x47, 0x26, 0x22, 0xf0, 0x3b, 0xb0, 0xd7, 0x1b, 0x27, 0x01, 0xf5, 0xe5, 0x89, 0x52, 0x8f,
	0x97, 0xc5, 0x51, 0xe5, 0x46, 0xee, 0xc0, 0x1f, 0x72, 0xce, 0x44, 0xc4, 0xeb, 0x9e, 0x08, 0x65,
	0x38, 0x73, 0x4c, 0xc6, 0xaf, 0x73, 0x3d, 0xff, 0x8f, 0xe1, 0x7f, 0x94, 0x1b, 0xfe, 0x5b, 0xb9,
	0x51, 0xe1, 0x3d, 0xbd, 0xc1, 0xdc, 0x9f, 0xae, 0xcc, 0x7d, 0xf9, 0x2a, 0xc9, 0x9b, 0x8e, 0x7c,
	0xed, 0xf5, 0x8b, 0x4a, 0x35, 0x3f, 0xf2, 0xbb, 0x83, 0xa5, 0x34, 0xc6, 0x1f, 0x0a, 0x28, 0x2d,
	0xda, 0x82, 0x36, 0xd8, 0xef, 0x22, 0x86, 0x08, 0x7f, 0xd6, 0x1d, 0x1c, 0xa2, 0x74, 0xe4, 0x0e,
	0x67, 0x53, 0x5d, 0x8b, 0xe7, 0x1b, 0x75, 0x86, 0x43, 0x94, 0x29, 0x95, 0x4f, 0x81, 0x27, 0x0b,
	0x8f, 0x14, 0x84, 0x47, 0x8e, 0x37, 0x78, 0x44, 0x5d, 0x6b, 0x8e, 0xaf, 0x56, 0x07, 0xee, 0xaa,
	0x06, 0x72, 0xdf, 0xbe, 0xf5, 0x2f, 0x23, 0xb7, 0x9f, 0x7a, 0x21, 0x7d, 0x65, 0xb8, 0x37, 0xf8,
	0x67, 0xf2, 0x8e, 0x79, 0x43, 0xf4, 0xf4, 0xb6, 0xde, 0x90, 0x24, 0x6f, 0xe3, 0x8d, 0x64, 0x29,
	0x8d, 0x31, 0x29, 0x80, 0xd2, 0xa2, 0x2d, 0xd8, 0x05, 0xb0, 0x41, 0xc3, 0xc8, 0xf5, 0xf8, 0x4d,
	0xaf, 0xbc, 0xc9, 0xc6, 0x6c, 0xaa, 0xd7, 0xbc, 0xc5, 0x6e, 0x7d, 0xfe, 0x3c, 0x1f, 0x65, 0xaa,
	0xfe, 0x43, 0xf6, 0x55, 0xbf, 0x15, 0xfe, 0xbb, 0xdf, 0x5c, 0x50, 0x3e, 0xa1, 0x23, 0xd2, 0x73,
	0xc3, 0x28, 0x40, 0x79, 0xb6, 0xa2, 0x60, 0xbb, 0x3b, 0x9b, 0xea, 0x77, 0xce, 0xe9, 0x88, 0x24,
	0x02, 0x52, 0x5f, 0x4b, 0xbc, 0x8e, 0x87, 0x5b, 0x28, 0xa3, 0xec, 0xa7, 0x9d, 0xd4, 0x51, 0xa9,
	0x55, 0xf7, 0x41, 0xa9, 0xf5, 0xed, 0x59, 0xfb, 0xcb, 0x1f, 0x1e, 0x9d, 0x9d, 0xa9, 0x5b, 0x50,
	0x05, 0x7b, 0xe9, 0xb2, 0xd1, 0x68, 0x76, 0x1c, 0x55, 0x59, 0x46, 0xba, 0xcd, 0xaf, 0x9b, 0x0d,
	0x47, 0x2d, 0xc0, 0x03, 0x00, 0x64, 0xe4, 0xa4, 0xf9, 0xe4, 0x7b, 0xb5, 0x68, 0xef, 0xbd, 0xbc,
	0xac, 0x29, 0xaf, 0x2e, 0x6b, 0xca, 0x9f, 0x97, 0x35, 0xa5, 0xa3, 0xf4, 0xb7, 0xc5, 0x9f, 0xcc,
	0x83, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x54, 0x30, 0x66, 0x93, 0xcc, 0x09, 0x00, 0x00,
}
