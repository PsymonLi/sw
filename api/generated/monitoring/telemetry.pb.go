// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type FwlogFilter int32

const (
	// ui-hint: No Logs
	FwlogFilter_FIREWALL_ACTION_NONE FwlogFilter = 0
	// ui-hint: Allow Logs
	FwlogFilter_FIREWALL_ACTION_ALLOW FwlogFilter = 1
	// ui-hint: Deny Logs
	FwlogFilter_FIREWALL_ACTION_DENY FwlogFilter = 2
	// ui-hint: Reject Logs
	FwlogFilter_FIREWALL_ACTION_REJECT FwlogFilter = 3
	// ui-hint: Implicit Deny Logs
	FwlogFilter_FIREWALL_IMPLICIT_DENY FwlogFilter = 4
	// ui-hint: All Logs
	FwlogFilter_FIREWALL_ACTION_ALL FwlogFilter = 5
)

var FwlogFilter_name = map[int32]string{
	0: "FIREWALL_ACTION_NONE",
	1: "FIREWALL_ACTION_ALLOW",
	2: "FIREWALL_ACTION_DENY",
	3: "FIREWALL_ACTION_REJECT",
	4: "FIREWALL_IMPLICIT_DENY",
	5: "FIREWALL_ACTION_ALL",
}
var FwlogFilter_value = map[string]int32{
	"FIREWALL_ACTION_NONE":   0,
	"FIREWALL_ACTION_ALLOW":  1,
	"FIREWALL_ACTION_DENY":   2,
	"FIREWALL_ACTION_REJECT": 3,
	"FIREWALL_IMPLICIT_DENY": 4,
	"FIREWALL_ACTION_ALL":    5,
}

func (FwlogFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

//
type FlowExportPolicySpec_Formats int32

const (
	//
	FlowExportPolicySpec_Ipfix FlowExportPolicySpec_Formats = 0
)

var FlowExportPolicySpec_Formats_name = map[int32]string{
	0: "Ipfix",
}
var FlowExportPolicySpec_Formats_value = map[string]int32{
	"Ipfix": 0,
}

func (FlowExportPolicySpec_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{1, 0}
}

//
type FlowExportPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FlowExportPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the export policy.
	Status FlowExportPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FlowExportPolicy) Reset()                    { *m = FlowExportPolicy{} }
func (m *FlowExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicy) ProtoMessage()               {}
func (*FlowExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

func (m *FlowExportPolicy) GetSpec() FlowExportPolicySpec {
	if m != nil {
		return m.Spec
	}
	return FlowExportPolicySpec{}
}

func (m *FlowExportPolicy) GetStatus() FlowExportPolicyStatus {
	if m != nil {
		return m.Status
	}
	return FlowExportPolicyStatus{}
}

//
type FlowExportPolicySpec struct {
	// VrfName specifies the name of the VRF that the current flow export Policy belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,json=vrf-name,omitempty,proto3" json:"vrf-name,omitempty"`
	// Interval defines how often to push the records to an external collector
	// The value is specified as a string format, '10s', '20m'
	Interval string `protobuf:"bytes,2,opt,name=Interval,json=interval,omitempty,proto3" json:"interval,omitempty"`
	// TemplateInterval defines how often to send ipfix templates to an external collector
	// The value is specified as a string format, '1m', '10m'
	TemplateInterval string `protobuf:"bytes,3,opt,name=TemplateInterval,json=template-interval,omitempty,proto3" json:"template-interval,omitempty"`
	//
	Format string `protobuf:"bytes,4,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	//
	MatchRules []*MatchRule `protobuf:"bytes,5,rep,name=MatchRules,json=match-rules,omitempty" json:"match-rules,omitempty"`
	// Export contains export parameters.
	Exports []ExportConfig `protobuf:"bytes,6,rep,name=Exports,json=exports,omitempty" json:"exports,omitempty"`
}

func (m *FlowExportPolicySpec) Reset()                    { *m = FlowExportPolicySpec{} }
func (m *FlowExportPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicySpec) ProtoMessage()               {}
func (*FlowExportPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{1} }

func (m *FlowExportPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *FlowExportPolicySpec) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *FlowExportPolicySpec) GetTemplateInterval() string {
	if m != nil {
		return m.TemplateInterval
	}
	return ""
}

func (m *FlowExportPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FlowExportPolicySpec) GetMatchRules() []*MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *FlowExportPolicySpec) GetExports() []ExportConfig {
	if m != nil {
		return m.Exports
	}
	return nil
}

// FlowExportPolicyStatus
type FlowExportPolicyStatus struct {
	//
	PropagationStatus PropagationStatus `protobuf:"bytes,1,opt,name=PropagationStatus,json=propagation-status" json:"propagation-status"`
}

func (m *FlowExportPolicyStatus) Reset()                    { *m = FlowExportPolicyStatus{} }
func (m *FlowExportPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyStatus) ProtoMessage()               {}
func (*FlowExportPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{2} }

func (m *FlowExportPolicyStatus) GetPropagationStatus() PropagationStatus {
	if m != nil {
		return m.PropagationStatus
	}
	return PropagationStatus{}
}

//
type FwlogPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FwlogPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the policy.
	Status FwlogPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{3} }

func (m *FwlogPolicy) GetSpec() FwlogPolicySpec {
	if m != nil {
		return m.Spec
	}
	return FwlogPolicySpec{}
}

func (m *FwlogPolicy) GetStatus() FwlogPolicyStatus {
	if m != nil {
		return m.Status
	}
	return FwlogPolicyStatus{}
}

// Venice collects fwlog irrespective of the export config
type FwlogPolicySpec struct {
	//  VrfName specifies the name of the VRF that the current Firewall Log Policy belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,json=vrf-name,omitempty,proto3" json:"vrf-name,omitempty"`
	// Target contains ip/port/protocol
	Targets []ExportConfig `protobuf:"bytes,2,rep,name=Targets,json=targets,omitempty" json:"targets,omitempty"`
	// fwlog format, SYSLOG_BSD default
	Format string `protobuf:"bytes,3,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	// filter firewall logs, FWLOG_ALL default
	Filter []string `protobuf:"bytes,4,rep,name=Filter,json=filter,omitempty" json:"filter,omitempty"`
	// configuration to use for syslog format
	// default facility is set to "local4", can be overridden with FacilityOverride
	// fwlog severity is set to "Informational"
	Config *SyslogExportConfig `protobuf:"bytes,5,opt,name=Config,json=config,omitempty" json:"config,omitempty"`
	// PSMExportTarget represents PSM used as a log export target
	// It does not honor Format, Filter fields
	PSMTarget *PSMExportTarget `protobuf:"bytes,6,opt,name=PSMTarget,json=psm-target,omitempty" json:"psm-target,omitempty"`
}

func (m *FwlogPolicySpec) Reset()                    { *m = FwlogPolicySpec{} }
func (m *FwlogPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicySpec) ProtoMessage()               {}
func (*FwlogPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *FwlogPolicySpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *FwlogPolicySpec) GetTargets() []ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *FwlogPolicySpec) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FwlogPolicySpec) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogPolicySpec) GetConfig() *SyslogExportConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *FwlogPolicySpec) GetPSMTarget() *PSMExportTarget {
	if m != nil {
		return m.PSMTarget
	}
	return nil
}

// FirewallLog Policy Status
type FwlogPolicyStatus struct {
}

func (m *FwlogPolicyStatus) Reset()                    { *m = FwlogPolicyStatus{} }
func (m *FwlogPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyStatus) ProtoMessage()               {}
func (*FwlogPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{5} }

func init() {
	proto.RegisterType((*FlowExportPolicy)(nil), "monitoring.FlowExportPolicy")
	proto.RegisterType((*FlowExportPolicySpec)(nil), "monitoring.FlowExportPolicySpec")
	proto.RegisterType((*FlowExportPolicyStatus)(nil), "monitoring.FlowExportPolicyStatus")
	proto.RegisterType((*FwlogPolicy)(nil), "monitoring.FwlogPolicy")
	proto.RegisterType((*FwlogPolicySpec)(nil), "monitoring.FwlogPolicySpec")
	proto.RegisterType((*FwlogPolicyStatus)(nil), "monitoring.FwlogPolicyStatus")
	proto.RegisterEnum("monitoring.FwlogFilter", FwlogFilter_name, FwlogFilter_value)
	proto.RegisterEnum("monitoring.FlowExportPolicySpec_Formats", FlowExportPolicySpec_Formats_name, FlowExportPolicySpec_Formats_value)
}
func (m *FlowExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *FlowExportPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Interval) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if len(m.TemplateInterval) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.TemplateInterval)))
		i += copy(dAtA[i:], m.TemplateInterval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.PropagationStatus.Size()))
	n5, err := m.PropagationStatus.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n8, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *FwlogPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Config != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Config.Size()))
		n10, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.PSMTarget != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.PSMTarget.Size()))
		n11, err := m.PSMTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *FwlogPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FlowExportPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.TemplateInterval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicyStatus) Size() (n int) {
	var l int
	_ = l
	l = m.PropagationStatus.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FwlogPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.PSMTarget != nil {
		l = m.PSMTarget.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *FwlogPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, &MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, ExportConfig{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PropagationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &SyslogExportConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSMTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PSMTarget == nil {
				m.PSMTarget = &PSMExportTarget{}
			}
			if err := m.PSMTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 1033 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4f, 0x6f, 0x1a, 0x47,
	0x14, 0xc0, 0xbd, 0x80, 0x21, 0x8c, 0xdb, 0x7a, 0x3d, 0xc6, 0xd6, 0x2e, 0x69, 0xc0, 0xa2, 0x4d,
	0xe5, 0x54, 0x06, 0x62, 0xbb, 0x7f, 0xd4, 0x56, 0x3d, 0x78, 0x1d, 0x90, 0xa8, 0x8c, 0xa1, 0x40,
	0x6d, 0x45, 0x95, 0x62, 0xad, 0xd7, 0xc3, 0x7a, 0xaa, 0xdd, 0x99, 0xd5, 0xee, 0x60, 0x07, 0x55,
	0xbd, 0x54, 0x8a, 0xe5, 0x6b, 0xbf, 0x86, 0x8f, 0xfd, 0x14, 0x91, 0x7a, 0x89, 0x72, 0xad, 0x84,
	0x2a, 0x4e, 0x15, 0x97, 0xde, 0x7a, 0xae, 0x76, 0x66, 0x6d, 0x2f, 0xcb, 0x26, 0x4a, 0xd4, 0x4b,
	0x6e, 0xfb, 0xde, 0xbc, 0xf7, 0x7b, 0x8f, 0xf7, 0x4f, 0x80, 0x45, 0x86, 0x2c, 0x64, 0x23, 0xe6,
	0x0e, 0x2b, 0x8e, 0x4b, 0x19, 0x85, 0xc0, 0xa6, 0x04, 0x33, 0xea, 0x62, 0x62, 0xe6, 0x3f, 0x34,
	0x29, 0x35, 0x2d, 0x54, 0xd5, 0x1d, 0x5c, 0xd5, 0x09, 0xa1, 0x4c, 0x67, 0x98, 0x12, 0x4f, 0x58,
	0xe6, 0x6b, 0x26, 0x66, 0xa7, 0x83, 0xe3, 0x8a, 0x41, 0xed, 0xaa, 0x83, 0x88, 0xa7, 0x93, 0x13,
	0x5a, 0xf5, 0xce, 0xab, 0x67, 0x88, 0x60, 0x03, 0x55, 0x07, 0x0c, 0x5b, 0x9e, 0xef, 0x6a, 0x22,
	0x12, 0xf6, 0xae, 0x62, 0x62, 0x58, 0x83, 0x13, 0x74, 0x8d, 0x29, 0x87, 0x30, 0x26, 0x35, 0x69,
	0x95, 0xab, 0x8f, 0x07, 0x7d, 0x2e, 0x71, 0x81, 0x7f, 0x05, 0xe6, 0xf7, 0x5f, 0x11, 0xd5, 0xcf,
	0xd1, 0x46, 0x4c, 0x0f, 0xcc, 0xde, 0x43, 0x4f, 0x1d, 0xea, 0xb2, 0x6b, 0xc9, 0xc6, 0xae, 0x4b,
	0x5d, 0x21, 0x95, 0xfe, 0x49, 0x00, 0xb9, 0x6e, 0xd1, 0xf3, 0x1a, 0x37, 0x69, 0x53, 0x0b, 0x1b,
	0x43, 0xf8, 0x05, 0x90, 0x7a, 0x8a, 0xb4, 0x26, 0xad, 0x2f, 0x6c, 0xbd, 0x5f, 0xd1, 0x1d, 0x5c,
	0xe9, 0x0d, 0x1d, 0xd4, 0x44, 0x4c, 0xd7, 0x96, 0x9f, 0x8f, 0x8a, 0x73, 0x2f, 0x46, 0x45, 0x69,
	0x32, 0x2a, 0x66, 0x36, 0x30, 0xb1, 0x30, 0x41, 0x9d, 0xeb, 0x0f, 0x58, 0x07, 0x52, 0x4b, 0x49,
	0x70, 0xbf, 0x45, 0xee, 0xd7, 0x3a, 0xfe, 0x09, 0x19, 0x8c, 0x7b, 0xe6, 0x43, 0x9e, 0x1f, 0xf8,
	0xc9, 0x6d, 0x50, 0x1b, 0x33, 0x64, 0x3b, 0x6c, 0xd8, 0x89, 0xc8, 0xf0, 0x00, 0xa4, 0xba, 0x0e,
	0x32, 0x94, 0x24, 0x47, 0xad, 0x55, 0x6e, 0xdb, 0x50, 0x89, 0xe6, 0xea, 0xdb, 0x69, 0xab, 0x3e,
	0xdb, 0xe7, 0x7a, 0x0e, 0x32, 0xc2, 0xdc, 0x69, 0x19, 0x3e, 0x01, 0xe9, 0x2e, 0xd3, 0xd9, 0xc0,
	0x53, 0x52, 0x9c, 0x5c, 0x7a, 0x2d, 0x99, 0x5b, 0x6a, 0x4a, 0xc0, 0x96, 0x3d, 0x2e, 0x87, 0xe8,
	0x33, 0x9a, 0xaf, 0x3f, 0x7a, 0xf9, 0x4c, 0x2d, 0x82, 0x85, 0xea, 0xcf, 0xad, 0x4a, 0x0f, 0x11,
	0x9d, 0xb0, 0x5f, 0xa0, 0xdc, 0x8f, 0x60, 0x4b, 0x7f, 0xa4, 0x40, 0x2e, 0xee, 0x57, 0xc0, 0x6f,
	0x40, 0xe6, 0xc0, 0xed, 0xef, 0xeb, 0x36, 0xe2, 0xb5, 0xcf, 0x6a, 0xab, 0x93, 0x51, 0x11, 0x9e,
	0xb9, 0xfd, 0x32, 0xd1, 0x6d, 0x14, 0x0a, 0x1c, 0xa3, 0x83, 0x87, 0xe0, 0x4e, 0x83, 0x30, 0xe4,
	0x9e, 0xe9, 0x16, 0xef, 0x40, 0x56, 0xdb, 0xbc, 0xba, 0x50, 0xe5, 0x47, 0x03, 0x97, 0x4f, 0xda,
	0xfa, 0xa6, 0xb7, 0xb1, 0xf5, 0xd9, 0xe9, 0x83, 0xdf, 0x2f, 0xd4, 0xe4, 0xe6, 0x43, 0xcf, 0x07,
	0xe3, 0xc0, 0x3c, 0x0c, 0x9e, 0xd5, 0x41, 0x07, 0xc8, 0x3d, 0x64, 0x3b, 0x96, 0xce, 0xd0, 0x4d,
	0x80, 0x24, 0x0f, 0xf0, 0xd5, 0x74, 0x00, 0x7b, 0x63, 0xfb, 0xa1, 0xed, 0x07, 0x48, 0x7c, 0x6e,
	0x4f, 0x46, 0xc5, 0xbb, 0x2c, 0xf0, 0x2a, 0xc7, 0x04, 0x7a, 0xdd, 0x23, 0x3c, 0x02, 0xe9, 0x3a,
	0x75, 0x6d, 0x9d, 0xf1, 0x2e, 0x65, 0xb5, 0x6f, 0xaf, 0x2e, 0xd4, 0xfb, 0x5d, 0xe6, 0xd6, 0xc8,
	0xc0, 0x5e, 0x8f, 0xab, 0x5c, 0x45, 0x98, 0x7b, 0x0f, 0xfc, 0x36, 0xf5, 0xf9, 0x77, 0xb8, 0x4d,
	0x51, 0x0d, 0xfc, 0x11, 0x80, 0xa6, 0xce, 0x8c, 0xd3, 0xce, 0xc0, 0x42, 0x9e, 0x32, 0xbf, 0x96,
	0x5c, 0x5f, 0xd8, 0x5a, 0x09, 0x8f, 0xc2, 0xcd, 0xab, 0xa6, 0x4e, 0x46, 0xc5, 0x15, 0xdb, 0x17,
	0xcb, 0xae, 0x6f, 0x1d, 0xe2, 0xc6, 0xab, 0xe1, 0x21, 0xc8, 0x88, 0xfc, 0x3c, 0x25, 0xcd, 0xc9,
	0x4a, 0x98, 0x2c, 0x9e, 0x76, 0x29, 0xe9, 0x63, 0x53, 0x53, 0x83, 0xd1, 0x5a, 0x12, 0xfb, 0x19,
	0x86, 0xcf, 0xaa, 0x4a, 0x39, 0x90, 0x09, 0x7e, 0x27, 0xcc, 0x82, 0xf9, 0x86, 0xd3, 0xc7, 0x4f,
	0xe5, 0xb9, 0xd2, 0xaf, 0x12, 0x58, 0x8d, 0x9f, 0x5c, 0x78, 0x0a, 0x96, 0xda, 0x2e, 0x75, 0x74,
	0x93, 0x37, 0x28, 0x18, 0x7c, 0xb1, 0xd5, 0xf7, 0xc2, 0x39, 0xcd, 0x18, 0x89, 0x5d, 0xf5, 0x67,
	0xc4, 0xb9, 0x7d, 0x2a, 0x8b, 0x69, 0xef, 0xc4, 0xe8, 0x4a, 0x7f, 0x26, 0xc0, 0x42, 0xfd, 0xdc,
	0xa2, 0xe6, 0x3b, 0x72, 0x3f, 0xbe, 0x9f, 0xba, 0x1f, 0x77, 0xa7, 0xb6, 0xfc, 0x36, 0xcd, 0xb7,
	0x3a, 0x1d, 0x8f, 0x23, 0xa7, 0xe3, 0xde, 0xab, 0xa0, 0x6f, 0x7f, 0x35, 0x0a, 0x2f, 0x9f, 0xa9,
	0xf9, 0xe9, 0xab, 0xb1, 0xd0, 0xbf, 0x25, 0x96, 0x7e, 0x4b, 0x81, 0xc5, 0x48, 0xda, 0xff, 0xf7,
	0x56, 0x64, 0x7a, 0xba, 0x6b, 0x22, 0xe6, 0x29, 0x89, 0x37, 0x1d, 0x51, 0x26, 0x1c, 0xc2, 0x23,
	0x3a, 0xa3, 0xf2, 0x8b, 0x14, 0x6c, 0xae, 0xb8, 0x10, 0x5f, 0x5e, 0x5d, 0xa8, 0xc5, 0xeb, 0xcd,
	0x6d, 0xde, 0x84, 0x10, 0x11, 0x84, 0xe5, 0x9b, 0xee, 0xec, 0x0f, 0x20, 0x5d, 0xc7, 0x16, 0x43,
	0xae, 0x92, 0x5a, 0x4b, 0xae, 0x67, 0xb5, 0xed, 0xab, 0x0b, 0x35, 0x77, 0x73, 0x14, 0xfc, 0xea,
	0x88, 0x67, 0x7e, 0xe1, 0x74, 0xcb, 0xe2, 0x58, 0xae, 0x99, 0xc2, 0x46, 0x34, 0xf0, 0x00, 0xa4,
	0xc5, 0x2f, 0x55, 0xe6, 0x79, 0x5b, 0x0b, 0xe1, 0x4a, 0x74, 0x87, 0x9e, 0x45, 0xcd, 0xa9, 0x7a,
	0xe4, 0x7c, 0xae, 0xc1, 0xbf, 0xc3, 0xdc, 0xa8, 0x06, 0x3e, 0x01, 0xd9, 0x76, 0xb7, 0x29, 0xaa,
	0xac, 0xa4, 0x67, 0xc7, 0xb0, 0xdd, 0x6d, 0x0a, 0xae, 0x30, 0xd1, 0x94, 0xc9, 0xa8, 0x98, 0x73,
	0x3c, 0xbb, 0x2c, 0x8a, 0x1a, 0x62, 0xc7, 0x6a, 0x4b, 0xcb, 0x60, 0x69, 0x66, 0xe8, 0x3e, 0xfd,
	0x57, 0x0a, 0xd6, 0x50, 0x94, 0x02, 0x96, 0x40, 0xae, 0xde, 0xe8, 0xd4, 0x0e, 0x77, 0xf6, 0xf6,
	0x8e, 0x76, 0x76, 0x7b, 0x8d, 0xd6, 0xfe, 0xd1, 0x7e, 0x6b, 0xbf, 0x26, 0xcf, 0xe5, 0xef, 0x8c,
	0x2f, 0xd5, 0x14, 0xa1, 0x04, 0xc1, 0x8f, 0xc1, 0x4a, 0xd4, 0x66, 0x67, 0x6f, 0xaf, 0x75, 0x28,
	0x4b, 0xf9, 0xec, 0xf8, 0x52, 0x9d, 0xd7, 0x2d, 0x8b, 0x9e, 0xc7, 0x91, 0x1e, 0xd5, 0xf6, 0x1f,
	0xcb, 0x09, 0x41, 0x3a, 0x41, 0x64, 0x08, 0x3f, 0x01, 0xab, 0x51, 0x9b, 0x4e, 0xed, 0xbb, 0xda,
	0x6e, 0x4f, 0x4e, 0xe6, 0xc1, 0xf8, 0x52, 0x4d, 0xbb, 0xc8, 0x5f, 0x66, 0x58, 0x0d, 0xd9, 0x35,
	0x9a, 0xed, 0xbd, 0xc6, 0x6e, 0xa3, 0x27, 0x68, 0xa9, 0xfc, 0xf2, 0xf8, 0x52, 0x5d, 0xc4, 0xb6,
	0x63, 0x61, 0x03, 0xb3, 0x72, 0xe0, 0xb0, 0x06, 0x96, 0x63, 0x52, 0x94, 0xe7, 0xf3, 0x99, 0xf1,
	0x25, 0xef, 0xb5, 0x26, 0x3f, 0x1f, 0x17, 0xa4, 0x17, 0xe3, 0x82, 0xf4, 0xd7, 0xb8, 0x20, 0xfd,
	0x3d, 0x2e, 0xcc, 0xb5, 0xa5, 0xe3, 0x34, 0xff, 0x7f, 0xb3, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x48, 0x0c, 0xfa, 0x0f, 0xd5, 0x09, 0x00, 0x00,
}
