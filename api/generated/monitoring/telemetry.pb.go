// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: telemetry.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type FwlogFilter int32

const (
	// ui-hint: All
	FwlogFilter_FWLOG_ALL FwlogFilter = 0
	// ui-hint: Accept
	FwlogFilter_FWLOG_ACCEPT FwlogFilter = 1
	// ui-hint: Reject
	FwlogFilter_FWLOG_REJECT FwlogFilter = 2
	// ui-hint: Deny
	FwlogFilter_FWLOG_DENY FwlogFilter = 3
)

var FwlogFilter_name = map[int32]string{
	0: "FWLOG_ALL",
	1: "FWLOG_ACCEPT",
	2: "FWLOG_REJECT",
	3: "FWLOG_DENY",
}
var FwlogFilter_value = map[string]int32{
	"FWLOG_ALL":    0,
	"FWLOG_ACCEPT": 1,
	"FWLOG_REJECT": 2,
	"FWLOG_DENY":   3,
}

func (x FwlogFilter) String() string {
	return proto.EnumName(FwlogFilter_name, int32(x))
}
func (FwlogFilter) EnumDescriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

//
type FlowExportTarget_Formats int32

const (
	//
	FlowExportTarget_Ipfix FlowExportTarget_Formats = 0
)

var FlowExportTarget_Formats_name = map[int32]string{
	0: "Ipfix",
}
var FlowExportTarget_Formats_value = map[string]int32{
	"Ipfix": 0,
}

func (x FlowExportTarget_Formats) String() string {
	return proto.EnumName(FlowExportTarget_Formats_name, int32(x))
}
func (FlowExportTarget_Formats) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTelemetry, []int{3, 0}
}

//
type FlowExportPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FlowExportSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the export policy.
	Status FlowExportStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FlowExportPolicy) Reset()                    { *m = FlowExportPolicy{} }
func (m *FlowExportPolicy) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicy) ProtoMessage()               {}
func (*FlowExportPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{0} }

func (m *FlowExportPolicy) GetSpec() FlowExportSpec {
	if m != nil {
		return m.Spec
	}
	return FlowExportSpec{}
}

func (m *FlowExportPolicy) GetStatus() FlowExportStatus {
	if m != nil {
		return m.Status
	}
	return FlowExportStatus{}
}

//
type FlowExportSpec struct {
	//
	Targets []FlowExportTarget `protobuf:"bytes,1,rep,name=Targets,json=targets,omitempty" json:"targets,omitempty"`
}

func (m *FlowExportSpec) Reset()                    { *m = FlowExportSpec{} }
func (m *FlowExportSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowExportSpec) ProtoMessage()               {}
func (*FlowExportSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{1} }

func (m *FlowExportSpec) GetTargets() []FlowExportTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

// ========================================================================================
//  flow export policy
// ========================================================================================
type FlowExportStatus struct {
}

func (m *FlowExportStatus) Reset()                    { *m = FlowExportStatus{} }
func (m *FlowExportStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowExportStatus) ProtoMessage()               {}
func (*FlowExportStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{2} }

//
type FlowExportTarget struct {
	// Interval defines how often to push the records to an external or internal collector
	// The value is specified as a string format to be '10s', '20m', '20mins', '10secs', '10seconds'
	Interval string `protobuf:"bytes,1,opt,name=Interval,json=interval,omitempty,proto3" json:"interval,omitempty"`
	//
	Format string `protobuf:"bytes,2,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	//
	MatchRules []MatchRule `protobuf:"bytes,3,rep,name=MatchRules,json=match-rules,omitempty" json:"match-rules,omitempty"`
	// Export contains export parameters.
	Exports []api1.ExportConfig `protobuf:"bytes,4,rep,name=Exports,json=exports,omitempty" json:"exports,omitempty"`
}

func (m *FlowExportTarget) Reset()                    { *m = FlowExportTarget{} }
func (m *FlowExportTarget) String() string            { return proto.CompactTextString(m) }
func (*FlowExportTarget) ProtoMessage()               {}
func (*FlowExportTarget) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{3} }

func (m *FlowExportTarget) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *FlowExportTarget) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FlowExportTarget) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *FlowExportTarget) GetExports() []api1.ExportConfig {
	if m != nil {
		return m.Exports
	}
	return nil
}

// firewall log export config
type FwlogExport struct {
	// Target contains ip/port/protocol
	Targets []api1.ExportConfig `protobuf:"bytes,1,rep,name=Targets,json=targets,omitempty" json:"targets,omitempty"`
	// fwlog format, SYSLOG_BSD default
	Format string `protobuf:"bytes,2,opt,name=Format,json=format,omitempty,proto3" json:"format,omitempty"`
	// filter firewall logs, FWLOG_ALL default
	Filter []string `protobuf:"bytes,3,rep,name=Filter,json=export-filter,omitempty" json:"export-filter,omitempty"`
	// configuration to use for syslog format
	// default facility is set to "local4", can be overridden with FacilityOverride
	// fwlog serverity is set to "Informational"
	SyslogConfig *api1.SyslogExportConfig `protobuf:"bytes,4,opt,name=SyslogConfig,json=syslog-config,omitempty" json:"syslog-config,omitempty"`
}

func (m *FwlogExport) Reset()                    { *m = FwlogExport{} }
func (m *FwlogExport) String() string            { return proto.CompactTextString(m) }
func (*FwlogExport) ProtoMessage()               {}
func (*FwlogExport) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{4} }

func (m *FwlogExport) GetTargets() []api1.ExportConfig {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *FwlogExport) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *FwlogExport) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogExport) GetSyslogConfig() *api1.SyslogExportConfig {
	if m != nil {
		return m.SyslogConfig
	}
	return nil
}

//
type FwlogPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec FwlogSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the policy.
	Status FwlogStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *FwlogPolicy) Reset()                    { *m = FwlogPolicy{} }
func (m *FwlogPolicy) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicy) ProtoMessage()               {}
func (*FwlogPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{5} }

func (m *FwlogPolicy) GetSpec() FwlogSpec {
	if m != nil {
		return m.Spec
	}
	return FwlogSpec{}
}

func (m *FwlogPolicy) GetStatus() FwlogStatus {
	if m != nil {
		return m.Status
	}
	return FwlogStatus{}
}

// Venice collects fwlog irrespective of the export config
type FwlogSpec struct {
	// RetentionTime defines for how long to keep the fwlog before it is deleted
	RetentionTime string `protobuf:"bytes,1,opt,name=RetentionTime,json=retention-time,omitempty,proto3" json:"retention-time,omitempty"`
	// filter firewall logs for venice, FWLOG_ALL default
	Filter []string `protobuf:"bytes,2,rep,name=Filter,json=filter,omitempty" json:"filter,omitempty"`
	// Export contains the export config
	Exports []*FwlogExport `protobuf:"bytes,3,rep,name=Exports,json=exports,omitempty" json:"exports,omitempty"`
}

func (m *FwlogSpec) Reset()                    { *m = FwlogSpec{} }
func (m *FwlogSpec) String() string            { return proto.CompactTextString(m) }
func (*FwlogSpec) ProtoMessage()               {}
func (*FwlogSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{6} }

func (m *FwlogSpec) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *FwlogSpec) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *FwlogSpec) GetExports() []*FwlogExport {
	if m != nil {
		return m.Exports
	}
	return nil
}

//
type FwlogStatus struct {
}

func (m *FwlogStatus) Reset()                    { *m = FwlogStatus{} }
func (m *FwlogStatus) String() string            { return proto.CompactTextString(m) }
func (*FwlogStatus) ProtoMessage()               {}
func (*FwlogStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{7} }

//
type StatsPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec StatsSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of the policy.
	Status StatsStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *StatsPolicy) Reset()                    { *m = StatsPolicy{} }
func (m *StatsPolicy) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicy) ProtoMessage()               {}
func (*StatsPolicy) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{8} }

func (m *StatsPolicy) GetSpec() StatsSpec {
	if m != nil {
		return m.Spec
	}
	return StatsSpec{}
}

func (m *StatsPolicy) GetStatus() StatsStatus {
	if m != nil {
		return m.Status
	}
	return StatsStatus{}
}

// compaction method will be selected by Venice based on the mesaurement/table
// collection interval will be selected by Venice based on workloads
type StatsSpec struct {
	// Compaction Interval is the down sampling interval in minutes, hours or days
	// this would be mapped to GROUP BY TIME() in influxdb CQ
	// example: SELECT MAX(*) INTO downsampled_xxx FROM xxx GROUP BY time(CompactionInterval),host
	CompactionInterval string `protobuf:"bytes,1,opt,name=CompactionInterval,json=compaction-interval ,omitempty,proto3" json:"compaction-interval ,omitempty"`
	// RetentionTime defines for how long to keep the stats data before it is deleted
	// The value is specified as a string format to be hours, days, or months etc.
	// e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
	RetentionTime string `protobuf:"bytes,2,opt,name=RetentionTime,json=retention-time,omitempty,proto3" json:"retention-time,omitempty"`
	// DownSampleRetentionTime defines for how long to keep the down sampled data before it is deleted
	// The value is specified as a string format to be hours, days, or months etc.
	// e.g. '24hrs', '72hours', '4days', '6d', '2months', '4mo', '1yr'
	DownSampleRetentionTime string `protobuf:"bytes,3,opt,name=DownSampleRetentionTime,json=downsample-retention-time,omitempty,proto3" json:"downsample-retention-time,omitempty"`
}

func (m *StatsSpec) Reset()                    { *m = StatsSpec{} }
func (m *StatsSpec) String() string            { return proto.CompactTextString(m) }
func (*StatsSpec) ProtoMessage()               {}
func (*StatsSpec) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{9} }

func (m *StatsSpec) GetCompactionInterval() string {
	if m != nil {
		return m.CompactionInterval
	}
	return ""
}

func (m *StatsSpec) GetRetentionTime() string {
	if m != nil {
		return m.RetentionTime
	}
	return ""
}

func (m *StatsSpec) GetDownSampleRetentionTime() string {
	if m != nil {
		return m.DownSampleRetentionTime
	}
	return ""
}

// telemetry policies:
// -------------------------------------------------------------------------------
// policy name         |  intended for        |     description                 |
// -------------------------------------------------------------------------------
// stats               |  sys admins          |    for all stats other than     |
//                     |                      |    fwlog/netflow.               |
//                     |                      |    includes retention,compaction|
// -------------------------------------------------------------------------------
// fwlog               |  security admins     |    firewall log policy          |
//                     |                      |    includes retention,          |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//                     |                      |                                 |
// flowexport          |  network admins      |    netflow export policy        |
//                     |                      |    includes interval,           |
//                     |                      |    export parameters            |
// -------------------------------------------------------------------------------
//
// =========================================================================================
//  stats policy
// =========================================================================================
type StatsStatus struct {
}

func (m *StatsStatus) Reset()                    { *m = StatsStatus{} }
func (m *StatsStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsStatus) ProtoMessage()               {}
func (*StatsStatus) Descriptor() ([]byte, []int) { return fileDescriptorTelemetry, []int{10} }

func init() {
	proto.RegisterType((*FlowExportPolicy)(nil), "monitoring.FlowExportPolicy")
	proto.RegisterType((*FlowExportSpec)(nil), "monitoring.FlowExportSpec")
	proto.RegisterType((*FlowExportStatus)(nil), "monitoring.FlowExportStatus")
	proto.RegisterType((*FlowExportTarget)(nil), "monitoring.FlowExportTarget")
	proto.RegisterType((*FwlogExport)(nil), "monitoring.FwlogExport")
	proto.RegisterType((*FwlogPolicy)(nil), "monitoring.FwlogPolicy")
	proto.RegisterType((*FwlogSpec)(nil), "monitoring.FwlogSpec")
	proto.RegisterType((*FwlogStatus)(nil), "monitoring.FwlogStatus")
	proto.RegisterType((*StatsPolicy)(nil), "monitoring.StatsPolicy")
	proto.RegisterType((*StatsSpec)(nil), "monitoring.StatsSpec")
	proto.RegisterType((*StatsStatus)(nil), "monitoring.StatsStatus")
	proto.RegisterEnum("monitoring.FwlogFilter", FwlogFilter_name, FwlogFilter_value)
	proto.RegisterEnum("monitoring.FlowExportTarget_Formats", FlowExportTarget_Formats_name, FlowExportTarget_Formats_value)
}
func (m *FlowExportPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *FlowExportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FlowExportTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogExport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SyslogConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.SyslogConfig.Size()))
		n5, err := m.SyslogConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *FwlogPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n8, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *FwlogSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RetentionTime) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionTime)))
		i += copy(dAtA[i:], m.RetentionTime)
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatsPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.ObjectMeta.Size()))
	n11, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Spec.Size()))
	n12, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x22
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Status.Size()))
	n13, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *StatsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompactionInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.CompactionInterval)))
		i += copy(dAtA[i:], m.CompactionInterval)
	}
	if len(m.RetentionTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.RetentionTime)))
		i += copy(dAtA[i:], m.RetentionTime)
	}
	if len(m.DownSampleRetentionTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.DownSampleRetentionTime)))
		i += copy(dAtA[i:], m.DownSampleRetentionTime)
	}
	return i, nil
}

func (m *StatsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowExportPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FlowExportSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FlowExportStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FlowExportTarget) Size() (n int) {
	var l int
	_ = l
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FwlogExport) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if m.SyslogConfig != nil {
		l = m.SyslogConfig.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *FwlogPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *FwlogSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovTelemetry(uint64(l))
		}
	}
	return n
}

func (m *FwlogStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatsPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	return n
}

func (m *StatsSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompactionInterval)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.RetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.DownSampleRetentionTime)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func (m *StatsStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowExportPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, FlowExportTarget{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, api1.ExportConfig{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, api1.ExportConfig{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyslogConfig == nil {
				m.SyslogConfig = &api1.SyslogExportConfig{}
			}
			if err := m.SyslogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, &FwlogExport{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSampleRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownSampleRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("telemetry.proto", fileDescriptorTelemetry) }

var fileDescriptorTelemetry = []byte{
	// 964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x25, 0xc1, 0x93, 0x9f, 0x6e, 0x87, 0xa6, 0xb1, 0x4d, 0xf0, 0x86, 0xad, 0x50,
	0x0b, 0x8a, 0xbd, 0x12, 0x95, 0x40, 0x20, 0x6e, 0x58, 0xd7, 0x46, 0x85, 0xa4, 0xb1, 0x6c, 0x4b,
	0x50, 0x15, 0x51, 0x6d, 0x36, 0xe3, 0xed, 0xa0, 0x9d, 0x99, 0xd5, 0xee, 0xb8, 0xae, 0x85, 0xb8,
	0x6c, 0xde, 0x85, 0x3c, 0x49, 0xef, 0xa8, 0xfa, 0x00, 0x16, 0x0a, 0x77, 0x7e, 0x00, 0xee, 0x40,
	0x68, 0x66, 0xd6, 0xf6, 0xac, 0x5d, 0x87, 0x54, 0xf4, 0xa2, 0x77, 0x3b, 0xe7, 0xe7, 0x3b, 0x67,
	0xbe, 0xf3, 0xcd, 0xb1, 0xc1, 0x55, 0x8e, 0x42, 0x44, 0x10, 0x8f, 0x87, 0xb5, 0x28, 0x66, 0x9c,
	0x41, 0x40, 0x18, 0xc5, 0x9c, 0xc5, 0x98, 0x06, 0xe5, 0xdd, 0x80, 0xb1, 0x20, 0x44, 0x8e, 0x17,
	0x61, 0xc7, 0xa3, 0x94, 0x71, 0x8f, 0x63, 0x46, 0x13, 0x15, 0x59, 0x6e, 0x04, 0x98, 0x3f, 0xee,
	0x1f, 0xd7, 0x7c, 0x46, 0x9c, 0x08, 0xd1, 0xc4, 0xa3, 0x27, 0xcc, 0x49, 0x06, 0xce, 0x13, 0x44,
	0xb1, 0x8f, 0x9c, 0x3e, 0xc7, 0x61, 0x22, 0x52, 0x03, 0x44, 0xf5, 0x6c, 0x07, 0x53, 0x3f, 0xec,
	0x9f, 0xa0, 0x09, 0x4c, 0x55, 0x83, 0x09, 0x58, 0xc0, 0x1c, 0x69, 0x3e, 0xee, 0xf7, 0xe4, 0x49,
	0x1e, 0xe4, 0x57, 0x1a, 0xfe, 0xd1, 0x92, 0xaa, 0xa2, 0x47, 0x82, 0xb8, 0x97, 0x86, 0xdd, 0xba,
	0x20, 0x0c, 0x3d, 0x8d, 0x58, 0xcc, 0xd3, 0xc0, 0x0d, 0x82, 0xe3, 0x98, 0xc5, 0xea, 0x64, 0xff,
	0x99, 0x03, 0x66, 0x33, 0x64, 0x83, 0x86, 0x0c, 0x69, 0xb1, 0x10, 0xfb, 0x43, 0xf8, 0x19, 0x30,
	0xba, 0x45, 0x63, 0xcf, 0xb8, 0xbd, 0xfe, 0xe9, 0x66, 0xcd, 0x8b, 0x70, 0xad, 0x3b, 0x8c, 0xd0,
	0x21, 0xe2, 0x9e, 0xfb, 0xde, 0xf3, 0x91, 0xb5, 0xf2, 0x62, 0x64, 0x19, 0xe3, 0x91, 0xb5, 0xb6,
	0x8f, 0x69, 0x88, 0x29, 0x6a, 0x4f, 0x3e, 0x60, 0x13, 0x18, 0x47, 0xc5, 0x9c, 0xcc, 0xbb, 0x2a,
	0xf3, 0x8e, 0x8e, 0x7f, 0x46, 0x3e, 0x97, 0x99, 0x65, 0x2d, 0x73, 0x4b, 0xf4, 0xbd, 0xcf, 0x08,
	0xe6, 0x88, 0x44, 0x7c, 0xd8, 0x9e, 0x3b, 0xc3, 0x16, 0xb8, 0xd2, 0x89, 0x90, 0x5f, 0xcc, 0x4b,
	0xa8, 0x72, 0x6d, 0x36, 0xa1, 0xda, 0xac, 0x57, 0x11, 0xe1, 0xde, 0x10, 0xa8, 0x02, 0x31, 0x89,
	0x90, 0xaf, 0x23, 0x66, 0xcf, 0xf0, 0x07, 0xb0, 0xda, 0xe1, 0x1e, 0xef, 0x27, 0xc5, 0x2b, 0x12,
	0x73, 0x77, 0x09, 0xa6, 0x8c, 0x71, 0x8b, 0x29, 0xaa, 0x99, 0xc8, 0xb3, 0x86, 0xbb, 0x60, 0xf9,
	0xf2, 0xe6, 0xcb, 0x67, 0x25, 0x0b, 0xac, 0x3b, 0xbf, 0x1c, 0xd5, 0xba, 0x88, 0x7a, 0x94, 0xff,
	0x0a, 0xcd, 0xde, 0x1c, 0xa1, 0x36, 0x01, 0x5b, 0xd9, 0xc6, 0xe1, 0x43, 0xb0, 0xd6, 0xf5, 0xe2,
	0x00, 0xf1, 0xa4, 0x68, 0xec, 0xe5, 0x97, 0x77, 0xa4, 0x82, 0xdc, 0x52, 0xda, 0xd1, 0x35, 0xae,
	0x92, 0xb4, 0x96, 0x16, 0x4d, 0x36, 0xd4, 0x67, 0xaa, 0xee, 0x64, 0xff, 0x95, 0x19, 0xb4, 0x82,
	0x85, 0x5f, 0x81, 0x77, 0xef, 0x51, 0x8e, 0xe2, 0x27, 0x5e, 0x28, 0xe7, 0x5d, 0x70, 0x6f, 0x8c,
	0x47, 0x16, 0xc4, 0xa9, 0x4d, 0xab, 0xf2, 0x0a, 0x1b, 0x7c, 0x08, 0x56, 0x9b, 0x2c, 0x26, 0x1e,
	0x97, 0x33, 0x2f, 0xb8, 0x5f, 0x9c, 0x9d, 0x96, 0x3e, 0xec, 0xf0, 0xb8, 0x41, 0xfb, 0xe4, 0xf6,
	0x7c, 0xad, 0x9a, 0x0a, 0x4d, 0x3e, 0x16, 0xbc, 0xf6, 0xe4, 0xb7, 0xce, 0xeb, 0xbc, 0x05, 0x3e,
	0x02, 0xe0, 0xd0, 0xe3, 0xfe, 0xe3, 0x76, 0x3f, 0x44, 0x49, 0x31, 0x2f, 0x39, 0xda, 0xd6, 0x39,
	0x9a, 0x7a, 0xdd, 0x0f, 0x52, 0x72, 0xb6, 0x89, 0x30, 0x55, 0x63, 0x91, 0xa1, 0x61, 0xbf, 0xda,
	0x0c, 0x5b, 0x60, 0x4d, 0xf5, 0x27, 0x34, 0x21, 0xd0, 0xaf, 0x49, 0xc9, 0x2a, 0x5b, 0x9d, 0xd1,
	0x1e, 0x0e, 0x66, 0xb4, 0xab, 0x17, 0x94, 0xa1, 0x7d, 0xc1, 0x64, 0x5f, 0x07, 0x6b, 0xe9, 0x25,
	0x61, 0x01, 0xbc, 0x73, 0x2f, 0xea, 0xe1, 0xa7, 0xe6, 0x8a, 0xfd, 0x77, 0x0e, 0xac, 0x37, 0x07,
	0x21, 0x0b, 0x14, 0xb2, 0xa8, 0x9b, 0x9d, 0xfc, 0x45, 0x75, 0x2f, 0x33, 0x6e, 0xf8, 0x60, 0x6e,
	0x0e, 0x9f, 0x9f, 0x9d, 0x96, 0xac, 0xc9, 0x1c, 0x0e, 0xa7, 0x8c, 0xa9, 0x0a, 0x2a, 0xf2, 0xb2,
	0x53, 0xf8, 0x11, 0xac, 0x36, 0x71, 0xc8, 0x51, 0x2c, 0x27, 0x50, 0x70, 0xef, 0x9c, 0x9d, 0x96,
	0xae, 0x4f, 0x47, 0x2c, 0x6e, 0xa5, 0xdc, 0x02, 0x6f, 0x47, 0x31, 0x52, 0xed, 0x49, 0x8b, 0x06,
	0xbb, 0xcc, 0x01, 0x7d, 0xb0, 0xd1, 0x19, 0x26, 0x21, 0x0b, 0xd4, 0xb5, 0xd3, 0xb7, 0xb9, 0x23,
	0xf9, 0x50, 0x8e, 0x0c, 0x2b, 0xef, 0x8b, 0x22, 0x89, 0xb4, 0x57, 0x7d, 0x69, 0xd2, 0x8b, 0x2c,
	0x71, 0xd8, 0xbf, 0x4f, 0xf8, 0x7f, 0x4b, 0x96, 0xdb, 0x77, 0x99, 0xe5, 0x96, 0x91, 0xb4, 0x6c,
	0xf3, 0xb5, 0xf6, 0x5a, 0x67, 0x6e, 0xaf, 0xed, 0x2c, 0xc2, 0xbd, 0xfe, 0x4a, 0xab, 0xbc, 0x7c,
	0x56, 0x2a, 0x67, 0x57, 0xda, 0x7a, 0x6f, 0xc6, 0xa0, 0xfd, 0x8f, 0x01, 0x0a, 0xd3, 0x56, 0xe1,
	0x21, 0xd8, 0x6c, 0x23, 0x8e, 0xa8, 0xf8, 0xad, 0xeb, 0x62, 0x82, 0xd2, 0x45, 0xb2, 0x3b, 0x1e,
	0x59, 0xc5, 0x78, 0xe2, 0xa8, 0x72, 0x4c, 0x90, 0x56, 0x74, 0xa9, 0x07, 0xde, 0x9f, 0x2a, 0x2e,
	0x27, 0x15, 0xb7, 0x7f, 0x81, 0xe2, 0xcc, 0x05, 0xa9, 0x2d, 0x58, 0x60, 0x7b, 0xf6, 0xcc, 0xd5,
	0x12, 0x59, 0xa4, 0x48, 0xf9, 0xdd, 0xed, 0x4b, 0x3f, 0xf4, 0xcd, 0x54, 0x51, 0xe9, 0x6a, 0x15,
	0x0a, 0x13, 0x9f, 0xc9, 0xdb, 0xaf, 0x30, 0xd9, 0xe6, 0x9b, 0x53, 0x98, 0x82, 0x7b, 0x33, 0x0a,
	0x4b, 0x66, 0x0c, 0xda, 0xbf, 0xe5, 0x40, 0x61, 0xda, 0x2a, 0xfc, 0x09, 0xc0, 0x3a, 0x23, 0x91,
	0xe7, 0x0b, 0xbd, 0xcc, 0xfd, 0x5e, 0xd9, 0xe3, 0x91, 0x55, 0xf1, 0xa7, 0xde, 0xea, 0xe4, 0x67,
	0x6a, 0x4f, 0xab, 0xff, 0x1f, 0xfe, 0x45, 0x05, 0xe7, 0xfe, 0x97, 0x82, 0x09, 0xd8, 0xb9, 0xcb,
	0x06, 0xb4, 0xe3, 0x91, 0x28, 0x44, 0x59, 0xe0, 0xbc, 0x04, 0xbe, 0x35, 0x1e, 0x59, 0x37, 0x4f,
	0xd8, 0x80, 0x26, 0x32, 0xa4, 0xba, 0xb4, 0xc6, 0x65, 0x82, 0x84, 0x18, 0xb5, 0x31, 0x7c, 0xd2,
	0x4a, 0xb5, 0xa9, 0x5e, 0x09, 0xdc, 0x04, 0x85, 0xe6, 0xf7, 0x07, 0x47, 0xdf, 0x3c, 0xfa, 0xfa,
	0xe0, 0xc0, 0x5c, 0x81, 0x26, 0xd8, 0x48, 0x8f, 0xf5, 0x7a, 0xa3, 0xd5, 0x35, 0x8d, 0x99, 0xa5,
	0xdd, 0xf8, 0xb6, 0x51, 0xef, 0x9a, 0x39, 0xb8, 0x05, 0x80, 0xb2, 0xdc, 0x6d, 0xdc, 0x7f, 0x60,
	0xe6, 0xdd, 0x8d, 0xe7, 0xe7, 0x15, 0xe3, 0xc5, 0x79, 0xc5, 0xf8, 0xe3, 0xbc, 0x62, 0xb4, 0x8c,
	0xe3, 0x55, 0xf9, 0xcf, 0xf1, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x06, 0x28, 0xd7,
	0x4a, 0x0b, 0x00, 0x00,
}
