// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: alerts.proto
*/
package monitoring

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/runtime"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/globals"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapAlerts = make(map[string]map[string][]func(interface{}) bool)

// MakeKey generates a KV store key for the object
func (m *Alert) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alerts/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AlertDestination) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alertDestinations/", m.Tenant, "/", m.Name)
}

// MakeKey generates a KV store key for the object
func (m *AlertPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.RootPrefix, "/", prefix, "/", "alertPolicies/", m.Tenant, "/", m.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *Alert) Clone(into interface{}) (interface{}, error) {
	var out *Alert
	var ok bool
	if into == nil {
		out = &Alert{}
	} else {
		out, ok = into.(*Alert)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Alert) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	ret = ret || m.Status.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertDestination) Clone(into interface{}) (interface{}, error) {
	var out *AlertDestination
	var ok bool
	if into == nil {
		out = &AlertDestination{}
	} else {
		out, ok = into.(*AlertDestination)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertDestination) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertDestinationSpec) Clone(into interface{}) (interface{}, error) {
	var out *AlertDestinationSpec
	var ok bool
	if into == nil {
		out = &AlertDestinationSpec{}
	} else {
		out, ok = into.(*AlertDestinationSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertDestinationSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.SNMPTrapServers {
		if m.SNMPTrapServers[k] != nil {
			ret = ret || m.SNMPTrapServers[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertDestinationStatus) Clone(into interface{}) (interface{}, error) {
	var out *AlertDestinationStatus
	var ok bool
	if into == nil {
		out = &AlertDestinationStatus{}
	} else {
		out, ok = into.(*AlertDestinationStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertDestinationStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertPolicy) Clone(into interface{}) (interface{}, error) {
	var out *AlertPolicy
	var ok bool
	if into == nil {
		out = &AlertPolicy{}
	} else {
		out, ok = into.(*AlertPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertPolicy) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Spec.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *AlertPolicySpec
	var ok bool
	if into == nil {
		out = &AlertPolicySpec{}
	} else {
		out, ok = into.(*AlertPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertPolicySpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Requirements {
		ret = ret || m.Requirements[k].Defaults(ver)
	}
	ret = true
	switch ver {
	default:
		m.Severity = SeverityLevel_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *AlertPolicyStatus
	var ok bool
	if into == nil {
		out = &AlertPolicyStatus{}
	} else {
		out, ok = into.(*AlertPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertPolicyStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertReason) Clone(into interface{}) (interface{}, error) {
	var out *AlertReason
	var ok bool
	if into == nil {
		out = &AlertReason{}
	} else {
		out, ok = into.(*AlertReason)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertReason) Defaults(ver string) bool {
	var ret bool
	for k := range m.MatchedRequirements {
		if m.MatchedRequirements[k] != nil {
			ret = ret || m.MatchedRequirements[k].Defaults(ver)
		}
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertSource) Clone(into interface{}) (interface{}, error) {
	var out *AlertSource
	var ok bool
	if into == nil {
		out = &AlertSource{}
	} else {
		out, ok = into.(*AlertSource)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertSource) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertSpec) Clone(into interface{}) (interface{}, error) {
	var out *AlertSpec
	var ok bool
	if into == nil {
		out = &AlertSpec{}
	} else {
		out, ok = into.(*AlertSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.State = AlertSpec_AlertState_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AlertStatus) Clone(into interface{}) (interface{}, error) {
	var out *AlertStatus
	var ok bool
	if into == nil {
		out = &AlertStatus{}
	} else {
		out, ok = into.(*AlertStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AlertStatus) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Reason.Defaults(ver)
	ret = true
	switch ver {
	default:
		m.Severity = SeverityLevel_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AuditInfo) Clone(into interface{}) (interface{}, error) {
	var out *AuditInfo
	var ok bool
	if into == nil {
		out = &AuditInfo{}
	} else {
		out, ok = into.(*AuditInfo)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuditInfo) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *AuthConfig) Clone(into interface{}) (interface{}, error) {
	var out *AuthConfig
	var ok bool
	if into == nil {
		out = &AuthConfig{}
	} else {
		out, ok = into.(*AuthConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuthConfig) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Algo = AuthConfig_Algos_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MatchedRequirement) Clone(into interface{}) (interface{}, error) {
	var out *MatchedRequirement
	var ok bool
	if into == nil {
		out = &MatchedRequirement{}
	} else {
		out, ok = into.(*MatchedRequirement)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MatchedRequirement) Defaults(ver string) bool {
	var ret bool
	ret = ret || m.Requirement.Defaults(ver)
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *PrivacyConfig) Clone(into interface{}) (interface{}, error) {
	var out *PrivacyConfig
	var ok bool
	if into == nil {
		out = &PrivacyConfig{}
	} else {
		out, ok = into.(*PrivacyConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PrivacyConfig) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Algo = PrivacyConfig_Algos_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *Requirement) Clone(into interface{}) (interface{}, error) {
	var out *Requirement
	var ok bool
	if into == nil {
		out = &Requirement{}
	} else {
		out, ok = into.(*Requirement)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *Requirement) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Operator = Requirement_AllowedOperators_name[0]
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SNMPTrapServer) Clone(into interface{}) (interface{}, error) {
	var out *SNMPTrapServer
	var ok bool
	if into == nil {
		out = &SNMPTrapServer{}
	} else {
		out, ok = into.(*SNMPTrapServer)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SNMPTrapServer) Defaults(ver string) bool {
	var ret bool
	if m.AuthConfig != nil {
		ret = ret || m.AuthConfig.Defaults(ver)
	}
	if m.PrivacyConfig != nil {
		ret = ret || m.PrivacyConfig.Defaults(ver)
	}
	ret = true
	switch ver {
	default:
		m.Version = SNMPTrapServer_SNMPVersions_name[0]
	}
	return ret
}

// Validators

func (m *Alert) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	if !ignoreStatus {
		if !m.Status.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertDestination) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AlertDestinationSpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.SNMPTrapServers {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertDestinationStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertPolicy) Validate(ver string, ignoreStatus bool) bool {
	if !m.Spec.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *AlertPolicySpec) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.Requirements {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	if vs, ok := validatorMapAlerts["AlertPolicySpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["AlertPolicySpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AlertPolicyStatus) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertReason) Validate(ver string, ignoreStatus bool) bool {
	for _, v := range m.MatchedRequirements {
		if !v.Validate(ver, ignoreStatus) {
			return false
		}
	}
	return true
}

func (m *AlertSource) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AlertSpec) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapAlerts["AlertSpec"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["AlertSpec"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AlertStatus) Validate(ver string, ignoreStatus bool) bool {
	if !m.Reason.Validate(ver, ignoreStatus) {
		return false
	}
	if vs, ok := validatorMapAlerts["AlertStatus"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["AlertStatus"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *AuditInfo) Validate(ver string, ignoreStatus bool) bool {
	return true
}

func (m *AuthConfig) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapAlerts["AuthConfig"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["AuthConfig"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *MatchedRequirement) Validate(ver string, ignoreStatus bool) bool {
	if !m.Requirement.Validate(ver, ignoreStatus) {
		return false
	}
	return true
}

func (m *PrivacyConfig) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapAlerts["PrivacyConfig"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["PrivacyConfig"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *Requirement) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapAlerts["Requirement"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["Requirement"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func (m *SNMPTrapServer) Validate(ver string, ignoreStatus bool) bool {
	if vs, ok := validatorMapAlerts["SNMPTrapServer"][ver]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	} else if vs, ok := validatorMapAlerts["SNMPTrapServer"]["all"]; ok {
		for _, v := range vs {
			if !v(m) {
				return false
			}
		}
	}
	return true
}

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&Alert{},
		&AlertDestination{},
		&AlertPolicy{},
	)

	validatorMapAlerts = make(map[string]map[string][]func(interface{}) bool)

	validatorMapAlerts["AlertPolicySpec"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["AlertPolicySpec"]["all"] = append(validatorMapAlerts["AlertPolicySpec"]["all"], func(i interface{}) bool {
		m := i.(*AlertPolicySpec)

		if _, ok := SeverityLevel_value[m.Severity]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["AlertSpec"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["AlertSpec"]["all"] = append(validatorMapAlerts["AlertSpec"]["all"], func(i interface{}) bool {
		m := i.(*AlertSpec)

		if _, ok := AlertSpec_AlertState_value[m.State]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["AlertStatus"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["AlertStatus"]["all"] = append(validatorMapAlerts["AlertStatus"]["all"], func(i interface{}) bool {
		m := i.(*AlertStatus)

		if _, ok := SeverityLevel_value[m.Severity]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["AuthConfig"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["AuthConfig"]["all"] = append(validatorMapAlerts["AuthConfig"]["all"], func(i interface{}) bool {
		m := i.(*AuthConfig)

		if _, ok := AuthConfig_Algos_value[m.Algo]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["PrivacyConfig"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["PrivacyConfig"]["all"] = append(validatorMapAlerts["PrivacyConfig"]["all"], func(i interface{}) bool {
		m := i.(*PrivacyConfig)

		if _, ok := PrivacyConfig_Algos_value[m.Algo]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["Requirement"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["Requirement"]["all"] = append(validatorMapAlerts["Requirement"]["all"], func(i interface{}) bool {
		m := i.(*Requirement)

		if _, ok := Requirement_AllowedOperators_value[m.Operator]; !ok {
			return false
		}
		return true
	})

	validatorMapAlerts["SNMPTrapServer"] = make(map[string][]func(interface{}) bool)
	validatorMapAlerts["SNMPTrapServer"]["all"] = append(validatorMapAlerts["SNMPTrapServer"]["all"], func(i interface{}) bool {
		m := i.(*SNMPTrapServer)

		if _, ok := SNMPTrapServer_SNMPVersions_value[m.Version]; !ok {
			return false
		}
		return true
	})

}
