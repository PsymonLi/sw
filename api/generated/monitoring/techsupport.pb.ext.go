// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: techsupport.proto
*/
package monitoring

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// TechSupportJobStatus_normal is a map of normalized values for the enum
var TechSupportJobStatus_normal = map[string]string{
	"Completed": "Completed",
	"Failed":    "Failed",
	"Running":   "Running",
	"Scheduled": "Scheduled",
	"TimeOut":   "TimeOut",
	"completed": "Completed",
	"failed":    "Failed",
	"running":   "Running",
	"scheduled": "Scheduled",
	"timeout":   "TimeOut",
}

var _ validators.DummyVar
var validatorMapTechsupport = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *TechSupportRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "techsupport/", m.Name)
}

func (m *TechSupportRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/techsupport/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *TechSupportNodeResult) Clone(into interface{}) (interface{}, error) {
	var out *TechSupportNodeResult
	var ok bool
	if into == nil {
		out = &TechSupportNodeResult{}
	} else {
		out, ok = into.(*TechSupportNodeResult)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TechSupportNodeResult))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TechSupportNodeResult) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "Scheduled"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *TechSupportRequest) Clone(into interface{}) (interface{}, error) {
	var out *TechSupportRequest
	var ok bool
	if into == nil {
		out = &TechSupportRequest{}
	} else {
		out, ok = into.(*TechSupportRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TechSupportRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TechSupportRequest) Defaults(ver string) bool {
	var ret bool
	m.Kind = "TechSupportRequest"
	ret = m.Tenant != "" || m.Namespace != ""
	if ret {
		m.Tenant, m.Namespace = "", ""
	}
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *TechSupportRequestSpec) Clone(into interface{}) (interface{}, error) {
	var out *TechSupportRequestSpec
	var ok bool
	if into == nil {
		out = &TechSupportRequestSpec{}
	} else {
		out, ok = into.(*TechSupportRequestSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TechSupportRequestSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TechSupportRequestSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TechSupportRequestSpec_NodeSelectorSpec) Clone(into interface{}) (interface{}, error) {
	var out *TechSupportRequestSpec_NodeSelectorSpec
	var ok bool
	if into == nil {
		out = &TechSupportRequestSpec_NodeSelectorSpec{}
	} else {
		out, ok = into.(*TechSupportRequestSpec_NodeSelectorSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TechSupportRequestSpec_NodeSelectorSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TechSupportRequestSpec_NodeSelectorSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TechSupportRequestStatus) Clone(into interface{}) (interface{}, error) {
	var out *TechSupportRequestStatus
	var ok bool
	if into == nil {
		out = &TechSupportRequestStatus{}
	} else {
		out, ok = into.(*TechSupportRequestStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*TechSupportRequestStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *TechSupportRequestStatus) Defaults(ver string) bool {
	var ret bool
	for k := range m.ControllerNodeResults {
		if m.ControllerNodeResults[k] != nil {
			i := m.ControllerNodeResults[k]
			ret = i.Defaults(ver) || ret
		}
	}
	for k := range m.SmartNICNodeResults {
		if m.SmartNICNodeResults[k] != nil {
			i := m.SmartNICNodeResults[k]
			ret = i.Defaults(ver) || ret
		}
	}
	ret = true
	switch ver {
	default:
		m.Status = "Scheduled"
	}
	return ret
}

// Validators and Requirements

func (m *TechSupportNodeResult) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TechSupportNodeResult) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapTechsupport["TechSupportNodeResult"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapTechsupport["TechSupportNodeResult"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *TechSupportNodeResult) Normalize() {

	m.Status = TechSupportJobStatus_normal[strings.ToLower(m.Status)]

}

func (m *TechSupportRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TechSupportRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Tenant != "" {
		ret = append(ret, errors.New("Tenant not allowed for TechSupportRequest"))
	}
	if m.Namespace != "" {
		ret = append(ret, errors.New("Namespace not allowed for TechSupportRequest"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *TechSupportRequest) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *TechSupportRequestSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TechSupportRequestSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.CollectionSelector != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "CollectionSelector"
			if errs := m.CollectionSelector.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}

	if m.NodeSelector != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "NodeSelector"
			if errs := m.NodeSelector.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *TechSupportRequestSpec) Normalize() {

	if m.CollectionSelector != nil {
		m.CollectionSelector.Normalize()
	}

	if m.NodeSelector != nil {
		m.NodeSelector.Normalize()
	}

}

func (m *TechSupportRequestSpec_NodeSelectorSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TechSupportRequestSpec_NodeSelectorSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Labels != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Labels"
			if errs := m.Labels.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) Normalize() {

	if m.Labels != nil {
		m.Labels.Normalize()
	}

}

func (m *TechSupportRequestStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *TechSupportRequestStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.ControllerNodeResults {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sControllerNodeResults[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	for k, v := range m.SmartNICNodeResults {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sSmartNICNodeResults[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapTechsupport["TechSupportRequestStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapTechsupport["TechSupportRequestStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *TechSupportRequestStatus) Normalize() {

	for _, v := range m.ControllerNodeResults {
		if v != nil {
			v.Normalize()
		}
	}

	for _, v := range m.SmartNICNodeResults {
		if v != nil {
			v.Normalize()
		}
	}

	m.Status = TechSupportJobStatus_normal[strings.ToLower(m.Status)]

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&TechSupportRequest{},
	)

	validatorMapTechsupport = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapTechsupport["TechSupportNodeResult"] = make(map[string][]func(string, interface{}) error)
	validatorMapTechsupport["TechSupportNodeResult"]["all"] = append(validatorMapTechsupport["TechSupportNodeResult"]["all"], func(path string, i interface{}) error {
		m := i.(*TechSupportNodeResult)

		if _, ok := TechSupportJobStatus_value[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range TechSupportJobStatus_value {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

	validatorMapTechsupport["TechSupportRequestStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapTechsupport["TechSupportRequestStatus"]["all"] = append(validatorMapTechsupport["TechSupportRequestStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*TechSupportRequestStatus)

		if _, ok := TechSupportJobStatus_value[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range TechSupportJobStatus_value {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
