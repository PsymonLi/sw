// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_monitoring.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AlertDestinationList is a container object for list of AlertDestination objects
type AlertDestinationList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of AlertDestination objects
	Items []*AlertDestination `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AlertDestinationList) Reset()         { *m = AlertDestinationList{} }
func (m *AlertDestinationList) String() string { return proto.CompactTextString(m) }
func (*AlertDestinationList) ProtoMessage()    {}
func (*AlertDestinationList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{0}
}

func (m *AlertDestinationList) GetItems() []*AlertDestination {
	if m != nil {
		return m.Items
	}
	return nil
}

// AlertList is a container object for list of Alert objects
type AlertList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Alert objects
	Items []*Alert `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AlertList) Reset()                    { *m = AlertList{} }
func (m *AlertList) String() string            { return proto.CompactTextString(m) }
func (*AlertList) ProtoMessage()               {}
func (*AlertList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{1} }

func (m *AlertList) GetItems() []*Alert {
	if m != nil {
		return m.Items
	}
	return nil
}

// AlertPolicyList is a container object for list of AlertPolicy objects
type AlertPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of AlertPolicy objects
	Items []*AlertPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *AlertPolicyList) Reset()                    { *m = AlertPolicyList{} }
func (m *AlertPolicyList) String() string            { return proto.CompactTextString(m) }
func (*AlertPolicyList) ProtoMessage()               {}
func (*AlertPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{2} }

func (m *AlertPolicyList) GetItems() []*AlertPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// AutoMsgAlertDestinationWatchHelper is a wrapper object for watch events for AlertDestination objects
type AutoMsgAlertDestinationWatchHelper struct {
	Events []*AutoMsgAlertDestinationWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgAlertDestinationWatchHelper) Reset()         { *m = AutoMsgAlertDestinationWatchHelper{} }
func (m *AutoMsgAlertDestinationWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertDestinationWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertDestinationWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{3}
}

func (m *AutoMsgAlertDestinationWatchHelper) GetEvents() []*AutoMsgAlertDestinationWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertDestinationWatchHelper_WatchEvent struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *AlertDestination `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgAlertDestinationWatchHelper_WatchEvent{}
}
func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgAlertDestinationWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgAlertDestinationWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{3, 0}
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) GetObject() *AlertDestination {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgAlertPolicyWatchHelper is a wrapper object for watch events for AlertPolicy objects
type AutoMsgAlertPolicyWatchHelper struct {
	Events []*AutoMsgAlertPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgAlertPolicyWatchHelper) Reset()         { *m = AutoMsgAlertPolicyWatchHelper{} }
func (m *AutoMsgAlertPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{4}
}

func (m *AutoMsgAlertPolicyWatchHelper) GetEvents() []*AutoMsgAlertPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *AlertPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgAlertPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgAlertPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{4, 0}
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) GetObject() *AlertPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgAlertWatchHelper is a wrapper object for watch events for Alert objects
type AutoMsgAlertWatchHelper struct {
	Events []*AutoMsgAlertWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgAlertWatchHelper) Reset()         { *m = AutoMsgAlertWatchHelper{} }
func (m *AutoMsgAlertWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{5}
}

func (m *AutoMsgAlertWatchHelper) GetEvents() []*AutoMsgAlertWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Alert `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Reset()         { *m = AutoMsgAlertWatchHelper_WatchEvent{} }
func (m *AutoMsgAlertWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgAlertWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{5, 0}
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) GetObject() *Alert {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgEventPolicyWatchHelper is a wrapper object for watch events for EventPolicy objects
type AutoMsgEventPolicyWatchHelper struct {
	Events []*AutoMsgEventPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgEventPolicyWatchHelper) Reset()         { *m = AutoMsgEventPolicyWatchHelper{} }
func (m *AutoMsgEventPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgEventPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{6}
}

func (m *AutoMsgEventPolicyWatchHelper) GetEvents() []*AutoMsgEventPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgEventPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *EventPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgEventPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgEventPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{6, 0}
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) GetObject() *EventPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgEventWatchHelper is a wrapper object for watch events for Event objects
type AutoMsgEventWatchHelper struct {
	Events []*AutoMsgEventWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgEventWatchHelper) Reset()         { *m = AutoMsgEventWatchHelper{} }
func (m *AutoMsgEventWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventWatchHelper) ProtoMessage()    {}
func (*AutoMsgEventWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{7}
}

func (m *AutoMsgEventWatchHelper) GetEvents() []*AutoMsgEventWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgEventWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *Event `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgEventWatchHelper_WatchEvent) Reset()         { *m = AutoMsgEventWatchHelper_WatchEvent{} }
func (m *AutoMsgEventWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgEventWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{7, 0}
}

func (m *AutoMsgEventWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEventWatchHelper_WatchEvent) GetObject() *Event {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgFlowExportPolicyWatchHelper is a wrapper object for watch events for FlowExportPolicy objects
type AutoMsgFlowExportPolicyWatchHelper struct {
	Events []*AutoMsgFlowExportPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Reset()         { *m = AutoMsgFlowExportPolicyWatchHelper{} }
func (m *AutoMsgFlowExportPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFlowExportPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgFlowExportPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{8}
}

func (m *AutoMsgFlowExportPolicyWatchHelper) GetEvents() []*AutoMsgFlowExportPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgFlowExportPolicyWatchHelper_WatchEvent struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *FlowExportPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgFlowExportPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgFlowExportPolicyWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{8, 0}
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) GetObject() *FlowExportPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgFwlogPolicyWatchHelper is a wrapper object for watch events for FwlogPolicy objects
type AutoMsgFwlogPolicyWatchHelper struct {
	Events []*AutoMsgFwlogPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgFwlogPolicyWatchHelper) Reset()         { *m = AutoMsgFwlogPolicyWatchHelper{} }
func (m *AutoMsgFwlogPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFwlogPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgFwlogPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{9}
}

func (m *AutoMsgFwlogPolicyWatchHelper) GetEvents() []*AutoMsgFwlogPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgFwlogPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *FwlogPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgFwlogPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFwlogPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgFwlogPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{9, 0}
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) GetObject() *FwlogPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgMirrorSessionWatchHelper is a wrapper object for watch events for MirrorSession objects
type AutoMsgMirrorSessionWatchHelper struct {
	Events []*AutoMsgMirrorSessionWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgMirrorSessionWatchHelper) Reset()         { *m = AutoMsgMirrorSessionWatchHelper{} }
func (m *AutoMsgMirrorSessionWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgMirrorSessionWatchHelper) ProtoMessage()    {}
func (*AutoMsgMirrorSessionWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{10}
}

func (m *AutoMsgMirrorSessionWatchHelper) GetEvents() []*AutoMsgMirrorSessionWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgMirrorSessionWatchHelper_WatchEvent struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *MirrorSession `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgMirrorSessionWatchHelper_WatchEvent{}
}
func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgMirrorSessionWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgMirrorSessionWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{10, 0}
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) GetObject() *MirrorSession {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgStatsPolicyWatchHelper is a wrapper object for watch events for StatsPolicy objects
type AutoMsgStatsPolicyWatchHelper struct {
	Events []*AutoMsgStatsPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *AutoMsgStatsPolicyWatchHelper) Reset()         { *m = AutoMsgStatsPolicyWatchHelper{} }
func (m *AutoMsgStatsPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgStatsPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgStatsPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{11}
}

func (m *AutoMsgStatsPolicyWatchHelper) GetEvents() []*AutoMsgStatsPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgStatsPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *StatsPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgStatsPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgStatsPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgStatsPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{11, 0}
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) GetObject() *StatsPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// EventList is a container object for list of Event objects
type EventList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of Event objects
	Items []*Event `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{12} }

func (m *EventList) GetItems() []*Event {
	if m != nil {
		return m.Items
	}
	return nil
}

// EventPolicyList is a container object for list of EventPolicy objects
type EventPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of EventPolicy objects
	Items []*EventPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *EventPolicyList) Reset()                    { *m = EventPolicyList{} }
func (m *EventPolicyList) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyList) ProtoMessage()               {}
func (*EventPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{13} }

func (m *EventPolicyList) GetItems() []*EventPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// FlowExportPolicyList is a container object for list of FlowExportPolicy objects
type FlowExportPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of FlowExportPolicy objects
	Items []*FlowExportPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *FlowExportPolicyList) Reset()         { *m = FlowExportPolicyList{} }
func (m *FlowExportPolicyList) String() string { return proto.CompactTextString(m) }
func (*FlowExportPolicyList) ProtoMessage()    {}
func (*FlowExportPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{14}
}

func (m *FlowExportPolicyList) GetItems() []*FlowExportPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// FwlogPolicyList is a container object for list of FwlogPolicy objects
type FwlogPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of FwlogPolicy objects
	Items []*FwlogPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *FwlogPolicyList) Reset()                    { *m = FwlogPolicyList{} }
func (m *FwlogPolicyList) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyList) ProtoMessage()               {}
func (*FwlogPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{15} }

func (m *FwlogPolicyList) GetItems() []*FwlogPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// MirrorSessionList is a container object for list of MirrorSession objects
type MirrorSessionList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of MirrorSession objects
	Items []*MirrorSession `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *MirrorSessionList) Reset()                    { *m = MirrorSessionList{} }
func (m *MirrorSessionList) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionList) ProtoMessage()               {}
func (*MirrorSessionList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{16} }

func (m *MirrorSessionList) GetItems() []*MirrorSession {
	if m != nil {
		return m.Items
	}
	return nil
}

// StatsPolicyList is a container object for list of StatsPolicy objects
type StatsPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// List of StatsPolicy objects
	Items []*StatsPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *StatsPolicyList) Reset()                    { *m = StatsPolicyList{} }
func (m *StatsPolicyList) String() string            { return proto.CompactTextString(m) }
func (*StatsPolicyList) ProtoMessage()               {}
func (*StatsPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{17} }

func (m *StatsPolicyList) GetItems() []*StatsPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AlertDestinationList)(nil), "monitoring.AlertDestinationList")
	proto.RegisterType((*AlertList)(nil), "monitoring.AlertList")
	proto.RegisterType((*AlertPolicyList)(nil), "monitoring.AlertPolicyList")
	proto.RegisterType((*AutoMsgAlertDestinationWatchHelper)(nil), "monitoring.AutoMsgAlertDestinationWatchHelper")
	proto.RegisterType((*AutoMsgAlertDestinationWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertDestinationWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgAlertPolicyWatchHelper)(nil), "monitoring.AutoMsgAlertPolicyWatchHelper")
	proto.RegisterType((*AutoMsgAlertPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgAlertWatchHelper)(nil), "monitoring.AutoMsgAlertWatchHelper")
	proto.RegisterType((*AutoMsgAlertWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgEventPolicyWatchHelper)(nil), "monitoring.AutoMsgEventPolicyWatchHelper")
	proto.RegisterType((*AutoMsgEventPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgEventPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgEventWatchHelper)(nil), "monitoring.AutoMsgEventWatchHelper")
	proto.RegisterType((*AutoMsgEventWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgEventWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgFlowExportPolicyWatchHelper)(nil), "monitoring.AutoMsgFlowExportPolicyWatchHelper")
	proto.RegisterType((*AutoMsgFlowExportPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgFlowExportPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgFwlogPolicyWatchHelper)(nil), "monitoring.AutoMsgFwlogPolicyWatchHelper")
	proto.RegisterType((*AutoMsgFwlogPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgFwlogPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgMirrorSessionWatchHelper)(nil), "monitoring.AutoMsgMirrorSessionWatchHelper")
	proto.RegisterType((*AutoMsgMirrorSessionWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgMirrorSessionWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgStatsPolicyWatchHelper)(nil), "monitoring.AutoMsgStatsPolicyWatchHelper")
	proto.RegisterType((*AutoMsgStatsPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgStatsPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*EventList)(nil), "monitoring.EventList")
	proto.RegisterType((*EventPolicyList)(nil), "monitoring.EventPolicyList")
	proto.RegisterType((*FlowExportPolicyList)(nil), "monitoring.FlowExportPolicyList")
	proto.RegisterType((*FwlogPolicyList)(nil), "monitoring.FwlogPolicyList")
	proto.RegisterType((*MirrorSessionList)(nil), "monitoring.MirrorSessionList")
	proto.RegisterType((*StatsPolicyList)(nil), "monitoring.StatsPolicyList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MonitoringV1 service

type MonitoringV1Client interface {
	// Creates a new Alert object
	AutoAddAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Creates a new AlertDestination object
	AutoAddAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Creates a new AlertPolicy object
	AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Creates a new Event object
	AutoAddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Creates a new EventPolicy object
	AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Creates a new FlowExportPolicy object
	AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Creates a new FwlogPolicy object
	AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Creates a new MirrorSession object
	AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Creates a new StatsPolicy object
	AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error)
	// Deletes the Alert object
	AutoDeleteAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Deletes the AlertDestination object
	AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Deletes the AlertPolicy object
	AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Deletes the Event object
	AutoDeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Deletes the EventPolicy object
	AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Deletes the FlowExportPolicy object
	AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Deletes the FwlogPolicy object
	AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Deletes the MirrorSession object
	AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Deletes the StatsPolicy object
	AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error)
	// Retreives the Alert object
	AutoGetAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Retreives the AlertDestination object
	AutoGetAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Retreives the AlertPolicy object
	AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Retreives the Event object
	AutoGetEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Retreives the EventPolicy object
	AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Retreives the FlowExportPolicy object
	AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Retreives the FwlogPolicy object
	AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Retreives the MirrorSession object
	AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Retreives the StatsPolicy object
	AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error)
	// Retreives a list of Alert objects
	AutoListAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertList, error)
	// Retreives a list of AlertDestination objects
	AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertDestinationList, error)
	// Retreives a list of AlertPolicy objects
	AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertPolicyList, error)
	// Retreives a list of Event objects
	AutoListEvent(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventList, error)
	// Retreives a list of EventPolicy objects
	AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error)
	// Retreives a list of FlowExportPolicy objects
	AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FlowExportPolicyList, error)
	// Retreives a list of FwlogPolicy objects
	AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FwlogPolicyList, error)
	// Retreives a list of MirrorSession objects
	AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error)
	// Retreives a list of StatsPolicy objects
	AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*StatsPolicyList, error)
	AutoUpdateAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	AutoUpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error)
	// Watch for changes to Alert objects
	AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertClient, error)
	// Watch for changes to AlertDestination objects
	AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertDestinationClient, error)
	// Watch for changes to AlertPolicy objects
	AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertPolicyClient, error)
	// Watch for changes to Event objects
	AutoWatchEvent(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventClient, error)
	// Watch for changes to EventPolicy objects
	AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventPolicyClient, error)
	// Watch for changes to FlowExportPolicy objects
	AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFlowExportPolicyClient, error)
	// Watch for changes to FwlogPolicy objects
	AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFwlogPolicyClient, error)
	// Watch for changes to MirrorSession objects
	AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchMirrorSessionClient, error)
	// Watch for changes to StatsPolicy objects
	AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchStatsPolicyClient, error)
}

type monitoringV1Client struct {
	cc *grpc.ClientConn
}

func NewMonitoringV1Client(cc *grpc.ClientConn) MonitoringV1Client {
	return &monitoringV1Client{cc}
}

func (c *monitoringV1Client) AutoAddAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error) {
	out := new(StatsPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddStatsPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error) {
	out := new(StatsPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteStatsPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error) {
	out := new(StatsPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetStatsPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertList, error) {
	out := new(AlertList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertDestinationList, error) {
	out := new(AlertDestinationList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertPolicyList, error) {
	out := new(AlertPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListEvent(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventList, error) {
	out := new(EventList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error) {
	out := new(EventPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FlowExportPolicyList, error) {
	out := new(FlowExportPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FwlogPolicyList, error) {
	out := new(FwlogPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error) {
	out := new(MirrorSessionList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListStatsPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*StatsPolicyList, error) {
	out := new(StatsPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListStatsPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateStatsPolicy(ctx context.Context, in *StatsPolicy, opts ...grpc.CallOption) (*StatsPolicy, error) {
	out := new(StatsPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateStatsPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[0], c.cc, "/monitoring.MonitoringV1/AutoWatchAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertClient interface {
	Recv() (*AutoMsgAlertWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertClient) Recv() (*AutoMsgAlertWatchHelper, error) {
	m := new(AutoMsgAlertWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertDestinationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[1], c.cc, "/monitoring.MonitoringV1/AutoWatchAlertDestination", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertDestinationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertDestinationClient interface {
	Recv() (*AutoMsgAlertDestinationWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertDestinationClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertDestinationClient) Recv() (*AutoMsgAlertDestinationWatchHelper, error) {
	m := new(AutoMsgAlertDestinationWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[2], c.cc, "/monitoring.MonitoringV1/AutoWatchAlertPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertPolicyClient interface {
	Recv() (*AutoMsgAlertPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertPolicyClient) Recv() (*AutoMsgAlertPolicyWatchHelper, error) {
	m := new(AutoMsgAlertPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchEvent(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[3], c.cc, "/monitoring.MonitoringV1/AutoWatchEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchEventClient interface {
	Recv() (*AutoMsgEventWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchEventClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchEventClient) Recv() (*AutoMsgEventWatchHelper, error) {
	m := new(AutoMsgEventWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[4], c.cc, "/monitoring.MonitoringV1/AutoWatchEventPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchEventPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchEventPolicyClient interface {
	Recv() (*AutoMsgEventPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchEventPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchEventPolicyClient) Recv() (*AutoMsgEventPolicyWatchHelper, error) {
	m := new(AutoMsgEventPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFlowExportPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[5], c.cc, "/monitoring.MonitoringV1/AutoWatchFlowExportPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchFlowExportPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchFlowExportPolicyClient interface {
	Recv() (*AutoMsgFlowExportPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchFlowExportPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchFlowExportPolicyClient) Recv() (*AutoMsgFlowExportPolicyWatchHelper, error) {
	m := new(AutoMsgFlowExportPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFwlogPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[6], c.cc, "/monitoring.MonitoringV1/AutoWatchFwlogPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchFwlogPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchFwlogPolicyClient interface {
	Recv() (*AutoMsgFwlogPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchFwlogPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchFwlogPolicyClient) Recv() (*AutoMsgFwlogPolicyWatchHelper, error) {
	m := new(AutoMsgFwlogPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchMirrorSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[7], c.cc, "/monitoring.MonitoringV1/AutoWatchMirrorSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchMirrorSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchMirrorSessionClient interface {
	Recv() (*AutoMsgMirrorSessionWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchMirrorSessionClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchMirrorSessionClient) Recv() (*AutoMsgMirrorSessionWatchHelper, error) {
	m := new(AutoMsgMirrorSessionWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchStatsPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchStatsPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[8], c.cc, "/monitoring.MonitoringV1/AutoWatchStatsPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchStatsPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchStatsPolicyClient interface {
	Recv() (*AutoMsgStatsPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchStatsPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchStatsPolicyClient) Recv() (*AutoMsgStatsPolicyWatchHelper, error) {
	m := new(AutoMsgStatsPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MonitoringV1 service

type MonitoringV1Server interface {
	// Creates a new Alert object
	AutoAddAlert(context.Context, *Alert) (*Alert, error)
	// Creates a new AlertDestination object
	AutoAddAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Creates a new AlertPolicy object
	AutoAddAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Creates a new Event object
	AutoAddEvent(context.Context, *Event) (*Event, error)
	// Creates a new EventPolicy object
	AutoAddEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Creates a new FlowExportPolicy object
	AutoAddFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Creates a new FwlogPolicy object
	AutoAddFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Creates a new MirrorSession object
	AutoAddMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Creates a new StatsPolicy object
	AutoAddStatsPolicy(context.Context, *StatsPolicy) (*StatsPolicy, error)
	// Deletes the Alert object
	AutoDeleteAlert(context.Context, *Alert) (*Alert, error)
	// Deletes the AlertDestination object
	AutoDeleteAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Deletes the AlertPolicy object
	AutoDeleteAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Deletes the Event object
	AutoDeleteEvent(context.Context, *Event) (*Event, error)
	// Deletes the EventPolicy object
	AutoDeleteEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Deletes the FlowExportPolicy object
	AutoDeleteFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Deletes the FwlogPolicy object
	AutoDeleteFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Deletes the MirrorSession object
	AutoDeleteMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Deletes the StatsPolicy object
	AutoDeleteStatsPolicy(context.Context, *StatsPolicy) (*StatsPolicy, error)
	// Retreives the Alert object
	AutoGetAlert(context.Context, *Alert) (*Alert, error)
	// Retreives the AlertDestination object
	AutoGetAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Retreives the AlertPolicy object
	AutoGetAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Retreives the Event object
	AutoGetEvent(context.Context, *Event) (*Event, error)
	// Retreives the EventPolicy object
	AutoGetEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Retreives the FlowExportPolicy object
	AutoGetFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Retreives the FwlogPolicy object
	AutoGetFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Retreives the MirrorSession object
	AutoGetMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Retreives the StatsPolicy object
	AutoGetStatsPolicy(context.Context, *StatsPolicy) (*StatsPolicy, error)
	// Retreives a list of Alert objects
	AutoListAlert(context.Context, *api.ListWatchOptions) (*AlertList, error)
	// Retreives a list of AlertDestination objects
	AutoListAlertDestination(context.Context, *api.ListWatchOptions) (*AlertDestinationList, error)
	// Retreives a list of AlertPolicy objects
	AutoListAlertPolicy(context.Context, *api.ListWatchOptions) (*AlertPolicyList, error)
	// Retreives a list of Event objects
	AutoListEvent(context.Context, *api.ListWatchOptions) (*EventList, error)
	// Retreives a list of EventPolicy objects
	AutoListEventPolicy(context.Context, *api.ListWatchOptions) (*EventPolicyList, error)
	// Retreives a list of FlowExportPolicy objects
	AutoListFlowExportPolicy(context.Context, *api.ListWatchOptions) (*FlowExportPolicyList, error)
	// Retreives a list of FwlogPolicy objects
	AutoListFwlogPolicy(context.Context, *api.ListWatchOptions) (*FwlogPolicyList, error)
	// Retreives a list of MirrorSession objects
	AutoListMirrorSession(context.Context, *api.ListWatchOptions) (*MirrorSessionList, error)
	// Retreives a list of StatsPolicy objects
	AutoListStatsPolicy(context.Context, *api.ListWatchOptions) (*StatsPolicyList, error)
	AutoUpdateAlert(context.Context, *Alert) (*Alert, error)
	AutoUpdateAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	AutoUpdateAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	AutoUpdateEvent(context.Context, *Event) (*Event, error)
	AutoUpdateEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	AutoUpdateFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	AutoUpdateFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	AutoUpdateMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	AutoUpdateStatsPolicy(context.Context, *StatsPolicy) (*StatsPolicy, error)
	// Watch for changes to Alert objects
	AutoWatchAlert(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertServer) error
	// Watch for changes to AlertDestination objects
	AutoWatchAlertDestination(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertDestinationServer) error
	// Watch for changes to AlertPolicy objects
	AutoWatchAlertPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertPolicyServer) error
	// Watch for changes to Event objects
	AutoWatchEvent(*api.ListWatchOptions, MonitoringV1_AutoWatchEventServer) error
	// Watch for changes to EventPolicy objects
	AutoWatchEventPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchEventPolicyServer) error
	// Watch for changes to FlowExportPolicy objects
	AutoWatchFlowExportPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchFlowExportPolicyServer) error
	// Watch for changes to FwlogPolicy objects
	AutoWatchFwlogPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchFwlogPolicyServer) error
	// Watch for changes to MirrorSession objects
	AutoWatchMirrorSession(*api.ListWatchOptions, MonitoringV1_AutoWatchMirrorSessionServer) error
	// Watch for changes to StatsPolicy objects
	AutoWatchStatsPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchStatsPolicyServer) error
}

func RegisterMonitoringV1Server(s *grpc.Server, srv MonitoringV1Server) {
	s.RegisterService(&_MonitoringV1_serviceDesc, srv)
}

func _MonitoringV1_AutoAddAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddStatsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddStatsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddStatsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddStatsPolicy(ctx, req.(*StatsPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteStatsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteStatsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteStatsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteStatsPolicy(ctx, req.(*StatsPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetStatsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetStatsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetStatsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetStatsPolicy(ctx, req.(*StatsPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlert(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlertDestination(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlertPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListEvent(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListEventPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListFlowExportPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListFwlogPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListMirrorSession(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListStatsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListStatsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListStatsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListStatsPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateStatsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateStatsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateStatsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateStatsPolicy(ctx, req.(*StatsPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoWatchAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlert(m, &monitoringV1AutoWatchAlertServer{stream})
}

type MonitoringV1_AutoWatchAlertServer interface {
	Send(*AutoMsgAlertWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertServer) Send(m *AutoMsgAlertWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchAlertDestination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlertDestination(m, &monitoringV1AutoWatchAlertDestinationServer{stream})
}

type MonitoringV1_AutoWatchAlertDestinationServer interface {
	Send(*AutoMsgAlertDestinationWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertDestinationServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertDestinationServer) Send(m *AutoMsgAlertDestinationWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchAlertPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlertPolicy(m, &monitoringV1AutoWatchAlertPolicyServer{stream})
}

type MonitoringV1_AutoWatchAlertPolicyServer interface {
	Send(*AutoMsgAlertPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertPolicyServer) Send(m *AutoMsgAlertPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchEvent(m, &monitoringV1AutoWatchEventServer{stream})
}

type MonitoringV1_AutoWatchEventServer interface {
	Send(*AutoMsgEventWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchEventServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchEventServer) Send(m *AutoMsgEventWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchEventPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchEventPolicy(m, &monitoringV1AutoWatchEventPolicyServer{stream})
}

type MonitoringV1_AutoWatchEventPolicyServer interface {
	Send(*AutoMsgEventPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchEventPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchEventPolicyServer) Send(m *AutoMsgEventPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchFlowExportPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchFlowExportPolicy(m, &monitoringV1AutoWatchFlowExportPolicyServer{stream})
}

type MonitoringV1_AutoWatchFlowExportPolicyServer interface {
	Send(*AutoMsgFlowExportPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchFlowExportPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchFlowExportPolicyServer) Send(m *AutoMsgFlowExportPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchFwlogPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchFwlogPolicy(m, &monitoringV1AutoWatchFwlogPolicyServer{stream})
}

type MonitoringV1_AutoWatchFwlogPolicyServer interface {
	Send(*AutoMsgFwlogPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchFwlogPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchFwlogPolicyServer) Send(m *AutoMsgFwlogPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchMirrorSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchMirrorSession(m, &monitoringV1AutoWatchMirrorSessionServer{stream})
}

type MonitoringV1_AutoWatchMirrorSessionServer interface {
	Send(*AutoMsgMirrorSessionWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchMirrorSessionServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchMirrorSessionServer) Send(m *AutoMsgMirrorSessionWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchStatsPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchStatsPolicy(m, &monitoringV1AutoWatchStatsPolicyServer{stream})
}

type MonitoringV1_AutoWatchStatsPolicyServer interface {
	Send(*AutoMsgStatsPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchStatsPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchStatsPolicyServer) Send(m *AutoMsgStatsPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitoringV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.MonitoringV1",
	HandlerType: (*MonitoringV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddAlert",
			Handler:    _MonitoringV1_AutoAddAlert_Handler,
		},
		{
			MethodName: "AutoAddAlertDestination",
			Handler:    _MonitoringV1_AutoAddAlertDestination_Handler,
		},
		{
			MethodName: "AutoAddAlertPolicy",
			Handler:    _MonitoringV1_AutoAddAlertPolicy_Handler,
		},
		{
			MethodName: "AutoAddEvent",
			Handler:    _MonitoringV1_AutoAddEvent_Handler,
		},
		{
			MethodName: "AutoAddEventPolicy",
			Handler:    _MonitoringV1_AutoAddEventPolicy_Handler,
		},
		{
			MethodName: "AutoAddFlowExportPolicy",
			Handler:    _MonitoringV1_AutoAddFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoAddFwlogPolicy",
			Handler:    _MonitoringV1_AutoAddFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoAddMirrorSession",
			Handler:    _MonitoringV1_AutoAddMirrorSession_Handler,
		},
		{
			MethodName: "AutoAddStatsPolicy",
			Handler:    _MonitoringV1_AutoAddStatsPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteAlert",
			Handler:    _MonitoringV1_AutoDeleteAlert_Handler,
		},
		{
			MethodName: "AutoDeleteAlertDestination",
			Handler:    _MonitoringV1_AutoDeleteAlertDestination_Handler,
		},
		{
			MethodName: "AutoDeleteAlertPolicy",
			Handler:    _MonitoringV1_AutoDeleteAlertPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteEvent",
			Handler:    _MonitoringV1_AutoDeleteEvent_Handler,
		},
		{
			MethodName: "AutoDeleteEventPolicy",
			Handler:    _MonitoringV1_AutoDeleteEventPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteFlowExportPolicy",
			Handler:    _MonitoringV1_AutoDeleteFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteFwlogPolicy",
			Handler:    _MonitoringV1_AutoDeleteFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteMirrorSession",
			Handler:    _MonitoringV1_AutoDeleteMirrorSession_Handler,
		},
		{
			MethodName: "AutoDeleteStatsPolicy",
			Handler:    _MonitoringV1_AutoDeleteStatsPolicy_Handler,
		},
		{
			MethodName: "AutoGetAlert",
			Handler:    _MonitoringV1_AutoGetAlert_Handler,
		},
		{
			MethodName: "AutoGetAlertDestination",
			Handler:    _MonitoringV1_AutoGetAlertDestination_Handler,
		},
		{
			MethodName: "AutoGetAlertPolicy",
			Handler:    _MonitoringV1_AutoGetAlertPolicy_Handler,
		},
		{
			MethodName: "AutoGetEvent",
			Handler:    _MonitoringV1_AutoGetEvent_Handler,
		},
		{
			MethodName: "AutoGetEventPolicy",
			Handler:    _MonitoringV1_AutoGetEventPolicy_Handler,
		},
		{
			MethodName: "AutoGetFlowExportPolicy",
			Handler:    _MonitoringV1_AutoGetFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoGetFwlogPolicy",
			Handler:    _MonitoringV1_AutoGetFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoGetMirrorSession",
			Handler:    _MonitoringV1_AutoGetMirrorSession_Handler,
		},
		{
			MethodName: "AutoGetStatsPolicy",
			Handler:    _MonitoringV1_AutoGetStatsPolicy_Handler,
		},
		{
			MethodName: "AutoListAlert",
			Handler:    _MonitoringV1_AutoListAlert_Handler,
		},
		{
			MethodName: "AutoListAlertDestination",
			Handler:    _MonitoringV1_AutoListAlertDestination_Handler,
		},
		{
			MethodName: "AutoListAlertPolicy",
			Handler:    _MonitoringV1_AutoListAlertPolicy_Handler,
		},
		{
			MethodName: "AutoListEvent",
			Handler:    _MonitoringV1_AutoListEvent_Handler,
		},
		{
			MethodName: "AutoListEventPolicy",
			Handler:    _MonitoringV1_AutoListEventPolicy_Handler,
		},
		{
			MethodName: "AutoListFlowExportPolicy",
			Handler:    _MonitoringV1_AutoListFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoListFwlogPolicy",
			Handler:    _MonitoringV1_AutoListFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoListMirrorSession",
			Handler:    _MonitoringV1_AutoListMirrorSession_Handler,
		},
		{
			MethodName: "AutoListStatsPolicy",
			Handler:    _MonitoringV1_AutoListStatsPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateAlert",
			Handler:    _MonitoringV1_AutoUpdateAlert_Handler,
		},
		{
			MethodName: "AutoUpdateAlertDestination",
			Handler:    _MonitoringV1_AutoUpdateAlertDestination_Handler,
		},
		{
			MethodName: "AutoUpdateAlertPolicy",
			Handler:    _MonitoringV1_AutoUpdateAlertPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateEvent",
			Handler:    _MonitoringV1_AutoUpdateEvent_Handler,
		},
		{
			MethodName: "AutoUpdateEventPolicy",
			Handler:    _MonitoringV1_AutoUpdateEventPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateFlowExportPolicy",
			Handler:    _MonitoringV1_AutoUpdateFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateFwlogPolicy",
			Handler:    _MonitoringV1_AutoUpdateFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateMirrorSession",
			Handler:    _MonitoringV1_AutoUpdateMirrorSession_Handler,
		},
		{
			MethodName: "AutoUpdateStatsPolicy",
			Handler:    _MonitoringV1_AutoUpdateStatsPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchAlert",
			Handler:       _MonitoringV1_AutoWatchAlert_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAlertDestination",
			Handler:       _MonitoringV1_AutoWatchAlertDestination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAlertPolicy",
			Handler:       _MonitoringV1_AutoWatchAlertPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchEvent",
			Handler:       _MonitoringV1_AutoWatchEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchEventPolicy",
			Handler:       _MonitoringV1_AutoWatchEventPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchFlowExportPolicy",
			Handler:       _MonitoringV1_AutoWatchFlowExportPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchFwlogPolicy",
			Handler:       _MonitoringV1_AutoWatchFwlogPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchMirrorSession",
			Handler:       _MonitoringV1_AutoWatchMirrorSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchStatsPolicy",
			Handler:       _MonitoringV1_AutoWatchStatsPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_monitoring.proto",
}

func (m *AlertDestinationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertDestinationList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n2, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AlertList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AlertPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertDestinationWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertDestinationWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n7, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AutoMsgAlertPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n8, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *AutoMsgAlertWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n9, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AutoMsgEventPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n10, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *AutoMsgEventWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgEventWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n11, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n12, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *AutoMsgFwlogPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFwlogPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n13, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AutoMsgMirrorSessionWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMirrorSessionWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n14, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *AutoMsgStatsPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgStatsPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n15, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *EventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n16, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n17, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n18, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n19, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n20, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n21, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n22, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n23, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n24, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n25, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StatsPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n26, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n27, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcMonitoring(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AlertDestinationList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AlertList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AlertPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertDestinationWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgAlertPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgAlertWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgEventPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgEventWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgEventWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgFwlogPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgMirrorSessionWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgStatsPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *EventList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *EventPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *FwlogPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *StatsPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func sovSvcMonitoring(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcMonitoring(x uint64) (n int) {
	return sovSvcMonitoring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertDestinationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertDestinationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertDestinationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AlertDestination{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Alert{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AlertPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertDestinationWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertDestinationWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertDestinationWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertDestinationWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AlertDestination{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AlertPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Alert{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgEventPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &EventPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEventWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEventWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgEventWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Event{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFlowExportPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgFlowExportPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgFlowExportPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgFlowExportPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &FlowExportPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFwlogPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgFwlogPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgFwlogPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgFwlogPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &FwlogPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMirrorSessionWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgMirrorSessionWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &MirrorSession{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgStatsPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgStatsPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgStatsPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgStatsPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgStatsPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &StatsPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Event{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EventPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FlowExportPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FwlogPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MirrorSession{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &StatsPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcMonitoring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcMonitoring
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcMonitoring
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcMonitoring(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcMonitoring = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcMonitoring   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_monitoring.proto", fileDescriptorSvcMonitoring) }

var fileDescriptorSvcMonitoring = []byte{
	// 1815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcd, 0x6f, 0xd4, 0x46,
	0x1b, 0x8f, 0x49, 0x88, 0x60, 0x92, 0x90, 0x97, 0x79, 0xe1, 0x4d, 0x6c, 0xc8, 0x07, 0xce, 0x0b,
	0xe4, 0x03, 0x76, 0x21, 0xa5, 0x50, 0x52, 0x68, 0x09, 0x4d, 0xf8, 0x90, 0x9a, 0x82, 0x04, 0x05,
	0xf5, 0x50, 0x55, 0xce, 0x66, 0xd8, 0xb8, 0xda, 0xb5, 0x57, 0x6b, 0x27, 0x29, 0xb4, 0xa8, 0x2d,
	0x1b, 0xfa, 0xa5, 0x7e, 0x48, 0xa5, 0x87, 0x96, 0xf6, 0x94, 0x5b, 0x39, 0x72, 0xaa, 0xd4, 0x53,
	0x6f, 0xa8, 0x27, 0x24, 0x6e, 0x1c, 0x50, 0x85, 0xfa, 0x7f, 0xb4, 0x9a, 0x19, 0xef, 0xfa, 0xf1,
	0x8c, 0xed, 0xcc, 0x66, 0x4d, 0x6e, 0x6b, 0x7b, 0xe6, 0x79, 0x7e, 0xbf, 0xdf, 0xcc, 0xf3, 0xf3,
	0x63, 0x7b, 0xd1, 0x2e, 0x6f, 0xb9, 0xf0, 0x5e, 0xd9, 0x75, 0x6c, 0xdf, 0xad, 0xda, 0x4e, 0x31,
	0x57, 0xa9, 0xba, 0xbe, 0x8b, 0x51, 0x78, 0xc6, 0xd8, 0x5b, 0x74, 0xdd, 0x62, 0x89, 0xe4, 0xad,
	0x8a, 0x9d, 0xb7, 0x1c, 0xc7, 0xf5, 0x2d, 0xdf, 0x76, 0x1d, 0x8f, 0x8f, 0x34, 0x66, 0x8b, 0xb6,
	0xbf, 0xb8, 0x34, 0x9f, 0x2b, 0xb8, 0xe5, 0x7c, 0x85, 0x38, 0x9e, 0xe5, 0x2c, 0xb8, 0x79, 0x6f,
	0x25, 0xbf, 0x4c, 0x1c, 0xbb, 0x40, 0xf2, 0x4b, 0xbe, 0x5d, 0xf2, 0xe8, 0xd4, 0x22, 0x71, 0xe0,
	0xec, 0xbc, 0xed, 0x14, 0x4a, 0x4b, 0x0b, 0xa4, 0x1e, 0xe6, 0x30, 0x08, 0x53, 0x74, 0x8b, 0x6e,
	0x9e, 0x9d, 0x9e, 0x5f, 0xba, 0xc1, 0x8e, 0xd8, 0x01, 0xfb, 0x15, 0x0c, 0xef, 0xf5, 0x49, 0x89,
	0x94, 0x89, 0x5f, 0xbd, 0x19, 0x9c, 0xe8, 0xb6, 0x4a, 0xa4, 0xea, 0xd7, 0xa3, 0x75, 0x93, 0x65,
	0xe2, 0x84, 0x47, 0x65, 0xbb, 0x5a, 0x75, 0xab, 0xc1, 0xd1, 0xfe, 0x04, 0xc0, 0x94, 0x5e, 0x99,
	0xf8, 0x16, 0x1f, 0x66, 0xae, 0x69, 0x68, 0xd7, 0x34, 0x8d, 0x39, 0x43, 0x3c, 0xdf, 0x76, 0x18,
	0xea, 0x37, 0x6d, 0xcf, 0xc7, 0x26, 0xd2, 0xae, 0xf6, 0x6f, 0x19, 0xd6, 0x46, 0xbb, 0x26, 0x7b,
	0x72, 0x56, 0xc5, 0xce, 0x5d, 0xbd, 0x59, 0x21, 0x73, 0xc4, 0xb7, 0xce, 0x6e, 0x7b, 0xf4, 0x6c,
	0xa8, 0xed, 0xf1, 0xb3, 0x21, 0x0d, 0x8f, 0xa1, 0x6d, 0x74, 0x2c, 0x3d, 0xdb, 0xdf, 0x0e, 0x86,
	0xd6, 0x4f, 0x82, 0xa1, 0x13, 0x68, 0xeb, 0x45, 0x9f, 0x94, 0xbd, 0xfe, 0x8e, 0xe1, 0xf6, 0xd1,
	0xae, 0xc9, 0xbd, 0x39, 0xb0, 0x16, 0x62, 0xfe, 0xa9, 0x1d, 0x4f, 0xef, 0xea, 0xa8, 0x64, 0x7b,
	0xfe, 0x22, 0x29, 0x55, 0x48, 0xd5, 0xfc, 0x5a, 0x43, 0xdb, 0xd9, 0xa0, 0x17, 0x81, 0x6c, 0x38,
	0x8a, 0x6c, 0xa7, 0x84, 0x4c, 0x82, 0xf3, 0xa3, 0x86, 0x7a, 0xd9, 0x95, 0xcb, 0x6e, 0xc9, 0x2e,
	0xdc, 0x7c, 0x11, 0xa0, 0x0e, 0x44, 0x41, 0xf5, 0x49, 0xa0, 0x78, 0x6a, 0x09, 0xda, 0x9f, 0x1a,
	0x32, 0xa7, 0x97, 0x7c, 0x77, 0xce, 0x2b, 0x8a, 0xaa, 0x5e, 0xb7, 0xfc, 0xc2, 0xe2, 0x05, 0x36,
	0x0c, 0x5f, 0x44, 0x9d, 0xb3, 0x6c, 0xeb, 0xf4, 0x6b, 0x2c, 0xfe, 0xc9, 0x48, 0xfc, 0x75, 0xe7,
	0xe7, 0xd8, 0x6f, 0x16, 0xc1, 0xb8, 0x80, 0x50, 0x78, 0x84, 0xbb, 0x51, 0x07, 0x25, 0xde, 0xaf,
	0x0d, 0x6b, 0xa3, 0xdb, 0xf1, 0x21, 0xd4, 0x79, 0x69, 0xfe, 0x7d, 0x52, 0xf0, 0x03, 0x65, 0xd2,
	0x57, 0xbd, 0xf7, 0xe9, 0x5d, 0xbd, 0x6b, 0x85, 0xc6, 0x0a, 0xc8, 0xfc, 0xae, 0xa1, 0x01, 0x08,
	0x86, 0x73, 0x86, 0x3c, 0x66, 0x04, 0x1e, 0xc7, 0x92, 0x78, 0x48, 0x53, 0x21, 0x85, 0x37, 0x52,
	0x28, 0x1c, 0x14, 0x28, 0x24, 0xae, 0x84, 0x84, 0xfe, 0x57, 0x0d, 0xf5, 0x41, 0x08, 0x10, 0xf7,
	0x6b, 0x02, 0xee, 0x5c, 0x12, 0xee, 0x04, 0xc4, 0xa7, 0x53, 0x10, 0xef, 0x13, 0x10, 0xc7, 0x6c,
	0xe8, 0x34, 0xa5, 0x59, 0xc8, 0x8d, 0x29, 0x1d, 0x3f, 0x35, 0x13, 0xa5, 0x41, 0xe8, 0x54, 0xa5,
	0xd9, 0xb8, 0x66, 0x95, 0x16, 0x27, 0x65, 0xa2, 0x34, 0x9b, 0x20, 0x63, 0x05, 0x05, 0x7a, 0xae,
	0xe4, 0xae, 0xcc, 0x7e, 0x50, 0x71, 0xe3, 0x36, 0xb6, 0x4a, 0x81, 0xa6, 0xcc, 0xcf, 0xa4, 0x40,
	0xc5, 0xf8, 0xa9, 0xdb, 0xe6, 0xdc, 0x4a, 0xc9, 0x2d, 0x6e, 0x6c, 0xdb, 0xc4, 0x4f, 0xcd, 0x64,
	0xdb, 0x80, 0xd0, 0x32, 0xfa, 0x3f, 0x34, 0x34, 0x14, 0x40, 0x98, 0x63, 0x77, 0xce, 0x2b, 0xc4,
	0xf3, 0x04, 0xa3, 0x3c, 0x27, 0xe0, 0x3f, 0x1e, 0x83, 0x3f, 0x69, 0x32, 0x64, 0x30, 0x9b, 0xc2,
	0x60, 0x4c, 0x60, 0xa0, 0xc3, 0x1c, 0x91, 0xe0, 0xa9, 0x2b, 0x70, 0xc5, 0xb7, 0x7c, 0x6f, 0x63,
	0x2b, 0x10, 0x3f, 0x35, 0x93, 0x15, 0x00, 0xa1, 0x65, 0xf4, 0xf4, 0xbe, 0xce, 0x22, 0x6e, 0xf6,
	0x7d, 0x9d, 0x17, 0x67, 0xdc, 0x7d, 0x1d, 0x18, 0xcd, 0x66, 0xdf, 0xd7, 0xa1, 0xc7, 0x89, 0xd0,
	0x68, 0x9b, 0x26, 0xd6, 0xe3, 0x66, 0xb7, 0x69, 0x92, 0x1f, 0xc4, 0xe9, 0x07, 0x2a, 0x6e, 0xb3,
	0xf5, 0x83, 0xc5, 0x2e, 0x42, 0xfb, 0x45, 0x43, 0x3b, 0x23, 0xa5, 0xf4, 0x22, 0xc0, 0x8d, 0x46,
	0xc1, 0xa5, 0xd4, 0x71, 0x9c, 0x72, 0xa0, 0x52, 0x36, 0x5b, 0x39, 0x58, 0xa4, 0x02, 0xb4, 0xc9,
	0x27, 0xc7, 0x51, 0xf7, 0x5c, 0x63, 0xe8, 0xb5, 0xa3, 0x78, 0x06, 0x75, 0x53, 0xdb, 0x98, 0x5e,
	0x58, 0x60, 0xcd, 0x04, 0x96, 0xfb, 0x0b, 0x43, 0x3e, 0x65, 0xee, 0x78, 0xb8, 0xaa, 0x77, 0x16,
	0xaa, 0xc4, 0xf2, 0xc9, 0x6f, 0xab, 0xba, 0x86, 0xbf, 0x0b, 0xee, 0xd9, 0xf5, 0x30, 0xa0, 0x11,
	0xc4, 0xa9, 0x6d, 0xa2, 0x91, 0x7a, 0xd5, 0x7c, 0x25, 0x9a, 0xe7, 0xce, 0x93, 0xbf, 0xef, 0x6d,
	0xf9, 0x3f, 0x6a, 0x9b, 0xd2, 0xc6, 0xcd, 0x81, 0xfc, 0x87, 0x97, 0x72, 0x57, 0x89, 0x63, 0x39,
	0xfe, 0xed, 0xbc, 0x25, 0x4c, 0xf4, 0xf0, 0x47, 0x08, 0x43, 0x40, 0x5c, 0x0e, 0x9c, 0xd4, 0xef,
	0x19, 0x49, 0x17, 0xcc, 0x63, 0x31, 0x08, 0x86, 0x39, 0x02, 0x5d, 0x42, 0xc0, 0xe6, 0xd8, 0xc4,
	0x03, 0xaa, 0x72, 0x8b, 0x95, 0xed, 0xca, 0x90, 0x4f, 0x49, 0xaa, 0xde, 0x6a, 0x70, 0x00, 0x66,
	0x82, 0x93, 0x5c, 0xc6, 0x48, 0xba, 0x60, 0x4e, 0xc6, 0x70, 0x18, 0xe4, 0x1c, 0xfa, 0x20, 0x07,
	0x02, 0xb2, 0x7c, 0x1b, 0xae, 0xa8, 0xe8, 0x14, 0x38, 0xd5, 0x47, 0x8c, 0xd4, 0xab, 0xe6, 0x89,
	0x18, 0x2c, 0x23, 0x1c, 0xcb, 0x5e, 0x88, 0xe5, 0x86, 0x98, 0xf4, 0x5a, 0x43, 0x0c, 0xe0, 0x0c,
	0x38, 0xc9, 0x32, 0x8c, 0xa4, 0x0b, 0x92, 0xc8, 0x77, 0xe8, 0x23, 0x33, 0x0f, 0x1c, 0xa9, 0x6a,
	0x9c, 0x5c, 0xf0, 0x46, 0xf2, 0x25, 0xe5, 0xfd, 0x12, 0xcd, 0x15, 0x92, 0x03, 0xc5, 0x8b, 0x93,
	0xaa, 0xda, 0x48, 0xba, 0x20, 0x91, 0x3b, 0x8f, 0x7a, 0x69, 0xdc, 0x19, 0x52, 0x22, 0x3e, 0x69,
	0xba, 0xc0, 0x17, 0xd8, 0x34, 0x16, 0xe8, 0xbe, 0x86, 0x0c, 0x21, 0x52, 0x56, 0x35, 0x7e, 0x26,
	0x9a, 0x8a, 0x29, 0x76, 0x08, 0xb5, 0x4d, 0xb5, 0x8d, 0x1f, 0x48, 0x2d, 0x71, 0x7a, 0xf1, 0x2d,
	0xab, 0x4c, 0x6e, 0xe3, 0xcf, 0x35, 0xb4, 0x5b, 0x00, 0xb7, 0xe1, 0x7a, 0x3f, 0x15, 0x83, 0x66,
	0x94, 0xa1, 0x31, 0x13, 0xcb, 0x3d, 0x44, 0x12, 0xd1, 0xbb, 0xe9, 0xd2, 0x07, 0x7a, 0xdf, 0x8d,
	0x50, 0x6a, 0xad, 0xfc, 0xa7, 0x62, 0x28, 0x1d, 0x60, 0x94, 0x86, 0x13, 0xaa, 0x3f, 0x24, 0xf4,
	0x53, 0x64, 0xdd, 0x33, 0x75, 0x82, 0xd7, 0x63, 0x60, 0x4d, 0x30, 0x58, 0xfb, 0xd3, 0x8c, 0x20,
	0xc4, 0xf6, 0x0e, 0x94, 0x28, 0x03, 0x53, 0x00, 0xf2, 0x7f, 0x13, 0xb8, 0x1f, 0x8f, 0x9d, 0x85,
	0x2f, 0x28, 0xee, 0xab, 0xc8, 0xa4, 0x04, 0xaa, 0x19, 0x58, 0x04, 0xa0, 0xba, 0xc8, 0x6f, 0x55,
	0xe7, 0x89, 0xdf, 0x8c, 0x3f, 0xd0, 0x5b, 0x4a, 0x7b, 0x91, 0xf8, 0x0d, 0x2e, 0xfb, 0x28, 0x17,
	0xbc, 0x47, 0xaa, 0x11, 0x50, 0x1c, 0x3f, 0x04, 0xa2, 0xd6, 0x53, 0x65, 0x65, 0x20, 0xa7, 0x45,
	0x2c, 0xcc, 0x3d, 0xb0, 0xaa, 0x7b, 0x7c, 0xaa, 0x71, 0xf3, 0xad, 0xc3, 0xda, 0xb0, 0x75, 0x9c,
	0x14, 0x71, 0xb0, 0xf5, 0xc5, 0x2a, 0xbe, 0x11, 0x2e, 0x42, 0x33, 0xa6, 0xa1, 0xb2, 0x08, 0xfc,
	0x9d, 0x72, 0x98, 0xe9, 0xe3, 0x06, 0xd9, 0xd6, 0x4c, 0xe5, 0x84, 0x98, 0x9b, 0x39, 0x0a, 0x5e,
	0xdf, 0x51, 0xee, 0x85, 0xbb, 0x20, 0x53, 0x3b, 0x39, 0x25, 0x02, 0x62, 0x5e, 0x82, 0x15, 0xbd,
	0x24, 0x94, 0xa5, 0x35, 0x23, 0x51, 0x91, 0xe5, 0x46, 0x38, 0x3e, 0x72, 0x0f, 0xdb, 0x15, 0x20,
	0xc8, 0xc2, 0x6e, 0x54, 0xf6, 0x62, 0x82, 0xd7, 0x84, 0x52, 0xb4, 0x66, 0x34, 0x2a, 0x52, 0x78,
	0xe1, 0xf8, 0x10, 0x80, 0x8d, 0x7a, 0x28, 0x00, 0xfa, 0xd4, 0xc3, 0x2d, 0x69, 0x77, 0xe3, 0x29,
	0x88, 0xbd, 0xb5, 0xb8, 0x54, 0x61, 0x15, 0x6c, 0xec, 0x96, 0x0a, 0x91, 0x0e, 0x31, 0xc7, 0x1f,
	0xae, 0xea, 0x1d, 0xf4, 0x91, 0xa7, 0x91, 0xb8, 0x9f, 0x25, 0xc6, 0xb2, 0x37, 0xe1, 0xaf, 0x34,
	0xd4, 0x1f, 0xc9, 0x05, 0x3d, 0x29, 0x21, 0xed, 0x70, 0x9a, 0x19, 0x31, 0x04, 0x2f, 0x4b, 0x08,
	0x46, 0x18, 0x82, 0x75, 0x1f, 0x59, 0xfe, 0x1b, 0xc1, 0x12, 0x28, 0x9f, 0x00, 0x63, 0x4f, 0x82,
	0x0d, 0x31, 0x04, 0x47, 0x25, 0x04, 0x43, 0x0c, 0x41, 0xca, 0x23, 0x0b, 0x50, 0x9d, 0x7b, 0x90,
	0x8a, 0xea, 0x8d, 0xd7, 0x3d, 0x6a, 0xaa, 0x73, 0x33, 0xc2, 0xd7, 0x43, 0xa2, 0xd0, 0x84, 0x54,
	0x88, 0x0a, 0x2f, 0x74, 0xcc, 0x6e, 0x98, 0x16, 0x7f, 0x09, 0x96, 0x53, 0x32, 0x17, 0x95, 0xe5,
	0x8c, 0x7b, 0x29, 0xc3, 0x5a, 0xfa, 0x28, 0x35, 0x93, 0x51, 0x4b, 0x7f, 0x5e, 0xb9, 0x15, 0x92,
	0x84, 0x96, 0xa2, 0x42, 0x52, 0x78, 0xeb, 0x62, 0xe6, 0x25, 0x00, 0x03, 0x0c, 0x40, 0x5f, 0x82,
	0xab, 0xe0, 0x4f, 0x82, 0xee, 0x91, 0xbd, 0x38, 0x88, 0xb8, 0x49, 0x42, 0xfa, 0x81, 0x44, 0x27,
	0x51, 0xdf, 0x4e, 0xd1, 0x44, 0x80, 0x3e, 0xb4, 0x11, 0x15, 0xfa, 0xc2, 0xab, 0x13, 0x35, 0xfa,
	0xc0, 0x49, 0xb0, 0xcb, 0xbb, 0xf0, 0xb7, 0x2b, 0x0b, 0x56, 0x73, 0x4f, 0x3d, 0xc7, 0x69, 0x6f,
	0xb4, 0xc4, 0xa6, 0x45, 0xd6, 0x5a, 0x1b, 0x37, 0x52, 0x3b, 0x9b, 0x9f, 0x83, 0x2e, 0x19, 0x64,
	0xcc, 0xaa, 0xb9, 0x99, 0x8e, 0x81, 0x74, 0x98, 0x43, 0x52, 0x6d, 0x70, 0xbe, 0x08, 0x76, 0x03,
	0x40, 0xb7, 0xe1, 0x1e, 0xe7, 0x74, 0x0c, 0x9c, 0x31, 0x0e, 0xa7, 0x89, 0xe7, 0x23, 0x8e, 0xa4,
	0xe9, 0xe7, 0xa3, 0x30, 0x2f, 0xfe, 0x2c, 0xc2, 0xa9, 0xb5, 0x56, 0xe6, 0xd5, 0x18, 0x4e, 0x07,
	0x39, 0xa7, 0xf5, 0xdb, 0x99, 0xfb, 0x91, 0xa5, 0xcf, 0xb4, 0xa3, 0x39, 0x13, 0x83, 0xeb, 0x10,
	0xc7, 0xa5, 0xd8, 0xd5, 0x44, 0x55, 0x6a, 0xad, 0xb3, 0x51, 0x55, 0x29, 0xb6, 0xbb, 0xa9, 0xbf,
	0x4d, 0xe2, 0x40, 0xb2, 0x68, 0x70, 0x54, 0x37, 0x62, 0x42, 0x93, 0x13, 0x55, 0xa6, 0xb5, 0x46,
	0x47, 0x55, 0x99, 0xd8, 0x66, 0xe7, 0x5d, 0xb4, 0x83, 0xe2, 0x60, 0x6e, 0x98, 0xda, 0xed, 0x8c,
	0x28, 0x7c, 0x54, 0x36, 0x7b, 0x1e, 0xae, 0xea, 0x5b, 0xd9, 0x37, 0x19, 0x8a, 0xe4, 0x88, 0x86,
	0x3d, 0xa4, 0x47, 0xc3, 0x2b, 0x34, 0x38, 0xb9, 0xe6, 0xfe, 0x3e, 0x20, 0x27, 0xb5, 0x79, 0x2b,
	0x1b, 0x26, 0x4d, 0x37, 0xff, 0x31, 0xe5, 0xcf, 0xfc, 0x72, 0x2a, 0x28, 0x5f, 0x6a, 0xdb, 0x32,
	0xa2, 0xf0, 0xa5, 0x38, 0x9d, 0x89, 0x42, 0xab, 0x32, 0xa6, 0xfc, 0x19, 0x3d, 0x7d, 0xa5, 0x54,
	0x7b, 0x97, 0x5c, 0x73, 0xdf, 0x91, 0xd3, 0xf9, 0x29, 0x74, 0x29, 0x63, 0xca, 0xdf, 0x7b, 0xe5,
	0x54, 0x65, 0xf4, 0xbf, 0x46, 0x2a, 0xa5, 0x9e, 0x64, 0xa2, 0x89, 0x8f, 0xb3, 0xe9, 0xcc, 0x14,
	0x1a, 0x90, 0x31, 0xe5, 0xef, 0xa8, 0x52, 0x2a, 0xe3, 0x9f, 0xf6, 0xef, 0x6b, 0xfa, 0x96, 0xe5,
	0xa3, 0xf7, 0x6b, 0x3a, 0xf8, 0x07, 0xda, 0x5a, 0x4d, 0xdf, 0xca, 0xd6, 0x7e, 0xad, 0xa6, 0x77,
	0x81, 0x4d, 0x40, 0x0f, 0x41, 0x64, 0x7a, 0x08, 0x24, 0x5c, 0xab, 0xe9, 0xff, 0x11, 0x57, 0x90,
	0x46, 0x62, 0xf5, 0x40, 0xc7, 0x82, 0xc2, 0xa0, 0x63, 0xc5, 0xba, 0x5c, 0xab, 0xe9, 0x3d, 0x11,
	0x91, 0x1e, 0xd4, 0x74, 0x8c, 0x38, 0x10, 0x4c, 0x9f, 0xc6, 0x30, 0xeb, 0xa4, 0x1e, 0xd4, 0xf4,
	0xfd, 0x08, 0xa2, 0xe2, 0xd7, 0xda, 0x2b, 0x4b, 0x3e, 0x0e, 0x5e, 0x0e, 0xe1, 0x8e, 0x8a, 0xcb,
	0x06, 0x0e, 0x20, 0x88, 0x17, 0x0c, 0xac, 0x47, 0x1a, 0x40, 0x90, 0x41, 0xcc, 0x80, 0x23, 0x48,
	0xe2, 0x94, 0x94, 0xaf, 0x31, 0xa7, 0x0f, 0x71, 0xce, 0xfc, 0x04, 0x1f, 0x49, 0xe7, 0x3c, 0xa8,
	0xe9, 0x13, 0x08, 0xaa, 0xb0, 0x6e, 0xa4, 0x23, 0x48, 0x52, 0x69, 0xdd, 0x39, 0x87, 0x51, 0x54,
	0xc5, 0xf4, 0x09, 0x67, 0xbb, 0x1f, 0x3d, 0x1f, 0xd4, 0x1e, 0x3f, 0x1f, 0xd4, 0xfe, 0x7a, 0x3e,
	0xa8, 0x5d, 0xd6, 0xe6, 0x3b, 0xd9, 0xbf, 0xf1, 0x5e, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x29,
	0x85, 0x89, 0x33, 0xa7, 0x28, 0x00, 0x00,
}
