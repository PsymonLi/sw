// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_monitoring.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AlertDestinationList is a container object for list of AlertDestination objects
type AlertDestinationList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of AlertDestination objects
	Items []*AlertDestination `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *AlertDestinationList) Reset()         { *m = AlertDestinationList{} }
func (m *AlertDestinationList) String() string { return proto.CompactTextString(m) }
func (*AlertDestinationList) ProtoMessage()    {}
func (*AlertDestinationList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{0}
}

func (m *AlertDestinationList) GetItems() []*AlertDestination {
	if m != nil {
		return m.Items
	}
	return nil
}

// AlertList is a container object for list of Alert objects
type AlertList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of Alert objects
	Items []*Alert `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *AlertList) Reset()                    { *m = AlertList{} }
func (m *AlertList) String() string            { return proto.CompactTextString(m) }
func (*AlertList) ProtoMessage()               {}
func (*AlertList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{1} }

func (m *AlertList) GetItems() []*Alert {
	if m != nil {
		return m.Items
	}
	return nil
}

// AlertPolicyList is a container object for list of AlertPolicy objects
type AlertPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of AlertPolicy objects
	Items []*AlertPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *AlertPolicyList) Reset()                    { *m = AlertPolicyList{} }
func (m *AlertPolicyList) String() string            { return proto.CompactTextString(m) }
func (*AlertPolicyList) ProtoMessage()               {}
func (*AlertPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{2} }

func (m *AlertPolicyList) GetItems() []*AlertPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// ArchiveRequestList is a container object for list of ArchiveRequest objects
type ArchiveRequestList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of ArchiveRequest objects
	Items []*ArchiveRequest `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *ArchiveRequestList) Reset()                    { *m = ArchiveRequestList{} }
func (m *ArchiveRequestList) String() string            { return proto.CompactTextString(m) }
func (*ArchiveRequestList) ProtoMessage()               {}
func (*ArchiveRequestList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{3} }

func (m *ArchiveRequestList) GetItems() []*ArchiveRequest {
	if m != nil {
		return m.Items
	}
	return nil
}

// AutoMsgAlertDestinationWatchHelper is a wrapper object for watch events for AlertDestination objects
type AutoMsgAlertDestinationWatchHelper struct {
	Events []*AutoMsgAlertDestinationWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgAlertDestinationWatchHelper) Reset()         { *m = AutoMsgAlertDestinationWatchHelper{} }
func (m *AutoMsgAlertDestinationWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertDestinationWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertDestinationWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{4}
}

func (m *AutoMsgAlertDestinationWatchHelper) GetEvents() []*AutoMsgAlertDestinationWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertDestinationWatchHelper_WatchEvent struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *AlertDestination `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgAlertDestinationWatchHelper_WatchEvent{}
}
func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgAlertDestinationWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgAlertDestinationWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{4, 0}
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) GetObject() *AlertDestination {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgAlertPolicyWatchHelper is a wrapper object for watch events for AlertPolicy objects
type AutoMsgAlertPolicyWatchHelper struct {
	Events []*AutoMsgAlertPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgAlertPolicyWatchHelper) Reset()         { *m = AutoMsgAlertPolicyWatchHelper{} }
func (m *AutoMsgAlertPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{5}
}

func (m *AutoMsgAlertPolicyWatchHelper) GetEvents() []*AutoMsgAlertPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *AlertPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgAlertPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgAlertPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{5, 0}
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) GetObject() *AlertPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgAlertWatchHelper is a wrapper object for watch events for Alert objects
type AutoMsgAlertWatchHelper struct {
	Events []*AutoMsgAlertWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgAlertWatchHelper) Reset()         { *m = AutoMsgAlertWatchHelper{} }
func (m *AutoMsgAlertWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertWatchHelper) ProtoMessage()    {}
func (*AutoMsgAlertWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{6}
}

func (m *AutoMsgAlertWatchHelper) GetEvents() []*AutoMsgAlertWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgAlertWatchHelper_WatchEvent struct {
	Type   string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *Alert `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Reset()         { *m = AutoMsgAlertWatchHelper_WatchEvent{} }
func (m *AutoMsgAlertWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgAlertWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgAlertWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{6, 0}
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) GetObject() *Alert {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgArchiveRequestWatchHelper is a wrapper object for watch events for ArchiveRequest objects
type AutoMsgArchiveRequestWatchHelper struct {
	Events []*AutoMsgArchiveRequestWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgArchiveRequestWatchHelper) Reset()         { *m = AutoMsgArchiveRequestWatchHelper{} }
func (m *AutoMsgArchiveRequestWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgArchiveRequestWatchHelper) ProtoMessage()    {}
func (*AutoMsgArchiveRequestWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{7}
}

func (m *AutoMsgArchiveRequestWatchHelper) GetEvents() []*AutoMsgArchiveRequestWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgArchiveRequestWatchHelper_WatchEvent struct {
	Type   string          `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *ArchiveRequest `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgArchiveRequestWatchHelper_WatchEvent{}
}
func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgArchiveRequestWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgArchiveRequestWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{7, 0}
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) GetObject() *ArchiveRequest {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgEventPolicyWatchHelper is a wrapper object for watch events for EventPolicy objects
type AutoMsgEventPolicyWatchHelper struct {
	Events []*AutoMsgEventPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgEventPolicyWatchHelper) Reset()         { *m = AutoMsgEventPolicyWatchHelper{} }
func (m *AutoMsgEventPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgEventPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{8}
}

func (m *AutoMsgEventPolicyWatchHelper) GetEvents() []*AutoMsgEventPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgEventPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *EventPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgEventPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgEventPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgEventPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{8, 0}
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) GetObject() *EventPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgFlowExportPolicyWatchHelper is a wrapper object for watch events for FlowExportPolicy objects
type AutoMsgFlowExportPolicyWatchHelper struct {
	Events []*AutoMsgFlowExportPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Reset()         { *m = AutoMsgFlowExportPolicyWatchHelper{} }
func (m *AutoMsgFlowExportPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFlowExportPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgFlowExportPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{9}
}

func (m *AutoMsgFlowExportPolicyWatchHelper) GetEvents() []*AutoMsgFlowExportPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgFlowExportPolicyWatchHelper_WatchEvent struct {
	Type   string            `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *FlowExportPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgFlowExportPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgFlowExportPolicyWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{9, 0}
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) GetObject() *FlowExportPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgFwlogPolicyWatchHelper is a wrapper object for watch events for FwlogPolicy objects
type AutoMsgFwlogPolicyWatchHelper struct {
	Events []*AutoMsgFwlogPolicyWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgFwlogPolicyWatchHelper) Reset()         { *m = AutoMsgFwlogPolicyWatchHelper{} }
func (m *AutoMsgFwlogPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFwlogPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgFwlogPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{10}
}

func (m *AutoMsgFwlogPolicyWatchHelper) GetEvents() []*AutoMsgFwlogPolicyWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgFwlogPolicyWatchHelper_WatchEvent struct {
	Type   string       `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *FwlogPolicy `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgFwlogPolicyWatchHelper_WatchEvent{}
}
func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) String() string { return proto.CompactTextString(m) }
func (*AutoMsgFwlogPolicyWatchHelper_WatchEvent) ProtoMessage()    {}
func (*AutoMsgFwlogPolicyWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{10, 0}
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) GetObject() *FwlogPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgMirrorSessionWatchHelper is a wrapper object for watch events for MirrorSession objects
type AutoMsgMirrorSessionWatchHelper struct {
	Events []*AutoMsgMirrorSessionWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgMirrorSessionWatchHelper) Reset()         { *m = AutoMsgMirrorSessionWatchHelper{} }
func (m *AutoMsgMirrorSessionWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgMirrorSessionWatchHelper) ProtoMessage()    {}
func (*AutoMsgMirrorSessionWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{11}
}

func (m *AutoMsgMirrorSessionWatchHelper) GetEvents() []*AutoMsgMirrorSessionWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgMirrorSessionWatchHelper_WatchEvent struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *MirrorSession `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgMirrorSessionWatchHelper_WatchEvent{}
}
func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgMirrorSessionWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgMirrorSessionWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{11, 0}
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) GetObject() *MirrorSession {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgTechSupportRequestWatchHelper is a wrapper object for watch events for TechSupportRequest objects
type AutoMsgTechSupportRequestWatchHelper struct {
	Events []*AutoMsgTechSupportRequestWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgTechSupportRequestWatchHelper) Reset()         { *m = AutoMsgTechSupportRequestWatchHelper{} }
func (m *AutoMsgTechSupportRequestWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTechSupportRequestWatchHelper) ProtoMessage()    {}
func (*AutoMsgTechSupportRequestWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{12}
}

func (m *AutoMsgTechSupportRequestWatchHelper) GetEvents() []*AutoMsgTechSupportRequestWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgTechSupportRequestWatchHelper_WatchEvent struct {
	Type   string              `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *TechSupportRequest `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgTechSupportRequestWatchHelper_WatchEvent{}
}
func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgTechSupportRequestWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgTechSupportRequestWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{12, 0}
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) GetObject() *TechSupportRequest {
	if m != nil {
		return m.Object
	}
	return nil
}

// AutoMsgTroubleshootingSessionWatchHelper is a wrapper object for watch events for TroubleshootingSession objects
type AutoMsgTroubleshootingSessionWatchHelper struct {
	Events []*AutoMsgTroubleshootingSessionWatchHelper_WatchEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"events"`
}

func (m *AutoMsgTroubleshootingSessionWatchHelper) Reset() {
	*m = AutoMsgTroubleshootingSessionWatchHelper{}
}
func (m *AutoMsgTroubleshootingSessionWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgTroubleshootingSessionWatchHelper) ProtoMessage()    {}
func (*AutoMsgTroubleshootingSessionWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{13}
}

func (m *AutoMsgTroubleshootingSessionWatchHelper) GetEvents() []*AutoMsgTroubleshootingSessionWatchHelper_WatchEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type AutoMsgTroubleshootingSessionWatchHelper_WatchEvent struct {
	Type   string                  `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	Object *TroubleshootingSession `protobuf:"bytes,2,opt,name=Object" json:"object,omitempty"`
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) Reset() {
	*m = AutoMsgTroubleshootingSessionWatchHelper_WatchEvent{}
}
func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) String() string {
	return proto.CompactTextString(m)
}
func (*AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) ProtoMessage() {}
func (*AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{13, 0}
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) GetObject() *TroubleshootingSession {
	if m != nil {
		return m.Object
	}
	return nil
}

// EventPolicyList is a container object for list of EventPolicy objects
type EventPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of EventPolicy objects
	Items []*EventPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *EventPolicyList) Reset()                    { *m = EventPolicyList{} }
func (m *EventPolicyList) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyList) ProtoMessage()               {}
func (*EventPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{14} }

func (m *EventPolicyList) GetItems() []*EventPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// FlowExportPolicyList is a container object for list of FlowExportPolicy objects
type FlowExportPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of FlowExportPolicy objects
	Items []*FlowExportPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *FlowExportPolicyList) Reset()         { *m = FlowExportPolicyList{} }
func (m *FlowExportPolicyList) String() string { return proto.CompactTextString(m) }
func (*FlowExportPolicyList) ProtoMessage()    {}
func (*FlowExportPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{15}
}

func (m *FlowExportPolicyList) GetItems() []*FlowExportPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// FwlogPolicyList is a container object for list of FwlogPolicy objects
type FwlogPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of FwlogPolicy objects
	Items []*FwlogPolicy `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *FwlogPolicyList) Reset()                    { *m = FwlogPolicyList{} }
func (m *FwlogPolicyList) String() string            { return proto.CompactTextString(m) }
func (*FwlogPolicyList) ProtoMessage()               {}
func (*FwlogPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{16} }

func (m *FwlogPolicyList) GetItems() []*FwlogPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

// MirrorSessionList is a container object for list of MirrorSession objects
type MirrorSessionList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of MirrorSession objects
	Items []*MirrorSession `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *MirrorSessionList) Reset()                    { *m = MirrorSessionList{} }
func (m *MirrorSessionList) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionList) ProtoMessage()               {}
func (*MirrorSessionList) Descriptor() ([]byte, []int) { return fileDescriptorSvcMonitoring, []int{17} }

func (m *MirrorSessionList) GetItems() []*MirrorSession {
	if m != nil {
		return m.Items
	}
	return nil
}

// TechSupportRequestList is a container object for list of TechSupportRequest objects
type TechSupportRequestList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of TechSupportRequest objects
	Items []*TechSupportRequest `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *TechSupportRequestList) Reset()         { *m = TechSupportRequestList{} }
func (m *TechSupportRequestList) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestList) ProtoMessage()    {}
func (*TechSupportRequestList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{18}
}

func (m *TechSupportRequestList) GetItems() []*TechSupportRequest {
	if m != nil {
		return m.Items
	}
	return nil
}

// TroubleshootingSessionList is a container object for list of TroubleshootingSession objects
type TroubleshootingSessionList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,json=,inline,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,json=list-meta,inline,embedded=ListMeta" json:"list-meta,inline"`
	// List of TroubleshootingSession objects
	Items []*TroubleshootingSession `protobuf:"bytes,4,rep,name=Items,json=items" json:"items"`
}

func (m *TroubleshootingSessionList) Reset()         { *m = TroubleshootingSessionList{} }
func (m *TroubleshootingSessionList) String() string { return proto.CompactTextString(m) }
func (*TroubleshootingSessionList) ProtoMessage()    {}
func (*TroubleshootingSessionList) Descriptor() ([]byte, []int) {
	return fileDescriptorSvcMonitoring, []int{19}
}

func (m *TroubleshootingSessionList) GetItems() []*TroubleshootingSession {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*AlertDestinationList)(nil), "monitoring.AlertDestinationList")
	proto.RegisterType((*AlertList)(nil), "monitoring.AlertList")
	proto.RegisterType((*AlertPolicyList)(nil), "monitoring.AlertPolicyList")
	proto.RegisterType((*ArchiveRequestList)(nil), "monitoring.ArchiveRequestList")
	proto.RegisterType((*AutoMsgAlertDestinationWatchHelper)(nil), "monitoring.AutoMsgAlertDestinationWatchHelper")
	proto.RegisterType((*AutoMsgAlertDestinationWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertDestinationWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgAlertPolicyWatchHelper)(nil), "monitoring.AutoMsgAlertPolicyWatchHelper")
	proto.RegisterType((*AutoMsgAlertPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgAlertWatchHelper)(nil), "monitoring.AutoMsgAlertWatchHelper")
	proto.RegisterType((*AutoMsgAlertWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgAlertWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgArchiveRequestWatchHelper)(nil), "monitoring.AutoMsgArchiveRequestWatchHelper")
	proto.RegisterType((*AutoMsgArchiveRequestWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgArchiveRequestWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgEventPolicyWatchHelper)(nil), "monitoring.AutoMsgEventPolicyWatchHelper")
	proto.RegisterType((*AutoMsgEventPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgEventPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgFlowExportPolicyWatchHelper)(nil), "monitoring.AutoMsgFlowExportPolicyWatchHelper")
	proto.RegisterType((*AutoMsgFlowExportPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgFlowExportPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgFwlogPolicyWatchHelper)(nil), "monitoring.AutoMsgFwlogPolicyWatchHelper")
	proto.RegisterType((*AutoMsgFwlogPolicyWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgFwlogPolicyWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgMirrorSessionWatchHelper)(nil), "monitoring.AutoMsgMirrorSessionWatchHelper")
	proto.RegisterType((*AutoMsgMirrorSessionWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgMirrorSessionWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgTechSupportRequestWatchHelper)(nil), "monitoring.AutoMsgTechSupportRequestWatchHelper")
	proto.RegisterType((*AutoMsgTechSupportRequestWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgTechSupportRequestWatchHelper.WatchEvent")
	proto.RegisterType((*AutoMsgTroubleshootingSessionWatchHelper)(nil), "monitoring.AutoMsgTroubleshootingSessionWatchHelper")
	proto.RegisterType((*AutoMsgTroubleshootingSessionWatchHelper_WatchEvent)(nil), "monitoring.AutoMsgTroubleshootingSessionWatchHelper.WatchEvent")
	proto.RegisterType((*EventPolicyList)(nil), "monitoring.EventPolicyList")
	proto.RegisterType((*FlowExportPolicyList)(nil), "monitoring.FlowExportPolicyList")
	proto.RegisterType((*FwlogPolicyList)(nil), "monitoring.FwlogPolicyList")
	proto.RegisterType((*MirrorSessionList)(nil), "monitoring.MirrorSessionList")
	proto.RegisterType((*TechSupportRequestList)(nil), "monitoring.TechSupportRequestList")
	proto.RegisterType((*TroubleshootingSessionList)(nil), "monitoring.TroubleshootingSessionList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MonitoringV1 service

type MonitoringV1Client interface {
	// Create Alert object
	AutoAddAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Create AlertDestination object
	AutoAddAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Create AlertPolicy object
	AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Create ArchiveRequest object
	AutoAddArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error)
	// Create EventPolicy object
	AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Create FlowExportPolicy object
	AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Create FwlogPolicy object
	AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Create MirrorSession object
	AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Create TechSupportRequest object
	AutoAddTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error)
	// Create TroubleshootingSession object
	AutoAddTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error)
	// Delete Alert object
	AutoDeleteAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Delete AlertDestination object
	AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Delete AlertPolicy object
	AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Delete ArchiveRequest object
	AutoDeleteArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error)
	// Delete EventPolicy object
	AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Delete FlowExportPolicy object
	AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Delete FwlogPolicy object
	AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Delete MirrorSession object
	AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Delete TechSupportRequest object
	AutoDeleteTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error)
	// Delete TroubleshootingSession object
	AutoDeleteTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error)
	// Get Alert object
	AutoGetAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Get AlertDestination object
	AutoGetAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Get AlertPolicy object
	AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Get ArchiveRequest object
	AutoGetArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error)
	// Get EventPolicy object
	AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Get FlowExportPolicy object
	AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Get FwlogPolicy object
	AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Get MirrorSession object
	AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Get TechSupportRequest object
	AutoGetTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error)
	// Get TroubleshootingSession object
	AutoGetTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error)
	// Label Alert object
	AutoLabelAlert(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Alert, error)
	// Label AlertDestination object
	AutoLabelAlertDestination(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AlertDestination, error)
	// Label AlertPolicy object
	AutoLabelAlertPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Label ArchiveRequest object
	AutoLabelArchiveRequest(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*ArchiveRequest, error)
	// Label EventPolicy object
	AutoLabelEventPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*EventPolicy, error)
	// Label FlowExportPolicy object
	AutoLabelFlowExportPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Label FwlogPolicy object
	AutoLabelFwlogPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Label MirrorSession object
	AutoLabelMirrorSession(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*MirrorSession, error)
	// Label TechSupportRequest object
	AutoLabelTechSupportRequest(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*TechSupportRequest, error)
	// Label TroubleshootingSession object
	AutoLabelTroubleshootingSession(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*TroubleshootingSession, error)
	// List Alert objects
	AutoListAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertList, error)
	// List AlertDestination objects
	AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertDestinationList, error)
	// List AlertPolicy objects
	AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertPolicyList, error)
	// List ArchiveRequest objects
	AutoListArchiveRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ArchiveRequestList, error)
	// List EventPolicy objects
	AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error)
	// List FlowExportPolicy objects
	AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FlowExportPolicyList, error)
	// List FwlogPolicy objects
	AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FwlogPolicyList, error)
	// List MirrorSession objects
	AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error)
	// List TechSupportRequest objects
	AutoListTechSupportRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TechSupportRequestList, error)
	// List TroubleshootingSession objects
	AutoListTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TroubleshootingSessionList, error)
	// Update Alert object
	AutoUpdateAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error)
	// Update AlertDestination object
	AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error)
	// Update AlertPolicy object
	AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error)
	// Update ArchiveRequest object
	AutoUpdateArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error)
	// Update EventPolicy object
	AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error)
	// Update FlowExportPolicy object
	AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error)
	// Update FwlogPolicy object
	AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error)
	// Update MirrorSession object
	AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	// Update TechSupportRequest object
	AutoUpdateTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error)
	// Update TroubleshootingSession object
	AutoUpdateTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error)
	// Watch Alert objects. Supports WebSockets or HTTP long poll
	AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertClient, error)
	// Watch AlertDestination objects. Supports WebSockets or HTTP long poll
	AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertDestinationClient, error)
	// Watch AlertPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertPolicyClient, error)
	// Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll
	AutoWatchArchiveRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchArchiveRequestClient, error)
	// Watch EventPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventPolicyClient, error)
	// Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFlowExportPolicyClient, error)
	// Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFwlogPolicyClient, error)
	// Watch MirrorSession objects. Supports WebSockets or HTTP long poll
	AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchMirrorSessionClient, error)
	AutoWatchSvcMonitoringV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchSvcMonitoringV1Client, error)
	// Watch TechSupportRequest objects. Supports WebSockets or HTTP long poll
	AutoWatchTechSupportRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchTechSupportRequestClient, error)
	// Watch TroubleshootingSession objects. Supports WebSockets or HTTP long poll
	AutoWatchTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchTroubleshootingSessionClient, error)
	//
	Cancel(ctx context.Context, in *CancelArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error)
}

type monitoringV1Client struct {
	cc *grpc.ClientConn
}

func NewMonitoringV1Client(cc *grpc.ClientConn) MonitoringV1Client {
	return &monitoringV1Client{cc}
}

func (c *monitoringV1Client) AutoAddAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error) {
	out := new(TechSupportRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoAddTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error) {
	out := new(TroubleshootingSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoAddTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error) {
	out := new(TechSupportRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoDeleteTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error) {
	out := new(TroubleshootingSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoDeleteTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error) {
	out := new(TechSupportRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoGetTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error) {
	out := new(TroubleshootingSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoGetTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelAlert(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelAlertDestination(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelAlertPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelArchiveRequest(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelEventPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelFlowExportPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelFwlogPolicy(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelMirrorSession(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelTechSupportRequest(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*TechSupportRequest, error) {
	out := new(TechSupportRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoLabelTroubleshootingSession(ctx context.Context, in *api.Label, opts ...grpc.CallOption) (*TroubleshootingSession, error) {
	out := new(TroubleshootingSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoLabelTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertList, error) {
	out := new(AlertList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertDestinationList, error) {
	out := new(AlertDestinationList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*AlertPolicyList, error) {
	out := new(AlertPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListArchiveRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*ArchiveRequestList, error) {
	out := new(ArchiveRequestList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*EventPolicyList, error) {
	out := new(EventPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FlowExportPolicyList, error) {
	out := new(FlowExportPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*FwlogPolicyList, error) {
	out := new(FwlogPolicyList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error) {
	out := new(MirrorSessionList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListTechSupportRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TechSupportRequestList, error) {
	out := new(TechSupportRequestList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoListTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*TroubleshootingSessionList, error) {
	out := new(TroubleshootingSessionList)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoListTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlert(ctx context.Context, in *Alert, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlertDestination(ctx context.Context, in *AlertDestination, opts ...grpc.CallOption) (*AlertDestination, error) {
	out := new(AlertDestination)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlertDestination", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateAlertPolicy(ctx context.Context, in *AlertPolicy, opts ...grpc.CallOption) (*AlertPolicy, error) {
	out := new(AlertPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateAlertPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateArchiveRequest(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateArchiveRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateEventPolicy(ctx context.Context, in *EventPolicy, opts ...grpc.CallOption) (*EventPolicy, error) {
	out := new(EventPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateEventPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateFlowExportPolicy(ctx context.Context, in *FlowExportPolicy, opts ...grpc.CallOption) (*FlowExportPolicy, error) {
	out := new(FlowExportPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateFlowExportPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateFwlogPolicy(ctx context.Context, in *FwlogPolicy, opts ...grpc.CallOption) (*FwlogPolicy, error) {
	out := new(FwlogPolicy)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateFwlogPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateTechSupportRequest(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportRequest, error) {
	out := new(TechSupportRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateTechSupportRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoUpdateTroubleshootingSession(ctx context.Context, in *TroubleshootingSession, opts ...grpc.CallOption) (*TroubleshootingSession, error) {
	out := new(TroubleshootingSession)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/AutoUpdateTroubleshootingSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitoringV1Client) AutoWatchAlert(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[0], c.cc, "/monitoring.MonitoringV1/AutoWatchAlert", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertClient interface {
	Recv() (*AutoMsgAlertWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertClient) Recv() (*AutoMsgAlertWatchHelper, error) {
	m := new(AutoMsgAlertWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchAlertDestination(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertDestinationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[1], c.cc, "/monitoring.MonitoringV1/AutoWatchAlertDestination", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertDestinationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertDestinationClient interface {
	Recv() (*AutoMsgAlertDestinationWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertDestinationClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertDestinationClient) Recv() (*AutoMsgAlertDestinationWatchHelper, error) {
	m := new(AutoMsgAlertDestinationWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchAlertPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchAlertPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[2], c.cc, "/monitoring.MonitoringV1/AutoWatchAlertPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchAlertPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchAlertPolicyClient interface {
	Recv() (*AutoMsgAlertPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchAlertPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchAlertPolicyClient) Recv() (*AutoMsgAlertPolicyWatchHelper, error) {
	m := new(AutoMsgAlertPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchArchiveRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchArchiveRequestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[3], c.cc, "/monitoring.MonitoringV1/AutoWatchArchiveRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchArchiveRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchArchiveRequestClient interface {
	Recv() (*AutoMsgArchiveRequestWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchArchiveRequestClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchArchiveRequestClient) Recv() (*AutoMsgArchiveRequestWatchHelper, error) {
	m := new(AutoMsgArchiveRequestWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchEventPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchEventPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[4], c.cc, "/monitoring.MonitoringV1/AutoWatchEventPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchEventPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchEventPolicyClient interface {
	Recv() (*AutoMsgEventPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchEventPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchEventPolicyClient) Recv() (*AutoMsgEventPolicyWatchHelper, error) {
	m := new(AutoMsgEventPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchFlowExportPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFlowExportPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[5], c.cc, "/monitoring.MonitoringV1/AutoWatchFlowExportPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchFlowExportPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchFlowExportPolicyClient interface {
	Recv() (*AutoMsgFlowExportPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchFlowExportPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchFlowExportPolicyClient) Recv() (*AutoMsgFlowExportPolicyWatchHelper, error) {
	m := new(AutoMsgFlowExportPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchFwlogPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchFwlogPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[6], c.cc, "/monitoring.MonitoringV1/AutoWatchFwlogPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchFwlogPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchFwlogPolicyClient interface {
	Recv() (*AutoMsgFwlogPolicyWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchFwlogPolicyClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchFwlogPolicyClient) Recv() (*AutoMsgFwlogPolicyWatchHelper, error) {
	m := new(AutoMsgFwlogPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchMirrorSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[7], c.cc, "/monitoring.MonitoringV1/AutoWatchMirrorSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchMirrorSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchMirrorSessionClient interface {
	Recv() (*AutoMsgMirrorSessionWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchMirrorSessionClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchMirrorSessionClient) Recv() (*AutoMsgMirrorSessionWatchHelper, error) {
	m := new(AutoMsgMirrorSessionWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchSvcMonitoringV1(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchSvcMonitoringV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[8], c.cc, "/monitoring.MonitoringV1/AutoWatchSvcMonitoringV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchSvcMonitoringV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchSvcMonitoringV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchSvcMonitoringV1Client struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchSvcMonitoringV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchTechSupportRequest(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchTechSupportRequestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[9], c.cc, "/monitoring.MonitoringV1/AutoWatchTechSupportRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchTechSupportRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchTechSupportRequestClient interface {
	Recv() (*AutoMsgTechSupportRequestWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchTechSupportRequestClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchTechSupportRequestClient) Recv() (*AutoMsgTechSupportRequestWatchHelper, error) {
	m := new(AutoMsgTechSupportRequestWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) AutoWatchTroubleshootingSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MonitoringV1_AutoWatchTroubleshootingSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringV1_serviceDesc.Streams[10], c.cc, "/monitoring.MonitoringV1/AutoWatchTroubleshootingSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringV1AutoWatchTroubleshootingSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringV1_AutoWatchTroubleshootingSessionClient interface {
	Recv() (*AutoMsgTroubleshootingSessionWatchHelper, error)
	grpc.ClientStream
}

type monitoringV1AutoWatchTroubleshootingSessionClient struct {
	grpc.ClientStream
}

func (x *monitoringV1AutoWatchTroubleshootingSessionClient) Recv() (*AutoMsgTroubleshootingSessionWatchHelper, error) {
	m := new(AutoMsgTroubleshootingSessionWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringV1Client) Cancel(ctx context.Context, in *CancelArchiveRequest, opts ...grpc.CallOption) (*ArchiveRequest, error) {
	out := new(ArchiveRequest)
	err := grpc.Invoke(ctx, "/monitoring.MonitoringV1/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MonitoringV1 service

type MonitoringV1Server interface {
	// Create Alert object
	AutoAddAlert(context.Context, *Alert) (*Alert, error)
	// Create AlertDestination object
	AutoAddAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Create AlertPolicy object
	AutoAddAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Create ArchiveRequest object
	AutoAddArchiveRequest(context.Context, *ArchiveRequest) (*ArchiveRequest, error)
	// Create EventPolicy object
	AutoAddEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Create FlowExportPolicy object
	AutoAddFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Create FwlogPolicy object
	AutoAddFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Create MirrorSession object
	AutoAddMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Create TechSupportRequest object
	AutoAddTechSupportRequest(context.Context, *TechSupportRequest) (*TechSupportRequest, error)
	// Create TroubleshootingSession object
	AutoAddTroubleshootingSession(context.Context, *TroubleshootingSession) (*TroubleshootingSession, error)
	// Delete Alert object
	AutoDeleteAlert(context.Context, *Alert) (*Alert, error)
	// Delete AlertDestination object
	AutoDeleteAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Delete AlertPolicy object
	AutoDeleteAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Delete ArchiveRequest object
	AutoDeleteArchiveRequest(context.Context, *ArchiveRequest) (*ArchiveRequest, error)
	// Delete EventPolicy object
	AutoDeleteEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Delete FlowExportPolicy object
	AutoDeleteFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Delete FwlogPolicy object
	AutoDeleteFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Delete MirrorSession object
	AutoDeleteMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Delete TechSupportRequest object
	AutoDeleteTechSupportRequest(context.Context, *TechSupportRequest) (*TechSupportRequest, error)
	// Delete TroubleshootingSession object
	AutoDeleteTroubleshootingSession(context.Context, *TroubleshootingSession) (*TroubleshootingSession, error)
	// Get Alert object
	AutoGetAlert(context.Context, *Alert) (*Alert, error)
	// Get AlertDestination object
	AutoGetAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Get AlertPolicy object
	AutoGetAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Get ArchiveRequest object
	AutoGetArchiveRequest(context.Context, *ArchiveRequest) (*ArchiveRequest, error)
	// Get EventPolicy object
	AutoGetEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Get FlowExportPolicy object
	AutoGetFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Get FwlogPolicy object
	AutoGetFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Get MirrorSession object
	AutoGetMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Get TechSupportRequest object
	AutoGetTechSupportRequest(context.Context, *TechSupportRequest) (*TechSupportRequest, error)
	// Get TroubleshootingSession object
	AutoGetTroubleshootingSession(context.Context, *TroubleshootingSession) (*TroubleshootingSession, error)
	// Label Alert object
	AutoLabelAlert(context.Context, *api.Label) (*Alert, error)
	// Label AlertDestination object
	AutoLabelAlertDestination(context.Context, *api.Label) (*AlertDestination, error)
	// Label AlertPolicy object
	AutoLabelAlertPolicy(context.Context, *api.Label) (*AlertPolicy, error)
	// Label ArchiveRequest object
	AutoLabelArchiveRequest(context.Context, *api.Label) (*ArchiveRequest, error)
	// Label EventPolicy object
	AutoLabelEventPolicy(context.Context, *api.Label) (*EventPolicy, error)
	// Label FlowExportPolicy object
	AutoLabelFlowExportPolicy(context.Context, *api.Label) (*FlowExportPolicy, error)
	// Label FwlogPolicy object
	AutoLabelFwlogPolicy(context.Context, *api.Label) (*FwlogPolicy, error)
	// Label MirrorSession object
	AutoLabelMirrorSession(context.Context, *api.Label) (*MirrorSession, error)
	// Label TechSupportRequest object
	AutoLabelTechSupportRequest(context.Context, *api.Label) (*TechSupportRequest, error)
	// Label TroubleshootingSession object
	AutoLabelTroubleshootingSession(context.Context, *api.Label) (*TroubleshootingSession, error)
	// List Alert objects
	AutoListAlert(context.Context, *api.ListWatchOptions) (*AlertList, error)
	// List AlertDestination objects
	AutoListAlertDestination(context.Context, *api.ListWatchOptions) (*AlertDestinationList, error)
	// List AlertPolicy objects
	AutoListAlertPolicy(context.Context, *api.ListWatchOptions) (*AlertPolicyList, error)
	// List ArchiveRequest objects
	AutoListArchiveRequest(context.Context, *api.ListWatchOptions) (*ArchiveRequestList, error)
	// List EventPolicy objects
	AutoListEventPolicy(context.Context, *api.ListWatchOptions) (*EventPolicyList, error)
	// List FlowExportPolicy objects
	AutoListFlowExportPolicy(context.Context, *api.ListWatchOptions) (*FlowExportPolicyList, error)
	// List FwlogPolicy objects
	AutoListFwlogPolicy(context.Context, *api.ListWatchOptions) (*FwlogPolicyList, error)
	// List MirrorSession objects
	AutoListMirrorSession(context.Context, *api.ListWatchOptions) (*MirrorSessionList, error)
	// List TechSupportRequest objects
	AutoListTechSupportRequest(context.Context, *api.ListWatchOptions) (*TechSupportRequestList, error)
	// List TroubleshootingSession objects
	AutoListTroubleshootingSession(context.Context, *api.ListWatchOptions) (*TroubleshootingSessionList, error)
	// Update Alert object
	AutoUpdateAlert(context.Context, *Alert) (*Alert, error)
	// Update AlertDestination object
	AutoUpdateAlertDestination(context.Context, *AlertDestination) (*AlertDestination, error)
	// Update AlertPolicy object
	AutoUpdateAlertPolicy(context.Context, *AlertPolicy) (*AlertPolicy, error)
	// Update ArchiveRequest object
	AutoUpdateArchiveRequest(context.Context, *ArchiveRequest) (*ArchiveRequest, error)
	// Update EventPolicy object
	AutoUpdateEventPolicy(context.Context, *EventPolicy) (*EventPolicy, error)
	// Update FlowExportPolicy object
	AutoUpdateFlowExportPolicy(context.Context, *FlowExportPolicy) (*FlowExportPolicy, error)
	// Update FwlogPolicy object
	AutoUpdateFwlogPolicy(context.Context, *FwlogPolicy) (*FwlogPolicy, error)
	// Update MirrorSession object
	AutoUpdateMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	// Update TechSupportRequest object
	AutoUpdateTechSupportRequest(context.Context, *TechSupportRequest) (*TechSupportRequest, error)
	// Update TroubleshootingSession object
	AutoUpdateTroubleshootingSession(context.Context, *TroubleshootingSession) (*TroubleshootingSession, error)
	// Watch Alert objects. Supports WebSockets or HTTP long poll
	AutoWatchAlert(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertServer) error
	// Watch AlertDestination objects. Supports WebSockets or HTTP long poll
	AutoWatchAlertDestination(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertDestinationServer) error
	// Watch AlertPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchAlertPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchAlertPolicyServer) error
	// Watch ArchiveRequest objects. Supports WebSockets or HTTP long poll
	AutoWatchArchiveRequest(*api.ListWatchOptions, MonitoringV1_AutoWatchArchiveRequestServer) error
	// Watch EventPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchEventPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchEventPolicyServer) error
	// Watch FlowExportPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchFlowExportPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchFlowExportPolicyServer) error
	// Watch FwlogPolicy objects. Supports WebSockets or HTTP long poll
	AutoWatchFwlogPolicy(*api.ListWatchOptions, MonitoringV1_AutoWatchFwlogPolicyServer) error
	// Watch MirrorSession objects. Supports WebSockets or HTTP long poll
	AutoWatchMirrorSession(*api.ListWatchOptions, MonitoringV1_AutoWatchMirrorSessionServer) error
	AutoWatchSvcMonitoringV1(*api.ListWatchOptions, MonitoringV1_AutoWatchSvcMonitoringV1Server) error
	// Watch TechSupportRequest objects. Supports WebSockets or HTTP long poll
	AutoWatchTechSupportRequest(*api.ListWatchOptions, MonitoringV1_AutoWatchTechSupportRequestServer) error
	// Watch TroubleshootingSession objects. Supports WebSockets or HTTP long poll
	AutoWatchTroubleshootingSession(*api.ListWatchOptions, MonitoringV1_AutoWatchTroubleshootingSessionServer) error
	//
	Cancel(context.Context, *CancelArchiveRequest) (*ArchiveRequest, error)
}

func RegisterMonitoringV1Server(s *grpc.Server, srv MonitoringV1Server) {
	s.RegisterService(&_MonitoringV1_serviceDesc, srv)
}

func _MonitoringV1_AutoAddAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddArchiveRequest(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddTechSupportRequest(ctx, req.(*TechSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoAddTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TroubleshootingSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoAddTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoAddTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoAddTroubleshootingSession(ctx, req.(*TroubleshootingSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteArchiveRequest(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteTechSupportRequest(ctx, req.(*TechSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoDeleteTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TroubleshootingSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoDeleteTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoDeleteTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoDeleteTroubleshootingSession(ctx, req.(*TroubleshootingSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetArchiveRequest(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetTechSupportRequest(ctx, req.(*TechSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoGetTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TroubleshootingSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoGetTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoGetTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoGetTroubleshootingSession(ctx, req.(*TroubleshootingSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelAlert(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelAlertDestination(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelAlertPolicy(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelArchiveRequest(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelEventPolicy(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelFlowExportPolicy(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelFwlogPolicy(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelMirrorSession(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelTechSupportRequest(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoLabelTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Label)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoLabelTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoLabelTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoLabelTroubleshootingSession(ctx, req.(*api.Label))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlert(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlertDestination(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListAlertPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListArchiveRequest(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListEventPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListFlowExportPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListFwlogPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListMirrorSession(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListTechSupportRequest(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoListTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoListTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoListTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoListTroubleshootingSession(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlert(ctx, req.(*Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlertDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertDestination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlertDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlertDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlertDestination(ctx, req.(*AlertDestination))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateAlertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateAlertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateAlertPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateAlertPolicy(ctx, req.(*AlertPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateArchiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateArchiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateArchiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateArchiveRequest(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateEventPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateEventPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateEventPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateEventPolicy(ctx, req.(*EventPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateFlowExportPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowExportPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateFlowExportPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateFlowExportPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateFlowExportPolicy(ctx, req.(*FlowExportPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateFwlogPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FwlogPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateFwlogPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateFwlogPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateFwlogPolicy(ctx, req.(*FwlogPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateTechSupportRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateTechSupportRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateTechSupportRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateTechSupportRequest(ctx, req.(*TechSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoUpdateTroubleshootingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TroubleshootingSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).AutoUpdateTroubleshootingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/AutoUpdateTroubleshootingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).AutoUpdateTroubleshootingSession(ctx, req.(*TroubleshootingSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitoringV1_AutoWatchAlert_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlert(m, &monitoringV1AutoWatchAlertServer{stream})
}

type MonitoringV1_AutoWatchAlertServer interface {
	Send(*AutoMsgAlertWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertServer) Send(m *AutoMsgAlertWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchAlertDestination_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlertDestination(m, &monitoringV1AutoWatchAlertDestinationServer{stream})
}

type MonitoringV1_AutoWatchAlertDestinationServer interface {
	Send(*AutoMsgAlertDestinationWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertDestinationServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertDestinationServer) Send(m *AutoMsgAlertDestinationWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchAlertPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchAlertPolicy(m, &monitoringV1AutoWatchAlertPolicyServer{stream})
}

type MonitoringV1_AutoWatchAlertPolicyServer interface {
	Send(*AutoMsgAlertPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchAlertPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchAlertPolicyServer) Send(m *AutoMsgAlertPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchArchiveRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchArchiveRequest(m, &monitoringV1AutoWatchArchiveRequestServer{stream})
}

type MonitoringV1_AutoWatchArchiveRequestServer interface {
	Send(*AutoMsgArchiveRequestWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchArchiveRequestServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchArchiveRequestServer) Send(m *AutoMsgArchiveRequestWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchEventPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchEventPolicy(m, &monitoringV1AutoWatchEventPolicyServer{stream})
}

type MonitoringV1_AutoWatchEventPolicyServer interface {
	Send(*AutoMsgEventPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchEventPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchEventPolicyServer) Send(m *AutoMsgEventPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchFlowExportPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchFlowExportPolicy(m, &monitoringV1AutoWatchFlowExportPolicyServer{stream})
}

type MonitoringV1_AutoWatchFlowExportPolicyServer interface {
	Send(*AutoMsgFlowExportPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchFlowExportPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchFlowExportPolicyServer) Send(m *AutoMsgFlowExportPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchFwlogPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchFwlogPolicy(m, &monitoringV1AutoWatchFwlogPolicyServer{stream})
}

type MonitoringV1_AutoWatchFwlogPolicyServer interface {
	Send(*AutoMsgFwlogPolicyWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchFwlogPolicyServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchFwlogPolicyServer) Send(m *AutoMsgFwlogPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchMirrorSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchMirrorSession(m, &monitoringV1AutoWatchMirrorSessionServer{stream})
}

type MonitoringV1_AutoWatchMirrorSessionServer interface {
	Send(*AutoMsgMirrorSessionWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchMirrorSessionServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchMirrorSessionServer) Send(m *AutoMsgMirrorSessionWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchSvcMonitoringV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchSvcMonitoringV1(m, &monitoringV1AutoWatchSvcMonitoringV1Server{stream})
}

type MonitoringV1_AutoWatchSvcMonitoringV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type monitoringV1AutoWatchSvcMonitoringV1Server struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchSvcMonitoringV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchTechSupportRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchTechSupportRequest(m, &monitoringV1AutoWatchTechSupportRequestServer{stream})
}

type MonitoringV1_AutoWatchTechSupportRequestServer interface {
	Send(*AutoMsgTechSupportRequestWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchTechSupportRequestServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchTechSupportRequestServer) Send(m *AutoMsgTechSupportRequestWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_AutoWatchTroubleshootingSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringV1Server).AutoWatchTroubleshootingSession(m, &monitoringV1AutoWatchTroubleshootingSessionServer{stream})
}

type MonitoringV1_AutoWatchTroubleshootingSessionServer interface {
	Send(*AutoMsgTroubleshootingSessionWatchHelper) error
	grpc.ServerStream
}

type monitoringV1AutoWatchTroubleshootingSessionServer struct {
	grpc.ServerStream
}

func (x *monitoringV1AutoWatchTroubleshootingSessionServer) Send(m *AutoMsgTroubleshootingSessionWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringV1_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringV1Server).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MonitoringV1/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringV1Server).Cancel(ctx, req.(*CancelArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.MonitoringV1",
	HandlerType: (*MonitoringV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddAlert",
			Handler:    _MonitoringV1_AutoAddAlert_Handler,
		},
		{
			MethodName: "AutoAddAlertDestination",
			Handler:    _MonitoringV1_AutoAddAlertDestination_Handler,
		},
		{
			MethodName: "AutoAddAlertPolicy",
			Handler:    _MonitoringV1_AutoAddAlertPolicy_Handler,
		},
		{
			MethodName: "AutoAddArchiveRequest",
			Handler:    _MonitoringV1_AutoAddArchiveRequest_Handler,
		},
		{
			MethodName: "AutoAddEventPolicy",
			Handler:    _MonitoringV1_AutoAddEventPolicy_Handler,
		},
		{
			MethodName: "AutoAddFlowExportPolicy",
			Handler:    _MonitoringV1_AutoAddFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoAddFwlogPolicy",
			Handler:    _MonitoringV1_AutoAddFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoAddMirrorSession",
			Handler:    _MonitoringV1_AutoAddMirrorSession_Handler,
		},
		{
			MethodName: "AutoAddTechSupportRequest",
			Handler:    _MonitoringV1_AutoAddTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoAddTroubleshootingSession",
			Handler:    _MonitoringV1_AutoAddTroubleshootingSession_Handler,
		},
		{
			MethodName: "AutoDeleteAlert",
			Handler:    _MonitoringV1_AutoDeleteAlert_Handler,
		},
		{
			MethodName: "AutoDeleteAlertDestination",
			Handler:    _MonitoringV1_AutoDeleteAlertDestination_Handler,
		},
		{
			MethodName: "AutoDeleteAlertPolicy",
			Handler:    _MonitoringV1_AutoDeleteAlertPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteArchiveRequest",
			Handler:    _MonitoringV1_AutoDeleteArchiveRequest_Handler,
		},
		{
			MethodName: "AutoDeleteEventPolicy",
			Handler:    _MonitoringV1_AutoDeleteEventPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteFlowExportPolicy",
			Handler:    _MonitoringV1_AutoDeleteFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteFwlogPolicy",
			Handler:    _MonitoringV1_AutoDeleteFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteMirrorSession",
			Handler:    _MonitoringV1_AutoDeleteMirrorSession_Handler,
		},
		{
			MethodName: "AutoDeleteTechSupportRequest",
			Handler:    _MonitoringV1_AutoDeleteTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoDeleteTroubleshootingSession",
			Handler:    _MonitoringV1_AutoDeleteTroubleshootingSession_Handler,
		},
		{
			MethodName: "AutoGetAlert",
			Handler:    _MonitoringV1_AutoGetAlert_Handler,
		},
		{
			MethodName: "AutoGetAlertDestination",
			Handler:    _MonitoringV1_AutoGetAlertDestination_Handler,
		},
		{
			MethodName: "AutoGetAlertPolicy",
			Handler:    _MonitoringV1_AutoGetAlertPolicy_Handler,
		},
		{
			MethodName: "AutoGetArchiveRequest",
			Handler:    _MonitoringV1_AutoGetArchiveRequest_Handler,
		},
		{
			MethodName: "AutoGetEventPolicy",
			Handler:    _MonitoringV1_AutoGetEventPolicy_Handler,
		},
		{
			MethodName: "AutoGetFlowExportPolicy",
			Handler:    _MonitoringV1_AutoGetFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoGetFwlogPolicy",
			Handler:    _MonitoringV1_AutoGetFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoGetMirrorSession",
			Handler:    _MonitoringV1_AutoGetMirrorSession_Handler,
		},
		{
			MethodName: "AutoGetTechSupportRequest",
			Handler:    _MonitoringV1_AutoGetTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoGetTroubleshootingSession",
			Handler:    _MonitoringV1_AutoGetTroubleshootingSession_Handler,
		},
		{
			MethodName: "AutoLabelAlert",
			Handler:    _MonitoringV1_AutoLabelAlert_Handler,
		},
		{
			MethodName: "AutoLabelAlertDestination",
			Handler:    _MonitoringV1_AutoLabelAlertDestination_Handler,
		},
		{
			MethodName: "AutoLabelAlertPolicy",
			Handler:    _MonitoringV1_AutoLabelAlertPolicy_Handler,
		},
		{
			MethodName: "AutoLabelArchiveRequest",
			Handler:    _MonitoringV1_AutoLabelArchiveRequest_Handler,
		},
		{
			MethodName: "AutoLabelEventPolicy",
			Handler:    _MonitoringV1_AutoLabelEventPolicy_Handler,
		},
		{
			MethodName: "AutoLabelFlowExportPolicy",
			Handler:    _MonitoringV1_AutoLabelFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoLabelFwlogPolicy",
			Handler:    _MonitoringV1_AutoLabelFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoLabelMirrorSession",
			Handler:    _MonitoringV1_AutoLabelMirrorSession_Handler,
		},
		{
			MethodName: "AutoLabelTechSupportRequest",
			Handler:    _MonitoringV1_AutoLabelTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoLabelTroubleshootingSession",
			Handler:    _MonitoringV1_AutoLabelTroubleshootingSession_Handler,
		},
		{
			MethodName: "AutoListAlert",
			Handler:    _MonitoringV1_AutoListAlert_Handler,
		},
		{
			MethodName: "AutoListAlertDestination",
			Handler:    _MonitoringV1_AutoListAlertDestination_Handler,
		},
		{
			MethodName: "AutoListAlertPolicy",
			Handler:    _MonitoringV1_AutoListAlertPolicy_Handler,
		},
		{
			MethodName: "AutoListArchiveRequest",
			Handler:    _MonitoringV1_AutoListArchiveRequest_Handler,
		},
		{
			MethodName: "AutoListEventPolicy",
			Handler:    _MonitoringV1_AutoListEventPolicy_Handler,
		},
		{
			MethodName: "AutoListFlowExportPolicy",
			Handler:    _MonitoringV1_AutoListFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoListFwlogPolicy",
			Handler:    _MonitoringV1_AutoListFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoListMirrorSession",
			Handler:    _MonitoringV1_AutoListMirrorSession_Handler,
		},
		{
			MethodName: "AutoListTechSupportRequest",
			Handler:    _MonitoringV1_AutoListTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoListTroubleshootingSession",
			Handler:    _MonitoringV1_AutoListTroubleshootingSession_Handler,
		},
		{
			MethodName: "AutoUpdateAlert",
			Handler:    _MonitoringV1_AutoUpdateAlert_Handler,
		},
		{
			MethodName: "AutoUpdateAlertDestination",
			Handler:    _MonitoringV1_AutoUpdateAlertDestination_Handler,
		},
		{
			MethodName: "AutoUpdateAlertPolicy",
			Handler:    _MonitoringV1_AutoUpdateAlertPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateArchiveRequest",
			Handler:    _MonitoringV1_AutoUpdateArchiveRequest_Handler,
		},
		{
			MethodName: "AutoUpdateEventPolicy",
			Handler:    _MonitoringV1_AutoUpdateEventPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateFlowExportPolicy",
			Handler:    _MonitoringV1_AutoUpdateFlowExportPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateFwlogPolicy",
			Handler:    _MonitoringV1_AutoUpdateFwlogPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateMirrorSession",
			Handler:    _MonitoringV1_AutoUpdateMirrorSession_Handler,
		},
		{
			MethodName: "AutoUpdateTechSupportRequest",
			Handler:    _MonitoringV1_AutoUpdateTechSupportRequest_Handler,
		},
		{
			MethodName: "AutoUpdateTroubleshootingSession",
			Handler:    _MonitoringV1_AutoUpdateTroubleshootingSession_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _MonitoringV1_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchAlert",
			Handler:       _MonitoringV1_AutoWatchAlert_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAlertDestination",
			Handler:       _MonitoringV1_AutoWatchAlertDestination_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchAlertPolicy",
			Handler:       _MonitoringV1_AutoWatchAlertPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchArchiveRequest",
			Handler:       _MonitoringV1_AutoWatchArchiveRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchEventPolicy",
			Handler:       _MonitoringV1_AutoWatchEventPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchFlowExportPolicy",
			Handler:       _MonitoringV1_AutoWatchFlowExportPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchFwlogPolicy",
			Handler:       _MonitoringV1_AutoWatchFwlogPolicy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchMirrorSession",
			Handler:       _MonitoringV1_AutoWatchMirrorSession_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchSvcMonitoringV1",
			Handler:       _MonitoringV1_AutoWatchSvcMonitoringV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchTechSupportRequest",
			Handler:       _MonitoringV1_AutoWatchTechSupportRequest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AutoWatchTroubleshootingSession",
			Handler:       _MonitoringV1_AutoWatchTroubleshootingSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_monitoring.proto",
}

func (m *AlertDestinationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertDestinationList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n2, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AlertList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AlertPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ArchiveRequestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveRequestList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n8, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertDestinationWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertDestinationWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n9, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *AutoMsgAlertPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n10, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *AutoMsgAlertWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n11, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *AutoMsgArchiveRequestWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgArchiveRequestWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n12, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *AutoMsgEventPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n13, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n14, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *AutoMsgFwlogPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFwlogPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n15, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *AutoMsgMirrorSessionWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMirrorSessionWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n16, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *AutoMsgTechSupportRequestWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTechSupportRequestWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n17, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *AutoMsgTroubleshootingSessionWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTroubleshootingSessionWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.Object.Size()))
		n18, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *EventPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n19, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n20, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowExportPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n21, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n22, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FwlogPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FwlogPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n23, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n24, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n25, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n26, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TechSupportRequestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n27, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n28, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TroubleshootingSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootingSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.TypeMeta.Size()))
	n29, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvcMonitoring(dAtA, i, uint64(m.ListMeta.Size()))
	n30, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvcMonitoring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSvcMonitoring(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AlertDestinationList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AlertList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AlertPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *ArchiveRequestList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertDestinationWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgAlertPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgAlertWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgAlertWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgArchiveRequestWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgEventPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgFlowExportPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgFwlogPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgMirrorSessionWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgTechSupportRequestWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *AutoMsgTroubleshootingSessionWatchHelper) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSvcMonitoring(uint64(l))
	}
	return n
}

func (m *EventPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *FlowExportPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *FwlogPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *TechSupportRequestList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func (m *TroubleshootingSessionList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovSvcMonitoring(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvcMonitoring(uint64(l))
		}
	}
	return n
}

func sovSvcMonitoring(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvcMonitoring(x uint64) (n int) {
	return sovSvcMonitoring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertDestinationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertDestinationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertDestinationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AlertDestination{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Alert{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AlertPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveRequestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveRequestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveRequestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ArchiveRequest{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertDestinationWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertDestinationWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertDestinationWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertDestinationWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertDestinationWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AlertDestination{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &AlertPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgAlertWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgAlertWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgAlertWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgAlertWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Alert{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgArchiveRequestWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgArchiveRequestWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgArchiveRequestWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgArchiveRequestWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgArchiveRequestWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &ArchiveRequest{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgEventPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgEventPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgEventPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &EventPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFlowExportPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgFlowExportPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgFlowExportPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgFlowExportPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFlowExportPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &FlowExportPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFwlogPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgFwlogPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgFwlogPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgFwlogPolicyWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgFwlogPolicyWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &FwlogPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMirrorSessionWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgMirrorSessionWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMirrorSessionWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &MirrorSession{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTechSupportRequestWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTechSupportRequestWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTechSupportRequestWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgTechSupportRequestWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTechSupportRequestWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &TechSupportRequest{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTroubleshootingSessionWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgTroubleshootingSessionWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgTroubleshootingSessionWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &AutoMsgTroubleshootingSessionWatchHelper_WatchEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgTroubleshootingSessionWatchHelper_WatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &TroubleshootingSession{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &EventPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowExportPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FlowExportPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FwlogPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FwlogPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FwlogPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FwlogPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MirrorSession{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TechSupportRequest{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootingSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootingSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootingSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TroubleshootingSession{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvcMonitoring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvcMonitoring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvcMonitoring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvcMonitoring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvcMonitoring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvcMonitoring
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvcMonitoring
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvcMonitoring(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvcMonitoring = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvcMonitoring   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc_monitoring.proto", fileDescriptorSvcMonitoring) }

var fileDescriptorSvcMonitoring = []byte{
	// 3193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5c, 0x6d, 0x6c, 0x1c, 0x47,
	0xfd, 0xf6, 0x38, 0x89, 0xfb, 0xef, 0x24, 0xce, 0xcb, 0xf8, 0x25, 0xbe, 0xb5, 0x63, 0xbb, 0x9b,
	0x34, 0xb5, 0xdd, 0xf8, 0xee, 0xea, 0x56, 0x6d, 0xea, 0x34, 0x49, 0xe3, 0x3a, 0x2f, 0x7f, 0xc8,
	0x1b, 0x8e, 0x1b, 0xa2, 0xa4, 0x25, 0x9c, 0xcf, 0xe3, 0xf3, 0xc1, 0xf9, 0xf6, 0xb8, 0x5d, 0x3b,
	0x09, 0xa8, 0x08, 0x72, 0xae, 0x54, 0x09, 0xb5, 0x48, 0xe4, 0x13, 0xe1, 0xa5, 0xaa, 0x85, 0x84,
	0x5a, 0x54, 0x45, 0x4d, 0x85, 0x0a, 0x45, 0x82, 0x08, 0x89, 0x12, 0x05, 0x21, 0x15, 0xa1, 0x2a,
	0xa8, 0x1f, 0x2c, 0x14, 0x45, 0x50, 0xe5, 0x03, 0x1f, 0xe0, 0x13, 0x7c, 0x01, 0xed, 0xcc, 0xdc,
	0xed, 0xcc, 0xee, 0xcc, 0xee, 0xac, 0x7d, 0x8e, 0x9c, 0x2f, 0xf1, 0xdd, 0xed, 0xcc, 0xec, 0xf3,
	0x3c, 0x3b, 0xf3, 0x7b, 0xf6, 0xf7, 0x9b, 0xdd, 0xc0, 0x56, 0x7b, 0x2e, 0x7b, 0x7e, 0xc6, 0x2a,
	0xe6, 0x1d, 0xab, 0x9c, 0x2f, 0xe6, 0x92, 0xa5, 0xb2, 0xe5, 0x58, 0x08, 0x7a, 0xbf, 0x18, 0x5d,
	0x39, 0xcb, 0xca, 0x15, 0x70, 0x2a, 0x53, 0xca, 0xa7, 0x32, 0xc5, 0xa2, 0xe5, 0x64, 0x9c, 0xbc,
	0x55, 0xb4, 0x69, 0x4b, 0xe3, 0x60, 0x2e, 0xef, 0x4c, 0xcf, 0x4e, 0x24, 0xb3, 0xd6, 0x4c, 0xaa,
	0x84, 0x8b, 0x76, 0xa6, 0x38, 0x69, 0xa5, 0xec, 0x0b, 0xa9, 0x39, 0x5c, 0xcc, 0x67, 0x71, 0x6a,
	0xd6, 0xc9, 0x17, 0x6c, 0xb7, 0x6b, 0x0e, 0x17, 0xf9, 0xde, 0xa9, 0x7c, 0x31, 0x5b, 0x98, 0x9d,
	0xc4, 0xd5, 0x61, 0x06, 0xb9, 0x61, 0x72, 0x56, 0xce, 0x4a, 0x91, 0x9f, 0x27, 0x66, 0xa7, 0xc8,
	0x37, 0xf2, 0x85, 0x7c, 0x62, 0xcd, 0x37, 0x38, 0xb8, 0x98, 0x29, 0x3a, 0xec, 0xdb, 0x26, 0x07,
	0x17, 0xf0, 0x0c, 0x76, 0xca, 0x97, 0xaa, 0x87, 0x33, 0x05, 0x5c, 0x76, 0xaa, 0x63, 0x6f, 0xc1,
	0x73, 0xb8, 0xe8, 0x94, 0xac, 0x42, 0x3e, 0x5b, 0x6b, 0x30, 0x93, 0x2f, 0x97, 0xad, 0x72, 0xb5,
	0x81, 0x83, 0xb3, 0xd3, 0xf6, 0x6c, 0xa9, 0x64, 0x95, 0xab, 0x43, 0xb6, 0x39, 0x65, 0x6b, 0x76,
	0xa2, 0x80, 0xed, 0x69, 0xcb, 0x72, 0x6a, 0xba, 0x18, 0xcd, 0x99, 0x72, 0x76, 0x3a, 0x3f, 0x87,
	0xd9, 0xd7, 0x47, 0x15, 0xe4, 0x5d, 0xa9, 0x66, 0xb0, 0x93, 0xa1, 0xcd, 0xcc, 0x7f, 0x00, 0xd8,
	0x7a, 0xc0, 0x45, 0x34, 0x8a, 0x6d, 0x27, 0x5f, 0x24, 0x0a, 0x1c, 0xcd, 0xdb, 0x0e, 0x7a, 0x1a,
	0x82, 0xf1, 0x8e, 0xc6, 0x5e, 0xd0, 0xb7, 0x7e, 0xa8, 0x39, 0x99, 0x29, 0xe5, 0x93, 0xe3, 0x97,
	0x4a, 0xf8, 0x18, 0x76, 0x32, 0x23, 0x2d, 0x37, 0x17, 0x7b, 0x1a, 0x3e, 0x5e, 0xec, 0x01, 0xf7,
	0x16, 0x7b, 0x1e, 0xda, 0x95, 0x2f, 0x16, 0xf2, 0x45, 0x3c, 0x56, 0xfd, 0x80, 0x4e, 0xc0, 0xff,
	0x73, 0xfb, 0xbb, 0x2d, 0x3b, 0xd6, 0x70, 0xdd, 0xab, 0x3f, 0x8e, 0x74, 0x71, 0xdd, 0x37, 0x17,
	0xf2, 0xb6, 0x33, 0xe8, 0xc2, 0xa9, 0x8e, 0x13, 0xf8, 0x05, 0xed, 0x85, 0xeb, 0xfe, 0xdf, 0xc1,
	0x33, 0x76, 0xc7, 0xda, 0xde, 0x35, 0x7d, 0xeb, 0x87, 0xba, 0x92, 0xdc, 0x8c, 0xf0, 0x23, 0x1f,
	0x79, 0xf8, 0xde, 0x62, 0xcf, 0xba, 0xbc, 0xdb, 0x7c, 0x8c, 0xfe, 0x19, 0xde, 0xf8, 0xe9, 0xab,
	0x09, 0xe8, 0x0e, 0x3a, 0x8d, 0x0b, 0x25, 0x5c, 0x36, 0xff, 0x02, 0xe0, 0xc3, 0xa4, 0xdb, 0xea,
	0x62, 0x39, 0x24, 0xb2, 0xdc, 0x12, 0x60, 0xa9, 0x41, 0xed, 0x2e, 0x80, 0x9b, 0x48, 0xdb, 0x93,
	0x64, 0x3e, 0xad, 0x2e, 0x82, 0xbb, 0x45, 0x82, 0x5b, 0x03, 0x04, 0x29, 0x68, 0x0d, 0x9a, 0xf7,
	0x00, 0x44, 0x07, 0xe8, 0x5c, 0x1f, 0xc3, 0x5f, 0x9b, 0xc5, 0xf6, 0x2a, 0xbb, 0x94, 0x7b, 0x44,
	0xa6, 0x86, 0xc0, 0x54, 0xc0, 0xad, 0x41, 0xf6, 0xb5, 0x46, 0x68, 0x1e, 0x98, 0x75, 0xac, 0x63,
	0x76, 0xce, 0x3f, 0xd9, 0xbf, 0x98, 0x71, 0xb2, 0xd3, 0x47, 0x48, 0x33, 0xf4, 0x32, 0x6c, 0x3a,
	0xe8, 0x46, 0x12, 0xbb, 0x03, 0x90, 0x93, 0x3e, 0x2b, 0x9c, 0x34, 0xb2, 0x7f, 0x92, 0x7c, 0x26,
	0x23, 0x8c, 0xc0, 0x7b, 0x8b, 0x3d, 0x4d, 0x24, 0x2c, 0xd9, 0x63, 0xec, 0xaf, 0x51, 0x86, 0xd0,
	0x6b, 0x81, 0x7a, 0xe1, 0x5a, 0x57, 0xdb, 0x0e, 0xd0, 0x0b, 0xfa, 0x1e, 0x1e, 0x41, 0xf7, 0x16,
	0x7b, 0x36, 0x3a, 0x97, 0x4a, 0x78, 0x97, 0x35, 0xe3, 0x72, 0x28, 0x39, 0x97, 0xd0, 0x08, 0x6c,
	0x3a, 0x31, 0xf1, 0x15, 0x9c, 0x75, 0xd8, 0x05, 0x09, 0x5f, 0xb4, 0xad, 0xae, 0xb0, 0x16, 0x69,
	0xef, 0x8d, 0x31, 0xbc, 0xe9, 0xd3, 0x57, 0x13, 0xeb, 0x2f, 0xb8, 0x67, 0x65, 0x52, 0xfc, 0x1b,
	0xc0, 0x6d, 0x3c, 0x15, 0x3a, 0x61, 0x78, 0x15, 0xce, 0xf8, 0x54, 0x78, 0x4a, 0xa5, 0x42, 0xa0,
	0x6b, 0x94, 0x00, 0x33, 0x31, 0x05, 0xd8, 0xeb, 0x13, 0x40, 0x39, 0xdd, 0x35, 0xb9, 0xff, 0x1d,
	0xc0, 0xad, 0x3c, 0x01, 0x9e, 0xf5, 0x98, 0x8f, 0x75, 0x52, 0xc5, 0x3a, 0x06, 0xdf, 0x5c, 0x4c,
	0xbe, 0xcf, 0xf8, 0xf8, 0x4a, 0xe2, 0x97, 0x26, 0xd3, 0xcb, 0x8d, 0xb0, 0xb7, 0x0a, 0x5a, 0x58,
	0x2c, 0x3c, 0xe5, 0x73, 0x3e, 0xca, 0xcf, 0xc8, 0x28, 0xab, 0x7a, 0x47, 0x71, 0x2f, 0xc5, 0xe4,
	0xfe, 0xbc, 0x8f, 0x7b, 0xd8, 0x82, 0x8f, 0x3f, 0xd5, 0x09, 0x8a, 0xa5, 0x4d, 0x75, 0x79, 0xd7,
	0xfb, 0x3a, 0xd5, 0x39, 0x08, 0xba, 0xdc, 0xb9, 0x88, 0x77, 0xa8, 0x60, 0x5d, 0x38, 0x78, 0xd1,
	0xbd, 0xf5, 0x09, 0x0a, 0xa0, 0x13, 0xf1, 0x42, 0xfa, 0xdf, 0xd7, 0x88, 0xe7, 0xc7, 0xb1, 0x84,
	0x69, 0x70, 0xe8, 0x42, 0xc1, 0xca, 0x2d, 0x6d, 0x1a, 0xc8, 0xbb, 0xde, 0xd7, 0x69, 0xc0, 0x41,
	0xd0, 0xe5, 0xfe, 0x5f, 0x00, 0x7b, 0x18, 0x81, 0x63, 0xe4, 0x86, 0xf8, 0x14, 0xb6, 0x6d, 0x9f,
	0xeb, 0x9d, 0xf5, 0xb1, 0x7f, 0x5a, 0xc2, 0x5e, 0xd5, 0x39, 0x8a, 0xbf, 0x15, 0x93, 0xff, 0x7e,
	0x1f, 0xff, 0x04, 0x8f, 0x45, 0x00, 0xa1, 0xab, 0xc0, 0x1b, 0x8d, 0x70, 0x07, 0x23, 0x31, 0x8e,
	0xb3, 0xd3, 0xa7, 0x68, 0x12, 0x20, 0x89, 0x86, 0xe7, 0x7d, 0x32, 0xec, 0x91, 0xc8, 0x10, 0x3a,
	0x42, 0x94, 0x16, 0x4e, 0x4c, 0x2d, 0x46, 0x7d, 0x5a, 0x74, 0xf3, 0x80, 0x82, 0x48, 0x74, 0x05,
	0xb9, 0xda, 0x08, 0xfb, 0xaa, 0x74, 0xc4, 0x14, 0x48, 0x32, 0x37, 0xb2, 0x3e, 0x51, 0xf6, 0xcb,
	0x44, 0x89, 0x1a, 0x25, 0x4a, 0x98, 0x8b, 0x31, 0x85, 0x39, 0xe2, 0x13, 0xc6, 0x14, 0x84, 0x91,
	0xa2, 0xd1, 0x15, 0xc7, 0xbd, 0xf9, 0xe7, 0xa2, 0xed, 0x83, 0x73, 0xf3, 0xcf, 0x5b, 0x44, 0xf4,
	0xfd, 0xb0, 0x9b, 0xaf, 0xfa, 0xc3, 0xe9, 0x83, 0x93, 0xaf, 0x06, 0x8c, 0x40, 0x2f, 0xa9, 0xe3,
	0xc2, 0xe7, 0x83, 0x73, 0x5d, 0xf9, 0x98, 0x1f, 0x4d, 0xf3, 0x33, 0x00, 0xb7, 0x08, 0x51, 0x72,
	0x75, 0x11, 0x1d, 0x16, 0x89, 0x86, 0x04, 0xf7, 0x68, 0xaa, 0xff, 0x04, 0xb0, 0x3d, 0x18, 0x04,
	0x57, 0x17, 0xdf, 0xfd, 0x22, 0xdf, 0xa8, 0x00, 0x1e, 0x4d, 0xfa, 0x3f, 0x00, 0x1a, 0xf2, 0x00,
	0xb7, 0xba, 0x88, 0xbf, 0x20, 0x12, 0xd7, 0x09, 0xd0, 0x91, 0xe4, 0x87, 0x3e, 0x99, 0x86, 0x1b,
	0x8e, 0xd5, 0xc6, 0x39, 0xfd, 0x04, 0x3a, 0x02, 0x37, 0xb8, 0x16, 0x74, 0x60, 0x72, 0x92, 0xe4,
	0x46, 0x28, 0x98, 0x2e, 0x19, 0xc1, 0x9f, 0x4c, 0x74, 0x7d, 0x3e, 0xd1, 0x94, 0x2d, 0xe3, 0x8c,
	0x83, 0x7f, 0x31, 0x9f, 0x00, 0x37, 0xe6, 0x13, 0x0d, 0xe8, 0xe7, 0x2c, 0x31, 0xac, 0x0e, 0xc5,
	0xe5, 0xd5, 0x28, 0x34, 0xeb, 0x36, 0x42, 0x8f, 0x9a, 0x5f, 0x0a, 0x9c, 0x0b, 0x5c, 0xfe, 0xf3,
	0xdd, 0x2b, 0x8d, 0x87, 0x60, 0xc3, 0x30, 0x18, 0x38, 0x9b, 0x20, 0x7f, 0x4c, 0x94, 0xca, 0xf8,
	0x3a, 0xda, 0xe6, 0x8e, 0x14, 0x2d, 0x80, 0xa6, 0xbe, 0x71, 0x22, 0x39, 0x4e, 0x3e, 0xbd, 0x12,
	0x6c, 0x85, 0x7e, 0x0c, 0x20, 0xe2, 0x71, 0xd3, 0x40, 0x81, 0x54, 0x79, 0xb2, 0xa1, 0x3a, 0x60,
	0x9e, 0x56, 0x00, 0xdd, 0x47, 0x81, 0xb6, 0x51, 0xa0, 0x1b, 0x29, 0x04, 0xd2, 0x27, 0x8f, 0x6d,
	0xb3, 0x57, 0x05, 0xb2, 0xda, 0x02, 0xbd, 0x0b, 0x60, 0x5b, 0x15, 0xa0, 0x90, 0xc3, 0xa1, 0x90,
	0xfc, 0xce, 0x08, 0x39, 0x66, 0xbe, 0xa4, 0x40, 0x3a, 0x4a, 0x91, 0x76, 0x50, 0xa4, 0x5b, 0x52,
	0xac, 0x8e, 0x3b, 0x58, 0xa6, 0xfd, 0x6c, 0x73, 0xbb, 0x0c, 0xac, 0xaf, 0x11, 0xfa, 0xa1, 0x27,
	0x28, 0xe7, 0xa8, 0x48, 0x65, 0xb5, 0x86, 0xea, 0x80, 0x39, 0xae, 0x80, 0xf9, 0x1c, 0x85, 0xd9,
	0x4a, 0x61, 0x36, 0xa7, 0xc8, 0x2d, 0xd0, 0x20, 0x2d, 0x5d, 0x9b, 0x3d, 0x12, 0x88, 0x7c, 0x03,
	0xf4, 0xbe, 0x37, 0x4f, 0xfd, 0x26, 0x88, 0x42, 0x2d, 0xd2, 0x08, 0x3d, 0xaa, 0x2d, 0xea, 0x94,
	0xbf, 0xa3, 0x4c, 0x54, 0x7f, 0x23, 0x74, 0xd5, 0x13, 0x95, 0xb3, 0x33, 0xa4, 0xf2, 0x39, 0x43,
	0x75, 0xc0, 0x1c, 0x53, 0xc0, 0x1c, 0xa6, 0x30, 0x5b, 0x28, 0xcc, 0x0d, 0xa9, 0x29, 0xae, 0x4f,
	0xb7, 0x0c, 0x21, 0x87, 0xe2, 0x27, 0x00, 0xb6, 0x32, 0x70, 0x82, 0x05, 0x21, 0xb5, 0x3b, 0x19,
	0xea, 0x43, 0xda, 0x0b, 0x49, 0xec, 0x25, 0x5b, 0x48, 0x22, 0x9a, 0xd7, 0x00, 0x4c, 0x30, 0x98,
	0x41, 0xe7, 0x40, 0x11, 0xce, 0x62, 0x44, 0x1c, 0x37, 0x1f, 0x0f, 0xc6, 0x44, 0x82, 0xba, 0xa6,
	0x28, 0xb7, 0x7f, 0x82, 0xfe, 0xc4, 0xf2, 0x69, 0x17, 0x8a, 0x34, 0x96, 0x23, 0x8d, 0x78, 0x6f,
	0x68, 0xb4, 0x31, 0xa7, 0x15, 0x62, 0x9e, 0xa4, 0x62, 0x76, 0x53, 0x74, 0x5b, 0x53, 0x8a, 0xee,
	0xfd, 0x12, 0x55, 0x15, 0x88, 0x3f, 0x0f, 0x37, 0xb9, 0x94, 0x46, 0x71, 0x01, 0x3b, 0x38, 0xb6,
	0x9b, 0x4c, 0x92, 0x6e, 0x35, 0x37, 0xb9, 0x09, 0xa0, 0xe1, 0x1b, 0xad, 0x5e, 0x86, 0x52, 0x0c,
	0x9c, 0x8e, 0x2a, 0x72, 0x1a, 0x36, 0x0c, 0x37, 0x9c, 0x7d, 0xc4, 0xfd, 0x77, 0xa0, 0x33, 0x68,
	0x14, 0xae, 0x02, 0xc7, 0x33, 0x33, 0xf8, 0x95, 0x81, 0x41, 0x1d, 0x5f, 0xa9, 0x35, 0x47, 0xef,
	0xb1, 0xf8, 0xcd, 0x51, 0x59, 0xb2, 0xc7, 0x4c, 0x29, 0xb0, 0x1f, 0x27, 0xd8, 0xb7, 0x11, 0xec,
	0x5b, 0x45, 0xff, 0xf0, 0x70, 0xf7, 0x47, 0x59, 0x8d, 0x87, 0xf9, 0x06, 0x80, 0x1d, 0x1c, 0xe6,
	0xfa, 0xd8, 0x4e, 0x41, 0x01, 0x7e, 0x9c, 0x80, 0xef, 0x25, 0xe0, 0x8d, 0x80, 0x9f, 0x78, 0xf8,
	0x77, 0x69, 0xb8, 0x8f, 0x47, 0xe1, 0x9a, 0x20, 0xfb, 0xf2, 0x9c, 0x68, 0x52, 0x81, 0xfc, 0x28,
	0x41, 0xde, 0x45, 0x90, 0xb7, 0x0b, 0x36, 0xe3, 0xa1, 0xee, 0x8b, 0x30, 0x24, 0x0f, 0xf1, 0x47,
	0xc2, 0x9c, 0xaf, 0xab, 0x39, 0xe9, 0x49, 0xef, 0x77, 0x9d, 0x70, 0xe9, 0x95, 0xad, 0x6b, 0x77,
	0x2c, 0x8c, 0xc8, 0xb2, 0xfc, 0x6a, 0x42, 0x81, 0xfc, 0x73, 0x04, 0x79, 0x27, 0x41, 0xde, 0xc6,
	0xbb, 0x91, 0x07, 0xfa, 0xb1, 0x70, 0xdb, 0xf2, 0xf0, 0x7e, 0xc0, 0x6e, 0x09, 0x28, 0xde, 0x7a,
	0x58, 0x98, 0xde, 0x3a, 0x15, 0xfa, 0x84, 0xaf, 0x53, 0x79, 0x53, 0x74, 0x05, 0xc0, 0x2e, 0x0f,
	0xf9, 0x0a, 0xb8, 0xda, 0x93, 0xc1, 0xd8, 0x4c, 0x88, 0x54, 0x85, 0xe7, 0x4c, 0xcd, 0x43, 0x75,
	0x17, 0xd0, 0x9d, 0x13, 0x86, 0x6a, 0x65, 0x0d, 0xee, 0xa2, 0x42, 0xea, 0x2f, 0x13, 0xa9, 0x77,
	0x12, 0x9c, 0xbd, 0x0a, 0xcf, 0xf2, 0x34, 0x1f, 0xd2, 0xf6, 0x39, 0x8f, 0xe6, 0x77, 0x00, 0x4d,
	0x9e, 0x0e, 0x63, 0x27, 0x8e, 0xdd, 0xbd, 0x78, 0x7d, 0x3e, 0xb1, 0x26, 0x87, 0x1d, 0x01, 0xed,
	0xf3, 0x04, 0x6d, 0xbb, 0xfb, 0x2f, 0xda, 0x4c, 0xa3, 0x32, 0x17, 0xcb, 0x4c, 0x55, 0xe4, 0xe6,
	0xda, 0xfc, 0x96, 0x4d, 0xe2, 0x2a, 0x9a, 0x7a, 0xd9, 0xe5, 0x57, 0x65, 0x70, 0x39, 0xaf, 0x44,
	0x61, 0x5e, 0x89, 0x62, 0x7a, 0xe5, 0xcf, 0xd8, 0x6d, 0x6e, 0x95, 0xc4, 0x92, 0x8d, 0x32, 0x2b,
	0x43, 0xcd, 0xad, 0x3e, 0xa4, 0x72, 0x49, 0x14, 0xc3, 0x25, 0x3f, 0x64, 0x71, 0xce, 0x45, 0x5b,
	0x1f, 0x8b, 0xcc, 0xcb, 0x60, 0x73, 0x41, 0x1a, 0x85, 0xf8, 0x23, 0x8a, 0xe7, 0x8f, 0x6f, 0x7b,
	0x52, 0x2f, 0xcf, 0x1c, 0x33, 0x32, 0xcc, 0x9c, 0x33, 0x22, 0x85, 0x33, 0x22, 0x7d, 0x67, 0xbc,
	0xe1, 0xcd, 0xed, 0xba, 0xda, 0xa2, 0x86, 0xdc, 0x6a, 0x97, 0x8b, 0xe7, 0x89, 0x3f, 0xf5, 0xe4,
	0x5e, 0x9e, 0x21, 0x9e, 0x97, 0x61, 0xe6, 0xdc, 0x10, 0xc9, 0xdd, 0x10, 0x69, 0xbb, 0xe1, 0x7b,
	0x2c, 0x9b, 0x3b, 0x8c, 0x9d, 0x7a, 0x58, 0xa1, 0xc6, 0x4a, 0x54, 0x98, 0x5b, 0x0c, 0x1f, 0x7c,
	0x9d, 0xa5, 0x76, 0x87, 0xb1, 0xb3, 0x02, 0x26, 0x98, 0x16, 0x29, 0x70, 0x0e, 0x88, 0x14, 0x0e,
	0xb8, 0xc8, 0xf2, 0x3b, 0x17, 0xcf, 0xca, 0xda, 0xdf, 0xac, 0x4c, 0x5e, 0xce, 0xfb, 0x50, 0xa4,
	0xf7, 0xa1, 0xa5, 0x78, 0xdf, 0x9b, 0x00, 0x6e, 0x74, 0x09, 0x1e, 0xcd, 0x4c, 0xe0, 0x02, 0x75,
	0x3f, 0x48, 0xeb, 0x9d, 0xee, 0x0f, 0x32, 0xdb, 0x73, 0xd3, 0xae, 0x75, 0x05, 0xf7, 0x68, 0x15,
	0xea, 0xad, 0xf9, 0xc4, 0x3a, 0x72, 0xac, 0x36, 0x25, 0xc0, 0x00, 0x99, 0x13, 0x60, 0xc0, 0x6c,
	0xf7, 0xfb, 0x5b, 0x8a, 0x74, 0x35, 0xfb, 0xa2, 0x9d, 0x90, 0xb6, 0x44, 0xb7, 0xd9, 0x94, 0xf0,
	0x10, 0xf2, 0x8e, 0xc8, 0x83, 0x0d, 0xf7, 0xbf, 0xef, 0x02, 0x19, 0xf0, 0xcd, 0xfe, 0x76, 0x84,
	0xc3, 0x24, 0xe5, 0xd0, 0x47, 0x39, 0x3c, 0x12, 0xe2, 0x74, 0x8c, 0xce, 0x93, 0xb1, 0xec, 0x91,
	0x31, 0xbb, 0xc1, 0x16, 0xa8, 0xc7, 0x8c, 0x05, 0x13, 0x9e, 0x94, 0xd2, 0x19, 0x2f, 0x4b, 0xf9,
	0xac, 0xe7, 0x9a, 0x10, 0x2a, 0x2f, 0x51, 0x2a, 0x3b, 0x28, 0x95, 0x6d, 0x0a, 0x0b, 0x64, 0x34,
	0x52, 0xda, 0x9e, 0xc9, 0x28, 0x4c, 0xd1, 0x78, 0x4e, 0x19, 0x88, 0xd6, 0xc9, 0x93, 0x08, 0xb3,
	0xca, 0xed, 0x7e, 0x1a, 0x0d, 0xb7, 0xe6, 0x13, 0x1b, 0x7d, 0x83, 0xfd, 0x9a, 0x97, 0x8a, 0xb7,
	0x39, 0xa5, 0x54, 0xbc, 0xb3, 0x7d, 0x4b, 0x2e, 0x15, 0xd7, 0x84, 0x48, 0x75, 0x96, 0x4a, 0xb5,
	0x9d, 0x4a, 0xd5, 0x25, 0xf7, 0x30, 0xa6, 0x54, 0x52, 0xd7, 0xf3, 0x98, 0x50, 0x9f, 0xf0, 0xb3,
	0x38, 0xe0, 0x7d, 0xca, 0x59, 0x1c, 0x70, 0xba, 0xd7, 0xe5, 0xb3, 0xd8, 0xdf, 0x8e, 0xf0, 0x99,
	0xa0, 0x7c, 0x1e, 0xa3, 0x7c, 0x7a, 0xd5, 0xa6, 0xc6, 0x38, 0x0d, 0xc5, 0x31, 0x42, 0xc6, 0xeb,
	0x57, 0xfc, 0x85, 0xe1, 0x0d, 0x51, 0x79, 0x61, 0x78, 0x0f, 0xfc, 0xa6, 0xf4, 0xba, 0x70, 0x2d,
	0x08, 0x8f, 0x33, 0x94, 0x87, 0x49, 0x79, 0x74, 0x4a, 0xdd, 0x8e, 0x51, 0x18, 0xd4, 0x34, 0x47,
	0x86, 0xfe, 0x23, 0x00, 0xdb, 0x6b, 0xe8, 0x45, 0x93, 0xe4, 0xf1, 0x87, 0xb8, 0xe2, 0xbc, 0xf4,
	0x7a, 0x34, 0x0b, 0x8d, 0xa4, 0xeb, 0x50, 0x6e, 0x80, 0x21, 0xeb, 0x30, 0xac, 0x03, 0x2a, 0xc3,
	0xce, 0x1a, 0x0f, 0x89, 0x71, 0xf2, 0x64, 0xa2, 0x4c, 0xf2, 0x31, 0xd9, 0x7a, 0x44, 0x92, 0x41,
	0xff, 0xc5, 0x9e, 0xa7, 0xa1, 0x27, 0x95, 0xbb, 0x23, 0x7f, 0x62, 0x1d, 0x17, 0x7c, 0x53, 0x2a,
	0x67, 0xbb, 0xbc, 0x35, 0xd1, 0xb5, 0x48, 0x75, 0x1d, 0xa4, 0xba, 0xee, 0x8c, 0x32, 0x3c, 0x26,
	0xf0, 0xee, 0xf8, 0x56, 0xc9, 0x94, 0xae, 0x00, 0xd8, 0x4c, 0x58, 0xe7, 0x6d, 0x96, 0x2d, 0xb6,
	0xd5, 0xf6, 0x07, 0xc9, 0x93, 0x1b, 0x27, 0x4a, 0x24, 0xd8, 0x1b, 0x6d, 0x81, 0xc0, 0xed, 0x36,
	0x31, 0x47, 0xaf, 0xcf, 0x27, 0xd6, 0x16, 0xf2, 0xb6, 0x68, 0xf4, 0x49, 0x62, 0xf4, 0xcd, 0xc4,
	0xe8, 0x1f, 0x62, 0x46, 0x88, 0x12, 0x4a, 0x8f, 0x44, 0xd7, 0x58, 0x5d, 0xaf, 0x86, 0x82, 0xf7,
	0x44, 0x05, 0xa0, 0xde, 0x30, 0x7b, 0x24, 0xd8, 0xce, 0x4a, 0xb1, 0x8d, 0x12, 0x6c, 0x1d, 0x04,
	0x9b, 0x64, 0x7b, 0x0e, 0xe9, 0x6d, 0xcf, 0xfd, 0x08, 0xc0, 0x16, 0x01, 0x31, 0x8b, 0x13, 0x0a,
	0xb0, 0x9d, 0x0a, 0xdb, 0x23, 0x38, 0xc7, 0xa4, 0x38, 0x9f, 0x23, 0x38, 0x5b, 0x09, 0x4e, 0xdf,
	0xee, 0x1c, 0x8a, 0xde, 0x9d, 0x7b, 0xbb, 0x1a, 0x0a, 0x5c, 0x7c, 0xa2, 0xf9, 0x28, 0x20, 0x76,
	0xab, 0x4d, 0x8d, 0xa0, 0x3c, 0x23, 0x45, 0x39, 0x42, 0x50, 0x6e, 0x25, 0x28, 0x83, 0x3b, 0x73,
	0x48, 0x6b, 0x67, 0xee, 0x07, 0x9c, 0x96, 0xbc, 0x19, 0xea, 0x68, 0xe9, 0x7b, 0xa2, 0xc7, 0x3c,
	0x29, 0x45, 0x39, 0x4c, 0x50, 0xb6, 0x10, 0x94, 0xe2, 0xc6, 0x1c, 0x8a, 0xdc, 0x98, 0x7b, 0x97,
	0x9b, 0x9b, 0x01, 0xa7, 0xd3, 0x99, 0x9b, 0xb2, 0xa7, 0x71, 0xb4, 0xd4, 0x0c, 0xec, 0xb6, 0x69,
	0x6d, 0xc9, 0x7d, 0x9f, 0x53, 0x93, 0x77, 0x30, 0x1d, 0x35, 0x7d, 0xcf, 0xd1, 0x98, 0xc7, 0xa5,
	0x28, 0x77, 0x13, 0x94, 0x88, 0xa0, 0x14, 0x76, 0xe4, 0x50, 0xd4, 0x8e, 0xdc, 0x5b, 0xac, 0x32,
	0x41, 0x9e, 0x3e, 0x10, 0xfc, 0x49, 0x81, 0x6e, 0x9b, 0xd2, 0xaa, 0xb4, 0x57, 0x8e, 0x78, 0x9e,
	0xe8, 0xed, 0xb8, 0x6f, 0xb3, 0x72, 0xb7, 0x7b, 0x02, 0x89, 0x4d, 0x28, 0x80, 0x9a, 0xe1, 0x36,
	0x44, 0xd0, 0xf6, 0xf9, 0xd0, 0xd2, 0x84, 0xad, 0xaa, 0x23, 0xbf, 0x0f, 0xf7, 0x3b, 0x00, 0xbb,
	0x6b, 0x18, 0xe4, 0x56, 0xa4, 0xc0, 0xb1, 0x33, 0xda, 0x95, 0x08, 0x96, 0x49, 0xa9, 0x72, 0x62,
	0xfe, 0xab, 0x38, 0x73, 0x8c, 0xbd, 0xb7, 0x2b, 0x80, 0x6e, 0xbe, 0xbd, 0x58, 0x9a, 0xcc, 0xc4,
	0xdb, 0x7c, 0x73, 0x63, 0x77, 0xd3, 0x2c, 0xe9, 0x16, 0x58, 0x21, 0x60, 0x80, 0x2c, 0x11, 0x30,
	0x60, 0x04, 0x4a, 0x92, 0x86, 0x4e, 0x49, 0xf2, 0x16, 0xbb, 0xc2, 0x1c, 0xaa, 0x7a, 0x55, 0x25,
	0x4b, 0x0a, 0xd8, 0xc2, 0x3d, 0x9f, 0x11, 0x56, 0x9a, 0x34, 0x62, 0x96, 0x26, 0xdf, 0x67, 0x4b,
	0x8a, 0x23, 0xb3, 0xe4, 0xea, 0xe4, 0xb4, 0x02, 0xbd, 0xb0, 0x29, 0x6b, 0xa8, 0x4a, 0x94, 0x46,
	0x8c, 0x12, 0xe5, 0x14, 0x8d, 0xa9, 0x0c, 0x74, 0x7d, 0x8a, 0x94, 0x28, 0x80, 0xbe, 0xa1, 0xb6,
	0xc9, 0x49, 0x4f, 0xb4, 0xbc, 0x82, 0xe2, 0x94, 0x42, 0x1d, 0xa1, 0x42, 0x60, 0x28, 0xaa, 0x8a,
	0x86, 0x7e, 0x55, 0xf1, 0xa6, 0x30, 0x3d, 0xeb, 0x5a, 0x58, 0x2c, 0x2a, 0x28, 0x9c, 0xa6, 0x14,
	0x1e, 0xa1, 0x14, 0x42, 0xaa, 0x8b, 0x46, 0xbc, 0xea, 0xe2, 0x35, 0x41, 0xfe, 0xe5, 0x15, 0x18,
	0x27, 0x15, 0xd8, 0x8f, 0x52, 0xec, 0x5d, 0x14, 0xbb, 0xbc, 0xca, 0x68, 0x68, 0x57, 0x19, 0x7f,
	0xc9, 0x4a, 0xba, 0x14, 0x71, 0x3d, 0x0a, 0x8d, 0xba, 0x8b, 0x4a, 0x9e, 0x10, 0x19, 0x31, 0xaa,
	0x8d, 0x65, 0xba, 0xe9, 0x46, 0xa1, 0xaf, 0x40, 0xbd, 0x51, 0xb6, 0xc0, 0xfe, 0xc6, 0xf6, 0xd4,
	0xd8, 0x49, 0x57, 0xb6, 0xa8, 0xf8, 0x75, 0x85, 0x94, 0x42, 0x65, 0xc0, 0x88, 0xac, 0x2c, 0x1a,
	0x4b, 0xa9, 0x2c, 0xbe, 0xc5, 0x2a, 0x8b, 0xc4, 0x6d, 0x43, 0x33, 0xa5, 0xed, 0x1a, 0xaf, 0x97,
	0x99, 0x5f, 0x70, 0x13, 0x43, 0xf2, 0x78, 0x7a, 0xc8, 0x8d, 0x2a, 0x39, 0x5e, 0xcd, 0x91, 0x7a,
	0xd8, 0x57, 0x95, 0xbf, 0xa5, 0x01, 0xfa, 0x23, 0xab, 0xca, 0x78, 0x18, 0x35, 0xf2, 0xa8, 0x64,
	0xbc, 0x37, 0x21, 0xcd, 0x9c, 0x1c, 0xf9, 0x49, 0x82, 0xbc, 0x9b, 0x20, 0xef, 0xe0, 0x91, 0x0b,
	0x69, 0xd3, 0x40, 0x38, 0x09, 0xbe, 0x6d, 0x1a, 0xd4, 0xaa, 0x31, 0x1e, 0x9f, 0xf0, 0x7b, 0xd9,
	0x7e, 0xed, 0xd7, 0x19, 0xc9, 0x76, 0x85, 0x84, 0xc5, 0x11, 0xc2, 0xc2, 0x20, 0x2c, 0x5a, 0x79,
	0x16, 0xb5, 0xc4, 0x6a, 0x67, 0x38, 0x83, 0x6a, 0xbb, 0x34, 0x40, 0xbf, 0x67, 0xa1, 0x84, 0xa2,
	0xd7, 0xca, 0xc1, 0x76, 0xc5, 0x79, 0x4d, 0xcf, 0xc4, 0x72, 0x0e, 0xe2, 0x4d, 0x1c, 0xe3, 0xe0,
	0xcf, 0xb9, 0xfa, 0xd5, 0x34, 0x7c, 0x4d, 0xd3, 0xc0, 0x0d, 0x8a, 0xde, 0x75, 0xd0, 0xc8, 0xd0,
	0xfa, 0xb5, 0xdf, 0xb5, 0x33, 0x5f, 0x96, 0x73, 0x38, 0x44, 0x38, 0x24, 0x08, 0x87, 0x16, 0x06,
	0x55, 0xc8, 0xca, 0x1e, 0x55, 0xe2, 0xe7, 0x9b, 0xa5, 0x01, 0xfa, 0x03, 0xbf, 0x26, 0x74, 0xf3,
	0xb7, 0x64, 0xbc, 0x77, 0xe5, 0xe2, 0x5c, 0x89, 0x40, 0xbe, 0xa6, 0xbe, 0x12, 0xfe, 0xa6, 0x69,
	0x80, 0x3e, 0xe0, 0xaf, 0x84, 0x46, 0x76, 0xd7, 0xaf, 0xfd, 0xba, 0x9b, 0x79, 0x4e, 0xce, 0x41,
	0x2c, 0x97, 0x30, 0x0e, 0xdc, 0x89, 0x77, 0xa8, 0xe1, 0x7b, 0xad, 0xd2, 0x00, 0xfd, 0x86, 0x15,
	0x24, 0xc8, 0x29, 0xb5, 0x72, 0xbf, 0xc7, 0x63, 0xbc, 0xac, 0x16, 0x67, 0x3d, 0x8b, 0x27, 0x57,
	0xaf, 0x67, 0xa1, 0x5d, 0x1a, 0xa0, 0x73, 0xf4, 0x9e, 0x95, 0x9c, 0xf5, 0xd4, 0x5c, 0x56, 0x78,
	0x5e, 0x5d, 0x41, 0xa1, 0x85, 0xfc, 0xec, 0x2d, 0x1b, 0x92, 0x7a, 0x6d, 0xf1, 0x43, 0x6d, 0x48,
	0x03, 0x37, 0x6b, 0xef, 0xac, 0x8d, 0xae, 0x9f, 0x76, 0xa6, 0xe3, 0xbe, 0xc9, 0x66, 0xa6, 0x02,
	0x67, 0x27, 0x42, 0x89, 0x17, 0x98, 0xcb, 0x45, 0xd3, 0x00, 0x55, 0x58, 0x65, 0x94, 0x62, 0x8b,
	0x95, 0x8e, 0x3e, 0xb5, 0x94, 0x97, 0xca, 0xe4, 0x0a, 0xdd, 0x06, 0xb0, 0xe9, 0x85, 0x4c, 0x31,
	0x8b, 0x0b, 0x48, 0x28, 0xaf, 0xd0, 0xdf, 0x62, 0xe4, 0x09, 0x6f, 0x80, 0xe0, 0xb3, 0xa7, 0xc1,
	0x3d, 0x1a, 0xf9, 0xc6, 0x99, 0xea, 0xb1, 0x85, 0x14, 0x45, 0x21, 0xdf, 0x38, 0x8b, 0xe8, 0x64,
	0xdc, 0x6e, 0xfa, 0x5e, 0x25, 0xd1, 0x38, 0xf7, 0xc4, 0xd5, 0x4a, 0x82, 0xfb, 0xbf, 0x5b, 0x16,
	0x2a, 0xc2, 0x96, 0x8e, 0xfb, 0x95, 0x5b, 0xb9, 0x0b, 0x95, 0xe0, 0x2e, 0xc9, 0x42, 0x85, 0x6d,
	0x5c, 0xba, 0x6d, 0x39, 0xdf, 0x73, 0xdb, 0xfa, 0x1d, 0x7d, 0xa1, 0xe2, 0xab, 0xea, 0x2f, 0x54,
	0x54, 0x75, 0xe9, 0x85, 0x8a, 0xac, 0x5e, 0xbe, 0x50, 0xf1, 0x2b, 0xf6, 0x4e, 0x25, 0xf1, 0x2c,
	0xe4, 0x21, 0xa3, 0x35, 0x39, 0xec, 0xa0, 0x35, 0xa5, 0x59, 0x07, 0xb1, 0x27, 0xa1, 0xd0, 0xda,
	0x92, 0x65, 0x3b, 0x88, 0x14, 0x1e, 0x10, 0xbd, 0xc2, 0x88, 0x96, 0xc7, 0x69, 0x67, 0x3e, 0xa2,
	0xc5, 0xeb, 0xbc, 0x0f, 0x06, 0xe4, 0x88, 0x39, 0xc2, 0xa3, 0x90, 0x8a, 0xc7, 0x0e, 0x93, 0x7e,
	0x64, 0x04, 0x09, 0x4e, 0xfe, 0x5e, 0x24, 0x36, 0xce, 0xc0, 0x8d, 0x59, 0xbc, 0x11, 0xf6, 0x40,
	0xf1, 0xc2, 0xc5, 0xec, 0xbe, 0x17, 0x2a, 0x2e, 0x73, 0xd4, 0x38, 0xd5, 0x01, 0x9e, 0x82, 0xb2,
	0xdd, 0x13, 0xd2, 0x59, 0x7d, 0xfe, 0x77, 0x2a, 0x89, 0x34, 0xf4, 0xef, 0x82, 0x46, 0xf4, 0xf9,
	0xb0, 0x92, 0xd8, 0x87, 0x7c, 0x7d, 0x0c, 0x16, 0x02, 0xcc, 0x56, 0xd9, 0xb2, 0x1f, 0xf0, 0xb5,
	0x1e, 0xd9, 0x7c, 0xf3, 0x4e, 0x37, 0xf8, 0xf8, 0x4e, 0x37, 0xf8, 0xeb, 0x9d, 0x6e, 0xf0, 0xd9,
	0x9d, 0xee, 0x86, 0x93, 0x60, 0xa2, 0x89, 0xfc, 0xbf, 0x3e, 0x4f, 0xfe, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0x9e, 0x5b, 0x7e, 0x3d, 0x49, 0x00, 0x00,
}
