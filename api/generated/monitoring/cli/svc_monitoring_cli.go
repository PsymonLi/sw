// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringCliUtilsBackend is a auto generated package.
Input file: svc_monitoring.proto
*/
package cli

import (
	"context"
	"fmt"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
	"github.com/pensando/sw/api/generated/monitoring"
	loginctx "github.com/pensando/sw/api/login/context"
	"github.com/pensando/sw/venice/cli/gen"
)

func restGetEventPolicy(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.EventPolicy); ok {
		nv, err := restcl.MonitoringV1().EventPolicy().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.EventPolicyList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().EventPolicy().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteEventPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.EventPolicy); ok {
		nv, err := restcl.MonitoringV1().EventPolicy().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostEventPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.EventPolicy); ok {
		nv, err := restcl.MonitoringV1().EventPolicy().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutEventPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.EventPolicy); ok {
		nv, err := restcl.MonitoringV1().EventPolicy().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetFwlogPolicy(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FwlogPolicy); ok {
		nv, err := restcl.MonitoringV1().FwlogPolicy().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.FwlogPolicyList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().FwlogPolicy().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteFwlogPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FwlogPolicy); ok {
		nv, err := restcl.MonitoringV1().FwlogPolicy().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostFwlogPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FwlogPolicy); ok {
		nv, err := restcl.MonitoringV1().FwlogPolicy().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutFwlogPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FwlogPolicy); ok {
		nv, err := restcl.MonitoringV1().FwlogPolicy().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetFlowExportPolicy(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FlowExportPolicy); ok {
		nv, err := restcl.MonitoringV1().FlowExportPolicy().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.FlowExportPolicyList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().FlowExportPolicy().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteFlowExportPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FlowExportPolicy); ok {
		nv, err := restcl.MonitoringV1().FlowExportPolicy().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostFlowExportPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FlowExportPolicy); ok {
		nv, err := restcl.MonitoringV1().FlowExportPolicy().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutFlowExportPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.FlowExportPolicy); ok {
		nv, err := restcl.MonitoringV1().FlowExportPolicy().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetAlert(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.Alert); ok {
		nv, err := restcl.MonitoringV1().Alert().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.AlertList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().Alert().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteAlert(hostname, token string, obj interface{}) error {
	return fmt.Errorf("delete operation not supported for Alert object")
}

func restPostAlert(hostname, token string, obj interface{}) error {
	return fmt.Errorf("create operation not supported for Alert object")
}

func restPutAlert(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.Alert); ok {
		nv, err := restcl.MonitoringV1().Alert().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetAlertPolicy(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertPolicy); ok {
		nv, err := restcl.MonitoringV1().AlertPolicy().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.AlertPolicyList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().AlertPolicy().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteAlertPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertPolicy); ok {
		nv, err := restcl.MonitoringV1().AlertPolicy().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostAlertPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertPolicy); ok {
		nv, err := restcl.MonitoringV1().AlertPolicy().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutAlertPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertPolicy); ok {
		nv, err := restcl.MonitoringV1().AlertPolicy().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetAlertDestination(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertDestination); ok {
		nv, err := restcl.MonitoringV1().AlertDestination().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.AlertDestinationList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().AlertDestination().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteAlertDestination(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertDestination); ok {
		nv, err := restcl.MonitoringV1().AlertDestination().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostAlertDestination(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertDestination); ok {
		nv, err := restcl.MonitoringV1().AlertDestination().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutAlertDestination(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AlertDestination); ok {
		nv, err := restcl.MonitoringV1().AlertDestination().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetMirrorSession(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.MirrorSession); ok {
		nv, err := restcl.MonitoringV1().MirrorSession().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.MirrorSessionList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().MirrorSession().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteMirrorSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.MirrorSession); ok {
		nv, err := restcl.MonitoringV1().MirrorSession().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostMirrorSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.MirrorSession); ok {
		nv, err := restcl.MonitoringV1().MirrorSession().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutMirrorSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.MirrorSession); ok {
		nv, err := restcl.MonitoringV1().MirrorSession().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetTroubleshootingSession(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TroubleshootingSession); ok {
		nv, err := restcl.MonitoringV1().TroubleshootingSession().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.TroubleshootingSessionList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().TroubleshootingSession().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteTroubleshootingSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TroubleshootingSession); ok {
		nv, err := restcl.MonitoringV1().TroubleshootingSession().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostTroubleshootingSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TroubleshootingSession); ok {
		nv, err := restcl.MonitoringV1().TroubleshootingSession().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutTroubleshootingSession(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TroubleshootingSession); ok {
		nv, err := restcl.MonitoringV1().TroubleshootingSession().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restGetTechSupportRequest(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TechSupportRequest); ok {
		nv, err := restcl.MonitoringV1().TechSupportRequest().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.TechSupportRequestList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().TechSupportRequest().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteTechSupportRequest(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TechSupportRequest); ok {
		nv, err := restcl.MonitoringV1().TechSupportRequest().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostTechSupportRequest(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.TechSupportRequest); ok {
		nv, err := restcl.MonitoringV1().TechSupportRequest().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutTechSupportRequest(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for TechSupportRequest object")
}

func restGetArchiveRequest(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.ArchiveRequest); ok {
		nv, err := restcl.MonitoringV1().ArchiveRequest().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.ArchiveRequestList); ok {
		opts := api.ListWatchOptions{ObjectMeta: api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.MonitoringV1().ArchiveRequest().List(loginCtx, &opts)
		if err != nil {
			return err
		}
		v.Items = nv
	}
	return nil

}

func restDeleteArchiveRequest(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.ArchiveRequest); ok {
		nv, err := restcl.MonitoringV1().ArchiveRequest().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostArchiveRequest(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.ArchiveRequest); ok {
		nv, err := restcl.MonitoringV1().ArchiveRequest().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutArchiveRequest(hostname, token string, obj interface{}) error {
	return fmt.Errorf("put operation not supported for ArchiveRequest object")
}

func restGetAuditPolicy(hostname, tenant, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AuditPolicy); ok {
		nv, err := restcl.MonitoringV1().AuditPolicy().Get(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}

	if v, ok := obj.(*monitoring.AuditPolicyList); ok {
		objMeta := api.ObjectMeta{}
		nv, err := restcl.MonitoringV1().AuditPolicy().Get(loginCtx, &objMeta)
		if err != nil {
			return err
		}
		v.Items = append(v.Items, nv)
	}
	return nil

}

func restDeleteAuditPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AuditPolicy); ok {
		nv, err := restcl.MonitoringV1().AuditPolicy().Delete(loginCtx, &v.ObjectMeta)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPostAuditPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AuditPolicy); ok {
		nv, err := restcl.MonitoringV1().AuditPolicy().Create(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func restPutAuditPolicy(hostname, token string, obj interface{}) error {

	restcl, err := apiclient.NewRestAPIClient(hostname)
	if err != nil {
		return fmt.Errorf("cannot create REST client")
	}
	defer restcl.Close()
	loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*monitoring.AuditPolicy); ok {
		nv, err := restcl.MonitoringV1().AuditPolicy().Update(loginCtx, v)
		if err != nil {
			return err
		}
		*v = *nv
	}
	return nil

}

func init() {
	cl := gen.GetInfo()
	if cl == nil {
		return
	}

	cl.AddRestPostFunc("monitoring.EventPolicy", "v1", restPostEventPolicy)
	cl.AddRestDeleteFunc("monitoring.EventPolicy", "v1", restDeleteEventPolicy)
	cl.AddRestPutFunc("monitoring.EventPolicy", "v1", restPutEventPolicy)
	cl.AddRestGetFunc("monitoring.EventPolicy", "v1", restGetEventPolicy)

	cl.AddRestPostFunc("monitoring.FwlogPolicy", "v1", restPostFwlogPolicy)
	cl.AddRestDeleteFunc("monitoring.FwlogPolicy", "v1", restDeleteFwlogPolicy)
	cl.AddRestPutFunc("monitoring.FwlogPolicy", "v1", restPutFwlogPolicy)
	cl.AddRestGetFunc("monitoring.FwlogPolicy", "v1", restGetFwlogPolicy)

	cl.AddRestPostFunc("monitoring.FlowExportPolicy", "v1", restPostFlowExportPolicy)
	cl.AddRestDeleteFunc("monitoring.FlowExportPolicy", "v1", restDeleteFlowExportPolicy)
	cl.AddRestPutFunc("monitoring.FlowExportPolicy", "v1", restPutFlowExportPolicy)
	cl.AddRestGetFunc("monitoring.FlowExportPolicy", "v1", restGetFlowExportPolicy)

	cl.AddRestPutFunc("monitoring.Alert", "v1", restPutAlert)
	cl.AddRestGetFunc("monitoring.Alert", "v1", restGetAlert)

	cl.AddRestPostFunc("monitoring.AlertPolicy", "v1", restPostAlertPolicy)
	cl.AddRestDeleteFunc("monitoring.AlertPolicy", "v1", restDeleteAlertPolicy)
	cl.AddRestPutFunc("monitoring.AlertPolicy", "v1", restPutAlertPolicy)
	cl.AddRestGetFunc("monitoring.AlertPolicy", "v1", restGetAlertPolicy)

	cl.AddRestPostFunc("monitoring.AlertDestination", "v1", restPostAlertDestination)
	cl.AddRestDeleteFunc("monitoring.AlertDestination", "v1", restDeleteAlertDestination)
	cl.AddRestPutFunc("monitoring.AlertDestination", "v1", restPutAlertDestination)
	cl.AddRestGetFunc("monitoring.AlertDestination", "v1", restGetAlertDestination)

	cl.AddRestPostFunc("monitoring.MirrorSession", "v1", restPostMirrorSession)
	cl.AddRestDeleteFunc("monitoring.MirrorSession", "v1", restDeleteMirrorSession)
	cl.AddRestPutFunc("monitoring.MirrorSession", "v1", restPutMirrorSession)
	cl.AddRestGetFunc("monitoring.MirrorSession", "v1", restGetMirrorSession)

	cl.AddRestPostFunc("monitoring.TroubleshootingSession", "v1", restPostTroubleshootingSession)
	cl.AddRestDeleteFunc("monitoring.TroubleshootingSession", "v1", restDeleteTroubleshootingSession)
	cl.AddRestPutFunc("monitoring.TroubleshootingSession", "v1", restPutTroubleshootingSession)
	cl.AddRestGetFunc("monitoring.TroubleshootingSession", "v1", restGetTroubleshootingSession)

	cl.AddRestPostFunc("monitoring.TechSupportRequest", "v1", restPostTechSupportRequest)
	cl.AddRestDeleteFunc("monitoring.TechSupportRequest", "v1", restDeleteTechSupportRequest)

	cl.AddRestGetFunc("monitoring.TechSupportRequest", "v1", restGetTechSupportRequest)

	cl.AddRestPostFunc("monitoring.ArchiveRequest", "v1", restPostArchiveRequest)
	cl.AddRestDeleteFunc("monitoring.ArchiveRequest", "v1", restDeleteArchiveRequest)

	cl.AddRestGetFunc("monitoring.ArchiveRequest", "v1", restGetArchiveRequest)

	cl.AddRestPostFunc("monitoring.AuditPolicy", "v1", restPostAuditPolicy)
	cl.AddRestDeleteFunc("monitoring.AuditPolicy", "v1", restDeleteAuditPolicy)
	cl.AddRestPutFunc("monitoring.AuditPolicy", "v1", restPutAuditPolicy)
	cl.AddRestGetFunc("monitoring.AuditPolicy", "v1", restGetAuditPolicy)

}
