// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringCliUtilsBackend is a auto generated package.
Input file: mirror.proto
*/
package cli

import (
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/monitoring"
	"github.com/pensando/sw/venice/cli/gen"
)

// CreateMirrorSessionFlags specifies flags for MirrorSession create operation
var CreateMirrorSessionFlags = []gen.CliFlag{
	{
		ID:     "applications",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "endpoints",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "expiry-duration",
		Type:   "String",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "ip-addresses",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "mac-addresses",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "max-packets",
		Type:   "String",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "packet-filters",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "packet-size",
		Type:   "String",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "proto-ports",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
	{
		ID:     "type",
		Type:   "StringSlice",
		Help:   "",
		Skip:   false,
		Insert: "",
	},
}

func removeMirrorSessionOper(obj interface{}) error {
	if v, ok := obj.(*monitoring.MirrorSession); ok {
		v.UUID = ""
		v.ResourceVersion = ""
		v.CreationTime = api.Timestamp{}
		v.ModTime = api.Timestamp{}
		v.Status = monitoring.MirrorSessionStatus{}
	}
	return nil
}

func init() {
	cl := gen.GetInfo()

	cl.AddCliInfo("monitoring.MirrorSession", "create", CreateMirrorSessionFlags)
	cl.AddRemoveObjOperFunc("monitoring.MirrorSession", removeMirrorSessionOper)

}
