// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: export.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPAuthConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAuthConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req AuthConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAuthConfig encodes GRPC request
func EncodeGrpcReqAuthConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthConfig)
	return req, nil
}

// DecodeGrpcReqAuthConfig decodes GRPC request
func DecodeGrpcReqAuthConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AuthConfig)
	return req, nil
}

// EncodeGrpcRespAuthConfig encodes GRC response
func EncodeGrpcRespAuthConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAuthConfig decodes GRPC response
func DecodeGrpcRespAuthConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExportConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExportConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExportConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExportConfig encodes GRPC request
func EncodeGrpcReqExportConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportConfig)
	return req, nil
}

// DecodeGrpcReqExportConfig decodes GRPC request
func DecodeGrpcReqExportConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExportConfig)
	return req, nil
}

// EncodeGrpcRespExportConfig encodes GRC response
func EncodeGrpcRespExportConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExportConfig decodes GRPC response
func DecodeGrpcRespExportConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPExternalCred(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPExternalCred(_ context.Context, r *http.Request) (interface{}, error) {
	var req ExternalCred
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqExternalCred encodes GRPC request
func EncodeGrpcReqExternalCred(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExternalCred)
	return req, nil
}

// DecodeGrpcReqExternalCred decodes GRPC request
func DecodeGrpcReqExternalCred(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ExternalCred)
	return req, nil
}

// EncodeGrpcRespExternalCred encodes GRC response
func EncodeGrpcRespExternalCred(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespExternalCred decodes GRPC response
func DecodeGrpcRespExternalCred(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPSMExportTarget(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPSMExportTarget(_ context.Context, r *http.Request) (interface{}, error) {
	var req PSMExportTarget
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPSMExportTarget encodes GRPC request
func EncodeGrpcReqPSMExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PSMExportTarget)
	return req, nil
}

// DecodeGrpcReqPSMExportTarget decodes GRPC request
func DecodeGrpcReqPSMExportTarget(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PSMExportTarget)
	return req, nil
}

// EncodeGrpcRespPSMExportTarget encodes GRC response
func EncodeGrpcRespPSMExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPSMExportTarget decodes GRPC response
func DecodeGrpcRespPSMExportTarget(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPrivacyConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPrivacyConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req PrivacyConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPrivacyConfig encodes GRPC request
func EncodeGrpcReqPrivacyConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PrivacyConfig)
	return req, nil
}

// DecodeGrpcReqPrivacyConfig decodes GRPC request
func DecodeGrpcReqPrivacyConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PrivacyConfig)
	return req, nil
}

// EncodeGrpcRespPrivacyConfig encodes GRC response
func EncodeGrpcRespPrivacyConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPrivacyConfig decodes GRPC response
func DecodeGrpcRespPrivacyConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSNMPTrapServer(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSNMPTrapServer(_ context.Context, r *http.Request) (interface{}, error) {
	var req SNMPTrapServer
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSNMPTrapServer encodes GRPC request
func EncodeGrpcReqSNMPTrapServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SNMPTrapServer)
	return req, nil
}

// DecodeGrpcReqSNMPTrapServer decodes GRPC request
func DecodeGrpcReqSNMPTrapServer(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SNMPTrapServer)
	return req, nil
}

// EncodeGrpcRespSNMPTrapServer encodes GRC response
func EncodeGrpcRespSNMPTrapServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSNMPTrapServer decodes GRPC response
func DecodeGrpcRespSNMPTrapServer(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPSyslogExportConfig(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPSyslogExportConfig(_ context.Context, r *http.Request) (interface{}, error) {
	var req SyslogExportConfig
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqSyslogExportConfig encodes GRPC request
func EncodeGrpcReqSyslogExportConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SyslogExportConfig)
	return req, nil
}

// DecodeGrpcReqSyslogExportConfig decodes GRPC request
func DecodeGrpcReqSyslogExportConfig(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*SyslogExportConfig)
	return req, nil
}

// EncodeGrpcRespSyslogExportConfig encodes GRC response
func EncodeGrpcRespSyslogExportConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespSyslogExportConfig decodes GRPC response
func DecodeGrpcRespSyslogExportConfig(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
