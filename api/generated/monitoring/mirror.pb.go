// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mirror.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import labels "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type Direction int32

const (
	// ui-hint: Both
	Direction_BOTH Direction = 0
	// ui-hint: Tx
	Direction_TX Direction = 1
	// ui-hint: Rx
	Direction_RX Direction = 2
)

var Direction_name = map[int32]string{
	0: "BOTH",
	1: "TX",
	2: "RX",
}
var Direction_value = map[string]int32{
	"BOTH": 0,
	"TX":   1,
	"RX":   2,
}

func (Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

//
type PacketCollectorType int32

const (
	// ui-hint: ERSPAN Type 3
	PacketCollectorType_ERSPAN_TYPE_3 PacketCollectorType = 0
	// ui-hint: ERSPAN Type 2
	PacketCollectorType_ERSPAN_TYPE_2 PacketCollectorType = 1
	// ui-hint: ERSPAN - deprecated
	PacketCollectorType_ERSPAN PacketCollectorType = 2
)

var PacketCollectorType_name = map[int32]string{
	0: "ERSPAN_TYPE_3",
	1: "ERSPAN_TYPE_2",
	2: "ERSPAN",
}
var PacketCollectorType_value = map[string]int32{
	"ERSPAN_TYPE_3": 0,
	"ERSPAN_TYPE_2": 1,
	"ERSPAN":        2,
}

func (PacketCollectorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{1} }

// MirrorSessionState
type MirrorSessionState int32

const (
	// ui-hint: None
	MirrorSessionState_NONE MirrorSessionState = 0
	// ui-hint: Active
	MirrorSessionState_ACTIVE MirrorSessionState = 1
	// ui-hint: Stopped
	MirrorSessionState_STOPPED MirrorSessionState = 2
	// ui-hint: Scheduled
	MirrorSessionState_SCHEDULED MirrorSessionState = 3
	// ui-hint: Max Mirror Sessions Exceeded
	MirrorSessionState_ERR_NO_MIRROR_SESSION MirrorSessionState = 4
)

var MirrorSessionState_name = map[int32]string{
	0: "NONE",
	1: "ACTIVE",
	2: "STOPPED",
	3: "SCHEDULED",
	4: "ERR_NO_MIRROR_SESSION",
}
var MirrorSessionState_value = map[string]int32{
	"NONE":                  0,
	"ACTIVE":                1,
	"STOPPED":               2,
	"SCHEDULED":             3,
	"ERR_NO_MIRROR_SESSION": 4,
}

func (MirrorSessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{2} }

// Filter selected packets further - mirror only those packets that match atleast one of the PacketFilers
type MirrorSessionSpec_MirrorPacketFilter int32

const (
	// ui-hint: All Packets
	MirrorSessionSpec_ALL_PKTS MirrorSessionSpec_MirrorPacketFilter = 0
	// ui-hint: All Drops
	MirrorSessionSpec_ALL_DROPS MirrorSessionSpec_MirrorPacketFilter = 1
	// ui-hint: Network Policy Drops
	MirrorSessionSpec_NETWORK_POLICY_DROP MirrorSessionSpec_MirrorPacketFilter = 2
	// ui-hint: Firewall Policy Drops
	MirrorSessionSpec_FIREWALL_POLICY_DROP MirrorSessionSpec_MirrorPacketFilter = 3
)

var MirrorSessionSpec_MirrorPacketFilter_name = map[int32]string{
	0: "ALL_PKTS",
	1: "ALL_DROPS",
	2: "NETWORK_POLICY_DROP",
	3: "FIREWALL_POLICY_DROP",
}
var MirrorSessionSpec_MirrorPacketFilter_value = map[string]int32{
	"ALL_PKTS":             0,
	"ALL_DROPS":            1,
	"NETWORK_POLICY_DROP":  2,
	"FIREWALL_POLICY_DROP": 3,
}

func (MirrorSessionSpec_MirrorPacketFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{7, 0}
}

// Application/protocol selector
type AppProtoSelector struct {
	// ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
	ProtoPorts []string `protobuf:"bytes,1,rep,name=ProtoPorts,json=proto-ports,omitempty" json:"proto-ports,omitempty"`
	// Apps - E.g. ["Redis"]
	Apps []string `protobuf:"bytes,2,rep,name=Apps,json=applications,omitempty" json:"applications,omitempty"`
}

func (m *AppProtoSelector) Reset()                    { *m = AppProtoSelector{} }
func (m *AppProtoSelector) String() string            { return proto.CompactTextString(m) }
func (*AppProtoSelector) ProtoMessage()               {}
func (*AppProtoSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

func (m *AppProtoSelector) GetProtoPorts() []string {
	if m != nil {
		return m.ProtoPorts
	}
	return nil
}

func (m *AppProtoSelector) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

//
type InterfaceMirror struct {
	//
	Direction string `protobuf:"bytes,1,opt,name=Direction,json=direction,omitempty,proto3" json:"direction,omitempty"`
	//
	Selectors []*labels.Selector `protobuf:"bytes,2,rep,name=Selectors,json=selectors,omitempty" json:"selectors,omitempty"`
}

func (m *InterfaceMirror) Reset()                    { *m = InterfaceMirror{} }
func (m *InterfaceMirror) String() string            { return proto.CompactTextString(m) }
func (*InterfaceMirror) ProtoMessage()               {}
func (*InterfaceMirror) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{1} }

func (m *InterfaceMirror) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *InterfaceMirror) GetSelectors() []*labels.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
type MatchRule struct {
	// Either Src or Dst or both must be specified, both cannot be *
	// Src = * when not specified
	// When Src is specified and resides on Pensando DSC, matching pkts to/from src will be mirrored
	Src *MatchSelector `protobuf:"bytes,1,opt,name=Src,json=source,omitempty" json:"source,omitempty"`
	// Dst = * when not specified
	// When Dst is specified and resides on Pensando DSC, matching pkts to/from dst will be mirrored
	Dst *MatchSelector `protobuf:"bytes,2,opt,name=Dst,json=destination,omitempty" json:"destination,omitempty"`
	// App = * when not specified
	AppProtoSel *AppProtoSelector `protobuf:"bytes,3,opt,name=AppProtoSel,json=app-protocol-selectors,omitempty" json:"app-protocol-selectors,omitempty"`
}

func (m *MatchRule) Reset()                    { *m = MatchRule{} }
func (m *MatchRule) String() string            { return proto.CompactTextString(m) }
func (*MatchRule) ProtoMessage()               {}
func (*MatchRule) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{2} }

func (m *MatchRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MatchRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *MatchRule) GetAppProtoSel() *AppProtoSelector {
	if m != nil {
		return m.AppProtoSel
	}
	return nil
}

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
type MatchSelector struct {
	// Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
	IPAddresses []string `protobuf:"bytes,1,rep,name=IPAddresses,json=ip-addresses,omitempty" json:"ip-addresses,omitempty"`
	// List of MacAddresses - "aabb.ccdd.eeff", "0001.0203.0405"
	MACAddresses []string `protobuf:"bytes,2,rep,name=MACAddresses,json=mac-addresses,omitempty" json:"mac-addresses,omitempty"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{3} }

func (m *MatchSelector) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

func (m *MatchSelector) GetMACAddresses() []string {
	if m != nil {
		return m.MACAddresses
	}
	return nil
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
type MirrorCollector struct {
	// Type of Collector
	Type string `protobuf:"bytes,1,opt,name=Type,json=type,omitempty,proto3" json:"type,omitempty"`
	// When collector type is Venice, collector export information is not required
	ExportCfg *MirrorExportConfig `protobuf:"bytes,2,opt,name=ExportCfg,json=export-config,omitempty" json:"export-config,omitempty"`
	// remove vlan from mirror packet
	StripVlanHdr bool `protobuf:"varint,3,opt,name=StripVlanHdr,json=strip-vlan-hdr,omitempty,proto3" json:"strip-vlan-hdr,omitempty"`
}

func (m *MirrorCollector) Reset()                    { *m = MirrorCollector{} }
func (m *MirrorCollector) String() string            { return proto.CompactTextString(m) }
func (*MirrorCollector) ProtoMessage()               {}
func (*MirrorCollector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{4} }

func (m *MirrorCollector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MirrorCollector) GetExportCfg() *MirrorExportConfig {
	if m != nil {
		return m.ExportCfg
	}
	return nil
}

func (m *MirrorCollector) GetStripVlanHdr() bool {
	if m != nil {
		return m.StripVlanHdr
	}
	return false
}

//
type MirrorExportConfig struct {
	// IP address of the collector/entity to which the data is to be exported
	Destination string `protobuf:"bytes,1,opt,name=Destination,json=destination,omitempty,proto3" json:"destination,omitempty"`
	// IP address of the gateway to reach the collector.
	Gateway string `protobuf:"bytes,2,opt,name=Gateway,json=gateway,omitempty,proto3" json:"gateway,omitempty"`
}

func (m *MirrorExportConfig) Reset()                    { *m = MirrorExportConfig{} }
func (m *MirrorExportConfig) String() string            { return proto.CompactTextString(m) }
func (*MirrorExportConfig) ProtoMessage()               {}
func (*MirrorExportConfig) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{5} }

func (m *MirrorExportConfig) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MirrorExportConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

// MirrorSession
type MirrorSession struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec MirrorSessionSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,inline" json:"spec,inline"`
	//
	Status MirrorSessionStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *MirrorSession) Reset()                    { *m = MirrorSession{} }
func (m *MirrorSession) String() string            { return proto.CompactTextString(m) }
func (*MirrorSession) ProtoMessage()               {}
func (*MirrorSession) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{6} }

func (m *MirrorSession) GetSpec() MirrorSessionSpec {
	if m != nil {
		return m.Spec
	}
	return MirrorSessionSpec{}
}

func (m *MirrorSession) GetStatus() MirrorSessionStatus {
	if m != nil {
		return m.Status
	}
	return MirrorSessionStatus{}
}

// MirrorSessionSpec
type MirrorSessionSpec struct {
	// PacketSize: Max size of a mirrored packet, range 64-2048 or 0 for no check on mirrored packet
	PacketSize uint32 `protobuf:"varint,1,opt,name=PacketSize,json=packet-size,omitempty,proto3" json:"packet-size,omitempty"`
	// StartConditions
	StartConditions MirrorStartConditions `protobuf:"bytes,2,opt,name=StartConditions,json=start-condition,inline" json:"start-condition,inline"`
	// Mirrored packet collectors
	Collectors []MirrorCollector `protobuf:"bytes,3,rep,name=Collectors,json=collectors,inline" json:"collectors,inline"`
	// Traffic Selection Rules - Matching pakcets are mirrored, based on packet filters and start/stop conditions
	MatchRules []MatchRule `protobuf:"bytes,4,rep,name=MatchRules,json=match-rules,inline" json:"match-rules,inline"`
	//
	PacketFilters []string `protobuf:"bytes,5,rep,name=PacketFilters,json=packet-filters,omitempty" json:"packet-filters,omitempty"`
	// If specified, will pick up interface matching the selector
	Interfaces *InterfaceMirror `protobuf:"bytes,6,opt,name=Interfaces,json=interfaces,omitempty" json:"interfaces,omitempty"`
}

func (m *MirrorSessionSpec) Reset()                    { *m = MirrorSessionSpec{} }
func (m *MirrorSessionSpec) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionSpec) ProtoMessage()               {}
func (*MirrorSessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{7} }

func (m *MirrorSessionSpec) GetPacketSize() uint32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *MirrorSessionSpec) GetStartConditions() MirrorStartConditions {
	if m != nil {
		return m.StartConditions
	}
	return MirrorStartConditions{}
}

func (m *MirrorSessionSpec) GetCollectors() []MirrorCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *MirrorSessionSpec) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *MirrorSessionSpec) GetPacketFilters() []string {
	if m != nil {
		return m.PacketFilters
	}
	return nil
}

func (m *MirrorSessionSpec) GetInterfaces() *InterfaceMirror {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// MirrorSessionStatus
type MirrorSessionStatus struct {
	//
	ScheduleState string `protobuf:"bytes,1,opt,name=ScheduleState,json=schedule-state,inline,proto3" json:"schedule-state,inline"`
	//
	StartedAt api.Timestamp `protobuf:"bytes,2,opt,name=StartedAt,json=started-at,inline" json:"started-at,inline"`
}

func (m *MirrorSessionStatus) Reset()                    { *m = MirrorSessionStatus{} }
func (m *MirrorSessionStatus) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStatus) ProtoMessage()               {}
func (*MirrorSessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{8} }

func (m *MirrorSessionStatus) GetScheduleState() string {
	if m != nil {
		return m.ScheduleState
	}
	return ""
}

func (m *MirrorSessionStatus) GetStartedAt() api.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return api.Timestamp{}
}

// MirrorStartConditions - Conditions to start mirroring
type MirrorStartConditions struct {
	//
	ScheduleTime *api.Timestamp `protobuf:"bytes,1,opt,name=ScheduleTime,json=schedule-time,omitempty" json:"schedule-time,omitempty"`
}

func (m *MirrorStartConditions) Reset()                    { *m = MirrorStartConditions{} }
func (m *MirrorStartConditions) String() string            { return proto.CompactTextString(m) }
func (*MirrorStartConditions) ProtoMessage()               {}
func (*MirrorStartConditions) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{9} }

func (m *MirrorStartConditions) GetScheduleTime() *api.Timestamp {
	if m != nil {
		return m.ScheduleTime
	}
	return nil
}

func init() {
	proto.RegisterType((*AppProtoSelector)(nil), "monitoring.AppProtoSelector")
	proto.RegisterType((*InterfaceMirror)(nil), "monitoring.InterfaceMirror")
	proto.RegisterType((*MatchRule)(nil), "monitoring.MatchRule")
	proto.RegisterType((*MatchSelector)(nil), "monitoring.MatchSelector")
	proto.RegisterType((*MirrorCollector)(nil), "monitoring.MirrorCollector")
	proto.RegisterType((*MirrorExportConfig)(nil), "monitoring.MirrorExportConfig")
	proto.RegisterType((*MirrorSession)(nil), "monitoring.MirrorSession")
	proto.RegisterType((*MirrorSessionSpec)(nil), "monitoring.MirrorSessionSpec")
	proto.RegisterType((*MirrorSessionStatus)(nil), "monitoring.MirrorSessionStatus")
	proto.RegisterType((*MirrorStartConditions)(nil), "monitoring.MirrorStartConditions")
	proto.RegisterEnum("monitoring.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("monitoring.PacketCollectorType", PacketCollectorType_name, PacketCollectorType_value)
	proto.RegisterEnum("monitoring.MirrorSessionState", MirrorSessionState_name, MirrorSessionState_value)
	proto.RegisterEnum("monitoring.MirrorSessionSpec_MirrorPacketFilter", MirrorSessionSpec_MirrorPacketFilter_name, MirrorSessionSpec_MirrorPacketFilter_value)
}
func (m *AppProtoSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppProtoSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProtoPorts) > 0 {
		for _, s := range m.ProtoPorts {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *InterfaceMirror) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceMirror) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Direction) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Direction)))
		i += copy(dAtA[i:], m.Direction)
	}
	if len(m.Selectors) > 0 {
		for _, msg := range m.Selectors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Src.Size()))
		n1, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Dst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Dst.Size()))
		n2, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AppProtoSel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.AppProtoSel.Size()))
		n3, err := m.AppProtoSel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MirrorCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorCollector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.ExportCfg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.ExportCfg.Size()))
		n4, err := m.ExportCfg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.StripVlanHdr {
		dAtA[i] = 0x18
		i++
		if m.StripVlanHdr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MirrorExportConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorExportConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	return i, nil
}

func (m *MirrorSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *MirrorSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PacketSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.PacketSize))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StartConditions.Size()))
	n9, err := m.StartConditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Interfaces != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Interfaces.Size()))
		n10, err := m.Interfaces.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *MirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ScheduleState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.ScheduleState)))
		i += copy(dAtA[i:], m.ScheduleState)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StartedAt.Size()))
	n11, err := m.StartedAt.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *MirrorStartConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorStartConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ScheduleTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.ScheduleTime.Size()))
		n12, err := m.ScheduleTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintMirror(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppProtoSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.ProtoPorts) > 0 {
		for _, s := range m.ProtoPorts {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *InterfaceMirror) Size() (n int) {
	var l int
	_ = l
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if len(m.Selectors) > 0 {
		for _, e := range m.Selectors {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MatchRule) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.AppProtoSel != nil {
		l = m.AppProtoSel.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorCollector) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.ExportCfg != nil {
		l = m.ExportCfg.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.StripVlanHdr {
		n += 2
	}
	return n
}

func (m *MirrorExportConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorSession) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSessionSpec) Size() (n int) {
	var l int
	_ = l
	if m.PacketSize != 0 {
		n += 1 + sovMirror(uint64(m.PacketSize))
	}
	l = m.StartConditions.Size()
	n += 1 + l + sovMirror(uint64(l))
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if m.Interfaces != nil {
		l = m.Interfaces.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.ScheduleState)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = m.StartedAt.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorStartConditions) Size() (n int) {
	var l int
	_ = l
	if m.ScheduleTime != nil {
		l = m.ScheduleTime.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func sovMirror(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMirror(x uint64) (n int) {
	return sovMirror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppProtoSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppProtoSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppProtoSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtoPorts = append(m.ProtoPorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceMirror) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceMirror: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceMirror: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, &labels.Selector{})
			if err := m.Selectors[len(m.Selectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtoSel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProtoSel == nil {
				m.AppProtoSel = &AppProtoSelector{}
			}
			if err := m.AppProtoSel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddresses = append(m.IPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddresses = append(m.MACAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportCfg == nil {
				m.ExportCfg = &MirrorExportConfig{}
			}
			if err := m.ExportCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripVlanHdr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StripVlanHdr = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorExportConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorExportConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorExportConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSize", wireType)
			}
			m.PacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, MirrorCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketFilters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketFilters = append(m.PacketFilters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interfaces == nil {
				m.Interfaces = &InterfaceMirror{}
			}
			if err := m.Interfaces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduleState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorStartConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorStartConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorStartConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleTime == nil {
				m.ScheduleTime = &api.Timestamp{}
			}
			if err := m.ScheduleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMirror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMirror
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMirror
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMirror(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMirror = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMirror   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mirror.proto", fileDescriptorMirror) }

var fileDescriptorMirror = []byte{
	// 1507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x6f, 0xdb, 0x46,
	0x16, 0x37, 0x65, 0xad, 0x63, 0x8d, 0x2c, 0x9b, 0x1e, 0xdb, 0xb1, 0x28, 0x3b, 0x96, 0x57, 0xbb,
	0x0b, 0xd8, 0x41, 0x28, 0x65, 0x9d, 0xac, 0x91, 0xdd, 0xcb, 0xae, 0x64, 0x33, 0x89, 0x10, 0xcb,
	0xd4, 0x8a, 0xca, 0xdf, 0xa2, 0x50, 0xc6, 0xd4, 0x58, 0x66, 0x43, 0x91, 0x04, 0x67, 0x14, 0xc7,
	0x29, 0x9a, 0x5b, 0x05, 0x7f, 0x8c, 0x9e, 0x7d, 0x69, 0xd1, 0x4b, 0x81, 0xf6, 0xd6, 0x53, 0x4e,
	0x45, 0xd0, 0x7b, 0x85, 0x42, 0xa7, 0x42, 0x9f, 0xa2, 0x98, 0x21, 0x29, 0x53, 0x16, 0xd5, 0xa0,
	0x37, 0xcd, 0xef, 0xfd, 0x9d, 0xf7, 0x7e, 0x6f, 0x1e, 0x05, 0xe6, 0xda, 0x86, 0xeb, 0xda, 0x6e,
	0xde, 0x71, 0x6d, 0x6a, 0x43, 0xd0, 0xb6, 0x2d, 0x83, 0xda, 0xae, 0x61, 0xb5, 0x32, 0xeb, 0x2d,
	0xdb, 0x6e, 0x99, 0xb8, 0x80, 0x1c, 0xa3, 0x80, 0x2c, 0xcb, 0xa6, 0x88, 0x1a, 0xb6, 0x45, 0x3c,
	0xcd, 0x8c, 0xd2, 0x32, 0xe8, 0x49, 0xe7, 0x28, 0xaf, 0xdb, 0xed, 0x82, 0x83, 0x2d, 0x82, 0xac,
	0xa6, 0x5d, 0x20, 0xa7, 0x85, 0xd7, 0xd8, 0x32, 0x74, 0x5c, 0xe8, 0x50, 0xc3, 0x24, 0xcc, 0xb4,
	0x85, 0xad, 0xb0, 0x75, 0xc1, 0xb0, 0x74, 0xb3, 0xd3, 0xc4, 0x81, 0x1b, 0x39, 0xe4, 0xa6, 0x65,
	0xb7, 0xec, 0x02, 0x87, 0x8f, 0x3a, 0xc7, 0xfc, 0xc4, 0x0f, 0xfc, 0x97, 0xaf, 0xfe, 0x8f, 0x09,
	0x51, 0x59, 0x8e, 0x6d, 0x4c, 0x91, 0xaf, 0x76, 0xfb, 0x0f, 0xd4, 0x4c, 0x74, 0x84, 0x4d, 0x52,
	0x20, 0xd8, 0xc4, 0x3a, 0x0d, 0x2e, 0x9e, 0xfb, 0x4e, 0x00, 0x62, 0xd1, 0x71, 0xaa, 0xec, 0xa0,
	0xf9, 0x22, 0x88, 0x00, 0xe0, 0x40, 0xd5, 0x76, 0x29, 0x49, 0x0b, 0x9b, 0xd3, 0x5b, 0x89, 0xd2,
	0xee, 0x45, 0x57, 0x92, 0x94, 0xb6, 0x43, 0xcf, 0x54, 0x77, 0x6b, 0x28, 0xad, 0x21, 0xab, 0x85,
	0xb7, 0xb6, 0xb7, 0x07, 0xbd, 0xec, 0x0a, 0x77, 0x28, 0x3b, 0xcc, 0xe6, 0x96, 0xdd, 0x36, 0x28,
	0x66, 0xca, 0xb5, 0x68, 0x18, 0xfe, 0x0f, 0xc4, 0x8b, 0x8e, 0x43, 0xd2, 0x31, 0xee, 0x3c, 0x33,
	0xe8, 0x65, 0xaf, 0x23, 0xc7, 0x31, 0x0d, 0xdd, 0x2b, 0x57, 0xc8, 0xc1, 0x04, 0x3c, 0xf7, 0x83,
	0x00, 0x16, 0xca, 0x16, 0xc5, 0xee, 0x31, 0xd2, 0x71, 0x85, 0x37, 0x13, 0x3e, 0x06, 0x89, 0x7d,
	0xc3, 0xc5, 0x3a, 0xd3, 0x4d, 0x0b, 0x9b, 0xc2, 0x56, 0xa2, 0x24, 0x5f, 0x74, 0x25, 0xa8, 0x51,
	0x57, 0xb1, 0x3a, 0xed, 0xad, 0xa1, 0x90, 0x25, 0xbc, 0xd4, 0x0c, 0x4e, 0xa1, 0x68, 0x51, 0x20,
	0xfc, 0x3f, 0x48, 0x04, 0xb5, 0xf1, 0x32, 0x4e, 0xee, 0x88, 0x79, 0xaf, 0x9e, 0xf9, 0x40, 0x50,
	0x5a, 0x65, 0x2e, 0x83, 0xea, 0x86, 0x2f, 0x10, 0x05, 0xe6, 0xbe, 0x89, 0x81, 0x44, 0x05, 0x51,
	0xfd, 0xa4, 0xd6, 0x31, 0x31, 0x3c, 0x04, 0xd3, 0x9a, 0xab, 0xf3, 0x8c, 0x93, 0x3b, 0x52, 0xfe,
	0x92, 0x8c, 0x79, 0xae, 0x33, 0x8c, 0xb1, 0x3c, 0xe8, 0x65, 0x45, 0x62, 0x77, 0x5c, 0x1d, 0x87,
	0x02, 0x8c, 0x21, 0xf0, 0x19, 0x98, 0xde, 0x27, 0x34, 0x1d, 0xfb, 0x98, 0x3f, 0x89, 0xf5, 0xad,
	0x89, 0x09, 0x35, 0x2c, 0x74, 0xa5, 0x10, 0xd1, 0x30, 0x3c, 0x03, 0xc9, 0x10, 0x5d, 0xd2, 0xd3,
	0x3c, 0xc2, 0x7a, 0x38, 0xc2, 0x55, 0x36, 0x95, 0xfe, 0x3e, 0xe8, 0x65, 0x37, 0x91, 0xe3, 0xc8,
	0x9c, 0x09, 0xba, 0x6d, 0xca, 0x51, 0x55, 0xfa, 0xa8, 0x46, 0xee, 0x7b, 0x01, 0xa4, 0x46, 0xd2,
	0x87, 0x0f, 0x40, 0xb2, 0x5c, 0x2d, 0x36, 0x9b, 0x2e, 0x26, 0x04, 0x07, 0x44, 0xe5, 0x5c, 0x32,
	0x1c, 0x19, 0x05, 0x78, 0x98, 0x4b, 0xd1, 0x38, 0x7c, 0x09, 0xe6, 0x2a, 0xc5, 0xbd, 0x4b, 0x4f,
	0x1e, 0x2b, 0xff, 0xc9, 0xa8, 0x13, 0x50, 0xbe, 0x82, 0x74, 0x26, 0xf7, 0xb8, 0xbe, 0xda, 0x46,
	0x7a, 0x64, 0x80, 0x49, 0x82, 0xdc, 0xd7, 0x31, 0xb0, 0xe0, 0x91, 0x74, 0xcf, 0x36, 0x87, 0x63,
	0x16, 0xaf, 0x9f, 0x39, 0xd8, 0x27, 0xea, 0xde, 0x45, 0x57, 0x5a, 0x0f, 0x88, 0x5a, 0x45, 0xfa,
	0x2b, 0x4c, 0x87, 0xaa, 0x4c, 0x6d, 0xfb, 0xdb, 0xae, 0x94, 0xc2, 0x2e, 0x71, 0x90, 0xd5, 0xa0,
	0x67, 0x0e, 0x6e, 0xdc, 0x19, 0xf4, 0xb2, 0xf3, 0xec, 0x57, 0x28, 0xfe, 0x95, 0x33, 0x7c, 0x05,
	0x12, 0xca, 0x1b, 0x36, 0x7b, 0x7b, 0xc7, 0x2d, 0x9f, 0x0e, 0x1b, 0x23, 0x74, 0xe0, 0x29, 0xf9,
	0x2a, 0xb6, 0x75, 0x6c, 0xb4, 0x4a, 0xd9, 0xf7, 0xbd, 0xac, 0xc0, 0xee, 0x88, 0x39, 0x2a, 0xeb,
	0x1c, 0x0e, 0xdf, 0x71, 0x82, 0x00, 0x1e, 0x80, 0x39, 0x8d, 0xba, 0x86, 0xf3, 0xc4, 0x44, 0xd6,
	0xc3, 0xa6, 0xcb, 0xc9, 0x31, 0x5b, 0x5a, 0x1f, 0xf4, 0xb2, 0x69, 0xc2, 0x70, 0xf9, 0xb5, 0x89,
	0x2c, 0xf9, 0xa4, 0xe9, 0x86, 0x9c, 0x4d, 0x94, 0xe4, 0xbe, 0x12, 0x00, 0x1c, 0x4f, 0x0f, 0xaa,
	0x20, 0xb9, 0x7f, 0xc9, 0x4c, 0xbf, 0x76, 0x7f, 0xbb, 0xe8, 0x4a, 0x33, 0xe5, 0xea, 0xeb, 0xbb,
	0x5b, 0xdb, 0x7f, 0x9a, 0xd1, 0xff, 0x06, 0xd7, 0x1e, 0x20, 0x8a, 0x4f, 0xd1, 0x19, 0x2f, 0x50,
	0xa2, 0xb4, 0x32, 0xe8, 0x65, 0x17, 0x5b, 0x1e, 0x14, 0x32, 0x1f, 0x87, 0x72, 0xbf, 0xc4, 0x40,
	0xca, 0x4b, 0x51, 0xc3, 0x84, 0x18, 0xb6, 0x05, 0x77, 0x81, 0x50, 0xf7, 0xc7, 0x38, 0x95, 0x47,
	0x8e, 0x91, 0x67, 0x9d, 0xab, 0x60, 0x8a, 0x4a, 0x4b, 0xef, 0x7b, 0xd9, 0xa9, 0x0f, 0x5e, 0x69,
	0xaf, 0xdd, 0x32, 0x2c, 0xd3, 0xb0, 0x70, 0x2d, 0xf8, 0x01, 0xef, 0x03, 0x41, 0xf5, 0xfb, 0xb3,
	0xc0, 0xed, 0xd4, 0xa3, 0xcf, 0xb0, 0x4e, 0xb9, 0x65, 0x26, 0x64, 0x39, 0xcf, 0x1e, 0xfb, 0x70,
	0xbf, 0x47, 0xcf, 0xb0, 0x02, 0xe2, 0x9a, 0x83, 0x75, 0x7f, 0x2e, 0x6f, 0x8c, 0xb7, 0xda, 0x4f,
	0x94, 0x29, 0x79, 0x29, 0x0d, 0x7a, 0xd9, 0x24, 0x71, 0xb0, 0x1e, 0xa4, 0x14, 0x3e, 0xc0, 0x4f,
	0xc0, 0x8c, 0x46, 0x11, 0xed, 0x90, 0x74, 0x9c, 0x3b, 0xcc, 0x4e, 0x76, 0xc8, 0xd5, 0x4a, 0x69,
	0xdf, 0xa5, 0x48, 0xf8, 0x79, 0xe4, 0x91, 0xba, 0x82, 0xfc, 0x67, 0xf3, 0xe7, 0x2f, 0xa5, 0x75,
	0x90, 0x2c, 0x7c, 0xae, 0xe6, 0xeb, 0xd8, 0x42, 0x16, 0xfd, 0x02, 0x8e, 0x56, 0x33, 0xf7, 0xe3,
	0x0c, 0x58, 0x1c, 0x4b, 0x1b, 0xbe, 0x04, 0xc0, 0x1b, 0x0f, 0xcd, 0x78, 0xeb, 0x0d, 0x4f, 0xaa,
	0xf4, 0xaf, 0x8b, 0xae, 0x94, 0x2e, 0x5b, 0xde, 0x3e, 0x52, 0xdd, 0x17, 0xd8, 0xb5, 0xb7, 0x76,
	0xef, 0xde, 0xda, 0xdc, 0xb9, 0x7d, 0xf7, 0x9e, 0xb7, 0x9c, 0xb8, 0x85, 0x4c, 0x8c, 0xb7, 0x78,
	0x64, 0x39, 0x45, 0xc1, 0xd0, 0x05, 0x0b, 0x1a, 0x45, 0x9c, 0x72, 0x4d, 0x83, 0xef, 0x1d, 0xbf,
	0x37, 0x7f, 0x8d, 0xb8, 0xff, 0xa8, 0x62, 0x69, 0xc3, 0xaf, 0xc0, 0x75, 0xc2, 0x04, 0x6c, 0x48,
	0x3c, 0x49, 0x50, 0xdf, 0x09, 0x38, 0xfc, 0x14, 0x80, 0xe1, 0xb8, 0x93, 0xf4, 0x34, 0x5f, 0x32,
	0x6b, 0xe3, 0xe1, 0x86, 0x3a, 0x25, 0xc9, 0x0f, 0xb4, 0xa8, 0x0f, 0xcd, 0x82, 0x18, 0xe3, 0x10,
	0x7c, 0x0e, 0xc0, 0x70, 0xdd, 0xb0, 0x6e, 0x32, 0xf7, 0x2b, 0x63, 0x8b, 0x81, 0x49, 0x3d, 0xbe,
	0x0d, 0x7a, 0x59, 0xd8, 0x66, 0x90, 0xec, 0x32, 0x8b, 0xc0, 0x73, 0x04, 0x06, 0xdf, 0x81, 0x94,
	0xd7, 0x8f, 0xfb, 0x86, 0x49, 0xb1, 0x4b, 0xd2, 0x7f, 0xe1, 0xaf, 0x67, 0xe5, 0xa2, 0x2b, 0xc9,
	0xc1, 0x7b, 0x36, 0xd6, 0x45, 0xff, 0x3a, 0x61, 0x43, 0xd6, 0xa7, 0xb4, 0xdf, 0x90, 0x63, 0xcf,
	0x55, 0xf8, 0xa1, 0x98, 0x24, 0x81, 0x3a, 0x00, 0xc3, 0xef, 0x00, 0x92, 0x9e, 0xe1, 0x8d, 0x1a,
	0xa9, 0xdc, 0x95, 0xaf, 0x84, 0xd2, 0xba, 0xff, 0xc2, 0x2d, 0x1b, 0x43, 0xb3, 0x50, 0xa0, 0x48,
	0x94, 0x7d, 0x27, 0xc1, 0xf1, 0x94, 0xe1, 0x0d, 0x30, 0x5b, 0x3c, 0x38, 0x68, 0x54, 0x1f, 0xd5,
	0x35, 0x71, 0x2a, 0xb3, 0xd0, 0x3f, 0x97, 0x92, 0xc8, 0x34, 0x65, 0x2f, 0x57, 0x02, 0xd7, 0x41,
	0x82, 0x89, 0xf7, 0x6b, 0x6a, 0x55, 0x13, 0x85, 0x4c, 0xaa, 0x7f, 0x2e, 0x25, 0x98, 0xbc, 0xe9,
	0xda, 0x0e, 0x81, 0xb7, 0xc1, 0xd2, 0xa1, 0x52, 0x7f, 0xaa, 0xd6, 0x1e, 0x35, 0xaa, 0xea, 0x41,
	0x79, 0xef, 0x39, 0x57, 0x14, 0x63, 0x99, 0xd5, 0xfe, 0xb9, 0xb4, 0x64, 0x61, 0x7a, 0x6a, 0xbb,
	0xaf, 0x64, 0xc7, 0x36, 0x0d, 0xfd, 0x8c, 0x9b, 0xc0, 0x1d, 0xb0, 0x7c, 0xbf, 0x5c, 0x53, 0x9e,
	0xf2, 0x98, 0x21, 0x93, 0xe9, 0x4c, 0xba, 0x7f, 0x2e, 0x2d, 0x1f, 0x1b, 0x2e, 0x3e, 0xe5, 0xf1,
	0x2f, 0x6d, 0x72, 0x3f, 0x09, 0x60, 0x29, 0x62, 0x54, 0xe1, 0x31, 0x48, 0x69, 0xfa, 0x09, 0x6e,
	0x76, 0x4c, 0xcc, 0x90, 0x60, 0x0d, 0xdd, 0xbb, 0xe8, 0x4a, 0x6b, 0xd1, 0x6d, 0x63, 0x5a, 0x7c,
	0x98, 0x88, 0x6f, 0x27, 0xb3, 0x99, 0xc6, 0x01, 0x37, 0xa2, 0x61, 0xa8, 0x82, 0x04, 0x9f, 0x11,
	0xdc, 0x2c, 0x06, 0x5f, 0x24, 0xf3, 0xde, 0xd3, 0x68, 0xb4, 0x31, 0xa1, 0xa8, 0xed, 0x5c, 0x52,
	0x99, 0x78, 0x8a, 0x32, 0xa2, 0x43, 0x2a, 0x8f, 0x41, 0x39, 0x02, 0x56, 0x22, 0x47, 0x0f, 0xbe,
	0x00, 0x73, 0xc1, 0x8d, 0x98, 0x6f, 0xff, 0x1d, 0xbe, 0x1a, 0x6c, 0x8d, 0xed, 0xb6, 0x61, 0xaa,
	0xd4, 0x68, 0x87, 0x1f, 0x84, 0x49, 0x82, 0x9b, 0xff, 0x0d, 0x7d, 0x59, 0x42, 0x08, 0xe2, 0x25,
	0xb5, 0xfe, 0x50, 0x9c, 0xca, 0xcc, 0xf6, 0xcf, 0xa5, 0xf8, 0x91, 0x4d, 0x4f, 0xe0, 0x3c, 0x88,
	0xd5, 0x9f, 0x89, 0x42, 0x66, 0xa6, 0x7f, 0x2e, 0xc5, 0xe8, 0x1b, 0x76, 0xae, 0x3d, 0x13, 0x63,
	0xde, 0xd9, 0x7d, 0x73, 0xf3, 0x01, 0x58, 0x8a, 0x58, 0xea, 0x70, 0x11, 0xa4, 0x94, 0x9a, 0x56,
	0x2d, 0x1e, 0x36, 0xea, 0xcf, 0xab, 0x4a, 0xe3, 0x8e, 0x38, 0x75, 0x15, 0xda, 0x11, 0x05, 0x08,
	0xc0, 0x8c, 0x07, 0x89, 0xb1, 0x9b, 0xef, 0x02, 0x22, 0x86, 0xdb, 0x02, 0x67, 0x41, 0xfc, 0x50,
	0x3d, 0x54, 0xc4, 0x29, 0xa6, 0x5b, 0xdc, 0xab, 0x97, 0x9f, 0x28, 0xa2, 0x00, 0x93, 0xe0, 0x9a,
	0x56, 0x57, 0xab, 0x55, 0x65, 0x5f, 0x8c, 0xc1, 0x14, 0x48, 0x68, 0x7b, 0x0f, 0x95, 0xfd, 0xc7,
	0x07, 0xca, 0xbe, 0x38, 0x0d, 0x77, 0xc1, 0x8a, 0x52, 0xab, 0x35, 0x0e, 0xd5, 0x46, 0xa5, 0x5c,
	0xab, 0xa9, 0xb5, 0x86, 0xa6, 0x68, 0x5a, 0x59, 0x3d, 0x14, 0xe3, 0x99, 0xb5, 0xfe, 0xb9, 0xb4,
	0x8a, 0x59, 0x0c, 0xd9, 0xb2, 0x65, 0xef, 0x8f, 0x92, 0x4c, 0xbc, 0x70, 0x25, 0xf1, 0x7d, 0x7f,
	0x43, 0xf8, 0xd0, 0xdf, 0x10, 0x7e, 0xed, 0x6f, 0x08, 0xbf, 0xf5, 0x37, 0xa6, 0xaa, 0xc2, 0xd1,
	0x0c, 0xff, 0x70, 0xbb, 0xf3, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x6a, 0xf8, 0xbe, 0x55,
	0x0d, 0x00, 0x00,
}
