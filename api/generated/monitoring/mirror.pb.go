// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mirror.proto

/*
	Package monitoring is a generated protocol buffer package.

	Service name

	It is generated from these files:
		mirror.proto

	It has these top-level messages:
		AppProtoSelector
		AutoMsgMirrorSessionWatchHelper
		MatchRule
		MatchSelector
		MirrorCollector
		MirrorSession
		MirrorSessionList
		MirrorSessionSpec
		MirrorSessionStatus
		MirrorStartConditions
		MirrorStopConditions
		SmartNICMirrorSessionStatus
*/
package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// -------------------------
// ---- MirrorSessionStatus
// -------------------------
type MirrorSessionState int32

const (
	MirrorSessionState_RUNNING   MirrorSessionState = 0
	MirrorSessionState_STOPPED   MirrorSessionState = 1
	MirrorSessionState_SCHEDULED MirrorSessionState = 2
)

var MirrorSessionState_name = map[int32]string{
	0: "RUNNING",
	1: "STOPPED",
	2: "SCHEDULED",
}
var MirrorSessionState_value = map[string]int32{
	"RUNNING":   0,
	"STOPPED":   1,
	"SCHEDULED": 2,
}

func (x MirrorSessionState) String() string {
	return proto.EnumName(MirrorSessionState_name, int32(x))
}
func (MirrorSessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

type MirrorCollector_PacketCollectorType int32

const (
	MirrorCollector_VENICE MirrorCollector_PacketCollectorType = 0
	MirrorCollector_ERSPAN MirrorCollector_PacketCollectorType = 1
)

var MirrorCollector_PacketCollectorType_name = map[int32]string{
	0: "VENICE",
	1: "ERSPAN",
}
var MirrorCollector_PacketCollectorType_value = map[string]int32{
	"VENICE": 0,
	"ERSPAN": 1,
}

func (x MirrorCollector_PacketCollectorType) String() string {
	return proto.EnumName(MirrorCollector_PacketCollectorType_name, int32(x))
}
func (MirrorCollector_PacketCollectorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{4, 0}
}

type MirrorSessionSpec_MirrorPacketFilter int32

const (
	MirrorSessionSpec_ALL_PKTS             MirrorSessionSpec_MirrorPacketFilter = 0
	MirrorSessionSpec_ALL_DROPS            MirrorSessionSpec_MirrorPacketFilter = 1
	MirrorSessionSpec_NETWORK_POLICY_DROP  MirrorSessionSpec_MirrorPacketFilter = 2
	MirrorSessionSpec_FIREWALL_POLICY_DROP MirrorSessionSpec_MirrorPacketFilter = 3
)

var MirrorSessionSpec_MirrorPacketFilter_name = map[int32]string{
	0: "ALL_PKTS",
	1: "ALL_DROPS",
	2: "NETWORK_POLICY_DROP",
	3: "FIREWALL_POLICY_DROP",
}
var MirrorSessionSpec_MirrorPacketFilter_value = map[string]int32{
	"ALL_PKTS":             0,
	"ALL_DROPS":            1,
	"NETWORK_POLICY_DROP":  2,
	"FIREWALL_POLICY_DROP": 3,
}

func (x MirrorSessionSpec_MirrorPacketFilter) String() string {
	return proto.EnumName(MirrorSessionSpec_MirrorPacketFilter_name, int32(x))
}
func (MirrorSessionSpec_MirrorPacketFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{7, 0}
}

// ========================================================================================
// Packet Mirroring
// ========================================================================================
// -----------------------
// ---- MirrorSessionSpec
// -----------------------
type AppProtoSelector struct {
	// PacketSize: Max size of a mirrored packet.
	// PacketSize = 0 indicates complete packet is mirrored, except when mirrored packets are sent to Venice.
	// For packets mirrored to Venice, max mirror packet size allowed is 256 B
	Ports []string `protobuf:"bytes,1,rep,name=Ports" json:"ports,omitempty"`
	// StartConditions
	Apps []string `protobuf:"bytes,2,rep,name=Apps" json:"applications,omitempty"`
}

func (m *AppProtoSelector) Reset()                    { *m = AppProtoSelector{} }
func (m *AppProtoSelector) String() string            { return proto.CompactTextString(m) }
func (*AppProtoSelector) ProtoMessage()               {}
func (*AppProtoSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

func (m *AppProtoSelector) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *AppProtoSelector) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

// Conditions to start mirroring
type AutoMsgMirrorSessionWatchHelper struct {
	Type   string         `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Object *MirrorSession `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgMirrorSessionWatchHelper) Reset()         { *m = AutoMsgMirrorSessionWatchHelper{} }
func (m *AutoMsgMirrorSessionWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgMirrorSessionWatchHelper) ProtoMessage()    {}
func (*AutoMsgMirrorSessionWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{1}
}

func (m *AutoMsgMirrorSessionWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgMirrorSessionWatchHelper) GetObject() *MirrorSession {
	if m != nil {
		return m.Object
	}
	return nil
}

// A MirrorSession will stop mirroring after this condition is met
type MatchRule struct {
	// Stop after capturing specified number of packets
	Src *MatchSelector `protobuf:"bytes,1,opt,name=Src" json:"source,omitempty"`
	// Stop after specified amount of time. E.g. 1h, 20min
	// When ExpiryDuration is not specified, Default is "2h"
	Dst         *MatchSelector    `protobuf:"bytes,2,opt,name=Dst" json:"destination,omitempty"`
	AppProtoSel *AppProtoSelector `protobuf:"bytes,3,opt,name=AppProtoSel" json:"app-protocol-selectors,omitempty"`
}

func (m *MatchRule) Reset()                    { *m = MatchRule{} }
func (m *MatchRule) String() string            { return proto.CompactTextString(m) }
func (*MatchRule) ProtoMessage()               {}
func (*MatchRule) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{2} }

func (m *MatchRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MatchRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *MatchRule) GetAppProtoSel() *AppProtoSelector {
	if m != nil {
		return m.AppProtoSel
	}
	return nil
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
type MatchSelector struct {
	Endpoints []string `protobuf:"bytes,1,rep,name=Endpoints" json:"endpoints,omitempty"`
	// When collector type is Venice, collector export information is not required
	IPAddresses  []string `protobuf:"bytes,2,rep,name=IPAddresses" json:"ip-addresses,omitempty"`
	MACAddresses []string `protobuf:"bytes,3,rep,name=MACAddresses" json:"mac-addresses,omitempty"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{3} }

func (m *MatchSelector) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *MatchSelector) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

func (m *MatchSelector) GetMACAddresses() []string {
	if m != nil {
		return m.MACAddresses
	}
	return nil
}

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
type MirrorCollector struct {
	// Any of the following match selector can be specified to select a packet from mirroring
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	// Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
	ExportCfg api1.ExportConfig `protobuf:"bytes,2,opt,name=ExportCfg" json:"export-config,omitempty"`
}

func (m *MirrorCollector) Reset()                    { *m = MirrorCollector{} }
func (m *MirrorCollector) String() string            { return proto.CompactTextString(m) }
func (*MirrorCollector) ProtoMessage()               {}
func (*MirrorCollector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{4} }

func (m *MirrorCollector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MirrorCollector) GetExportCfg() api1.ExportConfig {
	if m != nil {
		return m.ExportCfg
	}
	return api1.ExportConfig{}
}

// Application/protocol selector
type MirrorSession struct {
	// ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// Apps - E.g. ["Redis"]
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           MirrorSessionSpec   `protobuf:"bytes,3,opt,name=Spec" json:"mirror-session-spec,inline"`
	Status         MirrorSessionStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *MirrorSession) Reset()                    { *m = MirrorSession{} }
func (m *MirrorSession) String() string            { return proto.CompactTextString(m) }
func (*MirrorSession) ProtoMessage()               {}
func (*MirrorSession) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{5} }

func (m *MirrorSession) GetSpec() MirrorSessionSpec {
	if m != nil {
		return m.Spec
	}
	return MirrorSessionSpec{}
}

func (m *MirrorSession) GetStatus() MirrorSessionStatus {
	if m != nil {
		return m.Status
	}
	return MirrorSessionStatus{}
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
type MirrorSessionList struct {
	// Either Src or Dst or both must be specified, both cannot be *
	// Src = * when not specified
	// When Src is specified and resides on Pesnsando SmartNIC, matching pkts to/from src will be mirrored
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	// Dst = * when not specified
	// When Dst is specified and resides on Pesnsando SmartNIC, matching pkts to/from dst will be mirrored
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// App = * when not specified
	Items []*MirrorSession `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *MirrorSessionList) Reset()                    { *m = MirrorSessionList{} }
func (m *MirrorSessionList) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionList) ProtoMessage()               {}
func (*MirrorSessionList) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{6} }

func (m *MirrorSessionList) GetItems() []*MirrorSession {
	if m != nil {
		return m.Items
	}
	return nil
}

type MirrorSessionSpec struct {
	PacketSize      uint32                `protobuf:"varint,1,opt,name=PacketSize,proto3" json:"packet-size,omitempty"`
	StartConditions MirrorStartConditions `protobuf:"bytes,2,opt,name=StartConditions" json:"start-condition,inline"`
	StopConditions  MirrorStopConditions  `protobuf:"bytes,3,opt,name=StopConditions" json:"stop-condition,inline"`
	Collectors      []MirrorCollector     `protobuf:"bytes,4,rep,name=Collectors" json:"collectors,inline"`
	MatchRules      []MatchRule           `protobuf:"bytes,5,rep,name=MatchRules" json:"match-rules,inline"`
	PacketFilters   []string              `protobuf:"bytes,6,rep,name=PacketFilters" json:"packet-filters,omitempty"`
}

func (m *MirrorSessionSpec) Reset()                    { *m = MirrorSessionSpec{} }
func (m *MirrorSessionSpec) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionSpec) ProtoMessage()               {}
func (*MirrorSessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{7} }

func (m *MirrorSessionSpec) GetPacketSize() uint32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *MirrorSessionSpec) GetStartConditions() MirrorStartConditions {
	if m != nil {
		return m.StartConditions
	}
	return MirrorStartConditions{}
}

func (m *MirrorSessionSpec) GetStopConditions() MirrorStopConditions {
	if m != nil {
		return m.StopConditions
	}
	return MirrorStopConditions{}
}

func (m *MirrorSessionSpec) GetCollectors() []MirrorCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *MirrorSessionSpec) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *MirrorSessionSpec) GetPacketFilters() []string {
	if m != nil {
		return m.PacketFilters
	}
	return nil
}

type MirrorSessionStatus struct {
	State                string                        `protobuf:"bytes,1,opt,name=State,proto3" json:"oper-state,inline"`
	NICStatus            []SmartNICMirrorSessionStatus `protobuf:"bytes,2,rep,name=NICStatus" json:"smart-nic-status,omitempty"`
	PacketCaptureFileURL string                        `protobuf:"bytes,3,opt,name=PacketCaptureFileURL,proto3" json:"packet-capture-url,inline)"`
}

func (m *MirrorSessionStatus) Reset()                    { *m = MirrorSessionStatus{} }
func (m *MirrorSessionStatus) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStatus) ProtoMessage()               {}
func (*MirrorSessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{8} }

func (m *MirrorSessionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MirrorSessionStatus) GetNICStatus() []SmartNICMirrorSessionStatus {
	if m != nil {
		return m.NICStatus
	}
	return nil
}

func (m *MirrorSessionStatus) GetPacketCaptureFileURL() string {
	if m != nil {
		return m.PacketCaptureFileURL
	}
	return ""
}

// ------------------
// ---- MirrorSession
// ------------------
type MirrorStartConditions struct {
	ScheduleTime *api.Timestamp `protobuf:"bytes,1,opt,name=ScheduleTime" json:"schedule-time,omitempty"`
}

func (m *MirrorStartConditions) Reset()                    { *m = MirrorStartConditions{} }
func (m *MirrorStartConditions) String() string            { return proto.CompactTextString(m) }
func (*MirrorStartConditions) ProtoMessage()               {}
func (*MirrorStartConditions) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{9} }

func (m *MirrorStartConditions) GetScheduleTime() *api.Timestamp {
	if m != nil {
		return m.ScheduleTime
	}
	return nil
}

type MirrorStopConditions struct {
	MaxPacketCount uint32 `protobuf:"varint,1,opt,name=MaxPacketCount,proto3" json:"max-packets,omitempty"`
	ExpiryDuration string `protobuf:"bytes,2,opt,name=ExpiryDuration,proto3" json:"expiry-duration,omitempty"`
}

func (m *MirrorStopConditions) Reset()                    { *m = MirrorStopConditions{} }
func (m *MirrorStopConditions) String() string            { return proto.CompactTextString(m) }
func (*MirrorStopConditions) ProtoMessage()               {}
func (*MirrorStopConditions) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{10} }

func (m *MirrorStopConditions) GetMaxPacketCount() uint32 {
	if m != nil {
		return m.MaxPacketCount
	}
	return 0
}

func (m *MirrorStopConditions) GetExpiryDuration() string {
	if m != nil {
		return m.ExpiryDuration
	}
	return ""
}

type SmartNICMirrorSessionStatus struct {
	SmartNIC          string `protobuf:"bytes,1,opt,name=SmartNIC,proto3" json:"smart-nic,inline)"`
	NumIngressPackets uint32 `protobuf:"varint,2,opt,name=NumIngressPackets,proto3" json:"num-ingress-packets,inline"`
	NumEgressPackets  uint32 `protobuf:"varint,3,opt,name=NumEgressPackets,proto3" json:"num-egress-packets,inline"`
	SessionId         uint32 `protobuf:"varint,4,opt,name=SessionId,proto3" json:"session-id,inline"`
}

func (m *SmartNICMirrorSessionStatus) Reset()         { *m = SmartNICMirrorSessionStatus{} }
func (m *SmartNICMirrorSessionStatus) String() string { return proto.CompactTextString(m) }
func (*SmartNICMirrorSessionStatus) ProtoMessage()    {}
func (*SmartNICMirrorSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{11}
}

func (m *SmartNICMirrorSessionStatus) GetSmartNIC() string {
	if m != nil {
		return m.SmartNIC
	}
	return ""
}

func (m *SmartNICMirrorSessionStatus) GetNumIngressPackets() uint32 {
	if m != nil {
		return m.NumIngressPackets
	}
	return 0
}

func (m *SmartNICMirrorSessionStatus) GetNumEgressPackets() uint32 {
	if m != nil {
		return m.NumEgressPackets
	}
	return 0
}

func (m *SmartNICMirrorSessionStatus) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func init() {
	proto.RegisterType((*AppProtoSelector)(nil), "monitoring.AppProtoSelector")
	proto.RegisterType((*AutoMsgMirrorSessionWatchHelper)(nil), "monitoring.AutoMsgMirrorSessionWatchHelper")
	proto.RegisterType((*MatchRule)(nil), "monitoring.MatchRule")
	proto.RegisterType((*MatchSelector)(nil), "monitoring.MatchSelector")
	proto.RegisterType((*MirrorCollector)(nil), "monitoring.MirrorCollector")
	proto.RegisterType((*MirrorSession)(nil), "monitoring.MirrorSession")
	proto.RegisterType((*MirrorSessionList)(nil), "monitoring.MirrorSessionList")
	proto.RegisterType((*MirrorSessionSpec)(nil), "monitoring.MirrorSessionSpec")
	proto.RegisterType((*MirrorSessionStatus)(nil), "monitoring.MirrorSessionStatus")
	proto.RegisterType((*MirrorStartConditions)(nil), "monitoring.MirrorStartConditions")
	proto.RegisterType((*MirrorStopConditions)(nil), "monitoring.MirrorStopConditions")
	proto.RegisterType((*SmartNICMirrorSessionStatus)(nil), "monitoring.SmartNICMirrorSessionStatus")
	proto.RegisterEnum("monitoring.MirrorSessionState", MirrorSessionState_name, MirrorSessionState_value)
	proto.RegisterEnum("monitoring.MirrorCollector_PacketCollectorType", MirrorCollector_PacketCollectorType_name, MirrorCollector_PacketCollectorType_value)
	proto.RegisterEnum("monitoring.MirrorSessionSpec_MirrorPacketFilter", MirrorSessionSpec_MirrorPacketFilter_name, MirrorSessionSpec_MirrorPacketFilter_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MirrorSessionV1 service

type MirrorSessionV1Client interface {
	AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error)
	AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error)
	AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MirrorSessionV1_AutoWatchMirrorSessionClient, error)
}

type mirrorSessionV1Client struct {
	cc *grpc.ClientConn
}

func NewMirrorSessionV1Client(cc *grpc.ClientConn) MirrorSessionV1Client {
	return &mirrorSessionV1Client{cc}
}

func (c *mirrorSessionV1Client) AutoAddMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MirrorSessionV1/AutoAddMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionV1Client) AutoDeleteMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MirrorSessionV1/AutoDeleteMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionV1Client) AutoGetMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MirrorSessionV1/AutoGetMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionV1Client) AutoListMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*MirrorSessionList, error) {
	out := new(MirrorSessionList)
	err := grpc.Invoke(ctx, "/monitoring.MirrorSessionV1/AutoListMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionV1Client) AutoUpdateMirrorSession(ctx context.Context, in *MirrorSession, opts ...grpc.CallOption) (*MirrorSession, error) {
	out := new(MirrorSession)
	err := grpc.Invoke(ctx, "/monitoring.MirrorSessionV1/AutoUpdateMirrorSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorSessionV1Client) AutoWatchMirrorSession(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (MirrorSessionV1_AutoWatchMirrorSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MirrorSessionV1_serviceDesc.Streams[0], c.cc, "/monitoring.MirrorSessionV1/AutoWatchMirrorSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &mirrorSessionV1AutoWatchMirrorSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MirrorSessionV1_AutoWatchMirrorSessionClient interface {
	Recv() (*AutoMsgMirrorSessionWatchHelper, error)
	grpc.ClientStream
}

type mirrorSessionV1AutoWatchMirrorSessionClient struct {
	grpc.ClientStream
}

func (x *mirrorSessionV1AutoWatchMirrorSessionClient) Recv() (*AutoMsgMirrorSessionWatchHelper, error) {
	m := new(AutoMsgMirrorSessionWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MirrorSessionV1 service

type MirrorSessionV1Server interface {
	AutoAddMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	AutoDeleteMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	AutoGetMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	AutoListMirrorSession(context.Context, *api.ListWatchOptions) (*MirrorSessionList, error)
	AutoUpdateMirrorSession(context.Context, *MirrorSession) (*MirrorSession, error)
	AutoWatchMirrorSession(*api.ListWatchOptions, MirrorSessionV1_AutoWatchMirrorSessionServer) error
}

func RegisterMirrorSessionV1Server(s *grpc.Server, srv MirrorSessionV1Server) {
	s.RegisterService(&_MirrorSessionV1_serviceDesc, srv)
}

func _MirrorSessionV1_AutoAddMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionV1Server).AutoAddMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MirrorSessionV1/AutoAddMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionV1Server).AutoAddMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionV1_AutoDeleteMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionV1Server).AutoDeleteMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MirrorSessionV1/AutoDeleteMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionV1Server).AutoDeleteMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionV1_AutoGetMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionV1Server).AutoGetMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MirrorSessionV1/AutoGetMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionV1Server).AutoGetMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionV1_AutoListMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionV1Server).AutoListMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MirrorSessionV1/AutoListMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionV1Server).AutoListMirrorSession(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionV1_AutoUpdateMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorSessionV1Server).AutoUpdateMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoring.MirrorSessionV1/AutoUpdateMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorSessionV1Server).AutoUpdateMirrorSession(ctx, req.(*MirrorSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _MirrorSessionV1_AutoWatchMirrorSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MirrorSessionV1Server).AutoWatchMirrorSession(m, &mirrorSessionV1AutoWatchMirrorSessionServer{stream})
}

type MirrorSessionV1_AutoWatchMirrorSessionServer interface {
	Send(*AutoMsgMirrorSessionWatchHelper) error
	grpc.ServerStream
}

type mirrorSessionV1AutoWatchMirrorSessionServer struct {
	grpc.ServerStream
}

func (x *mirrorSessionV1AutoWatchMirrorSessionServer) Send(m *AutoMsgMirrorSessionWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _MirrorSessionV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.MirrorSessionV1",
	HandlerType: (*MirrorSessionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddMirrorSession",
			Handler:    _MirrorSessionV1_AutoAddMirrorSession_Handler,
		},
		{
			MethodName: "AutoDeleteMirrorSession",
			Handler:    _MirrorSessionV1_AutoDeleteMirrorSession_Handler,
		},
		{
			MethodName: "AutoGetMirrorSession",
			Handler:    _MirrorSessionV1_AutoGetMirrorSession_Handler,
		},
		{
			MethodName: "AutoListMirrorSession",
			Handler:    _MirrorSessionV1_AutoListMirrorSession_Handler,
		},
		{
			MethodName: "AutoUpdateMirrorSession",
			Handler:    _MirrorSessionV1_AutoUpdateMirrorSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchMirrorSession",
			Handler:       _MirrorSessionV1_AutoWatchMirrorSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mirror.proto",
}

func (m *AppProtoSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppProtoSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AutoMsgMirrorSessionWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgMirrorSessionWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Src.Size()))
		n2, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Dst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Dst.Size()))
		n3, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.AppProtoSel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.AppProtoSel.Size()))
		n4, err := m.AppProtoSel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MirrorCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorCollector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ExportCfg.Size()))
	n5, err := m.ExportCfg.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *MirrorSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ObjectMeta.Size()))
	n7, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Spec.Size()))
	n8, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x22
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Status.Size()))
	n9, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *MirrorSessionList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.TypeMeta.Size()))
	n10, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ListMeta.Size()))
	n11, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MirrorSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PacketSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.PacketSize))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StartConditions.Size()))
	n12, err := m.StartConditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StopConditions.Size()))
	n13, err := m.StopConditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.NICStatus) > 0 {
		for _, msg := range m.NICStatus {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PacketCaptureFileURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.PacketCaptureFileURL)))
		i += copy(dAtA[i:], m.PacketCaptureFileURL)
	}
	return i, nil
}

func (m *MirrorStartConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorStartConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ScheduleTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.ScheduleTime.Size()))
		n14, err := m.ScheduleTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *MirrorStopConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorStopConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxPacketCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.MaxPacketCount))
	}
	if len(m.ExpiryDuration) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.ExpiryDuration)))
		i += copy(dAtA[i:], m.ExpiryDuration)
	}
	return i, nil
}

func (m *SmartNICMirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartNICMirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SmartNIC) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.SmartNIC)))
		i += copy(dAtA[i:], m.SmartNIC)
	}
	if m.NumIngressPackets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.NumIngressPackets))
	}
	if m.NumEgressPackets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.NumEgressPackets))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.SessionId))
	}
	return i, nil
}

func encodeVarintMirror(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppProtoSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *AutoMsgMirrorSessionWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MatchRule) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.AppProtoSel != nil {
		l = m.AppProtoSel.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorCollector) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = m.ExportCfg.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSession) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSessionList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionSpec) Size() (n int) {
	var l int
	_ = l
	if m.PacketSize != 0 {
		n += 1 + sovMirror(uint64(m.PacketSize))
	}
	l = m.StartConditions.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.StopConditions.Size()
	n += 1 + l + sovMirror(uint64(l))
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if len(m.NICStatus) > 0 {
		for _, e := range m.NICStatus {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	l = len(m.PacketCaptureFileURL)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorStartConditions) Size() (n int) {
	var l int
	_ = l
	if m.ScheduleTime != nil {
		l = m.ScheduleTime.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorStopConditions) Size() (n int) {
	var l int
	_ = l
	if m.MaxPacketCount != 0 {
		n += 1 + sovMirror(uint64(m.MaxPacketCount))
	}
	l = len(m.ExpiryDuration)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *SmartNICMirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.SmartNIC)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.NumIngressPackets != 0 {
		n += 1 + sovMirror(uint64(m.NumIngressPackets))
	}
	if m.NumEgressPackets != 0 {
		n += 1 + sovMirror(uint64(m.NumEgressPackets))
	}
	if m.SessionId != 0 {
		n += 1 + sovMirror(uint64(m.SessionId))
	}
	return n
}

func sovMirror(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMirror(x uint64) (n int) {
	return sovMirror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppProtoSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppProtoSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppProtoSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoMsgMirrorSessionWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgMirrorSessionWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &MirrorSession{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtoSel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProtoSel == nil {
				m.AppProtoSel = &AppProtoSelector{}
			}
			if err := m.AppProtoSel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddresses = append(m.IPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddresses = append(m.MACAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExportCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MirrorSession{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSize", wireType)
			}
			m.PacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, MirrorCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketFilters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketFilters = append(m.PacketFilters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NICStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NICStatus = append(m.NICStatus, SmartNICMirrorSessionStatus{})
			if err := m.NICStatus[len(m.NICStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketCaptureFileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketCaptureFileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorStartConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorStartConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorStartConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleTime == nil {
				m.ScheduleTime = &api.Timestamp{}
			}
			if err := m.ScheduleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorStopConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorStopConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorStopConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPacketCount", wireType)
			}
			m.MaxPacketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPacketCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiryDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartNICMirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartNICMirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartNICMirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNIC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartNIC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIngressPackets", wireType)
			}
			m.NumIngressPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIngressPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEgressPackets", wireType)
			}
			m.NumEgressPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEgressPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMirror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMirror
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMirror
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMirror(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMirror = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMirror   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mirror.proto", fileDescriptorMirror) }

var fileDescriptorMirror = []byte{
	// 1705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0x1b, 0xc7,
	0x19, 0xd6, 0x92, 0x92, 0x6c, 0xbe, 0x12, 0x25, 0x6a, 0x24, 0xd9, 0x5c, 0xda, 0x16, 0xd5, 0x45,
	0x8b, 0x48, 0xae, 0x97, 0x8c, 0x93, 0xf4, 0x60, 0x23, 0x41, 0x41, 0x4a, 0x74, 0xc2, 0x46, 0x22,
	0x19, 0x52, 0xb2, 0x91, 0x53, 0xb0, 0xde, 0x1d, 0x53, 0x53, 0x73, 0x3f, 0xb0, 0x33, 0x9b, 0xd8,
	0x29, 0x02, 0x14, 0xb1, 0xec, 0x9e, 0x9a, 0x43, 0x7b, 0x2b, 0x8a, 0x22, 0xe8, 0x51, 0x47, 0x9f,
	0xfa, 0x07, 0x0a, 0xf8, 0x18, 0xb4, 0x37, 0x1f, 0x88, 0xc2, 0xe8, 0x89, 0xbf, 0xa1, 0x87, 0x62,
	0x66, 0x67, 0xa9, 0x59, 0x8a, 0x12, 0x7c, 0xf0, 0x6d, 0x77, 0xe6, 0x79, 0x9f, 0x79, 0xde, 0xcf,
	0x9d, 0x85, 0x45, 0x97, 0x84, 0xa1, 0x1f, 0x56, 0x82, 0xd0, 0x67, 0x3e, 0x02, 0xd7, 0xf7, 0x08,
	0xf3, 0x43, 0xe2, 0xf5, 0x4b, 0xd7, 0xfb, 0xbe, 0xdf, 0x1f, 0xe0, 0xaa, 0x15, 0x90, 0xaa, 0xe5,
	0x79, 0x3e, 0xb3, 0x18, 0xf1, 0x3d, 0x1a, 0x23, 0x4b, 0x8d, 0x3e, 0x61, 0x47, 0xd1, 0xc3, 0x8a,
	0xed, 0xbb, 0xd5, 0x00, 0x7b, 0xd4, 0xf2, 0x1c, 0xbf, 0x4a, 0xbf, 0xa9, 0x7e, 0x8d, 0x3d, 0x62,
	0xe3, 0x6a, 0xc4, 0xc8, 0x80, 0x72, 0xd3, 0x3e, 0xf6, 0x54, 0xeb, 0x2a, 0xf1, 0xec, 0x41, 0xe4,
	0xe0, 0x84, 0xc6, 0x54, 0x68, 0xfa, 0x7e, 0xdf, 0xaf, 0x8a, 0xe5, 0x87, 0xd1, 0x23, 0xf1, 0x26,
	0x5e, 0xc4, 0x93, 0x84, 0xff, 0xe2, 0x9c, 0x53, 0xb9, 0x46, 0x17, 0x33, 0x4b, 0xc2, 0xde, 0xbb,
	0x00, 0x86, 0x9f, 0x04, 0x7e, 0xc8, 0x62, 0xa0, 0xe1, 0x42, 0xa1, 0x16, 0x04, 0x1d, 0xfe, 0xdc,
	0xc3, 0x03, 0x6c, 0x33, 0x3f, 0x44, 0xdb, 0x30, 0xd7, 0xf1, 0x43, 0x46, 0x8b, 0xda, 0x66, 0x76,
	0x2b, 0x57, 0x5f, 0x1d, 0x0d, 0xcb, 0xcb, 0xdc, 0x84, 0xde, 0xf2, 0x5d, 0xc2, 0xb0, 0x1b, 0xb0,
	0xa7, 0xdd, 0x18, 0x81, 0x2a, 0x30, 0x5b, 0x0b, 0x02, 0x5a, 0xcc, 0x08, 0x64, 0x69, 0x34, 0x2c,
	0x5f, 0xb1, 0x82, 0x60, 0x40, 0xec, 0xd8, 0x59, 0xc5, 0x40, 0xe0, 0x8c, 0xc7, 0x50, 0xae, 0x45,
	0xcc, 0xdf, 0xa7, 0xfd, 0x7d, 0x11, 0xf5, 0x1e, 0xa6, 0x94, 0xf8, 0xde, 0x03, 0x8b, 0xd9, 0x47,
	0x9f, 0xe1, 0x41, 0x80, 0x43, 0xb4, 0x08, 0xb3, 0x07, 0x4f, 0x03, 0x5c, 0xd4, 0x36, 0xb5, 0xad,
	0x1c, 0xda, 0x86, 0xf9, 0xf6, 0xc3, 0xdf, 0x62, 0x9b, 0x15, 0x33, 0x9b, 0xda, 0xd6, 0xc2, 0x07,
	0x7a, 0xe5, 0x34, 0x41, 0x95, 0x14, 0xc7, 0xdd, 0xe5, 0xd7, 0xcf, 0xf5, 0x85, 0x6f, 0x38, 0xd3,
	0x91, 0x60, 0x32, 0xfe, 0xa7, 0x41, 0x6e, 0x9f, 0xbf, 0x77, 0xa3, 0x01, 0x46, 0x35, 0xc8, 0xf6,
	0x42, 0x5b, 0xd0, 0x4e, 0xd2, 0x70, 0x4c, 0xe2, 0x7d, 0x7d, 0x6d, 0x34, 0x2c, 0x17, 0xa8, 0x1f,
	0x85, 0x36, 0x56, 0xe4, 0x73, 0x5b, 0x74, 0x0f, 0xb2, 0xbb, 0x74, 0xba, 0x92, 0x14, 0x85, 0x3e,
	0x1a, 0x96, 0xd7, 0x1d, 0x4c, 0x19, 0xf1, 0x44, 0x1c, 0x54, 0x9e, 0x5d, 0xca, 0x90, 0x03, 0x0b,
	0x4a, 0xd0, 0x8b, 0x59, 0xc1, 0x77, 0x5d, 0xe5, 0x9b, 0xcc, 0x49, 0xfd, 0xe7, 0xa3, 0x61, 0x79,
	0xd3, 0x0a, 0x02, 0x53, 0xa4, 0xcd, 0xf6, 0x07, 0x26, 0x95, 0x5b, 0x6a, 0x90, 0x55, 0x5a, 0xe3,
	0x9f, 0x1a, 0xe4, 0x53, 0xba, 0xd0, 0xaf, 0x20, 0xd7, 0xf0, 0x9c, 0xc0, 0x27, 0xde, 0x38, 0xb9,
	0x57, 0x47, 0xc3, 0xf2, 0x2a, 0x4e, 0x16, 0x15, 0xaa, 0x53, 0x24, 0xfa, 0x18, 0x16, 0x9a, 0x9d,
	0x9a, 0xe3, 0x84, 0x98, 0x52, 0x9c, 0xca, 0x35, 0x09, 0x4c, 0x2b, 0x59, 0x57, 0x65, 0x28, 0x70,
	0xf4, 0x6b, 0x58, 0xdc, 0xaf, 0xed, 0x9c, 0x9a, 0x67, 0x85, 0xf9, 0xb5, 0xd1, 0xb0, 0x7c, 0xd5,
	0xb5, 0xec, 0xa9, 0xf6, 0x29, 0x03, 0x63, 0xa4, 0xc1, 0x72, 0x9c, 0xe9, 0x1d, 0x7f, 0x20, 0x3d,
	0xb9, 0xaf, 0x16, 0x49, 0xbd, 0x7e, 0xf2, 0x42, 0xbf, 0xd5, 0x63, 0x61, 0xc3, 0x8b, 0xdc, 0xad,
	0x09, 0x68, 0xa5, 0x63, 0xd9, 0x8f, 0x31, 0x1b, 0xbf, 0x73, 0xb3, 0xed, 0xd1, 0xb0, 0xbc, 0xc4,
	0x9e, 0x06, 0x6a, 0x82, 0x05, 0x1f, 0xea, 0x40, 0xae, 0x21, 0xda, 0x63, 0xe7, 0x51, 0x5f, 0xe6,
	0x79, 0xa5, 0x62, 0x05, 0xa4, 0x22, 0x57, 0x7d, 0xef, 0x11, 0xe9, 0xd7, 0xcb, 0xaf, 0x86, 0xe5,
	0x19, 0xee, 0x40, 0xdc, 0x4a, 0xa6, 0x2d, 0x96, 0x53, 0xc1, 0x4b, 0x48, 0x0c, 0x13, 0x56, 0xa7,
	0x28, 0x40, 0x00, 0xf3, 0xf7, 0x1b, 0xad, 0xe6, 0x4e, 0xa3, 0x30, 0xc3, 0x9f, 0x1b, 0xdd, 0x5e,
	0xa7, 0xd6, 0x2a, 0x68, 0xc6, 0xab, 0x0c, 0xe4, 0x53, 0x65, 0x8d, 0xde, 0x07, 0xed, 0x40, 0x56,
	0x6d, 0x5e, 0x48, 0xe1, 0xf6, 0xfb, 0x98, 0x59, 0xf5, 0x55, 0x2e, 0xe3, 0xa7, 0x61, 0x59, 0x1b,
	0x0d, 0xcb, 0x97, 0x6e, 0x11, 0x6f, 0x40, 0x3c, 0xdc, 0xd5, 0x0e, 0xd0, 0x1d, 0xd0, 0xda, 0x52,
	0xfc, 0xb2, 0xb0, 0x88, 0x3b, 0x48, 0xd8, 0x94, 0x14, 0x9b, 0x25, 0x3e, 0x30, 0x14, 0xd5, 0x5a,
	0x1b, 0x1d, 0xc2, 0x6c, 0x2f, 0xc0, 0xb6, 0x2c, 0xc9, 0x1b, 0xe7, 0x36, 0x1b, 0x07, 0xd5, 0x0d,
	0x19, 0x86, 0x52, 0x3c, 0x41, 0x4d, 0x1a, 0xef, 0x99, 0x34, 0xc0, 0x76, 0x22, 0x47, 0xd0, 0xa1,
	0x2f, 0x60, 0xbe, 0xc7, 0x2c, 0x16, 0xd1, 0xe2, 0xac, 0x20, 0x2e, 0x9f, 0x4f, 0x2c, 0x60, 0xf5,
	0xa2, 0xa4, 0x2e, 0x50, 0xf1, 0xae, 0x88, 0x94, 0x44, 0x77, 0x37, 0xff, 0xf5, 0x5c, 0xbf, 0x0e,
	0x0b, 0xd5, 0xdf, 0xb5, 0x2b, 0x07, 0xd8, 0xb3, 0x3c, 0xf6, 0x1d, 0x4a, 0x07, 0xce, 0xf8, 0xab,
	0x06, 0x2b, 0xa9, 0x95, 0x3d, 0x42, 0x19, 0x32, 0x78, 0x38, 0x33, 0xd3, 0xc2, 0x79, 0x39, 0x09,
	0x0d, 0xda, 0x86, 0xcb, 0x1c, 0xcb, 0x57, 0x65, 0x24, 0x62, 0x68, 0xb2, 0xa8, 0x40, 0xb7, 0x60,
	0xae, 0xc9, 0xb0, 0xcb, 0x1d, 0xcb, 0x5e, 0x3c, 0x9e, 0x96, 0x5e, 0x3f, 0xd7, 0x61, 0x40, 0x28,
	0x93, 0xd3, 0xe9, 0x64, 0x6e, 0x42, 0x9e, 0x88, 0xd4, 0x1d, 0x80, 0xb8, 0x5c, 0x7a, 0xe4, 0xdb,
	0xb8, 0xbc, 0xf3, 0xf1, 0x38, 0x09, 0xc4, 0xaa, 0x49, 0xc9, 0xb7, 0x6a, 0xd5, 0x2a, 0x60, 0xf4,
	0x18, 0x96, 0x7b, 0xcc, 0x12, 0x45, 0xea, 0x10, 0x31, 0x7e, 0xa5, 0x9f, 0x3f, 0x9b, 0x22, 0x2a,
	0x0d, 0xac, 0x6f, 0xc8, 0x78, 0x5f, 0xa1, 0x7c, 0x83, 0x17, 0x74, 0xbc, 0x93, 0xa4, 0x71, 0x92,
	0x19, 0xf5, 0x61, 0xa9, 0xc7, 0xfc, 0x40, 0x39, 0x2b, 0x0e, 0xd4, 0xe6, 0xb4, 0xb3, 0x54, 0x5c,
	0xfd, 0x86, 0x3c, 0x6a, 0x9d, 0x32, 0x3f, 0x38, 0x7b, 0xd2, 0x04, 0x2d, 0xba, 0x0f, 0x30, 0xee,
	0x9c, 0x24, 0xca, 0xd7, 0xce, 0x1e, 0x32, 0xc6, 0xd4, 0x75, 0xc9, 0xbf, 0x62, 0x8f, 0xcd, 0x12,
	0x6e, 0x85, 0x09, 0x7d, 0x01, 0x30, 0xfe, 0x36, 0xd0, 0xe2, 0x9c, 0xe0, 0x5d, 0x3f, 0x33, 0xd2,
	0xf9, 0x6e, 0xdc, 0x33, 0xa3, 0x61, 0x19, 0xb9, 0x7c, 0xc9, 0x0c, 0xb9, 0xc5, 0x98, 0xf2, 0x94,
	0x04, 0x51, 0xc8, 0xc7, 0xe9, 0xb8, 0x47, 0x06, 0x0c, 0x87, 0xb4, 0x38, 0x2f, 0x46, 0xdd, 0xfe,
	0xc9, 0x0b, 0xdd, 0x4c, 0x4f, 0x27, 0x25, 0xe3, 0x52, 0xbf, 0x6a, 0xc8, 0xc7, 0x53, 0x51, 0xe6,
	0xfb, 0x51, 0x4c, 0xa5, 0xa4, 0x3c, 0x7d, 0x86, 0xe1, 0x00, 0x3a, 0xcb, 0x80, 0x16, 0xe1, 0x72,
	0x6d, 0x6f, 0xef, 0xab, 0xce, 0xe7, 0x07, 0xbd, 0xc2, 0x0c, 0xca, 0x43, 0x8e, 0xbf, 0xed, 0x76,
	0xdb, 0x9d, 0x5e, 0x41, 0x43, 0x57, 0x61, 0xb5, 0xd5, 0x38, 0x78, 0xd0, 0xee, 0x7e, 0xfe, 0x55,
	0xa7, 0xbd, 0xd7, 0xdc, 0xf9, 0x52, 0xec, 0x14, 0x32, 0xa8, 0x08, 0x6b, 0xf7, 0x9a, 0xdd, 0xc6,
	0x03, 0x61, 0xaa, 0xec, 0x64, 0x8d, 0x1f, 0x33, 0xb0, 0x3a, 0xa5, 0x4f, 0xd1, 0x6f, 0x60, 0x8e,
	0x3f, 0x25, 0x83, 0xf8, 0xa3, 0x93, 0x17, 0xfa, 0xb5, 0xe9, 0xae, 0x72, 0x14, 0x77, 0x6c, 0xc5,
	0x0f, 0x70, 0x68, 0xf2, 0xb6, 0xc6, 0x49, 0x0c, 0x63, 0x0a, 0x44, 0x20, 0xd7, 0x6a, 0xee, 0xc8,
	0x39, 0x91, 0x11, 0x09, 0x79, 0x4f, 0x4d, 0x48, 0xcf, 0xb5, 0x42, 0xd6, 0x6a, 0xee, 0x4c, 0x9b,
	0x17, 0xe3, 0x51, 0x44, 0x39, 0xc8, 0xf4, 0x88, 0x6d, 0x9e, 0x99, 0x1c, 0xa7, 0xec, 0xa8, 0x0b,
	0x6b, 0x72, 0x28, 0x5b, 0x01, 0x8b, 0x42, 0x7c, 0x8f, 0x0c, 0xf0, 0x61, 0x77, 0x4f, 0xd4, 0x70,
	0xae, 0xbe, 0xc1, 0x89, 0x64, 0xfc, 0xed, 0x18, 0x60, 0x46, 0xe1, 0x40, 0xca, 0xdd, 0xee, 0x4e,
	0xb5, 0x35, 0x8e, 0x60, 0x7d, 0x6a, 0x6f, 0xa1, 0x36, 0x2c, 0xf6, 0xec, 0x23, 0xec, 0x44, 0x03,
	0x7c, 0x40, 0x5c, 0x2c, 0x67, 0xf9, 0x52, 0x3c, 0x7c, 0x88, 0x8b, 0x29, 0xb3, 0xdc, 0x20, 0xfe,
	0x20, 0x52, 0x89, 0x33, 0x19, 0x71, 0xd5, 0x36, 0x4f, 0x11, 0x18, 0x3f, 0x6a, 0xb0, 0x36, 0xad,
	0xb5, 0x50, 0x0d, 0x96, 0xf6, 0xad, 0x27, 0xc9, 0xe7, 0x26, 0xf2, 0x98, 0x3a, 0x40, 0x5c, 0xeb,
	0x89, 0x19, 0x3b, 0xa5, 0x06, 0x65, 0xc2, 0x00, 0x35, 0x60, 0xa9, 0xf1, 0x24, 0x20, 0xe1, 0xd3,
	0xdd, 0x28, 0x14, 0x77, 0x17, 0x31, 0x43, 0x72, 0xf5, 0x1b, 0xa3, 0x61, 0x59, 0xc7, 0x62, 0xc7,
	0x74, 0xe4, 0x96, 0x4a, 0x93, 0x36, 0x32, 0xfe, 0x96, 0x81, 0x6b, 0x17, 0xe4, 0x0b, 0xdd, 0x86,
	0xcb, 0xc9, 0xb6, 0x2c, 0x9d, 0x75, 0x5e, 0x1b, 0xe3, 0xec, 0x8d, 0x63, 0x3d, 0x86, 0xa1, 0x3d,
	0x58, 0x69, 0x45, 0x6e, 0xd3, 0xeb, 0xf3, 0x6b, 0x41, 0x2c, 0x39, 0x1e, 0x70, 0xf9, 0x38, 0x61,
	0x5e, 0xe4, 0x9a, 0x24, 0xde, 0x1d, 0xfb, 0x29, 0x0b, 0xec, 0xac, 0x21, 0x6a, 0x42, 0xa1, 0x15,
	0xb9, 0x8d, 0x14, 0x59, 0x56, 0x90, 0x09, 0x4f, 0x39, 0x19, 0x9e, 0xca, 0x75, 0xc6, 0x0c, 0x7d,
	0x08, 0x39, 0xe9, 0x5c, 0xd3, 0x11, 0xdf, 0xb7, 0xbc, 0x74, 0x46, 0x7e, 0x0e, 0x89, 0x93, 0xd8,
	0x9e, 0xe2, 0x6e, 0x7e, 0x92, 0xb4, 0xad, 0xda, 0x1f, 0x68, 0x01, 0x2e, 0x75, 0x0f, 0x5b, 0xad,
	0x66, 0xeb, 0xd3, 0xc2, 0x0c, 0x7f, 0xe9, 0x1d, 0xb4, 0x3b, 0x9d, 0xc6, 0x6e, 0x41, 0xe3, 0x2d,
	0xdc, 0xdb, 0xf9, 0xac, 0xb1, 0x7b, 0xb8, 0xd7, 0xd8, 0x2d, 0x64, 0x3e, 0xf8, 0xe1, 0x52, 0x72,
	0x27, 0x92, 0xf6, 0xf7, 0x6f, 0xa3, 0xef, 0x35, 0x58, 0xe3, 0x97, 0xeb, 0x9a, 0xe3, 0xa4, 0x6f,
	0x10, 0xe7, 0x7f, 0x94, 0x4a, 0xe7, 0x6f, 0x19, 0x1f, 0xbd, 0x3c, 0xd6, 0xe7, 0xed, 0x10, 0x5b,
	0x0c, 0xff, 0xe3, 0x58, 0xd7, 0xbe, 0xff, 0xf7, 0x7f, 0xff, 0x9c, 0xd9, 0x84, 0x99, 0xbb, 0xda,
	0x4d, 0x43, 0x57, 0xbe, 0xba, 0xd5, 0xf4, 0x59, 0x7f, 0xd4, 0xe0, 0x2a, 0x17, 0xb1, 0x8b, 0x07,
	0x98, 0xe1, 0x77, 0xa1, 0xe3, 0x63, 0xae, 0xc3, 0x11, 0x74, 0x63, 0x1d, 0x5b, 0x30, 0x73, 0x77,
	0xe6, 0xa6, 0x71, 0xae, 0x0c, 0xbe, 0xd1, 0xb2, 0x5c, 0xfc, 0x1d, 0xfa, 0x83, 0x0c, 0xca, 0xa7,
	0x98, 0xbd, 0x0b, 0x31, 0x77, 0x5e, 0x1e, 0xeb, 0xd9, 0x3e, 0x66, 0x69, 0x25, 0xe8, 0x6d, 0x94,
	0xfc, 0x5e, 0x83, 0x75, 0xae, 0x44, 0x5c, 0x22, 0x52, 0x52, 0xd6, 0xc7, 0x97, 0x0b, 0xf1, 0x1f,
	0xd4, 0x0e, 0x44, 0x37, 0x97, 0xce, 0xbf, 0x7d, 0x71, 0xa8, 0x71, 0xfb, 0xe5, 0xb1, 0x3e, 0xcb,
	0xef, 0x13, 0x63, 0x2d, 0x65, 0xa1, 0xe5, 0x82, 0xe4, 0xfc, 0x20, 0x93, 0x73, 0x18, 0x38, 0xd6,
	0xbb, 0x49, 0xce, 0x27, 0x3c, 0x39, 0x91, 0xa0, 0x1b, 0xcb, 0xd8, 0x16, 0x45, 0x52, 0x7a, 0x9b,
	0x98, 0xb8, 0x70, 0x85, 0xeb, 0x11, 0x6e, 0xbf, 0x55, 0x4c, 0x7e, 0x99, 0xfa, 0x49, 0xba, 0xf8,
	0x4f, 0xd2, 0xc8, 0xbf, 0x3c, 0xd6, 0xe7, 0xc4, 0x0f, 0x21, 0xd7, 0xf6, 0xbe, 0x56, 0xfa, 0xf2,
	0x4f, 0xcf, 0xf4, 0xcc, 0xd7, 0xb7, 0xff, 0xf2, 0x4c, 0x4f, 0x5f, 0x15, 0xff, 0x3e, 0xb9, 0x70,
	0xf2, 0x4c, 0x37, 0x27, 0xef, 0xe1, 0x3c, 0xed, 0x28, 0x1b, 0x44, 0x0c, 0xc9, 0x6a, 0x44, 0xb3,
	0x81, 0x4f, 0x19, 0x12, 0x39, 0xa8, 0x2f, 0xbe, 0x7a, 0xb3, 0xa1, 0xfd, 0xf4, 0x66, 0x43, 0xfb,
	0xcf, 0x9b, 0x0d, 0xad, 0xa3, 0x3d, 0x9c, 0x17, 0xff, 0x69, 0x1f, 0xfe, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0xf8, 0xa7, 0x18, 0xe3, 0x5e, 0x10, 0x00, 0x00,
}
