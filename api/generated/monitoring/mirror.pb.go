// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mirror.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PacketCollectorType int32

const (
	PacketCollectorType_VENICE PacketCollectorType = 0
	PacketCollectorType_ERSPAN PacketCollectorType = 1
)

var PacketCollectorType_name = map[int32]string{
	0: "VENICE",
	1: "ERSPAN",
}
var PacketCollectorType_value = map[string]int32{
	"VENICE": 0,
	"ERSPAN": 1,
}

func (x PacketCollectorType) String() string {
	return proto.EnumName(PacketCollectorType_name, int32(x))
}
func (PacketCollectorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

// -------------------------
// ---- MirrorSessionStatus
// -------------------------
type MirrorSessionState int32

const (
	MirrorSessionState_RUNNING      MirrorSessionState = 0
	MirrorSessionState_STOPPED      MirrorSessionState = 1
	MirrorSessionState_SCHEDULED    MirrorSessionState = 2
	MirrorSessionState_READY_TO_RUN MirrorSessionState = 3
)

var MirrorSessionState_name = map[int32]string{
	0: "RUNNING",
	1: "STOPPED",
	2: "SCHEDULED",
	3: "READY_TO_RUN",
}
var MirrorSessionState_value = map[string]int32{
	"RUNNING":      0,
	"STOPPED":      1,
	"SCHEDULED":    2,
	"READY_TO_RUN": 3,
}

func (x MirrorSessionState) String() string {
	return proto.EnumName(MirrorSessionState_name, int32(x))
}
func (MirrorSessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptorMirror, []int{1} }

type MirrorSessionSpec_MirrorPacketFilter int32

const (
	MirrorSessionSpec_ALL_PKTS             MirrorSessionSpec_MirrorPacketFilter = 0
	MirrorSessionSpec_ALL_DROPS            MirrorSessionSpec_MirrorPacketFilter = 1
	MirrorSessionSpec_NETWORK_POLICY_DROP  MirrorSessionSpec_MirrorPacketFilter = 2
	MirrorSessionSpec_FIREWALL_POLICY_DROP MirrorSessionSpec_MirrorPacketFilter = 3
)

var MirrorSessionSpec_MirrorPacketFilter_name = map[int32]string{
	0: "ALL_PKTS",
	1: "ALL_DROPS",
	2: "NETWORK_POLICY_DROP",
	3: "FIREWALL_POLICY_DROP",
}
var MirrorSessionSpec_MirrorPacketFilter_value = map[string]int32{
	"ALL_PKTS":             0,
	"ALL_DROPS":            1,
	"NETWORK_POLICY_DROP":  2,
	"FIREWALL_POLICY_DROP": 3,
}

func (x MirrorSessionSpec_MirrorPacketFilter) String() string {
	return proto.EnumName(MirrorSessionSpec_MirrorPacketFilter_name, int32(x))
}
func (MirrorSessionSpec_MirrorPacketFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{5, 0}
}

// ========================================================================================
// Packet Mirroring
// ========================================================================================
// -----------------------
// ---- MirrorSessionSpec
// -----------------------
type AppProtoSelector struct {
	// PacketSize: Max size of a mirrored packet.
	// PacketSize = 0 indicates complete packet is mirrored, except when mirrored packets are sent to Venice.
	// For packets mirrored to Venice, max mirror packet size allowed is 256 B
	Ports []string `protobuf:"bytes,1,rep,name=Ports" json:"ports,omitempty"`
	// StartConditions
	Apps []string `protobuf:"bytes,2,rep,name=Apps" json:"applications,omitempty"`
}

func (m *AppProtoSelector) Reset()                    { *m = AppProtoSelector{} }
func (m *AppProtoSelector) String() string            { return proto.CompactTextString(m) }
func (*AppProtoSelector) ProtoMessage()               {}
func (*AppProtoSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{0} }

func (m *AppProtoSelector) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *AppProtoSelector) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

// MirrorStartConditions - Conditions to start mirroring
type MatchRule struct {
	Src         *MatchSelector    `protobuf:"bytes,1,opt,name=Src" json:"source,omitempty"`
	Dst         *MatchSelector    `protobuf:"bytes,2,opt,name=Dst" json:"destination,omitempty"`
	AppProtoSel *AppProtoSelector `protobuf:"bytes,3,opt,name=AppProtoSel" json:"app-protocol-selectors,omitempty"`
}

func (m *MatchRule) Reset()                    { *m = MatchRule{} }
func (m *MatchRule) String() string            { return proto.CompactTextString(m) }
func (*MatchRule) ProtoMessage()               {}
func (*MatchRule) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{1} }

func (m *MatchRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MatchRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *MatchRule) GetAppProtoSel() *AppProtoSelector {
	if m != nil {
		return m.AppProtoSel
	}
	return nil
}

// MirrorStopConditions - A MirrorSession will stop mirroring after this condition is met
type MatchSelector struct {
	// Stop after capturing specified number of packets
	Endpoints []string `protobuf:"bytes,1,rep,name=Endpoints" json:"endpoints,omitempty"`
	// Stop after specified amount of time. E.g. 1h, 20min
	// When ExpiryDuration is not specified, Default is "2h"
	IPAddresses  []string `protobuf:"bytes,2,rep,name=IPAddresses" json:"ip-addresses,omitempty"`
	MACAddresses []string `protobuf:"bytes,3,rep,name=MACAddresses" json:"mac-addresses,omitempty"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{2} }

func (m *MatchSelector) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *MatchSelector) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

func (m *MatchSelector) GetMACAddresses() []string {
	if m != nil {
		return m.MACAddresses
	}
	return nil
}

// Mirror collector - can be an external device (via ERSPAN) or Venice (internal packet capture)
type MirrorCollector struct {
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	// When collector type is Venice, collector export information is not required
	ExportCfg api1.ExportConfig `protobuf:"bytes,3,opt,name=ExportCfg" json:"export-config,omitempty"`
}

func (m *MirrorCollector) Reset()                    { *m = MirrorCollector{} }
func (m *MirrorCollector) String() string            { return proto.CompactTextString(m) }
func (*MirrorCollector) ProtoMessage()               {}
func (*MirrorCollector) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{3} }

func (m *MirrorCollector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MirrorCollector) GetExportCfg() api1.ExportConfig {
	if m != nil {
		return m.ExportCfg
	}
	return api1.ExportConfig{}
}

// Traffic Selection Rules
// Traffic can be matched using EP names or IPv4/v6 addresses/ranges/prefixes or MAC addresses
type MirrorSession struct {
	// Any one of the following match selector can be specified to select a packet from mirroring
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// Each IPAddress can be single address(10.1.1.1)/range(10.1.1.10-20)/subnet(10.1.0.0/16)
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// List of MacAddresses - "aa:bb:cc:dd:ee:ff", "00:01:02:03:04:05"
	Spec   MirrorSessionSpec   `protobuf:"bytes,3,opt,name=Spec" json:"mirror-session-spec,inline"`
	Status MirrorSessionStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *MirrorSession) Reset()                    { *m = MirrorSession{} }
func (m *MirrorSession) String() string            { return proto.CompactTextString(m) }
func (*MirrorSession) ProtoMessage()               {}
func (*MirrorSession) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{4} }

func (m *MirrorSession) GetSpec() MirrorSessionSpec {
	if m != nil {
		return m.Spec
	}
	return MirrorSessionSpec{}
}

func (m *MirrorSession) GetStatus() MirrorSessionStatus {
	if m != nil {
		return m.Status
	}
	return MirrorSessionStatus{}
}

// Application/protocol selector
type MirrorSessionSpec struct {
	// ports - Includes protocol name and port Eg ["tcp/1234", "udp"]
	PacketSize uint32 `protobuf:"varint,1,opt,name=PacketSize,proto3" json:"packet-size,omitempty"`
	// Apps - E.g. ["Redis"]
	StartConditions MirrorStartConditions `protobuf:"bytes,2,opt,name=StartConditions" json:"start-condition,inline"`
	StopConditions  MirrorStopConditions  `protobuf:"bytes,3,opt,name=StopConditions" json:"stop-condition,inline"`
	Collectors      []MirrorCollector     `protobuf:"bytes,4,rep,name=Collectors" json:"collectors,inline"`
	MatchRules      []MatchRule           `protobuf:"bytes,5,rep,name=MatchRules" json:"match-rules,inline"`
	PacketFilters   []string              `protobuf:"bytes,6,rep,name=PacketFilters" json:"packet-filters,omitempty"`
}

func (m *MirrorSessionSpec) Reset()                    { *m = MirrorSessionSpec{} }
func (m *MirrorSessionSpec) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionSpec) ProtoMessage()               {}
func (*MirrorSessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{5} }

func (m *MirrorSessionSpec) GetPacketSize() uint32 {
	if m != nil {
		return m.PacketSize
	}
	return 0
}

func (m *MirrorSessionSpec) GetStartConditions() MirrorStartConditions {
	if m != nil {
		return m.StartConditions
	}
	return MirrorStartConditions{}
}

func (m *MirrorSessionSpec) GetStopConditions() MirrorStopConditions {
	if m != nil {
		return m.StopConditions
	}
	return MirrorStopConditions{}
}

func (m *MirrorSessionSpec) GetCollectors() []MirrorCollector {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (m *MirrorSessionSpec) GetMatchRules() []MatchRule {
	if m != nil {
		return m.MatchRules
	}
	return nil
}

func (m *MirrorSessionSpec) GetPacketFilters() []string {
	if m != nil {
		return m.PacketFilters
	}
	return nil
}

// MatchRule : This is used to select packets that need to be monitored (mirrored)
type MirrorSessionStatus struct {
	// Either Src or Dst or both must be specified, both cannot be *
	// Src = * when not specified
	// When Src is specified and resides on Pesnsando SmartNIC, matching pkts to/from src will be mirrored
	State string `protobuf:"bytes,1,opt,name=State,proto3" json:"oper-state,inline"`
	// Dst = * when not specified
	// When Dst is specified and resides on Pesnsando SmartNIC, matching pkts to/from dst will be mirrored
	NICStatus []SmartNICMirrorSessionStatus `protobuf:"bytes,2,rep,name=NICStatus" json:"smart-nic-status,omitempty"`
	// App = * when not specified
	SrcPacketCaptureFileURL string `protobuf:"bytes,3,opt,name=SrcPacketCaptureFileURL,proto3" json:"src-packet-capture-url,inline)"`
	DstPacketCaptureFileURL string `protobuf:"bytes,4,opt,name=DstPacketCaptureFileURL,proto3" json:"dst-packet-capture-url,inline)"`
}

func (m *MirrorSessionStatus) Reset()                    { *m = MirrorSessionStatus{} }
func (m *MirrorSessionStatus) String() string            { return proto.CompactTextString(m) }
func (*MirrorSessionStatus) ProtoMessage()               {}
func (*MirrorSessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{6} }

func (m *MirrorSessionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MirrorSessionStatus) GetNICStatus() []SmartNICMirrorSessionStatus {
	if m != nil {
		return m.NICStatus
	}
	return nil
}

func (m *MirrorSessionStatus) GetSrcPacketCaptureFileURL() string {
	if m != nil {
		return m.SrcPacketCaptureFileURL
	}
	return ""
}

func (m *MirrorSessionStatus) GetDstPacketCaptureFileURL() string {
	if m != nil {
		return m.DstPacketCaptureFileURL
	}
	return ""
}

type MirrorStartConditions struct {
	ScheduleTime *api.Timestamp `protobuf:"bytes,1,opt,name=ScheduleTime" json:"schedule-time,omitempty"`
}

func (m *MirrorStartConditions) Reset()                    { *m = MirrorStartConditions{} }
func (m *MirrorStartConditions) String() string            { return proto.CompactTextString(m) }
func (*MirrorStartConditions) ProtoMessage()               {}
func (*MirrorStartConditions) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{7} }

func (m *MirrorStartConditions) GetScheduleTime() *api.Timestamp {
	if m != nil {
		return m.ScheduleTime
	}
	return nil
}

type MirrorStopConditions struct {
	MaxPacketCount uint32 `protobuf:"varint,1,opt,name=MaxPacketCount,proto3" json:"max-packets,omitempty"`
	ExpiryDuration string `protobuf:"bytes,2,opt,name=ExpiryDuration,proto3" json:"expiry-duration,omitempty"`
}

func (m *MirrorStopConditions) Reset()                    { *m = MirrorStopConditions{} }
func (m *MirrorStopConditions) String() string            { return proto.CompactTextString(m) }
func (*MirrorStopConditions) ProtoMessage()               {}
func (*MirrorStopConditions) Descriptor() ([]byte, []int) { return fileDescriptorMirror, []int{8} }

func (m *MirrorStopConditions) GetMaxPacketCount() uint32 {
	if m != nil {
		return m.MaxPacketCount
	}
	return 0
}

func (m *MirrorStopConditions) GetExpiryDuration() string {
	if m != nil {
		return m.ExpiryDuration
	}
	return ""
}

// ------------------
// ---- MirrorSession
// ------------------
type SmartNICMirrorSessionStatus struct {
	SmartNIC      string `protobuf:"bytes,1,opt,name=SmartNIC,proto3" json:"smart-nic,inline)"`
	NumSrcPackets uint32 `protobuf:"varint,2,opt,name=NumSrcPackets,proto3" json:"num-src-packets,inline"`
	NumDstPackets uint32 `protobuf:"varint,3,opt,name=NumDstPackets,proto3" json:"num-dst-packets,inline"`
	SessionId     uint32 `protobuf:"varint,4,opt,name=SessionId,proto3" json:"session-id,inline"`
}

func (m *SmartNICMirrorSessionStatus) Reset()         { *m = SmartNICMirrorSessionStatus{} }
func (m *SmartNICMirrorSessionStatus) String() string { return proto.CompactTextString(m) }
func (*SmartNICMirrorSessionStatus) ProtoMessage()    {}
func (*SmartNICMirrorSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorMirror, []int{9}
}

func (m *SmartNICMirrorSessionStatus) GetSmartNIC() string {
	if m != nil {
		return m.SmartNIC
	}
	return ""
}

func (m *SmartNICMirrorSessionStatus) GetNumSrcPackets() uint32 {
	if m != nil {
		return m.NumSrcPackets
	}
	return 0
}

func (m *SmartNICMirrorSessionStatus) GetNumDstPackets() uint32 {
	if m != nil {
		return m.NumDstPackets
	}
	return 0
}

func (m *SmartNICMirrorSessionStatus) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func init() {
	proto.RegisterType((*AppProtoSelector)(nil), "monitoring.AppProtoSelector")
	proto.RegisterType((*MatchRule)(nil), "monitoring.MatchRule")
	proto.RegisterType((*MatchSelector)(nil), "monitoring.MatchSelector")
	proto.RegisterType((*MirrorCollector)(nil), "monitoring.MirrorCollector")
	proto.RegisterType((*MirrorSession)(nil), "monitoring.MirrorSession")
	proto.RegisterType((*MirrorSessionSpec)(nil), "monitoring.MirrorSessionSpec")
	proto.RegisterType((*MirrorSessionStatus)(nil), "monitoring.MirrorSessionStatus")
	proto.RegisterType((*MirrorStartConditions)(nil), "monitoring.MirrorStartConditions")
	proto.RegisterType((*MirrorStopConditions)(nil), "monitoring.MirrorStopConditions")
	proto.RegisterType((*SmartNICMirrorSessionStatus)(nil), "monitoring.SmartNICMirrorSessionStatus")
	proto.RegisterEnum("monitoring.PacketCollectorType", PacketCollectorType_name, PacketCollectorType_value)
	proto.RegisterEnum("monitoring.MirrorSessionState", MirrorSessionState_name, MirrorSessionState_value)
	proto.RegisterEnum("monitoring.MirrorSessionSpec_MirrorPacketFilter", MirrorSessionSpec_MirrorPacketFilter_name, MirrorSessionSpec_MirrorPacketFilter_value)
}
func (m *AppProtoSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppProtoSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Src.Size()))
		n1, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Dst != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.Dst.Size()))
		n2, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AppProtoSel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.AppProtoSel.Size()))
		n3, err := m.AppProtoSel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MirrorCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorCollector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ExportCfg.Size()))
	n4, err := m.ExportCfg.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *MirrorSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.ObjectMeta.Size()))
	n6, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Spec.Size()))
	n7, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x22
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.Status.Size()))
	n8, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *MirrorSessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PacketSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.PacketSize))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StartConditions.Size()))
	n9, err := m.StartConditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMirror(dAtA, i, uint64(m.StopConditions.Size()))
	n10, err := m.StopConditions.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Collectors) > 0 {
		for _, msg := range m.Collectors {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MatchRules) > 0 {
		for _, msg := range m.MatchRules {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.NICStatus) > 0 {
		for _, msg := range m.NICStatus {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMirror(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcPacketCaptureFileURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.SrcPacketCaptureFileURL)))
		i += copy(dAtA[i:], m.SrcPacketCaptureFileURL)
	}
	if len(m.DstPacketCaptureFileURL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.DstPacketCaptureFileURL)))
		i += copy(dAtA[i:], m.DstPacketCaptureFileURL)
	}
	return i, nil
}

func (m *MirrorStartConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorStartConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ScheduleTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.ScheduleTime.Size()))
		n11, err := m.ScheduleTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *MirrorStopConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MirrorStopConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxPacketCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.MaxPacketCount))
	}
	if len(m.ExpiryDuration) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.ExpiryDuration)))
		i += copy(dAtA[i:], m.ExpiryDuration)
	}
	return i, nil
}

func (m *SmartNICMirrorSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartNICMirrorSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SmartNIC) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMirror(dAtA, i, uint64(len(m.SmartNIC)))
		i += copy(dAtA[i:], m.SmartNIC)
	}
	if m.NumSrcPackets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.NumSrcPackets))
	}
	if m.NumDstPackets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.NumDstPackets))
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMirror(dAtA, i, uint64(m.SessionId))
	}
	return i, nil
}

func encodeVarintMirror(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppProtoSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Ports) > 0 {
		for _, s := range m.Ports {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MatchRule) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.AppProtoSel != nil {
		l = m.AppProtoSel.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MACAddresses) > 0 {
		for _, s := range m.MACAddresses {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorCollector) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = m.ExportCfg.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSession) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMirror(uint64(l))
	return n
}

func (m *MirrorSessionSpec) Size() (n int) {
	var l int
	_ = l
	if m.PacketSize != 0 {
		n += 1 + sovMirror(uint64(m.PacketSize))
	}
	l = m.StartConditions.Size()
	n += 1 + l + sovMirror(uint64(l))
	l = m.StopConditions.Size()
	n += 1 + l + sovMirror(uint64(l))
	if len(m.Collectors) > 0 {
		for _, e := range m.Collectors {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.MatchRules) > 0 {
		for _, e := range m.MatchRules {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	if len(m.PacketFilters) > 0 {
		for _, s := range m.PacketFilters {
			l = len(s)
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	return n
}

func (m *MirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if len(m.NICStatus) > 0 {
		for _, e := range m.NICStatus {
			l = e.Size()
			n += 1 + l + sovMirror(uint64(l))
		}
	}
	l = len(m.SrcPacketCaptureFileURL)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	l = len(m.DstPacketCaptureFileURL)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorStartConditions) Size() (n int) {
	var l int
	_ = l
	if m.ScheduleTime != nil {
		l = m.ScheduleTime.Size()
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *MirrorStopConditions) Size() (n int) {
	var l int
	_ = l
	if m.MaxPacketCount != 0 {
		n += 1 + sovMirror(uint64(m.MaxPacketCount))
	}
	l = len(m.ExpiryDuration)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	return n
}

func (m *SmartNICMirrorSessionStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.SmartNIC)
	if l > 0 {
		n += 1 + l + sovMirror(uint64(l))
	}
	if m.NumSrcPackets != 0 {
		n += 1 + sovMirror(uint64(m.NumSrcPackets))
	}
	if m.NumDstPackets != 0 {
		n += 1 + sovMirror(uint64(m.NumDstPackets))
	}
	if m.SessionId != 0 {
		n += 1 + sovMirror(uint64(m.SessionId))
	}
	return n
}

func sovMirror(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMirror(x uint64) (n int) {
	return sovMirror(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppProtoSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppProtoSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppProtoSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppProtoSel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppProtoSel == nil {
				m.AppProtoSel = &AppProtoSelector{}
			}
			if err := m.AppProtoSel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddresses = append(m.IPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MACAddresses = append(m.MACAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExportCfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketSize", wireType)
			}
			m.PacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopConditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectors = append(m.Collectors, MirrorCollector{})
			if err := m.Collectors[len(m.Collectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchRules = append(m.MatchRules, MatchRule{})
			if err := m.MatchRules[len(m.MatchRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketFilters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PacketFilters = append(m.PacketFilters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NICStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NICStatus = append(m.NICStatus, SmartNICMirrorSessionStatus{})
			if err := m.NICStatus[len(m.NICStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPacketCaptureFileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPacketCaptureFileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPacketCaptureFileURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPacketCaptureFileURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorStartConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorStartConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorStartConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleTime == nil {
				m.ScheduleTime = &api.Timestamp{}
			}
			if err := m.ScheduleTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MirrorStopConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MirrorStopConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MirrorStopConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPacketCount", wireType)
			}
			m.MaxPacketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPacketCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiryDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartNICMirrorSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartNICMirrorSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartNICMirrorSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNIC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMirror
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartNIC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSrcPackets", wireType)
			}
			m.NumSrcPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSrcPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDstPackets", wireType)
			}
			m.NumDstPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDstPackets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMirror(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMirror
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMirror(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMirror
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMirror
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMirror
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMirror
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMirror(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMirror = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMirror   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mirror.proto", fileDescriptorMirror) }

var fileDescriptorMirror = []byte{
	// 1362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x1a, 0x35, 0x2d, 0xdb, 0x89, 0xc6, 0x96, 0x2d, 0x8f, 0xe3, 0x58, 0xb2, 0x1d, 0xd3, 0x57, 0xb8,
	0x17, 0x71, 0x82, 0x50, 0xba, 0x37, 0xb9, 0x5d, 0xa4, 0x28, 0xd0, 0x8a, 0x12, 0xdd, 0xaa, 0xb1,
	0x25, 0x45, 0x94, 0x13, 0x04, 0x28, 0x60, 0xd0, 0xe4, 0x58, 0x9e, 0x46, 0xfc, 0x01, 0x67, 0xd8,
	0xda, 0x29, 0xba, 0x6c, 0xd0, 0xbe, 0x45, 0xd7, 0xee, 0x73, 0x14, 0xc8, 0x32, 0xe8, 0x03, 0x10,
	0x45, 0x96, 0x7a, 0x86, 0x2e, 0x8a, 0x19, 0x0e, 0xa9, 0x91, 0x2d, 0xa7, 0x3b, 0x72, 0xbe, 0x73,
	0xce, 0x7c, 0xff, 0x24, 0x58, 0x72, 0x71, 0x18, 0xfa, 0x61, 0x35, 0x08, 0x7d, 0xea, 0x43, 0xe0,
	0xfa, 0x1e, 0xa6, 0x7e, 0x88, 0xbd, 0xc1, 0xe6, 0xf6, 0xc0, 0xf7, 0x07, 0x43, 0x54, 0xb3, 0x02,
	0x5c, 0xb3, 0x3c, 0xcf, 0xa7, 0x16, 0xc5, 0xbe, 0x47, 0x12, 0xe4, 0xa6, 0x31, 0xc0, 0xf4, 0x2c,
	0x3a, 0xa9, 0xda, 0xbe, 0x5b, 0x0b, 0x90, 0x47, 0x2c, 0xcf, 0xf1, 0x6b, 0xe4, 0xfb, 0xda, 0x77,
	0xc8, 0xc3, 0x36, 0xaa, 0x45, 0x14, 0x0f, 0x09, 0xa3, 0x0e, 0x90, 0x27, 0xb3, 0x6b, 0xd8, 0xb3,
	0x87, 0x91, 0x83, 0x52, 0x19, 0x4d, 0x92, 0x19, 0xf8, 0x03, 0xbf, 0xc6, 0x8f, 0x4f, 0xa2, 0x53,
	0xfe, 0xc6, 0x5f, 0xf8, 0x93, 0x80, 0xff, 0xe7, 0x86, 0x5b, 0x99, 0x8f, 0x2e, 0xa2, 0x96, 0x80,
	0xdd, 0xff, 0x08, 0x0c, 0x9d, 0x07, 0x7e, 0x48, 0x13, 0x60, 0xc5, 0x05, 0xc5, 0x7a, 0x10, 0x74,
	0xd9, 0xb3, 0x89, 0x86, 0xc8, 0xa6, 0x7e, 0x08, 0x1f, 0x80, 0xf9, 0xae, 0x1f, 0x52, 0x52, 0x52,
	0x76, 0x73, 0x7b, 0x79, 0x7d, 0x6d, 0x14, 0xab, 0x2b, 0x8c, 0x42, 0x1e, 0xf9, 0x2e, 0xa6, 0xc8,
	0x0d, 0xe8, 0x45, 0x2f, 0x41, 0xc0, 0x2a, 0x98, 0xab, 0x07, 0x01, 0x29, 0xcd, 0x72, 0xe4, 0xe6,
	0x28, 0x56, 0xef, 0x5a, 0x41, 0x30, 0xc4, 0x76, 0x12, 0xac, 0x44, 0xe0, 0xb8, 0xca, 0x5f, 0x0a,
	0xc8, 0x1f, 0x5a, 0xd4, 0x3e, 0xeb, 0x45, 0x43, 0x04, 0xeb, 0x20, 0x67, 0x86, 0x76, 0x49, 0xd9,
	0x55, 0xf6, 0x16, 0x1f, 0x97, 0xab, 0xe3, 0xd4, 0x57, 0x39, 0x26, 0x75, 0x48, 0xbf, 0x33, 0x8a,
	0xd5, 0x22, 0xf1, 0xa3, 0xd0, 0x46, 0x92, 0x22, 0xe3, 0xc2, 0x7d, 0x90, 0x6b, 0x12, 0x5a, 0x9a,
	0xfd, 0x27, 0x89, 0xf2, 0x28, 0x56, 0xd7, 0x1d, 0x44, 0x28, 0xf6, 0xb8, 0x6b, 0xb2, 0x4e, 0x93,
	0x50, 0xe8, 0x80, 0x45, 0x29, 0x0f, 0xa5, 0x1c, 0xd7, 0xdb, 0x96, 0xf5, 0xae, 0xa6, 0x49, 0xff,
	0xf7, 0x28, 0x56, 0x77, 0xad, 0x20, 0xd0, 0x78, 0x26, 0x6d, 0x7f, 0xa8, 0x11, 0x61, 0x92, 0xe3,
	0x96, 0x65, 0x2b, 0xbf, 0x2b, 0xa0, 0x30, 0xe1, 0x17, 0xfc, 0x04, 0xe4, 0x0d, 0xcf, 0x09, 0x7c,
	0xec, 0x65, 0xf9, 0xde, 0x18, 0xc5, 0xea, 0x1a, 0x4a, 0x0f, 0x25, 0xa9, 0x31, 0x12, 0x7e, 0x06,
	0x16, 0x5b, 0xdd, 0xba, 0xe3, 0x84, 0x88, 0x10, 0x34, 0x91, 0x7e, 0x1c, 0x68, 0x56, 0x7a, 0x2e,
	0xbb, 0x21, 0xc1, 0xe1, 0xe7, 0x60, 0xe9, 0xb0, 0xde, 0x18, 0xd3, 0x73, 0x9c, 0xbe, 0x35, 0x8a,
	0xd5, 0x0d, 0xd7, 0xb2, 0xa7, 0xf2, 0x27, 0x08, 0x95, 0xdf, 0x14, 0xb0, 0x72, 0xc8, 0xc7, 0xa6,
	0xe1, 0x0f, 0x45, 0x24, 0xfb, 0x60, 0xae, 0x7f, 0x11, 0x20, 0x5e, 0xcd, 0xbc, 0xfe, 0xf8, 0xf2,
	0x6d, 0x79, 0xdb, 0xa4, 0xa1, 0xe1, 0x45, 0xee, 0x5e, 0xd7, 0xb2, 0x5f, 0x23, 0x9a, 0x41, 0x19,
	0xec, 0xc1, 0x28, 0x56, 0x97, 0xe9, 0x45, 0x20, 0x17, 0x94, 0xf3, 0x61, 0x17, 0xe4, 0x0d, 0xde,
	0xa1, 0x8d, 0xd3, 0x81, 0xa8, 0xc3, 0x6a, 0xd5, 0x0a, 0x70, 0x55, 0x9c, 0xfa, 0xde, 0x29, 0x1e,
	0xe8, 0xea, 0xbb, 0x58, 0x9d, 0x61, 0x0e, 0x27, 0xdd, 0xac, 0xd9, 0xfc, 0x78, 0x22, 0x59, 0xa9,
	0x48, 0xe5, 0xdd, 0x2c, 0x28, 0x24, 0xde, 0x9a, 0x88, 0x10, 0xec, 0x7b, 0xf0, 0xbf, 0x40, 0xe9,
	0x8b, 0xb6, 0x2b, 0x70, 0x6d, 0x76, 0xf3, 0x21, 0xa2, 0x96, 0xbe, 0xc6, 0x74, 0xdf, 0xc7, 0xaa,
	0x32, 0x8a, 0xd5, 0x5b, 0x8f, 0xb0, 0x37, 0xc4, 0x1e, 0xea, 0x29, 0x7d, 0xf8, 0x14, 0x28, 0x1d,
	0xd1, 0x65, 0x2b, 0x9c, 0xd1, 0x39, 0xf9, 0x16, 0xd9, 0x94, 0x73, 0x36, 0x25, 0xce, 0x32, 0x1b,
	0x42, 0xc9, 0x0d, 0xa5, 0x03, 0x8f, 0xc0, 0x9c, 0x19, 0x20, 0x5b, 0xc4, 0x72, 0x6f, 0xa2, 0x47,
	0x65, 0xaf, 0x18, 0x48, 0xaf, 0x88, 0xb8, 0x36, 0x93, 0xad, 0xa4, 0x91, 0xc4, 0xa6, 0x91, 0x00,
	0xd9, 0xa9, 0x3b, 0x5c, 0x0e, 0x3e, 0x07, 0x0b, 0x26, 0xb5, 0x68, 0x44, 0x4a, 0x73, 0x5c, 0x58,
	0xbd, 0x59, 0x98, 0xc3, 0xf4, 0x92, 0x90, 0x2e, 0x12, 0xfe, 0x2e, 0x39, 0x29, 0x84, 0x3e, 0xdd,
	0xfd, 0xe3, 0xa7, 0xf2, 0x36, 0x58, 0xac, 0xfd, 0xd0, 0xa9, 0xf6, 0x91, 0x67, 0x79, 0xf4, 0x47,
	0x38, 0x99, 0xb8, 0xca, 0xe5, 0x3c, 0x58, 0xbd, 0xe6, 0x34, 0x7c, 0x0a, 0x40, 0x52, 0x62, 0x13,
	0xbf, 0x49, 0x1a, 0xa0, 0x90, 0x0c, 0x5c, 0xc0, 0x4f, 0x35, 0x82, 0xdf, 0xc8, 0x75, 0x96, 0xc0,
	0xf0, 0x35, 0x58, 0x31, 0xa9, 0xc5, 0xcb, 0xea, 0x60, 0xbe, 0x33, 0x44, 0x96, 0xff, 0x35, 0x25,
	0x9c, 0x49, 0xa0, 0xbe, 0x23, 0x02, 0xba, 0x4b, 0x98, 0x81, 0xb5, 0x40, 0x62, 0x49, 0xf3, 0x74,
	0x55, 0x19, 0x0e, 0xc0, 0xb2, 0x49, 0xfd, 0x40, 0xba, 0x2b, 0xa9, 0xc9, 0xee, 0xb4, 0xbb, 0x64,
	0x9c, 0x7e, 0x4f, 0x5c, 0xb5, 0x4e, 0xa8, 0x1f, 0x5c, 0xbf, 0xe9, 0x8a, 0x2c, 0x7c, 0x01, 0x40,
	0xd6, 0xed, 0xac, 0x3e, 0xb9, 0xbd, 0xc5, 0xc7, 0x5b, 0xd7, 0x2f, 0xc9, 0x30, 0x7a, 0x59, 0xe8,
	0xaf, 0xda, 0x19, 0x2d, 0xd5, 0x96, 0x94, 0xe0, 0x73, 0x00, 0xb2, 0xed, 0x49, 0x4a, 0xf3, 0x5c,
	0x77, 0xfd, 0xda, 0xd2, 0x63, 0xd6, 0xa4, 0x29, 0x47, 0xb1, 0x0a, 0x5d, 0x76, 0xa4, 0x85, 0x8c,
	0x91, 0x49, 0x8e, 0x45, 0x20, 0x01, 0x85, 0xa4, 0x1c, 0xfb, 0x78, 0x48, 0x51, 0x48, 0x4a, 0x0b,
	0x7c, 0x19, 0x1c, 0x5e, 0xbe, 0x2d, 0x6b, 0xe9, 0xfc, 0x5e, 0xab, 0xb8, 0xf0, 0x5f, 0x26, 0xb2,
	0x81, 0x2e, 0x89, 0x7a, 0x9f, 0x26, 0x52, 0x52, 0xc9, 0x27, 0xef, 0xa8, 0x38, 0x00, 0x5e, 0x57,
	0x80, 0x4b, 0xe0, 0x76, 0xfd, 0xe0, 0xe0, 0xb8, 0xfb, 0xac, 0x6f, 0x16, 0x67, 0x60, 0x01, 0xe4,
	0xd9, 0x5b, 0xb3, 0xd7, 0xe9, 0x9a, 0x45, 0x05, 0x6e, 0x80, 0xb5, 0xb6, 0xd1, 0x7f, 0xd9, 0xe9,
	0x3d, 0x3b, 0xee, 0x76, 0x0e, 0x5a, 0x8d, 0x57, 0xdc, 0x52, 0x9c, 0x85, 0x25, 0x70, 0x67, 0xbf,
	0xd5, 0x33, 0x5e, 0x72, 0xaa, 0x64, 0xc9, 0x55, 0x7e, 0xce, 0x81, 0xb5, 0x29, 0x83, 0x00, 0xbf,
	0x06, 0xf3, 0xec, 0x29, 0x5d, 0x55, 0xff, 0xbf, 0x7c, 0x5b, 0xde, 0x9a, 0x1e, 0x2a, 0x43, 0xb1,
	0xc0, 0x56, 0xfd, 0x00, 0x85, 0x1a, 0x9b, 0x1b, 0x94, 0xe6, 0x30, 0x91, 0x80, 0x18, 0xe4, 0xdb,
	0xad, 0x86, 0x18, 0xc4, 0x59, 0x5e, 0x90, 0xfb, 0x72, 0x41, 0x4c, 0xd7, 0x0a, 0x69, 0xbb, 0xd5,
	0x98, 0x36, 0x90, 0xd9, 0xac, 0x13, 0x06, 0xd2, 0x3c, 0x6c, 0x6b, 0xd7, 0x46, 0x73, 0xac, 0x0e,
	0xbf, 0x01, 0x1b, 0x66, 0x68, 0x8b, 0x5d, 0x6a, 0x05, 0x34, 0x0a, 0xd1, 0x3e, 0x1e, 0xa2, 0xa3,
	0xde, 0x01, 0x6f, 0xe3, 0xbc, 0x5e, 0x19, 0xc5, 0xea, 0x0e, 0x09, 0x6d, 0x4d, 0x94, 0xc1, 0x4e,
	0x40, 0x5a, 0x14, 0x0e, 0x85, 0xd7, 0x0f, 0x7a, 0x37, 0x49, 0x30, 0xf5, 0x26, 0xa1, 0x53, 0xd5,
	0xe7, 0xc6, 0xea, 0x0e, 0xa1, 0x1f, 0x55, 0xbf, 0x41, 0xa2, 0x72, 0x06, 0xd6, 0xa7, 0xce, 0x30,
	0xec, 0x80, 0x25, 0xd3, 0x3e, 0x43, 0x4e, 0x34, 0x44, 0x7d, 0xec, 0x22, 0xb1, 0x94, 0x97, 0x93,
	0xa5, 0x8c, 0x5d, 0x44, 0xa8, 0xe5, 0x06, 0xc9, 0xa7, 0x89, 0x08, 0x9c, 0x46, 0xb1, 0x2b, 0xaf,
	0x93, 0x09, 0x81, 0xca, 0xaf, 0x0a, 0xb8, 0x33, 0x6d, 0x84, 0x61, 0x1d, 0x2c, 0x1f, 0x5a, 0xe7,
	0xe9, 0xa7, 0x28, 0xf2, 0xa8, 0xbc, 0xa8, 0x5c, 0xeb, 0x5c, 0xc4, 0x25, 0x27, 0xff, 0x0a, 0x01,
	0x1a, 0x60, 0xd9, 0x38, 0x0f, 0x70, 0x78, 0xd1, 0x8c, 0x42, 0xfe, 0x17, 0xc1, 0x77, 0x55, 0x5e,
	0xbf, 0x37, 0x8a, 0xd5, 0x32, 0xe2, 0x16, 0xcd, 0x11, 0x26, 0x59, 0x66, 0x92, 0x54, 0xf9, 0x65,
	0x16, 0x6c, 0x7d, 0xa4, 0x2f, 0xe0, 0xff, 0xc0, 0xed, 0xd4, 0x2c, 0x5a, 0x74, 0x9d, 0xf5, 0x60,
	0xd6, 0x25, 0x59, 0xba, 0x33, 0x18, 0xfc, 0x02, 0x14, 0xda, 0x91, 0x9b, 0xd5, 0x36, 0x59, 0xa2,
	0x85, 0xe4, 0x8f, 0xc0, 0x8b, 0x5c, 0x6d, 0xdc, 0x15, 0xd9, 0x12, 0x98, 0x24, 0x08, 0x85, 0xac,
	0x7e, 0xc9, 0x6a, 0x94, 0x14, 0xc6, 0x95, 0x9f, 0x50, 0x18, 0x13, 0xe0, 0x13, 0x90, 0x17, 0x71,
	0xb4, 0x1c, 0xde, 0x33, 0x05, 0xe1, 0xb7, 0xf8, 0x84, 0x61, 0x27, 0x25, 0x8e, 0x71, 0x0f, 0x35,
	0xb0, 0x36, 0xe5, 0xef, 0x00, 0x02, 0xb0, 0xf0, 0xc2, 0x68, 0xb7, 0x1a, 0x46, 0x71, 0x86, 0x3d,
	0x1b, 0x3d, 0xb3, 0x5b, 0x6f, 0x17, 0x95, 0x87, 0x9d, 0x74, 0x71, 0xc8, 0x13, 0x0a, 0x17, 0xc1,
	0xad, 0xde, 0x51, 0xbb, 0xdd, 0x6a, 0x7f, 0x59, 0x9c, 0x61, 0x2f, 0x66, 0xbf, 0xd3, 0xed, 0x1a,
	0xcd, 0xa2, 0xc2, 0x96, 0x88, 0xd9, 0xf8, 0xca, 0x68, 0x1e, 0x1d, 0x18, 0xcd, 0xe2, 0x2c, 0x2c,
	0x82, 0xa5, 0x9e, 0x51, 0x6f, 0xbe, 0x3a, 0xee, 0x77, 0x8e, 0x7b, 0x47, 0xed, 0x62, 0x4e, 0x5f,
	0x7a, 0xf7, 0x61, 0x47, 0x79, 0xff, 0x61, 0x47, 0xf9, 0xf3, 0xc3, 0x8e, 0xd2, 0x55, 0x4e, 0x16,
	0xf8, 0xcf, 0xdc, 0x93, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xef, 0xc0, 0x8b, 0xd7, 0x16, 0x0c,
	0x00, 0x00,
}
