// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: archive.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPArchiveQuery(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPArchiveQuery(_ context.Context, r *http.Request) (interface{}, error) {
	var req ArchiveQuery
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqArchiveQuery encodes GRPC request
func EncodeGrpcReqArchiveQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveQuery)
	return req, nil
}

// DecodeGrpcReqArchiveQuery decodes GRPC request
func DecodeGrpcReqArchiveQuery(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveQuery)
	return req, nil
}

// EncodeGrpcRespArchiveQuery encodes GRC response
func EncodeGrpcRespArchiveQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespArchiveQuery decodes GRPC response
func DecodeGrpcRespArchiveQuery(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPArchiveRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPArchiveRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req ArchiveRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqArchiveRequest encodes GRPC request
func EncodeGrpcReqArchiveRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequest)
	return req, nil
}

// DecodeGrpcReqArchiveRequest decodes GRPC request
func DecodeGrpcReqArchiveRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequest)
	return req, nil
}

// EncodeGrpcRespArchiveRequest encodes GRC response
func EncodeGrpcRespArchiveRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespArchiveRequest decodes GRPC response
func DecodeGrpcRespArchiveRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPArchiveRequestSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPArchiveRequestSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req ArchiveRequestSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqArchiveRequestSpec encodes GRPC request
func EncodeGrpcReqArchiveRequestSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequestSpec)
	return req, nil
}

// DecodeGrpcReqArchiveRequestSpec decodes GRPC request
func DecodeGrpcReqArchiveRequestSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequestSpec)
	return req, nil
}

// EncodeGrpcRespArchiveRequestSpec encodes GRC response
func EncodeGrpcRespArchiveRequestSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespArchiveRequestSpec decodes GRPC response
func DecodeGrpcRespArchiveRequestSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPArchiveRequestStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPArchiveRequestStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req ArchiveRequestStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqArchiveRequestStatus encodes GRPC request
func EncodeGrpcReqArchiveRequestStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequestStatus)
	return req, nil
}

// DecodeGrpcReqArchiveRequestStatus decodes GRPC request
func DecodeGrpcReqArchiveRequestStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ArchiveRequestStatus)
	return req, nil
}

// EncodeGrpcRespArchiveRequestStatus encodes GRC response
func EncodeGrpcRespArchiveRequestStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespArchiveRequestStatus decodes GRPC response
func DecodeGrpcRespArchiveRequestStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPCancelArchiveRequest(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPCancelArchiveRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req CancelArchiveRequest
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqCancelArchiveRequest encodes GRPC request
func EncodeGrpcReqCancelArchiveRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CancelArchiveRequest)
	return req, nil
}

// DecodeGrpcReqCancelArchiveRequest decodes GRPC request
func DecodeGrpcReqCancelArchiveRequest(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*CancelArchiveRequest)
	return req, nil
}

// EncodeGrpcRespCancelArchiveRequest encodes GRC response
func EncodeGrpcRespCancelArchiveRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespCancelArchiveRequest decodes GRPC response
func DecodeGrpcRespCancelArchiveRequest(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
