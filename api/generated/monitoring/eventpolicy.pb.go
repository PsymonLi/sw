// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventpolicy.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"
import fields "github.com/pensando/sw/api/fields"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ------------------------------- Event Policy --------------------------------
type MonitoringExportFormat int32

const (
	// ui-hint: BSD
	MonitoringExportFormat_SYSLOG_BSD MonitoringExportFormat = 0
	// ui-hint: RFC5424
	MonitoringExportFormat_SYSLOG_RFC5424 MonitoringExportFormat = 1
)

var MonitoringExportFormat_name = map[int32]string{
	0: "SYSLOG_BSD",
	1: "SYSLOG_RFC5424",
}
var MonitoringExportFormat_value = map[string]int32{
	"SYSLOG_BSD":     0,
	"SYSLOG_RFC5424": 1,
}

func (x MonitoringExportFormat) String() string {
	return proto.EnumName(MonitoringExportFormat_name, int32(x))
}
func (MonitoringExportFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEventpolicy, []int{0}
}

// Event export configurations
type EventExport struct {
	// event export format, SYSLOG_BSD default
	Format string `protobuf:"bytes,1,opt,name=Format,json=format, omitempty,proto3" json:"format, omitempty"`
	// export events matched by the selector
	Selector *fields.Selector `protobuf:"bytes,2,opt,name=Selector,json=selector,omitempty" json:"selector,omitempty"`
	// export target ip/port/protocol
	Target *api1.ExportConfig `protobuf:"bytes,3,opt,name=Target,json=target,omitempty" json:"target,omitempty"`
	// syslog specific configuration
	SyslogConfig *api1.SyslogExportConfig `protobuf:"bytes,4,opt,name=SyslogConfig,json=syslog-config,omitempty" json:"syslog-config,omitempty"`
}

func (m *EventExport) Reset()                    { *m = EventExport{} }
func (m *EventExport) String() string            { return proto.CompactTextString(m) }
func (*EventExport) ProtoMessage()               {}
func (*EventExport) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{0} }

func (m *EventExport) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *EventExport) GetSelector() *fields.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *EventExport) GetTarget() *api1.ExportConfig {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *EventExport) GetSyslogConfig() *api1.SyslogExportConfig {
	if m != nil {
		return m.SyslogConfig
	}
	return nil
}

// Event Policy represents the policy definition for Events.
// Event Client module will be consumer of this policy.
type EventPolicy struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Spec contains the configuration of an event policy.
	Spec EventPolicySpec `protobuf:"bytes,3,opt,name=Spec,json=spec,omitempty" json:"spec,omitempty"`
	// Status contains the current state of an event policy.
	Status EventPolicyStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *EventPolicy) Reset()                    { *m = EventPolicy{} }
func (m *EventPolicy) String() string            { return proto.CompactTextString(m) }
func (*EventPolicy) ProtoMessage()               {}
func (*EventPolicy) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{1} }

func (m *EventPolicy) GetSpec() EventPolicySpec {
	if m != nil {
		return m.Spec
	}
	return EventPolicySpec{}
}

func (m *EventPolicy) GetStatus() EventPolicyStatus {
	if m != nil {
		return m.Status
	}
	return EventPolicyStatus{}
}

// EventPolicySpec is the specification of an Event Policy.
type EventPolicySpec struct {
	//
	Exports []*EventExport `protobuf:"bytes,1,rep,name=Exports,json=exports,omitempty" json:"exports,omitempty"`
}

func (m *EventPolicySpec) Reset()                    { *m = EventPolicySpec{} }
func (m *EventPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*EventPolicySpec) ProtoMessage()               {}
func (*EventPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{2} }

func (m *EventPolicySpec) GetExports() []*EventExport {
	if m != nil {
		return m.Exports
	}
	return nil
}

// EventPolicyStatus
type EventPolicyStatus struct {
}

func (m *EventPolicyStatus) Reset()                    { *m = EventPolicyStatus{} }
func (m *EventPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*EventPolicyStatus) ProtoMessage()               {}
func (*EventPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorEventpolicy, []int{3} }

func init() {
	proto.RegisterType((*EventExport)(nil), "monitoring.EventExport")
	proto.RegisterType((*EventPolicy)(nil), "monitoring.EventPolicy")
	proto.RegisterType((*EventPolicySpec)(nil), "monitoring.EventPolicySpec")
	proto.RegisterType((*EventPolicyStatus)(nil), "monitoring.EventPolicyStatus")
	proto.RegisterEnum("monitoring.MonitoringExportFormat", MonitoringExportFormat_name, MonitoringExportFormat_value)
}
func (m *EventExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventExport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Format) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if m.Selector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(m.Selector.Size()))
		n1, err := m.Selector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Target != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(m.Target.Size()))
		n2, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SyslogConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventpolicy(dAtA, i, uint64(m.SyslogConfig.Size()))
		n3, err := m.SyslogConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *EventPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n5, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.Spec.Size()))
	n6, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintEventpolicy(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *EventPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Exports) > 0 {
		for _, msg := range m.Exports {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEventpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintEventpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventExport) Size() (n int) {
	var l int
	_ = l
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovEventpolicy(uint64(l))
	}
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovEventpolicy(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovEventpolicy(uint64(l))
	}
	if m.SyslogConfig != nil {
		l = m.SyslogConfig.Size()
		n += 1 + l + sovEventpolicy(uint64(l))
	}
	return n
}

func (m *EventPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEventpolicy(uint64(l))
	return n
}

func (m *EventPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Exports) > 0 {
		for _, e := range m.Exports {
			l = e.Size()
			n += 1 + l + sovEventpolicy(uint64(l))
		}
	}
	return n
}

func (m *EventPolicyStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovEventpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEventpolicy(x uint64) (n int) {
	return sovEventpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &fields.Selector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &api1.ExportConfig{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyslogConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyslogConfig == nil {
				m.SyslogConfig = &api1.SyslogExportConfig{}
			}
			if err := m.SyslogConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exports = append(m.Exports, &EventExport{})
			if err := m.Exports[len(m.Exports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEventpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEventpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("eventpolicy.proto", fileDescriptorEventpolicy) }

var fileDescriptorEventpolicy = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x9d, 0xb7, 0xa9, 0x03, 0x77, 0x6c, 0xad, 0x07, 0x5b, 0xb6, 0xc1, 0x52, 0x55, 0x42, 0x0c,
	0xb4, 0x25, 0xa8, 0x0c, 0x84, 0x10, 0xa7, 0x8c, 0x16, 0x21, 0x31, 0x3a, 0x9a, 0x5e, 0x26, 0x0e,
	0x28, 0x4d, 0xdd, 0x60, 0x94, 0xd8, 0x51, 0xec, 0x0c, 0x2a, 0xc4, 0x11, 0x7e, 0x0c, 0xbf, 0x64,
	0xc7, 0x89, 0x33, 0x8a, 0x50, 0x8f, 0xf9, 0x15, 0x28, 0x76, 0xca, 0xb2, 0x76, 0xdd, 0xcd, 0xdf,
	0xf3, 0xfb, 0x9e, 0x9f, 0x9f, 0xfd, 0xc1, 0x2a, 0x3e, 0xc5, 0x54, 0x84, 0xcc, 0x27, 0xee, 0xd0,
	0x08, 0x23, 0x26, 0x18, 0x82, 0x01, 0xa3, 0x44, 0xb0, 0x88, 0x50, 0x6f, 0xeb, 0xae, 0xc7, 0x98,
	0xe7, 0x63, 0xd3, 0x09, 0x89, 0xe9, 0x50, 0xca, 0x84, 0x23, 0x08, 0xa3, 0x5c, 0x31, 0xb7, 0x9a,
	0x1e, 0x11, 0x9f, 0xe2, 0x9e, 0xe1, 0xb2, 0xc0, 0x0c, 0x31, 0xe5, 0x0e, 0xed, 0x33, 0x93, 0x7f,
	0x31, 0x4f, 0x31, 0x25, 0x2e, 0x36, 0x63, 0x41, 0x7c, 0x9e, 0xb5, 0x7a, 0x98, 0x16, 0xbb, 0x4d,
	0x42, 0x5d, 0x3f, 0xee, 0xe3, 0xb1, 0xcc, 0x7e, 0x41, 0xc6, 0x63, 0x1e, 0x33, 0x25, 0xdc, 0x8b,
	0x07, 0xb2, 0x92, 0x85, 0x5c, 0xe5, 0xf4, 0xfb, 0x33, 0x4e, 0xcd, 0x3c, 0x06, 0x58, 0x38, 0x39,
	0xed, 0xc1, 0x35, 0x34, 0xfc, 0x35, 0x64, 0x91, 0xc8, 0x89, 0x8f, 0xaf, 0x21, 0x0e, 0x08, 0xf6,
	0xfb, 0xdc, 0xe4, 0xd8, 0xc7, 0xae, 0x60, 0x91, 0xea, 0xa8, 0xa7, 0xf3, 0xb0, 0xdc, 0xcc, 0x72,
	0x6b, 0x4a, 0x1d, 0xf4, 0x01, 0x96, 0x5a, 0x2c, 0x0a, 0x1c, 0xa1, 0x81, 0x1a, 0xd8, 0xbd, 0x69,
	0x3d, 0xff, 0xf5, 0x73, 0x53, 0xb7, 0x45, 0xd4, 0xa4, 0x71, 0xb0, 0x7b, 0xf4, 0x3f, 0x4d, 0xc5,
	0x56, 0xcc, 0x87, 0x69, 0xa2, 0x57, 0x07, 0x72, 0xb9, 0x57, 0x63, 0x01, 0x11, 0x38, 0x08, 0xc5,
	0xb0, 0x33, 0x0d, 0xa1, 0x77, 0xf0, 0x86, 0x9d, 0x1f, 0xaf, 0xcd, 0xd7, 0xc0, 0x6e, 0xb9, 0x51,
	0x31, 0x94, 0x2d, 0x63, 0x8c, 0x5b, 0xeb, 0x69, 0xa2, 0xa3, 0xb1, 0xc9, 0xbd, 0x0b, 0xb9, 0x2b,
	0x30, 0xf4, 0x06, 0x96, 0xba, 0x4e, 0xe4, 0x61, 0xa1, 0x2d, 0x48, 0xb5, 0xaa, 0xe1, 0x84, 0xc4,
	0x50, 0xde, 0x0e, 0x19, 0x1d, 0x10, 0xcf, 0xba, 0x9d, 0x26, 0x7a, 0x45, 0x48, 0x52, 0x41, 0x6c,
	0x0a, 0x41, 0x2e, 0x5c, 0xb6, 0x87, 0xdc, 0x67, 0x9e, 0xea, 0xd3, 0x16, 0xa5, 0xe0, 0x86, 0x14,
	0x54, 0x1b, 0x97, 0x64, 0xb7, 0xd3, 0x44, 0xdf, 0xe0, 0x12, 0xdf, 0x77, 0x25, 0x54, 0x50, 0x9f,
	0xb5, 0x51, 0xff, 0x33, 0x0e, 0xfb, 0x58, 0x7e, 0x52, 0xf4, 0x0c, 0x82, 0xae, 0xcc, 0xb9, 0xdc,
	0xb8, 0x25, 0x4f, 0xea, 0x0e, 0x43, 0x7c, 0x84, 0x85, 0x63, 0xad, 0x9d, 0x25, 0xfa, 0xdc, 0x79,
	0xa2, 0x83, 0x34, 0xd1, 0x97, 0xf6, 0x08, 0xf5, 0x09, 0xc5, 0x9d, 0xf1, 0x02, 0xb5, 0x20, 0x68,
	0xe7, 0x01, 0xae, 0xca, 0xbe, 0x76, 0xef, 0x33, 0x76, 0x85, 0xec, 0xdc, 0x2a, 0x74, 0xae, 0x64,
	0x7f, 0xa8, 0x60, 0x6c, 0xa2, 0x46, 0xef, 0xe1, 0xa2, 0x1d, 0x62, 0x37, 0x4f, 0x6f, 0xdb, 0xb8,
	0x98, 0x16, 0xa3, 0x60, 0x33, 0xa3, 0x58, 0xeb, 0x99, 0x6c, 0x26, 0xc9, 0x43, 0xec, 0x16, 0x25,
	0x2f, 0xd7, 0xe8, 0x04, 0x96, 0x6c, 0xe1, 0x88, 0x98, 0xe7, 0x09, 0xde, 0x9b, 0x25, 0x2a, 0x49,
	0x96, 0x96, 0xcb, 0x56, 0xb8, 0xac, 0x8b, 0x4f, 0x34, 0x89, 0xbc, 0xd0, 0x7f, 0xff, 0xd8, 0xdc,
	0x86, 0x65, 0xf3, 0x5b, 0xdb, 0xe8, 0x62, 0xea, 0x50, 0xf1, 0x1d, 0x2d, 0xcb, 0x91, 0xdf, 0x57,
	0x33, 0x5f, 0xc7, 0x70, 0x75, 0xc2, 0x36, 0xea, 0xc0, 0x25, 0xf5, 0x6e, 0x5c, 0x03, 0xb5, 0x05,
	0xf9, 0xa2, 0x93, 0x7e, 0xd4, 0xbe, 0x75, 0x27, 0xfb, 0xc5, 0x6a, 0x98, 0x8a, 0x36, 0xa6, 0xa1,
	0xfa, 0x1a, 0xac, 0x4e, 0x5d, 0xe4, 0xd1, 0x4b, 0xb8, 0x7e, 0xf5, 0x74, 0xa0, 0x15, 0x08, 0xed,
	0x13, 0xfb, 0x6d, 0xfb, 0xf5, 0x47, 0xcb, 0x7e, 0x55, 0x99, 0x43, 0x08, 0xae, 0xe4, 0x75, 0xa7,
	0x75, 0xf8, 0xf4, 0xa0, 0x71, 0x50, 0x01, 0xd6, 0xf2, 0xd9, 0x68, 0x07, 0x9c, 0x8f, 0x76, 0xc0,
	0xdf, 0xd1, 0x0e, 0x38, 0x06, 0xbd, 0x92, 0x1c, 0xce, 0x27, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x14, 0xdc, 0x7c, 0xd3, 0x04, 0x00, 0x00,
}
