// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringApiServer is a auto generated package.
Input file: troubleshooting.proto
*/
package monitoring

import (
	"reflect"

	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapTroubleshooting = map[string]*runtime.Struct{

	"monitoring.PingPktStats": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(PingPktStats{}) },
		Fields: map[string]runtime.Field{
			"NoResp": runtime.Field{Name: "NoResp", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "no-response", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_BOOL"},

			"RttMs": runtime.Field{Name: "RttMs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "round-trip-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},
		},
	},
	"monitoring.PingStats": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(PingStats{}) },
		Fields: map[string]runtime.Field{
			"SmartNIC": runtime.Field{Name: "SmartNIC", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "smart-nic", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"PacketsTx": runtime.Field{Name: "PacketsTx", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "packets-sent", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},

			"PacketsRx": runtime.Field{Name: "PacketsRx", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "packets-received", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},

			"PacketLoss": runtime.Field{Name: "PacketLoss", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "packet-loss", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},

			"MinRttMs": runtime.Field{Name: "MinRttMs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "min-round-trip-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_FLOAT"},

			"MaxRttMs": runtime.Field{Name: "MaxRttMs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "max-round-trip-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_FLOAT"},

			"AvgRttMs": runtime.Field{Name: "AvgRttMs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "avg-round-trip-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_FLOAT"},

			"PktStats": runtime.Field{Name: "PktStats", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "per-packet-stats", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.PingPktStats"},
		},
	},
	"monitoring.TimeWindow": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TimeWindow{}) },
		Fields: map[string]runtime.Field{
			"StartTime": runtime.Field{Name: "StartTime", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "start-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.Timestamp"},

			"StopTime": runtime.Field{Name: "StopTime", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "stop-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.Timestamp"},
		},
	},
	"monitoring.TraceRouteInfo": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TraceRouteInfo{}) },
		Fields:    map[string]runtime.Field{},
	},
	"monitoring.TroubleshootingSession": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TroubleshootingSession{}) },
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": runtime.Field{Name: "Spec", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "spec", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TroubleshootingSessionSpec"},

			"Status": runtime.Field{Name: "Status", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TroubleshootingSessionStatus"},
		},

		CLITags: map[string]runtime.CLIInfo{
			"enable-mirroring": runtime.CLIInfo{Path: "Spec.EnableMirroring", Skip: false, Insert: "", Help: ""},
			"repeat-every":     runtime.CLIInfo{Path: "Spec.RepeatEvery", Skip: false, Insert: "", Help: ""},
			"report-url":       runtime.CLIInfo{Path: "Status.TsResults[].ReportURL", Skip: false, Insert: "", Help: ""},
			"state":            runtime.CLIInfo{Path: "Status.State", Skip: false, Insert: "", Help: ""},
		},
	},
	"monitoring.TroubleshootingSessionSpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TroubleshootingSessionSpec{}) },
		Fields: map[string]runtime.Field{
			"FlowSelector": runtime.Field{Name: "FlowSelector", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "flow-selector", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MatchRule"},

			"TimeWindow": runtime.Field{Name: "TimeWindow", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "time-window", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TimeWindow"},

			"RepeatEvery": runtime.Field{Name: "RepeatEvery", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "repeat-every", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"EnableMirroring": runtime.Field{Name: "EnableMirroring", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "enable-mirroring", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_BOOL"},
		},
	},
	"monitoring.TroubleshootingSessionStatus": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TroubleshootingSessionStatus{}) },
		Fields: map[string]runtime.Field{
			"State": runtime.Field{Name: "State", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "state", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"TsResults": runtime.Field{Name: "TsResults", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "troubleshooting-results", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.TsResult"},
		},
	},
	"monitoring.TsAuditTrail": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsAuditTrail{}) },
		Fields:    map[string]runtime.Field{},
	},
	"monitoring.TsFlowCounters": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsFlowCounters{}) },
		Fields:    map[string]runtime.Field{},
	},
	"monitoring.TsFlowLogs": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsFlowLogs{}) },
		Fields:    map[string]runtime.Field{},
	},
	"monitoring.TsPolicy": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsPolicy{}) },
		Fields: map[string]runtime.Field{
			"Sgpolicy": runtime.Field{Name: "Sgpolicy", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "sg-policy", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectRef"},

			"InRules": runtime.Field{Name: "InRules", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "in-rules", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "security.SGRule"},

			"OutRules": runtime.Field{Name: "OutRules", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "out-rules", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "security.SGRule"},
		},
	},
	"monitoring.TsReport": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsReport{}) },
		Fields: map[string]runtime.Field{
			"TimeWindow": runtime.Field{Name: "TimeWindow", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "time-window", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TimeWindow"},

			"ReportSummary": runtime.Field{Name: "ReportSummary", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "report-summary", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Events": runtime.Field{Name: "Events", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "events", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "events.Event"},

			"Alerts": runtime.Field{Name: "Alerts", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "alerts", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.AlertStatus"},

			"Stats": runtime.Field{Name: "Stats", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "stats", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TsStats"},

			"FlowCounters": runtime.Field{Name: "FlowCounters", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "flow-counters", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TsFlowCounters"},

			"FlowLogs": runtime.Field{Name: "FlowLogs", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "flow-logs", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TsFlowLogs"},

			"AuditTrail": runtime.Field{Name: "AuditTrail", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "audit-trail", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TsAuditTrail"},

			"Policies": runtime.Field{Name: "Policies", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "policies", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.TsPolicy"},

			"MirrorStatus": runtime.Field{Name: "MirrorStatus", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "mirror-session-status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MirrorSessionStatus"},

			"PingStats": runtime.Field{Name: "PingStats", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "ping-stats", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.PingStats"},

			"TracedRouteInfo": runtime.Field{Name: "TracedRouteInfo", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "traced-route-info", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TraceRouteInfo"},
		},
	},
	"monitoring.TsResult": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsResult{}) },
		Fields: map[string]runtime.Field{
			"TimeWindow": runtime.Field{Name: "TimeWindow", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "time-window", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.TimeWindow"},

			"ReportURL": runtime.Field{Name: "ReportURL", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "report-url", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.TsStats": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TsStats{}) },
		Fields:    map[string]runtime.Field{},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapTroubleshooting)
}
