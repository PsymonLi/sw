// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: mirror.proto
*/
package monitoring

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// MirrorSessionSpec_MirrorPacketFilter_normal is a map of normalized values for the enum
var MirrorSessionSpec_MirrorPacketFilter_normal = map[string]string{
	"all-drops":            "all-drops",
	"all-packets":          "all-packets",
	"firewall-policy-drop": "firewall-policy-drop",
	"network-policy-drop":  "network-policy-drop",
}

var MirrorSessionSpec_MirrorPacketFilter_vname = map[int32]string{
	0: "all-packets",
	1: "all-drops",
	2: "network-policy-drop",
	3: "firewall-policy-drop",
}

var MirrorSessionSpec_MirrorPacketFilter_vvalue = map[string]int32{
	"all-packets":          0,
	"all-drops":            1,
	"network-policy-drop":  2,
	"firewall-policy-drop": 3,
}

func (x MirrorSessionSpec_MirrorPacketFilter) String() string {
	return MirrorSessionSpec_MirrorPacketFilter_vname[int32(x)]
}

// Direction_normal is a map of normalized values for the enum
var Direction_normal = map[string]string{
	"both": "both",
	"rx":   "rx",
	"tx":   "tx",
}

var Direction_vname = map[int32]string{
	0: "both",
	1: "tx",
	2: "rx",
}

var Direction_vvalue = map[string]int32{
	"both": 0,
	"tx":   1,
	"rx":   2,
}

func (x Direction) String() string {
	return Direction_vname[int32(x)]
}

// PacketCollectorType_normal is a map of normalized values for the enum
var PacketCollectorType_normal = map[string]string{
	"erspan":        "erspan",
	"erspan_type_2": "erspan_type_2",
	"erspan_type_3": "erspan_type_3",
}

var PacketCollectorType_vname = map[int32]string{
	0: "erspan_type_3",
	1: "erspan_type_2",
	2: "erspan",
}

var PacketCollectorType_vvalue = map[string]int32{
	"erspan_type_3": 0,
	"erspan_type_2": 1,
	"erspan":        2,
}

func (x PacketCollectorType) String() string {
	return PacketCollectorType_vname[int32(x)]
}

// MirrorSessionState_normal is a map of normalized values for the enum
var MirrorSessionState_normal = map[string]string{
	"active":                  "active",
	"error-no-mirror-session": "error-no-mirror-session",
	"none":                    "none",
	"scheduled":               "scheduled",
	"stopped":                 "stopped",
}

var MirrorSessionState_vname = map[int32]string{
	0: "none",
	1: "active",
	2: "stopped",
	3: "scheduled",
	4: "error-no-mirror-session",
}

var MirrorSessionState_vvalue = map[string]int32{
	"none":                    0,
	"active":                  1,
	"stopped":                 2,
	"scheduled":               3,
	"error-no-mirror-session": 4,
}

func (x MirrorSessionState) String() string {
	return MirrorSessionState_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapMirror = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *MirrorSession) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "MirrorSession/", m.Tenant, "/", m.Name)
}

func (m *MirrorSession) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/MirrorSession/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *AppProtoSelector) Clone(into interface{}) (interface{}, error) {
	var out *AppProtoSelector
	var ok bool
	if into == nil {
		out = &AppProtoSelector{}
	} else {
		out, ok = into.(*AppProtoSelector)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AppProtoSelector))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AppProtoSelector) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *InterfaceMirror) Clone(into interface{}) (interface{}, error) {
	var out *InterfaceMirror
	var ok bool
	if into == nil {
		out = &InterfaceMirror{}
	} else {
		out, ok = into.(*InterfaceMirror)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*InterfaceMirror))
	return out, nil
}

// Default sets up the defaults for the object
func (m *InterfaceMirror) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Direction = "both"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MatchRule) Clone(into interface{}) (interface{}, error) {
	var out *MatchRule
	var ok bool
	if into == nil {
		out = &MatchRule{}
	} else {
		out, ok = into.(*MatchRule)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MatchRule))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MatchRule) Defaults(ver string) bool {
	var ret bool
	if m.AppProtoSel != nil {
		ret = m.AppProtoSel.Defaults(ver) || ret
	}
	if m.Dst != nil {
		ret = m.Dst.Defaults(ver) || ret
	}
	if m.Src != nil {
		ret = m.Src.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MatchSelector) Clone(into interface{}) (interface{}, error) {
	var out *MatchSelector
	var ok bool
	if into == nil {
		out = &MatchSelector{}
	} else {
		out, ok = into.(*MatchSelector)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MatchSelector))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MatchSelector) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorCollector) Clone(into interface{}) (interface{}, error) {
	var out *MirrorCollector
	var ok bool
	if into == nil {
		out = &MirrorCollector{}
	} else {
		out, ok = into.(*MirrorCollector)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorCollector))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorCollector) Defaults(ver string) bool {
	var ret bool
	if m.ExportCfg != nil {
		ret = m.ExportCfg.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		m.Type = "erspan_type_3"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorExportConfig) Clone(into interface{}) (interface{}, error) {
	var out *MirrorExportConfig
	var ok bool
	if into == nil {
		out = &MirrorExportConfig{}
	} else {
		out, ok = into.(*MirrorExportConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorExportConfig))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorExportConfig) Defaults(ver string) bool {
	var ret bool
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorSession) Clone(into interface{}) (interface{}, error) {
	var out *MirrorSession
	var ok bool
	if into == nil {
		out = &MirrorSession{}
	} else {
		out, ok = into.(*MirrorSession)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorSession))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorSession) Defaults(ver string) bool {
	var ret bool
	m.Kind = "MirrorSession"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorSessionSpec) Clone(into interface{}) (interface{}, error) {
	var out *MirrorSessionSpec
	var ok bool
	if into == nil {
		out = &MirrorSessionSpec{}
	} else {
		out, ok = into.(*MirrorSessionSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorSessionSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorSessionSpec) Defaults(ver string) bool {
	var ret bool
	for k := range m.Collectors {
		i := m.Collectors[k]
		ret = i.Defaults(ver) || ret
	}
	if m.Interfaces != nil {
		ret = m.Interfaces.Defaults(ver) || ret
	}
	for k := range m.MatchRules {
		i := m.MatchRules[k]
		ret = i.Defaults(ver) || ret
	}
	ret = true
	switch ver {
	default:
		for k := range m.PacketFilters {
			m.PacketFilters[k] = "all-packets"
		}
		m.SpanID = 1
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorSessionStatus) Clone(into interface{}) (interface{}, error) {
	var out *MirrorSessionStatus
	var ok bool
	if into == nil {
		out = &MirrorSessionStatus{}
	} else {
		out, ok = into.(*MirrorSessionStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorSessionStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorSessionStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.ScheduleState = "none"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *MirrorStartConditions) Clone(into interface{}) (interface{}, error) {
	var out *MirrorStartConditions
	var ok bool
	if into == nil {
		out = &MirrorStartConditions{}
	} else {
		out, ok = into.(*MirrorStartConditions)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*MirrorStartConditions))
	return out, nil
}

// Default sets up the defaults for the object
func (m *MirrorStartConditions) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *PropagationStatus) Clone(into interface{}) (interface{}, error) {
	var out *PropagationStatus
	var ok bool
	if into == nil {
		out = &PropagationStatus{}
	} else {
		out, ok = into.(*PropagationStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*PropagationStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *PropagationStatus) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *AppProtoSelector) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AppProtoSelector) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapMirror["AppProtoSelector"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["AppProtoSelector"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *AppProtoSelector) Normalize() {

}

func (m *InterfaceMirror) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *InterfaceMirror) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Selectors {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sSelectors[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapMirror["InterfaceMirror"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["InterfaceMirror"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *InterfaceMirror) Normalize() {

	m.Direction = Direction_normal[strings.ToLower(m.Direction)]

	for k, v := range m.Selectors {
		if v != nil {
			v.Normalize()
			m.Selectors[k] = v
		}
	}

}

func (m *MatchRule) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MatchRule) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.AppProtoSel != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "AppProtoSel"
			if errs := m.AppProtoSel.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}

	if m.Dst != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Dst"
			if errs := m.Dst.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}

	if m.Src != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Src"
			if errs := m.Src.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *MatchRule) Normalize() {

	if m.AppProtoSel != nil {
		m.AppProtoSel.Normalize()
	}

	if m.Dst != nil {
		m.Dst.Normalize()
	}

	if m.Src != nil {
		m.Src.Normalize()
	}

}

func (m *MatchSelector) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MatchSelector) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapMirror["MatchSelector"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["MatchSelector"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MatchSelector) Normalize() {

}

func (m *MirrorCollector) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MirrorCollector) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.ExportCfg != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "ExportCfg"
			if errs := m.ExportCfg.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapMirror["MirrorCollector"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["MirrorCollector"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MirrorCollector) Normalize() {

	if m.ExportCfg != nil {
		m.ExportCfg.Normalize()
	}

	m.Type = PacketCollectorType_normal[strings.ToLower(m.Type)]

}

func (m *MirrorExportConfig) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MirrorExportConfig) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapMirror["MirrorExportConfig"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["MirrorExportConfig"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MirrorExportConfig) Normalize() {

}

func (m *MirrorSession) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *MirrorSession) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for MirrorSession"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *MirrorSession) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *MirrorSessionSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MirrorSessionSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	for k, v := range m.Collectors {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sCollectors[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if m.Interfaces != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Interfaces"
			if errs := m.Interfaces.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	for k, v := range m.MatchRules {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sMatchRules[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapMirror["MirrorSessionSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["MirrorSessionSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MirrorSessionSpec) Normalize() {

	for k, v := range m.Collectors {
		v.Normalize()
		m.Collectors[k] = v

	}

	if m.Interfaces != nil {
		m.Interfaces.Normalize()
	}

	for k, v := range m.MatchRules {
		v.Normalize()
		m.MatchRules[k] = v

	}

	for k, v := range m.PacketFilters {
		m.PacketFilters[k] = MirrorSessionSpec_MirrorPacketFilter_normal[strings.ToLower(v)]
	}

}

func (m *MirrorSessionStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MirrorSessionStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapMirror["MirrorSessionStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapMirror["MirrorSessionStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *MirrorSessionStatus) Normalize() {

	m.ScheduleState = MirrorSessionState_normal[strings.ToLower(m.ScheduleState)]

}

func (m *MirrorStartConditions) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *MirrorStartConditions) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *MirrorStartConditions) Normalize() {

}

func (m *PropagationStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *PropagationStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *PropagationStatus) Normalize() {

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&MirrorSession{},
	)

	validatorMapMirror = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapMirror["AppProtoSelector"] = make(map[string][]func(string, interface{}) error)

	validatorMapMirror["AppProtoSelector"]["all"] = append(validatorMapMirror["AppProtoSelector"]["all"], func(path string, i interface{}) error {
		m := i.(*AppProtoSelector)
		for k, v := range m.ProtoPorts {
			if err := validators.EmptyOr(validators.ProtoPortAny, v, nil); err != nil {
				return fmt.Errorf("%v[%v] failed validation: %s", path+"."+"ProtoPorts", k, err.Error())
			}
		}

		return nil
	})

	validatorMapMirror["InterfaceMirror"] = make(map[string][]func(string, interface{}) error)
	validatorMapMirror["InterfaceMirror"]["all"] = append(validatorMapMirror["InterfaceMirror"]["all"], func(path string, i interface{}) error {
		m := i.(*InterfaceMirror)

		if _, ok := Direction_vvalue[m.Direction]; !ok {
			vals := []string{}
			for k1, _ := range Direction_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Direction", vals)
		}
		return nil
	})

	validatorMapMirror["MatchSelector"] = make(map[string][]func(string, interface{}) error)

	validatorMapMirror["MatchSelector"]["all"] = append(validatorMapMirror["MatchSelector"]["all"], func(path string, i interface{}) error {
		m := i.(*MatchSelector)
		for k, v := range m.MACAddresses {
			if err := validators.EmptyOr(validators.MacAddr, v, nil); err != nil {
				return fmt.Errorf("%v[%v] failed validation: %s", path+"."+"MACAddresses", k, err.Error())
			}
		}

		return nil
	})

	validatorMapMirror["MirrorCollector"] = make(map[string][]func(string, interface{}) error)
	validatorMapMirror["MirrorCollector"]["all"] = append(validatorMapMirror["MirrorCollector"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorCollector)

		if _, ok := PacketCollectorType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range PacketCollectorType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapMirror["MirrorExportConfig"] = make(map[string][]func(string, interface{}) error)

	validatorMapMirror["MirrorExportConfig"]["all"] = append(validatorMapMirror["MirrorExportConfig"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorExportConfig)
		if err := validators.IPv4(m.Destination); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"Destination", err.Error())
		}
		return nil
	})

	validatorMapMirror["MirrorSessionSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapMirror["MirrorSessionSpec"]["all"] = append(validatorMapMirror["MirrorSessionSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorSessionSpec)

		for k, v := range m.PacketFilters {
			if _, ok := MirrorSessionSpec_MirrorPacketFilter_vvalue[v]; !ok {
				vals := []string{}
				for k1, _ := range MirrorSessionSpec_MirrorPacketFilter_vvalue {
					vals = append(vals, k1)
				}
				return fmt.Errorf("%v[%v] did not match allowed strings %v", path+"."+"PacketFilters", k, vals)
			}
		}
		return nil
	})

	validatorMapMirror["MirrorSessionSpec"]["all"] = append(validatorMapMirror["MirrorSessionSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorSessionSpec)
		args := make([]string, 0)
		args = append(args, "64")
		args = append(args, "2048")

		if err := validators.IntRangeOrZero(m.PacketSize, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"PacketSize", err.Error())
		}
		return nil
	})

	validatorMapMirror["MirrorSessionSpec"]["all"] = append(validatorMapMirror["MirrorSessionSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorSessionSpec)
		args := make([]string, 0)
		args = append(args, "1")
		args = append(args, "1023")

		if err := validators.IntRange(m.SpanID, args); err != nil {
			return fmt.Errorf("%v failed validation: %s", path+"."+"SpanID", err.Error())
		}
		return nil
	})

	validatorMapMirror["MirrorSessionStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapMirror["MirrorSessionStatus"]["all"] = append(validatorMapMirror["MirrorSessionStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*MirrorSessionStatus)

		if _, ok := MirrorSessionState_vvalue[m.ScheduleState]; !ok {
			vals := []string{}
			for k1, _ := range MirrorSessionState_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"ScheduleState", vals)
		}
		return nil
	})

}
