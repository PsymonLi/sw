// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: export.proto
*/
package monitoring

import (
	"errors"
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapExport = make(map[string]map[string][]func(string, interface{}) error)

// Clone clones the object into into or creates one of into is nil
func (m *ExportConfig) Clone(into interface{}) (interface{}, error) {
	var out *ExportConfig
	var ok bool
	if into == nil {
		out = &ExportConfig{}
	} else {
		out, ok = into.(*ExportConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ExportConfig) Defaults(ver string) bool {
	var ret bool
	if m.Credentials != nil {
		ret = m.Credentials.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ExternalCred) Clone(into interface{}) (interface{}, error) {
	var out *ExternalCred
	var ok bool
	if into == nil {
		out = &ExternalCred{}
	} else {
		out, ok = into.(*ExternalCred)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ExternalCred) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.AuthType = "AUTHTYPE_NONE"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *SyslogExportConfig) Clone(into interface{}) (interface{}, error) {
	var out *SyslogExportConfig
	var ok bool
	if into == nil {
		out = &SyslogExportConfig{}
	} else {
		out, ok = into.(*SyslogExportConfig)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *SyslogExportConfig) Defaults(ver string) bool {
	return false
}

// Validators

func (m *ExportConfig) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Credentials != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Credentials"
		if errs := m.Credentials.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ExternalCred) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if vs, ok := validatorMapExport["ExternalCred"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapExport["ExternalCred"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SyslogExportConfig) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

	validatorMapExport = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapExport["ExternalCred"] = make(map[string][]func(string, interface{}) error)
	validatorMapExport["ExternalCred"]["all"] = append(validatorMapExport["ExternalCred"]["all"], func(path string, i interface{}) error {
		m := i.(*ExternalCred)

		if _, ok := ExportAuthType_value[m.AuthType]; !ok {
			return errors.New("ExternalCred.AuthType did not match allowed strings")
		}
		return nil
	})

}
