// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: techsupport.proto

package monitoring

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import labels "github.com/pensando/sw/api/labels"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type TechSupportJobStatus int32

const (
	//
	TechSupportJobStatus_Scheduled TechSupportJobStatus = 0
	//
	TechSupportJobStatus_Running TechSupportJobStatus = 1
	//
	TechSupportJobStatus_Completed TechSupportJobStatus = 2
	//
	TechSupportJobStatus_Failed TechSupportJobStatus = 3
)

var TechSupportJobStatus_name = map[int32]string{
	0: "Scheduled",
	1: "Running",
	2: "Completed",
	3: "Failed",
}
var TechSupportJobStatus_value = map[string]int32{
	"Scheduled": 0,
	"Running":   1,
	"Completed": 2,
	"Failed":    3,
}

func (x TechSupportJobStatus) String() string {
	return proto.EnumName(TechSupportJobStatus_name, int32(x))
}
func (TechSupportJobStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{0}
}

//
type TechSupportNodeResult struct {
	//
	StartTime *api.Timestamp `protobuf:"bytes,1,opt,name=StartTime,json=start-time,omitempty" json:"start-time,omitempty"`
	//
	EndTime *api.Timestamp `protobuf:"bytes,2,opt,name=EndTime,json=end-time,omitempty" json:"end-time,omitempty"`
	//
	Status string `protobuf:"bytes,3,opt,name=Status,json=status,omitempty,proto3" json:"status,omitempty"`
	//
	URI string `protobuf:"bytes,4,opt,name=URI,json=uri,omitempty,proto3" json:"uri,omitempty"`
}

func (m *TechSupportNodeResult) Reset()                    { *m = TechSupportNodeResult{} }
func (m *TechSupportNodeResult) String() string            { return proto.CompactTextString(m) }
func (*TechSupportNodeResult) ProtoMessage()               {}
func (*TechSupportNodeResult) Descriptor() ([]byte, []int) { return fileDescriptorTechsupport, []int{0} }

func (m *TechSupportNodeResult) GetStartTime() *api.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TechSupportNodeResult) GetEndTime() *api.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TechSupportNodeResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TechSupportNodeResult) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

//
type TechSupportRequest struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	//
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	//
	Spec TechSupportRequestSpec `protobuf:"bytes,3,opt,name=Spec,json=spec,inline" json:"spec,inline"`
	//
	Status TechSupportRequestStatus `protobuf:"bytes,4,opt,name=Status,json=status,omitempty" json:"status,omitempty"`
}

func (m *TechSupportRequest) Reset()                    { *m = TechSupportRequest{} }
func (m *TechSupportRequest) String() string            { return proto.CompactTextString(m) }
func (*TechSupportRequest) ProtoMessage()               {}
func (*TechSupportRequest) Descriptor() ([]byte, []int) { return fileDescriptorTechsupport, []int{1} }

func (m *TechSupportRequest) GetSpec() TechSupportRequestSpec {
	if m != nil {
		return m.Spec
	}
	return TechSupportRequestSpec{}
}

func (m *TechSupportRequest) GetStatus() TechSupportRequestStatus {
	if m != nil {
		return m.Status
	}
	return TechSupportRequestStatus{}
}

//
type TechSupportRequestSpec struct {
	// CollectionSelector is a Label selector for modules to collect
	CollectionSelector *labels.Selector `protobuf:"bytes,1,opt,name=CollectionSelector,json=collection-selector,omitempty" json:"collection-selector,omitempty"`
	// NodeSelector is a label selector that selects nodes to collect tech support from
	NodeSelector *TechSupportRequestSpec_NodeSelectorSpec `protobuf:"bytes,2,opt,name=NodeSelector,json=node-selector,omitempty" json:"node-selector,omitempty"`
	// Verbosity defines the verbosity level
	Verbosity int32 `protobuf:"varint,3,opt,name=Verbosity,json=verbosity,omitempty,proto3" json:"verbosity,omitempty"`
}

func (m *TechSupportRequestSpec) Reset()         { *m = TechSupportRequestSpec{} }
func (m *TechSupportRequestSpec) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestSpec) ProtoMessage()    {}
func (*TechSupportRequestSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{2}
}

func (m *TechSupportRequestSpec) GetCollectionSelector() *labels.Selector {
	if m != nil {
		return m.CollectionSelector
	}
	return nil
}

func (m *TechSupportRequestSpec) GetNodeSelector() *TechSupportRequestSpec_NodeSelectorSpec {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *TechSupportRequestSpec) GetVerbosity() int32 {
	if m != nil {
		return m.Verbosity
	}
	return 0
}

type TechSupportRequestSpec_NodeSelectorSpec struct {
	Names  []string         `protobuf:"bytes,1,rep,name=Names" json:"names,omitempty"`
	Labels *labels.Selector `protobuf:"bytes,2,opt,name=Labels" json:"labels,omitempty"`
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) Reset() {
	*m = TechSupportRequestSpec_NodeSelectorSpec{}
}
func (m *TechSupportRequestSpec_NodeSelectorSpec) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestSpec_NodeSelectorSpec) ProtoMessage()    {}
func (*TechSupportRequestSpec_NodeSelectorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{2, 0}
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) GetLabels() *labels.Selector {
	if m != nil {
		return m.Labels
	}
	return nil
}

//
type TechSupportRequestStatus struct {
	//
	InstanceID string `protobuf:"bytes,1,opt,name=InstanceID,json=instance-id,omitempty,proto3" json:"instance-id,omitempty"`
	//
	Status string `protobuf:"bytes,2,opt,name=Status,json=status,omitempty,proto3" json:"status,omitempty"`
	//
	ControllerNodeResults map[string]*TechSupportNodeResult `protobuf:"bytes,3,rep,name=ControllerNodeResults,json=ctrlr-node-results,omitempty" json:"ctrlr-node-results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	//
	SmartNICNodeResults map[string]*TechSupportNodeResult `protobuf:"bytes,4,rep,name=SmartNICNodeResults,json=smartnic-node-results,omitempty" json:"smartnic-node-results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TechSupportRequestStatus) Reset()         { *m = TechSupportRequestStatus{} }
func (m *TechSupportRequestStatus) String() string { return proto.CompactTextString(m) }
func (*TechSupportRequestStatus) ProtoMessage()    {}
func (*TechSupportRequestStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorTechsupport, []int{3}
}

func (m *TechSupportRequestStatus) GetInstanceID() string {
	if m != nil {
		return m.InstanceID
	}
	return ""
}

func (m *TechSupportRequestStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TechSupportRequestStatus) GetControllerNodeResults() map[string]*TechSupportNodeResult {
	if m != nil {
		return m.ControllerNodeResults
	}
	return nil
}

func (m *TechSupportRequestStatus) GetSmartNICNodeResults() map[string]*TechSupportNodeResult {
	if m != nil {
		return m.SmartNICNodeResults
	}
	return nil
}

func init() {
	proto.RegisterType((*TechSupportNodeResult)(nil), "monitoring.TechSupportNodeResult")
	proto.RegisterType((*TechSupportRequest)(nil), "monitoring.TechSupportRequest")
	proto.RegisterType((*TechSupportRequestSpec)(nil), "monitoring.TechSupportRequestSpec")
	proto.RegisterType((*TechSupportRequestSpec_NodeSelectorSpec)(nil), "monitoring.TechSupportRequestSpec.NodeSelectorSpec")
	proto.RegisterType((*TechSupportRequestStatus)(nil), "monitoring.TechSupportRequestStatus")
	proto.RegisterEnum("monitoring.TechSupportJobStatus", TechSupportJobStatus_name, TechSupportJobStatus_value)
}
func (m *TechSupportNodeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportNodeResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.StartTime.Size()))
		n1, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.EndTime != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.EndTime.Size()))
		n2, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	return i, nil
}

func (m *TechSupportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.ObjectMeta.Size()))
	n4, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.Spec.Size()))
	n5, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x22
	i++
	i = encodeVarintTechsupport(dAtA, i, uint64(m.Status.Size()))
	n6, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *TechSupportRequestSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CollectionSelector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.CollectionSelector.Size()))
		n7, err := m.CollectionSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.NodeSelector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.NodeSelector.Size()))
		n8, err := m.NodeSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Verbosity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Verbosity))
	}
	return i, nil
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Labels != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(m.Labels.Size()))
		n9, err := m.Labels.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *TechSupportRequestStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequestStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InstanceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.InstanceID)))
		i += copy(dAtA[i:], m.InstanceID)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTechsupport(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.ControllerNodeResults) > 0 {
		for k, _ := range m.ControllerNodeResults {
			dAtA[i] = 0x1a
			i++
			v := m.ControllerNodeResults[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTechsupport(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTechsupport(uint64(len(k))) + msgSize
			i = encodeVarintTechsupport(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTechsupport(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTechsupport(dAtA, i, uint64(v.Size()))
				n10, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n10
			}
		}
	}
	if len(m.SmartNICNodeResults) > 0 {
		for k, _ := range m.SmartNICNodeResults {
			dAtA[i] = 0x22
			i++
			v := m.SmartNICNodeResults[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTechsupport(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTechsupport(uint64(len(k))) + msgSize
			i = encodeVarintTechsupport(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTechsupport(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTechsupport(dAtA, i, uint64(v.Size()))
				n11, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n11
			}
		}
	}
	return i, nil
}

func encodeVarintTechsupport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TechSupportNodeResult) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *TechSupportRequest) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTechsupport(uint64(l))
	return n
}

func (m *TechSupportRequestSpec) Size() (n int) {
	var l int
	_ = l
	if m.CollectionSelector != nil {
		l = m.CollectionSelector.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.NodeSelector != nil {
		l = m.NodeSelector.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if m.Verbosity != 0 {
		n += 1 + sovTechsupport(uint64(m.Verbosity))
	}
	return n
}

func (m *TechSupportRequestSpec_NodeSelectorSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovTechsupport(uint64(l))
		}
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovTechsupport(uint64(l))
	}
	return n
}

func (m *TechSupportRequestStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstanceID)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTechsupport(uint64(l))
	}
	if len(m.ControllerNodeResults) > 0 {
		for k, v := range m.ControllerNodeResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTechsupport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTechsupport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTechsupport(uint64(mapEntrySize))
		}
	}
	if len(m.SmartNICNodeResults) > 0 {
		for k, v := range m.SmartNICNodeResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTechsupport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTechsupport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTechsupport(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTechsupport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTechsupport(x uint64) (n int) {
	return sovTechsupport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TechSupportNodeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportNodeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportNodeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &api.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &api.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectionSelector == nil {
				m.CollectionSelector = &labels.Selector{}
			}
			if err := m.CollectionSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = &TechSupportRequestSpec_NodeSelectorSpec{}
			}
			if err := m.NodeSelector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verbosity", wireType)
			}
			m.Verbosity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verbosity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestSpec_NodeSelectorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSelectorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSelectorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &labels.Selector{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequestStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequestStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequestStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerNodeResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControllerNodeResults == nil {
				m.ControllerNodeResults = make(map[string]*TechSupportNodeResult)
			}
			var mapkey string
			var mapvalue *TechSupportNodeResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTechsupport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTechsupport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTechsupport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTechsupport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTechsupport
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTechsupport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TechSupportNodeResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTechsupport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTechsupport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ControllerNodeResults[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartNICNodeResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTechsupport
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartNICNodeResults == nil {
				m.SmartNICNodeResults = make(map[string]*TechSupportNodeResult)
			}
			var mapkey string
			var mapvalue *TechSupportNodeResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTechsupport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTechsupport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTechsupport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTechsupport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTechsupport
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTechsupport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TechSupportNodeResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTechsupport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTechsupport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SmartNICNodeResults[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTechsupport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTechsupport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTechsupport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTechsupport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTechsupport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTechsupport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTechsupport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTechsupport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTechsupport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTechsupport   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("techsupport.proto", fileDescriptorTechsupport) }

var fileDescriptorTechsupport = []byte{
	// 889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xae, 0x77, 0xf3, 0x43, 0x3b, 0xdb, 0xb4, 0x9b, 0x49, 0xd2, 0x6e, 0x96, 0x36, 0x4e, 0x17,
	0x90, 0xb6, 0xa8, 0x6b, 0xa3, 0x54, 0xfc, 0x50, 0x25, 0xa8, 0xe4, 0x34, 0x95, 0x02, 0x34, 0x05,
	0x6f, 0x80, 0x2b, 0x5e, 0xfb, 0xe1, 0x1d, 0x6a, 0xcf, 0x18, 0xcf, 0x38, 0x68, 0x0f, 0x88, 0x13,
	0xfc, 0x19, 0x88, 0x33, 0xff, 0x04, 0xd7, 0x72, 0xab, 0x90, 0x38, 0x62, 0xa1, 0x1c, 0xfd, 0x57,
	0xa0, 0x19, 0x7b, 0x93, 0x21, 0xf1, 0x26, 0x39, 0xf4, 0xe6, 0x79, 0xef, 0x7b, 0xdf, 0x7c, 0xf3,
	0xbd, 0x37, 0x63, 0xb4, 0x2a, 0xc0, 0x9f, 0xf0, 0x2c, 0x49, 0x58, 0x2a, 0xac, 0x24, 0x65, 0x82,
	0x61, 0x14, 0x33, 0x4a, 0x04, 0x4b, 0x09, 0x0d, 0x7b, 0x77, 0x42, 0xc6, 0xc2, 0x08, 0x6c, 0x2f,
	0x21, 0xb6, 0x47, 0x29, 0x13, 0x9e, 0x20, 0x8c, 0xf2, 0x12, 0xd9, 0xdb, 0x0b, 0x89, 0x98, 0x64,
	0x63, 0xcb, 0x67, 0xb1, 0x9d, 0x00, 0xe5, 0x1e, 0x0d, 0x98, 0xcd, 0x7f, 0xb0, 0x8f, 0x80, 0x12,
	0x1f, 0xec, 0x4c, 0x90, 0x88, 0xcb, 0xd2, 0x10, 0xa8, 0x5e, 0x6d, 0x13, 0xea, 0x47, 0x59, 0x00,
	0x33, 0x9a, 0xa1, 0x46, 0x13, 0xb2, 0x90, 0xd9, 0x2a, 0x3c, 0xce, 0xbe, 0x55, 0x2b, 0xb5, 0x50,
	0x5f, 0x15, 0xfc, 0xed, 0x39, 0xbb, 0x4a, 0x8d, 0x31, 0x08, 0xaf, 0x82, 0xbd, 0x7b, 0x01, 0x2c,
	0xf2, 0xc6, 0x10, 0x71, 0x9b, 0x43, 0x04, 0xbe, 0x60, 0x69, 0x59, 0xd1, 0xff, 0xa3, 0x81, 0x36,
	0x0e, 0xc1, 0x9f, 0x8c, 0x4a, 0x3b, 0x0e, 0x58, 0x00, 0x2e, 0xf0, 0x2c, 0x12, 0xf8, 0x0b, 0xd4,
	0x1a, 0x09, 0x2f, 0x15, 0x87, 0x24, 0x86, 0xae, 0xb1, 0x6d, 0x0c, 0xda, 0x3b, 0x37, 0x2c, 0x2f,
	0x21, 0x96, 0x0c, 0x70, 0xe1, 0xc5, 0x89, 0xd3, 0x2d, 0x72, 0x73, 0x9d, 0x4b, 0xd0, 0x50, 0x90,
	0x18, 0x1e, 0xb0, 0x98, 0x08, 0x88, 0x13, 0x31, 0x75, 0x6b, 0xa3, 0xf8, 0x53, 0xb4, 0xbc, 0x47,
	0x03, 0x45, 0xd8, 0xa8, 0x25, 0xbc, 0x55, 0xe4, 0x26, 0x06, 0x1a, 0x9c, 0xa5, 0xab, 0x89, 0xe1,
	0xaf, 0xd1, 0xd2, 0x48, 0x78, 0x22, 0xe3, 0xdd, 0xe6, 0xb6, 0x31, 0x68, 0x39, 0xef, 0xfd, 0xfe,
	0xcb, 0xe6, 0xdd, 0x91, 0x48, 0xf7, 0x68, 0x16, 0x0f, 0xb4, 0x23, 0x7d, 0xc2, 0xc6, 0x25, 0xee,
	0x7e, 0x91, 0x9b, 0x1d, 0xae, 0x3e, 0x35, 0xea, 0x73, 0x11, 0x3c, 0x44, 0xcd, 0x2f, 0xdd, 0xfd,
	0xee, 0x82, 0x62, 0x5d, 0x2d, 0x72, 0x73, 0x25, 0x4b, 0x89, 0x56, 0xf1, 0xff, 0x65, 0xff, 0x9f,
	0x06, 0xc2, 0xda, 0x76, 0x2e, 0x7c, 0x9f, 0x01, 0x17, 0xf8, 0x7d, 0x64, 0x1c, 0x56, 0xb6, 0xad,
	0x94, 0xa7, 0x9c, 0x26, 0xf0, 0x0c, 0x84, 0xe7, 0xac, 0xbd, 0xcc, 0xcd, 0x6b, 0xaf, 0x72, 0xd3,
	0x28, 0x72, 0x73, 0xf9, 0x01, 0xa1, 0x11, 0xa1, 0xe0, 0xce, 0x3e, 0xf0, 0x53, 0x64, 0x3c, 0xaf,
	0xdc, 0xb9, 0xa9, 0xea, 0x9e, 0x8f, 0xbf, 0x03, 0x5f, 0xa8, 0xca, 0x9e, 0x56, 0x79, 0x43, 0xb6,
	0x5d, 0x53, 0x75, 0x66, 0x8d, 0x5d, 0xb4, 0x30, 0x4a, 0xc0, 0x57, 0xe6, 0xb4, 0x77, 0xfa, 0xd6,
	0xe9, 0x80, 0x5b, 0xe7, 0xd5, 0x4a, 0x64, 0xa9, 0xab, 0xc8, 0xcd, 0x36, 0x4f, 0xc0, 0x9f, 0xe9,
	0xd2, 0x17, 0xf8, 0x9b, 0x13, 0xcb, 0x17, 0x14, 0xeb, 0x5b, 0x97, 0xb0, 0x2a, 0xac, 0xd3, 0xad,
	0x78, 0xaf, 0xe0, 0xfd, 0xa3, 0xd5, 0xbf, 0x7e, 0xde, 0x5c, 0xc1, 0x6d, 0xed, 0x82, 0xf6, 0xff,
	0x6c, 0xa2, 0x5b, 0xf5, 0x8a, 0x31, 0x45, 0x78, 0x97, 0x45, 0x72, 0x9e, 0x09, 0xa3, 0xa3, 0x6a,
	0xb0, 0x2b, 0xd3, 0x3b, 0x56, 0x39, 0xf0, 0xd6, 0x2c, 0xee, 0xdc, 0x2b, 0x72, 0xf3, 0xae, 0x7f,
	0x82, 0x1f, 0xce, 0x6e, 0x82, 0x26, 0xe8, 0xe2, 0x34, 0xfe, 0x09, 0x5d, 0x97, 0x17, 0xe4, 0x64,
	0xa7, 0xb2, 0x4d, 0x0f, 0x2f, 0xf7, 0xd6, 0xd2, 0xcb, 0x94, 0xd9, 0x6f, 0x14, 0xb9, 0x79, 0x9b,
	0xb2, 0x00, 0xea, 0x64, 0xcc, 0x4b, 0xe0, 0xc7, 0xa8, 0xf5, 0x15, 0xa4, 0x63, 0xc6, 0x89, 0x98,
	0xaa, 0xce, 0x2e, 0x3a, 0xb7, 0x8b, 0xdc, 0x5c, 0x3b, 0x9a, 0x05, 0x35, 0x92, 0xba, 0x60, 0xef,
	0x47, 0xd4, 0x39, 0x2b, 0x05, 0xdf, 0x47, 0x8b, 0x07, 0x5e, 0x0c, 0xbc, 0x6b, 0x6c, 0x37, 0x07,
	0x2d, 0x67, 0xad, 0xc8, 0xcd, 0x9b, 0x54, 0x06, 0x34, 0xb2, 0x12, 0x81, 0x3f, 0x46, 0x4b, 0x9f,
	0x29, 0x57, 0xab, 0xa3, 0x9f, 0x37, 0x79, 0x5d, 0x36, 0xba, 0x0c, 0x6a, 0xe5, 0x55, 0x55, 0xff,
	0xef, 0x45, 0xd4, 0x9d, 0x37, 0x27, 0xf8, 0x09, 0x42, 0xfb, 0x94, 0x0b, 0x8f, 0xfa, 0xb0, 0xff,
	0x44, 0x75, 0xb1, 0xe5, 0x6c, 0x16, 0xb9, 0xb9, 0x41, 0xaa, 0xe8, 0x90, 0x04, 0x1a, 0x67, 0x7d,
	0x58, 0x7b, 0x16, 0x1a, 0xaf, 0xf7, 0x59, 0xf8, 0xd5, 0x40, 0x1b, 0xbb, 0x8c, 0x8a, 0x54, 0x8e,
	0x48, 0x7a, 0xfa, 0x50, 0xca, 0xf7, 0xa7, 0x39, 0x68, 0xef, 0x3c, 0xbe, 0xca, 0x65, 0xb0, 0x6a,
	0x19, 0xf6, 0xa8, 0x48, 0xa7, 0xce, 0x76, 0x91, 0x9b, 0x77, 0x7c, 0x91, 0x46, 0xe9, 0x50, 0xf5,
	0x3f, 0x2d, 0x93, 0x9a, 0xa8, 0x0b, 0xb3, 0xf8, 0x37, 0x03, 0xad, 0x8d, 0x62, 0x2f, 0x15, 0x07,
	0xfb, 0xbb, 0xba, 0xbc, 0x05, 0x25, 0xef, 0xa3, 0x2b, 0xc9, 0xab, 0xa9, 0x2f, 0xc5, 0xbd, 0x59,
	0xe4, 0xa6, 0xc9, 0x65, 0x96, 0x12, 0x7f, 0x9e, 0xbe, 0xcb, 0x00, 0xbd, 0x17, 0xa8, 0x37, 0xdf,
	0x00, 0xdc, 0x41, 0xcd, 0x17, 0x30, 0x2d, 0x3b, 0xef, 0xca, 0x4f, 0xfc, 0x01, 0x5a, 0x3c, 0xf2,
	0xa2, 0x6c, 0xf6, 0xbb, 0xb8, 0x37, 0xe7, 0x0c, 0xa7, 0x4c, 0x6e, 0x89, 0x7f, 0xd4, 0xf8, 0xd0,
	0xe8, 0x11, 0xd4, 0x9d, 0x77, 0x9c, 0xd7, 0xbc, 0xd5, 0x3b, 0xcf, 0xd0, 0x7a, 0xdd, 0x68, 0xe1,
	0x15, 0xd4, 0x1a, 0xf9, 0x13, 0x08, 0xb2, 0x08, 0x82, 0xce, 0x35, 0xdc, 0x46, 0xcb, 0x6e, 0x46,
	0x29, 0xa1, 0x61, 0xc7, 0x90, 0xb9, 0x5d, 0x16, 0x27, 0x11, 0x08, 0x08, 0x3a, 0x0d, 0x8c, 0xd0,
	0xd2, 0x53, 0x8f, 0x48, 0x5c, 0xd3, 0xb9, 0xfe, 0xf2, 0x78, 0xcb, 0x78, 0x75, 0xbc, 0x65, 0xfc,
	0x7b, 0xbc, 0x65, 0x7c, 0x6e, 0x8c, 0x97, 0xd4, 0xbf, 0xfa, 0xe1, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd1, 0x21, 0x20, 0x1c, 0xb9, 0x08, 0x00, 0x00,
}
