// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: archive.proto
*/
package monitoring

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// ArchiveRequestSpec_LogType_normal is a map of normalized values for the enum
var ArchiveRequestSpec_LogType_normal = map[string]string{
	"auditevent": "auditevent",
	"event":      "event",
}

var ArchiveRequestSpec_LogType_vname = map[int32]string{
	0: "event",
	1: "auditevent",
}

var ArchiveRequestSpec_LogType_vvalue = map[string]int32{
	"event":      0,
	"auditevent": 1,
}

func (x ArchiveRequestSpec_LogType) String() string {
	return ArchiveRequestSpec_LogType_vname[int32(x)]
}

// ArchiveRequestStatus_ArchiveJobStatus_normal is a map of normalized values for the enum
var ArchiveRequestStatus_ArchiveJobStatus_normal = map[string]string{
	"canceled":  "canceled",
	"completed": "completed",
	"failed":    "failed",
	"running":   "running",
	"scheduled": "scheduled",
	"timeout":   "timeout",
}

var ArchiveRequestStatus_ArchiveJobStatus_vname = map[int32]string{
	0: "scheduled",
	1: "running",
	2: "completed",
	3: "failed",
	4: "timeout",
	5: "canceled",
}

var ArchiveRequestStatus_ArchiveJobStatus_vvalue = map[string]int32{
	"scheduled": 0,
	"running":   1,
	"completed": 2,
	"failed":    3,
	"timeout":   4,
	"canceled":  5,
}

func (x ArchiveRequestStatus_ArchiveJobStatus) String() string {
	return ArchiveRequestStatus_ArchiveJobStatus_vname[int32(x)]
}

var _ validators.DummyVar
var validatorMapArchive = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *ArchiveRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "archive-requests/", m.Tenant, "/", m.Name)
}

func (m *ArchiveRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/archive-requests/", in.Name)
}

// MakeKey generates a KV store key for the object
func (m *CancelArchiveRequest) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "archive-requests/", m.Tenant, "/", m.Name)
}

func (m *CancelArchiveRequest) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/archive-requests/", in.Name)
}

// Clone clones the object into into or creates one of into is nil
func (m *ArchiveQuery) Clone(into interface{}) (interface{}, error) {
	var out *ArchiveQuery
	var ok bool
	if into == nil {
		out = &ArchiveQuery{}
	} else {
		out, ok = into.(*ArchiveQuery)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ArchiveQuery))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ArchiveQuery) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ArchiveRequest) Clone(into interface{}) (interface{}, error) {
	var out *ArchiveRequest
	var ok bool
	if into == nil {
		out = &ArchiveRequest{}
	} else {
		out, ok = into.(*ArchiveRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ArchiveRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ArchiveRequest) Defaults(ver string) bool {
	var ret bool
	m.Kind = "ArchiveRequest"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	ret = m.Status.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ArchiveRequestSpec) Clone(into interface{}) (interface{}, error) {
	var out *ArchiveRequestSpec
	var ok bool
	if into == nil {
		out = &ArchiveRequestSpec{}
	} else {
		out, ok = into.(*ArchiveRequestSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ArchiveRequestSpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ArchiveRequestSpec) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Type = "event"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *ArchiveRequestStatus) Clone(into interface{}) (interface{}, error) {
	var out *ArchiveRequestStatus
	var ok bool
	if into == nil {
		out = &ArchiveRequestStatus{}
	} else {
		out, ok = into.(*ArchiveRequestStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*ArchiveRequestStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *ArchiveRequestStatus) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Status = "scheduled"
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *CancelArchiveRequest) Clone(into interface{}) (interface{}, error) {
	var out *CancelArchiveRequest
	var ok bool
	if into == nil {
		out = &CancelArchiveRequest{}
	} else {
		out, ok = into.(*CancelArchiveRequest)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*CancelArchiveRequest))
	return out, nil
}

// Default sets up the defaults for the object
func (m *CancelArchiveRequest) Defaults(ver string) bool {
	return false
}

// Validators and Requirements

func (m *ArchiveQuery) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ArchiveQuery) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Fields != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Fields"
			if errs := m.Fields.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}

	if m.Labels != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Labels"
			if errs := m.Labels.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	for k, v := range m.Texts {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sTexts[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ArchiveQuery) Normalize() {

	if m.Fields != nil {
		m.Fields.Normalize()
	}

	if m.Labels != nil {
		m.Labels.Normalize()
	}

	for k, v := range m.Texts {
		if v != nil {
			v.Normalize()
			m.Texts[k] = v
		}
	}

}

func (m *ArchiveRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *ArchiveRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for ArchiveRequest"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreStatus {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Status"
		if errs := m.Status.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ArchiveRequest) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

	m.Status.Normalize()

}

func (m *ArchiveRequestSpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ArchiveRequestSpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Query != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Query"
			if errs := m.Query.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	if vs, ok := validatorMapArchive["ArchiveRequestSpec"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapArchive["ArchiveRequestSpec"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ArchiveRequestSpec) Normalize() {

	if m.Query != nil {
		m.Query.Normalize()
	}

	m.Type = ArchiveRequestSpec_LogType_normal[strings.ToLower(m.Type)]

}

func (m *ArchiveRequestStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *ArchiveRequestStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	if vs, ok := validatorMapArchive["ArchiveRequestStatus"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapArchive["ArchiveRequestStatus"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *ArchiveRequestStatus) Normalize() {

	m.Status = ArchiveRequestStatus_ArchiveJobStatus_normal[strings.ToLower(m.Status)]

}

func (m *CancelArchiveRequest) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *CancelArchiveRequest) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	return ret
}

func (m *CancelArchiveRequest) Normalize() {

	m.ObjectMeta.Normalize()

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&ArchiveRequest{},
		&CancelArchiveRequest{},
	)

	validatorMapArchive = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapArchive["ArchiveRequestSpec"] = make(map[string][]func(string, interface{}) error)
	validatorMapArchive["ArchiveRequestSpec"]["all"] = append(validatorMapArchive["ArchiveRequestSpec"]["all"], func(path string, i interface{}) error {
		m := i.(*ArchiveRequestSpec)

		if _, ok := ArchiveRequestSpec_LogType_vvalue[m.Type]; !ok {
			vals := []string{}
			for k1, _ := range ArchiveRequestSpec_LogType_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Type", vals)
		}
		return nil
	})

	validatorMapArchive["ArchiveRequestStatus"] = make(map[string][]func(string, interface{}) error)
	validatorMapArchive["ArchiveRequestStatus"]["all"] = append(validatorMapArchive["ArchiveRequestStatus"]["all"], func(path string, i interface{}) error {
		m := i.(*ArchiveRequestStatus)

		if _, ok := ArchiveRequestStatus_ArchiveJobStatus_vvalue[m.Status]; !ok {
			vals := []string{}
			for k1, _ := range ArchiveRequestStatus_ArchiveJobStatus_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Status", vals)
		}
		return nil
	})

}
