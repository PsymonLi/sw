// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringApiServer is a auto generated package.
Input file: mirror.proto
*/
package monitoring

import (
	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapMirror = map[string]*runtime.Struct{

	"monitoring.AppProtoSelector": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Ports": runtime.Field{Name: "Ports", JSONTag: "ports", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Apps": runtime.Field{Name: "Apps", JSONTag: "applications", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.MatchRule": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Src": runtime.Field{Name: "Src", JSONTag: "source", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MatchSelector"},

			"Dst": runtime.Field{Name: "Dst", JSONTag: "destination", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MatchSelector"},

			"AppProtoSel": runtime.Field{Name: "AppProtoSel", JSONTag: "app-protocol-selectors", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.AppProtoSelector"},
		},
	},
	"monitoring.MatchSelector": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Endpoints": runtime.Field{Name: "Endpoints", JSONTag: "endpoints", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"IPAddresses": runtime.Field{Name: "IPAddresses", JSONTag: "ip-addresses", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"MACAddresses": runtime.Field{Name: "MACAddresses", JSONTag: "mac-addresses", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.MirrorCollector": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Type": runtime.Field{Name: "Type", JSONTag: "type", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ExportCfg": runtime.Field{Name: "ExportCfg", JSONTag: "export-config", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ExportConfig"},
		},
	},
	"monitoring.MirrorSession": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": runtime.Field{Name: "Spec", JSONTag: "mirror-session-spec", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MirrorSessionSpec"},

			"Status": runtime.Field{Name: "Status", JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MirrorSessionStatus"},
		},
	},
	"monitoring.MirrorSessionSpec": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"PacketSize": runtime.Field{Name: "PacketSize", JSONTag: "packet-size", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},

			"StartConditions": runtime.Field{Name: "StartConditions", JSONTag: "start-condition", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MirrorStartConditions"},

			"StopConditions": runtime.Field{Name: "StopConditions", JSONTag: "stop-condition", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.MirrorStopConditions"},

			"Collectors": runtime.Field{Name: "Collectors", JSONTag: "collectors", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.MirrorCollector"},

			"MatchRules": runtime.Field{Name: "MatchRules", JSONTag: "match-rules", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.MatchRule"},

			"PacketFilters": runtime.Field{Name: "PacketFilters", JSONTag: "packet-filters", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.MirrorSessionStatus": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"State": runtime.Field{Name: "State", JSONTag: "oper-state", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"PcapFileURL": runtime.Field{Name: "PcapFileURL", JSONTag: "pcap-file-url", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.MirrorStartConditions": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"ScheduleTime": runtime.Field{Name: "ScheduleTime", JSONTag: "schedule-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.Timestamp"},
		},
	},
	"monitoring.MirrorStopConditions": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"MaxPacketCount": runtime.Field{Name: "MaxPacketCount", JSONTag: "max-packets", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},

			"ExpiryDuration": runtime.Field{Name: "ExpiryDuration", JSONTag: "expiry-duration", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapMirror)
}
