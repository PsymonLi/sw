// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: svc_monitoring.proto
*/
package monitoring

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerMonitoringV1 struct {
	Endpoints EndpointsMonitoringV1Server

	AutoAddAlertHdlr               grpctransport.Handler
	AutoAddAlertDestinationHdlr    grpctransport.Handler
	AutoAddAlertPolicyHdlr         grpctransport.Handler
	AutoAddEventHdlr               grpctransport.Handler
	AutoAddEventPolicyHdlr         grpctransport.Handler
	AutoAddFlowExportPolicyHdlr    grpctransport.Handler
	AutoAddFwlogPolicyHdlr         grpctransport.Handler
	AutoAddMirrorSessionHdlr       grpctransport.Handler
	AutoAddStatsPolicyHdlr         grpctransport.Handler
	AutoDeleteAlertHdlr            grpctransport.Handler
	AutoDeleteAlertDestinationHdlr grpctransport.Handler
	AutoDeleteAlertPolicyHdlr      grpctransport.Handler
	AutoDeleteEventHdlr            grpctransport.Handler
	AutoDeleteEventPolicyHdlr      grpctransport.Handler
	AutoDeleteFlowExportPolicyHdlr grpctransport.Handler
	AutoDeleteFwlogPolicyHdlr      grpctransport.Handler
	AutoDeleteMirrorSessionHdlr    grpctransport.Handler
	AutoDeleteStatsPolicyHdlr      grpctransport.Handler
	AutoGetAlertHdlr               grpctransport.Handler
	AutoGetAlertDestinationHdlr    grpctransport.Handler
	AutoGetAlertPolicyHdlr         grpctransport.Handler
	AutoGetEventHdlr               grpctransport.Handler
	AutoGetEventPolicyHdlr         grpctransport.Handler
	AutoGetFlowExportPolicyHdlr    grpctransport.Handler
	AutoGetFwlogPolicyHdlr         grpctransport.Handler
	AutoGetMirrorSessionHdlr       grpctransport.Handler
	AutoGetStatsPolicyHdlr         grpctransport.Handler
	AutoListAlertHdlr              grpctransport.Handler
	AutoListAlertDestinationHdlr   grpctransport.Handler
	AutoListAlertPolicyHdlr        grpctransport.Handler
	AutoListEventHdlr              grpctransport.Handler
	AutoListEventPolicyHdlr        grpctransport.Handler
	AutoListFlowExportPolicyHdlr   grpctransport.Handler
	AutoListFwlogPolicyHdlr        grpctransport.Handler
	AutoListMirrorSessionHdlr      grpctransport.Handler
	AutoListStatsPolicyHdlr        grpctransport.Handler
	AutoUpdateAlertHdlr            grpctransport.Handler
	AutoUpdateAlertDestinationHdlr grpctransport.Handler
	AutoUpdateAlertPolicyHdlr      grpctransport.Handler
	AutoUpdateEventHdlr            grpctransport.Handler
	AutoUpdateEventPolicyHdlr      grpctransport.Handler
	AutoUpdateFlowExportPolicyHdlr grpctransport.Handler
	AutoUpdateFwlogPolicyHdlr      grpctransport.Handler
	AutoUpdateMirrorSessionHdlr    grpctransport.Handler
	AutoUpdateStatsPolicyHdlr      grpctransport.Handler
}

// MakeGRPCServerMonitoringV1 creates a GRPC server for MonitoringV1 service
func MakeGRPCServerMonitoringV1(ctx context.Context, endpoints EndpointsMonitoringV1Server, logger log.Logger) MonitoringV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerMonitoringV1{
		Endpoints: endpoints,
		AutoAddAlertHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlert", logger)))...,
		),

		AutoAddAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlertDestination", logger)))...,
		),

		AutoAddAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddAlertPolicy", logger)))...,
		),

		AutoAddEventHdlr: grpctransport.NewServer(
			endpoints.AutoAddEventEndpoint,
			DecodeGrpcReqEvent,
			EncodeGrpcRespEvent,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddEvent", logger)))...,
		),

		AutoAddEventPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddEventPolicyEndpoint,
			DecodeGrpcReqEventPolicy,
			EncodeGrpcRespEventPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddEventPolicy", logger)))...,
		),

		AutoAddFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddFlowExportPolicy", logger)))...,
		),

		AutoAddFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddFwlogPolicy", logger)))...,
		),

		AutoAddMirrorSessionHdlr: grpctransport.NewServer(
			endpoints.AutoAddMirrorSessionEndpoint,
			DecodeGrpcReqMirrorSession,
			EncodeGrpcRespMirrorSession,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddMirrorSession", logger)))...,
		),

		AutoAddStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddStatsPolicy", logger)))...,
		),

		AutoDeleteAlertHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlert", logger)))...,
		),

		AutoDeleteAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlertDestination", logger)))...,
		),

		AutoDeleteAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteAlertPolicy", logger)))...,
		),

		AutoDeleteEventHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteEventEndpoint,
			DecodeGrpcReqEvent,
			EncodeGrpcRespEvent,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteEvent", logger)))...,
		),

		AutoDeleteEventPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteEventPolicyEndpoint,
			DecodeGrpcReqEventPolicy,
			EncodeGrpcRespEventPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteEventPolicy", logger)))...,
		),

		AutoDeleteFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteFlowExportPolicy", logger)))...,
		),

		AutoDeleteFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteFwlogPolicy", logger)))...,
		),

		AutoDeleteMirrorSessionHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteMirrorSessionEndpoint,
			DecodeGrpcReqMirrorSession,
			EncodeGrpcRespMirrorSession,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteMirrorSession", logger)))...,
		),

		AutoDeleteStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteStatsPolicy", logger)))...,
		),

		AutoGetAlertHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlert", logger)))...,
		),

		AutoGetAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlertDestination", logger)))...,
		),

		AutoGetAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetAlertPolicy", logger)))...,
		),

		AutoGetEventHdlr: grpctransport.NewServer(
			endpoints.AutoGetEventEndpoint,
			DecodeGrpcReqEvent,
			EncodeGrpcRespEvent,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetEvent", logger)))...,
		),

		AutoGetEventPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetEventPolicyEndpoint,
			DecodeGrpcReqEventPolicy,
			EncodeGrpcRespEventPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetEventPolicy", logger)))...,
		),

		AutoGetFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetFlowExportPolicy", logger)))...,
		),

		AutoGetFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetFwlogPolicy", logger)))...,
		),

		AutoGetMirrorSessionHdlr: grpctransport.NewServer(
			endpoints.AutoGetMirrorSessionEndpoint,
			DecodeGrpcReqMirrorSession,
			EncodeGrpcRespMirrorSession,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetMirrorSession", logger)))...,
		),

		AutoGetStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetStatsPolicy", logger)))...,
		),

		AutoListAlertHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlert", logger)))...,
		),

		AutoListAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertDestinationEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertDestinationList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlertDestination", logger)))...,
		),

		AutoListAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListAlertPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespAlertPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListAlertPolicy", logger)))...,
		),

		AutoListEventHdlr: grpctransport.NewServer(
			endpoints.AutoListEventEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespEventList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListEvent", logger)))...,
		),

		AutoListEventPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListEventPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespEventPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListEventPolicy", logger)))...,
		),

		AutoListFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListFlowExportPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFlowExportPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListFlowExportPolicy", logger)))...,
		),

		AutoListFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListFwlogPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespFwlogPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListFwlogPolicy", logger)))...,
		),

		AutoListMirrorSessionHdlr: grpctransport.NewServer(
			endpoints.AutoListMirrorSessionEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespMirrorSessionList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListMirrorSession", logger)))...,
		),

		AutoListStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListStatsPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespStatsPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListStatsPolicy", logger)))...,
		),

		AutoUpdateAlertHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertEndpoint,
			DecodeGrpcReqAlert,
			EncodeGrpcRespAlert,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlert", logger)))...,
		),

		AutoUpdateAlertDestinationHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertDestinationEndpoint,
			DecodeGrpcReqAlertDestination,
			EncodeGrpcRespAlertDestination,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlertDestination", logger)))...,
		),

		AutoUpdateAlertPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateAlertPolicyEndpoint,
			DecodeGrpcReqAlertPolicy,
			EncodeGrpcRespAlertPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateAlertPolicy", logger)))...,
		),

		AutoUpdateEventHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateEventEndpoint,
			DecodeGrpcReqEvent,
			EncodeGrpcRespEvent,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateEvent", logger)))...,
		),

		AutoUpdateEventPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateEventPolicyEndpoint,
			DecodeGrpcReqEventPolicy,
			EncodeGrpcRespEventPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateEventPolicy", logger)))...,
		),

		AutoUpdateFlowExportPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateFlowExportPolicyEndpoint,
			DecodeGrpcReqFlowExportPolicy,
			EncodeGrpcRespFlowExportPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateFlowExportPolicy", logger)))...,
		),

		AutoUpdateFwlogPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateFwlogPolicyEndpoint,
			DecodeGrpcReqFwlogPolicy,
			EncodeGrpcRespFwlogPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateFwlogPolicy", logger)))...,
		),

		AutoUpdateMirrorSessionHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateMirrorSessionEndpoint,
			DecodeGrpcReqMirrorSession,
			EncodeGrpcRespMirrorSession,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateMirrorSession", logger)))...,
		),

		AutoUpdateStatsPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateStatsPolicyEndpoint,
			DecodeGrpcReqStatsPolicy,
			EncodeGrpcRespStatsPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateStatsPolicy", logger)))...,
		),
	}
}

func (s *grpcServerMonitoringV1) AutoAddAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoAddAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddAlert).V
	return &r, resp.(respMonitoringV1AutoAddAlert).Err
}

func decodeHTTPrespMonitoringV1AutoAddAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoAddAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddAlertDestination).V
	return &r, resp.(respMonitoringV1AutoAddAlertDestination).Err
}

func decodeHTTPrespMonitoringV1AutoAddAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoAddAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddAlertPolicy).V
	return &r, resp.(respMonitoringV1AutoAddAlertPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoAddAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddEvent(ctx oldcontext.Context, req *Event) (*Event, error) {
	_, resp, err := s.AutoAddEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddEvent).V
	return &r, resp.(respMonitoringV1AutoAddEvent).Err
}

func decodeHTTPrespMonitoringV1AutoAddEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Event
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddEventPolicy(ctx oldcontext.Context, req *EventPolicy) (*EventPolicy, error) {
	_, resp, err := s.AutoAddEventPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddEventPolicy).V
	return &r, resp.(respMonitoringV1AutoAddEventPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoAddEventPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoAddFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddFlowExportPolicy).V
	return &r, resp.(respMonitoringV1AutoAddFlowExportPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoAddFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoAddFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddFwlogPolicy).V
	return &r, resp.(respMonitoringV1AutoAddFwlogPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoAddFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddMirrorSession(ctx oldcontext.Context, req *MirrorSession) (*MirrorSession, error) {
	_, resp, err := s.AutoAddMirrorSessionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddMirrorSession).V
	return &r, resp.(respMonitoringV1AutoAddMirrorSession).Err
}

func decodeHTTPrespMonitoringV1AutoAddMirrorSession(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MirrorSession
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoAddStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoAddStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoAddStatsPolicy).V
	return &r, resp.(respMonitoringV1AutoAddStatsPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoAddStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoDeleteAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteAlert).V
	return &r, resp.(respMonitoringV1AutoDeleteAlert).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoDeleteAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteAlertDestination).V
	return &r, resp.(respMonitoringV1AutoDeleteAlertDestination).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoDeleteAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteAlertPolicy).V
	return &r, resp.(respMonitoringV1AutoDeleteAlertPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteEvent(ctx oldcontext.Context, req *Event) (*Event, error) {
	_, resp, err := s.AutoDeleteEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteEvent).V
	return &r, resp.(respMonitoringV1AutoDeleteEvent).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Event
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteEventPolicy(ctx oldcontext.Context, req *EventPolicy) (*EventPolicy, error) {
	_, resp, err := s.AutoDeleteEventPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteEventPolicy).V
	return &r, resp.(respMonitoringV1AutoDeleteEventPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteEventPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoDeleteFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteFlowExportPolicy).V
	return &r, resp.(respMonitoringV1AutoDeleteFlowExportPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoDeleteFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteFwlogPolicy).V
	return &r, resp.(respMonitoringV1AutoDeleteFwlogPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteMirrorSession(ctx oldcontext.Context, req *MirrorSession) (*MirrorSession, error) {
	_, resp, err := s.AutoDeleteMirrorSessionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteMirrorSession).V
	return &r, resp.(respMonitoringV1AutoDeleteMirrorSession).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteMirrorSession(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MirrorSession
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoDeleteStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoDeleteStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoDeleteStatsPolicy).V
	return &r, resp.(respMonitoringV1AutoDeleteStatsPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoDeleteStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoGetAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetAlert).V
	return &r, resp.(respMonitoringV1AutoGetAlert).Err
}

func decodeHTTPrespMonitoringV1AutoGetAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoGetAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetAlertDestination).V
	return &r, resp.(respMonitoringV1AutoGetAlertDestination).Err
}

func decodeHTTPrespMonitoringV1AutoGetAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoGetAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetAlertPolicy).V
	return &r, resp.(respMonitoringV1AutoGetAlertPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoGetAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetEvent(ctx oldcontext.Context, req *Event) (*Event, error) {
	_, resp, err := s.AutoGetEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetEvent).V
	return &r, resp.(respMonitoringV1AutoGetEvent).Err
}

func decodeHTTPrespMonitoringV1AutoGetEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Event
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetEventPolicy(ctx oldcontext.Context, req *EventPolicy) (*EventPolicy, error) {
	_, resp, err := s.AutoGetEventPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetEventPolicy).V
	return &r, resp.(respMonitoringV1AutoGetEventPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoGetEventPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoGetFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetFlowExportPolicy).V
	return &r, resp.(respMonitoringV1AutoGetFlowExportPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoGetFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoGetFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetFwlogPolicy).V
	return &r, resp.(respMonitoringV1AutoGetFwlogPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoGetFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetMirrorSession(ctx oldcontext.Context, req *MirrorSession) (*MirrorSession, error) {
	_, resp, err := s.AutoGetMirrorSessionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetMirrorSession).V
	return &r, resp.(respMonitoringV1AutoGetMirrorSession).Err
}

func decodeHTTPrespMonitoringV1AutoGetMirrorSession(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MirrorSession
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoGetStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoGetStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoGetStatsPolicy).V
	return &r, resp.(respMonitoringV1AutoGetStatsPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoGetStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListAlert(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertList, error) {
	_, resp, err := s.AutoListAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListAlert).V
	return &r, resp.(respMonitoringV1AutoListAlert).Err
}

func decodeHTTPrespMonitoringV1AutoListAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListAlertDestination(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertDestinationList, error) {
	_, resp, err := s.AutoListAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListAlertDestination).V
	return &r, resp.(respMonitoringV1AutoListAlertDestination).Err
}

func decodeHTTPrespMonitoringV1AutoListAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestinationList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListAlertPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*AlertPolicyList, error) {
	_, resp, err := s.AutoListAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListAlertPolicy).V
	return &r, resp.(respMonitoringV1AutoListAlertPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoListAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListEvent(ctx oldcontext.Context, req *api.ListWatchOptions) (*EventList, error) {
	_, resp, err := s.AutoListEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListEvent).V
	return &r, resp.(respMonitoringV1AutoListEvent).Err
}

func decodeHTTPrespMonitoringV1AutoListEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListEventPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*EventPolicyList, error) {
	_, resp, err := s.AutoListEventPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListEventPolicy).V
	return &r, resp.(respMonitoringV1AutoListEventPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoListEventPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListFlowExportPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*FlowExportPolicyList, error) {
	_, resp, err := s.AutoListFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListFlowExportPolicy).V
	return &r, resp.(respMonitoringV1AutoListFlowExportPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoListFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListFwlogPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*FwlogPolicyList, error) {
	_, resp, err := s.AutoListFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListFwlogPolicy).V
	return &r, resp.(respMonitoringV1AutoListFwlogPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoListFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListMirrorSession(ctx oldcontext.Context, req *api.ListWatchOptions) (*MirrorSessionList, error) {
	_, resp, err := s.AutoListMirrorSessionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListMirrorSession).V
	return &r, resp.(respMonitoringV1AutoListMirrorSession).Err
}

func decodeHTTPrespMonitoringV1AutoListMirrorSession(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MirrorSessionList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoListStatsPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*StatsPolicyList, error) {
	_, resp, err := s.AutoListStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoListStatsPolicy).V
	return &r, resp.(respMonitoringV1AutoListStatsPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoListStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateAlert(ctx oldcontext.Context, req *Alert) (*Alert, error) {
	_, resp, err := s.AutoUpdateAlertHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateAlert).V
	return &r, resp.(respMonitoringV1AutoUpdateAlert).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateAlert(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Alert
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateAlertDestination(ctx oldcontext.Context, req *AlertDestination) (*AlertDestination, error) {
	_, resp, err := s.AutoUpdateAlertDestinationHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateAlertDestination).V
	return &r, resp.(respMonitoringV1AutoUpdateAlertDestination).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateAlertDestination(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertDestination
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateAlertPolicy(ctx oldcontext.Context, req *AlertPolicy) (*AlertPolicy, error) {
	_, resp, err := s.AutoUpdateAlertPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateAlertPolicy).V
	return &r, resp.(respMonitoringV1AutoUpdateAlertPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateAlertPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp AlertPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateEvent(ctx oldcontext.Context, req *Event) (*Event, error) {
	_, resp, err := s.AutoUpdateEventHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateEvent).V
	return &r, resp.(respMonitoringV1AutoUpdateEvent).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateEvent(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp Event
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateEventPolicy(ctx oldcontext.Context, req *EventPolicy) (*EventPolicy, error) {
	_, resp, err := s.AutoUpdateEventPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateEventPolicy).V
	return &r, resp.(respMonitoringV1AutoUpdateEventPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateEventPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp EventPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateFlowExportPolicy(ctx oldcontext.Context, req *FlowExportPolicy) (*FlowExportPolicy, error) {
	_, resp, err := s.AutoUpdateFlowExportPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateFlowExportPolicy).V
	return &r, resp.(respMonitoringV1AutoUpdateFlowExportPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateFlowExportPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FlowExportPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateFwlogPolicy(ctx oldcontext.Context, req *FwlogPolicy) (*FwlogPolicy, error) {
	_, resp, err := s.AutoUpdateFwlogPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateFwlogPolicy).V
	return &r, resp.(respMonitoringV1AutoUpdateFwlogPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateFwlogPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp FwlogPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateMirrorSession(ctx oldcontext.Context, req *MirrorSession) (*MirrorSession, error) {
	_, resp, err := s.AutoUpdateMirrorSessionHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateMirrorSession).V
	return &r, resp.(respMonitoringV1AutoUpdateMirrorSession).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateMirrorSession(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp MirrorSession
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoUpdateStatsPolicy(ctx oldcontext.Context, req *StatsPolicy) (*StatsPolicy, error) {
	_, resp, err := s.AutoUpdateStatsPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respMonitoringV1AutoUpdateStatsPolicy).V
	return &r, resp.(respMonitoringV1AutoUpdateStatsPolicy).Err
}

func decodeHTTPrespMonitoringV1AutoUpdateStatsPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp StatsPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerMonitoringV1) AutoWatchEvent(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventServer) error {
	return s.Endpoints.AutoWatchEvent(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchEventPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchEventPolicyServer) error {
	return s.Endpoints.AutoWatchEventPolicy(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchStatsPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchStatsPolicyServer) error {
	return s.Endpoints.AutoWatchStatsPolicy(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchFwlogPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFwlogPolicyServer) error {
	return s.Endpoints.AutoWatchFwlogPolicy(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchFlowExportPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchFlowExportPolicyServer) error {
	return s.Endpoints.AutoWatchFlowExportPolicy(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchAlert(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertServer) error {
	return s.Endpoints.AutoWatchAlert(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchAlertPolicy(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertPolicyServer) error {
	return s.Endpoints.AutoWatchAlertPolicy(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchAlertDestination(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchAlertDestinationServer) error {
	return s.Endpoints.AutoWatchAlertDestination(in, stream)
}

func (s *grpcServerMonitoringV1) AutoWatchMirrorSession(in *api.ListWatchOptions, stream MonitoringV1_AutoWatchMirrorSessionServer) error {
	return s.Endpoints.AutoWatchMirrorSession(in, stream)
}

func encodeHTTPAlertDestinationList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertDestinationList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertDestinationList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertDestinationList encodes GRPC request
func EncodeGrpcReqAlertDestinationList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationList)
	return req, nil
}

// DecodeGrpcReqAlertDestinationList decodes GRPC request
func DecodeGrpcReqAlertDestinationList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertDestinationList)
	return req, nil
}

// EncodeGrpcRespAlertDestinationList endodes the GRPC response
func EncodeGrpcRespAlertDestinationList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertDestinationList decodes the GRPC response
func DecodeGrpcRespAlertDestinationList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertList encodes GRPC request
func EncodeGrpcReqAlertList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertList)
	return req, nil
}

// DecodeGrpcReqAlertList decodes GRPC request
func DecodeGrpcReqAlertList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertList)
	return req, nil
}

// EncodeGrpcRespAlertList endodes the GRPC response
func EncodeGrpcRespAlertList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertList decodes the GRPC response
func DecodeGrpcRespAlertList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPAlertPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPAlertPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req AlertPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqAlertPolicyList encodes GRPC request
func EncodeGrpcReqAlertPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyList)
	return req, nil
}

// DecodeGrpcReqAlertPolicyList decodes GRPC request
func DecodeGrpcReqAlertPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*AlertPolicyList)
	return req, nil
}

// EncodeGrpcRespAlertPolicyList endodes the GRPC response
func EncodeGrpcRespAlertPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespAlertPolicyList decodes the GRPC response
func DecodeGrpcRespAlertPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventList(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventList encodes GRPC request
func EncodeGrpcReqEventList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventList)
	return req, nil
}

// DecodeGrpcReqEventList decodes GRPC request
func DecodeGrpcReqEventList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventList)
	return req, nil
}

// EncodeGrpcRespEventList endodes the GRPC response
func EncodeGrpcRespEventList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventList decodes the GRPC response
func DecodeGrpcRespEventList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPEventPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPEventPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req EventPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqEventPolicyList encodes GRPC request
func EncodeGrpcReqEventPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicyList)
	return req, nil
}

// DecodeGrpcReqEventPolicyList decodes GRPC request
func DecodeGrpcReqEventPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*EventPolicyList)
	return req, nil
}

// EncodeGrpcRespEventPolicyList endodes the GRPC response
func EncodeGrpcRespEventPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespEventPolicyList decodes the GRPC response
func DecodeGrpcRespEventPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFlowExportPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFlowExportPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FlowExportPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFlowExportPolicyList encodes GRPC request
func EncodeGrpcReqFlowExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyList)
	return req, nil
}

// DecodeGrpcReqFlowExportPolicyList decodes GRPC request
func DecodeGrpcReqFlowExportPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FlowExportPolicyList)
	return req, nil
}

// EncodeGrpcRespFlowExportPolicyList endodes the GRPC response
func EncodeGrpcRespFlowExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFlowExportPolicyList decodes the GRPC response
func DecodeGrpcRespFlowExportPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPFwlogPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPFwlogPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req FwlogPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqFwlogPolicyList encodes GRPC request
func EncodeGrpcReqFwlogPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyList)
	return req, nil
}

// DecodeGrpcReqFwlogPolicyList decodes GRPC request
func DecodeGrpcReqFwlogPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*FwlogPolicyList)
	return req, nil
}

// EncodeGrpcRespFwlogPolicyList endodes the GRPC response
func EncodeGrpcRespFwlogPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespFwlogPolicyList decodes the GRPC response
func DecodeGrpcRespFwlogPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPMirrorSessionList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPMirrorSessionList(_ context.Context, r *http.Request) (interface{}, error) {
	var req MirrorSessionList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqMirrorSessionList encodes GRPC request
func EncodeGrpcReqMirrorSessionList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MirrorSessionList)
	return req, nil
}

// DecodeGrpcReqMirrorSessionList decodes GRPC request
func DecodeGrpcReqMirrorSessionList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*MirrorSessionList)
	return req, nil
}

// EncodeGrpcRespMirrorSessionList endodes the GRPC response
func EncodeGrpcRespMirrorSessionList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespMirrorSessionList decodes the GRPC response
func DecodeGrpcRespMirrorSessionList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPStatsPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPStatsPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req StatsPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqStatsPolicyList encodes GRPC request
func EncodeGrpcReqStatsPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyList)
	return req, nil
}

// DecodeGrpcReqStatsPolicyList decodes GRPC request
func DecodeGrpcReqStatsPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*StatsPolicyList)
	return req, nil
}

// EncodeGrpcRespStatsPolicyList endodes the GRPC response
func EncodeGrpcRespStatsPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespStatsPolicyList decodes the GRPC response
func DecodeGrpcRespStatsPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
