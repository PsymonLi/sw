// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoring is a auto generated package.
Input file: auditpolicy.proto
*/
package monitoring

import (
	"errors"
	fmt "fmt"
	"strings"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ref"

	validators "github.com/pensando/sw/venice/utils/apigen/validators"

	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

var _ validators.DummyVar
var validatorMapAuditpolicy = make(map[string]map[string][]func(string, interface{}) error)

// MakeKey generates a KV store key for the object
func (m *AuditPolicy) MakeKey(prefix string) string {
	return fmt.Sprint(globals.ConfigRootPrefix, "/", prefix, "/", "audit-policy/", m.Tenant, "/Singleton")
}

func (m *AuditPolicy) MakeURI(cat, ver, prefix string) string {
	in := m
	return fmt.Sprint("/", cat, "/", prefix, "/", ver, "/tenant/", in.Tenant, "/audit-policy")
}

// Clone clones the object into into or creates one of into is nil
func (m *AuditPolicy) Clone(into interface{}) (interface{}, error) {
	var out *AuditPolicy
	var ok bool
	if into == nil {
		out = &AuditPolicy{}
	} else {
		out, ok = into.(*AuditPolicy)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuditPolicy))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuditPolicy) Defaults(ver string) bool {
	var ret bool
	m.Kind = "AuditPolicy"
	ret = m.Tenant != "default" || m.Namespace != "default"
	if ret {
		m.Tenant, m.Namespace = "default", "default"
	}
	ret = m.Spec.Defaults(ver) || ret
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AuditPolicySpec) Clone(into interface{}) (interface{}, error) {
	var out *AuditPolicySpec
	var ok bool
	if into == nil {
		out = &AuditPolicySpec{}
	} else {
		out, ok = into.(*AuditPolicySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuditPolicySpec))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuditPolicySpec) Defaults(ver string) bool {
	var ret bool
	if m.Syslog != nil {
		ret = m.Syslog.Defaults(ver) || ret
	}
	return ret
}

// Clone clones the object into into or creates one of into is nil
func (m *AuditPolicyStatus) Clone(into interface{}) (interface{}, error) {
	var out *AuditPolicyStatus
	var ok bool
	if into == nil {
		out = &AuditPolicyStatus{}
	} else {
		out, ok = into.(*AuditPolicyStatus)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*AuditPolicyStatus))
	return out, nil
}

// Default sets up the defaults for the object
func (m *AuditPolicyStatus) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *SyslogAuditor) Clone(into interface{}) (interface{}, error) {
	var out *SyslogAuditor
	var ok bool
	if into == nil {
		out = &SyslogAuditor{}
	} else {
		out, ok = into.(*SyslogAuditor)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *(ref.DeepCopy(m).(*SyslogAuditor))
	return out, nil
}

// Default sets up the defaults for the object
func (m *SyslogAuditor) Defaults(ver string) bool {
	var ret bool
	ret = true
	switch ver {
	default:
		m.Format = "syslog-bsd"
	}
	return ret
}

// Validators and Requirements

func (m *AuditPolicy) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

	tenant = m.Tenant

	{

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		tag := path + dlmtr + "meta.tenant"
		uref, ok := resp[tag]
		if !ok {
			uref = apiintf.ReferenceObj{
				RefType: apiintf.ReferenceType("NamedRef"),
				RefKind: "Tenant",
			}
		}

		if m.Tenant != "" {
			uref.Refs = append(uref.Refs, globals.ConfigRootPrefix+"/cluster/"+"tenants/"+m.Tenant)
		}

		if len(uref.Refs) > 0 {
			resp[tag] = uref
		}
	}
}

func (m *AuditPolicy) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Namespace != "default" {
		ret = append(ret, errors.New("Only Namespace default is allowed for AuditPolicy"))
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "ObjectMeta"
		if errs := m.ObjectMeta.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	if !ignoreSpec {

		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}

	{
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Spec"
		if errs := m.Spec.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *AuditPolicy) Normalize() {

	m.ObjectMeta.Normalize()

	m.Spec.Normalize()

}

func (m *AuditPolicySpec) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AuditPolicySpec) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.Syslog != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "Syslog"
			if errs := m.Syslog.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	return ret
}

func (m *AuditPolicySpec) Normalize() {

	if m.Syslog != nil {
		m.Syslog.Normalize()
	}

}

func (m *AuditPolicyStatus) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *AuditPolicyStatus) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error
	return ret
}

func (m *AuditPolicyStatus) Normalize() {

}

func (m *SyslogAuditor) References(tenant string, path string, resp map[string]apiintf.ReferenceObj) {

}

func (m *SyslogAuditor) Validate(ver, path string, ignoreStatus bool, ignoreSpec bool) []error {
	var ret []error

	if m.SyslogConfig != nil {
		{
			dlmtr := "."
			if path == "" {
				dlmtr = ""
			}
			npath := path + dlmtr + "SyslogConfig"
			if errs := m.SyslogConfig.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
				ret = append(ret, errs...)
			}
		}
	}
	for k, v := range m.Targets {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := fmt.Sprintf("%s%sTargets[%v]", path, dlmtr, k)
		if errs := v.Validate(ver, npath, ignoreStatus, ignoreSpec); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if vs, ok := validatorMapAuditpolicy["SyslogAuditor"][ver]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	} else if vs, ok := validatorMapAuditpolicy["SyslogAuditor"]["all"]; ok {
		for _, v := range vs {
			if err := v(path, m); err != nil {
				ret = append(ret, err)
			}
		}
	}
	return ret
}

func (m *SyslogAuditor) Normalize() {

	m.Format = MonitoringExportFormat_normal[strings.ToLower(m.Format)]

	if m.SyslogConfig != nil {
		m.SyslogConfig.Normalize()
	}

	for k, v := range m.Targets {
		if v != nil {
			v.Normalize()
			m.Targets[k] = v
		}
	}

}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes(
		&AuditPolicy{},
	)

	validatorMapAuditpolicy = make(map[string]map[string][]func(string, interface{}) error)

	validatorMapAuditpolicy["SyslogAuditor"] = make(map[string][]func(string, interface{}) error)
	validatorMapAuditpolicy["SyslogAuditor"]["all"] = append(validatorMapAuditpolicy["SyslogAuditor"]["all"], func(path string, i interface{}) error {
		m := i.(*SyslogAuditor)

		if _, ok := MonitoringExportFormat_vvalue[m.Format]; !ok {
			vals := []string{}
			for k1, _ := range MonitoringExportFormat_vvalue {
				vals = append(vals, k1)
			}
			return fmt.Errorf("%v did not match allowed strings %v", path+"."+"Format", vals)
		}
		return nil
	})

}
