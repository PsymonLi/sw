// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package monitoringApiServer is a auto generated package.
Input file: events.proto
*/
package monitoring

import (
	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapEvents = map[string]*runtime.Struct{

	"monitoring.Event": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Attributes": runtime.Field{Name: "Attributes", JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.EventAttributes"},
		},
	},
	"monitoring.EventAttributes": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Severity": runtime.Field{Name: "Severity", JSONTag: "severity", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Type": runtime.Field{Name: "Type", JSONTag: "type", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Message": runtime.Field{Name: "Message", JSONTag: "message", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"ObjectRef": runtime.Field{Name: "ObjectRef", JSONTag: "object-ref", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectRef"},

			"Source": runtime.Field{Name: "Source", JSONTag: "source", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.EventSource"},

			"Count": runtime.Field{Name: "Count", JSONTag: "count", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_UINT32"},
		},
	},
	"monitoring.EventExport": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Targets": runtime.Field{Name: "Targets", JSONTag: "targets", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "api.ExportConfig"},

			"Format": runtime.Field{Name: "Format", JSONTag: "format", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Selector": runtime.Field{Name: "Selector", JSONTag: "selector", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "fields.Selector"},

			"SyslogConfig": runtime.Field{Name: "SyslogConfig", JSONTag: "syslog-config", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.SyslogExportConfig"},
		},
	},
	"monitoring.EventPolicy": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"T": runtime.Field{Name: "T", JSONTag: "", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.TypeMeta"},

			"O": runtime.Field{Name: "O", JSONTag: "meta", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.ObjectMeta"},

			"Spec": runtime.Field{Name: "Spec", JSONTag: "spec", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.EventPolicySpec"},

			"Status": runtime.Field{Name: "Status", JSONTag: "status", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "monitoring.EventPolicyStatus"},
		},
	},
	"monitoring.EventPolicySpec": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Exports": runtime.Field{Name: "Exports", JSONTag: "exports", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.EventExport"},

			"MaxRetentionTime": runtime.Field{Name: "MaxRetentionTime", JSONTag: "max-retention-time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.EventPolicyStatus": &runtime.Struct{
		Fields: map[string]runtime.Field{},
	},
	"monitoring.EventSource": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Component": runtime.Field{Name: "Component", JSONTag: "component", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"NodeName": runtime.Field{Name: "NodeName", JSONTag: "node-name", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"monitoring.EventsList": &runtime.Struct{
		Fields: map[string]runtime.Field{
			"Events": runtime.Field{Name: "Events", JSONTag: "", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "monitoring.Event"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapEvents)
}
