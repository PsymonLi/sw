// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package retention is a auto generated package.
Input file: protos/retention.proto
*/
package retention

import (
	"context"
	"encoding/json"
	"net/http"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	oldcontext "golang.org/x/net/context"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

type grpcServerRetentionPolicyV1 struct {
	Endpoints EndpointsRetentionPolicyV1Server

	AutoAddRetentionPolicyHdlr    grpctransport.Handler
	AutoDeleteRetentionPolicyHdlr grpctransport.Handler
	AutoGetRetentionPolicyHdlr    grpctransport.Handler
	AutoListRetentionPolicyHdlr   grpctransport.Handler
	AutoUpdateRetentionPolicyHdlr grpctransport.Handler
}

// MakeGRPCServerRetentionPolicyV1 creates a GRPC server for RetentionPolicyV1 service
func MakeGRPCServerRetentionPolicyV1(ctx context.Context, endpoints EndpointsRetentionPolicyV1Server, logger log.Logger) RetentionPolicyV1Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServerRetentionPolicyV1{
		Endpoints: endpoints,
		AutoAddRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoAddRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoAddRetentionPolicy", logger)))...,
		),

		AutoDeleteRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoDeleteRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoDeleteRetentionPolicy", logger)))...,
		),

		AutoGetRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoGetRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoGetRetentionPolicy", logger)))...,
		),

		AutoListRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoListRetentionPolicyEndpoint,
			DecodeGrpcReqListWatchOptions,
			EncodeGrpcRespRetentionPolicyList,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoListRetentionPolicy", logger)))...,
		),

		AutoUpdateRetentionPolicyHdlr: grpctransport.NewServer(
			endpoints.AutoUpdateRetentionPolicyEndpoint,
			DecodeGrpcReqRetentionPolicy,
			EncodeGrpcRespRetentionPolicy,
			append(options, grpctransport.ServerBefore(trace.FromGRPCRequest("AutoUpdateRetentionPolicy", logger)))...,
		),
	}
}

func (s *grpcServerRetentionPolicyV1) AutoAddRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoAddRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoAddRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoAddRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoAddRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoDeleteRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoDeleteRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoDeleteRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoDeleteRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoDeleteRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoGetRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoGetRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoGetRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoGetRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoGetRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoListRetentionPolicy(ctx oldcontext.Context, req *api.ListWatchOptions) (*RetentionPolicyList, error) {
	_, resp, err := s.AutoListRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoListRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoListRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoListRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicyList
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoUpdateRetentionPolicy(ctx oldcontext.Context, req *RetentionPolicy) (*RetentionPolicy, error) {
	_, resp, err := s.AutoUpdateRetentionPolicyHdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(respRetentionPolicyV1AutoUpdateRetentionPolicy).V
	return &r, resp.(respRetentionPolicyV1AutoUpdateRetentionPolicy).Err
}

func decodeHTTPrespRetentionPolicyV1AutoUpdateRetentionPolicy(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp RetentionPolicy
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func (s *grpcServerRetentionPolicyV1) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) error {
	return s.Endpoints.AutoWatchRetentionPolicy(in, stream)
}

func encodeHTTPRetentionPolicy(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicy(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicy
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicy encodes GRPC request
func EncodeGrpcReqRetentionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicy)
	return req, nil
}

// DecodeGrpcReqRetentionPolicy decodes GRPC request
func DecodeGrpcReqRetentionPolicy(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicy)
	return req, nil
}

// EncodeGrpcRespRetentionPolicy encodes GRC response
func EncodeGrpcRespRetentionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicy decodes GRPC response
func DecodeGrpcRespRetentionPolicy(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicyList(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicyList(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicyList
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicyList encodes GRPC request
func EncodeGrpcReqRetentionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyList)
	return req, nil
}

// DecodeGrpcReqRetentionPolicyList decodes GRPC request
func DecodeGrpcReqRetentionPolicyList(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyList)
	return req, nil
}

// EncodeGrpcRespRetentionPolicyList endodes the GRPC response
func EncodeGrpcRespRetentionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicyList decodes the GRPC response
func DecodeGrpcRespRetentionPolicyList(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicySpec encodes GRPC request
func EncodeGrpcReqRetentionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicySpec)
	return req, nil
}

// DecodeGrpcReqRetentionPolicySpec decodes GRPC request
func DecodeGrpcReqRetentionPolicySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicySpec)
	return req, nil
}

// EncodeGrpcRespRetentionPolicySpec encodes GRC response
func EncodeGrpcRespRetentionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicySpec decodes GRPC response
func DecodeGrpcRespRetentionPolicySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPRetentionPolicyStatus(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPRetentionPolicyStatus(_ context.Context, r *http.Request) (interface{}, error) {
	var req RetentionPolicyStatus
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqRetentionPolicyStatus encodes GRPC request
func EncodeGrpcReqRetentionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyStatus)
	return req, nil
}

// DecodeGrpcReqRetentionPolicyStatus decodes GRPC request
func DecodeGrpcReqRetentionPolicyStatus(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*RetentionPolicyStatus)
	return req, nil
}

// EncodeGrpcRespRetentionPolicyStatus encodes GRC response
func EncodeGrpcRespRetentionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespRetentionPolicyStatus decodes GRPC response
func DecodeGrpcRespRetentionPolicyStatus(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
