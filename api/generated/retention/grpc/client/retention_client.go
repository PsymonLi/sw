// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	oldlog "log"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	retention "github.com/pensando/sw/api/generated/retention"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	apiserver "github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewRetentionPolicyV1 sets up a new client for RetentionPolicyV1
func NewRetentionPolicyV1(conn *grpc.ClientConn, logger log.Logger) retention.ServiceRetentionPolicyV1Client {

	var lAutoAddRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoAddRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"retention.RetentionPolicyV1",
			"AutoAddRetentionPolicy",
			retention.EncodeGrpcReqRetentionPolicy,
			retention.DecodeGrpcRespRetentionPolicy,
			&retention.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoAddRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoAddRetentionPolicy")(lAutoAddRetentionPolicyEndpoint)
	}
	var lAutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoDeleteRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"retention.RetentionPolicyV1",
			"AutoDeleteRetentionPolicy",
			retention.EncodeGrpcReqRetentionPolicy,
			retention.DecodeGrpcRespRetentionPolicy,
			&retention.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoDeleteRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoDeleteRetentionPolicy")(lAutoDeleteRetentionPolicyEndpoint)
	}
	var lAutoGetRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoGetRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"retention.RetentionPolicyV1",
			"AutoGetRetentionPolicy",
			retention.EncodeGrpcReqRetentionPolicy,
			retention.DecodeGrpcRespRetentionPolicy,
			&retention.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoGetRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoGetRetentionPolicy")(lAutoGetRetentionPolicyEndpoint)
	}
	var lAutoListRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoListRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"retention.RetentionPolicyV1",
			"AutoListRetentionPolicy",
			retention.EncodeGrpcReqListWatchOptions,
			retention.DecodeGrpcRespRetentionPolicyList,
			&retention.RetentionPolicyList{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoListRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoListRetentionPolicy")(lAutoListRetentionPolicyEndpoint)
	}
	var lAutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
	{
		lAutoUpdateRetentionPolicyEndpoint = grpctransport.NewClient(
			conn,
			"retention.RetentionPolicyV1",
			"AutoUpdateRetentionPolicy",
			retention.EncodeGrpcReqRetentionPolicy,
			retention.DecodeGrpcRespRetentionPolicy,
			&retention.RetentionPolicy{},
			grpctransport.ClientBefore(opentracing.ToGRPCRequest(stdopentracing.GlobalTracer(), logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lAutoUpdateRetentionPolicyEndpoint = opentracing.TraceClient(stdopentracing.GlobalTracer(), "RetentionPolicyV1:AutoUpdateRetentionPolicy")(lAutoUpdateRetentionPolicyEndpoint)
	}
	return retention.EndpointsRetentionPolicyV1Client{
		Client: retention.NewRetentionPolicyV1Client(conn),

		AutoAddRetentionPolicyEndpoint:    lAutoAddRetentionPolicyEndpoint,
		AutoDeleteRetentionPolicyEndpoint: lAutoDeleteRetentionPolicyEndpoint,
		AutoGetRetentionPolicyEndpoint:    lAutoGetRetentionPolicyEndpoint,
		AutoListRetentionPolicyEndpoint:   lAutoListRetentionPolicyEndpoint,
		AutoUpdateRetentionPolicyEndpoint: lAutoUpdateRetentionPolicyEndpoint,
	}
}

// NewRetentionPolicyV1Backend creates an instrumented client with middleware
func NewRetentionPolicyV1Backend(conn *grpc.ClientConn, logger log.Logger) retention.ServiceRetentionPolicyV1Client {
	cl := NewRetentionPolicyV1(conn, logger)
	cl = retention.LoggingRetentionPolicyV1MiddlewareClient(logger)(cl)
	return cl
}

type grpcObjRetentionPolicyV1RetentionPolicy struct {
	logger log.Logger
	client retention.ServiceRetentionPolicyV1Client
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Create(ctx context.Context, in *retention.RetentionPolicy) (*retention.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "recieved call", "object", "RetentionPolicy", "oper", "create")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoAddRetentionPolicy(nctx, in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Update(ctx context.Context, in *retention.RetentionPolicy) (*retention.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "update")
	if in == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	return a.client.AutoUpdateRetentionPolicy(nctx, in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*retention.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "get")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := retention.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoGetRetentionPolicy(nctx, &in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*retention.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "delete")
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := retention.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	nctx := addVersion(ctx, "v1")
	return a.client.AutoDeleteRetentionPolicy(nctx, &in)
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*retention.RetentionPolicy, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "list")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	nctx := addVersion(ctx, "v1")
	r, err := a.client.AutoListRetentionPolicy(nctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	a.logger.DebugLog("msg", "received call", "object", "RetentionPolicy", "oper", "WatchOper")
	nctx := addVersion(ctx, "v1")
	if options == nil {
		return nil, errors.New("invalid input")
	}
	stream, err := a.client.AutoWatchRetentionPolicy(nctx, options)
	if err != nil {
		return nil, err
	}
	wstream := stream.(retention.RetentionPolicyV1_AutoWatchRetentionPolicyClient)
	bridgefn := func(lw *listerwatcher.WatcherClient) {
		for {
			r, err := wstream.Recv()
			if err != nil {
				a.logger.ErrorLog("msg", "error on recieve", "error", err)
				close(lw.OutCh)
				return
			}
			ev := kvstore.WatchEvent{
				Type:   kvstore.WatchEventType(r.Type),
				Object: r.Object,
			}
			lw.OutCh <- &ev
		}
	}
	lw := listerwatcher.NewWatcherClient(wstream, bridgefn)
	lw.Run()
	return lw, nil
}

func (a *grpcObjRetentionPolicyV1RetentionPolicy) Allowed(oper apiserver.APIOperType) bool {
	return true
}

type restObjRetentionPolicyV1RetentionPolicy struct {
	endpoints retention.EndpointsRetentionPolicyV1RestClient
	instance  string
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Create(ctx context.Context, in *retention.RetentionPolicy) (*retention.RetentionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoAddRetentionPolicy(ctx, in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Update(ctx context.Context, in *retention.RetentionPolicy) (*retention.RetentionPolicy, error) {
	if in == nil {
		return nil, errors.New("invalid input")
	}
	return a.endpoints.AutoUpdateRetentionPolicy(ctx, in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Get(ctx context.Context, objMeta *api.ObjectMeta) (*retention.RetentionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := retention.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoGetRetentionPolicy(ctx, &in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*retention.RetentionPolicy, error) {
	if objMeta == nil {
		return nil, errors.New("invalid input")
	}
	in := retention.RetentionPolicy{}
	in.ObjectMeta = *objMeta
	return a.endpoints.AutoDeleteRetentionPolicy(ctx, &in)
}

func (a *restObjRetentionPolicyV1RetentionPolicy) List(ctx context.Context, options *api.ListWatchOptions) ([]*retention.RetentionPolicy, error) {
	if options == nil {
		return nil, errors.New("invalid input")
	}
	r, err := a.endpoints.AutoListRetentionPolicy(ctx, options)
	if err == nil {
		return r.Items, nil
	}
	return nil, err
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("not allowed")
}

func (a *restObjRetentionPolicyV1RetentionPolicy) Allowed(oper apiserver.APIOperType) bool {
	switch oper {
	case apiserver.CreateOper:
		return true
	case apiserver.UpdateOper:
		return true
	case apiserver.GetOper:
		return true
	case apiserver.DeleteOper:
		return true
	case apiserver.ListOper:
		return false
	case apiserver.WatchOper:
		return false
	default:
		return false
	}
}

type crudClientRetentionPolicyV1 struct {
	grpcRetentionPolicy retention.RetentionPolicyInterface
}

// NewGrpcCrudClientRetentionPolicyV1 creates a GRPC client for the service
func NewGrpcCrudClientRetentionPolicyV1(conn *grpc.ClientConn, logger log.Logger) retention.RetentionPolicyV1Interface {
	client := NewRetentionPolicyV1Backend(conn, logger)
	return &crudClientRetentionPolicyV1{

		grpcRetentionPolicy: &grpcObjRetentionPolicyV1RetentionPolicy{client: client, logger: logger},
	}
}

func (a *crudClientRetentionPolicyV1) RetentionPolicy() retention.RetentionPolicyInterface {
	return a.grpcRetentionPolicy
}

type crudRestClientRetentionPolicyV1 struct {
	restRetentionPolicy retention.RetentionPolicyInterface
}

// NewRestCrudClientRetentionPolicyV1 creates a REST client for the service.
func NewRestCrudClientRetentionPolicyV1(url string) retention.RetentionPolicyV1Interface {
	endpoints, err := retention.MakeRetentionPolicyV1RestClientEndpoints(url)
	if err != nil {
		oldlog.Fatal("failed to create client")
	}
	return &crudRestClientRetentionPolicyV1{

		restRetentionPolicy: &restObjRetentionPolicyV1RetentionPolicy{endpoints: endpoints, instance: url},
	}
}

func (a *crudRestClientRetentionPolicyV1) RetentionPolicy() retention.RetentionPolicyInterface {
	return a.restRetentionPolicy
}
