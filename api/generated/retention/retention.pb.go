// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: retention.proto

/*
	Package retention is a generated protocol buffer package.

	Service name

	It is generated from these files:
		retention.proto

	It has these top-level messages:
		AutoMsgRetentionPolicyWatchHelper
		RetentionPolicy
		RetentionPolicyList
		RetentionPolicySpec
		RetentionPolicyStatus
*/
package retention

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AutoMsgRetentionPolicyWatchHelper struct {
	// Compaction Interval is the time in minutes, hours or days before compaction starts on the data
	// Compaction results into data granularity loss, therefore this period is kept to be as high as space permits
	// for how much data is being collected
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Compaction Method specifies the method to be used for aggregation i.e. 'linear', 'exponential'
	// When compaction method is is unspecified system defaults to exponential aggregation over the period of time
	Object *RetentionPolicy `protobuf:"bytes,2,opt,name=Object" json:"Object,omitempty"`
}

func (m *AutoMsgRetentionPolicyWatchHelper) Reset()         { *m = AutoMsgRetentionPolicyWatchHelper{} }
func (m *AutoMsgRetentionPolicyWatchHelper) String() string { return proto.CompactTextString(m) }
func (*AutoMsgRetentionPolicyWatchHelper) ProtoMessage()    {}
func (*AutoMsgRetentionPolicyWatchHelper) Descriptor() ([]byte, []int) {
	return fileDescriptorRetention, []int{0}
}

func (m *AutoMsgRetentionPolicyWatchHelper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AutoMsgRetentionPolicyWatchHelper) GetObject() *RetentionPolicy {
	if m != nil {
		return m.Object
	}
	return nil
}

type RetentionPolicy struct {
	// list of monitoring policies that refer to this collection policy
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	// list of event policies that refer to this collection policy
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	Spec           RetentionPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         RetentionPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *RetentionPolicy) Reset()                    { *m = RetentionPolicy{} }
func (m *RetentionPolicy) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicy) ProtoMessage()               {}
func (*RetentionPolicy) Descriptor() ([]byte, []int) { return fileDescriptorRetention, []int{1} }

func (m *RetentionPolicy) GetSpec() RetentionPolicySpec {
	if m != nil {
		return m.Spec
	}
	return RetentionPolicySpec{}
}

func (m *RetentionPolicy) GetStatus() RetentionPolicyStatus {
	if m != nil {
		return m.Status
	}
	return RetentionPolicyStatus{}
}

type RetentionPolicyList struct {
	api.TypeMeta `protobuf:"bytes,2,opt,name=T,embedded=T" json:"T"`
	api.ListMeta `protobuf:"bytes,3,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	// Spec contains the configuration of the retention policy.
	Items []*RetentionPolicy `protobuf:"bytes,4,rep,name=Items" json:"Items,omitempty"`
}

func (m *RetentionPolicyList) Reset()                    { *m = RetentionPolicyList{} }
func (m *RetentionPolicyList) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicyList) ProtoMessage()               {}
func (*RetentionPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorRetention, []int{2} }

func (m *RetentionPolicyList) GetItems() []*RetentionPolicy {
	if m != nil {
		return m.Items
	}
	return nil
}

type RetentionPolicySpec struct {
	CompactionInterval string `protobuf:"bytes,1,opt,name=CompactionInterval,proto3" json:"compaction-interval ,omitempty"`
	CompactionMethod   string `protobuf:"bytes,2,opt,name=CompactionMethod,proto3" json:"compaction-method,omitempty"`
	MaxRetentionTime   string `protobuf:"bytes,3,opt,name=MaxRetentionTime,proto3" json:"max-retention-time,omitempty"`
}

func (m *RetentionPolicySpec) Reset()                    { *m = RetentionPolicySpec{} }
func (m *RetentionPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicySpec) ProtoMessage()               {}
func (*RetentionPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorRetention, []int{3} }

func (m *RetentionPolicySpec) GetCompactionInterval() string {
	if m != nil {
		return m.CompactionInterval
	}
	return ""
}

func (m *RetentionPolicySpec) GetCompactionMethod() string {
	if m != nil {
		return m.CompactionMethod
	}
	return ""
}

func (m *RetentionPolicySpec) GetMaxRetentionTime() string {
	if m != nil {
		return m.MaxRetentionTime
	}
	return ""
}

type RetentionPolicyStatus struct {
	MonitoringPolicies []string `protobuf:"bytes,1,rep,name=MonitoringPolicies" json:"monitoring-policies,omitempty"`
	EventPolicies      []string `protobuf:"bytes,2,rep,name=EventPolicies" json:"event-policies,omitempty"`
}

func (m *RetentionPolicyStatus) Reset()                    { *m = RetentionPolicyStatus{} }
func (m *RetentionPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*RetentionPolicyStatus) ProtoMessage()               {}
func (*RetentionPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorRetention, []int{4} }

func (m *RetentionPolicyStatus) GetMonitoringPolicies() []string {
	if m != nil {
		return m.MonitoringPolicies
	}
	return nil
}

func (m *RetentionPolicyStatus) GetEventPolicies() []string {
	if m != nil {
		return m.EventPolicies
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoMsgRetentionPolicyWatchHelper)(nil), "retention.AutoMsgRetentionPolicyWatchHelper")
	proto.RegisterType((*RetentionPolicy)(nil), "retention.RetentionPolicy")
	proto.RegisterType((*RetentionPolicyList)(nil), "retention.RetentionPolicyList")
	proto.RegisterType((*RetentionPolicySpec)(nil), "retention.RetentionPolicySpec")
	proto.RegisterType((*RetentionPolicyStatus)(nil), "retention.RetentionPolicyStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RetentionPolicyV1 service

type RetentionPolicyV1Client interface {
	AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RetentionPolicyList, error)
	AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error)
	AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error)
}

type retentionPolicyV1Client struct {
	cc *grpc.ClientConn
}

func NewRetentionPolicyV1Client(cc *grpc.ClientConn) RetentionPolicyV1Client {
	return &retentionPolicyV1Client{cc}
}

func (c *retentionPolicyV1Client) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/retention.RetentionPolicyV1/AutoAddRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/retention.RetentionPolicyV1/AutoDeleteRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/retention.RetentionPolicyV1/AutoGetRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (*RetentionPolicyList, error) {
	out := new(RetentionPolicyList)
	err := grpc.Invoke(ctx, "/retention.RetentionPolicyV1/AutoListRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy, opts ...grpc.CallOption) (*RetentionPolicy, error) {
	out := new(RetentionPolicy)
	err := grpc.Invoke(ctx, "/retention.RetentionPolicyV1/AutoUpdateRetentionPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retentionPolicyV1Client) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions, opts ...grpc.CallOption) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RetentionPolicyV1_serviceDesc.Streams[0], c.cc, "/retention.RetentionPolicyV1/AutoWatchRetentionPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &retentionPolicyV1AutoWatchRetentionPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RetentionPolicyV1_AutoWatchRetentionPolicyClient interface {
	Recv() (*AutoMsgRetentionPolicyWatchHelper, error)
	grpc.ClientStream
}

type retentionPolicyV1AutoWatchRetentionPolicyClient struct {
	grpc.ClientStream
}

func (x *retentionPolicyV1AutoWatchRetentionPolicyClient) Recv() (*AutoMsgRetentionPolicyWatchHelper, error) {
	m := new(AutoMsgRetentionPolicyWatchHelper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RetentionPolicyV1 service

type RetentionPolicyV1Server interface {
	AutoAddRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoDeleteRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoGetRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoListRetentionPolicy(context.Context, *api.ListWatchOptions) (*RetentionPolicyList, error)
	AutoUpdateRetentionPolicy(context.Context, *RetentionPolicy) (*RetentionPolicy, error)
	AutoWatchRetentionPolicy(*api.ListWatchOptions, RetentionPolicyV1_AutoWatchRetentionPolicyServer) error
}

func RegisterRetentionPolicyV1Server(s *grpc.Server, srv RetentionPolicyV1Server) {
	s.RegisterService(&_RetentionPolicyV1_serviceDesc, srv)
}

func _RetentionPolicyV1_AutoAddRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoAddRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retention.RetentionPolicyV1/AutoAddRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoAddRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoDeleteRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoDeleteRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retention.RetentionPolicyV1/AutoDeleteRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoDeleteRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoGetRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoGetRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retention.RetentionPolicyV1/AutoGetRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoGetRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoListRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ListWatchOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoListRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retention.RetentionPolicyV1/AutoListRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoListRetentionPolicy(ctx, req.(*api.ListWatchOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoUpdateRetentionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetentionPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetentionPolicyV1Server).AutoUpdateRetentionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/retention.RetentionPolicyV1/AutoUpdateRetentionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetentionPolicyV1Server).AutoUpdateRetentionPolicy(ctx, req.(*RetentionPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetentionPolicyV1_AutoWatchRetentionPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ListWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RetentionPolicyV1Server).AutoWatchRetentionPolicy(m, &retentionPolicyV1AutoWatchRetentionPolicyServer{stream})
}

type RetentionPolicyV1_AutoWatchRetentionPolicyServer interface {
	Send(*AutoMsgRetentionPolicyWatchHelper) error
	grpc.ServerStream
}

type retentionPolicyV1AutoWatchRetentionPolicyServer struct {
	grpc.ServerStream
}

func (x *retentionPolicyV1AutoWatchRetentionPolicyServer) Send(m *AutoMsgRetentionPolicyWatchHelper) error {
	return x.ServerStream.SendMsg(m)
}

var _RetentionPolicyV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "retention.RetentionPolicyV1",
	HandlerType: (*RetentionPolicyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoAddRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoAddRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoDeleteRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoDeleteRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoGetRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoGetRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoListRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoListRetentionPolicy_Handler,
		},
		{
			MethodName: "AutoUpdateRetentionPolicy",
			Handler:    _RetentionPolicyV1_AutoUpdateRetentionPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchRetentionPolicy",
			Handler:       _RetentionPolicyV1_AutoWatchRetentionPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "retention.proto",
}

func (m *AutoMsgRetentionPolicyWatchHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoMsgRetentionPolicyWatchHelper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRetention(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Object != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRetention(dAtA, i, uint64(m.Object.Size()))
		n1, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RetentionPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *RetentionPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.TypeMeta.Size()))
	n6, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintRetention(dAtA, i, uint64(m.ListMeta.Size()))
	n7, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRetention(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RetentionPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompactionInterval) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRetention(dAtA, i, uint64(len(m.CompactionInterval)))
		i += copy(dAtA[i:], m.CompactionInterval)
	}
	if len(m.CompactionMethod) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRetention(dAtA, i, uint64(len(m.CompactionMethod)))
		i += copy(dAtA[i:], m.CompactionMethod)
	}
	if len(m.MaxRetentionTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRetention(dAtA, i, uint64(len(m.MaxRetentionTime)))
		i += copy(dAtA[i:], m.MaxRetentionTime)
	}
	return i, nil
}

func (m *RetentionPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetentionPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.EventPolicies) > 0 {
		for _, s := range m.EventPolicies {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Retention(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Retention(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRetention(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoMsgRetentionPolicyWatchHelper) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRetention(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovRetention(uint64(l))
	}
	return n
}

func (m *RetentionPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRetention(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovRetention(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovRetention(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovRetention(uint64(l))
	return n
}

func (m *RetentionPolicyList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovRetention(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovRetention(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRetention(uint64(l))
		}
	}
	return n
}

func (m *RetentionPolicySpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.CompactionInterval)
	if l > 0 {
		n += 1 + l + sovRetention(uint64(l))
	}
	l = len(m.CompactionMethod)
	if l > 0 {
		n += 1 + l + sovRetention(uint64(l))
	}
	l = len(m.MaxRetentionTime)
	if l > 0 {
		n += 1 + l + sovRetention(uint64(l))
	}
	return n
}

func (m *RetentionPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.MonitoringPolicies) > 0 {
		for _, s := range m.MonitoringPolicies {
			l = len(s)
			n += 1 + l + sovRetention(uint64(l))
		}
	}
	if len(m.EventPolicies) > 0 {
		for _, s := range m.EventPolicies {
			l = len(s)
			n += 1 + l + sovRetention(uint64(l))
		}
	}
	return n
}

func sovRetention(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRetention(x uint64) (n int) {
	return sovRetention(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoMsgRetentionPolicyWatchHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoMsgRetentionPolicyWatchHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoMsgRetentionPolicyWatchHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &RetentionPolicy{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRetention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRetention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRetention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRetention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RetentionPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRetention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRetention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompactionMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetentionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRetentionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRetention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRetention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetentionPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetentionPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetentionPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringPolicies = append(m.MonitoringPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRetention
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventPolicies = append(m.EventPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRetention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRetention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRetention(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRetention
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRetention
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRetention
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRetention
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRetention(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRetention = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRetention   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("retention.proto", fileDescriptorRetention) }

var fileDescriptorRetention = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0xb6, 0x9b, 0xd6, 0x93, 0xa4, 0x09, 0x93, 0xb4, 0xd8, 0xdb, 0xe0, 0x75, 0x57,
	0x20, 0x85, 0x10, 0x7b, 0xdb, 0x80, 0x90, 0x08, 0x12, 0xa8, 0x0b, 0x15, 0x04, 0x6a, 0x5c, 0x52,
	0x03, 0x37, 0xa4, 0xc9, 0xfa, 0xb1, 0x19, 0xb4, 0x3b, 0xb3, 0xf2, 0x8e, 0xd3, 0x46, 0xa8, 0x17,
	0x5c, 0x24, 0x2e, 0x5c, 0x68, 0x4e, 0x5c, 0x90, 0x38, 0xf6, 0x80, 0x04, 0xfc, 0x13, 0x3d, 0x56,
	0x70, 0x41, 0x3d, 0xac, 0x20, 0xe2, 0xe4, 0xbf, 0x02, 0xcd, 0x78, 0xed, 0x6c, 0xd7, 0xa9, 0xe3,
	0x43, 0x6e, 0xbb, 0xef, 0xc7, 0x67, 0xbe, 0xef, 0xbd, 0xf9, 0x81, 0x17, 0x3b, 0x20, 0x81, 0x4b,
	0x26, 0x78, 0x3d, 0xec, 0x08, 0x29, 0x48, 0x71, 0x64, 0x30, 0x56, 0x3d, 0x21, 0x3c, 0x1f, 0x6c,
	0x1a, 0x32, 0x9b, 0x72, 0x2e, 0x24, 0x55, 0xe6, 0x68, 0x10, 0x68, 0xdc, 0xf4, 0x98, 0xdc, 0xeb,
	0xee, 0xd6, 0x5d, 0x11, 0xd8, 0x21, 0xf0, 0x88, 0xf2, 0xb6, 0xb0, 0xa3, 0xbb, 0xf6, 0x3e, 0x70,
	0xe6, 0x82, 0xdd, 0x95, 0xcc, 0x8f, 0x54, 0xaa, 0x07, 0x3c, 0x9d, 0x6d, 0x33, 0xee, 0xfa, 0xdd,
	0x36, 0x0c, 0x31, 0xb5, 0x14, 0xc6, 0x13, 0x9e, 0xb0, 0xb5, 0x79, 0xb7, 0xfb, 0x95, 0xfe, 0xd3,
	0x3f, 0xfa, 0x2b, 0x09, 0x7f, 0xe5, 0x39, 0xab, 0x2a, 0x8d, 0x01, 0x48, 0x3a, 0x08, 0xb3, 0x38,
	0xbe, 0x7a, 0xa3, 0x2b, 0x45, 0x23, 0xf2, 0x76, 0x86, 0xe5, 0xdc, 0x16, 0x3e, 0x73, 0x0f, 0xbe,
	0xa0, 0xd2, 0xdd, 0xfb, 0x10, 0xfc, 0x10, 0x3a, 0x64, 0x1e, 0x17, 0x5a, 0x07, 0x21, 0x94, 0x50,
	0x15, 0xad, 0x15, 0xc9, 0x3a, 0x9e, 0x6d, 0xee, 0x7e, 0x0d, 0xae, 0x2c, 0xe5, 0xaa, 0x68, 0x6d,
	0x6e, 0xd3, 0xa8, 0x1f, 0xb7, 0x26, 0x03, 0xd9, 0x5a, 0x7c, 0x7a, 0xb8, 0x32, 0x77, 0x57, 0xa1,
	0xf6, 0x34, 0xca, 0xfa, 0x23, 0x87, 0x17, 0x33, 0x41, 0xe4, 0x1a, 0x46, 0x2d, 0xcd, 0x9e, 0xdb,
	0x5c, 0xa8, 0xd3, 0x90, 0xd5, 0xd5, 0x62, 0x0d, 0x90, 0xd4, 0x59, 0x7e, 0x1c, 0x9b, 0x33, 0x4f,
	0x62, 0x13, 0xf5, 0x63, 0xf3, 0xfc, 0x06, 0xe3, 0x3e, 0xe3, 0xb0, 0x83, 0x5a, 0xe4, 0x2d, 0x8c,
	0x9a, 0xc9, 0xea, 0x8b, 0x3a, 0x63, 0x20, 0x48, 0xe7, 0x18, 0xa9, 0x9c, 0x8b, 0xaa, 0xd2, 0x0d,
	0x11, 0x30, 0x09, 0x41, 0x28, 0x0f, 0x76, 0x50, 0x93, 0x7c, 0x84, 0x0b, 0x77, 0x42, 0x70, 0x4b,
	0x79, 0x9d, 0x5d, 0x79, 0xbe, 0x76, 0x15, 0xe5, 0x5c, 0x56, 0x30, 0x05, 0x8a, 0x42, 0x70, 0x53,
	0x20, 0xcd, 0x20, 0x3b, 0x78, 0xf6, 0x8e, 0xa4, 0xb2, 0x1b, 0x95, 0x0a, 0x9a, 0x56, 0x9d, 0x40,
	0xd3, 0x71, 0x4e, 0x29, 0xe1, 0x2d, 0x45, 0xfa, 0x3f, 0x45, 0x4c, 0x48, 0x5b, 0xcb, 0x7f, 0x7e,
	0x57, 0x3e, 0xde, 0x6b, 0x83, 0x64, 0xeb, 0x67, 0x84, 0x97, 0x33, 0xc0, 0x5b, 0x2c, 0x92, 0xc4,
	0x52, 0x9d, 0xcb, 0x9d, 0xd4, 0xb9, 0x0b, 0xc3, 0x2e, 0x90, 0x57, 0xf1, 0x05, 0x15, 0xab, 0xac,
	0x49, 0xd1, 0x83, 0xd0, 0xa1, 0xf1, 0x99, 0xd0, 0x73, 0xdb, 0x12, 0x02, 0x55, 0x4e, 0xfe, 0x94,
	0xc1, 0x5e, 0x7c, 0x7a, 0xb8, 0x82, 0x7d, 0x16, 0xc9, 0x64, 0xae, 0x0f, 0x72, 0x63, 0x0a, 0x93,
	0x16, 0x91, 0xf7, 0x44, 0x10, 0x52, 0x57, 0xd9, 0xb7, 0xb9, 0x84, 0xce, 0x3e, 0xf5, 0x07, 0x1b,
	0xc9, 0xb1, 0xfa, 0xb1, 0x59, 0x71, 0x47, 0xde, 0x1a, 0x4b, 0xdc, 0xd5, 0x54, 0x5b, 0x4e, 0xc8,
	0x26, 0x1f, 0xe3, 0xa5, 0x63, 0x6b, 0x03, 0xe4, 0x9e, 0x68, 0xeb, 0x26, 0x14, 0x1d, 0xb3, 0x1f,
	0x9b, 0x57, 0x52, 0xc4, 0x40, 0x3b, 0x53, 0xb8, 0xb1, 0x44, 0x72, 0x0b, 0x2f, 0x35, 0xe8, 0xbd,
	0x91, 0xf4, 0x16, 0x0b, 0x40, 0xb7, 0xa9, 0xe8, 0x54, 0xfb, 0xb1, 0xb9, 0x1a, 0xd0, 0x7b, 0xb5,
	0x51, 0x17, 0x6a, 0x92, 0x05, 0x90, 0xa6, 0x65, 0x33, 0xad, 0x5f, 0x11, 0xbe, 0x74, 0xe2, 0xe4,
	0xc9, 0xa7, 0x98, 0x34, 0x04, 0x67, 0x52, 0x74, 0x18, 0xf7, 0xb4, 0x87, 0x41, 0x54, 0x42, 0xd5,
	0xfc, 0x5a, 0xd1, 0xb9, 0xda, 0x8f, 0xcd, 0x97, 0x82, 0x91, 0xb7, 0x16, 0x26, 0xee, 0x74, 0x1f,
	0xc6, 0x93, 0x89, 0x83, 0x17, 0x6e, 0xee, 0x03, 0x97, 0x23, 0x5a, 0x4e, 0xd3, 0x56, 0xfb, 0xb1,
	0x59, 0x02, 0xe5, 0x38, 0x09, 0xf4, 0x6c, 0xca, 0xe6, 0xbf, 0xe7, 0xf1, 0x0b, 0x19, 0xc1, 0x9f,
	0x5f, 0x27, 0xdf, 0x23, 0x7c, 0x59, 0x5d, 0x0b, 0x37, 0xda, 0xed, 0xec, 0x61, 0x9d, 0xb0, 0x29,
	0x8c, 0x09, 0x3e, 0xeb, 0xcd, 0xbf, 0x0f, 0x57, 0xd0, 0xef, 0x0f, 0xca, 0xb3, 0x6e, 0x07, 0xa8,
	0x84, 0x6f, 0xff, 0xfa, 0xef, 0x61, 0xce, 0xc2, 0x33, 0x5b, 0x68, 0xdd, 0xba, 0x62, 0x7f, 0xd3,
	0xac, 0xb7, 0x80, 0x53, 0x2e, 0xef, 0xdb, 0x99, 0xad, 0x4f, 0x1e, 0x22, 0x5c, 0x56, 0x52, 0xde,
	0x07, 0x1f, 0x24, 0x9c, 0x95, 0x9a, 0x77, 0x86, 0x6a, 0xda, 0x1a, 0xab, 0xd5, 0xac, 0xe3, 0x99,
	0xad, 0x99, 0xf5, 0x97, 0x27, 0x88, 0x51, 0xae, 0x4f, 0x68, 0x00, 0xf7, 0xc9, 0x0f, 0x49, 0x83,
	0x3e, 0x00, 0x79, 0x56, 0x92, 0xde, 0x4e, 0x24, 0xe5, 0x3d, 0x90, 0xc7, 0x7a, 0xc8, 0x74, 0x7a,
	0xbe, 0xc4, 0x2f, 0x2a, 0x39, 0xea, 0x4c, 0x67, 0xf5, 0x5c, 0x1a, 0x9d, 0x76, 0x7d, 0xa5, 0x37,
	0x43, 0xfd, 0xba, 0x18, 0x13, 0x6e, 0x3e, 0x15, 0x6b, 0xcd, 0x27, 0x72, 0x0a, 0xea, 0x90, 0x93,
	0xc3, 0x64, 0x0a, 0x9f, 0x85, 0x6d, 0x7a, 0x76, 0x53, 0x78, 0x77, 0x38, 0x85, 0xae, 0xc6, 0xea,
	0xaa, 0x5f, 0xd3, 0x7b, 0xc2, 0x98, 0xae, 0xec, 0x10, 0x97, 0x94, 0x2a, 0x5d, 0xd8, 0x94, 0x75,
	0x6f, 0xa4, 0xf4, 0x9c, 0xfa, 0xf2, 0x59, 0x0b, 0x89, 0xc2, 0x73, 0xfa, 0x0d, 0xbb, 0x86, 0x8c,
	0xdf, 0xd0, 0x8f, 0xbd, 0x72, 0x6e, 0xff, 0xfa, 0x4f, 0xbd, 0xb1, 0x5b, 0xfa, 0x97, 0x5e, 0x39,
	0xfb, 0xb4, 0x3d, 0xea, 0x95, 0xb7, 0xc7, 0xdf, 0x3b, 0x35, 0x61, 0x92, 0x0f, 0xbb, 0x92, 0x24,
	0xdb, 0x6f, 0xba, 0x6a, 0x1f, 0xf5, 0xca, 0x6f, 0x8c, 0xc3, 0x0a, 0xa1, 0x88, 0xa4, 0x31, 0xe9,
	0x08, 0x39, 0xf3, 0x8f, 0x8f, 0x2a, 0xe8, 0xc9, 0x51, 0x05, 0xfd, 0x73, 0x54, 0x41, 0xb7, 0xd1,
	0xee, 0xac, 0x7e, 0xfa, 0x5f, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xac, 0xe0, 0xd1, 0x54, 0xd3,
	0x08, 0x00, 0x00,
}
