// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package retention is a auto generated package.
Input file: protos/retention.proto
*/
package retention

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta
var _ grpc.ServerStream
var _ fmt.Formatter

// MiddlewareRetentionPolicyV1Client add middleware to the client
type MiddlewareRetentionPolicyV1Client func(ServiceRetentionPolicyV1Client) ServiceRetentionPolicyV1Client

// EndpointsRetentionPolicyV1Client is the endpoints for the client
type EndpointsRetentionPolicyV1Client struct {
	Client RetentionPolicyV1Client

	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
}

// EndpointsRetentionPolicyV1RestClient is the REST client
type EndpointsRetentionPolicyV1RestClient struct {
	logger   log.Logger
	client   *http.Client
	instance string

	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint
	AutoWatchRetentionPolicyEndpoint  endpoint.Endpoint
}

// MiddlewareRetentionPolicyV1Server adds middle ware to the server
type MiddlewareRetentionPolicyV1Server func(ServiceRetentionPolicyV1Server) ServiceRetentionPolicyV1Server

// EndpointsRetentionPolicyV1Server is the server endpoints
type EndpointsRetentionPolicyV1Server struct {
	AutoAddRetentionPolicyEndpoint    endpoint.Endpoint
	AutoDeleteRetentionPolicyEndpoint endpoint.Endpoint
	AutoGetRetentionPolicyEndpoint    endpoint.Endpoint
	AutoListRetentionPolicyEndpoint   endpoint.Endpoint
	AutoUpdateRetentionPolicyEndpoint endpoint.Endpoint

	watchHandlerRetentionPolicy func(options *api.ListWatchOptions, stream grpc.ServerStream) error
}

// AutoAddRetentionPolicy is endpoint for AutoAddRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoAddRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoAddRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoDeleteRetentionPolicy is endpoint for AutoDeleteRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoDeleteRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoDeleteRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoGetRetentionPolicy is endpoint for AutoGetRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoGetRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoGetRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoListRetentionPolicy is endpoint for AutoListRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (*RetentionPolicyList, error) {
	resp, err := e.AutoListRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicyList{}, err
	}
	return resp.(*RetentionPolicyList), nil
}

type respRetentionPolicyV1AutoListRetentionPolicy struct {
	V   RetentionPolicyList
	Err error
}

// AutoUpdateRetentionPolicy is endpoint for AutoUpdateRetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	resp, err := e.AutoUpdateRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return &RetentionPolicy{}, err
	}
	return resp.(*RetentionPolicy), nil
}

type respRetentionPolicyV1AutoUpdateRetentionPolicy struct {
	V   RetentionPolicy
	Err error
}

// AutoWatchRetentionPolicy performs Watch for RetentionPolicy
func (e EndpointsRetentionPolicyV1Client) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (RetentionPolicyV1_AutoWatchRetentionPolicyClient, error) {
	return e.Client.AutoWatchRetentionPolicy(ctx, in)
}

// AutoAddRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoAddRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoAddRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint creates  AutoAddRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoAddRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoAddRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RetentionPolicyV1:AutoAddRetentionPolicy")(f)
}

// AutoDeleteRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoDeleteRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoDeleteRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint creates  AutoDeleteRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoDeleteRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoDeleteRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RetentionPolicyV1:AutoDeleteRetentionPolicy")(f)
}

// AutoGetRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoGetRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoGetRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint creates  AutoGetRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoGetRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoGetRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RetentionPolicyV1:AutoGetRetentionPolicy")(f)
}

// AutoListRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoListRetentionPolicy(ctx context.Context, in api.ListWatchOptions) (RetentionPolicyList, error) {
	resp, err := e.AutoListRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicyList{}, err
	}
	return *resp.(*RetentionPolicyList), nil
}

// MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint creates  AutoListRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*api.ListWatchOptions)
		v, err := s.AutoListRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoListRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RetentionPolicyV1:AutoListRetentionPolicy")(f)
}

// AutoUpdateRetentionPolicy implementation on server Endpoint
func (e EndpointsRetentionPolicyV1Server) AutoUpdateRetentionPolicy(ctx context.Context, in RetentionPolicy) (RetentionPolicy, error) {
	resp, err := e.AutoUpdateRetentionPolicyEndpoint(ctx, in)
	if err != nil {
		return RetentionPolicy{}, err
	}
	return *resp.(*RetentionPolicy), nil
}

// MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint creates  AutoUpdateRetentionPolicy endpoints for the service
func MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) endpoint.Endpoint {
	f := func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*RetentionPolicy)
		v, err := s.AutoUpdateRetentionPolicy(ctx, *req)
		return respRetentionPolicyV1AutoUpdateRetentionPolicy{
			V:   v,
			Err: err,
		}, nil
	}
	return trace.ServerEndpoint("RetentionPolicyV1:AutoUpdateRetentionPolicy")(f)
}

// AutoWatchRetentionPolicy is the watch handler for RetentionPolicy on the server side.
func (e EndpointsRetentionPolicyV1Server) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) error {
	return e.watchHandlerRetentionPolicy(in, stream)
}

// MakeAutoWatchRetentionPolicyEndpoint creates the Watch endpoint
func MakeAutoWatchRetentionPolicyEndpoint(s ServiceRetentionPolicyV1Server, logger log.Logger) func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
	return func(options *api.ListWatchOptions, stream grpc.ServerStream) error {
		wstream := stream.(RetentionPolicyV1_AutoWatchRetentionPolicyServer)
		return s.AutoWatchRetentionPolicy(options, wstream)
	}
}

// MakeRetentionPolicyV1ServerEndpoints creates server endpoints
func MakeRetentionPolicyV1ServerEndpoints(s ServiceRetentionPolicyV1Server, logger log.Logger) EndpointsRetentionPolicyV1Server {
	return EndpointsRetentionPolicyV1Server{

		AutoAddRetentionPolicyEndpoint:    MakeRetentionPolicyV1AutoAddRetentionPolicyEndpoint(s, logger),
		AutoDeleteRetentionPolicyEndpoint: MakeRetentionPolicyV1AutoDeleteRetentionPolicyEndpoint(s, logger),
		AutoGetRetentionPolicyEndpoint:    MakeRetentionPolicyV1AutoGetRetentionPolicyEndpoint(s, logger),
		AutoListRetentionPolicyEndpoint:   MakeRetentionPolicyV1AutoListRetentionPolicyEndpoint(s, logger),
		AutoUpdateRetentionPolicyEndpoint: MakeRetentionPolicyV1AutoUpdateRetentionPolicyEndpoint(s, logger),

		watchHandlerRetentionPolicy: MakeAutoWatchRetentionPolicyEndpoint(s, logger),
	}
}

// LoggingRetentionPolicyV1MiddlewareClient adds middleware for the client
func LoggingRetentionPolicyV1MiddlewareClient(logger log.Logger) MiddlewareRetentionPolicyV1Client {
	return func(next ServiceRetentionPolicyV1Client) ServiceRetentionPolicyV1Client {
		return loggingRetentionPolicyV1MiddlewareClient{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRetentionPolicyV1MiddlewareClient struct {
	logger log.Logger
	next   ServiceRetentionPolicyV1Client
}

// LoggingRetentionPolicyV1MiddlewareServer adds middleware for the client
func LoggingRetentionPolicyV1MiddlewareServer(logger log.Logger) MiddlewareRetentionPolicyV1Server {
	return func(next ServiceRetentionPolicyV1Server) ServiceRetentionPolicyV1Server {
		return loggingRetentionPolicyV1MiddlewareServer{
			logger: logger,
			next:   next,
		}
	}
}

type loggingRetentionPolicyV1MiddlewareServer struct {
	logger log.Logger
	next   ServiceRetentionPolicyV1Server
}

func (m loggingRetentionPolicyV1MiddlewareClient) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoAddRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoDeleteRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoGetRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoListRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp *RetentionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoListRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareClient) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (resp *RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoUpdateRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareClient) AutoWatchRetentionPolicy(ctx context.Context, in *api.ListWatchOptions) (resp RetentionPolicyV1_AutoWatchRetentionPolicyClient, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoWatchRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoWatchRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareServer) AutoAddRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoAddRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoAddRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoDeleteRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoDeleteRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoDeleteRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoGetRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoGetRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoGetRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoListRetentionPolicy(ctx context.Context, in api.ListWatchOptions) (resp RetentionPolicyList, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoListRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoListRetentionPolicy(ctx, in)
	return
}
func (m loggingRetentionPolicyV1MiddlewareServer) AutoUpdateRetentionPolicy(ctx context.Context, in RetentionPolicy) (resp RetentionPolicy, err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(ctx, "service", "RetentionPolicyV1", "method", "AutoUpdateRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	resp, err = m.next.AutoUpdateRetentionPolicy(ctx, in)
	return
}

func (m loggingRetentionPolicyV1MiddlewareServer) AutoWatchRetentionPolicy(in *api.ListWatchOptions, stream RetentionPolicyV1_AutoWatchRetentionPolicyServer) (err error) {
	defer func(begin time.Time) {
		var rslt string
		if err == nil {
			rslt = "Success"
		} else {
			rslt = err.Error()
		}
		m.logger.Audit(stream.Context(), "service", "RetentionPolicyV1", "method", "AutoWatchRetentionPolicy", "result", rslt, "duration", time.Since(begin))
	}(time.Now())
	err = m.next.AutoWatchRetentionPolicy(in, stream)
	return
}
func (r *EndpointsRetentionPolicyV1RestClient) getHTTPRequest(ctx context.Context, in interface{}, method, path string) (*http.Request, error) {
	target, err := url.Parse(r.instance)
	if err != nil {
		return nil, fmt.Errorf("invalid instance %s", r.instance)
	}
	target.Path = path
	req, err := http.NewRequest(method, target.String(), nil)
	if err != nil {
		return nil, fmt.Errorf("could not create request (%s)", err)
	}
	if err = encodeHTTPRequest(ctx, req, in); err != nil {
		return nil, fmt.Errorf("could not encode request (%s)", err)
	}
	return req, nil
}

//
func makeURIRetentionPolicyV1AutoAddRetentionPolicyCreateOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy")
}

//
func makeURIRetentionPolicyV1AutoDeleteRetentionPolicyDeleteOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

//
func makeURIRetentionPolicyV1AutoGetRetentionPolicyGetOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

//
func makeURIRetentionPolicyV1AutoUpdateRetentionPolicyUpdateOper(in *RetentionPolicy) string {
	return fmt.Sprint("/v1/retentionPolicy", "/", in.Tenant, "/retentionPolicy/", in.Name)
}

// AutoAddRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoAddRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoAddRetentionPolicyCreateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "POST", path)
	if err != nil {
		return nil, err
	}
	httpresp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoAddRetentionPolicy(ctx, httpresp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), nil
}

// AutoUpdateRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoUpdateRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoUpdateRetentionPolicyUpdateOper(in)
	req, err := r.getHTTPRequest(ctx, in, "PUT", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoUpdateRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoGetRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoGetRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoGetRetentionPolicyGetOper(in)
	req, err := r.getHTTPRequest(ctx, in, "GET", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoGetRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoDeleteRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoDeleteRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	path := makeURIRetentionPolicyV1AutoDeleteRetentionPolicyDeleteOper(in)
	req, err := r.getHTTPRequest(ctx, in, "DELETE", path)
	if err != nil {
		return nil, err
	}
	resp, err := r.client.Do(req.WithContext(ctx))
	if err != nil {
		return nil, fmt.Errorf("request failed (%s)", err)
	}
	ret, err := decodeHTTPrespRetentionPolicyV1AutoDeleteRetentionPolicy(ctx, resp)
	if err != nil {
		return nil, err
	}
	return ret.(*RetentionPolicy), err
}

// AutoListRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoListRetentionPolicy(ctx context.Context, options *api.ListWatchOptions) (*RetentionPolicyList, error) {
	return nil, errors.New("not allowed")
}

// AutoWatchRetentionPolicy CRUD method for RetentionPolicy
func (r *EndpointsRetentionPolicyV1RestClient) AutoWatchRetentionPolicy(ctx context.Context, in *RetentionPolicy) (*RetentionPolicy, error) {
	return nil, errors.New("not allowed")
}

// MakeRetentionPolicyV1RestClientEndpoints make REST client endpoints
func MakeRetentionPolicyV1RestClientEndpoints(instance string) (EndpointsRetentionPolicyV1RestClient, error) {
	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}

	return EndpointsRetentionPolicyV1RestClient{
		instance: instance,
		client:   http.DefaultClient,
	}, nil

}
