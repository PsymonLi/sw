// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"context"
	"errors"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	audit "github.com/pensando/sw/api/generated/audit"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewAuditV1 sets up a new client for AuditV1
func NewAuditV1(conn *grpc.ClientConn, logger log.Logger) audit.ServiceAuditV1Client {

	var lGetEventEndpoint endpoint.Endpoint
	{
		lGetEventEndpoint = grpctransport.NewClient(
			conn,
			"audit.AuditV1",
			"GetEvent",
			audit.EncodeGrpcReqAuditEventRequest,
			audit.DecodeGrpcRespAuditEvent,
			&audit.AuditEvent{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGetEventEndpoint = trace.ClientEndPoint("AuditV1:GetEvent")(lGetEventEndpoint)
	}
	return audit.EndpointsAuditV1Client{
		Client: audit.NewAuditV1Client(conn),

		GetEventEndpoint: lGetEventEndpoint,
	}
}

// NewAuditV1Backend creates an instrumented client with middleware
func NewAuditV1Backend(conn *grpc.ClientConn, logger log.Logger) audit.ServiceAuditV1Client {
	cl := NewAuditV1(conn, logger)
	cl = audit.LoggingAuditV1MiddlewareClient(logger)(cl)
	return cl
}

type crudClientAuditV1 struct {
	logger log.Logger
	client audit.ServiceAuditV1Client
}

// NewGrpcCrudClientAuditV1 creates a GRPC client for the service
func NewGrpcCrudClientAuditV1(conn *grpc.ClientConn, logger log.Logger) audit.AuditV1Interface {
	client := NewAuditV1Backend(conn, logger)
	return &crudClientAuditV1{
		logger: logger,
		client: client,
	}
}

type crudRestClientAuditV1 struct {
}

// NewRestCrudClientAuditV1 creates a REST client for the service.
func NewRestCrudClientAuditV1(url string, httpClient *http.Client) audit.AuditV1Interface {
	return &crudRestClientAuditV1{}
}

// NewStagedRestCrudClientAuditV1 creates a REST client for the service.
func NewStagedRestCrudClientAuditV1(url string, id string, httpClient *http.Client) audit.AuditV1Interface {
	return &crudRestClientAuditV1{}
}

func (a *crudRestClientAuditV1) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	return nil, errors.New("method unimplemented")
}
