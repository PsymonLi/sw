// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	audit "github.com/pensando/sw/api/generated/audit"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewAuditV1 sets up a new client for AuditV1
func NewAuditV1(conn *grpc.ClientConn, logger log.Logger) audit.ServiceAuditV1Client {

	var lGetEventEndpoint endpoint.Endpoint
	{
		lGetEventEndpoint = grpctransport.NewClient(
			conn,
			"audit.AuditV1",
			"GetEvent",
			audit.EncodeGrpcReqEventRequest,
			audit.DecodeGrpcRespEvent,
			&audit.Event{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lGetEventEndpoint = trace.ClientEndPoint("AuditV1:GetEvent")(lGetEventEndpoint)
	}
	return audit.EndpointsAuditV1Client{
		Client: audit.NewAuditV1Client(conn),

		GetEventEndpoint: lGetEventEndpoint,
	}
}

// NewAuditV1Backend creates an instrumented client with middleware
func NewAuditV1Backend(conn *grpc.ClientConn, logger log.Logger) audit.ServiceAuditV1Client {
	cl := NewAuditV1(conn, logger)
	cl = audit.LoggingAuditV1MiddlewareClient(logger)(cl)
	return cl
}
