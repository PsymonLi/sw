// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: audit.proto

/*
	Package audit is a generated protocol buffer package.

	Service name

	It is generated from these files:
		audit.proto
		svc_audit.proto

	It has these top-level messages:
		AuditEvent
		AuditEventList
		AuditEventRequest
		EventAttributes
*/
package audit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/fields"
import _ "github.com/pensando/sw/api/generated/auth"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Level to control amount of audit information logged
type Level int32

const (
	// Basic provides minimal level of audit logging. It doesn't log the contents of request and response. For example
	//
	// 			{
	// 				TypeMeta:   api.TypeMeta{Kind: "AuditEvent"},
	// 				ObjectMeta: api.ObjectMeta{Name: "auditevent1", UUID: uuid.NewV4().String(), Tenant: "default"},
	// 				EventAttributes: audit.EventAttributes{
	// 					Level:       audit.Level_RequestResponse.String(),
	// 					Stage:       audit.Stage_RequestProcessing.String(),
	// 					User:        &api.ObjectRef{Kind: "User", Namespace: "default", Tenant: "default", Name: "admin"},
	// 					Resource:    &api.ObjectRef{Kind: "Network", Tenant: "default", Namespace: "default", Name: "network1"},
	// 					ClientIPs:   []string{"192.168.75.133"},
	// 					Action:      auth.Permission_Create.String(),
	// 					Outcome:     audit.Outcome_Unknown.String(),
	// 					GatewayNode: "node1",
	// 					GatewayIP:   "192.168.75.136",
	// 				},
	// 			}
	//
	Level_Basic Level = 0
	// Request logs object from the request in addition to Basic level of audit logging
	Level_Request Level = 1
	// Response logs object in the response in addition to Basic level of audit logging
	Level_Response Level = 2
	// RequestResponse logs object from the response in addition to Request level of audit logging
	Level_RequestResponse Level = 3
)

var Level_name = map[int32]string{
	0: "Basic",
	1: "Request",
	2: "Response",
	3: "RequestResponse",
}
var Level_value = map[string]int32{
	"Basic":           0,
	"Request":         1,
	"Response":        2,
	"RequestResponse": 3,
}

func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptorAudit, []int{0} }

// Stage defines the stages in request handling for which audit logs may be generated
type Stage int32

const (
	// Log if authorization fails
	Stage_RequestAuthorization Stage = 0
	// Log when request processing starts after authorization check has succeeded
	Stage_RequestProcessing Stage = 1
)

var Stage_name = map[int32]string{
	0: "RequestAuthorization",
	1: "RequestProcessing",
}
var Stage_value = map[string]int32{
	"RequestAuthorization": 0,
	"RequestProcessing":    1,
}

func (Stage) EnumDescriptor() ([]byte, []int) { return fileDescriptorAudit, []int{1} }

// Outcome of an operation (action on resource)
type Outcome int32

const (
	// Success if operation completed successfully
	Outcome_Success Outcome = 0
	// Failure if operation failed
	Outcome_Failure Outcome = 1
)

var Outcome_name = map[int32]string{
	0: "Success",
	1: "Failure",
}
var Outcome_value = map[string]int32{
	"Success": 0,
	"Failure": 1,
}

func (Outcome) EnumDescriptor() ([]byte, []int) { return fileDescriptorAudit, []int{2} }

//
type AuditEvent struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,json=,inline,embedded=T" json:",inline"`
	// ObjectMeta.Name will be the UUID for an audit log object.
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,json=meta,omitempty,embedded=O" json:"meta,omitempty"`
	// Attributes contains the attributes of an audit log.
	EventAttributes `protobuf:"bytes,3,opt,name=Attributes,json=,inline,embedded=Attributes" json:",inline"`
}

func (m *AuditEvent) Reset()                    { *m = AuditEvent{} }
func (m *AuditEvent) String() string            { return proto.CompactTextString(m) }
func (*AuditEvent) ProtoMessage()               {}
func (*AuditEvent) Descriptor() ([]byte, []int) { return fileDescriptorAudit, []int{0} }

// list of events
type AuditEventList struct {
	//
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:"T"`
	//
	api.ListMeta `protobuf:"bytes,2,opt,name=ListMeta,embedded=ListMeta" json:"ListMeta"`
	//
	Items []*AuditEvent `protobuf:"bytes,3,rep,name=Items,json=items,omitempty" json:"items,omitempty"`
}

func (m *AuditEventList) Reset()                    { *m = AuditEventList{} }
func (m *AuditEventList) String() string            { return proto.CompactTextString(m) }
func (*AuditEventList) ProtoMessage()               {}
func (*AuditEventList) Descriptor() ([]byte, []int) { return fileDescriptorAudit, []int{1} }

func (m *AuditEventList) GetItems() []*AuditEvent {
	if m != nil {
		return m.Items
	}
	return nil
}

// Request for an audit event
type AuditEventRequest struct {
	//
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uuid,omitempty,proto3" json:"uuid,omitempty"`
}

func (m *AuditEventRequest) Reset()                    { *m = AuditEventRequest{} }
func (m *AuditEventRequest) String() string            { return proto.CompactTextString(m) }
func (*AuditEventRequest) ProtoMessage()               {}
func (*AuditEventRequest) Descriptor() ([]byte, []int) { return fileDescriptorAudit, []int{2} }

func (m *AuditEventRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

// Attributes contains all the audit log attributes
type EventAttributes struct {
	// Request handling stage at which audit log was generated
	Stage string `protobuf:"bytes,1,opt,name=Stage,json=stage,omitempty,proto3" json:"stage,omitempty"`
	// Level to control amount of audit information logged
	Level string `protobuf:"bytes,2,opt,name=Level,json=level,omitempty,proto3" json:"level,omitempty"`
	// User who initiated an action on the referred object (resource)
	// User role and group is part of user status. User object in login response will be logged in ResponseObject field.
	User *api.ObjectRef `protobuf:"bytes,3,opt,name=User,json=user,omitempty" json:"user,omitempty"`
	// IP addresses of client and intermediate proxies from where API request was made
	ClientIPs []string `protobuf:"bytes,4,rep,name=ClientIPs,json=client-ips,omitempty" json:"client-ips,omitempty"`
	// ObjectRef is the reference to the object on which action was performed
	Resource *api.ObjectRef `protobuf:"bytes,5,opt,name=Resource,json=resource,omitempty" json:"resource,omitempty"`
	// Action that was requested/performed on the referred object. For non API server resources, it is the http method
	Action string `protobuf:"bytes,6,opt,name=Action,json=action,omitempty,proto3" json:"action,omitempty"`
	// Outcome represents the outcome of action on resource
	Outcome string `protobuf:"bytes,7,opt,name=Outcome,json=outcome,omitempty,proto3" json:"outcome,omitempty"`
	// RequestURI is the request URI as sent by the client
	RequestURI string `protobuf:"bytes,8,opt,name=RequestURI,json=request-uri,omitempty,proto3" json:"request-uri,omitempty"`
	// Object from the request in JSON format
	RequestObject string `protobuf:"bytes,9,opt,name=RequestObject,json=request-object,omitempty,proto3" json:"request-object,omitempty"`
	// Object from the response in JSON format to be sent to the client
	ResponseObject string `protobuf:"bytes,10,opt,name=ResponseObject,json=response-object,omitempty,proto3" json:"response-object,omitempty"`
	// Name of the venice node where action was observed
	GatewayNode string `protobuf:"bytes,11,opt,name=GatewayNode,json=gateway-node,omitempty,proto3" json:"gateway-node,omitempty"`
	// IP address of API Gateway where action was observed
	GatewayIP string `protobuf:"bytes,12,opt,name=GatewayIP,json=gateway-ip,omitempty,proto3" json:"gateway-ip,omitempty"`
	// Name of service that handled the request and performed the requested operation for ex: search, events etc
	ServiceName string `protobuf:"bytes,13,opt,name=ServiceName,json=service-name,omitempty,proto3" json:"service-name,omitempty"`
	// Data is unstructured key value map stored with audit log that may be set by hooks in API Gateway. We can store Signature in
	// JWS compact serialization format in this map. Data in this map will not be signed.
	Data map[string]string `protobuf:"bytes,14,rep,name=Data,json=data,omitempty" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID passed in by an external application to link audit event to the request. It should be AlphaNumeric and can contain -. Maximum length supported is 64
	ExternalID string `protobuf:"bytes,15,opt,name=ExternalID,json=external-id,omitempty,proto3" json:"external-id,omitempty"`
}

func (m *EventAttributes) Reset()                    { *m = EventAttributes{} }
func (m *EventAttributes) String() string            { return proto.CompactTextString(m) }
func (*EventAttributes) ProtoMessage()               {}
func (*EventAttributes) Descriptor() ([]byte, []int) { return fileDescriptorAudit, []int{3} }

func (m *EventAttributes) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

func (m *EventAttributes) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *EventAttributes) GetUser() *api.ObjectRef {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EventAttributes) GetClientIPs() []string {
	if m != nil {
		return m.ClientIPs
	}
	return nil
}

func (m *EventAttributes) GetResource() *api.ObjectRef {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *EventAttributes) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *EventAttributes) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *EventAttributes) GetRequestURI() string {
	if m != nil {
		return m.RequestURI
	}
	return ""
}

func (m *EventAttributes) GetRequestObject() string {
	if m != nil {
		return m.RequestObject
	}
	return ""
}

func (m *EventAttributes) GetResponseObject() string {
	if m != nil {
		return m.ResponseObject
	}
	return ""
}

func (m *EventAttributes) GetGatewayNode() string {
	if m != nil {
		return m.GatewayNode
	}
	return ""
}

func (m *EventAttributes) GetGatewayIP() string {
	if m != nil {
		return m.GatewayIP
	}
	return ""
}

func (m *EventAttributes) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *EventAttributes) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventAttributes) GetExternalID() string {
	if m != nil {
		return m.ExternalID
	}
	return ""
}

func init() {
	proto.RegisterType((*AuditEvent)(nil), "audit.AuditEvent")
	proto.RegisterType((*AuditEventList)(nil), "audit.AuditEventList")
	proto.RegisterType((*AuditEventRequest)(nil), "audit.AuditEventRequest")
	proto.RegisterType((*EventAttributes)(nil), "audit.EventAttributes")
	proto.RegisterEnum("audit.Level", Level_name, Level_value)
	proto.RegisterEnum("audit.Stage", Stage_name, Stage_value)
	proto.RegisterEnum("audit.Outcome", Outcome_name, Outcome_value)
}
func (m *AuditEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAudit(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAudit(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAudit(dAtA, i, uint64(m.EventAttributes.Size()))
	n3, err := m.EventAttributes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *AuditEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAudit(dAtA, i, uint64(m.TypeMeta.Size()))
	n4, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintAudit(dAtA, i, uint64(m.ListMeta.Size()))
	n5, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAudit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AuditEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditEventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	return i, nil
}

func (m *EventAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	if len(m.Level) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	if m.User != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(m.User.Size()))
		n6, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.ClientIPs) > 0 {
		for _, s := range m.ClientIPs {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Resource != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(m.Resource.Size()))
		n7, err := m.Resource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Outcome) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Outcome)))
		i += copy(dAtA[i:], m.Outcome)
	}
	if len(m.RequestURI) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.RequestURI)))
		i += copy(dAtA[i:], m.RequestURI)
	}
	if len(m.RequestObject) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.RequestObject)))
		i += copy(dAtA[i:], m.RequestObject)
	}
	if len(m.ResponseObject) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.ResponseObject)))
		i += copy(dAtA[i:], m.ResponseObject)
	}
	if len(m.GatewayNode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.GatewayNode)))
		i += copy(dAtA[i:], m.GatewayNode)
	}
	if len(m.GatewayIP) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.GatewayIP)))
		i += copy(dAtA[i:], m.GatewayIP)
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x72
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovAudit(uint64(len(k))) + 1 + len(v) + sovAudit(uint64(len(v)))
			i = encodeVarintAudit(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAudit(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAudit(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ExternalID) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAudit(dAtA, i, uint64(len(m.ExternalID)))
		i += copy(dAtA[i:], m.ExternalID)
	}
	return i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuditEvent) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAudit(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAudit(uint64(l))
	l = m.EventAttributes.Size()
	n += 1 + l + sovAudit(uint64(l))
	return n
}

func (m *AuditEventList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAudit(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovAudit(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AuditEventRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	return n
}

func (m *EventAttributes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.ClientIPs) > 0 {
		for _, s := range m.ClientIPs {
			l = len(s)
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Outcome)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.RequestURI)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.RequestObject)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.ResponseObject)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.GatewayNode)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.GatewayIP)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAudit(uint64(len(k))) + 1 + len(v) + sovAudit(uint64(len(v)))
			n += mapEntrySize + 1 + sovAudit(uint64(mapEntrySize))
		}
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	return n
}

func sovAudit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EventAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AuditEvent{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &api.ObjectRef{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIPs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIPs = append(m.ClientIPs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &api.ObjectRef{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestObject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestObject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseObject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseObject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAudit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAudit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAudit
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAudit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAudit
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAudit(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAudit
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAudit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAudit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAudit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("audit.proto", fileDescriptorAudit) }

var fileDescriptorAudit = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xc1, 0x4e, 0x23, 0x47,
	0x13, 0x66, 0x00, 0x03, 0x6e, 0x2f, 0x66, 0xe8, 0x1f, 0xf8, 0xc7, 0xd6, 0x2e, 0x46, 0x44, 0x48,
	0x06, 0x61, 0x1b, 0xed, 0x46, 0x64, 0x95, 0x53, 0x70, 0xf0, 0x6e, 0x1c, 0xc1, 0x82, 0xc6, 0x20,
	0xe5, 0xda, 0x8c, 0x8b, 0xa1, 0x93, 0x71, 0xf7, 0x64, 0xba, 0x87, 0x5d, 0x72, 0xc8, 0x11, 0xe5,
	0x59, 0x78, 0x82, 0x3c, 0x02, 0x52, 0x2e, 0x7b, 0xca, 0xd1, 0x8a, 0x38, 0x45, 0x7e, 0x8a, 0xa8,
	0x7b, 0x7a, 0x60, 0x6c, 0xec, 0xbd, 0x75, 0x7d, 0x5f, 0xd5, 0xe7, 0xaf, 0x6b, 0xaa, 0xcb, 0xa8,
	0x40, 0xe2, 0x2e, 0x95, 0xf5, 0x30, 0xe2, 0x92, 0xe3, 0x9c, 0x0e, 0xca, 0x2f, 0x7d, 0xce, 0xfd,
	0x00, 0x1a, 0x24, 0xa4, 0x0d, 0xc2, 0x18, 0x97, 0x44, 0x52, 0xce, 0x44, 0x92, 0x54, 0x6e, 0xf9,
	0x54, 0x5e, 0xc5, 0x17, 0x75, 0x8f, 0xf7, 0x1a, 0x21, 0x30, 0x41, 0x58, 0x97, 0x37, 0xc4, 0xc7,
	0xc6, 0x35, 0x30, 0xea, 0x41, 0x23, 0x96, 0x34, 0x10, 0xaa, 0xd4, 0x07, 0x96, 0xad, 0x6e, 0x50,
	0xe6, 0x05, 0x71, 0x17, 0x52, 0x99, 0x5a, 0x46, 0xc6, 0xe7, 0x3e, 0x6f, 0x68, 0xf8, 0x22, 0xbe,
	0xd4, 0x91, 0x0e, 0xf4, 0xc9, 0xa4, 0x6f, 0x4d, 0xf8, 0x55, 0xe5, 0xb1, 0x07, 0x92, 0x98, 0xb4,
	0xbd, 0x2f, 0xa4, 0x5d, 0x52, 0x08, 0xba, 0xa2, 0x21, 0x20, 0x00, 0x4f, 0xf2, 0xc8, 0x54, 0x20,
	0x12, 0xcb, 0xab, 0xe4, 0xbc, 0xf9, 0xb7, 0x85, 0xd0, 0x81, 0x6a, 0x41, 0xeb, 0x1a, 0x98, 0xc4,
	0xfb, 0xc8, 0x3a, 0x73, 0xac, 0x0d, 0xab, 0x5a, 0x78, 0xbd, 0x58, 0x27, 0x21, 0xad, 0x9f, 0xdd,
	0x84, 0x70, 0x0c, 0x92, 0x34, 0xff, 0x77, 0xdf, 0xaf, 0x4c, 0x7d, 0xee, 0x57, 0xac, 0x41, 0xbf,
	0x32, 0xbf, 0x4b, 0x59, 0x40, 0x19, 0xb8, 0xe9, 0x01, 0xbf, 0x43, 0xd6, 0x89, 0x33, 0xad, 0xeb,
	0x96, 0x74, 0xdd, 0xc9, 0xc5, 0xcf, 0xe0, 0x49, 0x5d, 0x59, 0xce, 0x54, 0x16, 0x95, 0xf1, 0x5d,
	0xde, 0xa3, 0x12, 0x7a, 0xa1, 0xbc, 0x71, 0x47, 0x62, 0xfc, 0x03, 0x42, 0x07, 0x52, 0x46, 0xf4,
	0x22, 0x96, 0x20, 0x9c, 0x19, 0x2d, 0xb8, 0x56, 0x4f, 0x3e, 0x98, 0x76, 0xf8, 0xc4, 0x7e, 0xd9,
	0xd1, 0xe6, 0x9f, 0x16, 0x2a, 0x3e, 0x5d, 0xec, 0x88, 0x0a, 0x89, 0xb7, 0x26, 0x5e, 0x6e, 0x21,
	0x95, 0x72, 0xad, 0x33, 0xfc, 0x06, 0x2d, 0xa8, 0x74, 0x45, 0x98, 0x2b, 0x25, 0xd9, 0x29, 0x98,
	0xc9, 0x7e, 0x4c, 0xc4, 0x3f, 0xa2, 0x5c, 0x5b, 0x42, 0x4f, 0x79, 0x9e, 0xa9, 0x16, 0x5e, 0x2f,
	0x1b, 0xcf, 0x4f, 0x0e, 0x9a, 0xff, 0xbf, 0x4f, 0xac, 0x2e, 0xa9, 0xbb, 0x8a, 0x4c, 0x0f, 0x46,
	0x81, 0xcd, 0x16, 0x5a, 0x7e, 0xaa, 0x73, 0xe1, 0xd7, 0x18, 0x84, 0xc4, 0x7b, 0x68, 0xf6, 0xfc,
	0xbc, 0x7d, 0xa8, 0xfd, 0xe7, 0x9b, 0x58, 0xf5, 0x32, 0x8e, 0x69, 0x37, 0xdb, 0xcb, 0xe1, 0x78,
	0xf3, 0xaf, 0x3c, 0x5a, 0x1a, 0xe9, 0x19, 0x6e, 0xa1, 0x5c, 0x47, 0x12, 0x1f, 0x8c, 0xcc, 0xd6,
	0xdd, 0x6d, 0xa9, 0xd8, 0x91, 0x51, 0x8b, 0xc5, 0xbd, 0xaa, 0x26, 0xb6, 0x95, 0x43, 0xa1, 0x4e,
	0x59, 0x87, 0x23, 0x80, 0x92, 0x39, 0x82, 0x6b, 0x08, 0x74, 0x7f, 0x46, 0x64, 0x34, 0xa1, 0x65,
	0x02, 0x75, 0xca, 0xca, 0x8c, 0x00, 0xf8, 0x3b, 0x34, 0x7b, 0x2e, 0x20, 0x32, 0xdf, 0xb9, 0x98,
	0x19, 0x1c, 0x17, 0x2e, 0xcd, 0x1d, 0x05, 0x44, 0x43, 0x77, 0x1c, 0x8a, 0xf1, 0x01, 0xca, 0x7f,
	0x1f, 0x50, 0x60, 0xb2, 0x7d, 0x2a, 0x9c, 0xd9, 0x8d, 0x99, 0x6a, 0xbe, 0xe9, 0x0c, 0xfa, 0x95,
	0x15, 0x4f, 0x83, 0x35, 0x1a, 0x66, 0x1b, 0x3d, 0x16, 0xc5, 0x47, 0x68, 0xc1, 0x05, 0xc1, 0xe3,
	0xc8, 0x03, 0x27, 0x37, 0xd6, 0xc8, 0xda, 0xa0, 0x5f, 0xc1, 0x91, 0xc9, 0xc9, 0xe8, 0x8d, 0xc1,
	0xf0, 0x3e, 0x9a, 0x3b, 0xf0, 0xd4, 0xeb, 0x77, 0xe6, 0x74, 0x6b, 0x56, 0x06, 0xfd, 0x8a, 0x4d,
	0x34, 0x92, 0xa9, 0x7c, 0x86, 0xe0, 0x63, 0x34, 0x7f, 0x12, 0x4b, 0x8f, 0xf7, 0xc0, 0x99, 0xd7,
	0x85, 0xdb, 0x77, 0xb7, 0x25, 0x3b, 0xed, 0xa9, 0xa1, 0x54, 0x57, 0x97, 0x79, 0x72, 0xce, 0xa8,
	0x3d, 0x87, 0xf0, 0x31, 0x42, 0x66, 0x70, 0xce, 0xdd, 0xb6, 0xb3, 0xa0, 0x15, 0x37, 0xef, 0x6e,
	0x4b, 0xb9, 0x73, 0xb7, 0x5d, 0x55, 0x32, 0xab, 0x51, 0x42, 0xd7, 0xe2, 0x88, 0x66, 0xa4, 0xc6,
	0xc3, 0xf8, 0x18, 0x2d, 0x1a, 0xb9, 0xa4, 0x2b, 0x4e, 0x5e, 0x2b, 0xbe, 0x1c, 0xf4, 0x2b, 0x4e,
	0x5a, 0xc1, 0x35, 0x93, 0xd1, 0x9a, 0xc8, 0xe0, 0x53, 0x54, 0x74, 0x41, 0x84, 0x9c, 0x09, 0x30,
	0x7a, 0x48, 0xeb, 0xbd, 0x1a, 0xf4, 0x2b, 0xa5, 0xc8, 0x30, 0xcf, 0x05, 0x27, 0x53, 0xf8, 0x3d,
	0x2a, 0xbc, 0x27, 0x12, 0x3e, 0x92, 0x9b, 0x0f, 0xbc, 0x0b, 0x4e, 0x41, 0xcb, 0x95, 0x07, 0xfd,
	0xca, 0x9a, 0x9f, 0xc0, 0x35, 0xc6, 0xbb, 0xd9, 0x9e, 0x4d, 0xc0, 0xd5, 0x40, 0x19, 0xa1, 0xf6,
	0xa9, 0xf3, 0x42, 0xcb, 0xe8, 0x81, 0x4a, 0xd3, 0x69, 0x98, 0x1d, 0xa8, 0x71, 0xa8, 0xf2, 0xd2,
	0x81, 0xe8, 0x9a, 0x7a, 0xf0, 0x81, 0xf4, 0xc0, 0x59, 0x7c, 0xf2, 0x22, 0x12, 0xb8, 0xc6, 0xc8,
	0xd0, 0xf7, 0x9b, 0x80, 0x63, 0x17, 0xcd, 0x1e, 0x12, 0x49, 0x9c, 0xa2, 0x5e, 0x29, 0x1b, 0xe3,
	0xd7, 0x60, 0x5d, 0xa5, 0xb4, 0x98, 0x8c, 0x6e, 0x92, 0x07, 0xd3, 0x25, 0xc3, 0x0b, 0x76, 0x38,
	0xc6, 0xbf, 0x23, 0xd4, 0xfa, 0x24, 0x21, 0x62, 0x24, 0x68, 0x1f, 0x3a, 0x4b, 0xda, 0x5b, 0xe7,
	0xee, 0xb6, 0xb4, 0xda, 0x52, 0xf4, 0x49, 0x54, 0xed, 0xc8, 0xe8, 0x08, 0x58, 0x75, 0x6f, 0x77,
	0xff, 0xeb, 0x6d, 0x35, 0x83, 0xaf, 0x52, 0xc2, 0x05, 0xbf, 0xf5, 0x29, 0xac, 0x92, 0x20, 0xbc,
	0x22, 0x2c, 0xee, 0x75, 0x89, 0xb8, 0xda, 0xd6, 0x93, 0x04, 0x46, 0xaf, 0x36, 0xb4, 0x8d, 0xc6,
	0xc3, 0xe5, 0x6f, 0x50, 0xfe, 0xd1, 0x30, 0xb6, 0xd1, 0xcc, 0x2f, 0x70, 0x93, 0xec, 0x22, 0x57,
	0x1d, 0xf1, 0x0a, 0xca, 0x5d, 0x93, 0x20, 0x86, 0x64, 0xb1, 0xb8, 0x49, 0xf0, 0xed, 0xf4, 0x5b,
	0x6b, 0xe7, 0x27, 0xb3, 0x72, 0x70, 0x1e, 0xe5, 0x9a, 0x44, 0x50, 0xcf, 0x9e, 0xc2, 0x05, 0x34,
	0x6f, 0xc6, 0xd2, 0xb6, 0xf0, 0x0b, 0xfd, 0x8e, 0xf5, 0x7c, 0xd8, 0xd3, 0x78, 0x1b, 0x2d, 0x19,
	0xea, 0x11, 0x9c, 0x29, 0xaf, 0x3c, 0xfc, 0x51, 0xb2, 0xd3, 0xa9, 0x4c, 0x87, 0x69, 0xe7, 0xad,
	0xd9, 0x89, 0xd8, 0x41, 0x2b, 0xa6, 0xe6, 0x20, 0x96, 0x57, 0x3c, 0xa2, 0xbf, 0xe9, 0xff, 0x71,
	0x7b, 0x0a, 0xaf, 0xa2, 0x65, 0xc3, 0x9c, 0x46, 0xdc, 0x03, 0x21, 0x28, 0xf3, 0x6d, 0x6b, 0xe7,
	0xab, 0xc7, 0x47, 0xab, 0xac, 0x74, 0x62, 0x4f, 0x51, 0x89, 0xaf, 0x77, 0x84, 0x06, 0x71, 0x04,
	0xb6, 0xd5, 0xb4, 0xef, 0x1f, 0xd6, 0xad, 0xcf, 0x0f, 0xeb, 0xd6, 0x3f, 0x0f, 0xeb, 0xd6, 0xbf,
	0x0f, 0xeb, 0x53, 0xa7, 0xd6, 0xc5, 0x9c, 0xfe, 0xf3, 0x7d, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x09, 0xd4, 0x72, 0x01, 0x8b, 0x08, 0x00, 0x00,
}
