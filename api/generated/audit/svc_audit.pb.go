// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: svc_audit.proto

package audit

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuditV1 service

type AuditV1Client interface {
	AutoWatchSvcAuditV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (AuditV1_AutoWatchSvcAuditV1Client, error)
	// Fetches an audit event given its uuid
	GetEvent(ctx context.Context, in *AuditEventRequest, opts ...grpc.CallOption) (*AuditEvent, error)
}

type auditV1Client struct {
	cc *grpc.ClientConn
}

func NewAuditV1Client(cc *grpc.ClientConn) AuditV1Client {
	return &auditV1Client{cc}
}

func (c *auditV1Client) AutoWatchSvcAuditV1(ctx context.Context, in *api.AggWatchOptions, opts ...grpc.CallOption) (AuditV1_AutoWatchSvcAuditV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuditV1_serviceDesc.Streams[0], c.cc, "/audit.AuditV1/AutoWatchSvcAuditV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditV1AutoWatchSvcAuditV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditV1_AutoWatchSvcAuditV1Client interface {
	Recv() (*api.WatchEventList, error)
	grpc.ClientStream
}

type auditV1AutoWatchSvcAuditV1Client struct {
	grpc.ClientStream
}

func (x *auditV1AutoWatchSvcAuditV1Client) Recv() (*api.WatchEventList, error) {
	m := new(api.WatchEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auditV1Client) GetEvent(ctx context.Context, in *AuditEventRequest, opts ...grpc.CallOption) (*AuditEvent, error) {
	out := new(AuditEvent)
	err := grpc.Invoke(ctx, "/audit.AuditV1/GetEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuditV1 service

type AuditV1Server interface {
	AutoWatchSvcAuditV1(*api.AggWatchOptions, AuditV1_AutoWatchSvcAuditV1Server) error
	// Fetches an audit event given its uuid
	GetEvent(context.Context, *AuditEventRequest) (*AuditEvent, error)
}

func RegisterAuditV1Server(s *grpc.Server, srv AuditV1Server) {
	s.RegisterService(&_AuditV1_serviceDesc, srv)
}

func _AuditV1_AutoWatchSvcAuditV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.AggWatchOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditV1Server).AutoWatchSvcAuditV1(m, &auditV1AutoWatchSvcAuditV1Server{stream})
}

type AuditV1_AutoWatchSvcAuditV1Server interface {
	Send(*api.WatchEventList) error
	grpc.ServerStream
}

type auditV1AutoWatchSvcAuditV1Server struct {
	grpc.ServerStream
}

func (x *auditV1AutoWatchSvcAuditV1Server) Send(m *api.WatchEventList) error {
	return x.ServerStream.SendMsg(m)
}

func _AuditV1_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditV1Server).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditV1/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditV1Server).GetEvent(ctx, req.(*AuditEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "audit.AuditV1",
	HandlerType: (*AuditV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _AuditV1_GetEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AutoWatchSvcAuditV1",
			Handler:       _AuditV1_AutoWatchSvcAuditV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc_audit.proto",
}

func init() { proto.RegisterFile("svc_audit.proto", fileDescriptorSvcAudit) }

var fileDescriptorSvcAudit = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x97, 0xc1, 0xa6, 0x54, 0x51, 0xd7, 0x89, 0x98, 0x22, 0x3d, 0x0c, 0x3c, 0xae, 0x71,
	0xfa, 0x09, 0x26, 0x0e, 0x11, 0x84, 0x89, 0x32, 0x3d, 0x4a, 0xd6, 0xc5, 0x2c, 0xd0, 0x25, 0xd1,
	0x24, 0x1d, 0x22, 0x5e, 0xea, 0x3e, 0x81, 0xde, 0x3c, 0x79, 0xf6, 0xe8, 0x49, 0x6f, 0x1e, 0x3d,
	0x0a, 0x7e, 0x01, 0x29, 0x1e, 0xfc, 0x18, 0xd2, 0xd4, 0x41, 0x41, 0xbc, 0xf5, 0xfd, 0xfe, 0xef,
	0x3d, 0x5e, 0x89, 0xb3, 0xa8, 0xe2, 0xf0, 0x14, 0x9b, 0x01, 0xd3, 0x81, 0xbc, 0x10, 0x5a, 0xb8,
	0x15, 0x2b, 0xbc, 0x35, 0x2a, 0x04, 0x8d, 0x08, 0xc2, 0x92, 0x21, 0xcc, 0xb9, 0xd0, 0x58, 0x33,
	0xc1, 0x55, 0x6e, 0xf2, 0x3a, 0x94, 0xe9, 0xa1, 0xe9, 0x07, 0xa1, 0x18, 0x21, 0x49, 0xb8, 0xc2,
	0x7c, 0x20, 0x90, 0x1a, 0xa3, 0x98, 0x70, 0x16, 0x12, 0x64, 0x34, 0x8b, 0x54, 0x16, 0xa5, 0x84,
	0x17, 0xd3, 0x88, 0xf1, 0x30, 0x32, 0x03, 0x32, 0xad, 0x69, 0x16, 0x6a, 0xa8, 0xa0, 0x02, 0x59,
	0xdc, 0x37, 0x67, 0x56, 0x59, 0x61, 0xbf, 0x7e, 0xed, 0x73, 0x85, 0x9d, 0xde, 0xfa, 0x3f, 0x13,
	0xb2, 0xc1, 0x23, 0xa2, 0x71, 0x6e, 0xdb, 0x7c, 0x01, 0xce, 0x4c, 0x3b, 0x8b, 0x1d, 0xb7, 0xdc,
	0x9e, 0x53, 0x6f, 0x1b, 0x2d, 0x4e, 0xb0, 0x0e, 0x87, 0x47, 0x71, 0x38, 0xc5, 0xcb, 0x01, 0x96,
	0x2c, 0x68, 0x53, 0x6a, 0x0f, 0x5d, 0x69, 0xa7, 0x7a, 0x75, 0x4b, 0x2d, 0xea, 0xc4, 0x84, 0xeb,
	0x7d, 0xa6, 0x74, 0xa3, 0xf6, 0x34, 0x81, 0x95, 0x71, 0xc6, 0x9e, 0x27, 0x10, 0xbc, 0x4e, 0x60,
	0x69, 0x03, 0xb8, 0x5d, 0x67, 0x76, 0x97, 0x68, 0x6b, 0x72, 0x57, 0x83, 0x7c, 0xa3, 0xed, 0xb6,
	0xe8, 0x90, 0x9c, 0x1b, 0xa2, 0xb4, 0x57, 0xfb, 0x73, 0x69, 0xac, 0x24, 0x1f, 0x5f, 0x77, 0xe5,
	0x25, 0x77, 0x01, 0x91, 0x4c, 0x2b, 0x74, 0xd5, 0xeb, 0xed, 0xed, 0x5c, 0x7b, 0xd5, 0xdb, 0x1b,
	0x58, 0x8e, 0x5b, 0xdb, 0xcd, 0xfb, 0x04, 0xce, 0x4b, 0xc2, 0x9b, 0x4a, 0x5e, 0xd2, 0x08, 0x2b,
	0xf5, 0x90, 0xc0, 0xd2, 0x63, 0x02, 0xf3, 0x27, 0x7a, 0x4b, 0x7d, 0xf0, 0x9e, 0xfa, 0xe0, 0x33,
	0xf5, 0xc1, 0x77, 0xea, 0x97, 0x0e, 0x40, 0xbf, 0x6a, 0xff, 0x79, 0xeb, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xa1, 0xab, 0x43, 0x27, 0xd5, 0x01, 0x00, 0x00,
}
