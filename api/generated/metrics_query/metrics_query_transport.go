// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package metrics_query is a auto generated package.
Input file: metrics_query.proto
*/
package metrics_query

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

func encodeHTTPObjectSelector(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPObjectSelector(_ context.Context, r *http.Request) (interface{}, error) {
	var req ObjectSelector
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqObjectSelector encodes GRPC request
func EncodeGrpcReqObjectSelector(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectSelector)
	return req, nil
}

// DecodeGrpcReqObjectSelector decodes GRPC request
func DecodeGrpcReqObjectSelector(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ObjectSelector)
	return req, nil
}

// EncodeGrpcRespObjectSelector encodes GRC response
func EncodeGrpcRespObjectSelector(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespObjectSelector decodes GRPC response
func DecodeGrpcRespObjectSelector(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPPaginationSpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPPaginationSpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req PaginationSpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqPaginationSpec encodes GRPC request
func EncodeGrpcReqPaginationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PaginationSpec)
	return req, nil
}

// DecodeGrpcReqPaginationSpec decodes GRPC request
func DecodeGrpcReqPaginationSpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*PaginationSpec)
	return req, nil
}

// EncodeGrpcRespPaginationSpec encodes GRC response
func EncodeGrpcRespPaginationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespPaginationSpec decodes GRPC response
func DecodeGrpcRespPaginationSpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQueryResponse(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQueryResponse(_ context.Context, r *http.Request) (interface{}, error) {
	var req QueryResponse
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQueryResponse encodes GRPC request
func EncodeGrpcReqQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QueryResponse)
	return req, nil
}

// DecodeGrpcReqQueryResponse decodes GRPC request
func DecodeGrpcReqQueryResponse(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QueryResponse)
	return req, nil
}

// EncodeGrpcRespQueryResponse encodes GRC response
func EncodeGrpcRespQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQueryResponse decodes GRPC response
func DecodeGrpcRespQueryResponse(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQueryResult(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQueryResult(_ context.Context, r *http.Request) (interface{}, error) {
	var req QueryResult
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQueryResult encodes GRPC request
func EncodeGrpcReqQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QueryResult)
	return req, nil
}

// DecodeGrpcReqQueryResult decodes GRPC request
func DecodeGrpcReqQueryResult(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QueryResult)
	return req, nil
}

// EncodeGrpcRespQueryResult encodes GRC response
func EncodeGrpcRespQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQueryResult decodes GRPC response
func DecodeGrpcRespQueryResult(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPQuerySpec(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPQuerySpec(_ context.Context, r *http.Request) (interface{}, error) {
	var req QuerySpec
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqQuerySpec encodes GRPC request
func EncodeGrpcReqQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuerySpec)
	return req, nil
}

// DecodeGrpcReqQuerySpec decodes GRPC request
func DecodeGrpcReqQuerySpec(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*QuerySpec)
	return req, nil
}

// EncodeGrpcRespQuerySpec encodes GRC response
func EncodeGrpcRespQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespQuerySpec decodes GRPC response
func DecodeGrpcRespQuerySpec(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPResultSeries(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPResultSeries(_ context.Context, r *http.Request) (interface{}, error) {
	var req ResultSeries
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqResultSeries encodes GRPC request
func EncodeGrpcReqResultSeries(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ResultSeries)
	return req, nil
}

// DecodeGrpcReqResultSeries decodes GRPC request
func DecodeGrpcReqResultSeries(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*ResultSeries)
	return req, nil
}

// EncodeGrpcRespResultSeries encodes GRC response
func EncodeGrpcRespResultSeries(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespResultSeries decodes GRPC response
func DecodeGrpcRespResultSeries(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

func encodeHTTPTimeRange(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTPTimeRange(_ context.Context, r *http.Request) (interface{}, error) {
	var req TimeRange
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReqTimeRange encodes GRPC request
func EncodeGrpcReqTimeRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TimeRange)
	return req, nil
}

// DecodeGrpcReqTimeRange decodes GRPC request
func DecodeGrpcReqTimeRange(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*TimeRange)
	return req, nil
}

// EncodeGrpcRespTimeRange encodes GRC response
func EncodeGrpcRespTimeRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcRespTimeRange decodes GRPC response
func DecodeGrpcRespTimeRange(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
