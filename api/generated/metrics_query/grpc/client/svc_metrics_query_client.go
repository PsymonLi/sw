// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package grpcclient

import (
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	metrics_query "github.com/pensando/sw/api/generated/metrics_query"
	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/trace"
)

// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ listerwatcher.WatcherClient
var _ kvstore.Interface

// NewMetricsV1 sets up a new client for MetricsV1
func NewMetricsV1(conn *grpc.ClientConn, logger log.Logger) metrics_query.ServiceMetricsV1Client {

	var lQueryEndpoint endpoint.Endpoint
	{
		lQueryEndpoint = grpctransport.NewClient(
			conn,
			"metrics_query.MetricsV1",
			"Query",
			metrics_query.EncodeGrpcReqQuerySpec,
			metrics_query.DecodeGrpcRespQueryResponse,
			&metrics_query.QueryResponse{},
			grpctransport.ClientBefore(trace.ToGRPCRequest(logger)),
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
		lQueryEndpoint = trace.ClientEndPoint("MetricsV1:Query")(lQueryEndpoint)
	}
	return metrics_query.EndpointsMetricsV1Client{
		Client: metrics_query.NewMetricsV1Client(conn),

		QueryEndpoint: lQueryEndpoint,
	}
}

// NewMetricsV1Backend creates an instrumented client with middleware
func NewMetricsV1Backend(conn *grpc.ClientConn, logger log.Logger) metrics_query.ServiceMetricsV1Client {
	cl := NewMetricsV1(conn, logger)
	cl = metrics_query.LoggingMetricsV1MiddlewareClient(logger)(cl)
	return cl
}
