// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package metrics_query is a auto generated package.
Input file: metrics_query.proto
*/
package metrics_query

import (
	fmt "fmt"

	listerwatcher "github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"

	"github.com/pensando/sw/venice/utils/runtime"
)

// Dummy definitions to suppress nonused warnings
var _ kvstore.Interface
var _ log.Logger
var _ listerwatcher.WatcherClient

// Clone clones the object into into or creates one of into is nil
func (m *AggregatorFunction) Clone(into interface{}) (interface{}, error) {
	var out *AggregatorFunction
	var ok bool
	if into == nil {
		out = &AggregatorFunction{}
	} else {
		out, ok = into.(*AggregatorFunction)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *AggregatorFunction) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *FilterSpec) Clone(into interface{}) (interface{}, error) {
	var out *FilterSpec
	var ok bool
	if into == nil {
		out = &FilterSpec{}
	} else {
		out, ok = into.(*FilterSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *FilterSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *MetricSpec) Clone(into interface{}) (interface{}, error) {
	var out *MetricSpec
	var ok bool
	if into == nil {
		out = &MetricSpec{}
	} else {
		out, ok = into.(*MetricSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *MetricSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *ObjectSelector) Clone(into interface{}) (interface{}, error) {
	var out *ObjectSelector
	var ok bool
	if into == nil {
		out = &ObjectSelector{}
	} else {
		out, ok = into.(*ObjectSelector)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *ObjectSelector) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *PaginationSpec) Clone(into interface{}) (interface{}, error) {
	var out *PaginationSpec
	var ok bool
	if into == nil {
		out = &PaginationSpec{}
	} else {
		out, ok = into.(*PaginationSpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *PaginationSpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *QueryResponse) Clone(into interface{}) (interface{}, error) {
	var out *QueryResponse
	var ok bool
	if into == nil {
		out = &QueryResponse{}
	} else {
		out, ok = into.(*QueryResponse)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *QueryResponse) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *QueryResponse_Row) Clone(into interface{}) (interface{}, error) {
	var out *QueryResponse_Row
	var ok bool
	if into == nil {
		out = &QueryResponse_Row{}
	} else {
		out, ok = into.(*QueryResponse_Row)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *QueryResponse_Row) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *QueryResponse_Series) Clone(into interface{}) (interface{}, error) {
	var out *QueryResponse_Series
	var ok bool
	if into == nil {
		out = &QueryResponse_Series{}
	} else {
		out, ok = into.(*QueryResponse_Series)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *QueryResponse_Series) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *QuerySpec) Clone(into interface{}) (interface{}, error) {
	var out *QuerySpec
	var ok bool
	if into == nil {
		out = &QuerySpec{}
	} else {
		out, ok = into.(*QuerySpec)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *QuerySpec) Defaults(ver string) bool {
	return false
}

// Clone clones the object into into or creates one of into is nil
func (m *TimeRange) Clone(into interface{}) (interface{}, error) {
	var out *TimeRange
	var ok bool
	if into == nil {
		out = &TimeRange{}
	} else {
		out, ok = into.(*TimeRange)
		if !ok {
			return nil, fmt.Errorf("mismatched object types")
		}
	}
	*out = *m
	return out, nil
}

// Default sets up the defaults for the object
func (m *TimeRange) Defaults(ver string) bool {
	return false
}

// Validators

func (m *AggregatorFunction) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *FilterSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *MetricSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Tags != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Tags"
		if errs := m.Tags.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *ObjectSelector) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Labels != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Labels"
		if errs := m.Labels.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *PaginationSpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *QueryResponse) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *QueryResponse_Row) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *QueryResponse_Series) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

func (m *QuerySpec) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	if m.Metrics != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Metrics"
		if errs := m.Metrics.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	if m.Object != nil {
		dlmtr := "."
		if path == "" {
			dlmtr = ""
		}
		npath := path + dlmtr + "Object"
		if errs := m.Object.Validate(ver, npath, ignoreStatus); errs != nil {
			ret = append(ret, errs...)
		}
	}
	return ret
}

func (m *TimeRange) Validate(ver, path string, ignoreStatus bool) []error {
	var ret []error
	return ret
}

// Transformers

func init() {
	scheme := runtime.GetDefaultScheme()
	scheme.AddKnownTypes()

}
