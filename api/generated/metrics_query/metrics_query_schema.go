// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package metrics_queryApiServer is a auto generated package.
Input file: metrics_query.proto
*/
package metrics_query

import (
	"reflect"

	"github.com/pensando/sw/venice/utils/runtime"
)

var typesMapMetrics_query = map[string]*runtime.Struct{

	"metrics_query.AggregatorFunction": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(AggregatorFunction{}) },
		Fields: map[string]runtime.Field{
			"Function": runtime.Field{Name: "Function", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "function", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_ENUM"},
		},
	},
	"metrics_query.FilterSpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(FilterSpec{}) },
		Fields: map[string]runtime.Field{
			"Min": runtime.Field{Name: "Min", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "min", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Max": runtime.Field{Name: "Max", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "max", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"metrics_query.MetricSpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(MetricSpec{}) },
		Fields: map[string]runtime.Field{
			"Tags": runtime.Field{Name: "Tags", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tags", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "labels.Selector"},

			"Fields": runtime.Field{Name: "Fields", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "fields", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Functions": runtime.Field{Name: "Functions", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "functions", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "metrics_query.AggregatorFunction"},

			"Filter": runtime.Field{Name: "Filter", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "filter", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "metrics_query.FilterSpec"},
		},
	},
	"metrics_query.ObjectSelector": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(ObjectSelector{}) },
		Fields: map[string]runtime.Field{
			"Kind": runtime.Field{Name: "Kind", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "kind", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Name": runtime.Field{Name: "Name", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "name", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Tenant": runtime.Field{Name: "Tenant", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "tenant", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Namespace": runtime.Field{Name: "Namespace", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "namespace", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Labels": runtime.Field{Name: "Labels", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "labels", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "labels.Selector"},
		},
	},
	"metrics_query.PaginationSpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(PaginationSpec{}) },
		Fields: map[string]runtime.Field{
			"Offset": runtime.Field{Name: "Offset", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "offset", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT32"},

			"Count": runtime.Field{Name: "Count", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "count", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "TYPE_INT32"},
		},
	},
	"metrics_query.QueryResponse": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(QueryResponse{}) },
		Fields: map[string]runtime.Field{
			"SeriesList": runtime.Field{Name: "SeriesList", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "serieslist", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "metrics_query.QueryResponse.Series"},
		},
	},
	"metrics_query.QueryResponse.Row": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(QueryResponse_Row{}) },
		Fields: map[string]runtime.Field{
			"Values": runtime.Field{Name: "Values", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},
		},
	},
	"metrics_query.QueryResponse.Series": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(QueryResponse_Series{}) },
		Fields: map[string]runtime.Field{
			"Columns": runtime.Field{Name: "Columns", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "TYPE_STRING"},

			"Rows": runtime.Field{Name: "Rows", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "", Pointer: false, Slice: true, Map: false, KeyType: "", Type: "metrics_query.QueryResponse.Row"},
		},
	},
	"metrics_query.QuerySpec": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(QuerySpec{}) },
		Fields: map[string]runtime.Field{
			"Object": runtime.Field{Name: "Object", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "object", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "metrics_query.ObjectSelector"},

			"Time": runtime.Field{Name: "Time", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "time", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "metrics_query.TimeRange"},

			"Metrics": runtime.Field{Name: "Metrics", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "metrics", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "metrics_query.MetricSpec"},

			"Pagination": runtime.Field{Name: "Pagination", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "pagination", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "metrics_query.PaginationSpec"},
		},
	},
	"metrics_query.TimeRange": &runtime.Struct{
		GetTypeFn: func() reflect.Type { return reflect.TypeOf(TimeRange{}) },
		Fields: map[string]runtime.Field{
			"Begin": runtime.Field{Name: "Begin", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "begin", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.Timestamp"},

			"End": runtime.Field{Name: "End", CLITag: runtime.CLIInfo{Path: "", Skip: false, Insert: "", Help: ""}, JSONTag: "end", Pointer: true, Slice: false, Map: false, KeyType: "", Type: "api.Timestamp"},
		},
	},
}

func init() {
	schema := runtime.GetDefaultScheme()
	schema.AddSchema(typesMapMetrics_query)
}
