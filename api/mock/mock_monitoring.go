// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/monitoring/svc_monitoring_crudinterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	interfaces "github.com/pensando/sw/api/interfaces"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockMonitoringV1EventPolicyInterface is a mock of (monitoring.MonitoringV1EventPolicyInterface)interface
type MockMonitoringV1EventPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1EventPolicyInterfaceMockRecorder
}

// MockMonitoringV1EventPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1EventPolicyInterface
type MockMonitoringV1EventPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1EventPolicyInterface
}

// NewMockMonitoringV1EventPolicyInterface creates a new mock instance
func NewMockMonitoringV1EventPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1EventPolicyInterface {
	mock := &MockMonitoringV1EventPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1EventPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1EventPolicyInterface) EXPECT() *MockMonitoringV1EventPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Create(ctx context.Context, in *monitoring.EventPolicy) (*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Update(ctx context.Context, in *monitoring.EventPolicy) (*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1EventPolicyInterface) UpdateStatus(ctx context.Context, in *monitoring.EventPolicy) (*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1EventPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.EventPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1EventPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Allowed), oper)
}

// MockMonitoringV1StatsPolicyInterface is a mock of (monitoring.MonitoringV1StatsPolicyInterface)interface
type MockMonitoringV1StatsPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1StatsPolicyInterfaceMockRecorder
}

// MockMonitoringV1StatsPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1StatsPolicyInterface
type MockMonitoringV1StatsPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1StatsPolicyInterface
}

// NewMockMonitoringV1StatsPolicyInterface creates a new mock instance
func NewMockMonitoringV1StatsPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1StatsPolicyInterface {
	mock := &MockMonitoringV1StatsPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1StatsPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1StatsPolicyInterface) EXPECT() *MockMonitoringV1StatsPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Create(ctx context.Context, in *monitoring.StatsPolicy) (*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Update(ctx context.Context, in *monitoring.StatsPolicy) (*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) UpdateStatus(ctx context.Context, in *monitoring.StatsPolicy) (*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.StatsPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1StatsPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Allowed), oper)
}

// MockMonitoringV1FwlogPolicyInterface is a mock of (monitoring.MonitoringV1FwlogPolicyInterface)interface
type MockMonitoringV1FwlogPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1FwlogPolicyInterfaceMockRecorder
}

// MockMonitoringV1FwlogPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1FwlogPolicyInterface
type MockMonitoringV1FwlogPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1FwlogPolicyInterface
}

// NewMockMonitoringV1FwlogPolicyInterface creates a new mock instance
func NewMockMonitoringV1FwlogPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1FwlogPolicyInterface {
	mock := &MockMonitoringV1FwlogPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1FwlogPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1FwlogPolicyInterface) EXPECT() *MockMonitoringV1FwlogPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Create(ctx context.Context, in *monitoring.FwlogPolicy) (*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Update(ctx context.Context, in *monitoring.FwlogPolicy) (*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) UpdateStatus(ctx context.Context, in *monitoring.FwlogPolicy) (*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.FwlogPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1FwlogPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Allowed), oper)
}

// MockMonitoringV1FlowExportPolicyInterface is a mock of (monitoring.MonitoringV1FlowExportPolicyInterface)interface
type MockMonitoringV1FlowExportPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder
}

// MockMonitoringV1FlowExportPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1FlowExportPolicyInterface
type MockMonitoringV1FlowExportPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1FlowExportPolicyInterface
}

// NewMockMonitoringV1FlowExportPolicyInterface creates a new mock instance
func NewMockMonitoringV1FlowExportPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1FlowExportPolicyInterface {
	mock := &MockMonitoringV1FlowExportPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1FlowExportPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1FlowExportPolicyInterface) EXPECT() *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Create(ctx context.Context, in *monitoring.FlowExportPolicy) (*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Update(ctx context.Context, in *monitoring.FlowExportPolicy) (*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) UpdateStatus(ctx context.Context, in *monitoring.FlowExportPolicy) (*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.FlowExportPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1FlowExportPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Allowed), oper)
}

// MockMonitoringV1AlertInterface is a mock of (monitoring.MonitoringV1AlertInterface)interface
type MockMonitoringV1AlertInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertInterfaceMockRecorder
}

// MockMonitoringV1AlertInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertInterface
type MockMonitoringV1AlertInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertInterface
}

// NewMockMonitoringV1AlertInterface creates a new mock instance
func NewMockMonitoringV1AlertInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertInterface {
	mock := &MockMonitoringV1AlertInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1AlertInterface) EXPECT() *MockMonitoringV1AlertInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1AlertInterface) Create(ctx context.Context, in *monitoring.Alert) (*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1AlertInterface) Update(ctx context.Context, in *monitoring.Alert) (*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1AlertInterface) UpdateStatus(ctx context.Context, in *monitoring.Alert) (*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1AlertInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1AlertInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1AlertInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.Alert, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1AlertInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1AlertInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1AlertInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Allowed), oper)
}

// MockMonitoringV1AlertPolicyInterface is a mock of (monitoring.MonitoringV1AlertPolicyInterface)interface
type MockMonitoringV1AlertPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertPolicyInterfaceMockRecorder
}

// MockMonitoringV1AlertPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertPolicyInterface
type MockMonitoringV1AlertPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertPolicyInterface
}

// NewMockMonitoringV1AlertPolicyInterface creates a new mock instance
func NewMockMonitoringV1AlertPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertPolicyInterface {
	mock := &MockMonitoringV1AlertPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1AlertPolicyInterface) EXPECT() *MockMonitoringV1AlertPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Create(ctx context.Context, in *monitoring.AlertPolicy) (*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Update(ctx context.Context, in *monitoring.AlertPolicy) (*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) UpdateStatus(ctx context.Context, in *monitoring.AlertPolicy) (*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.AlertPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1AlertPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Allowed), oper)
}

// MockMonitoringV1AlertDestinationInterface is a mock of (monitoring.MonitoringV1AlertDestinationInterface)interface
type MockMonitoringV1AlertDestinationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertDestinationInterfaceMockRecorder
}

// MockMonitoringV1AlertDestinationInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertDestinationInterface
type MockMonitoringV1AlertDestinationInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertDestinationInterface
}

// NewMockMonitoringV1AlertDestinationInterface creates a new mock instance
func NewMockMonitoringV1AlertDestinationInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertDestinationInterface {
	mock := &MockMonitoringV1AlertDestinationInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertDestinationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1AlertDestinationInterface) EXPECT() *MockMonitoringV1AlertDestinationInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Create(ctx context.Context, in *monitoring.AlertDestination) (*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Update(ctx context.Context, in *monitoring.AlertDestination) (*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) UpdateStatus(ctx context.Context, in *monitoring.AlertDestination) (*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.AlertDestination, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1AlertDestinationInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Allowed), oper)
}

// MockMonitoringV1MirrorSessionInterface is a mock of (monitoring.MonitoringV1MirrorSessionInterface)interface
type MockMonitoringV1MirrorSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1MirrorSessionInterfaceMockRecorder
}

// MockMonitoringV1MirrorSessionInterfaceMockRecorder is the mock recorder for MockMonitoringV1MirrorSessionInterface
type MockMonitoringV1MirrorSessionInterfaceMockRecorder struct {
	mock *MockMonitoringV1MirrorSessionInterface
}

// NewMockMonitoringV1MirrorSessionInterface creates a new mock instance
func NewMockMonitoringV1MirrorSessionInterface(ctrl *gomock.Controller) *MockMonitoringV1MirrorSessionInterface {
	mock := &MockMonitoringV1MirrorSessionInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1MirrorSessionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1MirrorSessionInterface) EXPECT() *MockMonitoringV1MirrorSessionInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Create(ctx context.Context, in *monitoring.MirrorSession) (*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Update(ctx context.Context, in *monitoring.MirrorSession) (*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) UpdateStatus(ctx context.Context, in *monitoring.MirrorSession) (*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.MirrorSession, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1MirrorSessionInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Allowed), oper)
}

// MockMonitoringV1TroubleshootingSessionInterface is a mock of (monitoring.MonitoringV1TroubleshootingSessionInterface)interface
type MockMonitoringV1TroubleshootingSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder
}

// MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder is the mock recorder for MockMonitoringV1TroubleshootingSessionInterface
type MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder struct {
	mock *MockMonitoringV1TroubleshootingSessionInterface
}

// NewMockMonitoringV1TroubleshootingSessionInterface creates a new mock instance
func NewMockMonitoringV1TroubleshootingSessionInterface(ctrl *gomock.Controller) *MockMonitoringV1TroubleshootingSessionInterface {
	mock := &MockMonitoringV1TroubleshootingSessionInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1TroubleshootingSessionInterface) EXPECT() *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Create(ctx context.Context, in *monitoring.TroubleshootingSession) (*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Update(ctx context.Context, in *monitoring.TroubleshootingSession) (*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) UpdateStatus(ctx context.Context, in *monitoring.TroubleshootingSession) (*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.TroubleshootingSession, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.TroubleshootingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1TroubleshootingSessionInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1TroubleshootingSessionInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1TroubleshootingSessionInterface)(nil).Allowed), oper)
}

// MockMonitoringV1TechSupportRequestInterface is a mock of (monitoring.MonitoringV1TechSupportRequestInterface)interface
type MockMonitoringV1TechSupportRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1TechSupportRequestInterfaceMockRecorder
}

// MockMonitoringV1TechSupportRequestInterfaceMockRecorder is the mock recorder for MockMonitoringV1TechSupportRequestInterface
type MockMonitoringV1TechSupportRequestInterfaceMockRecorder struct {
	mock *MockMonitoringV1TechSupportRequestInterface
}

// NewMockMonitoringV1TechSupportRequestInterface creates a new mock instance
func NewMockMonitoringV1TechSupportRequestInterface(ctrl *gomock.Controller) *MockMonitoringV1TechSupportRequestInterface {
	mock := &MockMonitoringV1TechSupportRequestInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1TechSupportRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1TechSupportRequestInterface) EXPECT() *MockMonitoringV1TechSupportRequestInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Create(ctx context.Context, in *monitoring.TechSupportRequest) (*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Update(ctx context.Context, in *monitoring.TechSupportRequest) (*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) UpdateStatus(ctx context.Context, in *monitoring.TechSupportRequest) (*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.TechSupportRequest, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.TechSupportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1TechSupportRequestInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1TechSupportRequestInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1TechSupportRequestInterface)(nil).Allowed), oper)
}

// MockMonitoringV1ArchiveRequestInterface is a mock of MonitoringV1ArchiveRequestInterface interface
type MockMonitoringV1ArchiveRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1ArchiveRequestInterfaceMockRecorder
}

// MockMonitoringV1ArchiveRequestInterfaceMockRecorder is the mock recorder for MockMonitoringV1ArchiveRequestInterface
type MockMonitoringV1ArchiveRequestInterfaceMockRecorder struct {
	mock *MockMonitoringV1ArchiveRequestInterface
}

// NewMockMonitoringV1ArchiveRequestInterface creates a new mock instance
func NewMockMonitoringV1ArchiveRequestInterface(ctrl *gomock.Controller) *MockMonitoringV1ArchiveRequestInterface {
	mock := &MockMonitoringV1ArchiveRequestInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1ArchiveRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1ArchiveRequestInterface) EXPECT() *MockMonitoringV1ArchiveRequestInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Create(ctx context.Context, in *monitoring.ArchiveRequest) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Update(ctx context.Context, in *monitoring.ArchiveRequest) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) UpdateStatus(ctx context.Context, in *monitoring.ArchiveRequest) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).UpdateStatus), ctx, in)
}

// Get mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Allowed), oper)
}

// Cancel mocks base method
func (m *MockMonitoringV1ArchiveRequestInterface) Cancel(ctx context.Context, in *monitoring.CancelArchiveRequest) (*monitoring.ArchiveRequest, error) {
	ret := m.ctrl.Call(m, "Cancel", ctx, in)
	ret0, _ := ret[0].(*monitoring.ArchiveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockMonitoringV1ArchiveRequestInterfaceMockRecorder) Cancel(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockMonitoringV1ArchiveRequestInterface)(nil).Cancel), ctx, in)
}

// MockMonitoringV1Interface is a mock of MonitoringV1Interface interface
type MockMonitoringV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1InterfaceMockRecorder
}

// MockMonitoringV1InterfaceMockRecorder is the mock recorder for MockMonitoringV1Interface
type MockMonitoringV1InterfaceMockRecorder struct {
	mock *MockMonitoringV1Interface
}

// NewMockMonitoringV1Interface creates a new mock instance
func NewMockMonitoringV1Interface(ctrl *gomock.Controller) *MockMonitoringV1Interface {
	mock := &MockMonitoringV1Interface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitoringV1Interface) EXPECT() *MockMonitoringV1InterfaceMockRecorder {
	return m.recorder
}

// EventPolicy mocks base method
func (m *MockMonitoringV1Interface) EventPolicy() monitoring.MonitoringV1EventPolicyInterface {
	ret := m.ctrl.Call(m, "EventPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1EventPolicyInterface)
	return ret0
}

// EventPolicy indicates an expected call of EventPolicy
func (mr *MockMonitoringV1InterfaceMockRecorder) EventPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).EventPolicy))
}

// StatsPolicy mocks base method
func (m *MockMonitoringV1Interface) StatsPolicy() monitoring.MonitoringV1StatsPolicyInterface {
	ret := m.ctrl.Call(m, "StatsPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1StatsPolicyInterface)
	return ret0
}

// StatsPolicy indicates an expected call of StatsPolicy
func (mr *MockMonitoringV1InterfaceMockRecorder) StatsPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).StatsPolicy))
}

// FwlogPolicy mocks base method
func (m *MockMonitoringV1Interface) FwlogPolicy() monitoring.MonitoringV1FwlogPolicyInterface {
	ret := m.ctrl.Call(m, "FwlogPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1FwlogPolicyInterface)
	return ret0
}

// FwlogPolicy indicates an expected call of FwlogPolicy
func (mr *MockMonitoringV1InterfaceMockRecorder) FwlogPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FwlogPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).FwlogPolicy))
}

// FlowExportPolicy mocks base method
func (m *MockMonitoringV1Interface) FlowExportPolicy() monitoring.MonitoringV1FlowExportPolicyInterface {
	ret := m.ctrl.Call(m, "FlowExportPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1FlowExportPolicyInterface)
	return ret0
}

// FlowExportPolicy indicates an expected call of FlowExportPolicy
func (mr *MockMonitoringV1InterfaceMockRecorder) FlowExportPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowExportPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).FlowExportPolicy))
}

// Alert mocks base method
func (m *MockMonitoringV1Interface) Alert() monitoring.MonitoringV1AlertInterface {
	ret := m.ctrl.Call(m, "Alert")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertInterface)
	return ret0
}

// Alert indicates an expected call of Alert
func (mr *MockMonitoringV1InterfaceMockRecorder) Alert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alert", reflect.TypeOf((*MockMonitoringV1Interface)(nil).Alert))
}

// AlertPolicy mocks base method
func (m *MockMonitoringV1Interface) AlertPolicy() monitoring.MonitoringV1AlertPolicyInterface {
	ret := m.ctrl.Call(m, "AlertPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertPolicyInterface)
	return ret0
}

// AlertPolicy indicates an expected call of AlertPolicy
func (mr *MockMonitoringV1InterfaceMockRecorder) AlertPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).AlertPolicy))
}

// AlertDestination mocks base method
func (m *MockMonitoringV1Interface) AlertDestination() monitoring.MonitoringV1AlertDestinationInterface {
	ret := m.ctrl.Call(m, "AlertDestination")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertDestinationInterface)
	return ret0
}

// AlertDestination indicates an expected call of AlertDestination
func (mr *MockMonitoringV1InterfaceMockRecorder) AlertDestination() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertDestination", reflect.TypeOf((*MockMonitoringV1Interface)(nil).AlertDestination))
}

// MirrorSession mocks base method
func (m *MockMonitoringV1Interface) MirrorSession() monitoring.MonitoringV1MirrorSessionInterface {
	ret := m.ctrl.Call(m, "MirrorSession")
	ret0, _ := ret[0].(monitoring.MonitoringV1MirrorSessionInterface)
	return ret0
}

// MirrorSession indicates an expected call of MirrorSession
func (mr *MockMonitoringV1InterfaceMockRecorder) MirrorSession() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSession", reflect.TypeOf((*MockMonitoringV1Interface)(nil).MirrorSession))
}

// TroubleshootingSession mocks base method
func (m *MockMonitoringV1Interface) TroubleshootingSession() monitoring.MonitoringV1TroubleshootingSessionInterface {
	ret := m.ctrl.Call(m, "TroubleshootingSession")
	ret0, _ := ret[0].(monitoring.MonitoringV1TroubleshootingSessionInterface)
	return ret0
}

// TroubleshootingSession indicates an expected call of TroubleshootingSession
func (mr *MockMonitoringV1InterfaceMockRecorder) TroubleshootingSession() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TroubleshootingSession", reflect.TypeOf((*MockMonitoringV1Interface)(nil).TroubleshootingSession))
}

// TechSupportRequest mocks base method
func (m *MockMonitoringV1Interface) TechSupportRequest() monitoring.MonitoringV1TechSupportRequestInterface {
	ret := m.ctrl.Call(m, "TechSupportRequest")
	ret0, _ := ret[0].(monitoring.MonitoringV1TechSupportRequestInterface)
	return ret0
}

// TechSupportRequest indicates an expected call of TechSupportRequest
func (mr *MockMonitoringV1InterfaceMockRecorder) TechSupportRequest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TechSupportRequest", reflect.TypeOf((*MockMonitoringV1Interface)(nil).TechSupportRequest))
}

// ArchiveRequest mocks base method
func (m *MockMonitoringV1Interface) ArchiveRequest() monitoring.MonitoringV1ArchiveRequestInterface {
	ret := m.ctrl.Call(m, "ArchiveRequest")
	ret0, _ := ret[0].(monitoring.MonitoringV1ArchiveRequestInterface)
	return ret0
}

// ArchiveRequest indicates an expected call of ArchiveRequest
func (mr *MockMonitoringV1InterfaceMockRecorder) ArchiveRequest() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveRequest", reflect.TypeOf((*MockMonitoringV1Interface)(nil).ArchiveRequest))
}

// Watch mocks base method
func (m *MockMonitoringV1Interface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMonitoringV1InterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1Interface)(nil).Watch), ctx, options)
}
