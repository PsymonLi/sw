// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/network/network_crudinterface.go

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	network "github.com/pensando/sw/api/generated/network"
	apiserver "github.com/pensando/sw/venice/apiserver"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockEndpointV1EndpointInterface is a mock of (network.EndpointV1EndpointInterface)interface
type MockEndpointV1EndpointInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointV1EndpointInterfaceMockRecorder
}

// MockEndpointV1EndpointInterfaceMockRecorder is the mock recorder for MockEndpointV1EndpointInterface
type MockEndpointV1EndpointInterfaceMockRecorder struct {
	mock *MockEndpointV1EndpointInterface
}

// NewMockEndpointV1EndpointInterface creates a new mock instance
func NewMockEndpointV1EndpointInterface(ctrl *gomock.Controller) *MockEndpointV1EndpointInterface {
	mock := &MockEndpointV1EndpointInterface{ctrl: ctrl}
	mock.recorder = &MockEndpointV1EndpointInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEndpointV1EndpointInterface) EXPECT() *MockEndpointV1EndpointInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockEndpointV1EndpointInterface) Create(ctx context.Context, in *network.Endpoint) (*network.Endpoint, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockEndpointV1EndpointInterface) Update(ctx context.Context, in *network.Endpoint) (*network.Endpoint, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockEndpointV1EndpointInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Endpoint, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockEndpointV1EndpointInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Endpoint, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockEndpointV1EndpointInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Endpoint, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockEndpointV1EndpointInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockEndpointV1EndpointInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockEndpointV1EndpointInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockEndpointV1EndpointInterface)(nil).Allowed), arg0)
}

// MockEndpointV1Interface is a mock of EndpointV1Interface interface
type MockEndpointV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointV1InterfaceMockRecorder
}

// MockEndpointV1InterfaceMockRecorder is the mock recorder for MockEndpointV1Interface
type MockEndpointV1InterfaceMockRecorder struct {
	mock *MockEndpointV1Interface
}

// NewMockEndpointV1Interface creates a new mock instance
func NewMockEndpointV1Interface(ctrl *gomock.Controller) *MockEndpointV1Interface {
	mock := &MockEndpointV1Interface{ctrl: ctrl}
	mock.recorder = &MockEndpointV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEndpointV1Interface) EXPECT() *MockEndpointV1InterfaceMockRecorder {
	return _m.recorder
}

// Endpoint mocks base method
func (_m *MockEndpointV1Interface) Endpoint() network.EndpointV1EndpointInterface {
	ret := _m.ctrl.Call(_m, "Endpoint")
	ret0, _ := ret[0].(network.EndpointV1EndpointInterface)
	return ret0
}

// Endpoint indicates an expected call of Endpoint
func (_mr *MockEndpointV1InterfaceMockRecorder) Endpoint() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Endpoint", reflect.TypeOf((*MockEndpointV1Interface)(nil).Endpoint))
}

// MockLbPolicyV1LbPolicyInterface is a mock of (network.LbPolicyV1LbPolicyInterface)interface
type MockLbPolicyV1LbPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLbPolicyV1LbPolicyInterfaceMockRecorder
}

// MockLbPolicyV1LbPolicyInterfaceMockRecorder is the mock recorder for MockLbPolicyV1LbPolicyInterface
type MockLbPolicyV1LbPolicyInterfaceMockRecorder struct {
	mock *MockLbPolicyV1LbPolicyInterface
}

// NewMockLbPolicyV1LbPolicyInterface creates a new mock instance
func NewMockLbPolicyV1LbPolicyInterface(ctrl *gomock.Controller) *MockLbPolicyV1LbPolicyInterface {
	mock := &MockLbPolicyV1LbPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockLbPolicyV1LbPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLbPolicyV1LbPolicyInterface) EXPECT() *MockLbPolicyV1LbPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Create(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Update(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockLbPolicyV1LbPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockLbPolicyV1LbPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockLbPolicyV1LbPolicyInterface)(nil).Allowed), arg0)
}

// MockLbPolicyV1Interface is a mock of LbPolicyV1Interface interface
type MockLbPolicyV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockLbPolicyV1InterfaceMockRecorder
}

// MockLbPolicyV1InterfaceMockRecorder is the mock recorder for MockLbPolicyV1Interface
type MockLbPolicyV1InterfaceMockRecorder struct {
	mock *MockLbPolicyV1Interface
}

// NewMockLbPolicyV1Interface creates a new mock instance
func NewMockLbPolicyV1Interface(ctrl *gomock.Controller) *MockLbPolicyV1Interface {
	mock := &MockLbPolicyV1Interface{ctrl: ctrl}
	mock.recorder = &MockLbPolicyV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLbPolicyV1Interface) EXPECT() *MockLbPolicyV1InterfaceMockRecorder {
	return _m.recorder
}

// LbPolicy mocks base method
func (_m *MockLbPolicyV1Interface) LbPolicy() network.LbPolicyV1LbPolicyInterface {
	ret := _m.ctrl.Call(_m, "LbPolicy")
	ret0, _ := ret[0].(network.LbPolicyV1LbPolicyInterface)
	return ret0
}

// LbPolicy indicates an expected call of LbPolicy
func (_mr *MockLbPolicyV1InterfaceMockRecorder) LbPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LbPolicy", reflect.TypeOf((*MockLbPolicyV1Interface)(nil).LbPolicy))
}

// MockNetworkV1NetworkInterface is a mock of (network.NetworkV1NetworkInterface)interface
type MockNetworkV1NetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1NetworkInterfaceMockRecorder
}

// MockNetworkV1NetworkInterfaceMockRecorder is the mock recorder for MockNetworkV1NetworkInterface
type MockNetworkV1NetworkInterfaceMockRecorder struct {
	mock *MockNetworkV1NetworkInterface
}

// NewMockNetworkV1NetworkInterface creates a new mock instance
func NewMockNetworkV1NetworkInterface(ctrl *gomock.Controller) *MockNetworkV1NetworkInterface {
	mock := &MockNetworkV1NetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1NetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1NetworkInterface) EXPECT() *MockNetworkV1NetworkInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockNetworkV1NetworkInterface) Create(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockNetworkV1NetworkInterface) Update(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockNetworkV1NetworkInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockNetworkV1NetworkInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockNetworkV1NetworkInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Network, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockNetworkV1NetworkInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockNetworkV1NetworkInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Allowed), arg0)
}

// MockNetworkV1Interface is a mock of NetworkV1Interface interface
type MockNetworkV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1InterfaceMockRecorder
}

// MockNetworkV1InterfaceMockRecorder is the mock recorder for MockNetworkV1Interface
type MockNetworkV1InterfaceMockRecorder struct {
	mock *MockNetworkV1Interface
}

// NewMockNetworkV1Interface creates a new mock instance
func NewMockNetworkV1Interface(ctrl *gomock.Controller) *MockNetworkV1Interface {
	mock := &MockNetworkV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1Interface) EXPECT() *MockNetworkV1InterfaceMockRecorder {
	return _m.recorder
}

// Network mocks base method
func (_m *MockNetworkV1Interface) Network() network.NetworkV1NetworkInterface {
	ret := _m.ctrl.Call(_m, "Network")
	ret0, _ := ret[0].(network.NetworkV1NetworkInterface)
	return ret0
}

// Network indicates an expected call of Network
func (_mr *MockNetworkV1InterfaceMockRecorder) Network() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Network", reflect.TypeOf((*MockNetworkV1Interface)(nil).Network))
}

// MockSecurityGroupV1SecurityGroupInterface is a mock of (network.SecurityGroupV1SecurityGroupInterface)interface
type MockSecurityGroupV1SecurityGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder
}

// MockSecurityGroupV1SecurityGroupInterfaceMockRecorder is the mock recorder for MockSecurityGroupV1SecurityGroupInterface
type MockSecurityGroupV1SecurityGroupInterfaceMockRecorder struct {
	mock *MockSecurityGroupV1SecurityGroupInterface
}

// NewMockSecurityGroupV1SecurityGroupInterface creates a new mock instance
func NewMockSecurityGroupV1SecurityGroupInterface(ctrl *gomock.Controller) *MockSecurityGroupV1SecurityGroupInterface {
	mock := &MockSecurityGroupV1SecurityGroupInterface{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupV1SecurityGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSecurityGroupV1SecurityGroupInterface) EXPECT() *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Create(ctx context.Context, in *network.SecurityGroup) (*network.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Update(ctx context.Context, in *network.SecurityGroup) (*network.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockSecurityGroupV1SecurityGroupInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockSecurityGroupV1SecurityGroupInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockSecurityGroupV1SecurityGroupInterface)(nil).Allowed), arg0)
}

// MockSecurityGroupV1Interface is a mock of SecurityGroupV1Interface interface
type MockSecurityGroupV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityGroupV1InterfaceMockRecorder
}

// MockSecurityGroupV1InterfaceMockRecorder is the mock recorder for MockSecurityGroupV1Interface
type MockSecurityGroupV1InterfaceMockRecorder struct {
	mock *MockSecurityGroupV1Interface
}

// NewMockSecurityGroupV1Interface creates a new mock instance
func NewMockSecurityGroupV1Interface(ctrl *gomock.Controller) *MockSecurityGroupV1Interface {
	mock := &MockSecurityGroupV1Interface{ctrl: ctrl}
	mock.recorder = &MockSecurityGroupV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSecurityGroupV1Interface) EXPECT() *MockSecurityGroupV1InterfaceMockRecorder {
	return _m.recorder
}

// SecurityGroup mocks base method
func (_m *MockSecurityGroupV1Interface) SecurityGroup() network.SecurityGroupV1SecurityGroupInterface {
	ret := _m.ctrl.Call(_m, "SecurityGroup")
	ret0, _ := ret[0].(network.SecurityGroupV1SecurityGroupInterface)
	return ret0
}

// SecurityGroup indicates an expected call of SecurityGroup
func (_mr *MockSecurityGroupV1InterfaceMockRecorder) SecurityGroup() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SecurityGroup", reflect.TypeOf((*MockSecurityGroupV1Interface)(nil).SecurityGroup))
}

// MockServiceV1ServiceInterface is a mock of (network.ServiceV1ServiceInterface)interface
type MockServiceV1ServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceV1ServiceInterfaceMockRecorder
}

// MockServiceV1ServiceInterfaceMockRecorder is the mock recorder for MockServiceV1ServiceInterface
type MockServiceV1ServiceInterfaceMockRecorder struct {
	mock *MockServiceV1ServiceInterface
}

// NewMockServiceV1ServiceInterface creates a new mock instance
func NewMockServiceV1ServiceInterface(ctrl *gomock.Controller) *MockServiceV1ServiceInterface {
	mock := &MockServiceV1ServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceV1ServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceV1ServiceInterface) EXPECT() *MockServiceV1ServiceInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockServiceV1ServiceInterface) Create(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockServiceV1ServiceInterface) Update(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockServiceV1ServiceInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockServiceV1ServiceInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockServiceV1ServiceInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Service, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockServiceV1ServiceInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockServiceV1ServiceInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockServiceV1ServiceInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockServiceV1ServiceInterface)(nil).Allowed), arg0)
}

// MockServiceV1Interface is a mock of ServiceV1Interface interface
type MockServiceV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceV1InterfaceMockRecorder
}

// MockServiceV1InterfaceMockRecorder is the mock recorder for MockServiceV1Interface
type MockServiceV1InterfaceMockRecorder struct {
	mock *MockServiceV1Interface
}

// NewMockServiceV1Interface creates a new mock instance
func NewMockServiceV1Interface(ctrl *gomock.Controller) *MockServiceV1Interface {
	mock := &MockServiceV1Interface{ctrl: ctrl}
	mock.recorder = &MockServiceV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServiceV1Interface) EXPECT() *MockServiceV1InterfaceMockRecorder {
	return _m.recorder
}

// Service mocks base method
func (_m *MockServiceV1Interface) Service() network.ServiceV1ServiceInterface {
	ret := _m.ctrl.Call(_m, "Service")
	ret0, _ := ret[0].(network.ServiceV1ServiceInterface)
	return ret0
}

// Service indicates an expected call of Service
func (_mr *MockServiceV1InterfaceMockRecorder) Service() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Service", reflect.TypeOf((*MockServiceV1Interface)(nil).Service))
}

// MockSgpolicyV1SgpolicyInterface is a mock of (network.SgpolicyV1SgpolicyInterface)interface
type MockSgpolicyV1SgpolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSgpolicyV1SgpolicyInterfaceMockRecorder
}

// MockSgpolicyV1SgpolicyInterfaceMockRecorder is the mock recorder for MockSgpolicyV1SgpolicyInterface
type MockSgpolicyV1SgpolicyInterfaceMockRecorder struct {
	mock *MockSgpolicyV1SgpolicyInterface
}

// NewMockSgpolicyV1SgpolicyInterface creates a new mock instance
func NewMockSgpolicyV1SgpolicyInterface(ctrl *gomock.Controller) *MockSgpolicyV1SgpolicyInterface {
	mock := &MockSgpolicyV1SgpolicyInterface{ctrl: ctrl}
	mock.recorder = &MockSgpolicyV1SgpolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSgpolicyV1SgpolicyInterface) EXPECT() *MockSgpolicyV1SgpolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Create(ctx context.Context, in *network.Sgpolicy) (*network.Sgpolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Sgpolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Update(ctx context.Context, in *network.Sgpolicy) (*network.Sgpolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Sgpolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Sgpolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Sgpolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Sgpolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Sgpolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Sgpolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Sgpolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockSgpolicyV1SgpolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockSgpolicyV1SgpolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockSgpolicyV1SgpolicyInterface)(nil).Allowed), arg0)
}

// MockSgpolicyV1Interface is a mock of SgpolicyV1Interface interface
type MockSgpolicyV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockSgpolicyV1InterfaceMockRecorder
}

// MockSgpolicyV1InterfaceMockRecorder is the mock recorder for MockSgpolicyV1Interface
type MockSgpolicyV1InterfaceMockRecorder struct {
	mock *MockSgpolicyV1Interface
}

// NewMockSgpolicyV1Interface creates a new mock instance
func NewMockSgpolicyV1Interface(ctrl *gomock.Controller) *MockSgpolicyV1Interface {
	mock := &MockSgpolicyV1Interface{ctrl: ctrl}
	mock.recorder = &MockSgpolicyV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSgpolicyV1Interface) EXPECT() *MockSgpolicyV1InterfaceMockRecorder {
	return _m.recorder
}

// Sgpolicy mocks base method
func (_m *MockSgpolicyV1Interface) Sgpolicy() network.SgpolicyV1SgpolicyInterface {
	ret := _m.ctrl.Call(_m, "Sgpolicy")
	ret0, _ := ret[0].(network.SgpolicyV1SgpolicyInterface)
	return ret0
}

// Sgpolicy indicates an expected call of Sgpolicy
func (_mr *MockSgpolicyV1InterfaceMockRecorder) Sgpolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Sgpolicy", reflect.TypeOf((*MockSgpolicyV1Interface)(nil).Sgpolicy))
}

// MockTenantV1TenantInterface is a mock of (network.TenantV1TenantInterface)interface
type MockTenantV1TenantInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTenantV1TenantInterfaceMockRecorder
}

// MockTenantV1TenantInterfaceMockRecorder is the mock recorder for MockTenantV1TenantInterface
type MockTenantV1TenantInterfaceMockRecorder struct {
	mock *MockTenantV1TenantInterface
}

// NewMockTenantV1TenantInterface creates a new mock instance
func NewMockTenantV1TenantInterface(ctrl *gomock.Controller) *MockTenantV1TenantInterface {
	mock := &MockTenantV1TenantInterface{ctrl: ctrl}
	mock.recorder = &MockTenantV1TenantInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTenantV1TenantInterface) EXPECT() *MockTenantV1TenantInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockTenantV1TenantInterface) Create(ctx context.Context, in *network.Tenant) (*network.Tenant, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockTenantV1TenantInterface) Update(ctx context.Context, in *network.Tenant) (*network.Tenant, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockTenantV1TenantInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Tenant, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockTenantV1TenantInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Tenant, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockTenantV1TenantInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Tenant, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockTenantV1TenantInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockTenantV1TenantInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockTenantV1TenantInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockTenantV1TenantInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockTenantV1TenantInterface)(nil).Allowed), arg0)
}

// MockTenantV1Interface is a mock of TenantV1Interface interface
type MockTenantV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockTenantV1InterfaceMockRecorder
}

// MockTenantV1InterfaceMockRecorder is the mock recorder for MockTenantV1Interface
type MockTenantV1InterfaceMockRecorder struct {
	mock *MockTenantV1Interface
}

// NewMockTenantV1Interface creates a new mock instance
func NewMockTenantV1Interface(ctrl *gomock.Controller) *MockTenantV1Interface {
	mock := &MockTenantV1Interface{ctrl: ctrl}
	mock.recorder = &MockTenantV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTenantV1Interface) EXPECT() *MockTenantV1InterfaceMockRecorder {
	return _m.recorder
}

// Tenant mocks base method
func (_m *MockTenantV1Interface) Tenant() network.TenantV1TenantInterface {
	ret := _m.ctrl.Call(_m, "Tenant")
	ret0, _ := ret[0].(network.TenantV1TenantInterface)
	return ret0
}

// Tenant indicates an expected call of Tenant
func (_mr *MockTenantV1InterfaceMockRecorder) Tenant() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tenant", reflect.TypeOf((*MockTenantV1Interface)(nil).Tenant))
}
