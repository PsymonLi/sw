// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/network/svc_network_crudinterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	network "github.com/pensando/sw/api/generated/network"
	interfaces "github.com/pensando/sw/api/interfaces"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockNetworkV1NetworkInterface is a mock of (network.NetworkV1NetworkInterface)interface
type MockNetworkV1NetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1NetworkInterfaceMockRecorder
}

// MockNetworkV1NetworkInterfaceMockRecorder is the mock recorder for MockNetworkV1NetworkInterface
type MockNetworkV1NetworkInterfaceMockRecorder struct {
	mock *MockNetworkV1NetworkInterface
}

// NewMockNetworkV1NetworkInterface creates a new mock instance
func NewMockNetworkV1NetworkInterface(ctrl *gomock.Controller) *MockNetworkV1NetworkInterface {
	mock := &MockNetworkV1NetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1NetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1NetworkInterface) EXPECT() *MockNetworkV1NetworkInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1NetworkInterface) Create(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1NetworkInterface) Update(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1NetworkInterface) UpdateStatus(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1NetworkInterface) Label(ctx context.Context, in *api.Label) (*network.Network, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1NetworkInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1NetworkInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1NetworkInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Network, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1NetworkInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1NetworkInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1NetworkInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Allowed), oper)
}

// MockNetworkV1ServiceInterface is a mock of (network.NetworkV1ServiceInterface)interface
type MockNetworkV1ServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1ServiceInterfaceMockRecorder
}

// MockNetworkV1ServiceInterfaceMockRecorder is the mock recorder for MockNetworkV1ServiceInterface
type MockNetworkV1ServiceInterfaceMockRecorder struct {
	mock *MockNetworkV1ServiceInterface
}

// NewMockNetworkV1ServiceInterface creates a new mock instance
func NewMockNetworkV1ServiceInterface(ctrl *gomock.Controller) *MockNetworkV1ServiceInterface {
	mock := &MockNetworkV1ServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1ServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1ServiceInterface) EXPECT() *MockNetworkV1ServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1ServiceInterface) Create(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1ServiceInterface) Update(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1ServiceInterface) UpdateStatus(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1ServiceInterface) Label(ctx context.Context, in *api.Label) (*network.Service, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1ServiceInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1ServiceInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1ServiceInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Service, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1ServiceInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1ServiceInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1ServiceInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Allowed), oper)
}

// MockNetworkV1LbPolicyInterface is a mock of (network.NetworkV1LbPolicyInterface)interface
type MockNetworkV1LbPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1LbPolicyInterfaceMockRecorder
}

// MockNetworkV1LbPolicyInterfaceMockRecorder is the mock recorder for MockNetworkV1LbPolicyInterface
type MockNetworkV1LbPolicyInterfaceMockRecorder struct {
	mock *MockNetworkV1LbPolicyInterface
}

// NewMockNetworkV1LbPolicyInterface creates a new mock instance
func NewMockNetworkV1LbPolicyInterface(ctrl *gomock.Controller) *MockNetworkV1LbPolicyInterface {
	mock := &MockNetworkV1LbPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1LbPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1LbPolicyInterface) EXPECT() *MockNetworkV1LbPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1LbPolicyInterface) Create(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1LbPolicyInterface) Update(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1LbPolicyInterface) UpdateStatus(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1LbPolicyInterface) Label(ctx context.Context, in *api.Label) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1LbPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1LbPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1LbPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.LbPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1LbPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1LbPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Allowed), oper)
}

// MockNetworkV1VirtualRouterInterface is a mock of (network.NetworkV1VirtualRouterInterface)interface
type MockNetworkV1VirtualRouterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1VirtualRouterInterfaceMockRecorder
}

// MockNetworkV1VirtualRouterInterfaceMockRecorder is the mock recorder for MockNetworkV1VirtualRouterInterface
type MockNetworkV1VirtualRouterInterfaceMockRecorder struct {
	mock *MockNetworkV1VirtualRouterInterface
}

// NewMockNetworkV1VirtualRouterInterface creates a new mock instance
func NewMockNetworkV1VirtualRouterInterface(ctrl *gomock.Controller) *MockNetworkV1VirtualRouterInterface {
	mock := &MockNetworkV1VirtualRouterInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1VirtualRouterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1VirtualRouterInterface) EXPECT() *MockNetworkV1VirtualRouterInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Create(ctx context.Context, in *network.VirtualRouter) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Update(ctx context.Context, in *network.VirtualRouter) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1VirtualRouterInterface) UpdateStatus(ctx context.Context, in *network.VirtualRouter) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Label(ctx context.Context, in *api.Label) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1VirtualRouterInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.VirtualRouter, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.VirtualRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1VirtualRouterInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1VirtualRouterInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1VirtualRouterInterface)(nil).Allowed), oper)
}

// MockNetworkV1NetworkInterfaceInterface is a mock of NetworkV1NetworkInterfaceInterface interface
type MockNetworkV1NetworkInterfaceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1NetworkInterfaceInterfaceMockRecorder
}

// MockNetworkV1NetworkInterfaceInterfaceMockRecorder is the mock recorder for MockNetworkV1NetworkInterfaceInterface
type MockNetworkV1NetworkInterfaceInterfaceMockRecorder struct {
	mock *MockNetworkV1NetworkInterfaceInterface
}

// NewMockNetworkV1NetworkInterfaceInterface creates a new mock instance
func NewMockNetworkV1NetworkInterfaceInterface(ctrl *gomock.Controller) *MockNetworkV1NetworkInterfaceInterface {
	mock := &MockNetworkV1NetworkInterfaceInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1NetworkInterfaceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1NetworkInterfaceInterface) EXPECT() *MockNetworkV1NetworkInterfaceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Create(ctx context.Context, in *network.NetworkInterface) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Update(ctx context.Context, in *network.NetworkInterface) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) UpdateStatus(ctx context.Context, in *network.NetworkInterface) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Label(ctx context.Context, in *api.Label) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.NetworkInterface, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.NetworkInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1NetworkInterfaceInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1NetworkInterfaceInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1NetworkInterfaceInterface)(nil).Allowed), oper)
}

// MockNetworkV1IPAMPolicyInterface is a mock of NetworkV1IPAMPolicyInterface interface
type MockNetworkV1IPAMPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1IPAMPolicyInterfaceMockRecorder
}

// MockNetworkV1IPAMPolicyInterfaceMockRecorder is the mock recorder for MockNetworkV1IPAMPolicyInterface
type MockNetworkV1IPAMPolicyInterfaceMockRecorder struct {
	mock *MockNetworkV1IPAMPolicyInterface
}

// NewMockNetworkV1IPAMPolicyInterface creates a new mock instance
func NewMockNetworkV1IPAMPolicyInterface(ctrl *gomock.Controller) *MockNetworkV1IPAMPolicyInterface {
	mock := &MockNetworkV1IPAMPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1IPAMPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1IPAMPolicyInterface) EXPECT() *MockNetworkV1IPAMPolicyInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Create(ctx context.Context, in *network.IPAMPolicy) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Update(ctx context.Context, in *network.IPAMPolicy) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) UpdateStatus(ctx context.Context, in *network.IPAMPolicy) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Label(ctx context.Context, in *api.Label) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.IPAMPolicy, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.IPAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1IPAMPolicyInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1IPAMPolicyInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1IPAMPolicyInterface)(nil).Allowed), oper)
}

// MockNetworkV1RoutingConfigInterface is a mock of NetworkV1RoutingConfigInterface interface
type MockNetworkV1RoutingConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1RoutingConfigInterfaceMockRecorder
}

// MockNetworkV1RoutingConfigInterfaceMockRecorder is the mock recorder for MockNetworkV1RoutingConfigInterface
type MockNetworkV1RoutingConfigInterfaceMockRecorder struct {
	mock *MockNetworkV1RoutingConfigInterface
}

// NewMockNetworkV1RoutingConfigInterface creates a new mock instance
func NewMockNetworkV1RoutingConfigInterface(ctrl *gomock.Controller) *MockNetworkV1RoutingConfigInterface {
	mock := &MockNetworkV1RoutingConfigInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1RoutingConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1RoutingConfigInterface) EXPECT() *MockNetworkV1RoutingConfigInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Create(ctx context.Context, in *network.RoutingConfig) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Update(ctx context.Context, in *network.RoutingConfig) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1RoutingConfigInterface) UpdateStatus(ctx context.Context, in *network.RoutingConfig) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Label(ctx context.Context, in *api.Label) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1RoutingConfigInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.RoutingConfig, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.RoutingConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1RoutingConfigInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1RoutingConfigInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1RoutingConfigInterface)(nil).Allowed), oper)
}

// MockNetworkV1RouteTableInterface is a mock of NetworkV1RouteTableInterface interface
type MockNetworkV1RouteTableInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1RouteTableInterfaceMockRecorder
}

// MockNetworkV1RouteTableInterfaceMockRecorder is the mock recorder for MockNetworkV1RouteTableInterface
type MockNetworkV1RouteTableInterfaceMockRecorder struct {
	mock *MockNetworkV1RouteTableInterface
}

// NewMockNetworkV1RouteTableInterface creates a new mock instance
func NewMockNetworkV1RouteTableInterface(ctrl *gomock.Controller) *MockNetworkV1RouteTableInterface {
	mock := &MockNetworkV1RouteTableInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1RouteTableInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1RouteTableInterface) EXPECT() *MockNetworkV1RouteTableInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1RouteTableInterface) Create(ctx context.Context, in *network.RouteTable) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1RouteTableInterface) Update(ctx context.Context, in *network.RouteTable) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1RouteTableInterface) UpdateStatus(ctx context.Context, in *network.RouteTable) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1RouteTableInterface) Label(ctx context.Context, in *api.Label) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1RouteTableInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1RouteTableInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1RouteTableInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.RouteTable, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1RouteTableInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1RouteTableInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1RouteTableInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1RouteTableInterface)(nil).Allowed), oper)
}

// MockNetworkV1VirtualRouterPeeringGroupInterface is a mock of NetworkV1VirtualRouterPeeringGroupInterface interface
type MockNetworkV1VirtualRouterPeeringGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder
}

// MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder is the mock recorder for MockNetworkV1VirtualRouterPeeringGroupInterface
type MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder struct {
	mock *MockNetworkV1VirtualRouterPeeringGroupInterface
}

// NewMockNetworkV1VirtualRouterPeeringGroupInterface creates a new mock instance
func NewMockNetworkV1VirtualRouterPeeringGroupInterface(ctrl *gomock.Controller) *MockNetworkV1VirtualRouterPeeringGroupInterface {
	mock := &MockNetworkV1VirtualRouterPeeringGroupInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) EXPECT() *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Create(ctx context.Context, in *network.VirtualRouterPeeringGroup) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Update(ctx context.Context, in *network.VirtualRouterPeeringGroup) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) UpdateStatus(ctx context.Context, in *network.VirtualRouterPeeringGroup) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Label(ctx context.Context, in *api.Label) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.VirtualRouterPeeringGroup, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.VirtualRouterPeeringGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockNetworkV1VirtualRouterPeeringGroupInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockNetworkV1VirtualRouterPeeringGroupInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1VirtualRouterPeeringGroupInterface)(nil).Allowed), oper)
}

// MockNetworkV1Interface is a mock of NetworkV1Interface interface
type MockNetworkV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1InterfaceMockRecorder
}

// MockNetworkV1InterfaceMockRecorder is the mock recorder for MockNetworkV1Interface
type MockNetworkV1InterfaceMockRecorder struct {
	mock *MockNetworkV1Interface
}

// NewMockNetworkV1Interface creates a new mock instance
func NewMockNetworkV1Interface(ctrl *gomock.Controller) *MockNetworkV1Interface {
	mock := &MockNetworkV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkV1Interface) EXPECT() *MockNetworkV1InterfaceMockRecorder {
	return m.recorder
}

// Network mocks base method
func (m *MockNetworkV1Interface) Network() network.NetworkV1NetworkInterface {
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(network.NetworkV1NetworkInterface)
	return ret0
}

// Network indicates an expected call of Network
func (mr *MockNetworkV1InterfaceMockRecorder) Network() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockNetworkV1Interface)(nil).Network))
}

// Service mocks base method
func (m *MockNetworkV1Interface) Service() network.NetworkV1ServiceInterface {
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(network.NetworkV1ServiceInterface)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockNetworkV1InterfaceMockRecorder) Service() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockNetworkV1Interface)(nil).Service))
}

// LbPolicy mocks base method
func (m *MockNetworkV1Interface) LbPolicy() network.NetworkV1LbPolicyInterface {
	ret := m.ctrl.Call(m, "LbPolicy")
	ret0, _ := ret[0].(network.NetworkV1LbPolicyInterface)
	return ret0
}

// LbPolicy indicates an expected call of LbPolicy
func (mr *MockNetworkV1InterfaceMockRecorder) LbPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LbPolicy", reflect.TypeOf((*MockNetworkV1Interface)(nil).LbPolicy))
}

// VirtualRouter mocks base method
func (m *MockNetworkV1Interface) VirtualRouter() network.NetworkV1VirtualRouterInterface {
	ret := m.ctrl.Call(m, "VirtualRouter")
	ret0, _ := ret[0].(network.NetworkV1VirtualRouterInterface)
	return ret0
}

// VirtualRouter indicates an expected call of VirtualRouter
func (mr *MockNetworkV1InterfaceMockRecorder) VirtualRouter() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualRouter", reflect.TypeOf((*MockNetworkV1Interface)(nil).VirtualRouter))
}

// NetworkInterface mocks base method
func (m *MockNetworkV1Interface) NetworkInterface() network.NetworkV1NetworkInterfaceInterface {
	ret := m.ctrl.Call(m, "NetworkInterface")
	ret0, _ := ret[0].(network.NetworkV1NetworkInterfaceInterface)
	return ret0
}

// NetworkInterface indicates an expected call of NetworkInterface
func (mr *MockNetworkV1InterfaceMockRecorder) NetworkInterface() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInterface", reflect.TypeOf((*MockNetworkV1Interface)(nil).NetworkInterface))
}

// IPAMPolicy mocks base method
func (m *MockNetworkV1Interface) IPAMPolicy() network.NetworkV1IPAMPolicyInterface {
	ret := m.ctrl.Call(m, "IPAMPolicy")
	ret0, _ := ret[0].(network.NetworkV1IPAMPolicyInterface)
	return ret0
}

// IPAMPolicy indicates an expected call of IPAMPolicy
func (mr *MockNetworkV1InterfaceMockRecorder) IPAMPolicy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAMPolicy", reflect.TypeOf((*MockNetworkV1Interface)(nil).IPAMPolicy))
}

// RoutingConfig mocks base method
func (m *MockNetworkV1Interface) RoutingConfig() network.NetworkV1RoutingConfigInterface {
	ret := m.ctrl.Call(m, "RoutingConfig")
	ret0, _ := ret[0].(network.NetworkV1RoutingConfigInterface)
	return ret0
}

// RoutingConfig indicates an expected call of RoutingConfig
func (mr *MockNetworkV1InterfaceMockRecorder) RoutingConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingConfig", reflect.TypeOf((*MockNetworkV1Interface)(nil).RoutingConfig))
}

// RouteTable mocks base method
func (m *MockNetworkV1Interface) RouteTable() network.NetworkV1RouteTableInterface {
	ret := m.ctrl.Call(m, "RouteTable")
	ret0, _ := ret[0].(network.NetworkV1RouteTableInterface)
	return ret0
}

// RouteTable indicates an expected call of RouteTable
func (mr *MockNetworkV1InterfaceMockRecorder) RouteTable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteTable", reflect.TypeOf((*MockNetworkV1Interface)(nil).RouteTable))
}

// VirtualRouterPeeringGroup mocks base method
func (m *MockNetworkV1Interface) VirtualRouterPeeringGroup() network.NetworkV1VirtualRouterPeeringGroupInterface {
	ret := m.ctrl.Call(m, "VirtualRouterPeeringGroup")
	ret0, _ := ret[0].(network.NetworkV1VirtualRouterPeeringGroupInterface)
	return ret0
}

// VirtualRouterPeeringGroup indicates an expected call of VirtualRouterPeeringGroup
func (mr *MockNetworkV1InterfaceMockRecorder) VirtualRouterPeeringGroup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualRouterPeeringGroup", reflect.TypeOf((*MockNetworkV1Interface)(nil).VirtualRouterPeeringGroup))
}

// Watch mocks base method
func (m *MockNetworkV1Interface) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockNetworkV1InterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1Interface)(nil).Watch), ctx, options)
}
