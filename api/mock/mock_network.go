// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/network/svc_network_crudinterface.go

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	network "github.com/pensando/sw/api/generated/network"
	apiserver "github.com/pensando/sw/venice/apiserver"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockNetworkV1NetworkInterface is a mock of (network.NetworkV1NetworkInterface)interface
type MockNetworkV1NetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1NetworkInterfaceMockRecorder
}

// MockNetworkV1NetworkInterfaceMockRecorder is the mock recorder for MockNetworkV1NetworkInterface
type MockNetworkV1NetworkInterfaceMockRecorder struct {
	mock *MockNetworkV1NetworkInterface
}

// NewMockNetworkV1NetworkInterface creates a new mock instance
func NewMockNetworkV1NetworkInterface(ctrl *gomock.Controller) *MockNetworkV1NetworkInterface {
	mock := &MockNetworkV1NetworkInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1NetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1NetworkInterface) EXPECT() *MockNetworkV1NetworkInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockNetworkV1NetworkInterface) Create(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockNetworkV1NetworkInterface) Update(ctx context.Context, in *network.Network) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockNetworkV1NetworkInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockNetworkV1NetworkInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Network, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockNetworkV1NetworkInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Network, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockNetworkV1NetworkInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockNetworkV1NetworkInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockNetworkV1NetworkInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1NetworkInterface)(nil).Allowed), arg0)
}

// MockNetworkV1ServiceInterface is a mock of (network.NetworkV1ServiceInterface)interface
type MockNetworkV1ServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1ServiceInterfaceMockRecorder
}

// MockNetworkV1ServiceInterfaceMockRecorder is the mock recorder for MockNetworkV1ServiceInterface
type MockNetworkV1ServiceInterfaceMockRecorder struct {
	mock *MockNetworkV1ServiceInterface
}

// NewMockNetworkV1ServiceInterface creates a new mock instance
func NewMockNetworkV1ServiceInterface(ctrl *gomock.Controller) *MockNetworkV1ServiceInterface {
	mock := &MockNetworkV1ServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1ServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1ServiceInterface) EXPECT() *MockNetworkV1ServiceInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockNetworkV1ServiceInterface) Create(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockNetworkV1ServiceInterface) Update(ctx context.Context, in *network.Service) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockNetworkV1ServiceInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockNetworkV1ServiceInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.Service, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockNetworkV1ServiceInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.Service, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockNetworkV1ServiceInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockNetworkV1ServiceInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockNetworkV1ServiceInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1ServiceInterface)(nil).Allowed), arg0)
}

// MockNetworkV1LbPolicyInterface is a mock of (network.NetworkV1LbPolicyInterface)interface
type MockNetworkV1LbPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1LbPolicyInterfaceMockRecorder
}

// MockNetworkV1LbPolicyInterfaceMockRecorder is the mock recorder for MockNetworkV1LbPolicyInterface
type MockNetworkV1LbPolicyInterfaceMockRecorder struct {
	mock *MockNetworkV1LbPolicyInterface
}

// NewMockNetworkV1LbPolicyInterface creates a new mock instance
func NewMockNetworkV1LbPolicyInterface(ctrl *gomock.Controller) *MockNetworkV1LbPolicyInterface {
	mock := &MockNetworkV1LbPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1LbPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1LbPolicyInterface) EXPECT() *MockNetworkV1LbPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Create(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Update(ctx context.Context, in *network.LbPolicy) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockNetworkV1LbPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*network.LbPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*network.LbPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockNetworkV1LbPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockNetworkV1LbPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockNetworkV1LbPolicyInterface)(nil).Allowed), arg0)
}

// MockNetworkV1Interface is a mock of NetworkV1Interface interface
type MockNetworkV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkV1InterfaceMockRecorder
}

// MockNetworkV1InterfaceMockRecorder is the mock recorder for MockNetworkV1Interface
type MockNetworkV1InterfaceMockRecorder struct {
	mock *MockNetworkV1Interface
}

// NewMockNetworkV1Interface creates a new mock instance
func NewMockNetworkV1Interface(ctrl *gomock.Controller) *MockNetworkV1Interface {
	mock := &MockNetworkV1Interface{ctrl: ctrl}
	mock.recorder = &MockNetworkV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkV1Interface) EXPECT() *MockNetworkV1InterfaceMockRecorder {
	return _m.recorder
}

// Network mocks base method
func (_m *MockNetworkV1Interface) Network() network.NetworkV1NetworkInterface {
	ret := _m.ctrl.Call(_m, "Network")
	ret0, _ := ret[0].(network.NetworkV1NetworkInterface)
	return ret0
}

// Network indicates an expected call of Network
func (_mr *MockNetworkV1InterfaceMockRecorder) Network() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Network", reflect.TypeOf((*MockNetworkV1Interface)(nil).Network))
}

// Service mocks base method
func (_m *MockNetworkV1Interface) Service() network.NetworkV1ServiceInterface {
	ret := _m.ctrl.Call(_m, "Service")
	ret0, _ := ret[0].(network.NetworkV1ServiceInterface)
	return ret0
}

// Service indicates an expected call of Service
func (_mr *MockNetworkV1InterfaceMockRecorder) Service() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Service", reflect.TypeOf((*MockNetworkV1Interface)(nil).Service))
}

// LbPolicy mocks base method
func (_m *MockNetworkV1Interface) LbPolicy() network.NetworkV1LbPolicyInterface {
	ret := _m.ctrl.Call(_m, "LbPolicy")
	ret0, _ := ret[0].(network.NetworkV1LbPolicyInterface)
	return ret0
}

// LbPolicy indicates an expected call of LbPolicy
func (_mr *MockNetworkV1InterfaceMockRecorder) LbPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LbPolicy", reflect.TypeOf((*MockNetworkV1Interface)(nil).LbPolicy))
}

// Watch mocks base method
func (_m *MockNetworkV1Interface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockNetworkV1InterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockNetworkV1Interface)(nil).Watch), arg0, arg1)
}
