// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/apiclient/client.go

package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	auth "github.com/pensando/sw/api/generated/auth"
	bookstore "github.com/pensando/sw/api/generated/bookstore"
	cluster "github.com/pensando/sw/api/generated/cluster"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	network "github.com/pensando/sw/api/generated/network"
	security "github.com/pensando/sw/api/generated/security"
	staging "github.com/pensando/sw/api/generated/staging"
	workload "github.com/pensando/sw/api/generated/workload"
)

// MockServices is a mock of Services interface
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockServices) EXPECT() *MockServicesMockRecorder {
	return _m.recorder
}

// Close mocks base method
func (_m *MockServices) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockServicesMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockServices)(nil).Close))
}

// AuthV1 mocks base method
func (_m *MockServices) AuthV1() auth.AuthV1Interface {
	ret := _m.ctrl.Call(_m, "AuthV1")
	ret0, _ := ret[0].(auth.AuthV1Interface)
	return ret0
}

// AuthV1 indicates an expected call of AuthV1
func (_mr *MockServicesMockRecorder) AuthV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AuthV1", reflect.TypeOf((*MockServices)(nil).AuthV1))
}

// BookstoreV1 mocks base method
func (_m *MockServices) BookstoreV1() bookstore.BookstoreV1Interface {
	ret := _m.ctrl.Call(_m, "BookstoreV1")
	ret0, _ := ret[0].(bookstore.BookstoreV1Interface)
	return ret0
}

// BookstoreV1 indicates an expected call of BookstoreV1
func (_mr *MockServicesMockRecorder) BookstoreV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BookstoreV1", reflect.TypeOf((*MockServices)(nil).BookstoreV1))
}

// ClusterV1 mocks base method
func (_m *MockServices) ClusterV1() cluster.ClusterV1Interface {
	ret := _m.ctrl.Call(_m, "ClusterV1")
	ret0, _ := ret[0].(cluster.ClusterV1Interface)
	return ret0
}

// ClusterV1 indicates an expected call of ClusterV1
func (_mr *MockServicesMockRecorder) ClusterV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ClusterV1", reflect.TypeOf((*MockServices)(nil).ClusterV1))
}

// MonitoringV1 mocks base method
func (_m *MockServices) MonitoringV1() monitoring.MonitoringV1Interface {
	ret := _m.ctrl.Call(_m, "MonitoringV1")
	ret0, _ := ret[0].(monitoring.MonitoringV1Interface)
	return ret0
}

// MonitoringV1 indicates an expected call of MonitoringV1
func (_mr *MockServicesMockRecorder) MonitoringV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MonitoringV1", reflect.TypeOf((*MockServices)(nil).MonitoringV1))
}

// NetworkV1 mocks base method
func (_m *MockServices) NetworkV1() network.NetworkV1Interface {
	ret := _m.ctrl.Call(_m, "NetworkV1")
	ret0, _ := ret[0].(network.NetworkV1Interface)
	return ret0
}

// NetworkV1 indicates an expected call of NetworkV1
func (_mr *MockServicesMockRecorder) NetworkV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkV1", reflect.TypeOf((*MockServices)(nil).NetworkV1))
}

// SecurityV1 mocks base method
func (_m *MockServices) SecurityV1() security.SecurityV1Interface {
	ret := _m.ctrl.Call(_m, "SecurityV1")
	ret0, _ := ret[0].(security.SecurityV1Interface)
	return ret0
}

// SecurityV1 indicates an expected call of SecurityV1
func (_mr *MockServicesMockRecorder) SecurityV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SecurityV1", reflect.TypeOf((*MockServices)(nil).SecurityV1))
}

// StagingV1 mocks base method
func (_m *MockServices) StagingV1() staging.StagingV1Interface {
	ret := _m.ctrl.Call(_m, "StagingV1")
	ret0, _ := ret[0].(staging.StagingV1Interface)
	return ret0
}

// StagingV1 indicates an expected call of StagingV1
func (_mr *MockServicesMockRecorder) StagingV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StagingV1", reflect.TypeOf((*MockServices)(nil).StagingV1))
}

// WorkloadV1 mocks base method
func (_m *MockServices) WorkloadV1() workload.WorkloadV1Interface {
	ret := _m.ctrl.Call(_m, "WorkloadV1")
	ret0, _ := ret[0].(workload.WorkloadV1Interface)
	return ret0
}

// WorkloadV1 indicates an expected call of WorkloadV1
func (_mr *MockServicesMockRecorder) WorkloadV1() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WorkloadV1", reflect.TypeOf((*MockServices)(nil).WorkloadV1))
}
