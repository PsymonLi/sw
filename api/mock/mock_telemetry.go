// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/telemetry/telemetry_crudinterface.go

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	telemetry "github.com/pensando/sw/api/generated/telemetry"
	apiserver "github.com/pensando/sw/venice/apiserver"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockFlowExportPolicyV1FlowExportPolicyInterface is a mock of (telemetry.FlowExportPolicyV1FlowExportPolicyInterface)interface
type MockFlowExportPolicyV1FlowExportPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder
}

// MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder is the mock recorder for MockFlowExportPolicyV1FlowExportPolicyInterface
type MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder struct {
	mock *MockFlowExportPolicyV1FlowExportPolicyInterface
}

// NewMockFlowExportPolicyV1FlowExportPolicyInterface creates a new mock instance
func NewMockFlowExportPolicyV1FlowExportPolicyInterface(ctrl *gomock.Controller) *MockFlowExportPolicyV1FlowExportPolicyInterface {
	mock := &MockFlowExportPolicyV1FlowExportPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) EXPECT() *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Create(ctx context.Context, in *telemetry.FlowExportPolicy) (*telemetry.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*telemetry.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Update(ctx context.Context, in *telemetry.FlowExportPolicy) (*telemetry.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*telemetry.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*telemetry.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockFlowExportPolicyV1FlowExportPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockFlowExportPolicyV1FlowExportPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockFlowExportPolicyV1FlowExportPolicyInterface)(nil).Allowed), arg0)
}

// MockFlowExportPolicyV1Interface is a mock of FlowExportPolicyV1Interface interface
type MockFlowExportPolicyV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockFlowExportPolicyV1InterfaceMockRecorder
}

// MockFlowExportPolicyV1InterfaceMockRecorder is the mock recorder for MockFlowExportPolicyV1Interface
type MockFlowExportPolicyV1InterfaceMockRecorder struct {
	mock *MockFlowExportPolicyV1Interface
}

// NewMockFlowExportPolicyV1Interface creates a new mock instance
func NewMockFlowExportPolicyV1Interface(ctrl *gomock.Controller) *MockFlowExportPolicyV1Interface {
	mock := &MockFlowExportPolicyV1Interface{ctrl: ctrl}
	mock.recorder = &MockFlowExportPolicyV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFlowExportPolicyV1Interface) EXPECT() *MockFlowExportPolicyV1InterfaceMockRecorder {
	return _m.recorder
}

// FlowExportPolicy mocks base method
func (_m *MockFlowExportPolicyV1Interface) FlowExportPolicy() telemetry.FlowExportPolicyV1FlowExportPolicyInterface {
	ret := _m.ctrl.Call(_m, "FlowExportPolicy")
	ret0, _ := ret[0].(telemetry.FlowExportPolicyV1FlowExportPolicyInterface)
	return ret0
}

// FlowExportPolicy indicates an expected call of FlowExportPolicy
func (_mr *MockFlowExportPolicyV1InterfaceMockRecorder) FlowExportPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlowExportPolicy", reflect.TypeOf((*MockFlowExportPolicyV1Interface)(nil).FlowExportPolicy))
}

// MockFwlogPolicyV1FwlogPolicyInterface is a mock of (telemetry.FwlogPolicyV1FwlogPolicyInterface)interface
type MockFwlogPolicyV1FwlogPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder
}

// MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder is the mock recorder for MockFwlogPolicyV1FwlogPolicyInterface
type MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder struct {
	mock *MockFwlogPolicyV1FwlogPolicyInterface
}

// NewMockFwlogPolicyV1FwlogPolicyInterface creates a new mock instance
func NewMockFwlogPolicyV1FwlogPolicyInterface(ctrl *gomock.Controller) *MockFwlogPolicyV1FwlogPolicyInterface {
	mock := &MockFwlogPolicyV1FwlogPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) EXPECT() *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Create(ctx context.Context, in *telemetry.FwlogPolicy) (*telemetry.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*telemetry.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Update(ctx context.Context, in *telemetry.FwlogPolicy) (*telemetry.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*telemetry.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*telemetry.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockFwlogPolicyV1FwlogPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockFwlogPolicyV1FwlogPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockFwlogPolicyV1FwlogPolicyInterface)(nil).Allowed), arg0)
}

// MockFwlogPolicyV1Interface is a mock of FwlogPolicyV1Interface interface
type MockFwlogPolicyV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockFwlogPolicyV1InterfaceMockRecorder
}

// MockFwlogPolicyV1InterfaceMockRecorder is the mock recorder for MockFwlogPolicyV1Interface
type MockFwlogPolicyV1InterfaceMockRecorder struct {
	mock *MockFwlogPolicyV1Interface
}

// NewMockFwlogPolicyV1Interface creates a new mock instance
func NewMockFwlogPolicyV1Interface(ctrl *gomock.Controller) *MockFwlogPolicyV1Interface {
	mock := &MockFwlogPolicyV1Interface{ctrl: ctrl}
	mock.recorder = &MockFwlogPolicyV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFwlogPolicyV1Interface) EXPECT() *MockFwlogPolicyV1InterfaceMockRecorder {
	return _m.recorder
}

// FwlogPolicy mocks base method
func (_m *MockFwlogPolicyV1Interface) FwlogPolicy() telemetry.FwlogPolicyV1FwlogPolicyInterface {
	ret := _m.ctrl.Call(_m, "FwlogPolicy")
	ret0, _ := ret[0].(telemetry.FwlogPolicyV1FwlogPolicyInterface)
	return ret0
}

// FwlogPolicy indicates an expected call of FwlogPolicy
func (_mr *MockFwlogPolicyV1InterfaceMockRecorder) FwlogPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FwlogPolicy", reflect.TypeOf((*MockFwlogPolicyV1Interface)(nil).FwlogPolicy))
}

// MockStatsPolicyV1StatsPolicyInterface is a mock of (telemetry.StatsPolicyV1StatsPolicyInterface)interface
type MockStatsPolicyV1StatsPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder
}

// MockStatsPolicyV1StatsPolicyInterfaceMockRecorder is the mock recorder for MockStatsPolicyV1StatsPolicyInterface
type MockStatsPolicyV1StatsPolicyInterfaceMockRecorder struct {
	mock *MockStatsPolicyV1StatsPolicyInterface
}

// NewMockStatsPolicyV1StatsPolicyInterface creates a new mock instance
func NewMockStatsPolicyV1StatsPolicyInterface(ctrl *gomock.Controller) *MockStatsPolicyV1StatsPolicyInterface {
	mock := &MockStatsPolicyV1StatsPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockStatsPolicyV1StatsPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStatsPolicyV1StatsPolicyInterface) EXPECT() *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Create(ctx context.Context, in *telemetry.StatsPolicy) (*telemetry.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*telemetry.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Update(ctx context.Context, in *telemetry.StatsPolicy) (*telemetry.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*telemetry.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*telemetry.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*telemetry.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*telemetry.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*telemetry.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockStatsPolicyV1StatsPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockStatsPolicyV1StatsPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockStatsPolicyV1StatsPolicyInterface)(nil).Allowed), arg0)
}

// MockStatsPolicyV1Interface is a mock of StatsPolicyV1Interface interface
type MockStatsPolicyV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockStatsPolicyV1InterfaceMockRecorder
}

// MockStatsPolicyV1InterfaceMockRecorder is the mock recorder for MockStatsPolicyV1Interface
type MockStatsPolicyV1InterfaceMockRecorder struct {
	mock *MockStatsPolicyV1Interface
}

// NewMockStatsPolicyV1Interface creates a new mock instance
func NewMockStatsPolicyV1Interface(ctrl *gomock.Controller) *MockStatsPolicyV1Interface {
	mock := &MockStatsPolicyV1Interface{ctrl: ctrl}
	mock.recorder = &MockStatsPolicyV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStatsPolicyV1Interface) EXPECT() *MockStatsPolicyV1InterfaceMockRecorder {
	return _m.recorder
}

// StatsPolicy mocks base method
func (_m *MockStatsPolicyV1Interface) StatsPolicy() telemetry.StatsPolicyV1StatsPolicyInterface {
	ret := _m.ctrl.Call(_m, "StatsPolicy")
	ret0, _ := ret[0].(telemetry.StatsPolicyV1StatsPolicyInterface)
	return ret0
}

// StatsPolicy indicates an expected call of StatsPolicy
func (_mr *MockStatsPolicyV1InterfaceMockRecorder) StatsPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StatsPolicy", reflect.TypeOf((*MockStatsPolicyV1Interface)(nil).StatsPolicy))
}
