// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/monitoring/svc_monitoring_crudinterface.go

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/monitoring"
	apiserver "github.com/pensando/sw/venice/apiserver"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockMonitoringV1EventPolicyInterface is a mock of (monitoring.MonitoringV1EventPolicyInterface)interface
type MockMonitoringV1EventPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1EventPolicyInterfaceMockRecorder
}

// MockMonitoringV1EventPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1EventPolicyInterface
type MockMonitoringV1EventPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1EventPolicyInterface
}

// NewMockMonitoringV1EventPolicyInterface creates a new mock instance
func NewMockMonitoringV1EventPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1EventPolicyInterface {
	mock := &MockMonitoringV1EventPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1EventPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1EventPolicyInterface) EXPECT() *MockMonitoringV1EventPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Create(ctx context.Context, in *monitoring.EventPolicy) (*monitoring.EventPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Update(ctx context.Context, in *monitoring.EventPolicy) (*monitoring.EventPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.EventPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.EventPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.EventPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.EventPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1EventPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1EventPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1EventPolicyInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1StatsPolicyInterface is a mock of (monitoring.MonitoringV1StatsPolicyInterface)interface
type MockMonitoringV1StatsPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1StatsPolicyInterfaceMockRecorder
}

// MockMonitoringV1StatsPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1StatsPolicyInterface
type MockMonitoringV1StatsPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1StatsPolicyInterface
}

// NewMockMonitoringV1StatsPolicyInterface creates a new mock instance
func NewMockMonitoringV1StatsPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1StatsPolicyInterface {
	mock := &MockMonitoringV1StatsPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1StatsPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1StatsPolicyInterface) EXPECT() *MockMonitoringV1StatsPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Create(ctx context.Context, in *monitoring.StatsPolicy) (*monitoring.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Update(ctx context.Context, in *monitoring.StatsPolicy) (*monitoring.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.StatsPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.StatsPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1StatsPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1StatsPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1StatsPolicyInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1FwlogPolicyInterface is a mock of (monitoring.MonitoringV1FwlogPolicyInterface)interface
type MockMonitoringV1FwlogPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1FwlogPolicyInterfaceMockRecorder
}

// MockMonitoringV1FwlogPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1FwlogPolicyInterface
type MockMonitoringV1FwlogPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1FwlogPolicyInterface
}

// NewMockMonitoringV1FwlogPolicyInterface creates a new mock instance
func NewMockMonitoringV1FwlogPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1FwlogPolicyInterface {
	mock := &MockMonitoringV1FwlogPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1FwlogPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1FwlogPolicyInterface) EXPECT() *MockMonitoringV1FwlogPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Create(ctx context.Context, in *monitoring.FwlogPolicy) (*monitoring.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Update(ctx context.Context, in *monitoring.FwlogPolicy) (*monitoring.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.FwlogPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.FwlogPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1FwlogPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1FwlogPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1FwlogPolicyInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1FlowExportPolicyInterface is a mock of (monitoring.MonitoringV1FlowExportPolicyInterface)interface
type MockMonitoringV1FlowExportPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder
}

// MockMonitoringV1FlowExportPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1FlowExportPolicyInterface
type MockMonitoringV1FlowExportPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1FlowExportPolicyInterface
}

// NewMockMonitoringV1FlowExportPolicyInterface creates a new mock instance
func NewMockMonitoringV1FlowExportPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1FlowExportPolicyInterface {
	mock := &MockMonitoringV1FlowExportPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1FlowExportPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1FlowExportPolicyInterface) EXPECT() *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Create(ctx context.Context, in *monitoring.FlowExportPolicy) (*monitoring.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Update(ctx context.Context, in *monitoring.FlowExportPolicy) (*monitoring.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.FlowExportPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.FlowExportPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1FlowExportPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1FlowExportPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1FlowExportPolicyInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1AlertInterface is a mock of (monitoring.MonitoringV1AlertInterface)interface
type MockMonitoringV1AlertInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertInterfaceMockRecorder
}

// MockMonitoringV1AlertInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertInterface
type MockMonitoringV1AlertInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertInterface
}

// NewMockMonitoringV1AlertInterface creates a new mock instance
func NewMockMonitoringV1AlertInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertInterface {
	mock := &MockMonitoringV1AlertInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1AlertInterface) EXPECT() *MockMonitoringV1AlertInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1AlertInterface) Create(ctx context.Context, in *monitoring.Alert) (*monitoring.Alert, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1AlertInterface) Update(ctx context.Context, in *monitoring.Alert) (*monitoring.Alert, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1AlertInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.Alert, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1AlertInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.Alert, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1AlertInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.Alert, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1AlertInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1AlertInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1AlertInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1AlertPolicyInterface is a mock of (monitoring.MonitoringV1AlertPolicyInterface)interface
type MockMonitoringV1AlertPolicyInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertPolicyInterfaceMockRecorder
}

// MockMonitoringV1AlertPolicyInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertPolicyInterface
type MockMonitoringV1AlertPolicyInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertPolicyInterface
}

// NewMockMonitoringV1AlertPolicyInterface creates a new mock instance
func NewMockMonitoringV1AlertPolicyInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertPolicyInterface {
	mock := &MockMonitoringV1AlertPolicyInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertPolicyInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1AlertPolicyInterface) EXPECT() *MockMonitoringV1AlertPolicyInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Create(ctx context.Context, in *monitoring.AlertPolicy) (*monitoring.AlertPolicy, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Update(ctx context.Context, in *monitoring.AlertPolicy) (*monitoring.AlertPolicy, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertPolicy, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertPolicy, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.AlertPolicy, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.AlertPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1AlertPolicyInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1AlertPolicyInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertPolicyInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1AlertDestinationInterface is a mock of (monitoring.MonitoringV1AlertDestinationInterface)interface
type MockMonitoringV1AlertDestinationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1AlertDestinationInterfaceMockRecorder
}

// MockMonitoringV1AlertDestinationInterfaceMockRecorder is the mock recorder for MockMonitoringV1AlertDestinationInterface
type MockMonitoringV1AlertDestinationInterfaceMockRecorder struct {
	mock *MockMonitoringV1AlertDestinationInterface
}

// NewMockMonitoringV1AlertDestinationInterface creates a new mock instance
func NewMockMonitoringV1AlertDestinationInterface(ctrl *gomock.Controller) *MockMonitoringV1AlertDestinationInterface {
	mock := &MockMonitoringV1AlertDestinationInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1AlertDestinationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1AlertDestinationInterface) EXPECT() *MockMonitoringV1AlertDestinationInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Create(ctx context.Context, in *monitoring.AlertDestination) (*monitoring.AlertDestination, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Update(ctx context.Context, in *monitoring.AlertDestination) (*monitoring.AlertDestination, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertDestination, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.AlertDestination, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.AlertDestination, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.AlertDestination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1AlertDestinationInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1AlertDestinationInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1AlertDestinationInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1MirrorSessionInterface is a mock of (monitoring.MonitoringV1MirrorSessionInterface)interface
type MockMonitoringV1MirrorSessionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1MirrorSessionInterfaceMockRecorder
}

// MockMonitoringV1MirrorSessionInterfaceMockRecorder is the mock recorder for MockMonitoringV1MirrorSessionInterface
type MockMonitoringV1MirrorSessionInterfaceMockRecorder struct {
	mock *MockMonitoringV1MirrorSessionInterface
}

// NewMockMonitoringV1MirrorSessionInterface creates a new mock instance
func NewMockMonitoringV1MirrorSessionInterface(ctrl *gomock.Controller) *MockMonitoringV1MirrorSessionInterface {
	mock := &MockMonitoringV1MirrorSessionInterface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1MirrorSessionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1MirrorSessionInterface) EXPECT() *MockMonitoringV1MirrorSessionInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Create(ctx context.Context, in *monitoring.MirrorSession) (*monitoring.MirrorSession, error) {
	ret := _m.ctrl.Call(_m, "Create", ctx, in)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Update(ctx context.Context, in *monitoring.MirrorSession) (*monitoring.MirrorSession, error) {
	ret := _m.ctrl.Call(_m, "Update", ctx, in)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Update), arg0, arg1)
}

// Get mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.MirrorSession, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*monitoring.MirrorSession, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*monitoring.MirrorSession, error) {
	ret := _m.ctrl.Call(_m, "List", ctx, options)
	ret0, _ := ret[0].([]*monitoring.MirrorSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).List), arg0, arg1)
}

// Watch mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Watch), arg0, arg1)
}

// Allowed mocks base method
func (_m *MockMonitoringV1MirrorSessionInterface) Allowed(oper apiserver.APIOperType) bool {
	ret := _m.ctrl.Call(_m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (_mr *MockMonitoringV1MirrorSessionInterfaceMockRecorder) Allowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Allowed", reflect.TypeOf((*MockMonitoringV1MirrorSessionInterface)(nil).Allowed), arg0)
}

// MockMonitoringV1Interface is a mock of MonitoringV1Interface interface
type MockMonitoringV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringV1InterfaceMockRecorder
}

// MockMonitoringV1InterfaceMockRecorder is the mock recorder for MockMonitoringV1Interface
type MockMonitoringV1InterfaceMockRecorder struct {
	mock *MockMonitoringV1Interface
}

// NewMockMonitoringV1Interface creates a new mock instance
func NewMockMonitoringV1Interface(ctrl *gomock.Controller) *MockMonitoringV1Interface {
	mock := &MockMonitoringV1Interface{ctrl: ctrl}
	mock.recorder = &MockMonitoringV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockMonitoringV1Interface) EXPECT() *MockMonitoringV1InterfaceMockRecorder {
	return _m.recorder
}

// EventPolicy mocks base method
func (_m *MockMonitoringV1Interface) EventPolicy() monitoring.MonitoringV1EventPolicyInterface {
	ret := _m.ctrl.Call(_m, "EventPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1EventPolicyInterface)
	return ret0
}

// EventPolicy indicates an expected call of EventPolicy
func (_mr *MockMonitoringV1InterfaceMockRecorder) EventPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "EventPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).EventPolicy))
}

// StatsPolicy mocks base method
func (_m *MockMonitoringV1Interface) StatsPolicy() monitoring.MonitoringV1StatsPolicyInterface {
	ret := _m.ctrl.Call(_m, "StatsPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1StatsPolicyInterface)
	return ret0
}

// StatsPolicy indicates an expected call of StatsPolicy
func (_mr *MockMonitoringV1InterfaceMockRecorder) StatsPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StatsPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).StatsPolicy))
}

// FwlogPolicy mocks base method
func (_m *MockMonitoringV1Interface) FwlogPolicy() monitoring.MonitoringV1FwlogPolicyInterface {
	ret := _m.ctrl.Call(_m, "FwlogPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1FwlogPolicyInterface)
	return ret0
}

// FwlogPolicy indicates an expected call of FwlogPolicy
func (_mr *MockMonitoringV1InterfaceMockRecorder) FwlogPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FwlogPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).FwlogPolicy))
}

// FlowExportPolicy mocks base method
func (_m *MockMonitoringV1Interface) FlowExportPolicy() monitoring.MonitoringV1FlowExportPolicyInterface {
	ret := _m.ctrl.Call(_m, "FlowExportPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1FlowExportPolicyInterface)
	return ret0
}

// FlowExportPolicy indicates an expected call of FlowExportPolicy
func (_mr *MockMonitoringV1InterfaceMockRecorder) FlowExportPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FlowExportPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).FlowExportPolicy))
}

// Alert mocks base method
func (_m *MockMonitoringV1Interface) Alert() monitoring.MonitoringV1AlertInterface {
	ret := _m.ctrl.Call(_m, "Alert")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertInterface)
	return ret0
}

// Alert indicates an expected call of Alert
func (_mr *MockMonitoringV1InterfaceMockRecorder) Alert() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Alert", reflect.TypeOf((*MockMonitoringV1Interface)(nil).Alert))
}

// AlertPolicy mocks base method
func (_m *MockMonitoringV1Interface) AlertPolicy() monitoring.MonitoringV1AlertPolicyInterface {
	ret := _m.ctrl.Call(_m, "AlertPolicy")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertPolicyInterface)
	return ret0
}

// AlertPolicy indicates an expected call of AlertPolicy
func (_mr *MockMonitoringV1InterfaceMockRecorder) AlertPolicy() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AlertPolicy", reflect.TypeOf((*MockMonitoringV1Interface)(nil).AlertPolicy))
}

// AlertDestination mocks base method
func (_m *MockMonitoringV1Interface) AlertDestination() monitoring.MonitoringV1AlertDestinationInterface {
	ret := _m.ctrl.Call(_m, "AlertDestination")
	ret0, _ := ret[0].(monitoring.MonitoringV1AlertDestinationInterface)
	return ret0
}

// AlertDestination indicates an expected call of AlertDestination
func (_mr *MockMonitoringV1InterfaceMockRecorder) AlertDestination() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AlertDestination", reflect.TypeOf((*MockMonitoringV1Interface)(nil).AlertDestination))
}

// MirrorSession mocks base method
func (_m *MockMonitoringV1Interface) MirrorSession() monitoring.MonitoringV1MirrorSessionInterface {
	ret := _m.ctrl.Call(_m, "MirrorSession")
	ret0, _ := ret[0].(monitoring.MonitoringV1MirrorSessionInterface)
	return ret0
}

// MirrorSession indicates an expected call of MirrorSession
func (_mr *MockMonitoringV1InterfaceMockRecorder) MirrorSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MirrorSession", reflect.TypeOf((*MockMonitoringV1Interface)(nil).MirrorSession))
}

// Watch mocks base method
func (_m *MockMonitoringV1Interface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := _m.ctrl.Call(_m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (_mr *MockMonitoringV1InterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Watch", reflect.TypeOf((*MockMonitoringV1Interface)(nil).Watch), arg0, arg1)
}
