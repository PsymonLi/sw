// Code generated by MockGen. DO NOT EDIT.
// Source: ../generated/cluster/svc_cluster_crudinterface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/pensando/sw/api"
	cluster "github.com/pensando/sw/api/generated/cluster"
	interfaces "github.com/pensando/sw/api/interfaces"
	kvstore "github.com/pensando/sw/venice/utils/kvstore"
)

// MockClusterV1ClusterInterface is a mock of (cluster.ClusterV1ClusterInterface)interface
type MockClusterV1ClusterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1ClusterInterfaceMockRecorder
}

// MockClusterV1ClusterInterfaceMockRecorder is the mock recorder for MockClusterV1ClusterInterface
type MockClusterV1ClusterInterfaceMockRecorder struct {
	mock *MockClusterV1ClusterInterface
}

// NewMockClusterV1ClusterInterface creates a new mock instance
func NewMockClusterV1ClusterInterface(ctrl *gomock.Controller) *MockClusterV1ClusterInterface {
	mock := &MockClusterV1ClusterInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1ClusterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1ClusterInterface) EXPECT() *MockClusterV1ClusterInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1ClusterInterface) Create(ctx context.Context, in *cluster.Cluster) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1ClusterInterface) Update(ctx context.Context, in *cluster.Cluster) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1ClusterInterface) UpdateStatus(ctx context.Context, in *cluster.Cluster) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1ClusterInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1ClusterInterface) Label(ctx context.Context, in *api.Label) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1ClusterInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1ClusterInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1ClusterInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1ClusterInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1ClusterInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1ClusterInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1ClusterInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).Allowed), oper)
}

// AuthBootstrapComplete mocks base method
func (m *MockClusterV1ClusterInterface) AuthBootstrapComplete(ctx context.Context, in *cluster.ClusterAuthBootstrapRequest) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "AuthBootstrapComplete", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthBootstrapComplete indicates an expected call of AuthBootstrapComplete
func (mr *MockClusterV1ClusterInterfaceMockRecorder) AuthBootstrapComplete(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthBootstrapComplete", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).AuthBootstrapComplete), ctx, in)
}

// UpdateTLSConfig mocks base method
func (m *MockClusterV1ClusterInterface) UpdateTLSConfig(ctx context.Context, in *cluster.UpdateTLSConfigRequest) (*cluster.Cluster, error) {
	ret := m.ctrl.Call(m, "UpdateTLSConfig", ctx, in)
	ret0, _ := ret[0].(*cluster.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTLSConfig indicates an expected call of UpdateTLSConfig
func (mr *MockClusterV1ClusterInterfaceMockRecorder) UpdateTLSConfig(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTLSConfig", reflect.TypeOf((*MockClusterV1ClusterInterface)(nil).UpdateTLSConfig), ctx, in)
}

// MockClusterV1NodeInterface is a mock of (cluster.ClusterV1NodeInterface)interface
type MockClusterV1NodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1NodeInterfaceMockRecorder
}

// MockClusterV1NodeInterfaceMockRecorder is the mock recorder for MockClusterV1NodeInterface
type MockClusterV1NodeInterfaceMockRecorder struct {
	mock *MockClusterV1NodeInterface
}

// NewMockClusterV1NodeInterface creates a new mock instance
func NewMockClusterV1NodeInterface(ctrl *gomock.Controller) *MockClusterV1NodeInterface {
	mock := &MockClusterV1NodeInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1NodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1NodeInterface) EXPECT() *MockClusterV1NodeInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1NodeInterface) Create(ctx context.Context, in *cluster.Node) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1NodeInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1NodeInterface) Update(ctx context.Context, in *cluster.Node) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1NodeInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1NodeInterface) UpdateStatus(ctx context.Context, in *cluster.Node) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1NodeInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1NodeInterface) Label(ctx context.Context, in *api.Label) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1NodeInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1NodeInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1NodeInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1NodeInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Node, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1NodeInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1NodeInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.Node, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1NodeInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1NodeInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1NodeInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1NodeInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1NodeInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1NodeInterface)(nil).Allowed), oper)
}

// MockClusterV1HostInterface is a mock of (cluster.ClusterV1HostInterface)interface
type MockClusterV1HostInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1HostInterfaceMockRecorder
}

// MockClusterV1HostInterfaceMockRecorder is the mock recorder for MockClusterV1HostInterface
type MockClusterV1HostInterfaceMockRecorder struct {
	mock *MockClusterV1HostInterface
}

// NewMockClusterV1HostInterface creates a new mock instance
func NewMockClusterV1HostInterface(ctrl *gomock.Controller) *MockClusterV1HostInterface {
	mock := &MockClusterV1HostInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1HostInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1HostInterface) EXPECT() *MockClusterV1HostInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1HostInterface) Create(ctx context.Context, in *cluster.Host) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1HostInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1HostInterface) Update(ctx context.Context, in *cluster.Host) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1HostInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1HostInterface) UpdateStatus(ctx context.Context, in *cluster.Host) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1HostInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1HostInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1HostInterface) Label(ctx context.Context, in *api.Label) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1HostInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1HostInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1HostInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1HostInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Host, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1HostInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1HostInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.Host, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1HostInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1HostInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1HostInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1HostInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1HostInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1HostInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1HostInterface)(nil).Allowed), oper)
}

// MockClusterV1DistributedServiceCardInterface is a mock of ClusterV1DistributedServiceCardInterface interface
type MockClusterV1DistributedServiceCardInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1DistributedServiceCardInterfaceMockRecorder
}

// MockClusterV1DistributedServiceCardInterfaceMockRecorder is the mock recorder for MockClusterV1DistributedServiceCardInterface
type MockClusterV1DistributedServiceCardInterfaceMockRecorder struct {
	mock *MockClusterV1DistributedServiceCardInterface
}

// NewMockClusterV1DistributedServiceCardInterface creates a new mock instance
func NewMockClusterV1DistributedServiceCardInterface(ctrl *gomock.Controller) *MockClusterV1DistributedServiceCardInterface {
	mock := &MockClusterV1DistributedServiceCardInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1DistributedServiceCardInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1DistributedServiceCardInterface) EXPECT() *MockClusterV1DistributedServiceCardInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Create(ctx context.Context, in *cluster.DistributedServiceCard) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Update(ctx context.Context, in *cluster.DistributedServiceCard) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) UpdateStatus(ctx context.Context, in *cluster.DistributedServiceCard) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Label(ctx context.Context, in *api.Label) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.DistributedServiceCard, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.DistributedServiceCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1DistributedServiceCardInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1DistributedServiceCardInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1DistributedServiceCardInterface)(nil).Allowed), oper)
}

// MockClusterV1TenantInterface is a mock of (cluster.ClusterV1TenantInterface)interface
type MockClusterV1TenantInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1TenantInterfaceMockRecorder
}

// MockClusterV1TenantInterfaceMockRecorder is the mock recorder for MockClusterV1TenantInterface
type MockClusterV1TenantInterfaceMockRecorder struct {
	mock *MockClusterV1TenantInterface
}

// NewMockClusterV1TenantInterface creates a new mock instance
func NewMockClusterV1TenantInterface(ctrl *gomock.Controller) *MockClusterV1TenantInterface {
	mock := &MockClusterV1TenantInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1TenantInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1TenantInterface) EXPECT() *MockClusterV1TenantInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1TenantInterface) Create(ctx context.Context, in *cluster.Tenant) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1TenantInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1TenantInterface) Update(ctx context.Context, in *cluster.Tenant) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1TenantInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1TenantInterface) UpdateStatus(ctx context.Context, in *cluster.Tenant) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1TenantInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1TenantInterface) Label(ctx context.Context, in *api.Label) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1TenantInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1TenantInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1TenantInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1TenantInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1TenantInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1TenantInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.Tenant, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1TenantInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1TenantInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1TenantInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1TenantInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1TenantInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1TenantInterface)(nil).Allowed), oper)
}

// MockClusterV1VersionInterface is a mock of ClusterV1VersionInterface interface
type MockClusterV1VersionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1VersionInterfaceMockRecorder
}

// MockClusterV1VersionInterfaceMockRecorder is the mock recorder for MockClusterV1VersionInterface
type MockClusterV1VersionInterfaceMockRecorder struct {
	mock *MockClusterV1VersionInterface
}

// NewMockClusterV1VersionInterface creates a new mock instance
func NewMockClusterV1VersionInterface(ctrl *gomock.Controller) *MockClusterV1VersionInterface {
	mock := &MockClusterV1VersionInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1VersionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1VersionInterface) EXPECT() *MockClusterV1VersionInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1VersionInterface) Create(ctx context.Context, in *cluster.Version) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1VersionInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1VersionInterface) Update(ctx context.Context, in *cluster.Version) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1VersionInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1VersionInterface) UpdateStatus(ctx context.Context, in *cluster.Version) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1VersionInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1VersionInterface) Label(ctx context.Context, in *api.Label) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1VersionInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1VersionInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1VersionInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1VersionInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.Version, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1VersionInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1VersionInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.Version, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1VersionInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1VersionInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1VersionInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1VersionInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1VersionInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1VersionInterface)(nil).Allowed), oper)
}

// MockClusterV1ConfigurationSnapshotInterface is a mock of (cluster.ClusterV1ConfigurationSnapshotInterface)interface
type MockClusterV1ConfigurationSnapshotInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder
}

// MockClusterV1ConfigurationSnapshotInterfaceMockRecorder is the mock recorder for MockClusterV1ConfigurationSnapshotInterface
type MockClusterV1ConfigurationSnapshotInterfaceMockRecorder struct {
	mock *MockClusterV1ConfigurationSnapshotInterface
}

// NewMockClusterV1ConfigurationSnapshotInterface creates a new mock instance
func NewMockClusterV1ConfigurationSnapshotInterface(ctrl *gomock.Controller) *MockClusterV1ConfigurationSnapshotInterface {
	mock := &MockClusterV1ConfigurationSnapshotInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1ConfigurationSnapshotInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1ConfigurationSnapshotInterface) EXPECT() *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Create(ctx context.Context, in *cluster.ConfigurationSnapshot) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Update(ctx context.Context, in *cluster.ConfigurationSnapshot) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) UpdateStatus(ctx context.Context, in *cluster.ConfigurationSnapshot) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Label(ctx context.Context, in *api.Label) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Allowed), oper)
}

// Save mocks base method
func (m *MockClusterV1ConfigurationSnapshotInterface) Save(ctx context.Context, in *cluster.ConfigurationSnapshotRequest) (*cluster.ConfigurationSnapshot, error) {
	ret := m.ctrl.Call(m, "Save", ctx, in)
	ret0, _ := ret[0].(*cluster.ConfigurationSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockClusterV1ConfigurationSnapshotInterfaceMockRecorder) Save(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClusterV1ConfigurationSnapshotInterface)(nil).Save), ctx, in)
}

// MockClusterV1SnapshotRestoreInterface is a mock of (cluster.ClusterV1SnapshotRestoreInterface)interface
type MockClusterV1SnapshotRestoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1SnapshotRestoreInterfaceMockRecorder
}

// MockClusterV1SnapshotRestoreInterfaceMockRecorder is the mock recorder for MockClusterV1SnapshotRestoreInterface
type MockClusterV1SnapshotRestoreInterfaceMockRecorder struct {
	mock *MockClusterV1SnapshotRestoreInterface
}

// NewMockClusterV1SnapshotRestoreInterface creates a new mock instance
func NewMockClusterV1SnapshotRestoreInterface(ctrl *gomock.Controller) *MockClusterV1SnapshotRestoreInterface {
	mock := &MockClusterV1SnapshotRestoreInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1SnapshotRestoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1SnapshotRestoreInterface) EXPECT() *MockClusterV1SnapshotRestoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Create(ctx context.Context, in *cluster.SnapshotRestore) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Update(ctx context.Context, in *cluster.SnapshotRestore) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) UpdateStatus(ctx context.Context, in *cluster.SnapshotRestore) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Label(ctx context.Context, in *api.Label) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Allowed), oper)
}

// Restore mocks base method
func (m *MockClusterV1SnapshotRestoreInterface) Restore(ctx context.Context, in *cluster.SnapshotRestore) (*cluster.SnapshotRestore, error) {
	ret := m.ctrl.Call(m, "Restore", ctx, in)
	ret0, _ := ret[0].(*cluster.SnapshotRestore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore
func (mr *MockClusterV1SnapshotRestoreInterfaceMockRecorder) Restore(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockClusterV1SnapshotRestoreInterface)(nil).Restore), ctx, in)
}

// MockClusterV1LicenseInterface is a mock of ClusterV1LicenseInterface interface
type MockClusterV1LicenseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1LicenseInterfaceMockRecorder
}

// MockClusterV1LicenseInterfaceMockRecorder is the mock recorder for MockClusterV1LicenseInterface
type MockClusterV1LicenseInterfaceMockRecorder struct {
	mock *MockClusterV1LicenseInterface
}

// NewMockClusterV1LicenseInterface creates a new mock instance
func NewMockClusterV1LicenseInterface(ctrl *gomock.Controller) *MockClusterV1LicenseInterface {
	mock := &MockClusterV1LicenseInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1LicenseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1LicenseInterface) EXPECT() *MockClusterV1LicenseInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1LicenseInterface) Create(ctx context.Context, in *cluster.License) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1LicenseInterface) Update(ctx context.Context, in *cluster.License) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1LicenseInterface) UpdateStatus(ctx context.Context, in *cluster.License) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1LicenseInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1LicenseInterface) Label(ctx context.Context, in *api.Label) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1LicenseInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1LicenseInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.License, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1LicenseInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.License, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.License)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1LicenseInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1LicenseInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1LicenseInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1LicenseInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1LicenseInterface)(nil).Allowed), oper)
}

// MockClusterV1DSCProfileInterface is a mock of ClusterV1DSCProfileInterface interface
type MockClusterV1DSCProfileInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1DSCProfileInterfaceMockRecorder
}

// MockClusterV1DSCProfileInterfaceMockRecorder is the mock recorder for MockClusterV1DSCProfileInterface
type MockClusterV1DSCProfileInterfaceMockRecorder struct {
	mock *MockClusterV1DSCProfileInterface
}

// NewMockClusterV1DSCProfileInterface creates a new mock instance
func NewMockClusterV1DSCProfileInterface(ctrl *gomock.Controller) *MockClusterV1DSCProfileInterface {
	mock := &MockClusterV1DSCProfileInterface{ctrl: ctrl}
	mock.recorder = &MockClusterV1DSCProfileInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1DSCProfileInterface) EXPECT() *MockClusterV1DSCProfileInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClusterV1DSCProfileInterface) Create(ctx context.Context, in *cluster.DSCProfile) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Create), ctx, in)
}

// Update mocks base method
func (m *MockClusterV1DSCProfileInterface) Update(ctx context.Context, in *cluster.DSCProfile) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Update(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Update), ctx, in)
}

// UpdateStatus mocks base method
func (m *MockClusterV1DSCProfileInterface) UpdateStatus(ctx context.Context, in *cluster.DSCProfile) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, in)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) UpdateStatus(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).UpdateStatus), ctx, in)
}

// Label mocks base method
func (m *MockClusterV1DSCProfileInterface) Label(ctx context.Context, in *api.Label) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "Label", ctx, in)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Label indicates an expected call of Label
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Label(ctx, in interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Label", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Label), ctx, in)
}

// Get mocks base method
func (m *MockClusterV1DSCProfileInterface) Get(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "Get", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Get(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Get), ctx, objMeta)
}

// Delete mocks base method
func (m *MockClusterV1DSCProfileInterface) Delete(ctx context.Context, objMeta *api.ObjectMeta) (*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "Delete", ctx, objMeta)
	ret0, _ := ret[0].(*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Delete(ctx, objMeta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Delete), ctx, objMeta)
}

// List mocks base method
func (m *MockClusterV1DSCProfileInterface) List(ctx context.Context, options *api.ListWatchOptions) ([]*cluster.DSCProfile, error) {
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]*cluster.DSCProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) List(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).List), ctx, options)
}

// Watch mocks base method
func (m *MockClusterV1DSCProfileInterface) Watch(ctx context.Context, options *api.ListWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Watch), ctx, options)
}

// Allowed mocks base method
func (m *MockClusterV1DSCProfileInterface) Allowed(oper interfaces.APIOperType) bool {
	ret := m.ctrl.Call(m, "Allowed", oper)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed
func (mr *MockClusterV1DSCProfileInterfaceMockRecorder) Allowed(oper interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockClusterV1DSCProfileInterface)(nil).Allowed), oper)
}

// MockClusterV1Interface is a mock of ClusterV1Interface interface
type MockClusterV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterV1InterfaceMockRecorder
}

// MockClusterV1InterfaceMockRecorder is the mock recorder for MockClusterV1Interface
type MockClusterV1InterfaceMockRecorder struct {
	mock *MockClusterV1Interface
}

// NewMockClusterV1Interface creates a new mock instance
func NewMockClusterV1Interface(ctrl *gomock.Controller) *MockClusterV1Interface {
	mock := &MockClusterV1Interface{ctrl: ctrl}
	mock.recorder = &MockClusterV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterV1Interface) EXPECT() *MockClusterV1InterfaceMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockClusterV1Interface) Cluster() cluster.ClusterV1ClusterInterface {
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(cluster.ClusterV1ClusterInterface)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockClusterV1InterfaceMockRecorder) Cluster() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockClusterV1Interface)(nil).Cluster))
}

// Node mocks base method
func (m *MockClusterV1Interface) Node() cluster.ClusterV1NodeInterface {
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(cluster.ClusterV1NodeInterface)
	return ret0
}

// Node indicates an expected call of Node
func (mr *MockClusterV1InterfaceMockRecorder) Node() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockClusterV1Interface)(nil).Node))
}

// Host mocks base method
func (m *MockClusterV1Interface) Host() cluster.ClusterV1HostInterface {
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(cluster.ClusterV1HostInterface)
	return ret0
}

// Host indicates an expected call of Host
func (mr *MockClusterV1InterfaceMockRecorder) Host() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockClusterV1Interface)(nil).Host))
}

// DistributedServiceCard mocks base method
func (m *MockClusterV1Interface) DistributedServiceCard() cluster.ClusterV1DistributedServiceCardInterface {
	ret := m.ctrl.Call(m, "DistributedServiceCard")
	ret0, _ := ret[0].(cluster.ClusterV1DistributedServiceCardInterface)
	return ret0
}

// DistributedServiceCard indicates an expected call of DistributedServiceCard
func (mr *MockClusterV1InterfaceMockRecorder) DistributedServiceCard() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributedServiceCard", reflect.TypeOf((*MockClusterV1Interface)(nil).DistributedServiceCard))
}

// Tenant mocks base method
func (m *MockClusterV1Interface) Tenant() cluster.ClusterV1TenantInterface {
	ret := m.ctrl.Call(m, "Tenant")
	ret0, _ := ret[0].(cluster.ClusterV1TenantInterface)
	return ret0
}

// Tenant indicates an expected call of Tenant
func (mr *MockClusterV1InterfaceMockRecorder) Tenant() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tenant", reflect.TypeOf((*MockClusterV1Interface)(nil).Tenant))
}

// Version mocks base method
func (m *MockClusterV1Interface) Version() cluster.ClusterV1VersionInterface {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(cluster.ClusterV1VersionInterface)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockClusterV1InterfaceMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockClusterV1Interface)(nil).Version))
}

// ConfigurationSnapshot mocks base method
func (m *MockClusterV1Interface) ConfigurationSnapshot() cluster.ClusterV1ConfigurationSnapshotInterface {
	ret := m.ctrl.Call(m, "ConfigurationSnapshot")
	ret0, _ := ret[0].(cluster.ClusterV1ConfigurationSnapshotInterface)
	return ret0
}

// ConfigurationSnapshot indicates an expected call of ConfigurationSnapshot
func (mr *MockClusterV1InterfaceMockRecorder) ConfigurationSnapshot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurationSnapshot", reflect.TypeOf((*MockClusterV1Interface)(nil).ConfigurationSnapshot))
}

// SnapshotRestore mocks base method
func (m *MockClusterV1Interface) SnapshotRestore() cluster.ClusterV1SnapshotRestoreInterface {
	ret := m.ctrl.Call(m, "SnapshotRestore")
	ret0, _ := ret[0].(cluster.ClusterV1SnapshotRestoreInterface)
	return ret0
}

// SnapshotRestore indicates an expected call of SnapshotRestore
func (mr *MockClusterV1InterfaceMockRecorder) SnapshotRestore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRestore", reflect.TypeOf((*MockClusterV1Interface)(nil).SnapshotRestore))
}

// License mocks base method
func (m *MockClusterV1Interface) License() cluster.ClusterV1LicenseInterface {
	ret := m.ctrl.Call(m, "License")
	ret0, _ := ret[0].(cluster.ClusterV1LicenseInterface)
	return ret0
}

// License indicates an expected call of License
func (mr *MockClusterV1InterfaceMockRecorder) License() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "License", reflect.TypeOf((*MockClusterV1Interface)(nil).License))
}

// DSCProfile mocks base method
func (m *MockClusterV1Interface) DSCProfile() cluster.ClusterV1DSCProfileInterface {
	ret := m.ctrl.Call(m, "DSCProfile")
	ret0, _ := ret[0].(cluster.ClusterV1DSCProfileInterface)
	return ret0
}

// DSCProfile indicates an expected call of DSCProfile
func (mr *MockClusterV1InterfaceMockRecorder) DSCProfile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DSCProfile", reflect.TypeOf((*MockClusterV1Interface)(nil).DSCProfile))
}

// Watch mocks base method
func (m *MockClusterV1Interface) Watch(ctx context.Context, options *api.AggWatchOptions) (kvstore.Watcher, error) {
	ret := m.ctrl.Call(m, "Watch", ctx, options)
	ret0, _ := ret[0].(kvstore.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockClusterV1InterfaceMockRecorder) Watch(ctx, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterV1Interface)(nil).Watch), ctx, options)
}
