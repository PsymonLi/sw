syntax = "proto3";
package api;

import "google/api/annotations.proto";
import "github.com/pensando/sw/venice/utils/apigen/annotations/venice.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

  option (gogoproto.unmarshaler_all) = true;
  option (gogoproto.marshaler_all) = true;

// TypeMeta contains the metadata about kind and version for all API objects.
message TypeMeta {
  // Kind represents the type of the API object.
  string Kind       = 1 [(gogoproto.jsontag) = "kind"];
  // APIVersion defines the version of the API object. This can only be set by the server
  string APIVersion = 2 [(gogoproto.jsontag) = "api-version,omitempty"];
}

// ListMeta contains the metadata for list of objects.
message ListMeta {
  // Resource version of object store at the time of list generation.
  string ResourceVersion = 1 [(gogoproto.jsontag) = "resource-version,omitempty"];
  // TotalCount is the total count of results (non paginated) that the server holds
  int32 TotalCount = 2 [(gogoproto.jsontag) = "total-count,omitempty"];
}

message Timestamp {
  google.protobuf.Timestamp Time = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// Any is wrapper around the proto Any object.
message Any {
  google.protobuf.Any Object  = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// ObjectMeta contains metadata that all objects stored in kvstore must have.
message ObjectMeta {
  // title: Name of the object, unique within a Namespace for scoped objects.
  string Name                 = 1 [(gogoproto.jsontag) = "name", (venice.check) = "RegExp(name)", (venice.check) = "StrLen(2,64)"];
  // title: Tenant to which the object belongs to. 
  // This can be automatically filled in many cases based on the tenant the user, who created the object, belongs to.
  string Tenant               = 2 [(gogoproto.jsontag) = "tenant,omitempty", (venice.check) = "EmptyOr(RegExp(alphanum))", (venice.check) = "EmptyOr(StrLen(1,48))"];
  // Namespace of the object, for scoped objects.
  string Namespace            = 3 [(gogoproto.jsontag) = "namespace,omitempty", (venice.check) = "EmptyOrRegExp(name)", (venice.check) = "EmptyOrStrLen(2,64)"];
  // title: GenerationID is the generation Id for the object. 
  // This is incremented anytime there is an update to the user intent, including Spec update 
  // and any update to ObjectMeta. System generated and updated, not updatable by user.
  string GenerationID     = 4 [(gogoproto.jsontag) = "generation-id"];
  // title: Resource version in the object store. 
  // This is updated anytime there is any change to the object.
  // System generated and updated, not updatable by user.
  string ResourceVersion      = 5[(gogoproto.jsontag) = "resource-version,omitempty"];
  // title: UUID is the unique identifier for the object. 
  // This is generated on creation of the object.
  // System generated, not updatable by user.
  string UUID                 = 6 [(gogoproto.jsontag) = "uuid,omitempty"];
  // title: Labels are arbitrary (key,value) pairs associated with any object.
  map <string, string> Labels = 7 [(gogoproto.jsontag) = "labels,omitempty"];
  // title: CreationTime is the creation time of the object
  //  System generated and updated, not updatable by user.
  Timestamp CreationTime      = 8 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "creation-time,omitempty"];
  // title: ModTime is the Last Modification time of the object
  //  System generated and updated, not updatable by user.
  Timestamp ModTime           = 9 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "mod-time,omitempty"];
  // title: SelfLink is a link for accessing this object. 
  // When the object is served from the API-GW it is the
  //  URI path. Example:
  //    - "/v1/tenants/tenants/tenant2"
  //  System generated and updated, not updatable by user.
  string SelfLink             = 10 [(gogoproto.jsontag) = "self-link,omitempty"];
}

// ObjectRef contains identifying information about an object.
message ObjectRef {
  // Tenant of the object.
  string Tenant     = 1 [(gogoproto.jsontag) = "tenant,omitempty"];
  // Namespace of the object, for scoped objects.
  string Namespace  = 2 [(gogoproto.jsontag) = "namespace,omitempty"];
  // Kind represents the type of the API object.
  string Kind       = 3 [(gogoproto.jsontag) = "kind,omitempty"];
  // Name of the object, unique within a Namespace for scoped objects.
  string Name       = 4 [(gogoproto.jsontag) = "name,omitempty"];
  // URI is a link to accessing the referenced object.
  string URI        = 5 [(gogoproto.jsontag) = "uri,omitempty"];
}

// Label is the input for label operations
message Label {
  TypeMeta T          = 1 [(gogoproto.embed) = true,
                           (gogoproto.nullable) = false,
                           (gogoproto.jsontag) = ",inline"];
  ObjectMeta O        = 2 [(gogoproto.embed) = true,
                           (gogoproto.nullable) = false,
                           (gogoproto.jsontag) = ",inline"];
}

message ListWatchOptions {
  enum SortOrders {
    None                  = 0; // ui-hint: None
    ByName                = 1 [(venice.enumValueStr) = "by-name"]; // ui-hint: By Name
    ByNameReverse         = 2 [(venice.enumValueStr) = "by-name-reverse"]; // ui-hint: By Name Reverse
    ByVersion             = 3 [(venice.enumValueStr) = "by-version"]; // ui-hint: By Version
    ByVersionReverse      = 4 [(venice.enumValueStr) = "by-version-reverse"]; // ui-hint: By Version Reverse
    ByCreationTime        = 5 [(venice.enumValueStr) = "by-creation-time"]; // ui-hint: By Creation Time
    ByCreationTimeReverse = 6 [(venice.enumValueStr) = "by-creation-time-reverse"]; // ui-hint: By Creation Time Reverse
    ByModTime             = 7 [(venice.enumValueStr) = "by-mod-time"]; // ui-hint: By Modification Time
    ByModTimeReverse      = 8 [(venice.enumValueStr) = "by-mod-time-reverse"]; // ui-hint: By Modification Time Reverse
  }
  ObjectMeta O                        = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];
  // LabelSelector to select on labels in list or watch results.
  string LabelSelector                = 2 [(gogoproto.jsontag) = "label-selector,omitempty"];
  // FieldSelector to select on field values in list or watch results
  string FieldSelector                = 3 [(gogoproto.jsontag) = "field-selector,omitempty"];
  // FieldChangeSelector specifies to generate a watch notification on change in field(s) specified.
  repeated string FieldChangeSelector = 5 [(gogoproto.jsontag) = "field-change-selector,omitempty"];
  // From represents the start index number (1 based - first object starts from index 1), of the results list.
  // The results returned would be in the range [from ... (from + (max-results - 1))].
  // If From = 0, the server will attempt to return all the results in the list without pagination
  int32 From                          = 6 [(gogoproto.jsontag) = "from,omitempty"];
  // MaxResults is the maximum number of results to be returned as part of the response, per page
  // If MaxResults is more than the maximum number of results per page supported by the server, the server will return an err
  // If MaxResults is 0, the server will return all the results without pagination
  int32 MaxResults                    = 7 [(gogoproto.jsontag) = "max-results,omitempty"];
  // order to sort List results in.
  string SortOrder                    = 8 [(gogoproto.jsontag) = "sort-order,omitempty", (venice.check) = "StrEnum(ListWatchOptions.SortOrders)"];
}

message WatchEvent {
  string Type = 1 [(gogoproto.jsontag) = "type,omitempty"];
  google.protobuf.Any Object = 2 [(gogoproto.jsontag) = "object,omitempty"];
}

message WatchEventList {
  repeated WatchEvent Events = 1 [(gogoproto.jsontag) = "events,omitempty"];
}

message KindWatchOptions {
  string Group                = 2 [(gogoproto.jsontag) = "group,omitempty"];
  string Kind                 = 3 [(gogoproto.jsontag) = "kind,omitempty"];
  ListWatchOptions  Options   = 4 [(gogoproto.jsontag) = "options,omitempty", (gogoproto.nullable) = false];
}

message AggWatchOptions {
  api.ObjectMeta O                        = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
  repeated KindWatchOptions WatchOptions  = 2 [(gogoproto.jsontag) = "watch-options,omitempty", (gogoproto.nullable) = false];
}

// StatusResult contains possible statuses for a NIC.
message StatusResult {
  string Str = 1;
}

message InterfaceSlice {
  repeated Interface Values = 1;
}

message Interface {
  oneof Value {
    string Str = 1;
    int64 Int64 = 2;
    bool Bool = 3;
    double Float = 4;
    InterfaceSlice Interfaces = 5;
  }
}

// Status is returned for calls that dont return objects.
message Status {
  TypeMeta T          = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ""];
  // Result contains the status of the operation, success or failure.
  StatusResult Result = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "result,omitempty"];
  // Message contains human readable form of the error.
  repeated string Message      = 3 [(gogoproto.jsontag) = "message,omitempty"];
  // Code is the HTTP status code.
  int32 Code          = 4 [(gogoproto.jsontag) = "code,omitempty"];
  // Reference to the object (optional) for which this status is being sent.
  ObjectRef Ref       = 5 [(gogoproto.jsontag) = "object-ref,omitempty"];
  // IsTemporary flag is used to distinguish between recoverable and unrecoverable errors
  bool IsTemporary    = 6 [(gogoproto.jsontag) = "-"];
}

// Watch event types
enum EventType {
    CreateEvent   = 0 [(venice.enumValueStr) = "create-time"];
    UpdateEvent   = 1 [(venice.enumValueStr) = "update-time"];
    DeleteEvent   = 2 [(venice.enumValueStr) = "delete-event"];
}
