"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldsRequirement = void 0;
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var enums_1 = require("./enums");
var FieldsRequirement = /** @class */ (function (_super) {
    __extends(FieldsRequirement, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function FieldsRequirement(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        /** The label key that the condition applies to. */
        _this['key'] = null;
        /** Condition checked for the key. */
        _this['operator'] = null;
        /** Values contains one or more values corresponding to the label key. "equals" and "notEquals" operators need a single Value. "in" and "notIn" operators can have one or more values. */
        _this['values'] = null;
        _this['values'] = new Array();
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    FieldsRequirement.prototype.getPropInfo = function (propName) {
        return FieldsRequirement.propInfo[propName];
    };
    FieldsRequirement.prototype.getPropInfoConfig = function () {
        return FieldsRequirement.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    FieldsRequirement.hasDefaultValue = function (prop) {
        return (FieldsRequirement.propInfo[prop] != null &&
            FieldsRequirement.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    FieldsRequirement.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['key'] != null) {
            this['key'] = values['key'];
        }
        else if (fillDefaults && FieldsRequirement.hasDefaultValue('key')) {
            this['key'] = FieldsRequirement.propInfo['key'].default;
        }
        else {
            this['key'] = null;
        }
        if (values && values['operator'] != null) {
            this['operator'] = values['operator'];
        }
        else if (fillDefaults && FieldsRequirement.hasDefaultValue('operator')) {
            this['operator'] = FieldsRequirement.propInfo['operator'].default;
        }
        else {
            this['operator'] = null;
        }
        if (values && values['values'] != null) {
            this['values'] = values['values'];
        }
        else if (fillDefaults && FieldsRequirement.hasDefaultValue('values')) {
            this['values'] = [FieldsRequirement.propInfo['values'].default];
        }
        else {
            this['values'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    };
    FieldsRequirement.prototype.getFormGroup = function () {
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'key': validators_1.CustomFormControl(new forms_1.FormControl(this['key']), FieldsRequirement.propInfo['key']),
                'operator': validators_1.CustomFormControl(new forms_1.FormControl(this['operator'], [validators_1.required, validators_1.enumValidator(enums_1.FieldsRequirement_operator),]), FieldsRequirement.propInfo['operator']),
                'values': validators_1.CustomFormControl(new forms_1.FormControl(this['values']), FieldsRequirement.propInfo['values']),
            });
        }
        return this._formGroup;
    };
    FieldsRequirement.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    FieldsRequirement.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['key'].setValue(this['key']);
            this._formGroup.controls['operator'].setValue(this['operator']);
            this._formGroup.controls['values'].setValue(this['values']);
        }
    };
    FieldsRequirement.propInfo = {
        'key': {
            description: "The label key that the condition applies to.",
            required: false,
            type: 'string'
        },
        'operator': {
            enum: enums_1.FieldsRequirement_operator_uihint,
            default: 'equals',
            description: "Condition checked for the key.",
            required: true,
            type: 'string'
        },
        'values': {
            description: "Values contains one or more values corresponding to the label key. \"equals\" and \"notEquals\" operators need a single Value. \"in\" and \"notIn\" operators can have one or more values.",
            required: false,
            type: 'Array<string>'
        },
    };
    return FieldsRequirement;
}(base_model_1.BaseModel));
exports.FieldsRequirement = FieldsRequirement;
