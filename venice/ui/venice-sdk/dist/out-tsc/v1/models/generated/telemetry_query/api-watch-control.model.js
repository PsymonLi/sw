"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var ApiWatchControl = /** @class */ (function (_super) {
    __extends(ApiWatchControl, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function ApiWatchControl(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        _this['code'] = null;
        _this['message'] = null;
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    ApiWatchControl.prototype.getPropInfo = function (propName) {
        return ApiWatchControl.propInfo[propName];
    };
    ApiWatchControl.prototype.getPropInfoConfig = function () {
        return ApiWatchControl.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    ApiWatchControl.hasDefaultValue = function (prop) {
        return (ApiWatchControl.propInfo[prop] != null &&
            ApiWatchControl.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    ApiWatchControl.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['code'] != null) {
            this['code'] = values['code'];
        }
        else if (fillDefaults && ApiWatchControl.hasDefaultValue('code')) {
            this['code'] = ApiWatchControl.propInfo['code'].default;
        }
        else {
            this['code'] = null;
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        }
        else if (fillDefaults && ApiWatchControl.hasDefaultValue('message')) {
            this['message'] = ApiWatchControl.propInfo['message'].default;
        }
        else {
            this['message'] = null;
        }
        this.setFormGroupValuesToBeModelValues();
    };
    ApiWatchControl.prototype.getFormGroup = function () {
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'code': validators_1.CustomFormControl(new forms_1.FormControl(this['code']), ApiWatchControl.propInfo['code']),
                'message': validators_1.CustomFormControl(new forms_1.FormControl(this['message']), ApiWatchControl.propInfo['message']),
            });
        }
        return this._formGroup;
    };
    ApiWatchControl.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    ApiWatchControl.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['code'].setValue(this['code']);
            this._formGroup.controls['message'].setValue(this['message']);
        }
    };
    ApiWatchControl.propInfo = {
        'code': {
            required: false,
            type: 'number'
        },
        'message': {
            required: false,
            type: 'string'
        },
    };
    return ApiWatchControl;
}(base_model_1.BaseModel));
exports.ApiWatchControl = ApiWatchControl;
