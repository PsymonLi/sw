"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var fields_selector_model_1 = require("./fields-selector.model");
var enums_1 = require("./enums");
var telemetry_query_pagination_spec_model_1 = require("./telemetry-query-pagination-spec.model");
var enums_2 = require("./enums");
var Telemetry_queryMetricsQuerySpec = /** @class */ (function (_super) {
    __extends(Telemetry_queryMetricsQuerySpec, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function Telemetry_queryMetricsQuerySpec(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        _this['kind'] = null;
        _this['api-version'] = null;
        /** Name is the name of the API object. Must start and end with alpha numeric and can have alphanumeric, -, _, . */
        _this['name'] = null;
        _this['selector'] = null;
        /** Fields select the metric fields to be included in the result Empty will include all fields, must contain at least one non-tag field. Must start and end with alpha numeric and can have alphanumeric, -, _, . */
        _this['fields'] = null;
        /** Functions specify an operation function to be applied, example mean()/max(). */
        _this['function'] = null;
        /** StartTime selects all metrics with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z. */
        _this['start-time'] = null;
        /** EndTime selects all metrics with timestamp less than the EndTime, example 2018-09-18T00:12:00Z. */
        _this['end-time'] = null;
        /** GroupbyTime groups series based on the interval specified. Should be a valid time duration. */
        _this['group-by-time'] = null;
        /** GroupbyField groups series based on the field specified. Must start and end with alpha numeric and can have alphanumeric, -, _, . */
        _this['group-by-field'] = null;
        /** PaginationSpec specifies the number of series to include. */
        _this['pagination'] = null;
        /** SortOrder specifies time ordering of results. */
        _this['sort-order'] = null;
        _this['selector'] = new fields_selector_model_1.FieldsSelector();
        _this['fields'] = new Array();
        _this['pagination'] = new telemetry_query_pagination_spec_model_1.Telemetry_queryPaginationSpec();
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    Telemetry_queryMetricsQuerySpec.prototype.getPropInfo = function (propName) {
        return Telemetry_queryMetricsQuerySpec.propInfo[propName];
    };
    Telemetry_queryMetricsQuerySpec.prototype.getPropInfoConfig = function () {
        return Telemetry_queryMetricsQuerySpec.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    Telemetry_queryMetricsQuerySpec.hasDefaultValue = function (prop) {
        return (Telemetry_queryMetricsQuerySpec.propInfo[prop] != null &&
            Telemetry_queryMetricsQuerySpec.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    Telemetry_queryMetricsQuerySpec.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('kind')) {
            this['kind'] = Telemetry_queryMetricsQuerySpec.propInfo['kind'].default;
        }
        else {
            this['kind'] = null;
        }
        if (values && values['api-version'] != null) {
            this['api-version'] = values['api-version'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('api-version')) {
            this['api-version'] = Telemetry_queryMetricsQuerySpec.propInfo['api-version'].default;
        }
        else {
            this['api-version'] = null;
        }
        if (values && values['name'] != null) {
            this['name'] = values['name'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('name')) {
            this['name'] = Telemetry_queryMetricsQuerySpec.propInfo['name'].default;
        }
        else {
            this['name'] = null;
        }
        if (values) {
            this['selector'].setValues(values['selector'], fillDefaults);
        }
        else {
            this['selector'].setValues(null, fillDefaults);
        }
        if (values && values['fields'] != null) {
            this['fields'] = values['fields'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('fields')) {
            this['fields'] = [Telemetry_queryMetricsQuerySpec.propInfo['fields'].default];
        }
        else {
            this['fields'] = [];
        }
        if (values && values['function'] != null) {
            this['function'] = values['function'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('function')) {
            this['function'] = Telemetry_queryMetricsQuerySpec.propInfo['function'].default;
        }
        else {
            this['function'] = null;
        }
        if (values && values['start-time'] != null) {
            this['start-time'] = values['start-time'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('start-time')) {
            this['start-time'] = Telemetry_queryMetricsQuerySpec.propInfo['start-time'].default;
        }
        else {
            this['start-time'] = null;
        }
        if (values && values['end-time'] != null) {
            this['end-time'] = values['end-time'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('end-time')) {
            this['end-time'] = Telemetry_queryMetricsQuerySpec.propInfo['end-time'].default;
        }
        else {
            this['end-time'] = null;
        }
        if (values && values['group-by-time'] != null) {
            this['group-by-time'] = values['group-by-time'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('group-by-time')) {
            this['group-by-time'] = Telemetry_queryMetricsQuerySpec.propInfo['group-by-time'].default;
        }
        else {
            this['group-by-time'] = null;
        }
        if (values && values['group-by-field'] != null) {
            this['group-by-field'] = values['group-by-field'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('group-by-field')) {
            this['group-by-field'] = Telemetry_queryMetricsQuerySpec.propInfo['group-by-field'].default;
        }
        else {
            this['group-by-field'] = null;
        }
        if (values) {
            this['pagination'].setValues(values['pagination'], fillDefaults);
        }
        else {
            this['pagination'].setValues(null, fillDefaults);
        }
        if (values && values['sort-order'] != null) {
            this['sort-order'] = values['sort-order'];
        }
        else if (fillDefaults && Telemetry_queryMetricsQuerySpec.hasDefaultValue('sort-order')) {
            this['sort-order'] = Telemetry_queryMetricsQuerySpec.propInfo['sort-order'].default;
        }
        else {
            this['sort-order'] = null;
        }
        this.setFormGroupValuesToBeModelValues();
    };
    Telemetry_queryMetricsQuerySpec.prototype.getFormGroup = function () {
        var _this = this;
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'kind': validators_1.CustomFormControl(new forms_1.FormControl(this['kind']), Telemetry_queryMetricsQuerySpec.propInfo['kind']),
                'api-version': validators_1.CustomFormControl(new forms_1.FormControl(this['api-version']), Telemetry_queryMetricsQuerySpec.propInfo['api-version']),
                'name': validators_1.CustomFormControl(new forms_1.FormControl(this['name'], [validators_1.patternValidator('^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$', 'Name is the name of the API object. Must start and end with alpha numeric and can have alphanumeric, -, _, .'),]), Telemetry_queryMetricsQuerySpec.propInfo['name']),
                'selector': validators_1.CustomFormGroup(this['selector'].$formGroup, Telemetry_queryMetricsQuerySpec.propInfo['selector'].required),
                'fields': validators_1.CustomFormControl(new forms_1.FormControl(this['fields']), Telemetry_queryMetricsQuerySpec.propInfo['fields']),
                'function': validators_1.CustomFormControl(new forms_1.FormControl(this['function'], [validators_1.required, validators_1.enumValidator(enums_1.Telemetry_queryMetricsQuerySpec_function),]), Telemetry_queryMetricsQuerySpec.propInfo['function']),
                'start-time': validators_1.CustomFormControl(new forms_1.FormControl(this['start-time']), Telemetry_queryMetricsQuerySpec.propInfo['start-time']),
                'end-time': validators_1.CustomFormControl(new forms_1.FormControl(this['end-time']), Telemetry_queryMetricsQuerySpec.propInfo['end-time']),
                'group-by-time': validators_1.CustomFormControl(new forms_1.FormControl(this['group-by-time']), Telemetry_queryMetricsQuerySpec.propInfo['group-by-time']),
                'group-by-field': validators_1.CustomFormControl(new forms_1.FormControl(this['group-by-field'], [validators_1.patternValidator('^[a-zA-Z0-9][\\w\\-\\.]*[a-zA-Z0-9]$', 'GroupbyField groups series based on the field specified. Must start and end with alpha numeric and can have alphanumeric, -, _, .'),]), Telemetry_queryMetricsQuerySpec.propInfo['group-by-field']),
                'pagination': validators_1.CustomFormGroup(this['pagination'].$formGroup, Telemetry_queryMetricsQuerySpec.propInfo['pagination'].required),
                'sort-order': validators_1.CustomFormControl(new forms_1.FormControl(this['sort-order'], [validators_1.required, validators_1.enumValidator(enums_2.Telemetry_queryMetricsQuerySpec_sort_order),]), Telemetry_queryMetricsQuerySpec.propInfo['sort-order']),
            });
            // We force recalculation of controls under a form group
            Object.keys(this._formGroup.get('selector').controls).forEach(function (field) {
                var control = _this._formGroup.get('selector').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys(this._formGroup.get('pagination').controls).forEach(function (field) {
                var control = _this._formGroup.get('pagination').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    };
    Telemetry_queryMetricsQuerySpec.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    Telemetry_queryMetricsQuerySpec.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['api-version'].setValue(this['api-version']);
            this._formGroup.controls['name'].setValue(this['name']);
            this['selector'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['fields'].setValue(this['fields']);
            this._formGroup.controls['function'].setValue(this['function']);
            this._formGroup.controls['start-time'].setValue(this['start-time']);
            this._formGroup.controls['end-time'].setValue(this['end-time']);
            this._formGroup.controls['group-by-time'].setValue(this['group-by-time']);
            this._formGroup.controls['group-by-field'].setValue(this['group-by-field']);
            this['pagination'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['sort-order'].setValue(this['sort-order']);
        }
    };
    Telemetry_queryMetricsQuerySpec.propInfo = {
        'kind': {
            required: false,
            type: 'string'
        },
        'api-version': {
            required: false,
            type: 'string'
        },
        'name': {
            description: "Name is the name of the API object. Must start and end with alpha numeric and can have alphanumeric, -, _, .",
            required: false,
            type: 'string'
        },
        'selector': {
            required: false,
            type: 'object'
        },
        'fields': {
            description: "Fields select the metric fields to be included in the result Empty will include all fields, must contain at least one non-tag field. Must start and end with alpha numeric and can have alphanumeric, -, _, .",
            required: false,
            type: 'Array<string>'
        },
        'function': {
            enum: enums_1.Telemetry_queryMetricsQuerySpec_function,
            default: 'none',
            description: "Functions specify an operation function to be applied, example mean()/max().",
            required: true,
            type: 'string'
        },
        'start-time': {
            description: "StartTime selects all metrics with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.",
            required: false,
            type: 'Date'
        },
        'end-time': {
            description: "EndTime selects all metrics with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.",
            required: false,
            type: 'Date'
        },
        'group-by-time': {
            description: "GroupbyTime groups series based on the interval specified. Should be a valid time duration.",
            hint: '60s',
            required: false,
            type: 'string'
        },
        'group-by-field': {
            description: "GroupbyField groups series based on the field specified. Must start and end with alpha numeric and can have alphanumeric, -, _, .",
            required: false,
            type: 'string'
        },
        'pagination': {
            description: "PaginationSpec specifies the number of series to include.",
            required: false,
            type: 'object'
        },
        'sort-order': {
            enum: enums_2.Telemetry_queryMetricsQuerySpec_sort_order,
            default: 'ascending',
            description: "SortOrder specifies time ordering of results.",
            required: true,
            type: 'string'
        },
    };
    return Telemetry_queryMetricsQuerySpec;
}(base_model_1.BaseModel));
exports.Telemetry_queryMetricsQuerySpec = Telemetry_queryMetricsQuerySpec;
