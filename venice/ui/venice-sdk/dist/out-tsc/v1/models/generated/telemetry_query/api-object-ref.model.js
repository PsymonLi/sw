"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiObjectRef = void 0;
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var ApiObjectRef = /** @class */ (function (_super) {
    __extends(ApiObjectRef, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function ApiObjectRef(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        /** Tenant of the object. */
        _this['tenant'] = null;
        /** Namespace of the object, for scoped objects. */
        _this['namespace'] = null;
        /** Kind represents the type of the API object. */
        _this['kind'] = null;
        /** Name of the object, unique within a Namespace for scoped objects. */
        _this['name'] = null;
        /** URI is a link to accessing the referenced object. */
        _this['uri'] = null;
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    ApiObjectRef.prototype.getPropInfo = function (propName) {
        return ApiObjectRef.propInfo[propName];
    };
    ApiObjectRef.prototype.getPropInfoConfig = function () {
        return ApiObjectRef.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    ApiObjectRef.hasDefaultValue = function (prop) {
        return (ApiObjectRef.propInfo[prop] != null &&
            ApiObjectRef.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    ApiObjectRef.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['tenant'] != null) {
            this['tenant'] = values['tenant'];
        }
        else if (fillDefaults && ApiObjectRef.hasDefaultValue('tenant')) {
            this['tenant'] = ApiObjectRef.propInfo['tenant'].default;
        }
        else {
            this['tenant'] = null;
        }
        if (values && values['namespace'] != null) {
            this['namespace'] = values['namespace'];
        }
        else if (fillDefaults && ApiObjectRef.hasDefaultValue('namespace')) {
            this['namespace'] = ApiObjectRef.propInfo['namespace'].default;
        }
        else {
            this['namespace'] = null;
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        }
        else if (fillDefaults && ApiObjectRef.hasDefaultValue('kind')) {
            this['kind'] = ApiObjectRef.propInfo['kind'].default;
        }
        else {
            this['kind'] = null;
        }
        if (values && values['name'] != null) {
            this['name'] = values['name'];
        }
        else if (fillDefaults && ApiObjectRef.hasDefaultValue('name')) {
            this['name'] = ApiObjectRef.propInfo['name'].default;
        }
        else {
            this['name'] = null;
        }
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        }
        else if (fillDefaults && ApiObjectRef.hasDefaultValue('uri')) {
            this['uri'] = ApiObjectRef.propInfo['uri'].default;
        }
        else {
            this['uri'] = null;
        }
        this.setFormGroupValuesToBeModelValues();
    };
    ApiObjectRef.prototype.getFormGroup = function () {
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'tenant': validators_1.CustomFormControl(new forms_1.FormControl(this['tenant']), ApiObjectRef.propInfo['tenant']),
                'namespace': validators_1.CustomFormControl(new forms_1.FormControl(this['namespace']), ApiObjectRef.propInfo['namespace']),
                'kind': validators_1.CustomFormControl(new forms_1.FormControl(this['kind']), ApiObjectRef.propInfo['kind']),
                'name': validators_1.CustomFormControl(new forms_1.FormControl(this['name']), ApiObjectRef.propInfo['name']),
                'uri': validators_1.CustomFormControl(new forms_1.FormControl(this['uri']), ApiObjectRef.propInfo['uri']),
            });
        }
        return this._formGroup;
    };
    ApiObjectRef.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    ApiObjectRef.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['tenant'].setValue(this['tenant']);
            this._formGroup.controls['namespace'].setValue(this['namespace']);
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['name'].setValue(this['name']);
            this._formGroup.controls['uri'].setValue(this['uri']);
        }
    };
    ApiObjectRef.propInfo = {
        'tenant': {
            description: "Tenant of the object.",
            required: false,
            type: 'string'
        },
        'namespace': {
            description: "Namespace of the object, for scoped objects.",
            required: false,
            type: 'string'
        },
        'kind': {
            description: "Kind represents the type of the API object.",
            required: false,
            type: 'string'
        },
        'name': {
            description: "Name of the object, unique within a Namespace for scoped objects.",
            required: false,
            type: 'string'
        },
        'uri': {
            description: "URI is a link to accessing the referenced object.",
            required: false,
            type: 'string'
        },
    };
    return ApiObjectRef;
}(base_model_1.BaseModel));
exports.ApiObjectRef = ApiObjectRef;
