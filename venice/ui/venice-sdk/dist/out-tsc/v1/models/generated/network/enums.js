"use strict";
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
var ApiListWatchOptions_sort_order;
(function (ApiListWatchOptions_sort_order) {
    ApiListWatchOptions_sort_order["none"] = "none";
    ApiListWatchOptions_sort_order["by-name"] = "by-name";
    ApiListWatchOptions_sort_order["by-name-reverse"] = "by-name-reverse";
    ApiListWatchOptions_sort_order["by-version"] = "by-version";
    ApiListWatchOptions_sort_order["by-version-reverse"] = "by-version-reverse";
    ApiListWatchOptions_sort_order["by-creation-time"] = "by-creation-time";
    ApiListWatchOptions_sort_order["by-creation-time-reverse"] = "by-creation-time-reverse";
    ApiListWatchOptions_sort_order["by-mod-time"] = "by-mod-time";
    ApiListWatchOptions_sort_order["by-mod-time-reverse"] = "by-mod-time-reverse";
})(ApiListWatchOptions_sort_order = exports.ApiListWatchOptions_sort_order || (exports.ApiListWatchOptions_sort_order = {}));
var NetworkBGPAuthStatus_status;
(function (NetworkBGPAuthStatus_status) {
    NetworkBGPAuthStatus_status["disabled"] = "disabled";
    NetworkBGPAuthStatus_status["enabled"] = "enabled";
})(NetworkBGPAuthStatus_status = exports.NetworkBGPAuthStatus_status || (exports.NetworkBGPAuthStatus_status = {}));
var NetworkBGPNeighbor_enable_address_families;
(function (NetworkBGPNeighbor_enable_address_families) {
    NetworkBGPNeighbor_enable_address_families["ipv4-unicast"] = "ipv4-unicast";
    NetworkBGPNeighbor_enable_address_families["l2vpn-evpn"] = "l2vpn-evpn";
})(NetworkBGPNeighbor_enable_address_families = exports.NetworkBGPNeighbor_enable_address_families || (exports.NetworkBGPNeighbor_enable_address_families = {}));
var NetworkIPAMPolicySpec_type;
(function (NetworkIPAMPolicySpec_type) {
    NetworkIPAMPolicySpec_type["dhcp-relay"] = "dhcp-relay";
})(NetworkIPAMPolicySpec_type = exports.NetworkIPAMPolicySpec_type || (exports.NetworkIPAMPolicySpec_type = {}));
var NetworkNetworkInterfaceSpec_admin_status;
(function (NetworkNetworkInterfaceSpec_admin_status) {
    NetworkNetworkInterfaceSpec_admin_status["up"] = "up";
    NetworkNetworkInterfaceSpec_admin_status["down"] = "down";
})(NetworkNetworkInterfaceSpec_admin_status = exports.NetworkNetworkInterfaceSpec_admin_status || (exports.NetworkNetworkInterfaceSpec_admin_status = {}));
var NetworkNetworkInterfaceSpec_type;
(function (NetworkNetworkInterfaceSpec_type) {
    NetworkNetworkInterfaceSpec_type["none"] = "none";
    NetworkNetworkInterfaceSpec_type["host-pf"] = "host-pf";
    NetworkNetworkInterfaceSpec_type["uplink-eth"] = "uplink-eth";
    NetworkNetworkInterfaceSpec_type["uplink-mgmt"] = "uplink-mgmt";
    NetworkNetworkInterfaceSpec_type["loopback-tep"] = "loopback-tep";
})(NetworkNetworkInterfaceSpec_type = exports.NetworkNetworkInterfaceSpec_type || (exports.NetworkNetworkInterfaceSpec_type = {}));
var NetworkNetworkInterfaceSpec_ip_alloc_type;
(function (NetworkNetworkInterfaceSpec_ip_alloc_type) {
    NetworkNetworkInterfaceSpec_ip_alloc_type["none"] = "none";
    NetworkNetworkInterfaceSpec_ip_alloc_type["static"] = "static";
    NetworkNetworkInterfaceSpec_ip_alloc_type["dhcp"] = "dhcp";
})(NetworkNetworkInterfaceSpec_ip_alloc_type = exports.NetworkNetworkInterfaceSpec_ip_alloc_type || (exports.NetworkNetworkInterfaceSpec_ip_alloc_type = {}));
var NetworkNetworkInterfaceStatus_type;
(function (NetworkNetworkInterfaceStatus_type) {
    NetworkNetworkInterfaceStatus_type["none"] = "none";
    NetworkNetworkInterfaceStatus_type["host-pf"] = "host-pf";
    NetworkNetworkInterfaceStatus_type["uplink-eth"] = "uplink-eth";
    NetworkNetworkInterfaceStatus_type["uplink-mgmt"] = "uplink-mgmt";
    NetworkNetworkInterfaceStatus_type["loopback-tep"] = "loopback-tep";
})(NetworkNetworkInterfaceStatus_type = exports.NetworkNetworkInterfaceStatus_type || (exports.NetworkNetworkInterfaceStatus_type = {}));
var NetworkNetworkInterfaceStatus_oper_status;
(function (NetworkNetworkInterfaceStatus_oper_status) {
    NetworkNetworkInterfaceStatus_oper_status["up"] = "up";
    NetworkNetworkInterfaceStatus_oper_status["down"] = "down";
})(NetworkNetworkInterfaceStatus_oper_status = exports.NetworkNetworkInterfaceStatus_oper_status || (exports.NetworkNetworkInterfaceStatus_oper_status = {}));
var NetworkNetworkSpec_type;
(function (NetworkNetworkSpec_type) {
    NetworkNetworkSpec_type["bridged"] = "bridged";
    NetworkNetworkSpec_type["routed"] = "routed";
})(NetworkNetworkSpec_type = exports.NetworkNetworkSpec_type || (exports.NetworkNetworkSpec_type = {}));
var NetworkNetworkStatus_oper_state;
(function (NetworkNetworkStatus_oper_state) {
    NetworkNetworkStatus_oper_state["active"] = "active";
    NetworkNetworkStatus_oper_state["rejected"] = "rejected";
})(NetworkNetworkStatus_oper_state = exports.NetworkNetworkStatus_oper_state || (exports.NetworkNetworkStatus_oper_state = {}));
var NetworkPauseSpec_type;
(function (NetworkPauseSpec_type) {
    NetworkPauseSpec_type["disable"] = "disable";
    NetworkPauseSpec_type["link"] = "link";
    NetworkPauseSpec_type["priority"] = "priority";
})(NetworkPauseSpec_type = exports.NetworkPauseSpec_type || (exports.NetworkPauseSpec_type = {}));
var NetworkRDSpec_address_family;
(function (NetworkRDSpec_address_family) {
    NetworkRDSpec_address_family["ipv4-unicast"] = "ipv4-unicast";
    NetworkRDSpec_address_family["l2vpn-evpn"] = "l2vpn-evpn";
})(NetworkRDSpec_address_family = exports.NetworkRDSpec_address_family || (exports.NetworkRDSpec_address_family = {}));
var NetworkRouteDistinguisher_type;
(function (NetworkRouteDistinguisher_type) {
    NetworkRouteDistinguisher_type["type0"] = "type0";
    NetworkRouteDistinguisher_type["type1"] = "type1";
    NetworkRouteDistinguisher_type["type2"] = "type2";
})(NetworkRouteDistinguisher_type = exports.NetworkRouteDistinguisher_type || (exports.NetworkRouteDistinguisher_type = {}));
var NetworkTLSServerPolicySpec_client_authentication;
(function (NetworkTLSServerPolicySpec_client_authentication) {
    NetworkTLSServerPolicySpec_client_authentication["mandatory"] = "mandatory";
    NetworkTLSServerPolicySpec_client_authentication["optional"] = "optional";
    NetworkTLSServerPolicySpec_client_authentication["none"] = "none";
})(NetworkTLSServerPolicySpec_client_authentication = exports.NetworkTLSServerPolicySpec_client_authentication || (exports.NetworkTLSServerPolicySpec_client_authentication = {}));
var NetworkTransceiverStatus_state;
(function (NetworkTransceiverStatus_state) {
    NetworkTransceiverStatus_state["state_na"] = "state_na";
    NetworkTransceiverStatus_state["state_removed"] = "state_removed";
    NetworkTransceiverStatus_state["state_inserted"] = "state_inserted";
    NetworkTransceiverStatus_state["state_pending"] = "state_pending";
    NetworkTransceiverStatus_state["state_sprom_read"] = "state_sprom_read";
    NetworkTransceiverStatus_state["state_sprom_read_err"] = "state_sprom_read_err";
})(NetworkTransceiverStatus_state = exports.NetworkTransceiverStatus_state || (exports.NetworkTransceiverStatus_state = {}));
var NetworkTransceiverStatus_cable_type;
(function (NetworkTransceiverStatus_cable_type) {
    NetworkTransceiverStatus_cable_type["none"] = "none";
    NetworkTransceiverStatus_cable_type["copper"] = "copper";
    NetworkTransceiverStatus_cable_type["fiber"] = "fiber";
})(NetworkTransceiverStatus_cable_type = exports.NetworkTransceiverStatus_cable_type || (exports.NetworkTransceiverStatus_cable_type = {}));
var NetworkTransceiverStatus_pid;
(function (NetworkTransceiverStatus_pid) {
    NetworkTransceiverStatus_pid["unknown"] = "unknown";
    NetworkTransceiverStatus_pid["qsfp_100g_cr4"] = "qsfp_100g_cr4";
    NetworkTransceiverStatus_pid["qsfp_40gbase_cr4"] = "qsfp_40gbase_cr4";
    NetworkTransceiverStatus_pid["sfp_25gbase_cr_s"] = "sfp_25gbase_cr_s";
    NetworkTransceiverStatus_pid["sfp_25gbase_cr_l"] = "sfp_25gbase_cr_l";
    NetworkTransceiverStatus_pid["sfp_25gbase_cr_n"] = "sfp_25gbase_cr_n";
    NetworkTransceiverStatus_pid["qsfp_100g_aoc"] = "qsfp_100g_aoc";
    NetworkTransceiverStatus_pid["qsfp_100g_acc"] = "qsfp_100g_acc";
    NetworkTransceiverStatus_pid["qsfp_100g_sr4"] = "qsfp_100g_sr4";
    NetworkTransceiverStatus_pid["qsfp_100g_lr4"] = "qsfp_100g_lr4";
    NetworkTransceiverStatus_pid["qsfp_100g_er4"] = "qsfp_100g_er4";
    NetworkTransceiverStatus_pid["qsfp_40gbase_er4"] = "qsfp_40gbase_er4";
    NetworkTransceiverStatus_pid["qsfp_40gbase_sr4"] = "qsfp_40gbase_sr4";
    NetworkTransceiverStatus_pid["qsfp_40gbase_lr4"] = "qsfp_40gbase_lr4";
    NetworkTransceiverStatus_pid["qsfp_40gbase_aoc"] = "qsfp_40gbase_aoc";
    NetworkTransceiverStatus_pid["sfp_25gbase_sr"] = "sfp_25gbase_sr";
    NetworkTransceiverStatus_pid["sfp_25gbase_lr"] = "sfp_25gbase_lr";
    NetworkTransceiverStatus_pid["sfp_25gbase_er"] = "sfp_25gbase_er";
    NetworkTransceiverStatus_pid["sfp_25gbase_aoc"] = "sfp_25gbase_aoc";
    NetworkTransceiverStatus_pid["sfp_10gbase_sr"] = "sfp_10gbase_sr";
    NetworkTransceiverStatus_pid["sfp_10gbase_lr"] = "sfp_10gbase_lr";
    NetworkTransceiverStatus_pid["sfp_10gbase_lrm"] = "sfp_10gbase_lrm";
    NetworkTransceiverStatus_pid["sfp_10gbase_er"] = "sfp_10gbase_er";
    NetworkTransceiverStatus_pid["sfp_10gbase_aoc"] = "sfp_10gbase_aoc";
    NetworkTransceiverStatus_pid["sfp_10gbase_cu"] = "sfp_10gbase_cu";
    NetworkTransceiverStatus_pid["qsfp_100g_cwdm4"] = "qsfp_100g_cwdm4";
    NetworkTransceiverStatus_pid["qsfp_100g_psm4"] = "qsfp_100g_psm4";
    NetworkTransceiverStatus_pid["pid_na"] = "pid_na";
})(NetworkTransceiverStatus_pid = exports.NetworkTransceiverStatus_pid || (exports.NetworkTransceiverStatus_pid = {}));
var NetworkVirtualRouterSpec_type;
(function (NetworkVirtualRouterSpec_type) {
    NetworkVirtualRouterSpec_type["unknown"] = "unknown";
    NetworkVirtualRouterSpec_type["tenant"] = "tenant";
    NetworkVirtualRouterSpec_type["infra"] = "infra";
})(NetworkVirtualRouterSpec_type = exports.NetworkVirtualRouterSpec_type || (exports.NetworkVirtualRouterSpec_type = {}));
var ApiListWatchOptions_sort_order_uihint;
(function (ApiListWatchOptions_sort_order_uihint) {
    ApiListWatchOptions_sort_order_uihint["by-creation-time"] = "By Creation Time";
    ApiListWatchOptions_sort_order_uihint["by-creation-time-reverse"] = "By Creation Time Reverse";
    ApiListWatchOptions_sort_order_uihint["by-mod-time"] = "By Modification Time";
    ApiListWatchOptions_sort_order_uihint["by-mod-time-reverse"] = "By Modification Time Reverse";
    ApiListWatchOptions_sort_order_uihint["by-name"] = "By Name";
    ApiListWatchOptions_sort_order_uihint["by-name-reverse"] = "By Name Reverse";
    ApiListWatchOptions_sort_order_uihint["by-version"] = "By Version";
    ApiListWatchOptions_sort_order_uihint["by-version-reverse"] = "By Version Reverse";
    ApiListWatchOptions_sort_order_uihint["none"] = "None";
})(ApiListWatchOptions_sort_order_uihint = exports.ApiListWatchOptions_sort_order_uihint || (exports.ApiListWatchOptions_sort_order_uihint = {}));
/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
var AllEnums = /** @class */ (function () {
    function AllEnums() {
        this.ApiListWatchOptions_sort_order = ApiListWatchOptions_sort_order;
        this.NetworkBGPAuthStatus_status = NetworkBGPAuthStatus_status;
        this.NetworkBGPNeighbor_enable_address_families = NetworkBGPNeighbor_enable_address_families;
        this.NetworkIPAMPolicySpec_type = NetworkIPAMPolicySpec_type;
        this.NetworkNetworkInterfaceSpec_admin_status = NetworkNetworkInterfaceSpec_admin_status;
        this.NetworkNetworkInterfaceSpec_type = NetworkNetworkInterfaceSpec_type;
        this.NetworkNetworkInterfaceSpec_ip_alloc_type = NetworkNetworkInterfaceSpec_ip_alloc_type;
        this.NetworkNetworkInterfaceStatus_type = NetworkNetworkInterfaceStatus_type;
        this.NetworkNetworkInterfaceStatus_oper_status = NetworkNetworkInterfaceStatus_oper_status;
        this.NetworkNetworkSpec_type = NetworkNetworkSpec_type;
        this.NetworkNetworkStatus_oper_state = NetworkNetworkStatus_oper_state;
        this.NetworkPauseSpec_type = NetworkPauseSpec_type;
        this.NetworkRDSpec_address_family = NetworkRDSpec_address_family;
        this.NetworkRouteDistinguisher_type = NetworkRouteDistinguisher_type;
        this.NetworkTLSServerPolicySpec_client_authentication = NetworkTLSServerPolicySpec_client_authentication;
        this.NetworkTransceiverStatus_state = NetworkTransceiverStatus_state;
        this.NetworkTransceiverStatus_cable_type = NetworkTransceiverStatus_cable_type;
        this.NetworkTransceiverStatus_pid = NetworkTransceiverStatus_pid;
        this.NetworkVirtualRouterSpec_type = NetworkVirtualRouterSpec_type;
        this.ApiListWatchOptions_sort_order_uihint = ApiListWatchOptions_sort_order_uihint;
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    Object.defineProperty(AllEnums, "instance", {
        get: function () {
            return AllEnums._instance;
        },
        enumerable: true,
        configurable: true
    });
    AllEnums._instance = new AllEnums();
    return AllEnums;
}());
exports.AllEnums = AllEnums;
