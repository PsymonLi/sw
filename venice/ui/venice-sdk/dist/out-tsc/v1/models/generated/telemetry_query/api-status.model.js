"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiStatus = void 0;
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var api_status_result_model_1 = require("./api-status-result.model");
var api_object_ref_model_1 = require("./api-object-ref.model");
var ApiStatus = /** @class */ (function (_super) {
    __extends(ApiStatus, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function ApiStatus(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        _this['kind'] = null;
        _this['api-version'] = null;
        /** Result contains the status of the operation, success or failure. */
        _this['result'] = null;
        /** Message contains human readable form of the error. */
        _this['message'] = null;
        /** Code is the HTTP status code. */
        _this['code'] = null;
        /** Reference to the object (optional) for which this status is being sent. */
        _this['object-ref'] = null;
        _this['result'] = new api_status_result_model_1.ApiStatusResult();
        _this['message'] = new Array();
        _this['object-ref'] = new api_object_ref_model_1.ApiObjectRef();
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    ApiStatus.prototype.getPropInfo = function (propName) {
        return ApiStatus.propInfo[propName];
    };
    ApiStatus.prototype.getPropInfoConfig = function () {
        return ApiStatus.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    ApiStatus.hasDefaultValue = function (prop) {
        return (ApiStatus.propInfo[prop] != null &&
            ApiStatus.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    ApiStatus.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        }
        else if (fillDefaults && ApiStatus.hasDefaultValue('kind')) {
            this['kind'] = ApiStatus.propInfo['kind'].default;
        }
        else {
            this['kind'] = null;
        }
        if (values && values['api-version'] != null) {
            this['api-version'] = values['api-version'];
        }
        else if (fillDefaults && ApiStatus.hasDefaultValue('api-version')) {
            this['api-version'] = ApiStatus.propInfo['api-version'].default;
        }
        else {
            this['api-version'] = null;
        }
        if (values) {
            this['result'].setValues(values['result'], fillDefaults);
        }
        else {
            this['result'].setValues(null, fillDefaults);
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        }
        else if (fillDefaults && ApiStatus.hasDefaultValue('message')) {
            this['message'] = [ApiStatus.propInfo['message'].default];
        }
        else {
            this['message'] = [];
        }
        if (values && values['code'] != null) {
            this['code'] = values['code'];
        }
        else if (fillDefaults && ApiStatus.hasDefaultValue('code')) {
            this['code'] = ApiStatus.propInfo['code'].default;
        }
        else {
            this['code'] = null;
        }
        if (values) {
            this['object-ref'].setValues(values['object-ref'], fillDefaults);
        }
        else {
            this['object-ref'].setValues(null, fillDefaults);
        }
        this.setFormGroupValuesToBeModelValues();
    };
    ApiStatus.prototype.getFormGroup = function () {
        var _this = this;
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'kind': validators_1.CustomFormControl(new forms_1.FormControl(this['kind']), ApiStatus.propInfo['kind']),
                'api-version': validators_1.CustomFormControl(new forms_1.FormControl(this['api-version']), ApiStatus.propInfo['api-version']),
                'result': validators_1.CustomFormGroup(this['result'].$formGroup, ApiStatus.propInfo['result'].required),
                'message': validators_1.CustomFormControl(new forms_1.FormControl(this['message']), ApiStatus.propInfo['message']),
                'code': validators_1.CustomFormControl(new forms_1.FormControl(this['code']), ApiStatus.propInfo['code']),
                'object-ref': validators_1.CustomFormGroup(this['object-ref'].$formGroup, ApiStatus.propInfo['object-ref'].required),
            });
            // We force recalculation of controls under a form group
            Object.keys(this._formGroup.get('result').controls).forEach(function (field) {
                var control = _this._formGroup.get('result').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys(this._formGroup.get('object-ref').controls).forEach(function (field) {
                var control = _this._formGroup.get('object-ref').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    };
    ApiStatus.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    ApiStatus.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['api-version'].setValue(this['api-version']);
            this['result'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['message'].setValue(this['message']);
            this._formGroup.controls['code'].setValue(this['code']);
            this['object-ref'].setFormGroupValuesToBeModelValues();
        }
    };
    ApiStatus.propInfo = {
        'kind': {
            required: false,
            type: 'string'
        },
        'api-version': {
            required: false,
            type: 'string'
        },
        'result': {
            description: "Result contains the status of the operation, success or failure.",
            required: false,
            type: 'object'
        },
        'message': {
            description: "Message contains human readable form of the error.",
            required: false,
            type: 'Array<string>'
        },
        'code': {
            description: "Code is the HTTP status code.",
            required: false,
            type: 'number'
        },
        'object-ref': {
            description: "Reference to the object (optional) for which this status is being sent.",
            required: false,
            type: 'object'
        },
    };
    return ApiStatus;
}(base_model_1.BaseModel));
exports.ApiStatus = ApiStatus;
