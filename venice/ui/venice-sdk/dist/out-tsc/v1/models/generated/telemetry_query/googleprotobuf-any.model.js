"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
var forms_1 = require("@angular/forms");
var validators_1 = require("../../../utils/validators");
var base_model_1 = require("../basemodel/base-model");
var GoogleprotobufAny = /** @class */ (function (_super) {
    __extends(GoogleprotobufAny, _super);
    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    function GoogleprotobufAny(values, setDefaults) {
        if (setDefaults === void 0) { setDefaults = true; }
        var _this = _super.call(this) || this;
        /** Field for holding arbitrary ui state */
        _this['_ui'] = {};
        /** A URL/resource name whose content describes the type of the serialized protocol buffer message. For URLs which use the scheme `http`, `https`, or no scheme, the following restrictions and interpretations apply: * If no scheme is provided, `https` is assumed. * The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics. */
        _this['type_url'] = null;
        /** Must be a valid serialized protocol buffer of the above specified type. */
        _this['value'] = null;
        _this._inputValue = values;
        _this.setValues(values, setDefaults);
        return _this;
    }
    GoogleprotobufAny.prototype.getPropInfo = function (propName) {
        return GoogleprotobufAny.propInfo[propName];
    };
    GoogleprotobufAny.prototype.getPropInfoConfig = function () {
        return GoogleprotobufAny.propInfo;
    };
    /**
     * Returns whether or not there is an enum property with a default value
    */
    GoogleprotobufAny.hasDefaultValue = function (prop) {
        return (GoogleprotobufAny.propInfo[prop] != null &&
            GoogleprotobufAny.propInfo[prop].default != null);
    };
    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    GoogleprotobufAny.prototype.setValues = function (values, fillDefaults) {
        if (fillDefaults === void 0) { fillDefaults = true; }
        if (values && values['_ui']) {
            this['_ui'] = values['_ui'];
        }
        if (values && values['type_url'] != null) {
            this['type_url'] = values['type_url'];
        }
        else if (fillDefaults && GoogleprotobufAny.hasDefaultValue('type_url')) {
            this['type_url'] = GoogleprotobufAny.propInfo['type_url'].default;
        }
        else {
            this['type_url'] = null;
        }
        if (values && values['value'] != null) {
            this['value'] = values['value'];
        }
        else if (fillDefaults && GoogleprotobufAny.hasDefaultValue('value')) {
            this['value'] = GoogleprotobufAny.propInfo['value'].default;
        }
        else {
            this['value'] = null;
        }
        this.setFormGroupValuesToBeModelValues();
    };
    GoogleprotobufAny.prototype.getFormGroup = function () {
        if (!this._formGroup) {
            this._formGroup = new forms_1.FormGroup({
                'type_url': validators_1.CustomFormControl(new forms_1.FormControl(this['type_url']), GoogleprotobufAny.propInfo['type_url']),
                'value': validators_1.CustomFormControl(new forms_1.FormControl(this['value']), GoogleprotobufAny.propInfo['value']),
            });
        }
        return this._formGroup;
    };
    GoogleprotobufAny.prototype.setModelToBeFormGroupValues = function () {
        this.setValues(this.$formGroup.value, false);
    };
    GoogleprotobufAny.prototype.setFormGroupValuesToBeModelValues = function () {
        if (this._formGroup) {
            this._formGroup.controls['type_url'].setValue(this['type_url']);
            this._formGroup.controls['value'].setValue(this['value']);
        }
    };
    GoogleprotobufAny.propInfo = {
        'type_url': {
            description: "A URL/resource name whose content describes the type of the serialized protocol buffer message. For URLs which use the scheme 'http', 'https', or no scheme, the following restrictions and interpretations apply: * If no scheme is provided, 'https' is assumed. * The last segment of the URL's path must represent the fully qualified name of the type (as in 'path/google.protobuf.Duration'). The name should be in a canonical form (e.g., leading \".\" is not accepted). * An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Schemes other than 'http', 'https' (or the empty scheme) might be used with implementation specific semantics.",
            required: false,
            type: 'string'
        },
        'value': {
            description: "Must be a valid serialized protocol buffer of the above specified type.",
            required: false,
            type: 'string'
        },
    };
    return GoogleprotobufAny;
}(base_model_1.BaseModel));
exports.GoogleprotobufAny = GoogleprotobufAny;
