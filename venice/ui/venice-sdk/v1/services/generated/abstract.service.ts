/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

import { HttpClient } from '../../../../webapp/node_modules/@angular/common/http';
import { Observable } from '../../../../webapp/node_modules/rxjs';
import { Injectable } from '../../../../webapp/node_modules/@angular/core';

export interface MethodOpts {
  eventID: string, 
  objType: string,
  isStaging: boolean
}

export enum EventTypes {
  create = 'Created',
  update = 'Updated',
  delete = 'Deleted',
}

export interface ChangeEvent<T> {
  type: EventTypes;
  object: T;
}

export interface ServerEvent<T> {
  data: ReadonlyArray<T>;
  events: ChangeEvent<T>[];
  connIsErrorState: boolean;
}

@Injectable()
export class AbstractService {
  protected O_Tenant: string = "";

  constructor(protected _http: HttpClient) {
  }

  /**
   * Get the service class-name
   */
  getClassName(): string {
    return 'base_service';
  }

  // This function should be overwritten
  protected createDataCache<T> (constructor: any, key: string, listFn: () => Observable<any>, watchFn: (query: any) => Observable<any>, bufferDelayMap: { [key: string]: number } = {}): Observable<any> {
    return null
  }

  // This function should be overwritten
  protected getFromDataCache(kind: string, createCacheFn: any): any {
    return null
  }


  // This function should be overwritten
  protected invokeAJAX(method: string, url: string, payload: any, opts: MethodOpts,  forceReal: boolean = false): Observable<any> {
    let observer;
    switch (method) {
      case 'GET':
        if (payload == null) {
          observer = this._http.get(url, { observe: 'response' });
        } else {
          observer = this._http.get(url, { params: payload, observe: 'response' });
        }
        break;
      case 'POST':
        observer = this._http.post(url, payload, { observe: 'response' });
        break;
      case 'PUT':
        observer = this._http.put(url, payload, { observe: 'response' });
        break;
      case 'DELETE':
        observer = this._http.delete(url, { observe: 'response' });
        break;
      default:
        break;
    }
    return observer;
  }

  protected invokeAJAXGetCall(url: string, payload: any, opts: MethodOpts, forceReal: boolean = false): Observable<any> {
    return this.invokeAJAX('GET', url, payload, opts, forceReal);
  }

  protected invokeAJAXPostCall(url: string, payload: any, opts: MethodOpts,forceReal: boolean = false): Observable<any> {
    return this.invokeAJAX('POST', url, payload, opts, forceReal);
  }

  protected invokeAJAXPutCall(url: string, payload: any, opts: MethodOpts, forceReal: boolean = false): Observable<any> {
    return this.invokeAJAX('PUT', url, payload, opts, forceReal);
  }

  protected invokeAJAXDeleteCall(url: string, opts: MethodOpts, forceReal: boolean = false): Observable<any> {
    return this.invokeAJAX('DELETE', url, null, opts, forceReal);
  }
}
