/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from './base-model';

import { DiagnosticsModuleStatus_category,  } from './enums';
import { DiagnosticsServicePort, IDiagnosticsServicePort } from './diagnostics-service-port.model';

export interface IDiagnosticsModuleStatus {
    'node'?: string;
    'module'?: string;
    'category': DiagnosticsModuleStatus_category;
    'last-start'?: Date;
    'restart-count'?: number;
    'last-restart-reason'?: string;
    'service'?: string;
    'service-ports'?: Array<IDiagnosticsServicePort>;
    'mac-address'?: string;
}


export class DiagnosticsModuleStatus extends BaseModel implements IDiagnosticsModuleStatus {
    'node': string = null;
    'module': string = null;
    'category': DiagnosticsModuleStatus_category = null;
    'last-start': Date = null;
    'restart-count': number = null;
    'last-restart-reason': string = null;
    'service': string = null;
    'service-ports': Array<DiagnosticsServicePort> = null;
    'mac-address': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'node': {
            required: false,
            type: 'string'
        },
        'module': {
            required: false,
            type: 'string'
        },
        'category': {
            enum: DiagnosticsModuleStatus_category,
            default: 'venice',
            required: true,
            type: 'string'
        },
        'last-start': {
            required: false,
            type: 'Date'
        },
        'restart-count': {
            required: false,
            type: 'number'
        },
        'last-restart-reason': {
            required: false,
            type: 'string'
        },
        'service': {
            required: false,
            type: 'string'
        },
        'service-ports': {
            required: false,
            type: 'object'
        },
        'mac-address': {
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return DiagnosticsModuleStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return DiagnosticsModuleStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (DiagnosticsModuleStatus.propInfo[prop] != null &&
                        DiagnosticsModuleStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['service-ports'] = new Array<DiagnosticsServicePort>();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['node'] != null) {
            this['node'] = values['node'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('node')) {
            this['node'] = DiagnosticsModuleStatus.propInfo['node'].default;
        } else {
            this['node'] = null
        }
        if (values && values['module'] != null) {
            this['module'] = values['module'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('module')) {
            this['module'] = DiagnosticsModuleStatus.propInfo['module'].default;
        } else {
            this['module'] = null
        }
        if (values && values['category'] != null) {
            this['category'] = values['category'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('category')) {
            this['category'] = <DiagnosticsModuleStatus_category>  DiagnosticsModuleStatus.propInfo['category'].default;
        } else {
            this['category'] = null
        }
        if (values && values['last-start'] != null) {
            this['last-start'] = values['last-start'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('last-start')) {
            this['last-start'] = DiagnosticsModuleStatus.propInfo['last-start'].default;
        } else {
            this['last-start'] = null
        }
        if (values && values['restart-count'] != null) {
            this['restart-count'] = values['restart-count'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('restart-count')) {
            this['restart-count'] = DiagnosticsModuleStatus.propInfo['restart-count'].default;
        } else {
            this['restart-count'] = null
        }
        if (values && values['last-restart-reason'] != null) {
            this['last-restart-reason'] = values['last-restart-reason'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('last-restart-reason')) {
            this['last-restart-reason'] = DiagnosticsModuleStatus.propInfo['last-restart-reason'].default;
        } else {
            this['last-restart-reason'] = null
        }
        if (values && values['service'] != null) {
            this['service'] = values['service'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('service')) {
            this['service'] = DiagnosticsModuleStatus.propInfo['service'].default;
        } else {
            this['service'] = null
        }
        if (values) {
            this.fillModelArray<DiagnosticsServicePort>(this, 'service-ports', values['service-ports'], DiagnosticsServicePort);
        } else {
            this['service-ports'] = [];
        }
        if (values && values['mac-address'] != null) {
            this['mac-address'] = values['mac-address'];
        } else if (fillDefaults && DiagnosticsModuleStatus.hasDefaultValue('mac-address')) {
            this['mac-address'] = DiagnosticsModuleStatus.propInfo['mac-address'].default;
        } else {
            this['mac-address'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'node': CustomFormControl(new FormControl(this['node']), DiagnosticsModuleStatus.propInfo['node']),
                'module': CustomFormControl(new FormControl(this['module']), DiagnosticsModuleStatus.propInfo['module']),
                'category': CustomFormControl(new FormControl(this['category'], [required, enumValidator(DiagnosticsModuleStatus_category), ]), DiagnosticsModuleStatus.propInfo['category']),
                'last-start': CustomFormControl(new FormControl(this['last-start']), DiagnosticsModuleStatus.propInfo['last-start']),
                'restart-count': CustomFormControl(new FormControl(this['restart-count']), DiagnosticsModuleStatus.propInfo['restart-count']),
                'last-restart-reason': CustomFormControl(new FormControl(this['last-restart-reason']), DiagnosticsModuleStatus.propInfo['last-restart-reason']),
                'service': CustomFormControl(new FormControl(this['service']), DiagnosticsModuleStatus.propInfo['service']),
                'service-ports': new FormArray([]),
                'mac-address': CustomFormControl(new FormControl(this['mac-address']), DiagnosticsModuleStatus.propInfo['mac-address']),
            });
            // generate FormArray control elements
            this.fillFormArray<DiagnosticsServicePort>('service-ports', this['service-ports'], DiagnosticsServicePort);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('service-ports') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('service-ports').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['node'].setValue(this['node']);
            this._formGroup.controls['module'].setValue(this['module']);
            this._formGroup.controls['category'].setValue(this['category']);
            this._formGroup.controls['last-start'].setValue(this['last-start']);
            this._formGroup.controls['restart-count'].setValue(this['restart-count']);
            this._formGroup.controls['last-restart-reason'].setValue(this['last-restart-reason']);
            this._formGroup.controls['service'].setValue(this['service']);
            this.fillModelArray<DiagnosticsServicePort>(this, 'service-ports', this['service-ports'], DiagnosticsServicePort);
            this._formGroup.controls['mac-address'].setValue(this['mac-address']);
        }
    }
}

