/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { DiagnosticsModuleSpec_log_level,  } from './enums';

export interface IDiagnosticsModuleSpec {
    'log-level': DiagnosticsModuleSpec_log_level;
    'enable-trace'?: boolean;
    'args'?: Array<string>;
}


export class DiagnosticsModuleSpec extends BaseModel implements IDiagnosticsModuleSpec {
    /** LogLevel is the logging level of this module. Default is Info. */
    'log-level': DiagnosticsModuleSpec_log_level = null;
    /** EnableTrace enables traces for a module. Default is false. */
    'enable-trace': boolean = null;
    /** Args are command line arguments passed to the module */
    'args': Array<string> = null;
    public static propInfo: { [prop in keyof IDiagnosticsModuleSpec]: PropInfoItem } = {
        'log-level': {
            enum: DiagnosticsModuleSpec_log_level,
            default: 'info',
            description:  'LogLevel is the logging level of this module. Default is Info.',
            required: true,
            type: 'string'
        },
        'enable-trace': {
            description:  'EnableTrace enables traces for a module. Default is false.',
            required: false,
            type: 'boolean'
        },
        'args': {
            description:  'Args are command line arguments passed to the module',
            required: false,
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return DiagnosticsModuleSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return DiagnosticsModuleSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (DiagnosticsModuleSpec.propInfo[prop] != null &&
                        DiagnosticsModuleSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['args'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['log-level'] != null) {
            this['log-level'] = values['log-level'];
        } else if (fillDefaults && DiagnosticsModuleSpec.hasDefaultValue('log-level')) {
            this['log-level'] = <DiagnosticsModuleSpec_log_level>  DiagnosticsModuleSpec.propInfo['log-level'].default;
        } else {
            this['log-level'] = null
        }
        if (values && values['enable-trace'] != null) {
            this['enable-trace'] = values['enable-trace'];
        } else if (fillDefaults && DiagnosticsModuleSpec.hasDefaultValue('enable-trace')) {
            this['enable-trace'] = DiagnosticsModuleSpec.propInfo['enable-trace'].default;
        } else {
            this['enable-trace'] = null
        }
        if (values && values['args'] != null) {
            this['args'] = values['args'];
        } else if (fillDefaults && DiagnosticsModuleSpec.hasDefaultValue('args')) {
            this['args'] = [ DiagnosticsModuleSpec.propInfo['args'].default];
        } else {
            this['args'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'log-level': CustomFormControl(new FormControl(this['log-level'], [required, enumValidator(DiagnosticsModuleSpec_log_level), ]), DiagnosticsModuleSpec.propInfo['log-level']),
                'enable-trace': CustomFormControl(new FormControl(this['enable-trace']), DiagnosticsModuleSpec.propInfo['enable-trace']),
                'args': CustomFormControl(new FormControl(this['args']), DiagnosticsModuleSpec.propInfo['args']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['log-level'].setValue(this['log-level']);
            this._formGroup.controls['enable-trace'].setValue(this['enable-trace']);
            this._formGroup.controls['args'].setValue(this['args']);
        }
    }
}

