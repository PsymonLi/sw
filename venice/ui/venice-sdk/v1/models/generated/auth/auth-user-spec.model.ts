/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthUserSpec_type,  AuthUserSpec_type_uihint  } from './enums';

export interface IAuthUserSpec {
    'fullname'?: string;
    'email'?: string;
    'password'?: string;
    'type'?: AuthUserSpec_type;
}


export class AuthUserSpec extends BaseModel implements IAuthUserSpec {
    'fullname': string = null;
    'email': string = null;
    'password': string = null;
    'type': AuthUserSpec_type = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'fullname': {
            type: 'string'
                    },
        'email': {
            type: 'string'
                    },
        'password': {
            type: 'string'
                    },
        'type': {
            enum: AuthUserSpec_type_uihint,
            default: 'LOCAL',
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthUserSpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthUserSpec.propInfo[prop] != null &&
                        AuthUserSpec.propInfo[prop].default != null &&
                        AuthUserSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['fullname'] != null) {
            this['fullname'] = values['fullname'];
        } else if (AuthUserSpec.hasDefaultValue('fullname')) {
            this['fullname'] = AuthUserSpec.propInfo['fullname'].default;
        }
        if (values && values['email'] != null) {
            this['email'] = values['email'];
        } else if (AuthUserSpec.hasDefaultValue('email')) {
            this['email'] = AuthUserSpec.propInfo['email'].default;
        }
        if (values && values['password'] != null) {
            this['password'] = values['password'];
        } else if (AuthUserSpec.hasDefaultValue('password')) {
            this['password'] = AuthUserSpec.propInfo['password'].default;
        }
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (AuthUserSpec.hasDefaultValue('type')) {
            this['type'] = <AuthUserSpec_type>  AuthUserSpec.propInfo['type'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'fullname': new FormControl(this['fullname']),
                'email': new FormControl(this['email']),
                'password': new FormControl(this['password']),
                'type': new FormControl(this['type'], [enumValidator(AuthUserSpec_type), ]),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['fullname'].setValue(this['fullname']);
            this._formGroup.controls['email'].setValue(this['email']);
            this._formGroup.controls['password'].setValue(this['password']);
            this._formGroup.controls['type'].setValue(this['type']);
        }
    }
}

