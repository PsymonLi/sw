/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthAuthenticators, IAuthAuthenticators } from './auth-authenticators.model';

export interface IAuthAuthenticationPolicySpec {
    'authenticators'?: IAuthAuthenticators;
    'secret'?: string;
}


export class AuthAuthenticationPolicySpec extends BaseModel implements IAuthAuthenticationPolicySpec {
    'authenticators': AuthAuthenticators = null;
    'secret': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'authenticators': {
            type: 'object'
        },
        'secret': {
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthAuthenticationPolicySpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthAuthenticationPolicySpec.propInfo[prop] != null &&
                        AuthAuthenticationPolicySpec.propInfo[prop].default != null &&
                        AuthAuthenticationPolicySpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['authenticators'] = new AuthAuthenticators();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['authenticators'].setValues(values['authenticators']);
        }
        if (values && values['secret'] != null) {
            this['secret'] = values['secret'];
        } else if (AuthAuthenticationPolicySpec.hasDefaultValue('secret')) {
            this['secret'] = AuthAuthenticationPolicySpec.propInfo['secret'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'authenticators': this['authenticators'].$formGroup,
                'secret': new FormControl(this['secret']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this['authenticators'].setFormGroupValues();
            this._formGroup.controls['secret'].setValue(this['secret']);
        }
    }
}

