/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthAuthenticators, IAuthAuthenticators } from './auth-authenticators.model';

export interface IAuthAuthenticationPolicySpec {
    'authenticators'?: IAuthAuthenticators;
    'secret'?: string;
    'token-expiry': string;
    '_ui'?: any;
}


export class AuthAuthenticationPolicySpec extends BaseModel implements IAuthAuthenticationPolicySpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'authenticators': AuthAuthenticators = null;
    /** Secret used to sign JWT token. */
    'secret': string = null;
    /** TokenExpiry is time duration after which JWT token expires. Default is 6 days. A duration string is a sequence of decimal number and a unit suffix, such as "300ms" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Should be a valid time duration. */
    'token-expiry': string = null;
    public static propInfo: { [prop in keyof IAuthAuthenticationPolicySpec]: PropInfoItem } = {
        'authenticators': {
            required: false,
            type: 'object'
        },
        'secret': {
            description:  `Secret used to sign JWT token.`,
            required: false,
            type: 'string'
        },
        'token-expiry': {
            default: '144h',
            description:  `TokenExpiry is time duration after which JWT token expires. Default is 6 days. A duration string is a sequence of decimal number and a unit suffix, such as "300ms" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Should be a valid time duration.`,
            hint:  '2h',
            required: true,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthAuthenticationPolicySpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthAuthenticationPolicySpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthAuthenticationPolicySpec.propInfo[prop] != null &&
                        AuthAuthenticationPolicySpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['authenticators'] = new AuthAuthenticators();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values) {
            this['authenticators'].setValues(values['authenticators'], fillDefaults);
        } else {
            this['authenticators'].setValues(null, fillDefaults);
        }
        if (values && values['secret'] != null) {
            this['secret'] = values['secret'];
        } else if (fillDefaults && AuthAuthenticationPolicySpec.hasDefaultValue('secret')) {
            this['secret'] = AuthAuthenticationPolicySpec.propInfo['secret'].default;
        } else {
            this['secret'] = null
        }
        if (values && values['token-expiry'] != null) {
            this['token-expiry'] = values['token-expiry'];
        } else if (fillDefaults && AuthAuthenticationPolicySpec.hasDefaultValue('token-expiry')) {
            this['token-expiry'] = AuthAuthenticationPolicySpec.propInfo['token-expiry'].default;
        } else {
            this['token-expiry'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'authenticators': CustomFormGroup(this['authenticators'].$formGroup, AuthAuthenticationPolicySpec.propInfo['authenticators'].required),
                'secret': CustomFormControl(new FormControl(this['secret']), AuthAuthenticationPolicySpec.propInfo['secret']),
                'token-expiry': CustomFormControl(new FormControl(this['token-expiry'], [required, ]), AuthAuthenticationPolicySpec.propInfo['token-expiry']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('authenticators') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('authenticators').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['authenticators'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['secret'].setValue(this['secret']);
            this._formGroup.controls['token-expiry'].setValue(this['token-expiry']);
        }
    }
}

