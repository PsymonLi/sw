/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthLdapServerStatus_result,  } from './enums';
import { AuthLdapServer, IAuthLdapServer } from './auth-ldap-server.model';

export interface IAuthLdapServerStatus {
    'result': AuthLdapServerStatus_result;
    'message'?: string;
    'server'?: IAuthLdapServer;
    'base-dn'?: string;
    'bind-dn'?: string;
    'bind-password'?: string;
}


export class AuthLdapServerStatus extends BaseModel implements IAuthLdapServerStatus {
    /** Result indicates if ldap check was successful. */
    'result': AuthLdapServerStatus_result = null;
    /** Message contains error message in case of failed check or a success message. */
    'message': string = null;
    /** LdapServer contains the ldap server configuration that was checked. */
    'server': AuthLdapServer = null;
    /** The LDAP base DN to be used in a user search. */
    'base-dn': string = null;
    /** The bind DN is the string that Venice uses to log in to the LDAP server. Venice uses this account to validate the remote user attempting to log in. The base DN is the container name and path in the LDAPserver where Venice searches for the remote user account. This is where the password is validated. This contains the user authorization and assigned RBAC roles for use on Venice. Venice requests the attribute from theLDAP server. */
    'bind-dn': string = null;
    /** The password for the LDAP database account specified in the Root DN field. */
    'bind-password': string = null;
    public static propInfo: { [prop in keyof IAuthLdapServerStatus]: PropInfoItem } = {
        'result': {
            enum: AuthLdapServerStatus_result,
            default: 'connect-success',
            description:  `Result indicates if ldap check was successful.`,
            required: true,
            type: 'string'
        },
        'message': {
            description:  `Message contains error message in case of failed check or a success message.`,
            required: false,
            type: 'string'
        },
        'server': {
            description:  `LdapServer contains the ldap server configuration that was checked.`,
            required: false,
            type: 'object'
        },
        'base-dn': {
            description:  `The LDAP base DN to be used in a user search.`,
            required: false,
            type: 'string'
        },
        'bind-dn': {
            description:  `The bind DN is the string that Venice uses to log in to the LDAP server. Venice uses this account to validate the remote user attempting to log in. The base DN is the container name and path in the LDAPserver where Venice searches for the remote user account. This is where the password is validated. This contains the user authorization and assigned RBAC roles for use on Venice. Venice requests the attribute from theLDAP server.`,
            required: false,
            type: 'string'
        },
        'bind-password': {
            description:  `The password for the LDAP database account specified in the Root DN field.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthLdapServerStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthLdapServerStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthLdapServerStatus.propInfo[prop] != null &&
                        AuthLdapServerStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['server'] = new AuthLdapServer();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['result'] != null) {
            this['result'] = values['result'];
        } else if (fillDefaults && AuthLdapServerStatus.hasDefaultValue('result')) {
            this['result'] = <AuthLdapServerStatus_result>  AuthLdapServerStatus.propInfo['result'].default;
        } else {
            this['result'] = null
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        } else if (fillDefaults && AuthLdapServerStatus.hasDefaultValue('message')) {
            this['message'] = AuthLdapServerStatus.propInfo['message'].default;
        } else {
            this['message'] = null
        }
        if (values) {
            this['server'].setValues(values['server'], fillDefaults);
        } else {
            this['server'].setValues(null, fillDefaults);
        }
        if (values && values['base-dn'] != null) {
            this['base-dn'] = values['base-dn'];
        } else if (fillDefaults && AuthLdapServerStatus.hasDefaultValue('base-dn')) {
            this['base-dn'] = AuthLdapServerStatus.propInfo['base-dn'].default;
        } else {
            this['base-dn'] = null
        }
        if (values && values['bind-dn'] != null) {
            this['bind-dn'] = values['bind-dn'];
        } else if (fillDefaults && AuthLdapServerStatus.hasDefaultValue('bind-dn')) {
            this['bind-dn'] = AuthLdapServerStatus.propInfo['bind-dn'].default;
        } else {
            this['bind-dn'] = null
        }
        if (values && values['bind-password'] != null) {
            this['bind-password'] = values['bind-password'];
        } else if (fillDefaults && AuthLdapServerStatus.hasDefaultValue('bind-password')) {
            this['bind-password'] = AuthLdapServerStatus.propInfo['bind-password'].default;
        } else {
            this['bind-password'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'result': CustomFormControl(new FormControl(this['result'], [required, enumValidator(AuthLdapServerStatus_result), ]), AuthLdapServerStatus.propInfo['result']),
                'message': CustomFormControl(new FormControl(this['message']), AuthLdapServerStatus.propInfo['message']),
                'server': CustomFormGroup(this['server'].$formGroup, AuthLdapServerStatus.propInfo['server'].required),
                'base-dn': CustomFormControl(new FormControl(this['base-dn']), AuthLdapServerStatus.propInfo['base-dn']),
                'bind-dn': CustomFormControl(new FormControl(this['bind-dn']), AuthLdapServerStatus.propInfo['bind-dn']),
                'bind-password': CustomFormControl(new FormControl(this['bind-password']), AuthLdapServerStatus.propInfo['bind-password']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('server') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('server').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['result'].setValue(this['result']);
            this._formGroup.controls['message'].setValue(this['message']);
            this['server'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['base-dn'].setValue(this['base-dn']);
            this._formGroup.controls['bind-dn'].setValue(this['bind-dn']);
            this._formGroup.controls['bind-password'].setValue(this['bind-password']);
        }
    }
}

