/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthRadiusServerStatus_result,  } from './enums';
import { AuthRadiusServer, IAuthRadiusServer } from './auth-radius-server.model';

export interface IAuthRadiusServerStatus {
    'result': AuthRadiusServerStatus_result;
    'message'?: string;
    'server'?: IAuthRadiusServer;
    'nas-id'?: string;
}


export class AuthRadiusServerStatus extends BaseModel implements IAuthRadiusServerStatus {
    /** Result indicates if radius check was successful. */
    'result': AuthRadiusServerStatus_result = null;
    /** Message contains error message in case of failed check or a success message. */
    'message': string = null;
    /** RadiusServer contains the radius server configuration that was checked. */
    'server': AuthRadiusServer = null;
    /** NasID is a string identifying the NAS(API Gw) originating the Access-Request. */
    'nas-id': string = null;
    public static propInfo: { [prop in keyof IAuthRadiusServerStatus]: PropInfoItem } = {
        'result': {
            enum: AuthRadiusServerStatus_result,
            default: 'connect-success',
            description:  `Result indicates if radius check was successful.`,
            required: true,
            type: 'string'
        },
        'message': {
            description:  `Message contains error message in case of failed check or a success message.`,
            required: false,
            type: 'string'
        },
        'server': {
            description:  `RadiusServer contains the radius server configuration that was checked.`,
            required: false,
            type: 'object'
        },
        'nas-id': {
            description:  `NasID is a string identifying the NAS(API Gw) originating the Access-Request.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthRadiusServerStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthRadiusServerStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthRadiusServerStatus.propInfo[prop] != null &&
                        AuthRadiusServerStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['server'] = new AuthRadiusServer();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['result'] != null) {
            this['result'] = values['result'];
        } else if (fillDefaults && AuthRadiusServerStatus.hasDefaultValue('result')) {
            this['result'] = <AuthRadiusServerStatus_result>  AuthRadiusServerStatus.propInfo['result'].default;
        } else {
            this['result'] = null
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        } else if (fillDefaults && AuthRadiusServerStatus.hasDefaultValue('message')) {
            this['message'] = AuthRadiusServerStatus.propInfo['message'].default;
        } else {
            this['message'] = null
        }
        if (values) {
            this['server'].setValues(values['server'], fillDefaults);
        } else {
            this['server'].setValues(null, fillDefaults);
        }
        if (values && values['nas-id'] != null) {
            this['nas-id'] = values['nas-id'];
        } else if (fillDefaults && AuthRadiusServerStatus.hasDefaultValue('nas-id')) {
            this['nas-id'] = AuthRadiusServerStatus.propInfo['nas-id'].default;
        } else {
            this['nas-id'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'result': CustomFormControl(new FormControl(this['result'], [required, enumValidator(AuthRadiusServerStatus_result), ]), AuthRadiusServerStatus.propInfo['result']),
                'message': CustomFormControl(new FormControl(this['message']), AuthRadiusServerStatus.propInfo['message']),
                'server': CustomFormGroup(this['server'].$formGroup, AuthRadiusServerStatus.propInfo['server'].required),
                'nas-id': CustomFormControl(new FormControl(this['nas-id']), AuthRadiusServerStatus.propInfo['nas-id']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('server') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('server').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['result'].setValue(this['result']);
            this._formGroup.controls['message'].setValue(this['message']);
            this['server'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['nas-id'].setValue(this['nas-id']);
        }
    }
}

