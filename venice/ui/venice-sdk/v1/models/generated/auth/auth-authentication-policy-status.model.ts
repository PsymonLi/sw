/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthLdapServerStatus, IAuthLdapServerStatus } from './auth-ldap-server-status.model';
import { AuthRadiusServerStatus, IAuthRadiusServerStatus } from './auth-radius-server-status.model';

export interface IAuthAuthenticationPolicyStatus {
    'ldap-servers'?: Array<IAuthLdapServerStatus>;
    'radius-servers'?: Array<IAuthRadiusServerStatus>;
}


export class AuthAuthenticationPolicyStatus extends BaseModel implements IAuthAuthenticationPolicyStatus {
    'ldap-servers': Array<AuthLdapServerStatus> = null;
    'radius-servers': Array<AuthRadiusServerStatus> = null;
    public static propInfo: { [prop in keyof IAuthAuthenticationPolicyStatus]: PropInfoItem } = {
        'ldap-servers': {
            required: false,
            type: 'object'
        },
        'radius-servers': {
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthAuthenticationPolicyStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthAuthenticationPolicyStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthAuthenticationPolicyStatus.propInfo[prop] != null &&
                        AuthAuthenticationPolicyStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['ldap-servers'] = new Array<AuthLdapServerStatus>();
        this['radius-servers'] = new Array<AuthRadiusServerStatus>();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this.fillModelArray<AuthLdapServerStatus>(this, 'ldap-servers', values['ldap-servers'], AuthLdapServerStatus);
        } else {
            this['ldap-servers'] = [];
        }
        if (values) {
            this.fillModelArray<AuthRadiusServerStatus>(this, 'radius-servers', values['radius-servers'], AuthRadiusServerStatus);
        } else {
            this['radius-servers'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'ldap-servers': new FormArray([]),
                'radius-servers': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<AuthLdapServerStatus>('ldap-servers', this['ldap-servers'], AuthLdapServerStatus);
            // generate FormArray control elements
            this.fillFormArray<AuthRadiusServerStatus>('radius-servers', this['radius-servers'], AuthRadiusServerStatus);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('ldap-servers') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('ldap-servers').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('radius-servers') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('radius-servers').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this.fillModelArray<AuthLdapServerStatus>(this, 'ldap-servers', this['ldap-servers'], AuthLdapServerStatus);
            this.fillModelArray<AuthRadiusServerStatus>(this, 'radius-servers', this['radius-servers'], AuthRadiusServerStatus);
        }
    }
}

