/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthTLSOptions, IAuthTLSOptions } from './auth-tls-options.model';

export interface IAuthLdapServer {
    'url'?: string;
    'tls-options'?: IAuthTLSOptions;
}


export class AuthLdapServer extends BaseModel implements IAuthLdapServer {
    'url': string = null;
    'tls-options': AuthTLSOptions = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'url': {
            type: 'string'
        },
        'tls-options': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthLdapServer.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthLdapServer.propInfo[prop] != null &&
                        AuthLdapServer.propInfo[prop].default != null &&
                        AuthLdapServer.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['tls-options'] = new AuthTLSOptions();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['url'] != null) {
            this['url'] = values['url'];
        } else if (AuthLdapServer.hasDefaultValue('url')) {
            this['url'] = AuthLdapServer.propInfo['url'].default;
        }
        if (values) {
            this['tls-options'].setValues(values['tls-options']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'url': new FormControl(this['url']),
                'tls-options': this['tls-options'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['url'].setValue(this['url']);
            this['tls-options'].setFormGroupValues();
        }
    }
}

