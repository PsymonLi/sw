/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { AuthPermission, IAuthPermission } from './auth-permission.model';

export interface IAuthRoleSpec {
    'permissions'?: Array<IAuthPermission>;
}


export class AuthRoleSpec extends BaseModel implements IAuthRoleSpec {
    'permissions': Array<AuthPermission> = null;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (AuthRoleSpec.enumProperties[prop] != null &&
                        AuthRoleSpec.enumProperties[prop].default != null &&
                        AuthRoleSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['permissions'] = new Array<AuthPermission>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<AuthPermission>(this, 'permissions', values['permissions'], AuthPermission);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'permissions': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<AuthPermission>('permissions', this['permissions'], AuthPermission);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<AuthPermission>(this, 'permissions', this['permissions'], AuthPermission);
        }
    }
}

