/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthOperation, IAuthOperation } from './auth-operation.model';

export interface IAuthOperationStatus {
    'operation'?: IAuthOperation;
    'allowed'?: boolean;
    'message'?: string;
}


export class AuthOperationStatus extends BaseModel implements IAuthOperationStatus {
    /** Operation for which authorization decision is resported. */
    'operation': AuthOperation = null;
    /** Allowed indicates if Operation is authorized. */
    'allowed': boolean = null;
    /** Message reports error validating Operation. */
    'message': string = null;
    public static propInfo: { [prop in keyof IAuthOperationStatus]: PropInfoItem } = {
        'operation': {
            description:  `Operation for which authorization decision is resported.`,
            required: false,
            type: 'object'
        },
        'allowed': {
            description:  `Allowed indicates if Operation is authorized.`,
            required: false,
            type: 'boolean'
        },
        'message': {
            description:  `Message reports error validating Operation.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthOperationStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthOperationStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthOperationStatus.propInfo[prop] != null &&
                        AuthOperationStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['operation'] = new AuthOperation();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this['operation'].setValues(values['operation'], fillDefaults);
        } else {
            this['operation'].setValues(null, fillDefaults);
        }
        if (values && values['allowed'] != null) {
            this['allowed'] = values['allowed'];
        } else if (fillDefaults && AuthOperationStatus.hasDefaultValue('allowed')) {
            this['allowed'] = AuthOperationStatus.propInfo['allowed'].default;
        } else {
            this['allowed'] = null
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        } else if (fillDefaults && AuthOperationStatus.hasDefaultValue('message')) {
            this['message'] = AuthOperationStatus.propInfo['message'].default;
        } else {
            this['message'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'operation': CustomFormGroup(this['operation'].$formGroup, AuthOperationStatus.propInfo['operation'].required),
                'allowed': CustomFormControl(new FormControl(this['allowed']), AuthOperationStatus.propInfo['allowed']),
                'message': CustomFormControl(new FormControl(this['message']), AuthOperationStatus.propInfo['message']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('operation') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('operation').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['operation'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['allowed'].setValue(this['allowed']);
            this._formGroup.controls['message'].setValue(this['message']);
        }
    }
}

