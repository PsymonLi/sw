/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { AuthRadiusServer, IAuthRadiusServer } from './auth-radius-server.model';

export interface IAuthRadius {
    'enabled'?: boolean;
    'nas-id'?: string;
    'servers'?: Array<IAuthRadiusServer>;
}


export class AuthRadius extends BaseModel implements IAuthRadius {
    'enabled': boolean;
    'nas-id': string;
    'servers': Array<AuthRadiusServer>;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (AuthRadius.enumProperties[prop] != null &&
                        AuthRadius.enumProperties[prop].default != null &&
                        AuthRadius.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['servers'] = new Array<AuthRadiusServer>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['enabled'] != null) {
            this['enabled'] = values['enabled'];
        }
        if (values && values['nas-id'] != null) {
            this['nas-id'] = values['nas-id'];
        }
        if (values) {
            this.fillModelArray<AuthRadiusServer>(this, 'servers', values['servers'], AuthRadiusServer);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'enabled': new FormControl(this['enabled']),
                'nas-id': new FormControl(this['nas-id']),
                'servers': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<AuthRadiusServer>('servers', this['servers'], AuthRadiusServer);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['enabled'].setValue(this['enabled']);
            this._formGroup.controls['nas-id'].setValue(this['nas-id']);
            this.fillModelArray<AuthRadiusServer>(this, 'servers', this['servers'], AuthRadiusServer);
        }
    }
}

