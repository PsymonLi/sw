/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IAuthUserStatus {
    'roles'?: Array<string>;
    'user-groups'?: Array<string>;
    'last-successful-login'?: Date;
}


export class AuthUserStatus extends BaseModel implements IAuthUserStatus {
    'roles': Array<string>;
    'user-groups': Array<string>;
    'last-successful-login': Date;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (AuthUserStatus.enumProperties[prop] != null &&
                        AuthUserStatus.enumProperties[prop].default != null &&
                        AuthUserStatus.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['roles'] = new Array<string>();
        this['user-groups'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<string>(this, 'roles', values['roles']);
        }
        if (values) {
            this.fillModelArray<string>(this, 'user-groups', values['user-groups']);
        }
        if (values && values['last-successful-login'] != null) {
            this['last-successful-login'] = values['last-successful-login'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'roles': new FormArray([]),
                'user-groups': new FormArray([]),
                'last-successful-login': new FormControl(this['last-successful-login']),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('roles', this['roles']);
            // generate FormArray control elements
            this.fillFormArray<string>('user-groups', this['user-groups']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<string>(this, 'roles', this['roles']);
            this.fillModelArray<string>(this, 'user-groups', this['user-groups']);
            this._formGroup.controls['last-successful-login'].setValue(this['last-successful-login']);
        }
    }
}

