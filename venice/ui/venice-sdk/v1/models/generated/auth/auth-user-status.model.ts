/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { AuthUserStatus_authenticators,  AuthUserStatus_authenticators_uihint  } from './enums';
import { AuthOperationStatus, IAuthOperationStatus } from './auth-operation-status.model';

export interface IAuthUserStatus {
    'roles'?: Array<string>;
    'user-groups'?: Array<string>;
    'last-login'?: Date;
    'authenticators': Array<AuthUserStatus_authenticators>;
    'last-password-change'?: Date;
    'access-review'?: Array<IAuthOperationStatus>;
}


export class AuthUserStatus extends BaseModel implements IAuthUserStatus {
    'roles': Array<string> = null;
    'user-groups': Array<string> = null;
    'last-login': Date = null;
    'authenticators': Array<AuthUserStatus_authenticators> = null;
    'last-password-change': Date = null;
    'access-review': Array<AuthOperationStatus> = null;
    public static propInfo: { [prop in keyof IAuthUserStatus]: PropInfoItem } = {
        'roles': {
            required: false,
            type: 'Array<string>'
        },
        'user-groups': {
            required: false,
            type: 'Array<string>'
        },
        'last-login': {
            required: false,
            type: 'Date'
        },
        'authenticators': {
            enum: AuthUserStatus_authenticators_uihint,
            default: 'local',
            required: true,
            type: 'Array<string>'
        },
        'last-password-change': {
            required: false,
            type: 'Date'
        },
        'access-review': {
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthUserStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthUserStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthUserStatus.propInfo[prop] != null &&
                        AuthUserStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['roles'] = new Array<string>();
        this['user-groups'] = new Array<string>();
        this['authenticators'] = new Array<AuthUserStatus_authenticators>();
        this['access-review'] = new Array<AuthOperationStatus>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['roles'] != null) {
            this['roles'] = values['roles'];
        } else if (fillDefaults && AuthUserStatus.hasDefaultValue('roles')) {
            this['roles'] = [ AuthUserStatus.propInfo['roles'].default];
        } else {
            this['roles'] = [];
        }
        if (values && values['user-groups'] != null) {
            this['user-groups'] = values['user-groups'];
        } else if (fillDefaults && AuthUserStatus.hasDefaultValue('user-groups')) {
            this['user-groups'] = [ AuthUserStatus.propInfo['user-groups'].default];
        } else {
            this['user-groups'] = [];
        }
        if (values && values['last-login'] != null) {
            this['last-login'] = values['last-login'];
        } else if (fillDefaults && AuthUserStatus.hasDefaultValue('last-login')) {
            this['last-login'] = AuthUserStatus.propInfo['last-login'].default;
        } else {
            this['last-login'] = null
        }
        if (values && values['authenticators'] != null) {
            this['authenticators'] = values['authenticators'];
        } else if (fillDefaults && AuthUserStatus.hasDefaultValue('authenticators')) {
            this['authenticators'] = [ AuthUserStatus.propInfo['authenticators'].default];
        } else {
            this['authenticators'] = [];
        }
        if (values && values['last-password-change'] != null) {
            this['last-password-change'] = values['last-password-change'];
        } else if (fillDefaults && AuthUserStatus.hasDefaultValue('last-password-change')) {
            this['last-password-change'] = AuthUserStatus.propInfo['last-password-change'].default;
        } else {
            this['last-password-change'] = null
        }
        if (values) {
            this.fillModelArray<AuthOperationStatus>(this, 'access-review', values['access-review'], AuthOperationStatus);
        } else {
            this['access-review'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'roles': CustomFormControl(new FormControl(this['roles']), AuthUserStatus.propInfo['roles']),
                'user-groups': CustomFormControl(new FormControl(this['user-groups']), AuthUserStatus.propInfo['user-groups']),
                'last-login': CustomFormControl(new FormControl(this['last-login']), AuthUserStatus.propInfo['last-login']),
                'authenticators': CustomFormControl(new FormControl(this['authenticators']), AuthUserStatus.propInfo['authenticators']),
                'last-password-change': CustomFormControl(new FormControl(this['last-password-change']), AuthUserStatus.propInfo['last-password-change']),
                'access-review': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<AuthOperationStatus>('access-review', this['access-review'], AuthOperationStatus);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('access-review') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('access-review').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['roles'].setValue(this['roles']);
            this._formGroup.controls['user-groups'].setValue(this['user-groups']);
            this._formGroup.controls['last-login'].setValue(this['last-login']);
            this._formGroup.controls['authenticators'].setValue(this['authenticators']);
            this._formGroup.controls['last-password-change'].setValue(this['last-password-change']);
            this.fillModelArray<AuthOperationStatus>(this, 'access-review', this['access-review'], AuthOperationStatus);
        }
    }
}

