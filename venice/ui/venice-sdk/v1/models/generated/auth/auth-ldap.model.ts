/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthLdapAttributeMapping, IAuthLdapAttributeMapping } from './auth-ldap-attribute-mapping.model';
import { AuthLdapServer, IAuthLdapServer } from './auth-ldap-server.model';

export interface IAuthLdap {
    'enabled'?: boolean;
    'base-dn'?: string;
    'bind-dn'?: string;
    'bind-password'?: string;
    'attribute-mapping'?: IAuthLdapAttributeMapping;
    'servers'?: Array<IAuthLdapServer>;
}


export class AuthLdap extends BaseModel implements IAuthLdap {
    'enabled': boolean = null;
    'base-dn': string = null;
    'bind-dn': string = null;
    'bind-password': string = null;
    'attribute-mapping': AuthLdapAttributeMapping = null;
    'servers': Array<AuthLdapServer> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'enabled': {
            type: 'boolean'
        },
        'base-dn': {
            type: 'string'
        },
        'bind-dn': {
            type: 'string'
        },
        'bind-password': {
            type: 'string'
        },
        'attribute-mapping': {
            type: 'object'
        },
        'servers': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthLdap.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthLdap.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthLdap.propInfo[prop] != null &&
                        AuthLdap.propInfo[prop].default != null &&
                        AuthLdap.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['attribute-mapping'] = new AuthLdapAttributeMapping();
        this['servers'] = new Array<AuthLdapServer>();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['enabled'] != null) {
            this['enabled'] = values['enabled'];
        } else if (fillDefaults && AuthLdap.hasDefaultValue('enabled')) {
            this['enabled'] = AuthLdap.propInfo['enabled'].default;
        }
        if (values && values['base-dn'] != null) {
            this['base-dn'] = values['base-dn'];
        } else if (fillDefaults && AuthLdap.hasDefaultValue('base-dn')) {
            this['base-dn'] = AuthLdap.propInfo['base-dn'].default;
        }
        if (values && values['bind-dn'] != null) {
            this['bind-dn'] = values['bind-dn'];
        } else if (fillDefaults && AuthLdap.hasDefaultValue('bind-dn')) {
            this['bind-dn'] = AuthLdap.propInfo['bind-dn'].default;
        }
        if (values && values['bind-password'] != null) {
            this['bind-password'] = values['bind-password'];
        } else if (fillDefaults && AuthLdap.hasDefaultValue('bind-password')) {
            this['bind-password'] = AuthLdap.propInfo['bind-password'].default;
        }
        if (values) {
            this['attribute-mapping'].setValues(values['attribute-mapping']);
        }
        if (values) {
            this.fillModelArray<AuthLdapServer>(this, 'servers', values['servers'], AuthLdapServer);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'enabled': new FormControl(this['enabled']),
                'base-dn': new FormControl(this['base-dn']),
                'bind-dn': new FormControl(this['bind-dn']),
                'bind-password': new FormControl(this['bind-password']),
                'attribute-mapping': this['attribute-mapping'].$formGroup,
                'servers': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<AuthLdapServer>('servers', this['servers'], AuthLdapServer);
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['enabled'].setValue(this['enabled']);
            this._formGroup.controls['base-dn'].setValue(this['base-dn']);
            this._formGroup.controls['bind-dn'].setValue(this['bind-dn']);
            this._formGroup.controls['bind-password'].setValue(this['bind-password']);
            this['attribute-mapping'].setFormGroupValuesToBeModelValues();
            this.fillModelArray<AuthLdapServer>(this, 'servers', this['servers'], AuthLdapServer);
        }
    }
}

