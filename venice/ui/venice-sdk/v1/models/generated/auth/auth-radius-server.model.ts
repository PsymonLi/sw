/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthRadiusServer_auth_method,  } from './enums';

export interface IAuthRadiusServer {
    'url'?: string;
    'secret'?: string;
    'auth-method': AuthRadiusServer_auth_method;
    'trusted-certs'?: string;
}


export class AuthRadiusServer extends BaseModel implements IAuthRadiusServer {
    'url': string = null;
    'secret': string = null;
    'auth-method': AuthRadiusServer_auth_method = null;
    'trusted-certs': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'url': {
            required: false,
            type: 'string'
        },
        'secret': {
            required: false,
            type: 'string'
        },
        'auth-method': {
            enum: AuthRadiusServer_auth_method,
            default: 'PAP',
            required: true,
            type: 'string'
        },
        'trusted-certs': {
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthRadiusServer.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthRadiusServer.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthRadiusServer.propInfo[prop] != null &&
                        AuthRadiusServer.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['url'] != null) {
            this['url'] = values['url'];
        } else if (fillDefaults && AuthRadiusServer.hasDefaultValue('url')) {
            this['url'] = AuthRadiusServer.propInfo['url'].default;
        } else {
            this['url'] = null
        }
        if (values && values['secret'] != null) {
            this['secret'] = values['secret'];
        } else if (fillDefaults && AuthRadiusServer.hasDefaultValue('secret')) {
            this['secret'] = AuthRadiusServer.propInfo['secret'].default;
        } else {
            this['secret'] = null
        }
        if (values && values['auth-method'] != null) {
            this['auth-method'] = values['auth-method'];
        } else if (fillDefaults && AuthRadiusServer.hasDefaultValue('auth-method')) {
            this['auth-method'] = <AuthRadiusServer_auth_method>  AuthRadiusServer.propInfo['auth-method'].default;
        } else {
            this['auth-method'] = null
        }
        if (values && values['trusted-certs'] != null) {
            this['trusted-certs'] = values['trusted-certs'];
        } else if (fillDefaults && AuthRadiusServer.hasDefaultValue('trusted-certs')) {
            this['trusted-certs'] = AuthRadiusServer.propInfo['trusted-certs'].default;
        } else {
            this['trusted-certs'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'url': CustomFormControl(new FormControl(this['url']), AuthRadiusServer.propInfo['url']),
                'secret': CustomFormControl(new FormControl(this['secret']), AuthRadiusServer.propInfo['secret']),
                'auth-method': CustomFormControl(new FormControl(this['auth-method'], [required, enumValidator(AuthRadiusServer_auth_method), ]), AuthRadiusServer.propInfo['auth-method']),
                'trusted-certs': CustomFormControl(new FormControl(this['trusted-certs']), AuthRadiusServer.propInfo['trusted-certs']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['url'].setValue(this['url']);
            this._formGroup.controls['secret'].setValue(this['secret']);
            this._formGroup.controls['auth-method'].setValue(this['auth-method']);
            this._formGroup.controls['trusted-certs'].setValue(this['trusted-certs']);
        }
    }
}

