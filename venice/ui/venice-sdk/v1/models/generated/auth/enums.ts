/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum ApiListWatchOptions_sort_order {
    'None' = "None",
    'ByName' = "ByName",
    'ByNameReverse' = "ByNameReverse",
    'ByVersion' = "ByVersion",
    'ByVersionReverse' = "ByVersionReverse",
    'ByCreationTime' = "ByCreationTime",
    'ByCreationTimeReverse' = "ByCreationTimeReverse",
    'ByModTime' = "ByModTime",
    'ByModTimeReverse' = "ByModTimeReverse",
}

export enum AuthAuthenticators_authenticator_order {
    'LOCAL' = "LOCAL",
    'LDAP' = "LDAP",
    'RADIUS' = "RADIUS",
}

export enum AuthLdapServerStatus_result {
    'Connect_Success' = "Connect_Success",
    'Connect_Failure' = "Connect_Failure",
    'Bind_Success' = "Bind_Success",
    'Bind_Failure' = "Bind_Failure",
}

export enum AuthOperation_action {
    'AllActions' = "AllActions",
    'Create' = "Create",
    'Read' = "Read",
    'Update' = "Update",
    'Delete' = "Delete",
    'Commit' = "Commit",
    'Clear' = "Clear",
}

export enum AuthPermission_actions {
    'AllActions' = "AllActions",
    'Create' = "Create",
    'Read' = "Read",
    'Update' = "Update",
    'Delete' = "Delete",
    'Commit' = "Commit",
    'Clear' = "Clear",
}

export enum AuthRadiusServer_auth_method {
    'PAP' = "PAP",
    'PEAP_MSCHAPv2' = "PEAP_MSCHAPv2",
    'EAP_TTLS_PAP' = "EAP_TTLS_PAP",
}

export enum AuthRadiusServerStatus_result {
    'Connect_Success' = "Connect_Success",
    'Connect_Failure' = "Connect_Failure",
}

export enum AuthUserSpec_type {
    'Local' = "Local",
    'External' = "External",
}

export enum AuthUserStatus_authenticators {
    'LOCAL' = "LOCAL",
    'LDAP' = "LDAP",
    'RADIUS' = "RADIUS",
}


export enum ApiListWatchOptions_sort_order_uihint {
    'ByCreationTime' = "By Creation Time",
    'ByCreationTimeReverse' = "By Creation Time Reverse",
    'ByModTime' = "By Modification Time",
    'ByModTimeReverse' = "By Modification Time Reverse",
    'ByName' = "By Name",
    'ByNameReverse' = "By Name Reverse",
    'ByVersion' = "By Version",
    'ByVersionReverse' = "By Version Reverse",
    'None' = "None",
}

export enum AuthAuthenticators_authenticator_order_uihint {
    'LOCAL' = "Local",
}

export enum AuthOperation_action_uihint {
    'AllActions' = "All Actions",
    'Clear' = "Clear Config",
    'Commit' = "Commit Config",
    'Create' = "Create",
    'Delete' = "Delete",
    'Read' = "Read",
    'Update' = "Update",
}

export enum AuthPermission_actions_uihint {
    'AllActions' = "All Actions",
    'Clear' = "Clear Config",
    'Commit' = "Commit Config",
    'Create' = "Create",
    'Delete' = "Delete",
    'Read' = "Read",
    'Update' = "Update",
}

export enum AuthUserSpec_type_uihint {
    'External' = "External",
    'Local' = "Local",
}

export enum AuthUserStatus_authenticators_uihint {
    'LOCAL' = "Local",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    ApiListWatchOptions_sort_order = ApiListWatchOptions_sort_order;
    AuthAuthenticators_authenticator_order = AuthAuthenticators_authenticator_order;
    AuthLdapServerStatus_result = AuthLdapServerStatus_result;
    AuthOperation_action = AuthOperation_action;
    AuthPermission_actions = AuthPermission_actions;
    AuthRadiusServer_auth_method = AuthRadiusServer_auth_method;
    AuthRadiusServerStatus_result = AuthRadiusServerStatus_result;
    AuthUserSpec_type = AuthUserSpec_type;
    AuthUserStatus_authenticators = AuthUserStatus_authenticators;

    ApiListWatchOptions_sort_order_uihint = ApiListWatchOptions_sort_order_uihint;
    AuthAuthenticators_authenticator_order_uihint = AuthAuthenticators_authenticator_order_uihint;
    AuthOperation_action_uihint = AuthOperation_action_uihint;
    AuthPermission_actions_uihint = AuthPermission_actions_uihint;
    AuthUserSpec_type_uihint = AuthUserSpec_type_uihint;
    AuthUserStatus_authenticators_uihint = AuthUserStatus_authenticators_uihint;
}
