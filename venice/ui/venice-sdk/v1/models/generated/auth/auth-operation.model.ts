/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuthResource, IAuthResource } from './auth-resource.model';
import { AuthOperation_action,  AuthOperation_action_uihint  } from './enums';

export interface IAuthOperation {
    'resource'?: IAuthResource;
    'action': AuthOperation_action;
}


export class AuthOperation extends BaseModel implements IAuthOperation {
    'resource': AuthResource = null;
    'action': AuthOperation_action = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'resource': {
            required: false,
            type: 'object'
        },
        'action': {
            enum: AuthOperation_action_uihint,
            default: 'all-actions',
            required: true,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuthOperation.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuthOperation.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuthOperation.propInfo[prop] != null &&
                        AuthOperation.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['resource'] = new AuthResource();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this['resource'].setValues(values['resource'], fillDefaults);
        } else {
            this['resource'].setValues(null, fillDefaults);
        }
        if (values && values['action'] != null) {
            this['action'] = values['action'];
        } else if (fillDefaults && AuthOperation.hasDefaultValue('action')) {
            this['action'] = <AuthOperation_action>  AuthOperation.propInfo['action'].default;
        } else {
            this['action'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'resource': CustomFormGroup(this['resource'].$formGroup, AuthOperation.propInfo['resource'].required),
                'action': CustomFormControl(new FormControl(this['action'], [required, enumValidator(AuthOperation_action), ]), AuthOperation.propInfo['action']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('resource') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('resource').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['resource'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['action'].setValue(this['action']);
        }
    }
}

