/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IAuthLdapAttributeMapping {
    'user'?: string;
    'user-object-class'?: string;
    'tenant'?: string;
    'group'?: string;
    'group-object-class'?: string;
    'email'?: string;
    'fullname'?: string;
}


export class AuthLdapAttributeMapping extends BaseModel implements IAuthLdapAttributeMapping {
    'user': string = null;
    'user-object-class': string = null;
    'tenant': string = null;
    'group': string = null;
    'group-object-class': string = null;
    'email': string = null;
    'fullname': string = null;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (AuthLdapAttributeMapping.enumProperties[prop] != null &&
                        AuthLdapAttributeMapping.enumProperties[prop].default != null &&
                        AuthLdapAttributeMapping.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['user'] != null) {
            this['user'] = values['user'];
        }
        if (values && values['user-object-class'] != null) {
            this['user-object-class'] = values['user-object-class'];
        }
        if (values && values['tenant'] != null) {
            this['tenant'] = values['tenant'];
        }
        if (values && values['group'] != null) {
            this['group'] = values['group'];
        }
        if (values && values['group-object-class'] != null) {
            this['group-object-class'] = values['group-object-class'];
        }
        if (values && values['email'] != null) {
            this['email'] = values['email'];
        }
        if (values && values['fullname'] != null) {
            this['fullname'] = values['fullname'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'user': new FormControl(this['user']),
                'user-object-class': new FormControl(this['user-object-class']),
                'tenant': new FormControl(this['tenant']),
                'group': new FormControl(this['group']),
                'group-object-class': new FormControl(this['group-object-class']),
                'email': new FormControl(this['email']),
                'fullname': new FormControl(this['fullname']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['user'].setValue(this['user']);
            this._formGroup.controls['user-object-class'].setValue(this['user-object-class']);
            this._formGroup.controls['tenant'].setValue(this['tenant']);
            this._formGroup.controls['group'].setValue(this['group']);
            this._formGroup.controls['group-object-class'].setValue(this['group-object-class']);
            this._formGroup.controls['email'].setValue(this['email']);
            this._formGroup.controls['fullname'].setValue(this['fullname']);
        }
    }
}

