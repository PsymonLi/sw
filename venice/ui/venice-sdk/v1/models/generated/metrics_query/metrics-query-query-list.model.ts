/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { Metrics_queryQuerySpec, IMetrics_queryQuerySpec } from './metrics-query-query-spec.model';

export interface IMetrics_queryQueryList {
    'tenant'?: string;
    'namespace'?: string;
    'queries'?: Array<IMetrics_queryQuerySpec>;
}


export class Metrics_queryQueryList extends BaseModel implements IMetrics_queryQueryList {
    'tenant': string = null;
    'namespace': string = null;
    'queries': Array<Metrics_queryQuerySpec> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'tenant': {
            type: 'string'
        },
        'namespace': {
            type: 'string'
        },
        'queries': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return Metrics_queryQueryList.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (Metrics_queryQueryList.propInfo[prop] != null &&
                        Metrics_queryQueryList.propInfo[prop].default != null &&
                        Metrics_queryQueryList.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['queries'] = new Array<Metrics_queryQuerySpec>();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['tenant'] != null) {
            this['tenant'] = values['tenant'];
        } else if (fillDefaults && Metrics_queryQueryList.hasDefaultValue('tenant')) {
            this['tenant'] = Metrics_queryQueryList.propInfo['tenant'].default;
        }
        if (values && values['namespace'] != null) {
            this['namespace'] = values['namespace'];
        } else if (fillDefaults && Metrics_queryQueryList.hasDefaultValue('namespace')) {
            this['namespace'] = Metrics_queryQueryList.propInfo['namespace'].default;
        }
        if (values) {
            this.fillModelArray<Metrics_queryQuerySpec>(this, 'queries', values['queries'], Metrics_queryQuerySpec);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'tenant': new FormControl(this['tenant']),
                'namespace': new FormControl(this['namespace']),
                'queries': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<Metrics_queryQuerySpec>('queries', this['queries'], Metrics_queryQuerySpec);
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['tenant'].setValue(this['tenant']);
            this._formGroup.controls['namespace'].setValue(this['namespace']);
            this.fillModelArray<Metrics_queryQuerySpec>(this, 'queries', this['queries'], Metrics_queryQuerySpec);
        }
    }
}

