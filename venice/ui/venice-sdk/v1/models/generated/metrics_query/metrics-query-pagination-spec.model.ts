/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IMetrics_queryPaginationSpec {
    'offset'?: number;
    'count'?: number;
}


export class Metrics_queryPaginationSpec extends BaseModel implements IMetrics_queryPaginationSpec {
    'offset': number;
    'count': number;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (Metrics_queryPaginationSpec.enumProperties[prop] != null &&
                        Metrics_queryPaginationSpec.enumProperties[prop].default != null &&
                        Metrics_queryPaginationSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['offset'] != null) {
            this['offset'] = values['offset'];
        }
        if (values && values['count'] != null) {
            this['count'] = values['count'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'offset': new FormControl(this['offset']),
                'count': new FormControl(this['count']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['offset'].setValue(this['offset']);
            this._formGroup.controls['count'].setValue(this['count']);
        }
    }
}

