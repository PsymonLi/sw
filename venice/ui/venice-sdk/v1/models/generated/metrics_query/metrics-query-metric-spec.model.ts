/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { LabelsSelector, ILabelsSelector } from './labels-selector.model';
import { Metrics_queryAggregatorFunction, IMetrics_queryAggregatorFunction } from './metrics-query-aggregator-function.model';
import { Metrics_queryFilterSpec, IMetrics_queryFilterSpec } from './metrics-query-filter-spec.model';

export interface IMetrics_queryMetricSpec {
    'tags'?: ILabelsSelector;
    'fields'?: Array<string>;
    'functions'?: Array<IMetrics_queryAggregatorFunction>;
    'filter'?: IMetrics_queryFilterSpec;
}


export class Metrics_queryMetricSpec extends BaseModel implements IMetrics_queryMetricSpec {
    /** Tags select a metric based on tags attached to the metric. */
    'tags': LabelsSelector = null;
    'fields': Array<string> = null;
    'functions': Array<Metrics_queryAggregatorFunction> = null;
    'filter': Metrics_queryFilterSpec = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'tags': {
            description:  'Tags select a metric based on tags attached to the metric.',
            type: 'object'
        },
        'fields': {
            type: 'Array<string>'
        },
        'functions': {
            type: 'object'
        },
        'filter': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return Metrics_queryMetricSpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (Metrics_queryMetricSpec.propInfo[prop] != null &&
                        Metrics_queryMetricSpec.propInfo[prop].default != null &&
                        Metrics_queryMetricSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['tags'] = new LabelsSelector();
        this['fields'] = new Array<string>();
        this['functions'] = new Array<Metrics_queryAggregatorFunction>();
        this['filter'] = new Metrics_queryFilterSpec();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['tags'].setValues(values['tags']);
        }
        if (values) {
            this.fillModelArray<string>(this, 'fields', values['fields']);
        }
        if (values) {
            this.fillModelArray<Metrics_queryAggregatorFunction>(this, 'functions', values['functions'], Metrics_queryAggregatorFunction);
        }
        if (values) {
            this['filter'].setValues(values['filter']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'tags': this['tags'].$formGroup,
                'fields': new FormArray([]),
                'functions': new FormArray([]),
                'filter': this['filter'].$formGroup,
            });
            // generate FormArray control elements
            this.fillFormArray<string>('fields', this['fields']);
            // generate FormArray control elements
            this.fillFormArray<Metrics_queryAggregatorFunction>('functions', this['functions'], Metrics_queryAggregatorFunction);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this['tags'].setFormGroupValues();
            this.fillModelArray<string>(this, 'fields', this['fields']);
            this.fillModelArray<Metrics_queryAggregatorFunction>(this, 'functions', this['functions'], Metrics_queryAggregatorFunction);
            this['filter'].setFormGroupValues();
        }
    }
}

