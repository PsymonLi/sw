/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { LabelsSelector, ILabelsSelector } from './labels-selector.model';
import { Metrics_queryMetricSpec_function,  } from './enums';

export interface IMetrics_queryMetricSpec {
    'tags'?: ILabelsSelector;
    'fields'?: Array<string>;
    'function'?: Metrics_queryMetricSpec_function;
}


export class Metrics_queryMetricSpec extends BaseModel implements IMetrics_queryMetricSpec {
    /** Tags select a metric based on tags attached to the metric. */
    'tags': LabelsSelector = null;
    'fields': Array<string> = null;
    'function': Metrics_queryMetricSpec_function = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'tags': {
            description:  'Tags select a metric based on tags attached to the metric.',
            type: 'object'
        },
        'fields': {
            type: 'Array<string>'
        },
        'function': {
            enum: Metrics_queryMetricSpec_function,
            default: 'NONE',
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return Metrics_queryMetricSpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (Metrics_queryMetricSpec.propInfo[prop] != null &&
                        Metrics_queryMetricSpec.propInfo[prop].default != null &&
                        Metrics_queryMetricSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['tags'] = new LabelsSelector();
        this['fields'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['tags'].setValues(values['tags']);
        }
        if (values) {
            this.fillModelArray<string>(this, 'fields', values['fields']);
        }
        if (values && values['function'] != null) {
            this['function'] = values['function'];
        } else if (Metrics_queryMetricSpec.hasDefaultValue('function')) {
            this['function'] = <Metrics_queryMetricSpec_function>  Metrics_queryMetricSpec.propInfo['function'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'tags': this['tags'].$formGroup,
                'fields': new FormArray([]),
                'function': new FormControl(this['function'], [enumValidator(Metrics_queryMetricSpec_function), ]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('fields', this['fields']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this['tags'].setFormGroupValues();
            this.fillModelArray<string>(this, 'fields', this['fields']);
            this._formGroup.controls['function'].setValue(this['function']);
        }
    }
}

