/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';


export interface IMetrics_queryTimeRange {
    'begin'?: Date;
    'end'?: Date;
}


export class Metrics_queryTimeRange extends BaseModel implements IMetrics_queryTimeRange {
    'begin': Date = null;
    'end': Date = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'begin': {
            type: 'Date'
                    },
        'end': {
            type: 'Date'
                    },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return Metrics_queryTimeRange.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (Metrics_queryTimeRange.propInfo[prop] != null &&
                        Metrics_queryTimeRange.propInfo[prop].default != null &&
                        Metrics_queryTimeRange.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['begin'] != null) {
            this['begin'] = values['begin'];
        } else if (Metrics_queryTimeRange.hasDefaultValue('begin')) {
            this['begin'] = Metrics_queryTimeRange.propInfo['begin'].default;
        }
        if (values && values['end'] != null) {
            this['end'] = values['end'];
        } else if (Metrics_queryTimeRange.hasDefaultValue('end')) {
            this['end'] = Metrics_queryTimeRange.propInfo['end'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'begin': new FormControl(this['begin']),
                'end': new FormControl(this['end']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['begin'].setValue(this['begin']);
            this._formGroup.controls['end'].setValue(this['end']);
        }
    }
}

