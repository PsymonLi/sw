/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { ApiExternalCred, IApiExternalCred } from './api-external-cred.model';

export interface IApiExportConfig {
    'destination'?: string;
    'transport'?: string;
    'credentials'?: IApiExternalCred;
}


export class ApiExportConfig extends BaseModel implements IApiExportConfig {
    'destination': string;
    'transport': string;
    'credentials': ApiExternalCred;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (ApiExportConfig.enumProperties[prop] != null &&
                        ApiExportConfig.enumProperties[prop].default != null &&
                        ApiExportConfig.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['credentials'] = new ApiExternalCred();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['destination'] != null) {
            this['destination'] = values['destination'];
        }
        if (values && values['transport'] != null) {
            this['transport'] = values['transport'];
        }
        if (values) {
            this['credentials'].setValues(values['credentials']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'destination': new FormControl(this['destination']),
                'transport': new FormControl(this['transport']),
                'credentials': this['credentials'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['destination'].setValue(this['destination']);
            this._formGroup.controls['transport'].setValue(this['transport']);
            this['credentials'].setFormGroupValues();
        }
    }
}

