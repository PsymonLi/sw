/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { MonitoringExportConfig, IMonitoringExportConfig } from './monitoring-export-config.model';
import { MonitoringFwlogExport_format,  MonitoringFwlogExport_format_uihint  } from './enums';
import { MonitoringFwlogExport_export_filter,  MonitoringFwlogExport_export_filter_uihint  } from './enums';
import { MonitoringSyslogExportConfig, IMonitoringSyslogExportConfig } from './monitoring-syslog-export-config.model';

export interface IMonitoringFwlogExport {
    'targets'?: Array<IMonitoringExportConfig>;
    'format'?: MonitoringFwlogExport_format;
    'export-filter'?: Array<MonitoringFwlogExport_export_filter>;
    'syslog-config'?: IMonitoringSyslogExportConfig;
}


export class MonitoringFwlogExport extends BaseModel implements IMonitoringFwlogExport {
    'targets': Array<MonitoringExportConfig> = null;
    'format': MonitoringFwlogExport_format = null;
    'export-filter': Array<MonitoringFwlogExport_export_filter> = null;
    'syslog-config': MonitoringSyslogExportConfig = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'targets': {
            type: 'object'
        },
        'format': {
            enum: MonitoringFwlogExport_format_uihint,
            default: 'SYSLOG_BSD',
            type: 'string'
        },
        'export-filter': {
            enum: MonitoringFwlogExport_export_filter_uihint,
            default: 'FWLOG_ALL',
            type: 'Array<string>'
        },
        'syslog-config': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringFwlogExport.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringFwlogExport.propInfo[prop] != null &&
                        MonitoringFwlogExport.propInfo[prop].default != null &&
                        MonitoringFwlogExport.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['targets'] = new Array<MonitoringExportConfig>();
        this['export-filter'] = new Array<MonitoringFwlogExport_export_filter>();
        this['syslog-config'] = new MonitoringSyslogExportConfig();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<MonitoringExportConfig>(this, 'targets', values['targets'], MonitoringExportConfig);
        }
        if (values && values['format'] != null) {
            this['format'] = values['format'];
        } else if (MonitoringFwlogExport.hasDefaultValue('format')) {
            this['format'] = <MonitoringFwlogExport_format>  MonitoringFwlogExport.propInfo['format'].default;
        }
        if (values) {
            this.fillModelArray<MonitoringFwlogExport_export_filter>(this, 'export-filter', values['export-filter']);
        }
        if (values) {
            this['syslog-config'].setValues(values['syslog-config']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'targets': new FormArray([]),
                'format': new FormControl(this['format'], [enumValidator(MonitoringFwlogExport_format), ]),
                'export-filter': new FormArray([]),
                'syslog-config': this['syslog-config'].$formGroup,
            });
            // generate FormArray control elements
            this.fillFormArray<MonitoringExportConfig>('targets', this['targets'], MonitoringExportConfig);
            // generate FormArray control elements
            this.fillFormArray<MonitoringFwlogExport_export_filter>('export-filter', this['export-filter']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<MonitoringExportConfig>(this, 'targets', this['targets'], MonitoringExportConfig);
            this._formGroup.controls['format'].setValue(this['format']);
            this.fillModelArray<MonitoringFwlogExport_export_filter>(this, 'export-filter', this['export-filter']);
            this['syslog-config'].setFormGroupValues();
        }
    }
}

