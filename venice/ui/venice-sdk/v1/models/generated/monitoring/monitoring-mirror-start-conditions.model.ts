/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IMonitoringMirrorStartConditions {
    'schedule-time'?: Date;
    '_ui'?: any;
}


export class MonitoringMirrorStartConditions extends BaseModel implements IMonitoringMirrorStartConditions {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'schedule-time': Date = null;
    public static propInfo: { [prop in keyof IMonitoringMirrorStartConditions]: PropInfoItem } = {
        'schedule-time': {
            required: false,
            type: 'Date'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringMirrorStartConditions.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringMirrorStartConditions.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringMirrorStartConditions.propInfo[prop] != null &&
                        MonitoringMirrorStartConditions.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['schedule-time'] != null) {
            this['schedule-time'] = values['schedule-time'];
        } else if (fillDefaults && MonitoringMirrorStartConditions.hasDefaultValue('schedule-time')) {
            this['schedule-time'] = MonitoringMirrorStartConditions.propInfo['schedule-time'].default;
        } else {
            this['schedule-time'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'schedule-time': CustomFormControl(new FormControl(this['schedule-time']), MonitoringMirrorStartConditions.propInfo['schedule-time']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['schedule-time'].setValue(this['schedule-time']);
        }
    }
}

