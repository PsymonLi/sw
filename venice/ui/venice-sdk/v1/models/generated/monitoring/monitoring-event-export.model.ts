/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { MonitoringEventExport_format,  MonitoringEventExport_format_uihint  } from './enums';
import { FieldsSelector, IFieldsSelector } from './fields-selector.model';
import { MonitoringExportConfig, IMonitoringExportConfig } from './monitoring-export-config.model';
import { MonitoringSyslogExportConfig, IMonitoringSyslogExportConfig } from './monitoring-syslog-export-config.model';

export interface IMonitoringEventExport {
    'format'?: MonitoringEventExport_format;
    'selector'?: IFieldsSelector;
    'target'?: IMonitoringExportConfig;
    'syslog-config'?: IMonitoringSyslogExportConfig;
}


export class MonitoringEventExport extends BaseModel implements IMonitoringEventExport {
    'format': MonitoringEventExport_format = null;
    'selector': FieldsSelector = null;
    'target': MonitoringExportConfig = null;
    'syslog-config': MonitoringSyslogExportConfig = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'format': {
            enum: MonitoringEventExport_format_uihint,
            default: 'SYSLOG_BSD',
            type: 'string'
        },
        'selector': {
            type: 'object'
        },
        'target': {
            type: 'object'
        },
        'syslog-config': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringEventExport.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringEventExport.propInfo[prop] != null &&
                        MonitoringEventExport.propInfo[prop].default != null &&
                        MonitoringEventExport.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['selector'] = new FieldsSelector();
        this['target'] = new MonitoringExportConfig();
        this['syslog-config'] = new MonitoringSyslogExportConfig();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['format'] != null) {
            this['format'] = values['format'];
        } else if (fillDefaults && MonitoringEventExport.hasDefaultValue('format')) {
            this['format'] = <MonitoringEventExport_format>  MonitoringEventExport.propInfo['format'].default;
        }
        if (values) {
            this['selector'].setValues(values['selector']);
        }
        if (values) {
            this['target'].setValues(values['target']);
        }
        if (values) {
            this['syslog-config'].setValues(values['syslog-config']);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'format': new FormControl(this['format'], [enumValidator(MonitoringEventExport_format), ]),
                'selector': this['selector'].$formGroup,
                'target': this['target'].$formGroup,
                'syslog-config': this['syslog-config'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['format'].setValue(this['format']);
            this['selector'].setFormGroupValuesToBeModelValues();
            this['target'].setFormGroupValuesToBeModelValues();
            this['syslog-config'].setFormGroupValuesToBeModelValues();
        }
    }
}

