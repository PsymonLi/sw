/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { MonitoringMetricIdentifier, IMonitoringMetricIdentifier } from './monitoring-metric-identifier.model';
import { MonitoringMeasurementCriteria, IMonitoringMeasurementCriteria } from './monitoring-measurement-criteria.model';
import { MonitoringThresholds, IMonitoringThresholds } from './monitoring-thresholds.model';

export interface IMonitoringStatsAlertPolicySpec {
    'metric'?: IMonitoringMetricIdentifier;
    'measurement-criteria'?: IMonitoringMeasurementCriteria;
    'thresholds'?: IMonitoringThresholds;
    'enable'?: boolean;
    'destinations'?: Array<string>;
    '_ui'?: any;
}


export class MonitoringStatsAlertPolicySpec extends BaseModel implements IMonitoringStatsAlertPolicySpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Details about the metric that needs to be monitored. */
    'metric': MonitoringMetricIdentifier = null;
    /** Measurement window and function to be applied while monitoring the metric. */
    'measurement-criteria': MonitoringMeasurementCriteria = null;
    /** Threshold values with varying severity. */
    'thresholds': MonitoringThresholds = null;
    /** User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is. */
    'enable': boolean = null;
    /** Name of the alert destinations to be used to send out notification when an alert gets generated. */
    'destinations': Array<string> = null;
    public static propInfo: { [prop in keyof IMonitoringStatsAlertPolicySpec]: PropInfoItem } = {
        'metric': {
            description:  `Details about the metric that needs to be monitored.`,
            required: false,
            type: 'object'
        },
        'measurement-criteria': {
            description:  `Measurement window and function to be applied while monitoring the metric.`,
            required: false,
            type: 'object'
        },
        'thresholds': {
            description:  `Threshold values with varying severity.`,
            required: false,
            type: 'object'
        },
        'enable': {
            default: 'true',
            description:  `User can disable the policy by setting this field. Disabled policies will not generate any more alerts but the outstanding ones will remain as is.`,
            required: false,
            type: 'boolean'
        },
        'destinations': {
            description:  `Name of the alert destinations to be used to send out notification when an alert gets generated.`,
            required: false,
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringStatsAlertPolicySpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringStatsAlertPolicySpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringStatsAlertPolicySpec.propInfo[prop] != null &&
                        MonitoringStatsAlertPolicySpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['metric'] = new MonitoringMetricIdentifier();
        this['measurement-criteria'] = new MonitoringMeasurementCriteria();
        this['thresholds'] = new MonitoringThresholds();
        this['destinations'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values) {
            this['metric'].setValues(values['metric'], fillDefaults);
        } else {
            this['metric'].setValues(null, fillDefaults);
        }
        if (values) {
            this['measurement-criteria'].setValues(values['measurement-criteria'], fillDefaults);
        } else {
            this['measurement-criteria'].setValues(null, fillDefaults);
        }
        if (values) {
            this['thresholds'].setValues(values['thresholds'], fillDefaults);
        } else {
            this['thresholds'].setValues(null, fillDefaults);
        }
        if (values && values['enable'] != null) {
            this['enable'] = values['enable'];
        } else if (fillDefaults && MonitoringStatsAlertPolicySpec.hasDefaultValue('enable')) {
            this['enable'] = MonitoringStatsAlertPolicySpec.propInfo['enable'].default;
        } else {
            this['enable'] = null
        }
        if (values && values['destinations'] != null) {
            this['destinations'] = values['destinations'];
        } else if (fillDefaults && MonitoringStatsAlertPolicySpec.hasDefaultValue('destinations')) {
            this['destinations'] = [ MonitoringStatsAlertPolicySpec.propInfo['destinations'].default];
        } else {
            this['destinations'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'metric': CustomFormGroup(this['metric'].$formGroup, MonitoringStatsAlertPolicySpec.propInfo['metric'].required),
                'measurement-criteria': CustomFormGroup(this['measurement-criteria'].$formGroup, MonitoringStatsAlertPolicySpec.propInfo['measurement-criteria'].required),
                'thresholds': CustomFormGroup(this['thresholds'].$formGroup, MonitoringStatsAlertPolicySpec.propInfo['thresholds'].required),
                'enable': CustomFormControl(new FormControl(this['enable']), MonitoringStatsAlertPolicySpec.propInfo['enable']),
                'destinations': CustomFormControl(new FormControl(this['destinations']), MonitoringStatsAlertPolicySpec.propInfo['destinations']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('metric') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('metric').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('measurement-criteria') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('measurement-criteria').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('thresholds') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('thresholds').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['metric'].setFormGroupValuesToBeModelValues();
            this['measurement-criteria'].setFormGroupValuesToBeModelValues();
            this['thresholds'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['enable'].setValue(this['enable']);
            this._formGroup.controls['destinations'].setValue(this['destinations']);
        }
    }
}

