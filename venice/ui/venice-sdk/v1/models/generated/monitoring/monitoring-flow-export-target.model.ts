/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { MonitoringFlowExportTarget_format,  } from './enums';
import { MonitoringMatchRule, IMonitoringMatchRule } from './monitoring-match-rule.model';
import { MonitoringExportConfig, IMonitoringExportConfig } from './monitoring-export-config.model';

export interface IMonitoringFlowExportTarget {
    'interval'?: string;
    'format'?: MonitoringFlowExportTarget_format;
    'match-rules'?: Array<IMonitoringMatchRule>;
    'exports'?: Array<IMonitoringExportConfig>;
}


export class MonitoringFlowExportTarget extends BaseModel implements IMonitoringFlowExportTarget {
    'interval': string = null;
    'format': MonitoringFlowExportTarget_format = null;
    'match-rules': Array<MonitoringMatchRule> = null;
    /** Export contains export parameters. */
    'exports': Array<MonitoringExportConfig> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'interval': {
            type: 'string'
        },
        'format': {
            enum: MonitoringFlowExportTarget_format,
            default: 'Ipfix',
            type: 'string'
        },
        'match-rules': {
            type: 'object'
        },
        'exports': {
            description:  'Export contains export parameters.',
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringFlowExportTarget.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringFlowExportTarget.propInfo[prop] != null &&
                        MonitoringFlowExportTarget.propInfo[prop].default != null &&
                        MonitoringFlowExportTarget.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['match-rules'] = new Array<MonitoringMatchRule>();
        this['exports'] = new Array<MonitoringExportConfig>();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['interval'] != null) {
            this['interval'] = values['interval'];
        } else if (fillDefaults && MonitoringFlowExportTarget.hasDefaultValue('interval')) {
            this['interval'] = MonitoringFlowExportTarget.propInfo['interval'].default;
        }
        if (values && values['format'] != null) {
            this['format'] = values['format'];
        } else if (fillDefaults && MonitoringFlowExportTarget.hasDefaultValue('format')) {
            this['format'] = <MonitoringFlowExportTarget_format>  MonitoringFlowExportTarget.propInfo['format'].default;
        }
        if (values) {
            this.fillModelArray<MonitoringMatchRule>(this, 'match-rules', values['match-rules'], MonitoringMatchRule);
        }
        if (values) {
            this.fillModelArray<MonitoringExportConfig>(this, 'exports', values['exports'], MonitoringExportConfig);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'interval': new FormControl(this['interval']),
                'format': new FormControl(this['format'], [enumValidator(MonitoringFlowExportTarget_format), ]),
                'match-rules': new FormArray([]),
                'exports': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<MonitoringMatchRule>('match-rules', this['match-rules'], MonitoringMatchRule);
            // generate FormArray control elements
            this.fillFormArray<MonitoringExportConfig>('exports', this['exports'], MonitoringExportConfig);
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['interval'].setValue(this['interval']);
            this._formGroup.controls['format'].setValue(this['format']);
            this.fillModelArray<MonitoringMatchRule>(this, 'match-rules', this['match-rules'], MonitoringMatchRule);
            this.fillModelArray<MonitoringExportConfig>(this, 'exports', this['exports'], MonitoringExportConfig);
        }
    }
}

