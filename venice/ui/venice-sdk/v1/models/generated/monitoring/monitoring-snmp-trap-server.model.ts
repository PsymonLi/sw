/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringSNMPTrapServer_version,  } from './enums';
import { MonitoringAuthConfig, IMonitoringAuthConfig } from './monitoring-auth-config.model';
import { MonitoringPrivacyConfig, IMonitoringPrivacyConfig } from './monitoring-privacy-config.model';

export interface IMonitoringSNMPTrapServer {
    'host'?: string;
    'port'?: string;
    'version'?: MonitoringSNMPTrapServer_version;
    'community-or-user'?: string;
    'auth-config'?: IMonitoringAuthConfig;
    'privacy-config'?: IMonitoringPrivacyConfig;
}


export class MonitoringSNMPTrapServer extends BaseModel implements IMonitoringSNMPTrapServer {
    /** Host where the trap needs to be sent. */
    'host': string;
    /** Port on the Host where the trap needs to be sent, default is 162. */
    'port': string;
    'version': MonitoringSNMPTrapServer_version;
    /** CommunityOrUser contains community string for v2c, user for v3. */
    'community-or-user': string;
    /** AuthConfig contains the configuration for authentication, valid only for v3. */
    'auth-config': MonitoringAuthConfig;
    /** PrivacyConfig contains the configuration for encryption, valid only for v3. */
    'privacy-config': MonitoringPrivacyConfig;
    public static enumProperties: { [key: string] : EnumDef } = {
        'version': {
            enum: MonitoringSNMPTrapServer_version,
            default: 'V2C',
        },
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['auth-config'] = new MonitoringAuthConfig();
        this['privacy-config'] = new MonitoringPrivacyConfig();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['host'] = values['host'];
            this['port'] = values['port'];
            this['version'] = values['version'];
            this['community-or-user'] = values['community-or-user'];
            this['auth-config'].setValues(values['auth-config']);
            this['privacy-config'].setValues(values['privacy-config']);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'host': new FormControl(this['host']),
                'port': new FormControl(this['port']),
                'version': new FormControl(this['version'], [enumValidator(MonitoringSNMPTrapServer_version), ]),
                'community-or-user': new FormControl(this['community-or-user']),
                'auth-config': this['auth-config'].$formGroup,
                'privacy-config': this['privacy-config'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['host'].setValue(this['host']);
            this._formGroup.controls['port'].setValue(this['port']);
            this._formGroup.controls['version'].setValue(this['version']);
            this._formGroup.controls['community-or-user'].setValue(this['community-or-user']);
            this['auth-config'].setFormGroupValues();
            this['privacy-config'].setFormGroupValues();
        }
    }
}

