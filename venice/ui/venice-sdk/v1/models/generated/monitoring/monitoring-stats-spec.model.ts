/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IMonitoringStatsSpec {
    'compaction-interval '?: string;
    'retention-time'?: string;
    'downsample-retention-time'?: string;
}


export class MonitoringStatsSpec extends BaseModel implements IMonitoringStatsSpec {
    'compaction-interval ': string;
    'retention-time': string;
    'downsample-retention-time': string;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringStatsSpec.enumProperties[prop] != null &&
                        MonitoringStatsSpec.enumProperties[prop].default != null &&
                        MonitoringStatsSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['compaction-interval '] != null) {
            this['compaction-interval '] = values['compaction-interval '];
        }
        if (values && values['retention-time'] != null) {
            this['retention-time'] = values['retention-time'];
        }
        if (values && values['downsample-retention-time'] != null) {
            this['downsample-retention-time'] = values['downsample-retention-time'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'compaction-interval ': new FormControl(this['compaction-interval ']),
                'retention-time': new FormControl(this['retention-time']),
                'downsample-retention-time': new FormControl(this['downsample-retention-time']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['compaction-interval '].setValue(this['compaction-interval ']);
            this._formGroup.controls['retention-time'].setValue(this['retention-time']);
            this._formGroup.controls['downsample-retention-time'].setValue(this['downsample-retention-time']);
        }
    }
}

