/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringRequirement_operator,  MonitoringRequirement_operator_uihint  } from './enums';

export interface IMonitoringRequirement {
    'field-or-metric'?: string;
    'operator'?: MonitoringRequirement_operator;
    'values'?: Array<string>;
}


export class MonitoringRequirement extends BaseModel implements IMonitoringRequirement {
    'field-or-metric': string = null;
    'operator': MonitoringRequirement_operator = null;
    /** Values contains one or more values corresponding to the field-or-metric. "Equals",
"NotEquals", "Gt" and "Lt" operators need a single value. "In" and "NotIn" operators
can have one or more values. */
    'values': Array<string> = null;
    public static enumProperties: { [key: string] : EnumDef } = {
        'operator': {
            enum: MonitoringRequirement_operator_uihint,
            default: 'Equals',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringRequirement.enumProperties[prop] != null &&
                        MonitoringRequirement.enumProperties[prop].default != null &&
                        MonitoringRequirement.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['values'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['field-or-metric'] != null) {
            this['field-or-metric'] = values['field-or-metric'];
        }
        if (values && values['operator'] != null) {
            this['operator'] = values['operator'];
        } else if (MonitoringRequirement.hasDefaultEnumValue('operator')) {
            this['operator'] = <MonitoringRequirement_operator> MonitoringRequirement.enumProperties['operator'].default;
        }
        if (values) {
            this.fillModelArray<string>(this, 'values', values['values']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'field-or-metric': new FormControl(this['field-or-metric']),
                'operator': new FormControl(this['operator'], [enumValidator(MonitoringRequirement_operator), ]),
                'values': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('values', this['values']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['field-or-metric'].setValue(this['field-or-metric']);
            this._formGroup.controls['operator'].setValue(this['operator']);
            this.fillModelArray<string>(this, 'values', this['values']);
        }
    }
}

