/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringMirrorStartConditions, IMonitoringMirrorStartConditions } from './monitoring-mirror-start-conditions.model';
import { MonitoringMirrorStopConditions, IMonitoringMirrorStopConditions } from './monitoring-mirror-stop-conditions.model';
import { MonitoringMirrorCollector, IMonitoringMirrorCollector } from './monitoring-mirror-collector.model';
import { MonitoringMatchRule, IMonitoringMatchRule } from './monitoring-match-rule.model';
import { MonitoringMirrorSessionSpec_packet_filters,  MonitoringMirrorSessionSpec_packet_filters_uihint  } from './enums';

export interface IMonitoringMirrorSessionSpec {
    'packet-size'?: number;
    'start-condition'?: IMonitoringMirrorStartConditions;
    'stop-condition'?: IMonitoringMirrorStopConditions;
    'collectors'?: Array<IMonitoringMirrorCollector>;
    'match-rules'?: Array<IMonitoringMatchRule>;
    'packet-filters'?: Array<MonitoringMirrorSessionSpec_packet_filters>;
}


export class MonitoringMirrorSessionSpec extends BaseModel implements IMonitoringMirrorSessionSpec {
    'packet-size': number;
    'start-condition': MonitoringMirrorStartConditions;
    'stop-condition': MonitoringMirrorStopConditions;
    'collectors': Array<MonitoringMirrorCollector>;
    'match-rules': Array<MonitoringMatchRule>;
    'packet-filters': Array<MonitoringMirrorSessionSpec_packet_filters>;
    public static enumProperties: { [key: string] : EnumDef } = {
        'packet-filters': {
            enum: MonitoringMirrorSessionSpec_packet_filters_uihint,
            default: 'ALL_PKTS',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringMirrorSessionSpec.enumProperties[prop] != null &&
                        MonitoringMirrorSessionSpec.enumProperties[prop].default != null &&
                        MonitoringMirrorSessionSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['start-condition'] = new MonitoringMirrorStartConditions();
        this['stop-condition'] = new MonitoringMirrorStopConditions();
        this['collectors'] = new Array<MonitoringMirrorCollector>();
        this['match-rules'] = new Array<MonitoringMatchRule>();
        this['packet-filters'] = new Array<MonitoringMirrorSessionSpec_packet_filters>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['packet-size'] != null) {
            this['packet-size'] = values['packet-size'];
        }
        if (values) {
            this['start-condition'].setValues(values['start-condition']);
        }
        if (values) {
            this['stop-condition'].setValues(values['stop-condition']);
        }
        if (values) {
            this.fillModelArray<MonitoringMirrorCollector>(this, 'collectors', values['collectors'], MonitoringMirrorCollector);
        }
        if (values) {
            this.fillModelArray<MonitoringMatchRule>(this, 'match-rules', values['match-rules'], MonitoringMatchRule);
        }
        if (values) {
            this.fillModelArray<MonitoringMirrorSessionSpec_packet_filters>(this, 'packet-filters', values['packet-filters']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'packet-size': new FormControl(this['packet-size']),
                'start-condition': this['start-condition'].$formGroup,
                'stop-condition': this['stop-condition'].$formGroup,
                'collectors': new FormArray([]),
                'match-rules': new FormArray([]),
                'packet-filters': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<MonitoringMirrorCollector>('collectors', this['collectors'], MonitoringMirrorCollector);
            // generate FormArray control elements
            this.fillFormArray<MonitoringMatchRule>('match-rules', this['match-rules'], MonitoringMatchRule);
            // generate FormArray control elements
            this.fillFormArray<MonitoringMirrorSessionSpec_packet_filters>('packet-filters', this['packet-filters']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['packet-size'].setValue(this['packet-size']);
            this['start-condition'].setFormGroupValues();
            this['stop-condition'].setFormGroupValues();
            this.fillModelArray<MonitoringMirrorCollector>(this, 'collectors', this['collectors'], MonitoringMirrorCollector);
            this.fillModelArray<MonitoringMatchRule>(this, 'match-rules', this['match-rules'], MonitoringMatchRule);
            this.fillModelArray<MonitoringMirrorSessionSpec_packet_filters>(this, 'packet-filters', this['packet-filters']);
        }
    }
}

