/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { MonitoringThreshold_severity,  } from './enums';

export interface IMonitoringThreshold {
    'severity': MonitoringThreshold_severity;
    'raise-value'?: string;
    '_ui'?: any;
}


export class MonitoringThreshold extends BaseModel implements IMonitoringThreshold {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Severity of the alert to be created. */
    'severity': MonitoringThreshold_severity = null;
    /** Raise/Create an alert when the threshold reaches this value. */
    'raise-value': string = null;
    public static propInfo: { [prop in keyof IMonitoringThreshold]: PropInfoItem } = {
        'severity': {
            enum: MonitoringThreshold_severity,
            default: 'info',
            description:  `Severity of the alert to be created.`,
            required: true,
            type: 'string'
        },
        'raise-value': {
            description:  `Raise/Create an alert when the threshold reaches this value.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringThreshold.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringThreshold.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringThreshold.propInfo[prop] != null &&
                        MonitoringThreshold.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['severity'] != null) {
            this['severity'] = values['severity'];
        } else if (fillDefaults && MonitoringThreshold.hasDefaultValue('severity')) {
            this['severity'] = <MonitoringThreshold_severity>  MonitoringThreshold.propInfo['severity'].default;
        } else {
            this['severity'] = null
        }
        if (values && values['raise-value'] != null) {
            this['raise-value'] = values['raise-value'];
        } else if (fillDefaults && MonitoringThreshold.hasDefaultValue('raise-value')) {
            this['raise-value'] = MonitoringThreshold.propInfo['raise-value'].default;
        } else {
            this['raise-value'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'severity': CustomFormControl(new FormControl(this['severity'], [required, enumValidator(MonitoringThreshold_severity), ]), MonitoringThreshold.propInfo['severity']),
                'raise-value': CustomFormControl(new FormControl(this['raise-value']), MonitoringThreshold.propInfo['raise-value']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['severity'].setValue(this['severity']);
            this._formGroup.controls['raise-value'].setValue(this['raise-value']);
        }
    }
}

