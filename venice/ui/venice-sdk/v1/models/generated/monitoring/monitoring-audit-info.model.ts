/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IMonitoringAuditInfo {
    'user'?: string;
    'time'?: Date;
}


export class MonitoringAuditInfo extends BaseModel implements IMonitoringAuditInfo {
    /** Name of the user performed some action. */
    'user': string;
    /** Time at which the action was performed. */
    'time': Date;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringAuditInfo.enumProperties[prop] != null &&
                        MonitoringAuditInfo.enumProperties[prop].default != null &&
                        MonitoringAuditInfo.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['user'] != null) {
            this['user'] = values['user'];
        }
        if (values && values['time'] != null) {
            this['time'] = values['time'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'user': new FormControl(this['user']),
                'time': new FormControl(this['time']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['user'].setValue(this['user']);
            this._formGroup.controls['time'].setValue(this['time']);
        }
    }
}

