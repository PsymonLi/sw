/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringAlertPolicySpec_severity,  MonitoringAlertPolicySpec_severity_uihint  } from './enums';
import { MonitoringRequirement, IMonitoringRequirement } from './monitoring-requirement.model';

export interface IMonitoringAlertPolicySpec {
    'resource'?: string;
    'severity'?: MonitoringAlertPolicySpec_severity;
    'message'?: string;
    'requirements'?: Array<IMonitoringRequirement>;
    'persistence-duration'?: string;
    'clear-duration'?: string;
    'enable'?: boolean;
    'auto-resolve'?: boolean;
    'destinations'?: Array<string>;
}


export class MonitoringAlertPolicySpec extends BaseModel implements IMonitoringAlertPolicySpec {
    /** Resource type - target resource to run this policy.
e.g. Network, Endpoint - object based alert policy
     Event - event based alert policy
     EndpointMetrics - metric based alert policy
based on the resource type, the policy gets interpreted. */
    'resource': string;
    'severity': MonitoringAlertPolicySpec_severity;
    /** Message to be used while generating the alert
XXX: Event based alerts should not carry a message. It will be derived from the event. */
    'message': string;
    'requirements': Array<MonitoringRequirement>;
    'persistence-duration': string;
    'clear-duration': string;
    /** User can disable the policy by setting this field.
Disabled policies will not generate any more alerts but the outstanding ones will remain as is. */
    'enable': boolean;
    'auto-resolve': boolean;
    /** name of the alert destinations to be used to send out notification when an alert
gets generated. */
    'destinations': Array<string>;
    public static enumProperties: { [key: string] : EnumDef } = {
        'severity': {
            enum: MonitoringAlertPolicySpec_severity_uihint,
            default: 'INFO',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringAlertPolicySpec.enumProperties[prop] != null &&
                        MonitoringAlertPolicySpec.enumProperties[prop].default != null &&
                        MonitoringAlertPolicySpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['requirements'] = new Array<MonitoringRequirement>();
        this['destinations'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['resource'] != null) {
            this['resource'] = values['resource'];
        }
        if (values && values['severity'] != null) {
            this['severity'] = values['severity'];
        } else if (MonitoringAlertPolicySpec.hasDefaultEnumValue('severity')) {
            this['severity'] = <MonitoringAlertPolicySpec_severity> MonitoringAlertPolicySpec.enumProperties['severity'].default;
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        }
        if (values) {
            this.fillModelArray<MonitoringRequirement>(this, 'requirements', values['requirements'], MonitoringRequirement);
        }
        if (values && values['persistence-duration'] != null) {
            this['persistence-duration'] = values['persistence-duration'];
        }
        if (values && values['clear-duration'] != null) {
            this['clear-duration'] = values['clear-duration'];
        }
        if (values && values['enable'] != null) {
            this['enable'] = values['enable'];
        }
        if (values && values['auto-resolve'] != null) {
            this['auto-resolve'] = values['auto-resolve'];
        }
        if (values) {
            this.fillModelArray<string>(this, 'destinations', values['destinations']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'resource': new FormControl(this['resource']),
                'severity': new FormControl(this['severity'], [enumValidator(MonitoringAlertPolicySpec_severity), ]),
                'message': new FormControl(this['message']),
                'requirements': new FormArray([]),
                'persistence-duration': new FormControl(this['persistence-duration']),
                'clear-duration': new FormControl(this['clear-duration']),
                'enable': new FormControl(this['enable']),
                'auto-resolve': new FormControl(this['auto-resolve']),
                'destinations': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<MonitoringRequirement>('requirements', this['requirements'], MonitoringRequirement);
            // generate FormArray control elements
            this.fillFormArray<string>('destinations', this['destinations']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['resource'].setValue(this['resource']);
            this._formGroup.controls['severity'].setValue(this['severity']);
            this._formGroup.controls['message'].setValue(this['message']);
            this.fillModelArray<MonitoringRequirement>(this, 'requirements', this['requirements'], MonitoringRequirement);
            this._formGroup.controls['persistence-duration'].setValue(this['persistence-duration']);
            this._formGroup.controls['clear-duration'].setValue(this['clear-duration']);
            this._formGroup.controls['enable'].setValue(this['enable']);
            this._formGroup.controls['auto-resolve'].setValue(this['auto-resolve']);
            this.fillModelArray<string>(this, 'destinations', this['destinations']);
        }
    }
}

