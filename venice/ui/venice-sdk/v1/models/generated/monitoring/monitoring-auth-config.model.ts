/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringAuthConfig_algo,  } from './enums';

export interface IMonitoringAuthConfig {
    'algo'?: MonitoringAuthConfig_algo;
    'password'?: string;
}


export class MonitoringAuthConfig extends BaseModel implements IMonitoringAuthConfig {
    'algo': MonitoringAuthConfig_algo = null;
    /** Password contains the authentication password. */
    'password': string = null;
    public static enumProperties: { [key: string] : EnumDef } = {
        'algo': {
            enum: MonitoringAuthConfig_algo,
            default: 'MD5',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringAuthConfig.enumProperties[prop] != null &&
                        MonitoringAuthConfig.enumProperties[prop].default != null &&
                        MonitoringAuthConfig.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['algo'] != null) {
            this['algo'] = values['algo'];
        } else if (MonitoringAuthConfig.hasDefaultEnumValue('algo')) {
            this['algo'] = <MonitoringAuthConfig_algo> MonitoringAuthConfig.enumProperties['algo'].default;
        }
        if (values && values['password'] != null) {
            this['password'] = values['password'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'algo': new FormControl(this['algo'], [enumValidator(MonitoringAuthConfig_algo), ]),
                'password': new FormControl(this['password']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['algo'].setValue(this['algo']);
            this._formGroup.controls['password'].setValue(this['password']);
        }
    }
}

