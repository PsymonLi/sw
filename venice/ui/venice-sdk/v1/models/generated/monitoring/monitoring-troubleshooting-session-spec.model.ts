/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringMatchRule, IMonitoringMatchRule } from './monitoring-match-rule.model';
import { MonitoringTimeWindow, IMonitoringTimeWindow } from './monitoring-time-window.model';

export interface IMonitoringTroubleshootingSessionSpec {
    'flow-selector'?: IMonitoringMatchRule;
    'time-window'?: IMonitoringTimeWindow;
    'repeat-every'?: string;
    'enable-mirroring'?: boolean;
}


export class MonitoringTroubleshootingSessionSpec extends BaseModel implements IMonitoringTroubleshootingSessionSpec {
    'flow-selector': MonitoringMatchRule;
    'time-window': MonitoringTimeWindow;
    'repeat-every': string;
    'enable-mirroring': boolean;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringTroubleshootingSessionSpec.enumProperties[prop] != null &&
                        MonitoringTroubleshootingSessionSpec.enumProperties[prop].default != null &&
                        MonitoringTroubleshootingSessionSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['flow-selector'] = new MonitoringMatchRule();
        this['time-window'] = new MonitoringTimeWindow();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['flow-selector'].setValues(values['flow-selector']);
        }
        if (values) {
            this['time-window'].setValues(values['time-window']);
        }
        if (values && values['repeat-every'] != null) {
            this['repeat-every'] = values['repeat-every'];
        }
        if (values && values['enable-mirroring'] != null) {
            this['enable-mirroring'] = values['enable-mirroring'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'flow-selector': this['flow-selector'].$formGroup,
                'time-window': this['time-window'].$formGroup,
                'repeat-every': new FormControl(this['repeat-every']),
                'enable-mirroring': new FormControl(this['enable-mirroring']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this['flow-selector'].setFormGroupValues();
            this['time-window'].setFormGroupValues();
            this._formGroup.controls['repeat-every'].setValue(this['repeat-every']);
            this._formGroup.controls['enable-mirroring'].setValue(this['enable-mirroring']);
        }
    }
}

