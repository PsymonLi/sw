/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { MonitoringMatchRule, IMonitoringMatchRule } from './monitoring-match-rule.model';
import { MonitoringTimeWindow, IMonitoringTimeWindow } from './monitoring-time-window.model';

export interface IMonitoringTroubleshootingSessionSpec {
    'flow-selector'?: IMonitoringMatchRule;
    'time-window'?: IMonitoringTimeWindow;
    'repeat-every'?: string;
    'enable-mirroring'?: boolean;
}


export class MonitoringTroubleshootingSessionSpec extends BaseModel implements IMonitoringTroubleshootingSessionSpec {
    'flow-selector': MonitoringMatchRule = null;
    'time-window': MonitoringTimeWindow = null;
    'repeat-every': string = null;
    'enable-mirroring': boolean = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'flow-selector': {
            type: 'object'
        },
        'time-window': {
            type: 'object'
        },
        'repeat-every': {
            type: 'string'
        },
        'enable-mirroring': {
            type: 'boolean'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringTroubleshootingSessionSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringTroubleshootingSessionSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringTroubleshootingSessionSpec.propInfo[prop] != null &&
                        MonitoringTroubleshootingSessionSpec.propInfo[prop].default != null &&
                        MonitoringTroubleshootingSessionSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['flow-selector'] = new MonitoringMatchRule();
        this['time-window'] = new MonitoringTimeWindow();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this['flow-selector'].setValues(values['flow-selector']);
        }
        if (values) {
            this['time-window'].setValues(values['time-window']);
        }
        if (values && values['repeat-every'] != null) {
            this['repeat-every'] = values['repeat-every'];
        } else if (fillDefaults && MonitoringTroubleshootingSessionSpec.hasDefaultValue('repeat-every')) {
            this['repeat-every'] = MonitoringTroubleshootingSessionSpec.propInfo['repeat-every'].default;
        }
        if (values && values['enable-mirroring'] != null) {
            this['enable-mirroring'] = values['enable-mirroring'];
        } else if (fillDefaults && MonitoringTroubleshootingSessionSpec.hasDefaultValue('enable-mirroring')) {
            this['enable-mirroring'] = MonitoringTroubleshootingSessionSpec.propInfo['enable-mirroring'].default;
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'flow-selector': this['flow-selector'].$formGroup,
                'time-window': this['time-window'].$formGroup,
                'repeat-every': new FormControl(this['repeat-every']),
                'enable-mirroring': new FormControl(this['enable-mirroring']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['flow-selector'].setFormGroupValuesToBeModelValues();
            this['time-window'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['repeat-every'].setValue(this['repeat-every']);
            this._formGroup.controls['enable-mirroring'].setValue(this['enable-mirroring']);
        }
    }
}

