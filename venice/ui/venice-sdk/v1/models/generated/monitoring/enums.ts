/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum FieldsRequirement_operator {
    'equals' = <any>"equals",
    'notEquals' = <any>"notEquals",
    'in' = <any>"in",
    'notIn' = <any>"notIn",
    'gt' = <any>"gt",
    'gte' = <any>"gte",
    'lt' = <any>"lt",
    'lte' = <any>"lte",
}

export enum MonitoringAlertPolicySpec_severity {
    'INFO' = <any>"INFO",
    'WARNING' = <any>"WARNING",
    'CRITICAL' = <any>"CRITICAL",
}

export enum MonitoringAlertSpec_state {
    'OPEN' = <any>"OPEN",
    'RESOLVED' = <any>"RESOLVED",
    'ACKNOWLEDGED' = <any>"ACKNOWLEDGED",
}

export enum MonitoringAlertStatus_severity {
    'INFO' = <any>"INFO",
    'WARNING' = <any>"WARNING",
    'CRITICAL' = <any>"CRITICAL",
}

export enum MonitoringAuthConfig_algo {
    'MD5' = <any>"MD5",
    'SHA1' = <any>"SHA1",
}

export enum MonitoringEvent_severity {
    'INFO' = <any>"INFO",
    'WARNING' = <any>"WARNING",
    'CRITICAL' = <any>"CRITICAL",
}

export enum MonitoringEventAttributes_severity {
    'INFO' = <any>"INFO",
    'WARNING' = <any>"WARNING",
    'CRITICAL' = <any>"CRITICAL",
}

export enum MonitoringEventExport_format {
    'SYSLOG_BSD' = <any>"SYSLOG_BSD",
    'SYSLOG_RFC5424' = <any>"SYSLOG_RFC5424",
}

export enum MonitoringFlowExportTarget_format {
    'Ipfix' = <any>"Ipfix",
}

export enum MonitoringFwlogExport_format {
    'SYSLOG_BSD' = <any>"SYSLOG_BSD",
    'SYSLOG_RFC5424' = <any>"SYSLOG_RFC5424",
}

export enum MonitoringFwlogExport_export_filter {
    'FWLOG_ALL' = <any>"FWLOG_ALL",
    'FWLOG_ACCEPT' = <any>"FWLOG_ACCEPT",
    'FWLOG_REJECT' = <any>"FWLOG_REJECT",
    'FWLOG_DENY' = <any>"FWLOG_DENY",
}

export enum MonitoringFwlogSpec_filter {
    'FWLOG_ALL' = <any>"FWLOG_ALL",
    'FWLOG_ACCEPT' = <any>"FWLOG_ACCEPT",
    'FWLOG_REJECT' = <any>"FWLOG_REJECT",
    'FWLOG_DENY' = <any>"FWLOG_DENY",
}

export enum MonitoringMatchedRequirement_operator {
    'Equals' = <any>"Equals",
    'In' = <any>"In",
    'NotEquals' = <any>"NotEquals",
    'NotIn' = <any>"NotIn",
    'Gt' = <any>"Gt",
    'Lt' = <any>"Lt",
}

export enum MonitoringMirrorCollector_type {
    'VENICE' = <any>"VENICE",
    'ERSPAN' = <any>"ERSPAN",
}

export enum MonitoringMirrorSessionSpec_packet_filters {
    'ALL_PKTS' = <any>"ALL_PKTS",
    'ALL_DROPS' = <any>"ALL_DROPS",
    'NETWORK_POLICY_DROP' = <any>"NETWORK_POLICY_DROP",
    'FIREWALL_POLICY_DROP' = <any>"FIREWALL_POLICY_DROP",
}

export enum MonitoringMirrorSessionStatus_oper_state {
    'RUNNING' = <any>"RUNNING",
    'STOPPED' = <any>"STOPPED",
    'SCHEDULED' = <any>"SCHEDULED",
    'READY_TO_RUN' = <any>"READY_TO_RUN",
}

export enum MonitoringPrivacyConfig_algo {
    'DES56' = <any>"DES56",
    'AES128' = <any>"AES128",
}

export enum MonitoringRequirement_operator {
    'Equals' = <any>"Equals",
    'In' = <any>"In",
    'NotEquals' = <any>"NotEquals",
    'NotIn' = <any>"NotIn",
    'Gt' = <any>"Gt",
    'Lt' = <any>"Lt",
}

export enum MonitoringSNMPTrapServer_version {
    'V2C' = <any>"V2C",
    'V3' = <any>"V3",
}


export enum FieldsRequirement_operator_uihint {
    'gt' = <any> "greater than",
    'gte' = <any> "greater than or equals",
    'lt' = <any> "less than",
    'lte' = <any> "less than or equals",
    'notEquals' = <any> "not equals",
    'notIn' = <any> "not in",
}

export enum MonitoringAlertPolicySpec_severity_uihint {
    'CRITICAL' = <any> "Critical",
    'INFO' = <any> "Informational",
    'WARNING' = <any> "Warning",
}

export enum MonitoringAlertSpec_state_uihint {
    'ACKNOWLEDGED' = <any> "Acknowledged",
    'OPEN' = <any> "Open",
    'RESOLVED' = <any> "Resolved",
}

export enum MonitoringAlertStatus_severity_uihint {
    'CRITICAL' = <any> "Critical",
    'INFO' = <any> "Informational",
    'WARNING' = <any> "Warning",
}

export enum MonitoringEvent_severity_uihint {
    'CRITICAL' = <any> "Critical",
    'INFO' = <any> "Informational",
    'WARNING' = <any> "Warning",
}

export enum MonitoringEventAttributes_severity_uihint {
    'CRITICAL' = <any> "Critical",
    'INFO' = <any> "Informational",
    'WARNING' = <any> "Warning",
}

export enum MonitoringFwlogExport_export_filter_uihint {
    'FWLOG_ACCEPT' = <any> "Accept",
    'FWLOG_ALL' = <any> "All",
    'FWLOG_DENY' = <any> "Deny",
    'FWLOG_REJECT' = <any> "Reject",
}

export enum MonitoringFwlogSpec_filter_uihint {
    'FWLOG_ACCEPT' = <any> "Accept",
    'FWLOG_ALL' = <any> "All",
    'FWLOG_DENY' = <any> "Deny",
    'FWLOG_REJECT' = <any> "Reject",
}

export enum MonitoringMatchedRequirement_operator_uihint {
    'Gt' = <any> "Greater Than",
    'Lt' = <any> "Less Than",
    'NotEquals' = <any> "Not Equals",
    'NotIn' = <any> "Not In",
}

export enum MonitoringMirrorCollector_type_uihint {
    'VENICE' = <any> "Venice",
}

export enum MonitoringMirrorSessionSpec_packet_filters_uihint {
    'ALL_DROPS' = <any> "All Drops",
    'ALL_PKTS' = <any> "All Packets",
    'FIREWALL_POLICY_DROP' = <any> "Firewall Policy Drops",
    'NETWORK_POLICY_DROP' = <any> "Network Policy Drops",
}

export enum MonitoringMirrorSessionStatus_oper_state_uihint {
    'READY_TO_RUN' = <any> "Ready To Run",
    'RUNNING' = <any> "Running",
    'SCHEDULED' = <any> "Scheduled",
    'STOPPED' = <any> "Stopped",
}

export enum MonitoringRequirement_operator_uihint {
    'Gt' = <any> "Greater Than",
    'Lt' = <any> "Less Than",
    'NotEquals' = <any> "Not Equals",
    'NotIn' = <any> "Not In",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    FieldsRequirement_operator = FieldsRequirement_operator;
    MonitoringAlertPolicySpec_severity = MonitoringAlertPolicySpec_severity;
    MonitoringAlertSpec_state = MonitoringAlertSpec_state;
    MonitoringAlertStatus_severity = MonitoringAlertStatus_severity;
    MonitoringAuthConfig_algo = MonitoringAuthConfig_algo;
    MonitoringEvent_severity = MonitoringEvent_severity;
    MonitoringEventAttributes_severity = MonitoringEventAttributes_severity;
    MonitoringEventExport_format = MonitoringEventExport_format;
    MonitoringFlowExportTarget_format = MonitoringFlowExportTarget_format;
    MonitoringFwlogExport_format = MonitoringFwlogExport_format;
    MonitoringFwlogExport_export_filter = MonitoringFwlogExport_export_filter;
    MonitoringFwlogSpec_filter = MonitoringFwlogSpec_filter;
    MonitoringMatchedRequirement_operator = MonitoringMatchedRequirement_operator;
    MonitoringMirrorCollector_type = MonitoringMirrorCollector_type;
    MonitoringMirrorSessionSpec_packet_filters = MonitoringMirrorSessionSpec_packet_filters;
    MonitoringMirrorSessionStatus_oper_state = MonitoringMirrorSessionStatus_oper_state;
    MonitoringPrivacyConfig_algo = MonitoringPrivacyConfig_algo;
    MonitoringRequirement_operator = MonitoringRequirement_operator;
    MonitoringSNMPTrapServer_version = MonitoringSNMPTrapServer_version;

    FieldsRequirement_operator_uihint = FieldsRequirement_operator_uihint;
    MonitoringAlertPolicySpec_severity_uihint = MonitoringAlertPolicySpec_severity_uihint;
    MonitoringAlertSpec_state_uihint = MonitoringAlertSpec_state_uihint;
    MonitoringAlertStatus_severity_uihint = MonitoringAlertStatus_severity_uihint;
    MonitoringEvent_severity_uihint = MonitoringEvent_severity_uihint;
    MonitoringEventAttributes_severity_uihint = MonitoringEventAttributes_severity_uihint;
    MonitoringFwlogExport_export_filter_uihint = MonitoringFwlogExport_export_filter_uihint;
    MonitoringFwlogSpec_filter_uihint = MonitoringFwlogSpec_filter_uihint;
    MonitoringMatchedRequirement_operator_uihint = MonitoringMatchedRequirement_operator_uihint;
    MonitoringMirrorCollector_type_uihint = MonitoringMirrorCollector_type_uihint;
    MonitoringMirrorSessionSpec_packet_filters_uihint = MonitoringMirrorSessionSpec_packet_filters_uihint;
    MonitoringMirrorSessionStatus_oper_state_uihint = MonitoringMirrorSessionStatus_oper_state_uihint;
    MonitoringRequirement_operator_uihint = MonitoringRequirement_operator_uihint;
}
