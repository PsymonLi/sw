/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum ApiListWatchOptions_sort_order {
    'none' = "none",
    'by-name' = "by-name",
    'by-name-reverse' = "by-name-reverse",
    'by-version' = "by-version",
    'by-version-reverse' = "by-version-reverse",
    'by-creation-time' = "by-creation-time",
    'by-creation-time-reverse' = "by-creation-time-reverse",
    'by-mod-time' = "by-mod-time",
    'by-mod-time-reverse' = "by-mod-time-reverse",
}

export enum FieldsRequirement_operator {
    'equals' = "equals",
    'notequals' = "notequals",
    'in' = "in",
    'notin' = "notin",
    'gt' = "gt",
    'gte' = "gte",
    'lt' = "lt",
    'lte' = "lte",
}

export enum LabelsRequirement_operator {
    'equals' = "equals",
    'notequals' = "notequals",
    'in' = "in",
    'notin' = "notin",
}

export enum MonitoringAlertPolicySpec_severity {
    'info' = "info",
    'warn' = "warn",
    'critical' = "critical",
}

export enum MonitoringAlertSpec_state {
    'open' = "open",
    'resolved' = "resolved",
    'acknowledged' = "acknowledged",
}

export enum MonitoringAlertStatus_severity {
    'info' = "info",
    'warn' = "warn",
    'critical' = "critical",
}

export enum MonitoringArchiveRequestSpec_type {
    'event' = "event",
    'auditevent' = "auditevent",
}

export enum MonitoringArchiveRequestStatus_status {
    'scheduled' = "scheduled",
    'running' = "running",
    'completed' = "completed",
    'failed' = "failed",
    'timeout' = "timeout",
    'canceled' = "canceled",
}

export enum MonitoringAuthConfig_algo {
    'md5' = "md5",
    'sha1' = "sha1",
}

export enum MonitoringEventPolicySpec_format {
    'syslog-bsd' = "syslog-bsd",
    'syslog-rfc5424' = "syslog-rfc5424",
}

export enum MonitoringExternalCred_auth_type {
    'none' = "none",
    'username-password' = "username-password",
    'token' = "token",
    'certs' = "certs",
}

export enum MonitoringFlowExportPolicySpec_format {
    'ipfix' = "ipfix",
}

export enum MonitoringFwlogPolicySpec_format {
    'syslog-bsd' = "syslog-bsd",
    'syslog-rfc5424' = "syslog-rfc5424",
}

export enum MonitoringFwlogPolicySpec_filter {
    'none' = "none",
    'allow' = "allow",
    'deny' = "deny",
    'reject' = "reject",
    'implicit-reject' = "implicit-reject",
    'all' = "all",
}

export enum MonitoringMatchedRequirement_operator {
    'equals' = "equals",
    'notequals' = "notequals",
    'in' = "in",
    'notin' = "notin",
    'gt' = "gt",
    'gte' = "gte",
    'lt' = "lt",
    'lte' = "lte",
}

export enum MonitoringMirrorCollector_type {
    'erspan' = "erspan",
}

export enum MonitoringMirrorSessionSpec_packet_filters {
    'all-packets' = "all-packets",
    'all-drops' = "all-drops",
    'network-policy-drop' = "network-policy-drop",
    'firewall-policy-drop' = "firewall-policy-drop",
}

export enum MonitoringMirrorSessionStatus_schedule_state {
    'none' = "none",
    'active' = "active",
    'stopped' = "stopped",
    'scheduled' = "scheduled",
    'error-no-mirror-session' = "error-no-mirror-session",
}

export enum MonitoringPrivacyConfig_algo {
    'des56' = "des56",
    'aes128' = "aes128",
}

export enum MonitoringSNMPTrapServer_version {
    'v2c' = "v2c",
    'v3' = "v3",
}

export enum MonitoringSyslogAuditor_format {
    'syslog-bsd' = "syslog-bsd",
    'syslog-rfc5424' = "syslog-rfc5424",
}

export enum MonitoringSyslogExport_format {
    'syslog-bsd' = "syslog-bsd",
    'syslog-rfc5424' = "syslog-rfc5424",
}

export enum MonitoringSyslogExportConfig_facility_override {
    'kernel' = "kernel",
    'user' = "user",
    'mail' = "mail",
    'daemon' = "daemon",
    'auth' = "auth",
    'syslog' = "syslog",
    'lpr' = "lpr",
    'news' = "news",
    'uucp' = "uucp",
    'cron' = "cron",
    'authpriv' = "authpriv",
    'ftp' = "ftp",
    'local0' = "local0",
    'local1' = "local1",
    'local2' = "local2",
    'local3' = "local3",
    'local4' = "local4",
    'local5' = "local5",
    'local6' = "local6",
    'local7' = "local7",
}

export enum MonitoringTechSupportNodeResult_status {
    'scheduled' = "scheduled",
    'running' = "running",
    'completed' = "completed",
    'failed' = "failed",
    'timeout' = "timeout",
}

export enum MonitoringTechSupportRequestStatus_status {
    'scheduled' = "scheduled",
    'running' = "running",
    'completed' = "completed",
    'failed' = "failed",
    'timeout' = "timeout",
}

export enum MonitoringTroubleshootingSessionStatus_state {
    'running' = "running",
    'stopped' = "stopped",
    'scheduled' = "scheduled",
}


export enum ApiListWatchOptions_sort_order_uihint {
    'by-creation-time' = "By Creation Time",
    'by-creation-time-reverse' = "By Creation Time Reverse",
    'by-mod-time' = "By Modification Time",
    'by-mod-time-reverse' = "By Modification Time Reverse",
    'by-name' = "By Name",
    'by-name-reverse' = "By Name Reverse",
    'by-version' = "By Version",
    'by-version-reverse' = "By Version Reverse",
    'none' = "None",
}

export enum FieldsRequirement_operator_uihint {
    'gt' = "greater than",
    'gte' = "greater than or equals",
    'lt' = "less than",
    'lte' = "less than or equals",
    'notequals' = "not equals",
    'notin' = "not in",
}

export enum LabelsRequirement_operator_uihint {
    'notequals' = "not equals",
    'notin' = "not in",
}

export enum MonitoringAlertSpec_state_uihint {
    'acknowledged' = "Acknowledged",
    'open' = "Open",
    'resolved' = "Resolved",
}

export enum MonitoringArchiveRequestSpec_type_uihint {
    'auditevent' = "AuditEvent",
    'event' = "Event",
}

export enum MonitoringEventPolicySpec_format_uihint {
    'syslog-bsd' = "BSD",
    'syslog-rfc5424' = "RFC5424",
}

export enum MonitoringExternalCred_auth_type_uihint {
    'certs' = "Certs",
    'none' = "None",
    'token' = "Token",
    'username-password' = "Username/Password",
}

export enum MonitoringFwlogPolicySpec_format_uihint {
    'syslog-bsd' = "BSD",
    'syslog-rfc5424' = "RFC5424",
}

export enum MonitoringFwlogPolicySpec_filter_uihint {
    'all' = "All Logs",
    'allow' = "Allow Logs",
    'deny' = "Deny Logs",
    'implicit-reject' = "Implicit Deny Logs",
    'none' = "No Logs",
    'reject' = "Reject Logs",
}

export enum MonitoringMatchedRequirement_operator_uihint {
    'gt' = "greater than",
    'gte' = "greater than or equals",
    'lt' = "less than",
    'lte' = "less than or equals",
    'notequals' = "not equals",
    'notin' = "not in",
}

export enum MonitoringMirrorCollector_type_uihint {
    'erspan' = "ERSPAN",
}

export enum MonitoringMirrorSessionSpec_packet_filters_uihint {
    'all-drops' = "All Drops",
    'all-packets' = "All Packets",
    'firewall-policy-drop' = "Firewall Policy Drops",
    'network-policy-drop' = "Network Policy Drops",
}

export enum MonitoringMirrorSessionStatus_schedule_state_uihint {
    'active' = "Active",
    'error-no-mirror-session' = "Max Mirror Sessions Exceeded",
    'none' = "None",
    'scheduled' = "Scheduled",
    'stopped' = "Stopped",
}

export enum MonitoringSyslogAuditor_format_uihint {
    'syslog-bsd' = "BSD",
    'syslog-rfc5424' = "RFC5424",
}

export enum MonitoringSyslogExport_format_uihint {
    'syslog-bsd' = "BSD",
    'syslog-rfc5424' = "RFC5424",
}

export enum MonitoringSyslogExportConfig_facility_override_uihint {
    'auth' = "Auth",
    'authpriv' = "Private Auth",
    'cron' = "CRON",
    'daemon' = "Daemon",
    'ftp' = "FTP",
    'kernel' = "Kernel",
    'local0' = "local 0",
    'local1' = "local 1",
    'local2' = "local 2",
    'local3' = "local 3",
    'local4' = "local 4",
    'local5' = "local 5",
    'local6' = "local 6",
    'local7' = "local 7",
    'lpr' = "LPR",
    'mail' = "Mail",
    'news' = "News",
    'syslog' = "Syslog",
    'user' = "User",
    'uucp' = "UUCP",
}

export enum MonitoringTroubleshootingSessionStatus_state_uihint {
    'running' = "Running",
    'scheduled' = "Scheduled",
    'stopped' = "Stopped",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    ApiListWatchOptions_sort_order = ApiListWatchOptions_sort_order;
    FieldsRequirement_operator = FieldsRequirement_operator;
    LabelsRequirement_operator = LabelsRequirement_operator;
    MonitoringAlertPolicySpec_severity = MonitoringAlertPolicySpec_severity;
    MonitoringAlertSpec_state = MonitoringAlertSpec_state;
    MonitoringAlertStatus_severity = MonitoringAlertStatus_severity;
    MonitoringArchiveRequestSpec_type = MonitoringArchiveRequestSpec_type;
    MonitoringArchiveRequestStatus_status = MonitoringArchiveRequestStatus_status;
    MonitoringAuthConfig_algo = MonitoringAuthConfig_algo;
    MonitoringEventPolicySpec_format = MonitoringEventPolicySpec_format;
    MonitoringExternalCred_auth_type = MonitoringExternalCred_auth_type;
    MonitoringFlowExportPolicySpec_format = MonitoringFlowExportPolicySpec_format;
    MonitoringFwlogPolicySpec_format = MonitoringFwlogPolicySpec_format;
    MonitoringFwlogPolicySpec_filter = MonitoringFwlogPolicySpec_filter;
    MonitoringMatchedRequirement_operator = MonitoringMatchedRequirement_operator;
    MonitoringMirrorCollector_type = MonitoringMirrorCollector_type;
    MonitoringMirrorSessionSpec_packet_filters = MonitoringMirrorSessionSpec_packet_filters;
    MonitoringMirrorSessionStatus_schedule_state = MonitoringMirrorSessionStatus_schedule_state;
    MonitoringPrivacyConfig_algo = MonitoringPrivacyConfig_algo;
    MonitoringSNMPTrapServer_version = MonitoringSNMPTrapServer_version;
    MonitoringSyslogAuditor_format = MonitoringSyslogAuditor_format;
    MonitoringSyslogExport_format = MonitoringSyslogExport_format;
    MonitoringSyslogExportConfig_facility_override = MonitoringSyslogExportConfig_facility_override;
    MonitoringTechSupportNodeResult_status = MonitoringTechSupportNodeResult_status;
    MonitoringTechSupportRequestStatus_status = MonitoringTechSupportRequestStatus_status;
    MonitoringTroubleshootingSessionStatus_state = MonitoringTroubleshootingSessionStatus_state;

    ApiListWatchOptions_sort_order_uihint = ApiListWatchOptions_sort_order_uihint;
    FieldsRequirement_operator_uihint = FieldsRequirement_operator_uihint;
    LabelsRequirement_operator_uihint = LabelsRequirement_operator_uihint;
    MonitoringAlertSpec_state_uihint = MonitoringAlertSpec_state_uihint;
    MonitoringArchiveRequestSpec_type_uihint = MonitoringArchiveRequestSpec_type_uihint;
    MonitoringEventPolicySpec_format_uihint = MonitoringEventPolicySpec_format_uihint;
    MonitoringExternalCred_auth_type_uihint = MonitoringExternalCred_auth_type_uihint;
    MonitoringFwlogPolicySpec_format_uihint = MonitoringFwlogPolicySpec_format_uihint;
    MonitoringFwlogPolicySpec_filter_uihint = MonitoringFwlogPolicySpec_filter_uihint;
    MonitoringMatchedRequirement_operator_uihint = MonitoringMatchedRequirement_operator_uihint;
    MonitoringMirrorCollector_type_uihint = MonitoringMirrorCollector_type_uihint;
    MonitoringMirrorSessionSpec_packet_filters_uihint = MonitoringMirrorSessionSpec_packet_filters_uihint;
    MonitoringMirrorSessionStatus_schedule_state_uihint = MonitoringMirrorSessionStatus_schedule_state_uihint;
    MonitoringSyslogAuditor_format_uihint = MonitoringSyslogAuditor_format_uihint;
    MonitoringSyslogExport_format_uihint = MonitoringSyslogExport_format_uihint;
    MonitoringSyslogExportConfig_facility_override_uihint = MonitoringSyslogExportConfig_facility_override_uihint;
    MonitoringTroubleshootingSessionStatus_state_uihint = MonitoringTroubleshootingSessionStatus_state_uihint;
}
