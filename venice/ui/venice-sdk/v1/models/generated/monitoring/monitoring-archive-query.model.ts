/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { SearchTextRequirement, ISearchTextRequirement } from './search-text-requirement.model';
import { FieldsSelector, IFieldsSelector } from './fields-selector.model';
import { LabelsSelector, ILabelsSelector } from './labels-selector.model';

export interface IMonitoringArchiveQuery {
    'texts'?: Array<ISearchTextRequirement>;
    'fields'?: IFieldsSelector;
    'labels'?: ILabelsSelector;
    'start-time'?: Date;
    'end-time'?: Date;
}


export class MonitoringArchiveQuery extends BaseModel implements IMonitoringArchiveQuery {
    /** OR of Text-requirements to be matched, Exclude is not supported for Text search. */
    'texts': Array<SearchTextRequirement> = null;
    /** Field Selector is AND of field.Requirements. */
    'fields': FieldsSelector = null;
    /** Label Selector is AND of label.Requirememts. */
    'labels': LabelsSelector = null;
    /** StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z. */
    'start-time': Date = null;
    /** EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z. */
    'end-time': Date = null;
    public static propInfo: { [prop in keyof IMonitoringArchiveQuery]: PropInfoItem } = {
        'texts': {
            description:  `OR of Text-requirements to be matched, Exclude is not supported for Text search.`,
            required: false,
            type: 'object'
        },
        'fields': {
            description:  `Field Selector is AND of field.Requirements.`,
            required: false,
            type: 'object'
        },
        'labels': {
            description:  `Label Selector is AND of label.Requirememts.`,
            required: false,
            type: 'object'
        },
        'start-time': {
            description:  `StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.`,
            required: false,
            type: 'Date'
        },
        'end-time': {
            description:  `EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.`,
            required: false,
            type: 'Date'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringArchiveQuery.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringArchiveQuery.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringArchiveQuery.propInfo[prop] != null &&
                        MonitoringArchiveQuery.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['texts'] = new Array<SearchTextRequirement>();
        this['fields'] = new FieldsSelector();
        this['labels'] = new LabelsSelector();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this.fillModelArray<SearchTextRequirement>(this, 'texts', values['texts'], SearchTextRequirement);
        } else {
            this['texts'] = [];
        }
        if (values) {
            this['fields'].setValues(values['fields'], fillDefaults);
        } else {
            this['fields'].setValues(null, fillDefaults);
        }
        if (values) {
            this['labels'].setValues(values['labels'], fillDefaults);
        } else {
            this['labels'].setValues(null, fillDefaults);
        }
        if (values && values['start-time'] != null) {
            this['start-time'] = values['start-time'];
        } else if (fillDefaults && MonitoringArchiveQuery.hasDefaultValue('start-time')) {
            this['start-time'] = MonitoringArchiveQuery.propInfo['start-time'].default;
        } else {
            this['start-time'] = null
        }
        if (values && values['end-time'] != null) {
            this['end-time'] = values['end-time'];
        } else if (fillDefaults && MonitoringArchiveQuery.hasDefaultValue('end-time')) {
            this['end-time'] = MonitoringArchiveQuery.propInfo['end-time'].default;
        } else {
            this['end-time'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'texts': new FormArray([]),
                'fields': CustomFormGroup(this['fields'].$formGroup, MonitoringArchiveQuery.propInfo['fields'].required),
                'labels': CustomFormGroup(this['labels'].$formGroup, MonitoringArchiveQuery.propInfo['labels'].required),
                'start-time': CustomFormControl(new FormControl(this['start-time']), MonitoringArchiveQuery.propInfo['start-time']),
                'end-time': CustomFormControl(new FormControl(this['end-time']), MonitoringArchiveQuery.propInfo['end-time']),
            });
            // generate FormArray control elements
            this.fillFormArray<SearchTextRequirement>('texts', this['texts'], SearchTextRequirement);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('texts') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('texts').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('fields') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('fields').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('labels') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('labels').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this.fillModelArray<SearchTextRequirement>(this, 'texts', this['texts'], SearchTextRequirement);
            this['fields'].setFormGroupValuesToBeModelValues();
            this['labels'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['start-time'].setValue(this['start-time']);
            this._formGroup.controls['end-time'].setValue(this['end-time']);
        }
    }
}

