/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IMonitoringMetricIdentifier {
    'group'?: string;
    'kind'?: string;
    'field-name'?: string;
    '_ui'?: any;
}


export class MonitoringMetricIdentifier extends BaseModel implements IMonitoringMetricIdentifier {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Metric group - e.g. ftestats, flowstats, etc. */
    'group': string = null;
    /** Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets. */
    'kind': string = null;
    /** Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored and alerts will be created/resolved based on the thresholds. */
    'field-name': string = null;
    public static propInfo: { [prop in keyof IMonitoringMetricIdentifier]: PropInfoItem } = {
        'group': {
            description:  `Metric group - e.g. ftestats, flowstats, etc.`,
            required: false,
            type: 'string'
        },
        'kind': {
            description:  `Sub-category within the group e.g. MaxSessionThresholdDrops, FlowMissPackets.`,
            required: false,
            type: 'string'
        },
        'field-name': {
            description:  `Field belonging to the kind e.g. ConnectionsPerSecond. This is the attribute that will be monitored and alerts will be created/resolved based on the thresholds.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return MonitoringMetricIdentifier.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return MonitoringMetricIdentifier.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (MonitoringMetricIdentifier.propInfo[prop] != null &&
                        MonitoringMetricIdentifier.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['group'] != null) {
            this['group'] = values['group'];
        } else if (fillDefaults && MonitoringMetricIdentifier.hasDefaultValue('group')) {
            this['group'] = MonitoringMetricIdentifier.propInfo['group'].default;
        } else {
            this['group'] = null
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        } else if (fillDefaults && MonitoringMetricIdentifier.hasDefaultValue('kind')) {
            this['kind'] = MonitoringMetricIdentifier.propInfo['kind'].default;
        } else {
            this['kind'] = null
        }
        if (values && values['field-name'] != null) {
            this['field-name'] = values['field-name'];
        } else if (fillDefaults && MonitoringMetricIdentifier.hasDefaultValue('field-name')) {
            this['field-name'] = MonitoringMetricIdentifier.propInfo['field-name'].default;
        } else {
            this['field-name'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'group': CustomFormControl(new FormControl(this['group']), MonitoringMetricIdentifier.propInfo['group']),
                'kind': CustomFormControl(new FormControl(this['kind']), MonitoringMetricIdentifier.propInfo['kind']),
                'field-name': CustomFormControl(new FormControl(this['field-name']), MonitoringMetricIdentifier.propInfo['field-name']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['group'].setValue(this['group']);
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['field-name'].setValue(this['field-name']);
        }
    }
}

