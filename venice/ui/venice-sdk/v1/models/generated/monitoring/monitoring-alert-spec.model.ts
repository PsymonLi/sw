/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { MonitoringAlertSpec_state,  MonitoringAlertSpec_state_uihint  } from './enums';

export interface IMonitoringAlertSpec {
    'state'?: MonitoringAlertSpec_state;
}


export class MonitoringAlertSpec extends BaseModel implements IMonitoringAlertSpec {
    'state': MonitoringAlertSpec_state;
    public static enumProperties: { [key: string] : EnumDef } = {
        'state': {
            enum: MonitoringAlertSpec_state_uihint,
            default: 'OPEN',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (MonitoringAlertSpec.enumProperties[prop] != null &&
                        MonitoringAlertSpec.enumProperties[prop].default != null &&
                        MonitoringAlertSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['state'] != null) {
            this['state'] = values['state'];
        } else if (MonitoringAlertSpec.hasDefaultEnumValue('state')) {
            this['state'] = <MonitoringAlertSpec_state> MonitoringAlertSpec.enumProperties['state'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'state': new FormControl(this['state'], [enumValidator(MonitoringAlertSpec_state), ]),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['state'].setValue(this['state']);
        }
    }
}

