/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IClusterPeerStatus {
    'peer-address'?: string;
    'state'?: string;
    'remote-asn'?: number;
    'address-families'?: Array<string>;
    '_ui'?: any;
}


export class ClusterPeerStatus extends BaseModel implements IClusterPeerStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** BGP peer IP address. */
    'peer-address': string = null;
    /** BGP session status. */
    'state': string = null;
    /** Remote AS number. */
    'remote-asn': number = null;
    /** BGP Address families. */
    'address-families': Array<string> = null;
    public static propInfo: { [prop in keyof IClusterPeerStatus]: PropInfoItem } = {
        'peer-address': {
            description:  `BGP peer IP address.`,
            required: false,
            type: 'string'
        },
        'state': {
            description:  `BGP session status.`,
            required: false,
            type: 'string'
        },
        'remote-asn': {
            description:  `Remote AS number.`,
            required: false,
            type: 'number'
        },
        'address-families': {
            description:  `BGP Address families.`,
            required: false,
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterPeerStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterPeerStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterPeerStatus.propInfo[prop] != null &&
                        ClusterPeerStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['address-families'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['peer-address'] != null) {
            this['peer-address'] = values['peer-address'];
        } else if (fillDefaults && ClusterPeerStatus.hasDefaultValue('peer-address')) {
            this['peer-address'] = ClusterPeerStatus.propInfo['peer-address'].default;
        } else {
            this['peer-address'] = null
        }
        if (values && values['state'] != null) {
            this['state'] = values['state'];
        } else if (fillDefaults && ClusterPeerStatus.hasDefaultValue('state')) {
            this['state'] = ClusterPeerStatus.propInfo['state'].default;
        } else {
            this['state'] = null
        }
        if (values && values['remote-asn'] != null) {
            this['remote-asn'] = values['remote-asn'];
        } else if (fillDefaults && ClusterPeerStatus.hasDefaultValue('remote-asn')) {
            this['remote-asn'] = ClusterPeerStatus.propInfo['remote-asn'].default;
        } else {
            this['remote-asn'] = null
        }
        if (values && values['address-families'] != null) {
            this['address-families'] = values['address-families'];
        } else if (fillDefaults && ClusterPeerStatus.hasDefaultValue('address-families')) {
            this['address-families'] = [ ClusterPeerStatus.propInfo['address-families'].default];
        } else {
            this['address-families'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'peer-address': CustomFormControl(new FormControl(this['peer-address']), ClusterPeerStatus.propInfo['peer-address']),
                'state': CustomFormControl(new FormControl(this['state']), ClusterPeerStatus.propInfo['state']),
                'remote-asn': CustomFormControl(new FormControl(this['remote-asn']), ClusterPeerStatus.propInfo['remote-asn']),
                'address-families': CustomFormControl(new FormControl(this['address-families']), ClusterPeerStatus.propInfo['address-families']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['peer-address'].setValue(this['peer-address']);
            this._formGroup.controls['state'].setValue(this['state']);
            this._formGroup.controls['remote-asn'].setValue(this['remote-asn']);
            this._formGroup.controls['address-families'].setValue(this['address-families']);
        }
    }
}

