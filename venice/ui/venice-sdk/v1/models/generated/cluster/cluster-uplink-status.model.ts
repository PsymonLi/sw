/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ClusterPortCondition, IClusterPortCondition } from './cluster-port-condition.model';

export interface IClusterUplinkStatus {
    'primary-mac'?: string;
    'link-speed'?: string;
    'conditions'?: Array<IClusterPortCondition>;
}


export class ClusterUplinkStatus extends BaseModel implements IClusterUplinkStatus {
    /** should be a valid MAC address
     */
    'primary-mac': string = null;
    'link-speed': string = null;
    'conditions': Array<ClusterPortCondition> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'primary-mac': {
            description:  'should be a valid MAC address ',
            hint:  'aa:BB:cc:DD:00:00, aabb.ccdd.0000, aa-BB-cc-DD-00-00',
            type: 'string'
        },
        'link-speed': {
            type: 'string'
        },
        'conditions': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterUplinkStatus.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterUplinkStatus.propInfo[prop] != null &&
                        ClusterUplinkStatus.propInfo[prop].default != null &&
                        ClusterUplinkStatus.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['conditions'] = new Array<ClusterPortCondition>();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['primary-mac'] != null) {
            this['primary-mac'] = values['primary-mac'];
        } else if (fillDefaults && ClusterUplinkStatus.hasDefaultValue('primary-mac')) {
            this['primary-mac'] = ClusterUplinkStatus.propInfo['primary-mac'].default;
        }
        if (values && values['link-speed'] != null) {
            this['link-speed'] = values['link-speed'];
        } else if (fillDefaults && ClusterUplinkStatus.hasDefaultValue('link-speed')) {
            this['link-speed'] = ClusterUplinkStatus.propInfo['link-speed'].default;
        }
        if (values) {
            this.fillModelArray<ClusterPortCondition>(this, 'conditions', values['conditions'], ClusterPortCondition);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'primary-mac': new FormControl(this['primary-mac']),
                'link-speed': new FormControl(this['link-speed']),
                'conditions': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<ClusterPortCondition>('conditions', this['conditions'], ClusterPortCondition);
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['primary-mac'].setValue(this['primary-mac']);
            this._formGroup.controls['link-speed'].setValue(this['link-speed']);
            this.fillModelArray<ClusterPortCondition>(this, 'conditions', this['conditions'], ClusterPortCondition);
        }
    }
}

