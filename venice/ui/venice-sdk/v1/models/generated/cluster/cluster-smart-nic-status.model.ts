/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';

import { ClusterSmartNICCondition } from './cluster-smart-nic-condition.model';
import { ClusterPortStatus } from './cluster-port-status.model';

export interface IClusterSmartNICStatus {
    'conditions'?: Array<ClusterSmartNICCondition>;
    'serial-num'?: string;
    'primary-mac-address'?: string;
    'ports'?: Array<ClusterPortStatus>;
}


export class ClusterSmartNICStatus extends BaseModel implements IClusterSmartNICStatus {
    'conditions': Array<ClusterSmartNICCondition>;
    'serial-num': string;
    'primary-mac-address': string;
    'ports': Array<ClusterPortStatus>;
    public static enumProperties = {
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['conditions'] = new Array<ClusterSmartNICCondition>();
        this['ports'] = new Array<ClusterPortStatus>();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<ClusterSmartNICCondition>(this, 'conditions', values['conditions'], ClusterSmartNICCondition);
            this['serial-num'] = values['serial-num'];
            this['primary-mac-address'] = values['primary-mac-address'];
            this.fillModelArray<ClusterPortStatus>(this, 'ports', values['ports'], ClusterPortStatus);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'conditions': new FormArray([]),
                'serial-num': new FormControl(this['serial-num']),
                'primary-mac-address': new FormControl(this['primary-mac-address']),
                'ports': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<ClusterSmartNICCondition>('conditions', this['conditions'], ClusterSmartNICCondition);
            // generate FormArray control elements
            this.fillFormArray<ClusterPortStatus>('ports', this['ports'], ClusterPortStatus);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<ClusterSmartNICCondition>(this, 'conditions', this['conditions'], ClusterSmartNICCondition);
            this._formGroup.controls['serial-num'].setValue(this['serial-num']);
            this._formGroup.controls['primary-mac-address'].setValue(this['primary-mac-address']);
            this.fillModelArray<ClusterPortStatus>(this, 'ports', this['ports'], ClusterPortStatus);
        }
    }
}

