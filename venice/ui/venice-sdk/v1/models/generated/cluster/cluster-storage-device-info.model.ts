/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IClusterStorageDeviceInfo {
    'serial-num'?: string;
    'type'?: string;
    'vendor'?: string;
    'capacity'?: string;
    'percent-life-used-A'?: number;
    'percent-life-used-B'?: number;
    '_ui'?: any;
}


export class ClusterStorageDeviceInfo extends BaseModel implements IClusterStorageDeviceInfo {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Serial Number. */
    'serial-num': string = null;
    /** Storage Type (TBD for Naples) Eg: SATA, SCSI, NVMe  or HDD, SSD, NVMe. */
    'type': string = null;
    /** Vendor info. */
    'vendor': string = null;
    /** Capacity in bytes. */
    'capacity': string = null;
    /** Used life in percentage. */
    'percent-life-used-A': number = null;
    'percent-life-used-B': number = null;
    public static propInfo: { [prop in keyof IClusterStorageDeviceInfo]: PropInfoItem } = {
        'serial-num': {
            description:  `Serial Number.`,
            required: false,
            type: 'string'
        },
        'type': {
            description:  `Storage Type (TBD for Naples) Eg: SATA, SCSI, NVMe  or HDD, SSD, NVMe.`,
            required: false,
            type: 'string'
        },
        'vendor': {
            description:  `Vendor info.`,
            required: false,
            type: 'string'
        },
        'capacity': {
            description:  `Capacity in bytes.`,
            required: false,
            type: 'string'
        },
        'percent-life-used-A': {
            description:  `Used life in percentage.`,
            required: false,
            type: 'number'
        },
        'percent-life-used-B': {
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterStorageDeviceInfo.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterStorageDeviceInfo.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterStorageDeviceInfo.propInfo[prop] != null &&
                        ClusterStorageDeviceInfo.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['serial-num'] != null) {
            this['serial-num'] = values['serial-num'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('serial-num')) {
            this['serial-num'] = ClusterStorageDeviceInfo.propInfo['serial-num'].default;
        } else {
            this['serial-num'] = null
        }
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('type')) {
            this['type'] = ClusterStorageDeviceInfo.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values && values['vendor'] != null) {
            this['vendor'] = values['vendor'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('vendor')) {
            this['vendor'] = ClusterStorageDeviceInfo.propInfo['vendor'].default;
        } else {
            this['vendor'] = null
        }
        if (values && values['capacity'] != null) {
            this['capacity'] = values['capacity'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('capacity')) {
            this['capacity'] = ClusterStorageDeviceInfo.propInfo['capacity'].default;
        } else {
            this['capacity'] = null
        }
        if (values && values['percent-life-used-A'] != null) {
            this['percent-life-used-A'] = values['percent-life-used-A'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('percent-life-used-A')) {
            this['percent-life-used-A'] = ClusterStorageDeviceInfo.propInfo['percent-life-used-A'].default;
        } else {
            this['percent-life-used-A'] = null
        }
        if (values && values['percent-life-used-B'] != null) {
            this['percent-life-used-B'] = values['percent-life-used-B'];
        } else if (fillDefaults && ClusterStorageDeviceInfo.hasDefaultValue('percent-life-used-B')) {
            this['percent-life-used-B'] = ClusterStorageDeviceInfo.propInfo['percent-life-used-B'].default;
        } else {
            this['percent-life-used-B'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'serial-num': CustomFormControl(new FormControl(this['serial-num']), ClusterStorageDeviceInfo.propInfo['serial-num']),
                'type': CustomFormControl(new FormControl(this['type']), ClusterStorageDeviceInfo.propInfo['type']),
                'vendor': CustomFormControl(new FormControl(this['vendor']), ClusterStorageDeviceInfo.propInfo['vendor']),
                'capacity': CustomFormControl(new FormControl(this['capacity']), ClusterStorageDeviceInfo.propInfo['capacity']),
                'percent-life-used-A': CustomFormControl(new FormControl(this['percent-life-used-A']), ClusterStorageDeviceInfo.propInfo['percent-life-used-A']),
                'percent-life-used-B': CustomFormControl(new FormControl(this['percent-life-used-B']), ClusterStorageDeviceInfo.propInfo['percent-life-used-B']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['serial-num'].setValue(this['serial-num']);
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['vendor'].setValue(this['vendor']);
            this._formGroup.controls['capacity'].setValue(this['capacity']);
            this._formGroup.controls['percent-life-used-A'].setValue(this['percent-life-used-A']);
            this._formGroup.controls['percent-life-used-B'].setValue(this['percent-life-used-B']);
        }
    }
}

