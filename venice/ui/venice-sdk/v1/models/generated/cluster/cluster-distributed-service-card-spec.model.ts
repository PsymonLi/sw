/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ClusterIPConfig, IClusterIPConfig } from './cluster-ip-config.model';
import { ClusterDistributedServiceCardSpec_mgmt_mode,  ClusterDistributedServiceCardSpec_mgmt_mode_uihint  } from './enums';
import { ClusterDistributedServiceCardSpec_network_mode,  ClusterDistributedServiceCardSpec_network_mode_uihint  } from './enums';

export interface IClusterDistributedServiceCardSpec {
    'admit'?: boolean;
    'id'?: string;
    'ip-config'?: IClusterIPConfig;
    'mgmt-mode': ClusterDistributedServiceCardSpec_mgmt_mode;
    'network-mode': ClusterDistributedServiceCardSpec_network_mode;
    'mgmt-vlan': number;
    'controllers'?: Array<string>;
    'routing-config'?: string;
    'dscprofile'?: string;
    '_ui'?: any;
}


export class ClusterDistributedServiceCardSpec extends BaseModel implements IClusterDistributedServiceCardSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Admit allows a DistributedServiceCard to join the cluster. */
    'admit': boolean = null;
    /** ID is used as a user friendly identifier in logs/events. */
    'id': string = null;
    /** IPConfig defines the static IP configuration. If not specified, DHCP will be attempted. */
    'ip-config': ClusterIPConfig = null;
    /** MgmtMode defines the management mode of the DistributedServiceCard. */
    'mgmt-mode': ClusterDistributedServiceCardSpec_mgmt_mode = null;
    /** MgmtMode defines the management mode of the DistributedServiceCard. */
    'network-mode': ClusterDistributedServiceCardSpec_network_mode = null;
    /** MgmtVlan defines the vlan to be used in network managed mode. The default of 0 means we use untagged-vlan for doing inband management. Value should be between 0 and 4095. */
    'mgmt-vlan': number = null;
    /** Controllers contains the list of remote controllers IP addresses or hostnames. */
    'controllers': Array<string> = null;
    /** RoutingConfig is the routing configuration for the underlay routed network that this DSC participates in. */
    'routing-config': string = null;
    'dscprofile': string = null;
    public static propInfo: { [prop in keyof IClusterDistributedServiceCardSpec]: PropInfoItem } = {
        'admit': {
            description:  `Admit allows a DistributedServiceCard to join the cluster.`,
            required: false,
            type: 'boolean'
        },
        'id': {
            description:  `ID is used as a user friendly identifier in logs/events.`,
            required: false,
            type: 'string'
        },
        'ip-config': {
            description:  `IPConfig defines the static IP configuration. If not specified, DHCP will be attempted.`,
            required: false,
            type: 'object'
        },
        'mgmt-mode': {
            enum: ClusterDistributedServiceCardSpec_mgmt_mode_uihint,
            default: 'host',
            description:  `MgmtMode defines the management mode of the DistributedServiceCard.`,
            required: true,
            type: 'string'
        },
        'network-mode': {
            enum: ClusterDistributedServiceCardSpec_network_mode_uihint,
            default: 'oob',
            description:  `MgmtMode defines the management mode of the DistributedServiceCard.`,
            required: true,
            type: 'string'
        },
        'mgmt-vlan': {
            description:  `MgmtVlan defines the vlan to be used in network managed mode. The default of 0 means we use untagged-vlan for doing inband management. Value should be between 0 and 4095.`,
            required: true,
            type: 'number'
        },
        'controllers': {
            description:  `Controllers contains the list of remote controllers IP addresses or hostnames.`,
            required: false,
            type: 'Array<string>'
        },
        'routing-config': {
            description:  `RoutingConfig is the routing configuration for the underlay routed network that this DSC participates in.`,
            required: false,
            type: 'string'
        },
        'dscprofile': {
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterDistributedServiceCardSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterDistributedServiceCardSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterDistributedServiceCardSpec.propInfo[prop] != null &&
                        ClusterDistributedServiceCardSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['ip-config'] = new ClusterIPConfig();
        this['controllers'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['admit'] != null) {
            this['admit'] = values['admit'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('admit')) {
            this['admit'] = ClusterDistributedServiceCardSpec.propInfo['admit'].default;
        } else {
            this['admit'] = null
        }
        if (values && values['id'] != null) {
            this['id'] = values['id'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('id')) {
            this['id'] = ClusterDistributedServiceCardSpec.propInfo['id'].default;
        } else {
            this['id'] = null
        }
        if (values) {
            this['ip-config'].setValues(values['ip-config'], fillDefaults);
        } else {
            this['ip-config'].setValues(null, fillDefaults);
        }
        if (values && values['mgmt-mode'] != null) {
            this['mgmt-mode'] = values['mgmt-mode'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('mgmt-mode')) {
            this['mgmt-mode'] = <ClusterDistributedServiceCardSpec_mgmt_mode>  ClusterDistributedServiceCardSpec.propInfo['mgmt-mode'].default;
        } else {
            this['mgmt-mode'] = null
        }
        if (values && values['network-mode'] != null) {
            this['network-mode'] = values['network-mode'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('network-mode')) {
            this['network-mode'] = <ClusterDistributedServiceCardSpec_network_mode>  ClusterDistributedServiceCardSpec.propInfo['network-mode'].default;
        } else {
            this['network-mode'] = null
        }
        if (values && values['mgmt-vlan'] != null) {
            this['mgmt-vlan'] = values['mgmt-vlan'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('mgmt-vlan')) {
            this['mgmt-vlan'] = ClusterDistributedServiceCardSpec.propInfo['mgmt-vlan'].default;
        } else {
            this['mgmt-vlan'] = null
        }
        if (values && values['controllers'] != null) {
            this['controllers'] = values['controllers'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('controllers')) {
            this['controllers'] = [ ClusterDistributedServiceCardSpec.propInfo['controllers'].default];
        } else {
            this['controllers'] = [];
        }
        if (values && values['routing-config'] != null) {
            this['routing-config'] = values['routing-config'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('routing-config')) {
            this['routing-config'] = ClusterDistributedServiceCardSpec.propInfo['routing-config'].default;
        } else {
            this['routing-config'] = null
        }
        if (values && values['dscprofile'] != null) {
            this['dscprofile'] = values['dscprofile'];
        } else if (fillDefaults && ClusterDistributedServiceCardSpec.hasDefaultValue('dscprofile')) {
            this['dscprofile'] = ClusterDistributedServiceCardSpec.propInfo['dscprofile'].default;
        } else {
            this['dscprofile'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'admit': CustomFormControl(new FormControl(this['admit']), ClusterDistributedServiceCardSpec.propInfo['admit']),
                'id': CustomFormControl(new FormControl(this['id']), ClusterDistributedServiceCardSpec.propInfo['id']),
                'ip-config': CustomFormGroup(this['ip-config'].$formGroup, ClusterDistributedServiceCardSpec.propInfo['ip-config'].required),
                'mgmt-mode': CustomFormControl(new FormControl(this['mgmt-mode'], [required, enumValidator(ClusterDistributedServiceCardSpec_mgmt_mode), ]), ClusterDistributedServiceCardSpec.propInfo['mgmt-mode']),
                'network-mode': CustomFormControl(new FormControl(this['network-mode'], [required, enumValidator(ClusterDistributedServiceCardSpec_network_mode), ]), ClusterDistributedServiceCardSpec.propInfo['network-mode']),
                'mgmt-vlan': CustomFormControl(new FormControl(this['mgmt-vlan'], [required, maxValueValidator(4095), ]), ClusterDistributedServiceCardSpec.propInfo['mgmt-vlan']),
                'controllers': CustomFormControl(new FormControl(this['controllers']), ClusterDistributedServiceCardSpec.propInfo['controllers']),
                'routing-config': CustomFormControl(new FormControl(this['routing-config']), ClusterDistributedServiceCardSpec.propInfo['routing-config']),
                'dscprofile': CustomFormControl(new FormControl(this['dscprofile']), ClusterDistributedServiceCardSpec.propInfo['dscprofile']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('ip-config') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('ip-config').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['admit'].setValue(this['admit']);
            this._formGroup.controls['id'].setValue(this['id']);
            this['ip-config'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['mgmt-mode'].setValue(this['mgmt-mode']);
            this._formGroup.controls['network-mode'].setValue(this['network-mode']);
            this._formGroup.controls['mgmt-vlan'].setValue(this['mgmt-vlan']);
            this._formGroup.controls['controllers'].setValue(this['controllers']);
            this._formGroup.controls['routing-config'].setValue(this['routing-config']);
            this._formGroup.controls['dscprofile'].setValue(this['dscprofile']);
        }
    }
}

