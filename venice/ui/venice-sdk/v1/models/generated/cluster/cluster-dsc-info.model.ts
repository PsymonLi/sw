/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ClusterBiosInfo, IClusterBiosInfo } from './cluster-bios-info.model';
import { ClusterOsInfo, IClusterOsInfo } from './cluster-os-info.model';
import { ClusterCPUInfo, IClusterCPUInfo } from './cluster-cpu-info.model';
import { ClusterMemInfo, IClusterMemInfo } from './cluster-mem-info.model';
import { ClusterStorageInfo, IClusterStorageInfo } from './cluster-storage-info.model';

export interface IClusterDSCInfo {
    'bios-info'?: IClusterBiosInfo;
    'os-info'?: IClusterOsInfo;
    'cpu-info'?: IClusterCPUInfo;
    'memory-info'?: IClusterMemInfo;
    'storage-info'?: IClusterStorageInfo;
}


export class ClusterDSCInfo extends BaseModel implements IClusterDSCInfo {
    'bios-info': ClusterBiosInfo = null;
    'os-info': ClusterOsInfo = null;
    'cpu-info': ClusterCPUInfo = null;
    'memory-info': ClusterMemInfo = null;
    'storage-info': ClusterStorageInfo = null;
    public static propInfo: { [prop in keyof IClusterDSCInfo]: PropInfoItem } = {
        'bios-info': {
            required: false,
            type: 'object'
        },
        'os-info': {
            required: false,
            type: 'object'
        },
        'cpu-info': {
            required: false,
            type: 'object'
        },
        'memory-info': {
            required: false,
            type: 'object'
        },
        'storage-info': {
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterDSCInfo.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterDSCInfo.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterDSCInfo.propInfo[prop] != null &&
                        ClusterDSCInfo.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['bios-info'] = new ClusterBiosInfo();
        this['os-info'] = new ClusterOsInfo();
        this['cpu-info'] = new ClusterCPUInfo();
        this['memory-info'] = new ClusterMemInfo();
        this['storage-info'] = new ClusterStorageInfo();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values) {
            this['bios-info'].setValues(values['bios-info'], fillDefaults);
        } else {
            this['bios-info'].setValues(null, fillDefaults);
        }
        if (values) {
            this['os-info'].setValues(values['os-info'], fillDefaults);
        } else {
            this['os-info'].setValues(null, fillDefaults);
        }
        if (values) {
            this['cpu-info'].setValues(values['cpu-info'], fillDefaults);
        } else {
            this['cpu-info'].setValues(null, fillDefaults);
        }
        if (values) {
            this['memory-info'].setValues(values['memory-info'], fillDefaults);
        } else {
            this['memory-info'].setValues(null, fillDefaults);
        }
        if (values) {
            this['storage-info'].setValues(values['storage-info'], fillDefaults);
        } else {
            this['storage-info'].setValues(null, fillDefaults);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'bios-info': CustomFormGroup(this['bios-info'].$formGroup, ClusterDSCInfo.propInfo['bios-info'].required),
                'os-info': CustomFormGroup(this['os-info'].$formGroup, ClusterDSCInfo.propInfo['os-info'].required),
                'cpu-info': CustomFormGroup(this['cpu-info'].$formGroup, ClusterDSCInfo.propInfo['cpu-info'].required),
                'memory-info': CustomFormGroup(this['memory-info'].$formGroup, ClusterDSCInfo.propInfo['memory-info'].required),
                'storage-info': CustomFormGroup(this['storage-info'].$formGroup, ClusterDSCInfo.propInfo['storage-info'].required),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('bios-info') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('bios-info').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('os-info') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('os-info').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('cpu-info') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('cpu-info').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('memory-info') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('memory-info').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('storage-info') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('storage-info').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this['bios-info'].setFormGroupValuesToBeModelValues();
            this['os-info'].setFormGroupValuesToBeModelValues();
            this['cpu-info'].setFormGroupValuesToBeModelValues();
            this['memory-info'].setFormGroupValuesToBeModelValues();
            this['storage-info'].setFormGroupValuesToBeModelValues();
        }
    }
}

