/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ClusterNodeStatus_phase,  ClusterNodeStatus_phase_uihint  } from './enums';
import { ClusterNodeCondition, IClusterNodeCondition } from './cluster-node-condition.model';

export interface IClusterNodeStatus {
    'phase'?: ClusterNodeStatus_phase;
    'quorum'?: boolean;
    'conditions'?: Array<IClusterNodeCondition>;
}


export class ClusterNodeStatus extends BaseModel implements IClusterNodeStatus {
    /** Current lifecycle phase of the node. */
    'phase': ClusterNodeStatus_phase = null;
    /** Quorum node or not. */
    'quorum': boolean = null;
    'conditions': Array<ClusterNodeCondition> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'phase': {
            enum: ClusterNodeStatus_phase_uihint,
            default: 'UNKNOWN',
            description:  'Current lifecycle phase of the node.',
            type: 'string'
        },
        'quorum': {
            description:  'Quorum node or not.',
            type: 'boolean'
        },
        'conditions': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterNodeStatus.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterNodeStatus.propInfo[prop] != null &&
                        ClusterNodeStatus.propInfo[prop].default != null &&
                        ClusterNodeStatus.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['conditions'] = new Array<ClusterNodeCondition>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['phase'] != null) {
            this['phase'] = values['phase'];
        } else if (ClusterNodeStatus.hasDefaultValue('phase')) {
            this['phase'] = <ClusterNodeStatus_phase>  ClusterNodeStatus.propInfo['phase'].default;
        }
        if (values && values['quorum'] != null) {
            this['quorum'] = values['quorum'];
        } else if (ClusterNodeStatus.hasDefaultValue('quorum')) {
            this['quorum'] = ClusterNodeStatus.propInfo['quorum'].default;
        }
        if (values) {
            this.fillModelArray<ClusterNodeCondition>(this, 'conditions', values['conditions'], ClusterNodeCondition);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'phase': new FormControl(this['phase'], [enumValidator(ClusterNodeStatus_phase), ]),
                'quorum': new FormControl(this['quorum']),
                'conditions': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<ClusterNodeCondition>('conditions', this['conditions'], ClusterNodeCondition);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['phase'].setValue(this['phase']);
            this._formGroup.controls['quorum'].setValue(this['quorum']);
            this.fillModelArray<ClusterNodeCondition>(this, 'conditions', this['conditions'], ClusterNodeCondition);
        }
    }
}

