/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ClusterDSCProfileSpec_deployment_target,  ClusterDSCProfileSpec_deployment_target_uihint  } from './enums';
import { ClusterDSCProfileSpec_feature_set,  ClusterDSCProfileSpec_feature_set_uihint  } from './enums';

export interface IClusterDSCProfileSpec {
    'deployment-target': ClusterDSCProfileSpec_deployment_target;
    'feature-set': ClusterDSCProfileSpec_feature_set;
    '_ui'?: any;
}


export class ClusterDSCProfileSpec extends BaseModel implements IClusterDSCProfileSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'deployment-target': ClusterDSCProfileSpec_deployment_target = null;
    'feature-set': ClusterDSCProfileSpec_feature_set = null;
    public static propInfo: { [prop in keyof IClusterDSCProfileSpec]: PropInfoItem } = {
        'deployment-target': {
            enum: ClusterDSCProfileSpec_deployment_target_uihint,
            default: 'host',
            required: true,
            type: 'string'
        },
        'feature-set': {
            enum: ClusterDSCProfileSpec_feature_set_uihint,
            default: 'smartnic',
            required: true,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterDSCProfileSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterDSCProfileSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterDSCProfileSpec.propInfo[prop] != null &&
                        ClusterDSCProfileSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['deployment-target'] != null) {
            this['deployment-target'] = values['deployment-target'];
        } else if (fillDefaults && ClusterDSCProfileSpec.hasDefaultValue('deployment-target')) {
            this['deployment-target'] = <ClusterDSCProfileSpec_deployment_target>  ClusterDSCProfileSpec.propInfo['deployment-target'].default;
        } else {
            this['deployment-target'] = null
        }
        if (values && values['feature-set'] != null) {
            this['feature-set'] = values['feature-set'];
        } else if (fillDefaults && ClusterDSCProfileSpec.hasDefaultValue('feature-set')) {
            this['feature-set'] = <ClusterDSCProfileSpec_feature_set>  ClusterDSCProfileSpec.propInfo['feature-set'].default;
        } else {
            this['feature-set'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'deployment-target': CustomFormControl(new FormControl(this['deployment-target'], [required, enumValidator(ClusterDSCProfileSpec_deployment_target), ]), ClusterDSCProfileSpec.propInfo['deployment-target']),
                'feature-set': CustomFormControl(new FormControl(this['feature-set'], [required, enumValidator(ClusterDSCProfileSpec_feature_set), ]), ClusterDSCProfileSpec.propInfo['feature-set']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['deployment-target'].setValue(this['deployment-target']);
            this._formGroup.controls['feature-set'].setValue(this['feature-set']);
        }
    }
}

