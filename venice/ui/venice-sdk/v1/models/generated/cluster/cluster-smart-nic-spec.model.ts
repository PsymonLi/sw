/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ClusterIPConfig, IClusterIPConfig } from './cluster-ip-config.model';
import { ClusterSmartNICSpec_mgmt_mode,  ClusterSmartNICSpec_mgmt_mode_uihint  } from './enums';

export interface IClusterSmartNICSpec {
    'admit'?: boolean;
    'hostname'?: string;
    'ip-config'?: IClusterIPConfig;
    'mgmt-mode'?: ClusterSmartNICSpec_mgmt_mode;
    'mgmt-vlan'?: number;
    'controllers'?: Array<string>;
}


export class ClusterSmartNICSpec extends BaseModel implements IClusterSmartNICSpec {
    'admit': boolean = null;
    'hostname': string = null;
    'ip-config': ClusterIPConfig = null;
    'mgmt-mode': ClusterSmartNICSpec_mgmt_mode = null;
    /** MgmtVlan defines the vlan to be used in network managed mode. The default of 0
    implies OOB 1G mgmt port is used for management. A non 0 vlan switches the
    management port to a vlan on data ports. */
    'mgmt-vlan': number = null;
    'controllers': Array<string> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'admit': {
            type: 'boolean'
        },
        'hostname': {
            type: 'string'
        },
        'ip-config': {
            type: 'object'
        },
        'mgmt-mode': {
            enum: ClusterSmartNICSpec_mgmt_mode_uihint,
            default: 'HOST',
            type: 'string'
        },
        'mgmt-vlan': {
            description:  'MgmtVlan defines the vlan to be used in network managed mode. The default of 0 implies OOB 1G mgmt port is used for management. A non 0 vlan switches the management port to a vlan on data ports.',
            type: 'number'
        },
        'controllers': {
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterSmartNICSpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterSmartNICSpec.propInfo[prop] != null &&
                        ClusterSmartNICSpec.propInfo[prop].default != null &&
                        ClusterSmartNICSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['ip-config'] = new ClusterIPConfig();
        this['controllers'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['admit'] != null) {
            this['admit'] = values['admit'];
        } else if (ClusterSmartNICSpec.hasDefaultValue('admit')) {
            this['admit'] = ClusterSmartNICSpec.propInfo['admit'].default;
        }
        if (values && values['hostname'] != null) {
            this['hostname'] = values['hostname'];
        } else if (ClusterSmartNICSpec.hasDefaultValue('hostname')) {
            this['hostname'] = ClusterSmartNICSpec.propInfo['hostname'].default;
        }
        if (values) {
            this['ip-config'].setValues(values['ip-config']);
        }
        if (values && values['mgmt-mode'] != null) {
            this['mgmt-mode'] = values['mgmt-mode'];
        } else if (ClusterSmartNICSpec.hasDefaultValue('mgmt-mode')) {
            this['mgmt-mode'] = <ClusterSmartNICSpec_mgmt_mode>  ClusterSmartNICSpec.propInfo['mgmt-mode'].default;
        }
        if (values && values['mgmt-vlan'] != null) {
            this['mgmt-vlan'] = values['mgmt-vlan'];
        } else if (ClusterSmartNICSpec.hasDefaultValue('mgmt-vlan')) {
            this['mgmt-vlan'] = ClusterSmartNICSpec.propInfo['mgmt-vlan'].default;
        }
        if (values) {
            this.fillModelArray<string>(this, 'controllers', values['controllers']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'admit': new FormControl(this['admit']),
                'hostname': new FormControl(this['hostname']),
                'ip-config': this['ip-config'].$formGroup,
                'mgmt-mode': new FormControl(this['mgmt-mode'], [enumValidator(ClusterSmartNICSpec_mgmt_mode), ]),
                'mgmt-vlan': new FormControl(this['mgmt-vlan'], [maxValueValidator(4095), ]),
                'controllers': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('controllers', this['controllers']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['admit'].setValue(this['admit']);
            this._formGroup.controls['hostname'].setValue(this['hostname']);
            this['ip-config'].setFormGroupValues();
            this._formGroup.controls['mgmt-mode'].setValue(this['mgmt-mode']);
            this._formGroup.controls['mgmt-vlan'].setValue(this['mgmt-vlan']);
            this.fillModelArray<string>(this, 'controllers', this['controllers']);
        }
    }
}

