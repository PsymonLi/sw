/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ClusterQuorumMemberCondition_type,  ClusterQuorumMemberCondition_type_uihint  } from './enums';
import { ClusterQuorumMemberCondition_status,  ClusterQuorumMemberCondition_status_uihint  } from './enums';

export interface IClusterQuorumMemberCondition {
    'type': ClusterQuorumMemberCondition_type;
    'status': ClusterQuorumMemberCondition_status;
    'last-transition-time'?: Date;
}


export class ClusterQuorumMemberCondition extends BaseModel implements IClusterQuorumMemberCondition {
    'type': ClusterQuorumMemberCondition_type = null;
    'status': ClusterQuorumMemberCondition_status = null;
    'last-transition-time': Date = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'type': {
            enum: ClusterQuorumMemberCondition_type_uihint,
            default: 'healthy',
            required: true,
            type: 'string'
        },
        'status': {
            enum: ClusterQuorumMemberCondition_status_uihint,
            default: 'unknown',
            required: true,
            type: 'string'
        },
        'last-transition-time': {
            required: false,
            type: 'Date'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterQuorumMemberCondition.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ClusterQuorumMemberCondition.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterQuorumMemberCondition.propInfo[prop] != null &&
                        ClusterQuorumMemberCondition.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && ClusterQuorumMemberCondition.hasDefaultValue('type')) {
            this['type'] = <ClusterQuorumMemberCondition_type>  ClusterQuorumMemberCondition.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values && values['status'] != null) {
            this['status'] = values['status'];
        } else if (fillDefaults && ClusterQuorumMemberCondition.hasDefaultValue('status')) {
            this['status'] = <ClusterQuorumMemberCondition_status>  ClusterQuorumMemberCondition.propInfo['status'].default;
        } else {
            this['status'] = null
        }
        if (values && values['last-transition-time'] != null) {
            this['last-transition-time'] = values['last-transition-time'];
        } else if (fillDefaults && ClusterQuorumMemberCondition.hasDefaultValue('last-transition-time')) {
            this['last-transition-time'] = ClusterQuorumMemberCondition.propInfo['last-transition-time'].default;
        } else {
            this['last-transition-time'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'type': CustomFormControl(new FormControl(this['type'], [required, enumValidator(ClusterQuorumMemberCondition_type), ]), ClusterQuorumMemberCondition.propInfo['type']),
                'status': CustomFormControl(new FormControl(this['status'], [required, enumValidator(ClusterQuorumMemberCondition_status), ]), ClusterQuorumMemberCondition.propInfo['status']),
                'last-transition-time': CustomFormControl(new FormControl(this['last-transition-time']), ClusterQuorumMemberCondition.propInfo['last-transition-time']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['status'].setValue(this['status']);
            this._formGroup.controls['last-transition-time'].setValue(this['last-transition-time']);
        }
    }
}

