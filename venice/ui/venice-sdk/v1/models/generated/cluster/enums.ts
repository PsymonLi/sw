/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum ApiListWatchOptions_sort_order {
    'None' = "None",
    'ByName' = "ByName",
    'ByNameReverse' = "ByNameReverse",
    'ByVersion' = "ByVersion",
    'ByVersionReverse' = "ByVersionReverse",
    'ByCreationTime' = "ByCreationTime",
    'ByCreationTimeReverse' = "ByCreationTimeReverse",
    'ByModTime' = "ByModTime",
    'ByModTimeReverse' = "ByModTimeReverse",
}

export enum ClusterClusterCondition_type {
    'HEALTHY' = "HEALTHY",
}

export enum ClusterClusterCondition_status {
    'UNKNOWN' = "UNKNOWN",
    'TRUE' = "TRUE",
    'FALSE' = "FALSE",
}

export enum ClusterMemInfo_type {
    'UNKNOWN' = "UNKNOWN",
    'HBM' = "HBM",
    'DDR' = "DDR",
}

export enum ClusterNodeCondition_type {
    'LEADER' = "LEADER",
    'HEALTHY' = "HEALTHY",
}

export enum ClusterNodeCondition_status {
    'UNKNOWN' = "UNKNOWN",
    'TRUE' = "TRUE",
    'FALSE' = "FALSE",
}

export enum ClusterNodeStatus_phase {
    'UNKNOWN' = "UNKNOWN",
    'PENDING' = "PENDING",
    'JOINED' = "JOINED",
    'FAILED' = "FAILED",
}

export enum ClusterSmartNICCondition_type {
    'HEALTHY' = "HEALTHY",
    'NIC_HEALTH_UNKNOWN' = "NIC_HEALTH_UNKNOWN",
}

export enum ClusterSmartNICCondition_status {
    'UNKNOWN' = "UNKNOWN",
    'TRUE' = "TRUE",
    'FALSE' = "FALSE",
}

export enum ClusterSmartNICSpec_mgmt_mode {
    'HOST' = "HOST",
    'NETWORK' = "NETWORK",
}

export enum ClusterSmartNICSpec_network_mode {
    'OOB' = "OOB",
    'INBAND' = "INBAND",
}

export enum ClusterSmartNICStatus_admission_phase {
    'UNKNOWN' = "UNKNOWN",
    'REGISTERING' = "REGISTERING",
    'REJECTED' = "REJECTED",
    'PENDING' = "PENDING",
    'ADMITTED' = "ADMITTED",
    'DECOMMISSIONED' = "DECOMMISSIONED",
}


export enum ApiListWatchOptions_sort_order_uihint {
    'ByCreationTime' = "By Creation Time",
    'ByCreationTimeReverse' = "By Creation Time Reverse",
    'ByModTime' = "By Modification Time",
    'ByModTimeReverse' = "By Modification Time Reverse",
    'ByName' = "By Name",
    'ByNameReverse' = "By Name Reverse",
    'ByVersion' = "By Version",
    'ByVersionReverse' = "By Version Reverse",
    'None' = "None",
}

export enum ClusterClusterCondition_type_uihint {
    'HEALTHY' = "Healthy",
}

export enum ClusterClusterCondition_status_uihint {
    'FALSE' = "False",
    'TRUE' = "True",
    'UNKNOWN' = "Unknown",
}

export enum ClusterNodeCondition_type_uihint {
    'HEALTHY' = "Healthy",
    'LEADER' = "Leader",
}

export enum ClusterNodeCondition_status_uihint {
    'FALSE' = "False",
    'TRUE' = "True",
    'UNKNOWN' = "Unknown",
}

export enum ClusterNodeStatus_phase_uihint {
    'FAILED' = "Failed",
    'JOINED' = "Joined",
    'PENDING' = "Pending",
    'UNKNOWN' = "Unknown",
}

export enum ClusterSmartNICCondition_type_uihint {
    'HEALTHY' = "Healthy",
    'NIC_HEALTH_UNKNOWN' = "Not Reachable",
}

export enum ClusterSmartNICCondition_status_uihint {
    'FALSE' = "False",
    'TRUE' = "True",
    'UNKNOWN' = "Unknown",
}

export enum ClusterSmartNICSpec_mgmt_mode_uihint {
    'HOST' = "Host",
    'NETWORK' = "Network",
}

export enum ClusterSmartNICSpec_network_mode_uihint {
    'INBAND' = "Inband",
    'OOB' = "Out of Band",
}

export enum ClusterSmartNICStatus_admission_phase_uihint {
    'ADMITTED' = "Admitted",
    'DECOMMISSIONED' = "Decommissioned",
    'PENDING' = "Pending",
    'REGISTERING' = "Registering",
    'REJECTED' = "Rejected",
    'UNKNOWN' = "Unknown",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    ApiListWatchOptions_sort_order = ApiListWatchOptions_sort_order;
    ClusterClusterCondition_type = ClusterClusterCondition_type;
    ClusterClusterCondition_status = ClusterClusterCondition_status;
    ClusterMemInfo_type = ClusterMemInfo_type;
    ClusterNodeCondition_type = ClusterNodeCondition_type;
    ClusterNodeCondition_status = ClusterNodeCondition_status;
    ClusterNodeStatus_phase = ClusterNodeStatus_phase;
    ClusterSmartNICCondition_type = ClusterSmartNICCondition_type;
    ClusterSmartNICCondition_status = ClusterSmartNICCondition_status;
    ClusterSmartNICSpec_mgmt_mode = ClusterSmartNICSpec_mgmt_mode;
    ClusterSmartNICSpec_network_mode = ClusterSmartNICSpec_network_mode;
    ClusterSmartNICStatus_admission_phase = ClusterSmartNICStatus_admission_phase;

    ApiListWatchOptions_sort_order_uihint = ApiListWatchOptions_sort_order_uihint;
    ClusterClusterCondition_type_uihint = ClusterClusterCondition_type_uihint;
    ClusterClusterCondition_status_uihint = ClusterClusterCondition_status_uihint;
    ClusterNodeCondition_type_uihint = ClusterNodeCondition_type_uihint;
    ClusterNodeCondition_status_uihint = ClusterNodeCondition_status_uihint;
    ClusterNodeStatus_phase_uihint = ClusterNodeStatus_phase_uihint;
    ClusterSmartNICCondition_type_uihint = ClusterSmartNICCondition_type_uihint;
    ClusterSmartNICCondition_status_uihint = ClusterSmartNICCondition_status_uihint;
    ClusterSmartNICSpec_mgmt_mode_uihint = ClusterSmartNICSpec_mgmt_mode_uihint;
    ClusterSmartNICSpec_network_mode_uihint = ClusterSmartNICSpec_network_mode_uihint;
    ClusterSmartNICStatus_admission_phase_uihint = ClusterSmartNICStatus_admission_phase_uihint;
}
