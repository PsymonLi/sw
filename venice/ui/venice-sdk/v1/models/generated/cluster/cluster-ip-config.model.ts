/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';


export interface IClusterIPConfig {
    'cidr'?: string;
    'default-gw'?: string;
    'dns-servers'?: Array<string>;
}


export class ClusterIPConfig extends BaseModel implements IClusterIPConfig {
    'cidr': string = null;
    'default-gw': string = null;
    'dns-servers': Array<string> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'cidr': {
            type: 'string'
        },
        'default-gw': {
            type: 'string'
        },
        'dns-servers': {
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterIPConfig.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterIPConfig.propInfo[prop] != null &&
                        ClusterIPConfig.propInfo[prop].default != null &&
                        ClusterIPConfig.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['dns-servers'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['cidr'] != null) {
            this['cidr'] = values['cidr'];
        } else if (ClusterIPConfig.hasDefaultValue('cidr')) {
            this['cidr'] = ClusterIPConfig.propInfo['cidr'].default;
        }
        if (values && values['default-gw'] != null) {
            this['default-gw'] = values['default-gw'];
        } else if (ClusterIPConfig.hasDefaultValue('default-gw')) {
            this['default-gw'] = ClusterIPConfig.propInfo['default-gw'].default;
        }
        if (values) {
            this.fillModelArray<string>(this, 'dns-servers', values['dns-servers']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'cidr': new FormControl(this['cidr']),
                'default-gw': new FormControl(this['default-gw']),
                'dns-servers': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('dns-servers', this['dns-servers']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['cidr'].setValue(this['cidr']);
            this._formGroup.controls['default-gw'].setValue(this['default-gw']);
            this.fillModelArray<string>(this, 'dns-servers', this['dns-servers']);
        }
    }
}

