/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ClusterSmartNICCondition_type,  ClusterSmartNICCondition_type_uihint  } from './enums';
import { ClusterSmartNICCondition_status,  ClusterSmartNICCondition_status_uihint  } from './enums';

export interface IClusterSmartNICCondition {
    'type'?: ClusterSmartNICCondition_type;
    'status'?: ClusterSmartNICCondition_status;
    'last-transition-time'?: string;
    'reason'?: string;
    'message'?: string;
}


export class ClusterSmartNICCondition extends BaseModel implements IClusterSmartNICCondition {
    'type': ClusterSmartNICCondition_type = null;
    'status': ClusterSmartNICCondition_status = null;
    'last-transition-time': string = null;
    'reason': string = null;
    /** A detailed message indicating details about the transition. */
    'message': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'type': {
            enum: ClusterSmartNICCondition_type_uihint,
            default: 'HEALTHY',
            type: 'string'
        },
        'status': {
            enum: ClusterSmartNICCondition_status_uihint,
            default: 'UNKNOWN',
            type: 'string'
        },
        'last-transition-time': {
            type: 'string'
        },
        'reason': {
            type: 'string'
        },
        'message': {
            description:  'A detailed message indicating details about the transition.',
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterSmartNICCondition.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterSmartNICCondition.propInfo[prop] != null &&
                        ClusterSmartNICCondition.propInfo[prop].default != null &&
                        ClusterSmartNICCondition.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (ClusterSmartNICCondition.hasDefaultValue('type')) {
            this['type'] = <ClusterSmartNICCondition_type>  ClusterSmartNICCondition.propInfo['type'].default;
        }
        if (values && values['status'] != null) {
            this['status'] = values['status'];
        } else if (ClusterSmartNICCondition.hasDefaultValue('status')) {
            this['status'] = <ClusterSmartNICCondition_status>  ClusterSmartNICCondition.propInfo['status'].default;
        }
        if (values && values['last-transition-time'] != null) {
            this['last-transition-time'] = values['last-transition-time'];
        } else if (ClusterSmartNICCondition.hasDefaultValue('last-transition-time')) {
            this['last-transition-time'] = ClusterSmartNICCondition.propInfo['last-transition-time'].default;
        }
        if (values && values['reason'] != null) {
            this['reason'] = values['reason'];
        } else if (ClusterSmartNICCondition.hasDefaultValue('reason')) {
            this['reason'] = ClusterSmartNICCondition.propInfo['reason'].default;
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        } else if (ClusterSmartNICCondition.hasDefaultValue('message')) {
            this['message'] = ClusterSmartNICCondition.propInfo['message'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'type': new FormControl(this['type'], [enumValidator(ClusterSmartNICCondition_type), ]),
                'status': new FormControl(this['status'], [enumValidator(ClusterSmartNICCondition_status), ]),
                'last-transition-time': new FormControl(this['last-transition-time']),
                'reason': new FormControl(this['reason']),
                'message': new FormControl(this['message']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['status'].setValue(this['status']);
            this._formGroup.controls['last-transition-time'].setValue(this['last-transition-time']);
            this._formGroup.controls['reason'].setValue(this['reason']);
            this._formGroup.controls['message'].setValue(this['message']);
        }
    }
}

