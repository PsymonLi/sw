/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ClusterPortCondition, IClusterPortCondition } from './cluster-port-condition.model';

export interface IClusterPortStatus {
    'mac-addrs'?: Array<string>;
    'link-speed'?: string;
    'conditions'?: Array<IClusterPortCondition>;
}


export class ClusterPortStatus extends BaseModel implements IClusterPortStatus {
    'mac-addrs': Array<string> = null;
    'link-speed': string = null;
    'conditions': Array<ClusterPortCondition> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'mac-addrs': {
            type: 'Array<string>'
        },
        'link-speed': {
            type: 'string'
        },
        'conditions': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ClusterPortStatus.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ClusterPortStatus.propInfo[prop] != null &&
                        ClusterPortStatus.propInfo[prop].default != null &&
                        ClusterPortStatus.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['mac-addrs'] = new Array<string>();
        this['conditions'] = new Array<ClusterPortCondition>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<string>(this, 'mac-addrs', values['mac-addrs']);
        }
        if (values && values['link-speed'] != null) {
            this['link-speed'] = values['link-speed'];
        } else if (ClusterPortStatus.hasDefaultValue('link-speed')) {
            this['link-speed'] = ClusterPortStatus.propInfo['link-speed'].default;
        }
        if (values) {
            this.fillModelArray<ClusterPortCondition>(this, 'conditions', values['conditions'], ClusterPortCondition);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'mac-addrs': new FormArray([]),
                'link-speed': new FormControl(this['link-speed']),
                'conditions': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('mac-addrs', this['mac-addrs']);
            // generate FormArray control elements
            this.fillFormArray<ClusterPortCondition>('conditions', this['conditions'], ClusterPortCondition);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<string>(this, 'mac-addrs', this['mac-addrs']);
            this._formGroup.controls['link-speed'].setValue(this['link-speed']);
            this.fillModelArray<ClusterPortCondition>(this, 'conditions', this['conditions'], ClusterPortCondition);
        }
    }
}

