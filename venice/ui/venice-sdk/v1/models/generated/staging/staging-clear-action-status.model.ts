/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { StagingClearActionStatus_status,  } from './enums';

export interface IStagingClearActionStatus {
    'status'?: StagingClearActionStatus_status;
    'reason'?: string;
}


export class StagingClearActionStatus extends BaseModel implements IStagingClearActionStatus {
    'status': StagingClearActionStatus_status = null;
    'reason': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'status': {
            enum: StagingClearActionStatus_status,
            default: 'SUCCESS',
            type: 'string'
        },
        'reason': {
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return StagingClearActionStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return StagingClearActionStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (StagingClearActionStatus.propInfo[prop] != null &&
                        StagingClearActionStatus.propInfo[prop].default != null &&
                        StagingClearActionStatus.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['status'] != null) {
            this['status'] = values['status'];
        } else if (fillDefaults && StagingClearActionStatus.hasDefaultValue('status')) {
            this['status'] = <StagingClearActionStatus_status>  StagingClearActionStatus.propInfo['status'].default;
        }
        if (values && values['reason'] != null) {
            this['reason'] = values['reason'];
        } else if (fillDefaults && StagingClearActionStatus.hasDefaultValue('reason')) {
            this['reason'] = StagingClearActionStatus.propInfo['reason'].default;
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'status': new FormControl(this['status'], [required, enumValidator(StagingClearActionStatus_status), ]),
                'reason': new FormControl(this['reason']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['status'].setValue(this['status']);
            this._formGroup.controls['reason'].setValue(this['reason']);
        }
    }
}

