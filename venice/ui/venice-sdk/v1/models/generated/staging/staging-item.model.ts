/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { ApiAny, IApiAny } from './api-any.model';

export interface IStagingItem {
    'uri'?: string;
    'method'?: string;
    'object'?: IApiAny;
}


export class StagingItem extends BaseModel implements IStagingItem {
    'uri': string = null;
    'method': string = null;
    'object': ApiAny = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'uri': {
            type: 'string'
        },
        'method': {
            type: 'string'
        },
        'object': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return StagingItem.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (StagingItem.propInfo[prop] != null &&
                        StagingItem.propInfo[prop].default != null &&
                        StagingItem.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['object'] = new ApiAny();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        } else if (StagingItem.hasDefaultValue('uri')) {
            this['uri'] = StagingItem.propInfo['uri'].default;
        }
        if (values && values['method'] != null) {
            this['method'] = values['method'];
        } else if (StagingItem.hasDefaultValue('method')) {
            this['method'] = StagingItem.propInfo['method'].default;
        }
        if (values) {
            this['object'].setValues(values['object']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'uri': new FormControl(this['uri']),
                'method': new FormControl(this['method']),
                'object': this['object'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['uri'].setValue(this['uri']);
            this._formGroup.controls['method'].setValue(this['method']);
            this['object'].setFormGroupValues();
        }
    }
}

