/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';


export interface IStagingValidationError {
    'uri'?: string;
    'method'?: string;
    'error'?: Array<string>;
}


export class StagingValidationError extends BaseModel implements IStagingValidationError {
    'uri': string = null;
    'method': string = null;
    'error': Array<string> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'uri': {
            type: 'string'
        },
        'method': {
            type: 'string'
        },
        'error': {
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return StagingValidationError.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return StagingValidationError.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (StagingValidationError.propInfo[prop] != null &&
                        StagingValidationError.propInfo[prop].default != null &&
                        StagingValidationError.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['error'] = new Array<string>();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        } else if (fillDefaults && StagingValidationError.hasDefaultValue('uri')) {
            this['uri'] = StagingValidationError.propInfo['uri'].default;
        } else {
            this['uri'] = null
        }
        if (values && values['method'] != null) {
            this['method'] = values['method'];
        } else if (fillDefaults && StagingValidationError.hasDefaultValue('method')) {
            this['method'] = StagingValidationError.propInfo['method'].default;
        } else {
            this['method'] = null
        }
        if (values && values['error'] != null) {
            this['error'] = values['error'];
        } else if (fillDefaults && StagingValidationError.hasDefaultValue('error')) {
            this['error'] = [ StagingValidationError.propInfo['error'].default];
        } else {
            this['error'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'uri': new FormControl(this['uri']),
                'method': new FormControl(this['method']),
                'error': new FormControl(this['error']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['uri'].setValue(this['uri']);
            this._formGroup.controls['method'].setValue(this['method']);
            this._formGroup.controls['error'].setValue(this['error']);
        }
    }
}

