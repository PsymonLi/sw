/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface INetworkDHCPServer {
    'ip-address': string;
    'virtual-router'?: string;
}


export class NetworkDHCPServer extends BaseModel implements INetworkDHCPServer {
    /** IP Address of the server. */
    'ip-address': string = null;
    /** Destination VRF where the server is connected. An empty value specifies that the server is reachable in the same vrf as the one where the policy is attached. */
    'virtual-router': string = null;
    public static propInfo: { [prop in keyof INetworkDHCPServer]: PropInfoItem } = {
        'ip-address': {
            description:  `IP Address of the server.`,
            hint:  '10.1.1.1, ff02::5 ',
            required: true,
            type: 'string'
        },
        'virtual-router': {
            description:  `Destination VRF where the server is connected. An empty value specifies that the server is reachable in the same vrf as the one where the policy is attached.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkDHCPServer.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkDHCPServer.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkDHCPServer.propInfo[prop] != null &&
                        NetworkDHCPServer.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['ip-address'] != null) {
            this['ip-address'] = values['ip-address'];
        } else if (fillDefaults && NetworkDHCPServer.hasDefaultValue('ip-address')) {
            this['ip-address'] = NetworkDHCPServer.propInfo['ip-address'].default;
        } else {
            this['ip-address'] = null
        }
        if (values && values['virtual-router'] != null) {
            this['virtual-router'] = values['virtual-router'];
        } else if (fillDefaults && NetworkDHCPServer.hasDefaultValue('virtual-router')) {
            this['virtual-router'] = NetworkDHCPServer.propInfo['virtual-router'].default;
        } else {
            this['virtual-router'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'ip-address': CustomFormControl(new FormControl(this['ip-address'], [required, ]), NetworkDHCPServer.propInfo['ip-address']),
                'virtual-router': CustomFormControl(new FormControl(this['virtual-router']), NetworkDHCPServer.propInfo['virtual-router']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['ip-address'].setValue(this['ip-address']);
            this._formGroup.controls['virtual-router'].setValue(this['virtual-router']);
        }
    }
}

