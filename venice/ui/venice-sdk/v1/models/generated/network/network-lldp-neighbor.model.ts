/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface INetworkLLDPNeighbor {
    'chassis-id'?: string;
    'sys-name'?: string;
    'sys-description'?: string;
    'port-id'?: string;
    'port-description'?: string;
    'mgmt-address'?: string;
    '_ui'?: any;
}


export class NetworkLLDPNeighbor extends BaseModel implements INetworkLLDPNeighbor {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Chassis  ID. */
    'chassis-id': string = null;
    /** System Name. */
    'sys-name': string = null;
    /** System Description. */
    'sys-description': string = null;
    /** Port Name. */
    'port-id': string = null;
    /** Port Description. */
    'port-description': string = null;
    /** Mgmt IP. */
    'mgmt-address': string = null;
    public static propInfo: { [prop in keyof INetworkLLDPNeighbor]: PropInfoItem } = {
        'chassis-id': {
            description:  `Chassis  ID.`,
            required: false,
            type: 'string'
        },
        'sys-name': {
            description:  `System Name.`,
            required: false,
            type: 'string'
        },
        'sys-description': {
            description:  `System Description.`,
            required: false,
            type: 'string'
        },
        'port-id': {
            description:  `Port Name.`,
            required: false,
            type: 'string'
        },
        'port-description': {
            description:  `Port Description.`,
            required: false,
            type: 'string'
        },
        'mgmt-address': {
            description:  `Mgmt IP.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkLLDPNeighbor.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkLLDPNeighbor.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkLLDPNeighbor.propInfo[prop] != null &&
                        NetworkLLDPNeighbor.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['chassis-id'] != null) {
            this['chassis-id'] = values['chassis-id'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('chassis-id')) {
            this['chassis-id'] = NetworkLLDPNeighbor.propInfo['chassis-id'].default;
        } else {
            this['chassis-id'] = null
        }
        if (values && values['sys-name'] != null) {
            this['sys-name'] = values['sys-name'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('sys-name')) {
            this['sys-name'] = NetworkLLDPNeighbor.propInfo['sys-name'].default;
        } else {
            this['sys-name'] = null
        }
        if (values && values['sys-description'] != null) {
            this['sys-description'] = values['sys-description'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('sys-description')) {
            this['sys-description'] = NetworkLLDPNeighbor.propInfo['sys-description'].default;
        } else {
            this['sys-description'] = null
        }
        if (values && values['port-id'] != null) {
            this['port-id'] = values['port-id'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('port-id')) {
            this['port-id'] = NetworkLLDPNeighbor.propInfo['port-id'].default;
        } else {
            this['port-id'] = null
        }
        if (values && values['port-description'] != null) {
            this['port-description'] = values['port-description'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('port-description')) {
            this['port-description'] = NetworkLLDPNeighbor.propInfo['port-description'].default;
        } else {
            this['port-description'] = null
        }
        if (values && values['mgmt-address'] != null) {
            this['mgmt-address'] = values['mgmt-address'];
        } else if (fillDefaults && NetworkLLDPNeighbor.hasDefaultValue('mgmt-address')) {
            this['mgmt-address'] = NetworkLLDPNeighbor.propInfo['mgmt-address'].default;
        } else {
            this['mgmt-address'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'chassis-id': CustomFormControl(new FormControl(this['chassis-id']), NetworkLLDPNeighbor.propInfo['chassis-id']),
                'sys-name': CustomFormControl(new FormControl(this['sys-name']), NetworkLLDPNeighbor.propInfo['sys-name']),
                'sys-description': CustomFormControl(new FormControl(this['sys-description']), NetworkLLDPNeighbor.propInfo['sys-description']),
                'port-id': CustomFormControl(new FormControl(this['port-id']), NetworkLLDPNeighbor.propInfo['port-id']),
                'port-description': CustomFormControl(new FormControl(this['port-description']), NetworkLLDPNeighbor.propInfo['port-description']),
                'mgmt-address': CustomFormControl(new FormControl(this['mgmt-address']), NetworkLLDPNeighbor.propInfo['mgmt-address']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['chassis-id'].setValue(this['chassis-id']);
            this._formGroup.controls['sys-name'].setValue(this['sys-name']);
            this._formGroup.controls['sys-description'].setValue(this['sys-description']);
            this._formGroup.controls['port-id'].setValue(this['port-id']);
            this._formGroup.controls['port-description'].setValue(this['port-description']);
            this._formGroup.controls['mgmt-address'].setValue(this['mgmt-address']);
        }
    }
}

