/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface INetworkTLSClientPolicySpec {
    'tls-client-certificates-selector'?: object;
    'tls-client-trust-roots'?: Array<string>;
    'tls-client-allowed-peer-id'?: Array<string>;
}


export class NetworkTLSClientPolicySpec extends BaseModel implements INetworkTLSClientPolicySpec {
    /** A map containing the certificate to use for a set of destinations.
The key is a selector for workloads that exist either inside or
outside the cluster. It can be based on labels, hostnames or "IP:port" pairs.
The value is the name of the certificate to use for the selected destinations.
The certificates "usage" field must contain "client".
TODO: replace the first "string" type with proper selector type when available.
A single "default" certificate which matches all destinations is allowed.
If a destination matches multiple non-default map keys, an error is returned.
If a destination does not match any map key (and there is no default),
the outbound connection is initiated without TLS. */
    'tls-client-certificates-selector': object = null;
    /** The list of root certificates used to validate a trust chain presented by a server.
If the list is empty, all roots certificates in the tenant scope are considered. */
    'tls-client-trust-roots': Array<string> = null;
    /** Valid DNS names or IP addresses that must appear in the server certificate
SubjAltName or Common Name (if SAN is not specified). If not specified,
client validates the IP address of the server. */
    'tls-client-allowed-peer-id': Array<string> = null;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (NetworkTLSClientPolicySpec.enumProperties[prop] != null &&
                        NetworkTLSClientPolicySpec.enumProperties[prop].default != null &&
                        NetworkTLSClientPolicySpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['tls-client-trust-roots'] = new Array<string>();
        this['tls-client-allowed-peer-id'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['tls-client-certificates-selector'] != null) {
            this['tls-client-certificates-selector'] = values['tls-client-certificates-selector'];
        }
        if (values) {
            this.fillModelArray<string>(this, 'tls-client-trust-roots', values['tls-client-trust-roots']);
        }
        if (values) {
            this.fillModelArray<string>(this, 'tls-client-allowed-peer-id', values['tls-client-allowed-peer-id']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'tls-client-certificates-selector': new FormControl(this['tls-client-certificates-selector']),
                'tls-client-trust-roots': new FormArray([]),
                'tls-client-allowed-peer-id': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('tls-client-trust-roots', this['tls-client-trust-roots']);
            // generate FormArray control elements
            this.fillFormArray<string>('tls-client-allowed-peer-id', this['tls-client-allowed-peer-id']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['tls-client-certificates-selector'].setValue(this['tls-client-certificates-selector']);
            this.fillModelArray<string>(this, 'tls-client-trust-roots', this['tls-client-trust-roots']);
            this.fillModelArray<string>(this, 'tls-client-allowed-peer-id', this['tls-client-allowed-peer-id']);
        }
    }
}

