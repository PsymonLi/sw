/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkTransceiverStatus_state,  } from './enums';
import { NetworkTransceiverStatus_cable_type,  } from './enums';
import { NetworkTransceiverStatus_pid,  } from './enums';

export interface INetworkTransceiverStatus {
    'state': NetworkTransceiverStatus_state;
    'cable-type': NetworkTransceiverStatus_cable_type;
    'pid': NetworkTransceiverStatus_pid;
    '_ui'?: any;
}


export class NetworkTransceiverStatus extends BaseModel implements INetworkTransceiverStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'state': NetworkTransceiverStatus_state = null;
    'cable-type': NetworkTransceiverStatus_cable_type = null;
    'pid': NetworkTransceiverStatus_pid = null;
    public static propInfo: { [prop in keyof INetworkTransceiverStatus]: PropInfoItem } = {
        'state': {
            enum: NetworkTransceiverStatus_state,
            default: 'state_na',
            required: true,
            type: 'string'
        },
        'cable-type': {
            enum: NetworkTransceiverStatus_cable_type,
            default: 'none',
            required: true,
            type: 'string'
        },
        'pid': {
            enum: NetworkTransceiverStatus_pid,
            default: 'unknown',
            required: true,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkTransceiverStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkTransceiverStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkTransceiverStatus.propInfo[prop] != null &&
                        NetworkTransceiverStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['state'] != null) {
            this['state'] = values['state'];
        } else if (fillDefaults && NetworkTransceiverStatus.hasDefaultValue('state')) {
            this['state'] = <NetworkTransceiverStatus_state>  NetworkTransceiverStatus.propInfo['state'].default;
        } else {
            this['state'] = null
        }
        if (values && values['cable-type'] != null) {
            this['cable-type'] = values['cable-type'];
        } else if (fillDefaults && NetworkTransceiverStatus.hasDefaultValue('cable-type')) {
            this['cable-type'] = <NetworkTransceiverStatus_cable_type>  NetworkTransceiverStatus.propInfo['cable-type'].default;
        } else {
            this['cable-type'] = null
        }
        if (values && values['pid'] != null) {
            this['pid'] = values['pid'];
        } else if (fillDefaults && NetworkTransceiverStatus.hasDefaultValue('pid')) {
            this['pid'] = <NetworkTransceiverStatus_pid>  NetworkTransceiverStatus.propInfo['pid'].default;
        } else {
            this['pid'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'state': CustomFormControl(new FormControl(this['state'], [required, enumValidator(NetworkTransceiverStatus_state), ]), NetworkTransceiverStatus.propInfo['state']),
                'cable-type': CustomFormControl(new FormControl(this['cable-type'], [required, enumValidator(NetworkTransceiverStatus_cable_type), ]), NetworkTransceiverStatus.propInfo['cable-type']),
                'pid': CustomFormControl(new FormControl(this['pid'], [required, enumValidator(NetworkTransceiverStatus_pid), ]), NetworkTransceiverStatus.propInfo['pid']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['state'].setValue(this['state']);
            this._formGroup.controls['cable-type'].setValue(this['cable-type']);
            this._formGroup.controls['pid'].setValue(this['pid']);
        }
    }
}

