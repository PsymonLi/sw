/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface INetworkHealthCheckSpec {
    'interval'?: number;
    'probes-per-interval'?: number;
    'probe-port-or-url'?: string;
    'max-timeouts'?: number;
    'declare-healthy-count'?: number;
}


export class NetworkHealthCheckSpec extends BaseModel implements INetworkHealthCheckSpec {
    'interval': number;
    'probes-per-interval': number;
    'probe-port-or-url': string;
    'max-timeouts': number;
    'declare-healthy-count': number;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (NetworkHealthCheckSpec.enumProperties[prop] != null &&
                        NetworkHealthCheckSpec.enumProperties[prop].default != null &&
                        NetworkHealthCheckSpec.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['interval'] != null) {
            this['interval'] = values['interval'];
        }
        if (values && values['probes-per-interval'] != null) {
            this['probes-per-interval'] = values['probes-per-interval'];
        }
        if (values && values['probe-port-or-url'] != null) {
            this['probe-port-or-url'] = values['probe-port-or-url'];
        }
        if (values && values['max-timeouts'] != null) {
            this['max-timeouts'] = values['max-timeouts'];
        }
        if (values && values['declare-healthy-count'] != null) {
            this['declare-healthy-count'] = values['declare-healthy-count'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'interval': new FormControl(this['interval']),
                'probes-per-interval': new FormControl(this['probes-per-interval']),
                'probe-port-or-url': new FormControl(this['probe-port-or-url']),
                'max-timeouts': new FormControl(this['max-timeouts']),
                'declare-healthy-count': new FormControl(this['declare-healthy-count']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['interval'].setValue(this['interval']);
            this._formGroup.controls['probes-per-interval'].setValue(this['probes-per-interval']);
            this._formGroup.controls['probe-port-or-url'].setValue(this['probe-port-or-url']);
            this._formGroup.controls['max-timeouts'].setValue(this['max-timeouts']);
            this._formGroup.controls['declare-healthy-count'].setValue(this['declare-healthy-count']);
        }
    }
}

