/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkNetworkInterfaceSpec_admin_status,  } from './enums';
import { NetworkPauseSpec, INetworkPauseSpec } from './network-pause-spec.model';

export interface INetworkNetworkInterfaceSpec {
    'admin-status': NetworkNetworkInterfaceSpec_admin_status;
    'speed'?: string;
    'mtu'?: number;
    'pause'?: INetworkPauseSpec;
}


export class NetworkNetworkInterfaceSpec extends BaseModel implements INetworkNetworkInterfaceSpec {
    /** desired Admin state of the port */
    'admin-status': NetworkNetworkInterfaceSpec_admin_status = null;
    /** Intefaae speed */
    'speed': string = null;
    /** Mtu of the interface */
    'mtu': number = null;
    /** Pause Spec */
    'pause': NetworkPauseSpec = null;
    public static propInfo: { [prop in keyof INetworkNetworkInterfaceSpec]: PropInfoItem } = {
        'admin-status': {
            enum: NetworkNetworkInterfaceSpec_admin_status,
            default: 'up',
            description:  'Desired Admin state of the port',
            required: true,
            type: 'string'
        },
        'speed': {
            description:  'Intefaae speed',
            required: false,
            type: 'string'
        },
        'mtu': {
            description:  'Mtu of the interface',
            required: false,
            type: 'number'
        },
        'pause': {
            description:  'Pause Spec',
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkNetworkInterfaceSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkNetworkInterfaceSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkNetworkInterfaceSpec.propInfo[prop] != null &&
                        NetworkNetworkInterfaceSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['pause'] = new NetworkPauseSpec();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['admin-status'] != null) {
            this['admin-status'] = values['admin-status'];
        } else if (fillDefaults && NetworkNetworkInterfaceSpec.hasDefaultValue('admin-status')) {
            this['admin-status'] = <NetworkNetworkInterfaceSpec_admin_status>  NetworkNetworkInterfaceSpec.propInfo['admin-status'].default;
        } else {
            this['admin-status'] = null
        }
        if (values && values['speed'] != null) {
            this['speed'] = values['speed'];
        } else if (fillDefaults && NetworkNetworkInterfaceSpec.hasDefaultValue('speed')) {
            this['speed'] = NetworkNetworkInterfaceSpec.propInfo['speed'].default;
        } else {
            this['speed'] = null
        }
        if (values && values['mtu'] != null) {
            this['mtu'] = values['mtu'];
        } else if (fillDefaults && NetworkNetworkInterfaceSpec.hasDefaultValue('mtu')) {
            this['mtu'] = NetworkNetworkInterfaceSpec.propInfo['mtu'].default;
        } else {
            this['mtu'] = null
        }
        if (values) {
            this['pause'].setValues(values['pause'], fillDefaults);
        } else {
            this['pause'].setValues(null, fillDefaults);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'admin-status': CustomFormControl(new FormControl(this['admin-status'], [required, enumValidator(NetworkNetworkInterfaceSpec_admin_status), ]), NetworkNetworkInterfaceSpec.propInfo['admin-status']),
                'speed': CustomFormControl(new FormControl(this['speed']), NetworkNetworkInterfaceSpec.propInfo['speed']),
                'mtu': CustomFormControl(new FormControl(this['mtu']), NetworkNetworkInterfaceSpec.propInfo['mtu']),
                'pause': CustomFormGroup(this['pause'].$formGroup, NetworkNetworkInterfaceSpec.propInfo['pause'].required),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('pause') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('pause').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['admin-status'].setValue(this['admin-status']);
            this._formGroup.controls['speed'].setValue(this['speed']);
            this._formGroup.controls['mtu'].setValue(this['mtu']);
            this['pause'].setFormGroupValuesToBeModelValues();
        }
    }
}

