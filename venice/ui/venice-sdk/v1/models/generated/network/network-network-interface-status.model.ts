/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkNetworkInterfaceStatus_type,  } from './enums';
import { NetworkNetworkInterfaceStatus_oper_status,  } from './enums';
import { NetworkNetworkInterfaceHostStatus, INetworkNetworkInterfaceHostStatus } from './network-network-interface-host-status.model';
import { NetworkNetworkInterfaceUplinkStatus, INetworkNetworkInterfaceUplinkStatus } from './network-network-interface-uplink-status.model';

export interface INetworkNetworkInterfaceStatus {
    'dsc'?: string;
    'type': NetworkNetworkInterfaceStatus_type;
    'oper-status': NetworkNetworkInterfaceStatus_oper_status;
    'primary-mac'?: string;
    'if-host-status'?: INetworkNetworkInterfaceHostStatus;
    'if-uplink-status'?: INetworkNetworkInterfaceUplinkStatus;
    'mirror-enabled'?: boolean;
    'cluster-node'?: string;
    '_ui'?: any;
}


export class NetworkNetworkInterfaceStatus extends BaseModel implements INetworkNetworkInterfaceStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'dsc': string = null;
    'type': NetworkNetworkInterfaceStatus_type = null;
    'oper-status': NetworkNetworkInterfaceStatus_oper_status = null;
    /** Should be a valid MAC address. */
    'primary-mac': string = null;
    'if-host-status': NetworkNetworkInterfaceHostStatus = null;
    'if-uplink-status': NetworkNetworkInterfaceUplinkStatus = null;
    'mirror-enabled': boolean = null;
    /** Set only if interface is on Venice Node. */
    'cluster-node': string = null;
    public static propInfo: { [prop in keyof INetworkNetworkInterfaceStatus]: PropInfoItem } = {
        'dsc': {
            required: false,
            type: 'string'
        },
        'type': {
            enum: NetworkNetworkInterfaceStatus_type,
            default: 'none',
            required: true,
            type: 'string'
        },
        'oper-status': {
            enum: NetworkNetworkInterfaceStatus_oper_status,
            default: 'up',
            required: true,
            type: 'string'
        },
        'primary-mac': {
            description:  `Should be a valid MAC address.`,
            hint:  'aabb.ccdd.0000, aabb.ccdd.0000, aabb.ccdd.0000',
            required: false,
            type: 'string'
        },
        'if-host-status': {
            required: false,
            type: 'object'
        },
        'if-uplink-status': {
            required: false,
            type: 'object'
        },
        'mirror-enabled': {
            required: false,
            type: 'boolean'
        },
        'cluster-node': {
            description:  `Set only if interface is on Venice Node.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkNetworkInterfaceStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkNetworkInterfaceStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkNetworkInterfaceStatus.propInfo[prop] != null &&
                        NetworkNetworkInterfaceStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['if-host-status'] = new NetworkNetworkInterfaceHostStatus();
        this['if-uplink-status'] = new NetworkNetworkInterfaceUplinkStatus();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['dsc'] != null) {
            this['dsc'] = values['dsc'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('dsc')) {
            this['dsc'] = NetworkNetworkInterfaceStatus.propInfo['dsc'].default;
        } else {
            this['dsc'] = null
        }
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('type')) {
            this['type'] = <NetworkNetworkInterfaceStatus_type>  NetworkNetworkInterfaceStatus.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values && values['oper-status'] != null) {
            this['oper-status'] = values['oper-status'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('oper-status')) {
            this['oper-status'] = <NetworkNetworkInterfaceStatus_oper_status>  NetworkNetworkInterfaceStatus.propInfo['oper-status'].default;
        } else {
            this['oper-status'] = null
        }
        if (values && values['primary-mac'] != null) {
            this['primary-mac'] = values['primary-mac'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('primary-mac')) {
            this['primary-mac'] = NetworkNetworkInterfaceStatus.propInfo['primary-mac'].default;
        } else {
            this['primary-mac'] = null
        }
        if (values) {
            this['if-host-status'].setValues(values['if-host-status'], fillDefaults);
        } else {
            this['if-host-status'].setValues(null, fillDefaults);
        }
        if (values) {
            this['if-uplink-status'].setValues(values['if-uplink-status'], fillDefaults);
        } else {
            this['if-uplink-status'].setValues(null, fillDefaults);
        }
        if (values && values['mirror-enabled'] != null) {
            this['mirror-enabled'] = values['mirror-enabled'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('mirror-enabled')) {
            this['mirror-enabled'] = NetworkNetworkInterfaceStatus.propInfo['mirror-enabled'].default;
        } else {
            this['mirror-enabled'] = null
        }
        if (values && values['cluster-node'] != null) {
            this['cluster-node'] = values['cluster-node'];
        } else if (fillDefaults && NetworkNetworkInterfaceStatus.hasDefaultValue('cluster-node')) {
            this['cluster-node'] = NetworkNetworkInterfaceStatus.propInfo['cluster-node'].default;
        } else {
            this['cluster-node'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'dsc': CustomFormControl(new FormControl(this['dsc']), NetworkNetworkInterfaceStatus.propInfo['dsc']),
                'type': CustomFormControl(new FormControl(this['type'], [required, enumValidator(NetworkNetworkInterfaceStatus_type), ]), NetworkNetworkInterfaceStatus.propInfo['type']),
                'oper-status': CustomFormControl(new FormControl(this['oper-status'], [required, enumValidator(NetworkNetworkInterfaceStatus_oper_status), ]), NetworkNetworkInterfaceStatus.propInfo['oper-status']),
                'primary-mac': CustomFormControl(new FormControl(this['primary-mac']), NetworkNetworkInterfaceStatus.propInfo['primary-mac']),
                'if-host-status': CustomFormGroup(this['if-host-status'].$formGroup, NetworkNetworkInterfaceStatus.propInfo['if-host-status'].required),
                'if-uplink-status': CustomFormGroup(this['if-uplink-status'].$formGroup, NetworkNetworkInterfaceStatus.propInfo['if-uplink-status'].required),
                'mirror-enabled': CustomFormControl(new FormControl(this['mirror-enabled']), NetworkNetworkInterfaceStatus.propInfo['mirror-enabled']),
                'cluster-node': CustomFormControl(new FormControl(this['cluster-node']), NetworkNetworkInterfaceStatus.propInfo['cluster-node']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('if-host-status') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('if-host-status').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('if-uplink-status') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('if-uplink-status').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['dsc'].setValue(this['dsc']);
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['oper-status'].setValue(this['oper-status']);
            this._formGroup.controls['primary-mac'].setValue(this['primary-mac']);
            this['if-host-status'].setFormGroupValuesToBeModelValues();
            this['if-uplink-status'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['mirror-enabled'].setValue(this['mirror-enabled']);
            this._formGroup.controls['cluster-node'].setValue(this['cluster-node']);
        }
    }
}

