/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { NetworkAutoMsgNetworkWatchHelperWatchEvent, INetworkAutoMsgNetworkWatchHelperWatchEvent } from './network-auto-msg-network-watch-helper-watch-event.model';

export interface INetworkAutoMsgNetworkWatchHelper {
    'Events'?: Array<INetworkAutoMsgNetworkWatchHelperWatchEvent>;
}


export class NetworkAutoMsgNetworkWatchHelper extends BaseModel implements INetworkAutoMsgNetworkWatchHelper {
    'Events': Array<NetworkAutoMsgNetworkWatchHelperWatchEvent> = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'Events': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkAutoMsgNetworkWatchHelper.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkAutoMsgNetworkWatchHelper.propInfo[prop] != null &&
                        NetworkAutoMsgNetworkWatchHelper.propInfo[prop].default != null &&
                        NetworkAutoMsgNetworkWatchHelper.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['Events'] = new Array<NetworkAutoMsgNetworkWatchHelperWatchEvent>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<NetworkAutoMsgNetworkWatchHelperWatchEvent>(this, 'Events', values['Events'], NetworkAutoMsgNetworkWatchHelperWatchEvent);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'Events': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<NetworkAutoMsgNetworkWatchHelperWatchEvent>('Events', this['Events'], NetworkAutoMsgNetworkWatchHelperWatchEvent);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<NetworkAutoMsgNetworkWatchHelperWatchEvent>(this, 'Events', this['Events'], NetworkAutoMsgNetworkWatchHelperWatchEvent);
        }
    }
}

