/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkRouteDistinguisher_type,  } from './enums';
import { ApiRDAdminValue, IApiRDAdminValue } from './api-rd-admin-value.model';

export interface INetworkRouteDistinguisher {
    'type': NetworkRouteDistinguisher_type;
    'admin-value'?: IApiRDAdminValue;
    'assigned-value'?: number;
    '_ui'?: any;
}


export class NetworkRouteDistinguisher extends BaseModel implements INetworkRouteDistinguisher {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** RD Type as in rfc4364. */
    'type': NetworkRouteDistinguisher_type = null;
    /** Administrator subfield of Value. Length depends on Type. */
    'admin-value': ApiRDAdminValue = null;
    /** Assigned subfield of Value. Length depends on Type. */
    'assigned-value': number = null;
    public static propInfo: { [prop in keyof INetworkRouteDistinguisher]: PropInfoItem } = {
        'type': {
            enum: NetworkRouteDistinguisher_type,
            default: 'type0',
            description:  `RD Type as in rfc4364.`,
            required: true,
            type: 'string'
        },
        'admin-value': {
            description:  `Administrator subfield of Value. Length depends on Type.`,
            required: false,
            type: 'object'
        },
        'assigned-value': {
            description:  `Assigned subfield of Value. Length depends on Type.`,
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkRouteDistinguisher.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkRouteDistinguisher.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkRouteDistinguisher.propInfo[prop] != null &&
                        NetworkRouteDistinguisher.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['admin-value'] = new ApiRDAdminValue();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && NetworkRouteDistinguisher.hasDefaultValue('type')) {
            this['type'] = <NetworkRouteDistinguisher_type>  NetworkRouteDistinguisher.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values) {
            this['admin-value'].setValues(values['admin-value'], fillDefaults);
        } else {
            this['admin-value'].setValues(null, fillDefaults);
        }
        if (values && values['assigned-value'] != null) {
            this['assigned-value'] = values['assigned-value'];
        } else if (fillDefaults && NetworkRouteDistinguisher.hasDefaultValue('assigned-value')) {
            this['assigned-value'] = NetworkRouteDistinguisher.propInfo['assigned-value'].default;
        } else {
            this['assigned-value'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'type': CustomFormControl(new FormControl(this['type'], [required, enumValidator(NetworkRouteDistinguisher_type), ]), NetworkRouteDistinguisher.propInfo['type']),
                'admin-value': CustomFormGroup(this['admin-value'].$formGroup, NetworkRouteDistinguisher.propInfo['admin-value'].required),
                'assigned-value': CustomFormControl(new FormControl(this['assigned-value']), NetworkRouteDistinguisher.propInfo['assigned-value']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('admin-value') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('admin-value').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['type'].setValue(this['type']);
            this['admin-value'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['assigned-value'].setValue(this['assigned-value']);
        }
    }
}

