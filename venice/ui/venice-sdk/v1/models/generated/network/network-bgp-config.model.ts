/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ApiBgpAsn, IApiBgpAsn } from './api-bgp-asn.model';
import { NetworkBGPNeighbor, INetworkBGPNeighbor } from './network-bgp-neighbor.model';

export interface INetworkBGPConfig {
    'router-id'?: string;
    'as-number'?: IApiBgpAsn;
    'keepalive-interval': number;
    'holdtime': number;
    'dsc-auto-config'?: boolean;
    'neighbors'?: Array<INetworkBGPNeighbor>;
    '_ui'?: any;
}


export class NetworkBGPConfig extends BaseModel implements INetworkBGPConfig {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Router ID for the BGP Instance. Should be a valid v4 or v6 IP address. */
    'router-id': string = null;
    /** Local ASN for the BGP Instance. */
    'as-number': ApiBgpAsn = null;
    /** KeepaliveInterval is time interval at which keepalive messages are sent. Value should be between 0 and 3600. */
    'keepalive-interval': number = null;
    /** Holdtime is time for which not receiving a keepalive message results in declaring the peer as dead. Value should be between 0 and 3600. */
    'holdtime': number = null;
    /** DSCAutoConfig sets the flag that this config is to be used as a template for auto configuration. */
    'dsc-auto-config': boolean = null;
    /** List of all neighbors. */
    'neighbors': Array<NetworkBGPNeighbor> = null;
    public static propInfo: { [prop in keyof INetworkBGPConfig]: PropInfoItem } = {
        'router-id': {
            description:  `Router ID for the BGP Instance. Should be a valid v4 or v6 IP address.`,
            hint:  '10.1.1.1, ff02::5 ',
            required: false,
            type: 'string'
        },
        'as-number': {
            description:  `Local ASN for the BGP Instance.`,
            required: false,
            type: 'object'
        },
        'keepalive-interval': {
            default: parseInt('60'),
            description:  `KeepaliveInterval is time interval at which keepalive messages are sent. Value should be between 0 and 3600.`,
            required: true,
            type: 'number'
        },
        'holdtime': {
            default: parseInt('180'),
            description:  `Holdtime is time for which not receiving a keepalive message results in declaring the peer as dead. Value should be between 0 and 3600.`,
            required: true,
            type: 'number'
        },
        'dsc-auto-config': {
            description:  `DSCAutoConfig sets the flag that this config is to be used as a template for auto configuration.`,
            required: false,
            type: 'boolean'
        },
        'neighbors': {
            description:  `List of all neighbors.`,
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkBGPConfig.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkBGPConfig.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkBGPConfig.propInfo[prop] != null &&
                        NetworkBGPConfig.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['as-number'] = new ApiBgpAsn();
        this['neighbors'] = new Array<NetworkBGPNeighbor>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['router-id'] != null) {
            this['router-id'] = values['router-id'];
        } else if (fillDefaults && NetworkBGPConfig.hasDefaultValue('router-id')) {
            this['router-id'] = NetworkBGPConfig.propInfo['router-id'].default;
        } else {
            this['router-id'] = null
        }
        if (values) {
            this['as-number'].setValues(values['as-number'], fillDefaults);
        } else {
            this['as-number'].setValues(null, fillDefaults);
        }
        if (values && values['keepalive-interval'] != null) {
            this['keepalive-interval'] = values['keepalive-interval'];
        } else if (fillDefaults && NetworkBGPConfig.hasDefaultValue('keepalive-interval')) {
            this['keepalive-interval'] = NetworkBGPConfig.propInfo['keepalive-interval'].default;
        } else {
            this['keepalive-interval'] = null
        }
        if (values && values['holdtime'] != null) {
            this['holdtime'] = values['holdtime'];
        } else if (fillDefaults && NetworkBGPConfig.hasDefaultValue('holdtime')) {
            this['holdtime'] = NetworkBGPConfig.propInfo['holdtime'].default;
        } else {
            this['holdtime'] = null
        }
        if (values && values['dsc-auto-config'] != null) {
            this['dsc-auto-config'] = values['dsc-auto-config'];
        } else if (fillDefaults && NetworkBGPConfig.hasDefaultValue('dsc-auto-config')) {
            this['dsc-auto-config'] = NetworkBGPConfig.propInfo['dsc-auto-config'].default;
        } else {
            this['dsc-auto-config'] = null
        }
        if (values) {
            this.fillModelArray<NetworkBGPNeighbor>(this, 'neighbors', values['neighbors'], NetworkBGPNeighbor);
        } else {
            this['neighbors'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'router-id': CustomFormControl(new FormControl(this['router-id']), NetworkBGPConfig.propInfo['router-id']),
                'as-number': CustomFormGroup(this['as-number'].$formGroup, NetworkBGPConfig.propInfo['as-number'].required),
                'keepalive-interval': CustomFormControl(new FormControl(this['keepalive-interval'], [required, maxValueValidator(3600), ]), NetworkBGPConfig.propInfo['keepalive-interval']),
                'holdtime': CustomFormControl(new FormControl(this['holdtime'], [required, maxValueValidator(3600), ]), NetworkBGPConfig.propInfo['holdtime']),
                'dsc-auto-config': CustomFormControl(new FormControl(this['dsc-auto-config']), NetworkBGPConfig.propInfo['dsc-auto-config']),
                'neighbors': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<NetworkBGPNeighbor>('neighbors', this['neighbors'], NetworkBGPNeighbor);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('as-number') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('as-number').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('neighbors') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('neighbors').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['router-id'].setValue(this['router-id']);
            this['as-number'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['keepalive-interval'].setValue(this['keepalive-interval']);
            this._formGroup.controls['holdtime'].setValue(this['holdtime']);
            this._formGroup.controls['dsc-auto-config'].setValue(this['dsc-auto-config']);
            this.fillModelArray<NetworkBGPNeighbor>(this, 'neighbors', this['neighbors'], NetworkBGPNeighbor);
        }
    }
}

