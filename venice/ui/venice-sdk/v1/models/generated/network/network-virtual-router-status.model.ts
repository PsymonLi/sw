/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkRouteDistinguisher, INetworkRouteDistinguisher } from './network-route-distinguisher.model';
import { SecurityPropagationStatus, ISecurityPropagationStatus } from './security-propagation-status.model';

export interface INetworkVirtualRouterStatus {
    'id'?: string;
    'route-table'?: string;
    'rd'?: INetworkRouteDistinguisher;
    'propagation-status'?: ISecurityPropagationStatus;
    '_ui'?: any;
}


export class NetworkVirtualRouterStatus extends BaseModel implements INetworkVirtualRouterStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Handle allocated in the system. */
    'id': string = null;
    'route-table': string = null;
    'rd': NetworkRouteDistinguisher = null;
    /** The status of the configuration propagation to the Naples. */
    'propagation-status': SecurityPropagationStatus = null;
    public static propInfo: { [prop in keyof INetworkVirtualRouterStatus]: PropInfoItem } = {
        'id': {
            description:  `Handle allocated in the system.`,
            required: false,
            type: 'string'
        },
        'route-table': {
            required: false,
            type: 'string'
        },
        'rd': {
            required: false,
            type: 'object'
        },
        'propagation-status': {
            description:  `The status of the configuration propagation to the Naples.`,
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkVirtualRouterStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkVirtualRouterStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkVirtualRouterStatus.propInfo[prop] != null &&
                        NetworkVirtualRouterStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['rd'] = new NetworkRouteDistinguisher();
        this['propagation-status'] = new SecurityPropagationStatus();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['id'] != null) {
            this['id'] = values['id'];
        } else if (fillDefaults && NetworkVirtualRouterStatus.hasDefaultValue('id')) {
            this['id'] = NetworkVirtualRouterStatus.propInfo['id'].default;
        } else {
            this['id'] = null
        }
        if (values && values['route-table'] != null) {
            this['route-table'] = values['route-table'];
        } else if (fillDefaults && NetworkVirtualRouterStatus.hasDefaultValue('route-table')) {
            this['route-table'] = NetworkVirtualRouterStatus.propInfo['route-table'].default;
        } else {
            this['route-table'] = null
        }
        if (values) {
            this['rd'].setValues(values['rd'], fillDefaults);
        } else {
            this['rd'].setValues(null, fillDefaults);
        }
        if (values) {
            this['propagation-status'].setValues(values['propagation-status'], fillDefaults);
        } else {
            this['propagation-status'].setValues(null, fillDefaults);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'id': CustomFormControl(new FormControl(this['id']), NetworkVirtualRouterStatus.propInfo['id']),
                'route-table': CustomFormControl(new FormControl(this['route-table']), NetworkVirtualRouterStatus.propInfo['route-table']),
                'rd': CustomFormGroup(this['rd'].$formGroup, NetworkVirtualRouterStatus.propInfo['rd'].required),
                'propagation-status': CustomFormGroup(this['propagation-status'].$formGroup, NetworkVirtualRouterStatus.propInfo['propagation-status'].required),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('rd') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('rd').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('propagation-status') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('propagation-status').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['id'].setValue(this['id']);
            this._formGroup.controls['route-table'].setValue(this['route-table']);
            this['rd'].setFormGroupValuesToBeModelValues();
            this['propagation-status'].setFormGroupValuesToBeModelValues();
        }
    }
}

