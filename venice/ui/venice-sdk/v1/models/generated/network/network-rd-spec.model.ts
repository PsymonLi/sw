/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { NetworkRDSpec_address_family,  } from './enums';
import { NetworkRouteDistinguisher, INetworkRouteDistinguisher } from './network-route-distinguisher.model';

export interface INetworkRDSpec {
    'address-family': NetworkRDSpec_address_family;
    'rd-auto'?: boolean;
    'rd'?: INetworkRouteDistinguisher;
    'rt-export'?: Array<INetworkRouteDistinguisher>;
    'rt-import'?: Array<INetworkRouteDistinguisher>;
    '_ui'?: any;
}


export class NetworkRDSpec extends BaseModel implements INetworkRDSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Address family where this config applies. */
    'address-family': NetworkRDSpec_address_family = null;
    /** True indicates the system will generate the RD automatically. */
    'rd-auto': boolean = null;
    /** If Import and Export RDs are not specified, RD is used uniformly as RD, and import and export route-targets. */
    'rd': NetworkRouteDistinguisher = null;
    /** Route Targets to Export. */
    'rt-export': Array<NetworkRouteDistinguisher> = null;
    /** Route Targets to Import. */
    'rt-import': Array<NetworkRouteDistinguisher> = null;
    public static propInfo: { [prop in keyof INetworkRDSpec]: PropInfoItem } = {
        'address-family': {
            enum: NetworkRDSpec_address_family,
            default: 'ipv4-unicast',
            description:  `Address family where this config applies.`,
            required: true,
            type: 'string'
        },
        'rd-auto': {
            description:  `True indicates the system will generate the RD automatically.`,
            required: false,
            type: 'boolean'
        },
        'rd': {
            description:  `If Import and Export RDs are not specified, RD is used uniformly as RD, and import and export route-targets.`,
            required: false,
            type: 'object'
        },
        'rt-export': {
            description:  `Route Targets to Export.`,
            required: false,
            type: 'object'
        },
        'rt-import': {
            description:  `Route Targets to Import.`,
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return NetworkRDSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return NetworkRDSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (NetworkRDSpec.propInfo[prop] != null &&
                        NetworkRDSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['rd'] = new NetworkRouteDistinguisher();
        this['rt-export'] = new Array<NetworkRouteDistinguisher>();
        this['rt-import'] = new Array<NetworkRouteDistinguisher>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['address-family'] != null) {
            this['address-family'] = values['address-family'];
        } else if (fillDefaults && NetworkRDSpec.hasDefaultValue('address-family')) {
            this['address-family'] = <NetworkRDSpec_address_family>  NetworkRDSpec.propInfo['address-family'].default;
        } else {
            this['address-family'] = null
        }
        if (values && values['rd-auto'] != null) {
            this['rd-auto'] = values['rd-auto'];
        } else if (fillDefaults && NetworkRDSpec.hasDefaultValue('rd-auto')) {
            this['rd-auto'] = NetworkRDSpec.propInfo['rd-auto'].default;
        } else {
            this['rd-auto'] = null
        }
        if (values) {
            this['rd'].setValues(values['rd'], fillDefaults);
        } else {
            this['rd'].setValues(null, fillDefaults);
        }
        if (values) {
            this.fillModelArray<NetworkRouteDistinguisher>(this, 'rt-export', values['rt-export'], NetworkRouteDistinguisher);
        } else {
            this['rt-export'] = [];
        }
        if (values) {
            this.fillModelArray<NetworkRouteDistinguisher>(this, 'rt-import', values['rt-import'], NetworkRouteDistinguisher);
        } else {
            this['rt-import'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'address-family': CustomFormControl(new FormControl(this['address-family'], [required, enumValidator(NetworkRDSpec_address_family), ]), NetworkRDSpec.propInfo['address-family']),
                'rd-auto': CustomFormControl(new FormControl(this['rd-auto']), NetworkRDSpec.propInfo['rd-auto']),
                'rd': CustomFormGroup(this['rd'].$formGroup, NetworkRDSpec.propInfo['rd'].required),
                'rt-export': new FormArray([]),
                'rt-import': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<NetworkRouteDistinguisher>('rt-export', this['rt-export'], NetworkRouteDistinguisher);
            // generate FormArray control elements
            this.fillFormArray<NetworkRouteDistinguisher>('rt-import', this['rt-import'], NetworkRouteDistinguisher);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('rd') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('rd').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('rt-export') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('rt-export').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('rt-import') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('rt-import').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['address-family'].setValue(this['address-family']);
            this._formGroup.controls['rd-auto'].setValue(this['rd-auto']);
            this['rd'].setFormGroupValuesToBeModelValues();
            this.fillModelArray<NetworkRouteDistinguisher>(this, 'rt-export', this['rt-export'], NetworkRouteDistinguisher);
            this.fillModelArray<NetworkRouteDistinguisher>(this, 'rt-import', this['rt-import'], NetworkRouteDistinguisher);
        }
    }
}

