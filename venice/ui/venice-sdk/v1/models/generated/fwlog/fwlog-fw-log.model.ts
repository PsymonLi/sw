/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { ApiObjectMeta, IApiObjectMeta } from './api-object-meta.model';
import { FwlogFwLog_action,  FwlogFwLog_action_uihint  } from './enums';
import { FwlogFwLog_direction,  FwlogFwLog_direction_uihint  } from './enums';

export interface IFwlogFwLog {
    'kind'?: string;
    'api-version'?: string;
    'meta'?: IApiObjectMeta;
    'source-vrf'?: string;
    'destination-vrf'?: string;
    'source-ip'?: string;
    'destination-ip'?: string;
    'source-port'?: number;
    'destination-port'?: number;
    'protocol'?: string;
    'action': FwlogFwLog_action;
    'direction': FwlogFwLog_direction;
    'rule-id'?: string;
    'session-id'?: string;
    'app-id'?: string;
    'policy-name'?: string;
    'reporter-id'?: string;
    'flow-action'?: string;
    'icmp-type'?: number;
    'icmp-code'?: number;
    'icmp-id'?: number;
    '_ui'?: any;
}


export class FwlogFwLog extends BaseModel implements IFwlogFwLog {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'kind': string = null;
    'api-version': string = null;
    'meta': ApiObjectMeta = null;
    /** Source VRF,. */
    'source-vrf': string = null;
    /** Destination VRF,. */
    'destination-vrf': string = null;
    /** Source IP,. */
    'source-ip': string = null;
    /** Destination IP. */
    'destination-ip': string = null;
    /** Source Port. */
    'source-port': number = null;
    /** Destination Port. */
    'destination-port': number = null;
    /** Protocol,. */
    'protocol': string = null;
    /** Action. */
    'action': FwlogFwLog_action = null;
    /** Flow Direction. */
    'direction': FwlogFwLog_direction = null;
    /** Rule ID. */
    'rule-id': string = null;
    /** Session ID. */
    'session-id': string = null;
    /** Application ID. */
    'app-id': string = null;
    /** Policy name. */
    'policy-name': string = null;
    /** Reporter ID. */
    'reporter-id': string = null;
    /** Flow action. */
    'flow-action': string = null;
    /** Icmp type. */
    'icmp-type': number = null;
    /** Icmp code. */
    'icmp-code': number = null;
    /** Icmp ID. */
    'icmp-id': number = null;
    public static propInfo: { [prop in keyof IFwlogFwLog]: PropInfoItem } = {
        'kind': {
            required: false,
            type: 'string'
        },
        'api-version': {
            required: false,
            type: 'string'
        },
        'meta': {
            required: false,
            type: 'object'
        },
        'source-vrf': {
            description:  `Source VRF,.`,
            required: false,
            type: 'string'
        },
        'destination-vrf': {
            description:  `Destination VRF,.`,
            required: false,
            type: 'string'
        },
        'source-ip': {
            description:  `Source IP,.`,
            required: false,
            type: 'string'
        },
        'destination-ip': {
            description:  `Destination IP.`,
            required: false,
            type: 'string'
        },
        'source-port': {
            description:  `Source Port.`,
            required: false,
            type: 'number'
        },
        'destination-port': {
            description:  `Destination Port.`,
            required: false,
            type: 'number'
        },
        'protocol': {
            description:  `Protocol,.`,
            required: false,
            type: 'string'
        },
        'action': {
            enum: FwlogFwLog_action_uihint,
            default: 'allow',
            description:  `Action.`,
            required: true,
            type: 'string'
        },
        'direction': {
            enum: FwlogFwLog_direction_uihint,
            default: 'from-host',
            description:  `Flow Direction.`,
            required: true,
            type: 'string'
        },
        'rule-id': {
            description:  `Rule ID.`,
            required: false,
            type: 'string'
        },
        'session-id': {
            description:  `Session ID.`,
            required: false,
            type: 'string'
        },
        'app-id': {
            description:  `Application ID.`,
            required: false,
            type: 'string'
        },
        'policy-name': {
            description:  `Policy name.`,
            required: false,
            type: 'string'
        },
        'reporter-id': {
            description:  `Reporter ID.`,
            required: false,
            type: 'string'
        },
        'flow-action': {
            description:  `Flow action.`,
            required: false,
            type: 'string'
        },
        'icmp-type': {
            description:  `Icmp type.`,
            required: false,
            type: 'number'
        },
        'icmp-code': {
            description:  `Icmp code.`,
            required: false,
            type: 'number'
        },
        'icmp-id': {
            description:  `Icmp ID.`,
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return FwlogFwLog.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return FwlogFwLog.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (FwlogFwLog.propInfo[prop] != null &&
                        FwlogFwLog.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['meta'] = new ApiObjectMeta();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('kind')) {
            this['kind'] = FwlogFwLog.propInfo['kind'].default;
        } else {
            this['kind'] = null
        }
        if (values && values['api-version'] != null) {
            this['api-version'] = values['api-version'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('api-version')) {
            this['api-version'] = FwlogFwLog.propInfo['api-version'].default;
        } else {
            this['api-version'] = null
        }
        if (values) {
            this['meta'].setValues(values['meta'], fillDefaults);
        } else {
            this['meta'].setValues(null, fillDefaults);
        }
        if (values && values['source-vrf'] != null) {
            this['source-vrf'] = values['source-vrf'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('source-vrf')) {
            this['source-vrf'] = FwlogFwLog.propInfo['source-vrf'].default;
        } else {
            this['source-vrf'] = null
        }
        if (values && values['destination-vrf'] != null) {
            this['destination-vrf'] = values['destination-vrf'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('destination-vrf')) {
            this['destination-vrf'] = FwlogFwLog.propInfo['destination-vrf'].default;
        } else {
            this['destination-vrf'] = null
        }
        if (values && values['source-ip'] != null) {
            this['source-ip'] = values['source-ip'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('source-ip')) {
            this['source-ip'] = FwlogFwLog.propInfo['source-ip'].default;
        } else {
            this['source-ip'] = null
        }
        if (values && values['destination-ip'] != null) {
            this['destination-ip'] = values['destination-ip'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('destination-ip')) {
            this['destination-ip'] = FwlogFwLog.propInfo['destination-ip'].default;
        } else {
            this['destination-ip'] = null
        }
        if (values && values['source-port'] != null) {
            this['source-port'] = values['source-port'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('source-port')) {
            this['source-port'] = FwlogFwLog.propInfo['source-port'].default;
        } else {
            this['source-port'] = null
        }
        if (values && values['destination-port'] != null) {
            this['destination-port'] = values['destination-port'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('destination-port')) {
            this['destination-port'] = FwlogFwLog.propInfo['destination-port'].default;
        } else {
            this['destination-port'] = null
        }
        if (values && values['protocol'] != null) {
            this['protocol'] = values['protocol'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('protocol')) {
            this['protocol'] = FwlogFwLog.propInfo['protocol'].default;
        } else {
            this['protocol'] = null
        }
        if (values && values['action'] != null) {
            this['action'] = values['action'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('action')) {
            this['action'] = <FwlogFwLog_action>  FwlogFwLog.propInfo['action'].default;
        } else {
            this['action'] = null
        }
        if (values && values['direction'] != null) {
            this['direction'] = values['direction'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('direction')) {
            this['direction'] = <FwlogFwLog_direction>  FwlogFwLog.propInfo['direction'].default;
        } else {
            this['direction'] = null
        }
        if (values && values['rule-id'] != null) {
            this['rule-id'] = values['rule-id'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('rule-id')) {
            this['rule-id'] = FwlogFwLog.propInfo['rule-id'].default;
        } else {
            this['rule-id'] = null
        }
        if (values && values['session-id'] != null) {
            this['session-id'] = values['session-id'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('session-id')) {
            this['session-id'] = FwlogFwLog.propInfo['session-id'].default;
        } else {
            this['session-id'] = null
        }
        if (values && values['app-id'] != null) {
            this['app-id'] = values['app-id'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('app-id')) {
            this['app-id'] = FwlogFwLog.propInfo['app-id'].default;
        } else {
            this['app-id'] = null
        }
        if (values && values['policy-name'] != null) {
            this['policy-name'] = values['policy-name'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('policy-name')) {
            this['policy-name'] = FwlogFwLog.propInfo['policy-name'].default;
        } else {
            this['policy-name'] = null
        }
        if (values && values['reporter-id'] != null) {
            this['reporter-id'] = values['reporter-id'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('reporter-id')) {
            this['reporter-id'] = FwlogFwLog.propInfo['reporter-id'].default;
        } else {
            this['reporter-id'] = null
        }
        if (values && values['flow-action'] != null) {
            this['flow-action'] = values['flow-action'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('flow-action')) {
            this['flow-action'] = FwlogFwLog.propInfo['flow-action'].default;
        } else {
            this['flow-action'] = null
        }
        if (values && values['icmp-type'] != null) {
            this['icmp-type'] = values['icmp-type'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('icmp-type')) {
            this['icmp-type'] = FwlogFwLog.propInfo['icmp-type'].default;
        } else {
            this['icmp-type'] = null
        }
        if (values && values['icmp-code'] != null) {
            this['icmp-code'] = values['icmp-code'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('icmp-code')) {
            this['icmp-code'] = FwlogFwLog.propInfo['icmp-code'].default;
        } else {
            this['icmp-code'] = null
        }
        if (values && values['icmp-id'] != null) {
            this['icmp-id'] = values['icmp-id'];
        } else if (fillDefaults && FwlogFwLog.hasDefaultValue('icmp-id')) {
            this['icmp-id'] = FwlogFwLog.propInfo['icmp-id'].default;
        } else {
            this['icmp-id'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'kind': CustomFormControl(new FormControl(this['kind']), FwlogFwLog.propInfo['kind']),
                'api-version': CustomFormControl(new FormControl(this['api-version']), FwlogFwLog.propInfo['api-version']),
                'meta': CustomFormGroup(this['meta'].$formGroup, FwlogFwLog.propInfo['meta'].required),
                'source-vrf': CustomFormControl(new FormControl(this['source-vrf']), FwlogFwLog.propInfo['source-vrf']),
                'destination-vrf': CustomFormControl(new FormControl(this['destination-vrf']), FwlogFwLog.propInfo['destination-vrf']),
                'source-ip': CustomFormControl(new FormControl(this['source-ip']), FwlogFwLog.propInfo['source-ip']),
                'destination-ip': CustomFormControl(new FormControl(this['destination-ip']), FwlogFwLog.propInfo['destination-ip']),
                'source-port': CustomFormControl(new FormControl(this['source-port']), FwlogFwLog.propInfo['source-port']),
                'destination-port': CustomFormControl(new FormControl(this['destination-port']), FwlogFwLog.propInfo['destination-port']),
                'protocol': CustomFormControl(new FormControl(this['protocol']), FwlogFwLog.propInfo['protocol']),
                'action': CustomFormControl(new FormControl(this['action'], [required, enumValidator(FwlogFwLog_action), ]), FwlogFwLog.propInfo['action']),
                'direction': CustomFormControl(new FormControl(this['direction'], [required, enumValidator(FwlogFwLog_direction), ]), FwlogFwLog.propInfo['direction']),
                'rule-id': CustomFormControl(new FormControl(this['rule-id']), FwlogFwLog.propInfo['rule-id']),
                'session-id': CustomFormControl(new FormControl(this['session-id']), FwlogFwLog.propInfo['session-id']),
                'app-id': CustomFormControl(new FormControl(this['app-id']), FwlogFwLog.propInfo['app-id']),
                'policy-name': CustomFormControl(new FormControl(this['policy-name']), FwlogFwLog.propInfo['policy-name']),
                'reporter-id': CustomFormControl(new FormControl(this['reporter-id']), FwlogFwLog.propInfo['reporter-id']),
                'flow-action': CustomFormControl(new FormControl(this['flow-action']), FwlogFwLog.propInfo['flow-action']),
                'icmp-type': CustomFormControl(new FormControl(this['icmp-type']), FwlogFwLog.propInfo['icmp-type']),
                'icmp-code': CustomFormControl(new FormControl(this['icmp-code']), FwlogFwLog.propInfo['icmp-code']),
                'icmp-id': CustomFormControl(new FormControl(this['icmp-id']), FwlogFwLog.propInfo['icmp-id']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('meta') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('meta').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['api-version'].setValue(this['api-version']);
            this['meta'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['source-vrf'].setValue(this['source-vrf']);
            this._formGroup.controls['destination-vrf'].setValue(this['destination-vrf']);
            this._formGroup.controls['source-ip'].setValue(this['source-ip']);
            this._formGroup.controls['destination-ip'].setValue(this['destination-ip']);
            this._formGroup.controls['source-port'].setValue(this['source-port']);
            this._formGroup.controls['destination-port'].setValue(this['destination-port']);
            this._formGroup.controls['protocol'].setValue(this['protocol']);
            this._formGroup.controls['action'].setValue(this['action']);
            this._formGroup.controls['direction'].setValue(this['direction']);
            this._formGroup.controls['rule-id'].setValue(this['rule-id']);
            this._formGroup.controls['session-id'].setValue(this['session-id']);
            this._formGroup.controls['app-id'].setValue(this['app-id']);
            this._formGroup.controls['policy-name'].setValue(this['policy-name']);
            this._formGroup.controls['reporter-id'].setValue(this['reporter-id']);
            this._formGroup.controls['flow-action'].setValue(this['flow-action']);
            this._formGroup.controls['icmp-type'].setValue(this['icmp-type']);
            this._formGroup.controls['icmp-code'].setValue(this['icmp-code']);
            this._formGroup.controls['icmp-id'].setValue(this['icmp-id']);
        }
    }
}

