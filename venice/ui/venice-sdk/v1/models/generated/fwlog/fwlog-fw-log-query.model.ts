/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { FwlogFwLogQuery_actions,  FwlogFwLogQuery_actions_uihint  } from './enums';
import { FwlogFwLogQuery_sort_order,  } from './enums';

export interface IFwlogFwLogQuery {
    'source-ips': Array<string>;
    'destination-ips': Array<string>;
    'source-ports': Array<number>;
    'destination-ports': Array<number>;
    'protocols'?: Array<string>;
    'actions': Array<FwlogFwLogQuery_actions>;
    'reporter-ids'?: Array<string>;
    'start-time'?: Date;
    'end-time'?: Date;
    'sort-order': FwlogFwLogQuery_sort_order;
    'max-results': number;
    'tenants'?: Array<string>;
    '_ui'?: any;
}


export class FwlogFwLogQuery extends BaseModel implements IFwlogFwLogQuery {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** OR of sources IPs to be matched. Only one source IP is allowed. Should be a valid v4 or v6 IP address. */
    'source-ips': Array<string> = null;
    /** OR of destination IPs to be matched. Only one destination IP is allowed. Should be a valid v4 or v6 IP address. */
    'destination-ips': Array<string> = null;
    /** OR of source ports to be matched. Only one port can be specified and if present, source IP must also be specified. Value should be between 0 and 65535. */
    'source-ports': Array<number> = null;
    /** OR of destination ports to be matched. Only one port can be specified and if present, destination IP must also be specified. Value should be between 0 and 65535. */
    'destination-ports': Array<number> = null;
    /** OR of protocols to be matched. Only one protocol can be specified and can only be specified if either source IP or destination IP is present. */
    'protocols': Array<string> = null;
    /** OR of actions to be matched. Only one action can be specified and can only be specified if either source IP or destination IP is present. */
    'actions': Array<FwlogFwLogQuery_actions> = null;
    /** OR of reporter names to be matched. Only one reporter ID can be specified. */
    'reporter-ids': Array<string> = null;
    /** StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z. */
    'start-time': Date = null;
    /** EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z. */
    'end-time': Date = null;
    /** SortOrder specifies time ordering of results. */
    'sort-order': FwlogFwLogQuery_sort_order = null;
    /** MaxResults is the max-count of search results Default value is 50 and valid range is 0..8192. Value should be between 0 and 8192. */
    'max-results': number = null;
    /** OR of tenants within the scope of which search needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can search fwlogs in their tenant scope only. */
    'tenants': Array<string> = null;
    public static propInfo: { [prop in keyof IFwlogFwLogQuery]: PropInfoItem } = {
        'source-ips': {
            description:  `OR of sources IPs to be matched. Only one source IP is allowed. Should be a valid v4 or v6 IP address.`,
            hint:  '10.1.1.1, ff02::5 ',
            required: true,
            type: 'Array<string>'
        },
        'destination-ips': {
            description:  `OR of destination IPs to be matched. Only one destination IP is allowed. Should be a valid v4 or v6 IP address.`,
            hint:  '10.1.1.1, ff02::5 ',
            required: true,
            type: 'Array<string>'
        },
        'source-ports': {
            description:  `OR of source ports to be matched. Only one port can be specified and if present, source IP must also be specified. Value should be between 0 and 65535.`,
            required: true,
            type: 'Array<number>'
        },
        'destination-ports': {
            description:  `OR of destination ports to be matched. Only one port can be specified and if present, destination IP must also be specified. Value should be between 0 and 65535.`,
            required: true,
            type: 'Array<number>'
        },
        'protocols': {
            description:  `OR of protocols to be matched. Only one protocol can be specified and can only be specified if either source IP or destination IP is present.`,
            required: false,
            type: 'Array<string>'
        },
        'actions': {
            enum: FwlogFwLogQuery_actions_uihint,
            default: 'allow',
            description:  `OR of actions to be matched. Only one action can be specified and can only be specified if either source IP or destination IP is present.`,
            required: true,
            type: 'Array<string>'
        },
        'reporter-ids': {
            description:  `OR of reporter names to be matched. Only one reporter ID can be specified.`,
            required: false,
            type: 'Array<string>'
        },
        'start-time': {
            description:  `StartTime selects all logs with timestamp greater than the StartTime, example 2018-10-18T00:12:00Z.`,
            required: false,
            type: 'Date'
        },
        'end-time': {
            description:  `EndTime selects all logs with timestamp less than the EndTime, example 2018-09-18T00:12:00Z.`,
            required: false,
            type: 'Date'
        },
        'sort-order': {
            enum: FwlogFwLogQuery_sort_order,
            default: 'descending',
            description:  `SortOrder specifies time ordering of results.`,
            required: true,
            type: 'string'
        },
        'max-results': {
            default: parseInt('50'),
            description:  `MaxResults is the max-count of search results Default value is 50 and valid range is 0..8192. Value should be between 0 and 8192.`,
            required: true,
            type: 'number'
        },
        'tenants': {
            description:  `OR of tenants within the scope of which search needs to be performed. If not specified, it will be set to tenant of the logged in user. Also users in non default tenant can search fwlogs in their tenant scope only.`,
            required: false,
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return FwlogFwLogQuery.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return FwlogFwLogQuery.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (FwlogFwLogQuery.propInfo[prop] != null &&
                        FwlogFwLogQuery.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['source-ips'] = new Array<string>();
        this['destination-ips'] = new Array<string>();
        this['source-ports'] = new Array<number>();
        this['destination-ports'] = new Array<number>();
        this['protocols'] = new Array<string>();
        this['actions'] = new Array<FwlogFwLogQuery_actions>();
        this['reporter-ids'] = new Array<string>();
        this['tenants'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['source-ips'] != null) {
            this['source-ips'] = values['source-ips'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('source-ips')) {
            this['source-ips'] = [ FwlogFwLogQuery.propInfo['source-ips'].default];
        } else {
            this['source-ips'] = [];
        }
        if (values && values['destination-ips'] != null) {
            this['destination-ips'] = values['destination-ips'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('destination-ips')) {
            this['destination-ips'] = [ FwlogFwLogQuery.propInfo['destination-ips'].default];
        } else {
            this['destination-ips'] = [];
        }
        if (values && values['source-ports'] != null) {
            this['source-ports'] = values['source-ports'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('source-ports')) {
            this['source-ports'] = [ FwlogFwLogQuery.propInfo['source-ports'].default];
        } else {
            this['source-ports'] = [];
        }
        if (values && values['destination-ports'] != null) {
            this['destination-ports'] = values['destination-ports'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('destination-ports')) {
            this['destination-ports'] = [ FwlogFwLogQuery.propInfo['destination-ports'].default];
        } else {
            this['destination-ports'] = [];
        }
        if (values && values['protocols'] != null) {
            this['protocols'] = values['protocols'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('protocols')) {
            this['protocols'] = [ FwlogFwLogQuery.propInfo['protocols'].default];
        } else {
            this['protocols'] = [];
        }
        if (values && values['actions'] != null) {
            this['actions'] = values['actions'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('actions')) {
            this['actions'] = [ FwlogFwLogQuery.propInfo['actions'].default];
        } else {
            this['actions'] = [];
        }
        if (values && values['reporter-ids'] != null) {
            this['reporter-ids'] = values['reporter-ids'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('reporter-ids')) {
            this['reporter-ids'] = [ FwlogFwLogQuery.propInfo['reporter-ids'].default];
        } else {
            this['reporter-ids'] = [];
        }
        if (values && values['start-time'] != null) {
            this['start-time'] = values['start-time'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('start-time')) {
            this['start-time'] = FwlogFwLogQuery.propInfo['start-time'].default;
        } else {
            this['start-time'] = null
        }
        if (values && values['end-time'] != null) {
            this['end-time'] = values['end-time'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('end-time')) {
            this['end-time'] = FwlogFwLogQuery.propInfo['end-time'].default;
        } else {
            this['end-time'] = null
        }
        if (values && values['sort-order'] != null) {
            this['sort-order'] = values['sort-order'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('sort-order')) {
            this['sort-order'] = <FwlogFwLogQuery_sort_order>  FwlogFwLogQuery.propInfo['sort-order'].default;
        } else {
            this['sort-order'] = null
        }
        if (values && values['max-results'] != null) {
            this['max-results'] = values['max-results'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('max-results')) {
            this['max-results'] = FwlogFwLogQuery.propInfo['max-results'].default;
        } else {
            this['max-results'] = null
        }
        if (values && values['tenants'] != null) {
            this['tenants'] = values['tenants'];
        } else if (fillDefaults && FwlogFwLogQuery.hasDefaultValue('tenants')) {
            this['tenants'] = [ FwlogFwLogQuery.propInfo['tenants'].default];
        } else {
            this['tenants'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'source-ips': CustomFormControl(new FormControl(this['source-ips']), FwlogFwLogQuery.propInfo['source-ips']),
                'destination-ips': CustomFormControl(new FormControl(this['destination-ips']), FwlogFwLogQuery.propInfo['destination-ips']),
                'source-ports': CustomFormControl(new FormControl(this['source-ports']), FwlogFwLogQuery.propInfo['source-ports']),
                'destination-ports': CustomFormControl(new FormControl(this['destination-ports']), FwlogFwLogQuery.propInfo['destination-ports']),
                'protocols': CustomFormControl(new FormControl(this['protocols']), FwlogFwLogQuery.propInfo['protocols']),
                'actions': CustomFormControl(new FormControl(this['actions']), FwlogFwLogQuery.propInfo['actions']),
                'reporter-ids': CustomFormControl(new FormControl(this['reporter-ids']), FwlogFwLogQuery.propInfo['reporter-ids']),
                'start-time': CustomFormControl(new FormControl(this['start-time']), FwlogFwLogQuery.propInfo['start-time']),
                'end-time': CustomFormControl(new FormControl(this['end-time']), FwlogFwLogQuery.propInfo['end-time']),
                'sort-order': CustomFormControl(new FormControl(this['sort-order'], [required, enumValidator(FwlogFwLogQuery_sort_order), ]), FwlogFwLogQuery.propInfo['sort-order']),
                'max-results': CustomFormControl(new FormControl(this['max-results'], [required, maxValueValidator(8192), ]), FwlogFwLogQuery.propInfo['max-results']),
                'tenants': CustomFormControl(new FormControl(this['tenants']), FwlogFwLogQuery.propInfo['tenants']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['source-ips'].setValue(this['source-ips']);
            this._formGroup.controls['destination-ips'].setValue(this['destination-ips']);
            this._formGroup.controls['source-ports'].setValue(this['source-ports']);
            this._formGroup.controls['destination-ports'].setValue(this['destination-ports']);
            this._formGroup.controls['protocols'].setValue(this['protocols']);
            this._formGroup.controls['actions'].setValue(this['actions']);
            this._formGroup.controls['reporter-ids'].setValue(this['reporter-ids']);
            this._formGroup.controls['start-time'].setValue(this['start-time']);
            this._formGroup.controls['end-time'].setValue(this['end-time']);
            this._formGroup.controls['sort-order'].setValue(this['sort-order']);
            this._formGroup.controls['max-results'].setValue(this['max-results']);
            this._formGroup.controls['tenants'].setValue(this['tenants']);
        }
    }
}

