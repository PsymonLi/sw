/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { ApiObjectMeta, IApiObjectMeta } from './api-object-meta.model';
import { EventsEvent_severity,  EventsEvent_severity_uihint  } from './enums';
import { ApiObjectRef, IApiObjectRef } from './api-object-ref.model';
import { EventsEventSource, IEventsEventSource } from './events-event-source.model';

export interface IEventsEvent {
    'kind'?: string;
    'api-version'?: string;
    'meta'?: IApiObjectMeta;
    'severity'?: EventsEvent_severity;
    'type'?: string;
    'message'?: string;
    'object-ref'?: IApiObjectRef;
    'source'?: IEventsEventSource;
    'count'?: number;
}


export class EventsEvent extends BaseModel implements IEventsEvent {
    'kind': string;
    'api-version': string;
    'meta': ApiObjectMeta;
    'severity': EventsEvent_severity;
    'type': string;
    'message': string;
    'object-ref': ApiObjectRef;
    'source': EventsEventSource;
    'count': number;
    public static enumProperties: { [key: string] : EnumDef } = {
        'severity': {
            enum: EventsEvent_severity_uihint,
            default: 'INFO',
        },
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['meta'] = new ApiObjectMeta();
        this['object-ref'] = new ApiObjectRef();
        this['source'] = new EventsEventSource();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['kind'] = values['kind'];
            this['api-version'] = values['api-version'];
            this['meta'].setValues(values['meta']);
            this['severity'] = values['severity'];
            this['type'] = values['type'];
            this['message'] = values['message'];
            this['object-ref'].setValues(values['object-ref']);
            this['source'].setValues(values['source']);
            this['count'] = values['count'];
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'kind': new FormControl(this['kind']),
                'api-version': new FormControl(this['api-version']),
                'meta': this['meta'].$formGroup,
                'severity': new FormControl(this['severity'], [enumValidator(EventsEvent_severity), ]),
                'type': new FormControl(this['type']),
                'message': new FormControl(this['message']),
                'object-ref': this['object-ref'].$formGroup,
                'source': this['source'].$formGroup,
                'count': new FormControl(this['count']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['api-version'].setValue(this['api-version']);
            this['meta'].setFormGroupValues();
            this._formGroup.controls['severity'].setValue(this['severity']);
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['message'].setValue(this['message']);
            this['object-ref'].setFormGroupValues();
            this['source'].setFormGroupValues();
            this._formGroup.controls['count'].setValue(this['count']);
        }
    }
}

