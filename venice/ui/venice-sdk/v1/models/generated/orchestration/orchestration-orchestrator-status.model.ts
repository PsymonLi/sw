/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { OrchestrationOrchestratorStatus_connection_status,  OrchestrationOrchestratorStatus_connection_status_uihint  } from './enums';

export interface IOrchestrationOrchestratorStatus {
    'connection-status': OrchestrationOrchestratorStatus_connection_status;
    'last-connected'?: Date;
    'last-sync'?: Date;
    'session-id'?: string;
    '_ui'?: any;
}


export class OrchestrationOrchestratorStatus extends BaseModel implements IOrchestrationOrchestratorStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'connection-status': OrchestrationOrchestratorStatus_connection_status = null;
    'last-connected': Date = null;
    'last-sync': Date = null;
    'session-id': string = null;
    public static propInfo: { [prop in keyof IOrchestrationOrchestratorStatus]: PropInfoItem } = {
        'connection-status': {
            enum: OrchestrationOrchestratorStatus_connection_status_uihint,
            default: 'unknown',
            required: true,
            type: 'string'
        },
        'last-connected': {
            required: false,
            type: 'Date'
        },
        'last-sync': {
            required: false,
            type: 'Date'
        },
        'session-id': {
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return OrchestrationOrchestratorStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return OrchestrationOrchestratorStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (OrchestrationOrchestratorStatus.propInfo[prop] != null &&
                        OrchestrationOrchestratorStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['connection-status'] != null) {
            this['connection-status'] = values['connection-status'];
        } else if (fillDefaults && OrchestrationOrchestratorStatus.hasDefaultValue('connection-status')) {
            this['connection-status'] = <OrchestrationOrchestratorStatus_connection_status>  OrchestrationOrchestratorStatus.propInfo['connection-status'].default;
        } else {
            this['connection-status'] = null
        }
        if (values && values['last-connected'] != null) {
            this['last-connected'] = values['last-connected'];
        } else if (fillDefaults && OrchestrationOrchestratorStatus.hasDefaultValue('last-connected')) {
            this['last-connected'] = OrchestrationOrchestratorStatus.propInfo['last-connected'].default;
        } else {
            this['last-connected'] = null
        }
        if (values && values['last-sync'] != null) {
            this['last-sync'] = values['last-sync'];
        } else if (fillDefaults && OrchestrationOrchestratorStatus.hasDefaultValue('last-sync')) {
            this['last-sync'] = OrchestrationOrchestratorStatus.propInfo['last-sync'].default;
        } else {
            this['last-sync'] = null
        }
        if (values && values['session-id'] != null) {
            this['session-id'] = values['session-id'];
        } else if (fillDefaults && OrchestrationOrchestratorStatus.hasDefaultValue('session-id')) {
            this['session-id'] = OrchestrationOrchestratorStatus.propInfo['session-id'].default;
        } else {
            this['session-id'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'connection-status': CustomFormControl(new FormControl(this['connection-status'], [required, enumValidator(OrchestrationOrchestratorStatus_connection_status), ]), OrchestrationOrchestratorStatus.propInfo['connection-status']),
                'last-connected': CustomFormControl(new FormControl(this['last-connected']), OrchestrationOrchestratorStatus.propInfo['last-connected']),
                'last-sync': CustomFormControl(new FormControl(this['last-sync']), OrchestrationOrchestratorStatus.propInfo['last-sync']),
                'session-id': CustomFormControl(new FormControl(this['session-id']), OrchestrationOrchestratorStatus.propInfo['session-id']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['connection-status'].setValue(this['connection-status']);
            this._formGroup.controls['last-connected'].setValue(this['last-connected']);
            this._formGroup.controls['last-sync'].setValue(this['last-sync']);
            this._formGroup.controls['session-id'].setValue(this['session-id']);
        }
    }
}

