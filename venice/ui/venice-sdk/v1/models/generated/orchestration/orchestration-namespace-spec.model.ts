/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { OrchestrationNamespaceSpec_mode,  OrchestrationNamespaceSpec_mode_uihint  } from './enums';
import { OrchestrationManagedNamespaceSpec, IOrchestrationManagedNamespaceSpec } from './orchestration-managed-namespace-spec.model';
import { OrchestrationMonitoredNamespaceSpec, IOrchestrationMonitoredNamespaceSpec } from './orchestration-monitored-namespace-spec.model';

export interface IOrchestrationNamespaceSpec {
    'name': string;
    'mode': OrchestrationNamespaceSpec_mode;
    'managed-spec'?: IOrchestrationManagedNamespaceSpec;
    'monitored-spec'?: IOrchestrationMonitoredNamespaceSpec;
    '_ui'?: any;
}


export class OrchestrationNamespaceSpec extends BaseModel implements IOrchestrationNamespaceSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Length of string should be at least 1. */
    'name': string = null;
    'mode': OrchestrationNamespaceSpec_mode = null;
    'managed-spec': OrchestrationManagedNamespaceSpec = null;
    'monitored-spec': OrchestrationMonitoredNamespaceSpec = null;
    public static propInfo: { [prop in keyof IOrchestrationNamespaceSpec]: PropInfoItem } = {
        'name': {
            description:  `Length of string should be at least 1.`,
            required: true,
            type: 'string'
        },
        'mode': {
            enum: OrchestrationNamespaceSpec_mode_uihint,
            default: 'managed',
            required: true,
            type: 'string'
        },
        'managed-spec': {
            required: false,
            type: 'object'
        },
        'monitored-spec': {
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return OrchestrationNamespaceSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return OrchestrationNamespaceSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (OrchestrationNamespaceSpec.propInfo[prop] != null &&
                        OrchestrationNamespaceSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['managed-spec'] = new OrchestrationManagedNamespaceSpec();
        this['monitored-spec'] = new OrchestrationMonitoredNamespaceSpec();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['name'] != null) {
            this['name'] = values['name'];
        } else if (fillDefaults && OrchestrationNamespaceSpec.hasDefaultValue('name')) {
            this['name'] = OrchestrationNamespaceSpec.propInfo['name'].default;
        } else {
            this['name'] = null
        }
        if (values && values['mode'] != null) {
            this['mode'] = values['mode'];
        } else if (fillDefaults && OrchestrationNamespaceSpec.hasDefaultValue('mode')) {
            this['mode'] = <OrchestrationNamespaceSpec_mode>  OrchestrationNamespaceSpec.propInfo['mode'].default;
        } else {
            this['mode'] = null
        }
        if (values) {
            this['managed-spec'].setValues(values['managed-spec'], fillDefaults);
        } else {
            this['managed-spec'].setValues(null, fillDefaults);
        }
        if (values) {
            this['monitored-spec'].setValues(values['monitored-spec'], fillDefaults);
        } else {
            this['monitored-spec'].setValues(null, fillDefaults);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'name': CustomFormControl(new FormControl(this['name'], [required, minLengthValidator(1), ]), OrchestrationNamespaceSpec.propInfo['name']),
                'mode': CustomFormControl(new FormControl(this['mode'], [required, enumValidator(OrchestrationNamespaceSpec_mode), ]), OrchestrationNamespaceSpec.propInfo['mode']),
                'managed-spec': CustomFormGroup(this['managed-spec'].$formGroup, OrchestrationNamespaceSpec.propInfo['managed-spec'].required),
                'monitored-spec': CustomFormGroup(this['monitored-spec'].$formGroup, OrchestrationNamespaceSpec.propInfo['monitored-spec'].required),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('managed-spec') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('managed-spec').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('monitored-spec') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('monitored-spec').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['name'].setValue(this['name']);
            this._formGroup.controls['mode'].setValue(this['mode']);
            this['managed-spec'].setFormGroupValuesToBeModelValues();
            this['monitored-spec'].setFormGroupValuesToBeModelValues();
        }
    }
}

