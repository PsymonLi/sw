/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum ApiListWatchOptions_sort_order {
    'none' = "none",
    'by-name' = "by-name",
    'by-name-reverse' = "by-name-reverse",
    'by-version' = "by-version",
    'by-version-reverse' = "by-version-reverse",
    'by-creation-time' = "by-creation-time",
    'by-creation-time-reverse' = "by-creation-time-reverse",
    'by-mod-time' = "by-mod-time",
    'by-mod-time-reverse' = "by-mod-time-reverse",
}

export enum MonitoringExternalCred_auth_type {
    'none' = "none",
    'username-password' = "username-password",
    'token' = "token",
    'certs' = "certs",
}

export enum OrchestrationManagedNamespaceSpec_multicast_filter {
    'basic' = "basic",
    'snooping' = "snooping",
}

export enum OrchestrationManagedNamespaceSpec_discovery_protocol {
    'disabled' = "disabled",
    'cdp' = "cdp",
    'lldp' = "lldp",
}

export enum OrchestrationManagedNamespaceSpec_discovery_operation {
    'none' = "none",
    'listen' = "listen",
    'advertise' = "advertise",
    'both' = "both",
}

export enum OrchestrationNamespaceSpec_mode {
    'managed' = "managed",
    'monitored' = "monitored",
}

export enum OrchestrationOrchestratorSpec_type {
    'vcenter' = "vcenter",
}

export enum OrchestrationOrchestratorStatus_connection_status {
    'unknown' = "unknown",
    'success' = "success",
    'failure' = "failure",
    'degraded' = "degraded",
}


export enum ApiListWatchOptions_sort_order_uihint {
    'by-creation-time' = "By Creation Time",
    'by-creation-time-reverse' = "By Creation Time Reverse",
    'by-mod-time' = "By Modification Time",
    'by-mod-time-reverse' = "By Modification Time Reverse",
    'by-name' = "By Name",
    'by-name-reverse' = "By Name Reverse",
    'by-version' = "By Version",
    'by-version-reverse' = "By Version Reverse",
    'none' = "None",
}

export enum MonitoringExternalCred_auth_type_uihint {
    'certs' = "Certs",
    'none' = "None",
    'token' = "Token",
    'username-password' = "Username/Password",
}

export enum OrchestrationManagedNamespaceSpec_multicast_filter_uihint {
    'basic' = "Basic",
    'snooping' = "Snooping",
}

export enum OrchestrationManagedNamespaceSpec_discovery_protocol_uihint {
    'cdp' = "CDP",
    'disabled' = "Disabled",
    'lldp' = "LLDP",
}

export enum OrchestrationManagedNamespaceSpec_discovery_operation_uihint {
    'advertise' = "Advertise",
    'both' = "Both",
    'listen' = "Listen",
    'none' = "None",
}

export enum OrchestrationNamespaceSpec_mode_uihint {
    'managed' = "Managed",
    'monitored' = "Monitored",
}

export enum OrchestrationOrchestratorSpec_type_uihint {
    'vcenter' = "vcenter",
}

export enum OrchestrationOrchestratorStatus_connection_status_uihint {
    'degraded' = "Degraded",
    'failure' = "Failure",
    'success' = "Success",
    'unknown' = "Unknown",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    ApiListWatchOptions_sort_order = ApiListWatchOptions_sort_order;
    MonitoringExternalCred_auth_type = MonitoringExternalCred_auth_type;
    OrchestrationManagedNamespaceSpec_multicast_filter = OrchestrationManagedNamespaceSpec_multicast_filter;
    OrchestrationManagedNamespaceSpec_discovery_protocol = OrchestrationManagedNamespaceSpec_discovery_protocol;
    OrchestrationManagedNamespaceSpec_discovery_operation = OrchestrationManagedNamespaceSpec_discovery_operation;
    OrchestrationNamespaceSpec_mode = OrchestrationNamespaceSpec_mode;
    OrchestrationOrchestratorSpec_type = OrchestrationOrchestratorSpec_type;
    OrchestrationOrchestratorStatus_connection_status = OrchestrationOrchestratorStatus_connection_status;

    ApiListWatchOptions_sort_order_uihint = ApiListWatchOptions_sort_order_uihint;
    MonitoringExternalCred_auth_type_uihint = MonitoringExternalCred_auth_type_uihint;
    OrchestrationManagedNamespaceSpec_multicast_filter_uihint = OrchestrationManagedNamespaceSpec_multicast_filter_uihint;
    OrchestrationManagedNamespaceSpec_discovery_protocol_uihint = OrchestrationManagedNamespaceSpec_discovery_protocol_uihint;
    OrchestrationManagedNamespaceSpec_discovery_operation_uihint = OrchestrationManagedNamespaceSpec_discovery_operation_uihint;
    OrchestrationNamespaceSpec_mode_uihint = OrchestrationNamespaceSpec_mode_uihint;
    OrchestrationOrchestratorSpec_type_uihint = OrchestrationOrchestratorSpec_type_uihint;
    OrchestrationOrchestratorStatus_connection_status_uihint = OrchestrationOrchestratorStatus_connection_status_uihint;
}
