/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { OrchestrationOrchestratorSpec_type,  OrchestrationOrchestratorSpec_type_uihint  } from './enums';
import { MonitoringExternalCred, IMonitoringExternalCred } from './monitoring-external-cred.model';
import { OrchestrationNamespaceSpec, IOrchestrationNamespaceSpec } from './orchestration-namespace-spec.model';

export interface IOrchestrationOrchestratorSpec {
    'type': OrchestrationOrchestratorSpec_type;
    'uri': string;
    'credentials'?: IMonitoringExternalCred;
    'manage-namespaces'?: Array<string>;
    'namespaces'?: Array<IOrchestrationNamespaceSpec>;
    '_ui'?: any;
}


export class OrchestrationOrchestratorSpec extends BaseModel implements IOrchestrationOrchestratorSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** Type of orchestrator. */
    'type': OrchestrationOrchestratorSpec_type = null;
    /** URI of the orchestrator. Length of string should be at least 1. */
    'uri': string = null;
    /** Credentials for the orchestrator. */
    'credentials': MonitoringExternalCred = null;
    /** Namespaces that will be managed by this orchestrator. "all_namespaces" will manage all namespaces. - deprecated from Rel-C. */
    'manage-namespaces': Array<string> = null;
    /** Namespaces are used to provide namespace specific information. From Rel-C this will be the only means to pass namespace information "all_namespaces" will be treated as a special namespace, which will apply the same configuration for all the namespaces discovered by the orchestrator. */
    'namespaces': Array<OrchestrationNamespaceSpec> = null;
    public static propInfo: { [prop in keyof IOrchestrationOrchestratorSpec]: PropInfoItem } = {
        'type': {
            enum: OrchestrationOrchestratorSpec_type_uihint,
            default: 'vcenter',
            description:  `Type of orchestrator.`,
            required: true,
            type: 'string'
        },
        'uri': {
            description:  `URI of the orchestrator. Length of string should be at least 1.`,
            required: true,
            type: 'string'
        },
        'credentials': {
            description:  `Credentials for the orchestrator.`,
            required: false,
            type: 'object'
        },
        'manage-namespaces': {
            description:  `Namespaces that will be managed by this orchestrator. "all_namespaces" will manage all namespaces. - deprecated from Rel-C.`,
            required: false,
            type: 'Array<string>'
        },
        'namespaces': {
            description:  `Namespaces are used to provide namespace specific information. From Rel-C this will be the only means to pass namespace information "all_namespaces" will be treated as a special namespace, which will apply the same configuration for all the namespaces discovered by the orchestrator.`,
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return OrchestrationOrchestratorSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return OrchestrationOrchestratorSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (OrchestrationOrchestratorSpec.propInfo[prop] != null &&
                        OrchestrationOrchestratorSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['credentials'] = new MonitoringExternalCred();
        this['manage-namespaces'] = new Array<string>();
        this['namespaces'] = new Array<OrchestrationNamespaceSpec>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('type')) {
            this['type'] = <OrchestrationOrchestratorSpec_type>  OrchestrationOrchestratorSpec.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('uri')) {
            this['uri'] = OrchestrationOrchestratorSpec.propInfo['uri'].default;
        } else {
            this['uri'] = null
        }
        if (values) {
            this['credentials'].setValues(values['credentials'], fillDefaults);
        } else {
            this['credentials'].setValues(null, fillDefaults);
        }
        if (values && values['manage-namespaces'] != null) {
            this['manage-namespaces'] = values['manage-namespaces'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('manage-namespaces')) {
            this['manage-namespaces'] = [ OrchestrationOrchestratorSpec.propInfo['manage-namespaces'].default];
        } else {
            this['manage-namespaces'] = [];
        }
        if (values) {
            this.fillModelArray<OrchestrationNamespaceSpec>(this, 'namespaces', values['namespaces'], OrchestrationNamespaceSpec);
        } else {
            this['namespaces'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'type': CustomFormControl(new FormControl(this['type'], [required, enumValidator(OrchestrationOrchestratorSpec_type), ]), OrchestrationOrchestratorSpec.propInfo['type']),
                'uri': CustomFormControl(new FormControl(this['uri'], [required, minLengthValidator(1), ]), OrchestrationOrchestratorSpec.propInfo['uri']),
                'credentials': CustomFormGroup(this['credentials'].$formGroup, OrchestrationOrchestratorSpec.propInfo['credentials'].required),
                'manage-namespaces': CustomFormControl(new FormControl(this['manage-namespaces']), OrchestrationOrchestratorSpec.propInfo['manage-namespaces']),
                'namespaces': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<OrchestrationNamespaceSpec>('namespaces', this['namespaces'], OrchestrationNamespaceSpec);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('credentials') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('credentials').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('namespaces') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('namespaces').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['uri'].setValue(this['uri']);
            this['credentials'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['manage-namespaces'].setValue(this['manage-namespaces']);
            this.fillModelArray<OrchestrationNamespaceSpec>(this, 'namespaces', this['namespaces'], OrchestrationNamespaceSpec);
        }
    }
}

