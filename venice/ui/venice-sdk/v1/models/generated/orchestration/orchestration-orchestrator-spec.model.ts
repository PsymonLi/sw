/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { OrchestrationOrchestratorSpec_type,  OrchestrationOrchestratorSpec_type_uihint  } from './enums';
import { MonitoringExternalCred, IMonitoringExternalCred } from './monitoring-external-cred.model';

export interface IOrchestrationOrchestratorSpec {
    'type': OrchestrationOrchestratorSpec_type;
    'uri': string;
    'credentials'?: IMonitoringExternalCred;
    'login-data'?: object;
}


export class OrchestrationOrchestratorSpec extends BaseModel implements IOrchestrationOrchestratorSpec {
    /** Type of orchestrator */
    'type': OrchestrationOrchestratorSpec_type = null;
    /** URI of the orchestratorlength of string should be at least 1 */
    'uri': string = null;
    /** Credentials for the orchestrator */
    'credentials': MonitoringExternalCred = null;
    'login-data': object = null;
    public static propInfo: { [prop in keyof IOrchestrationOrchestratorSpec]: PropInfoItem } = {
        'type': {
            enum: OrchestrationOrchestratorSpec_type_uihint,
            default: 'vcenter',
            description:  `Type of orchestrator`,
            required: true,
            type: 'string'
        },
        'uri': {
            description:  `URI of the orchestratorlength of string should be at least 1`,
            required: true,
            type: 'string'
        },
        'credentials': {
            description:  `Credentials for the orchestrator`,
            required: false,
            type: 'object'
        },
        'login-data': {
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return OrchestrationOrchestratorSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return OrchestrationOrchestratorSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (OrchestrationOrchestratorSpec.propInfo[prop] != null &&
                        OrchestrationOrchestratorSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['credentials'] = new MonitoringExternalCred();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['type'] != null) {
            this['type'] = values['type'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('type')) {
            this['type'] = <OrchestrationOrchestratorSpec_type>  OrchestrationOrchestratorSpec.propInfo['type'].default;
        } else {
            this['type'] = null
        }
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('uri')) {
            this['uri'] = OrchestrationOrchestratorSpec.propInfo['uri'].default;
        } else {
            this['uri'] = null
        }
        if (values) {
            this['credentials'].setValues(values['credentials'], fillDefaults);
        } else {
            this['credentials'].setValues(null, fillDefaults);
        }
        if (values && values['login-data'] != null) {
            this['login-data'] = values['login-data'];
        } else if (fillDefaults && OrchestrationOrchestratorSpec.hasDefaultValue('login-data')) {
            this['login-data'] = OrchestrationOrchestratorSpec.propInfo['login-data'].default;
        } else {
            this['login-data'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'type': CustomFormControl(new FormControl(this['type'], [required, enumValidator(OrchestrationOrchestratorSpec_type), ]), OrchestrationOrchestratorSpec.propInfo['type']),
                'uri': CustomFormControl(new FormControl(this['uri'], [required, minLengthValidator(1), ]), OrchestrationOrchestratorSpec.propInfo['uri']),
                'credentials': CustomFormGroup(this['credentials'].$formGroup, OrchestrationOrchestratorSpec.propInfo['credentials'].required),
                'login-data': CustomFormControl(new FormControl(this['login-data']), OrchestrationOrchestratorSpec.propInfo['login-data']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('credentials') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('credentials').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['type'].setValue(this['type']);
            this._formGroup.controls['uri'].setValue(this['uri']);
            this['credentials'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['login-data'].setValue(this['login-data']);
        }
    }
}

