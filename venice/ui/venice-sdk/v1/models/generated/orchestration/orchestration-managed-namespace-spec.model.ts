/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { OrchestrationManagedNamespaceSpec_multicast_filter,  OrchestrationManagedNamespaceSpec_multicast_filter_uihint  } from './enums';
import { OrchestrationManagedNamespaceSpec_discovery_protocol,  OrchestrationManagedNamespaceSpec_discovery_protocol_uihint  } from './enums';
import { OrchestrationManagedNamespaceSpec_discovery_operation,  OrchestrationManagedNamespaceSpec_discovery_operation_uihint  } from './enums';

export interface IOrchestrationManagedNamespaceSpec {
    'mtu'?: number;
    'multicast-filter': OrchestrationManagedNamespaceSpec_multicast_filter;
    'discovery-protocol': OrchestrationManagedNamespaceSpec_discovery_protocol;
    'discovery-operation': OrchestrationManagedNamespaceSpec_discovery_operation;
    'num-uplinks'?: number;
    '_ui'?: any;
}


export class OrchestrationManagedNamespaceSpec extends BaseModel implements IOrchestrationManagedNamespaceSpec {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'mtu': number = null;
    'multicast-filter': OrchestrationManagedNamespaceSpec_multicast_filter = null;
    'discovery-protocol': OrchestrationManagedNamespaceSpec_discovery_protocol = null;
    'discovery-operation': OrchestrationManagedNamespaceSpec_discovery_operation = null;
    'num-uplinks': number = null;
    public static propInfo: { [prop in keyof IOrchestrationManagedNamespaceSpec]: PropInfoItem } = {
        'mtu': {
            default: parseInt('1500'),
            required: false,
            type: 'number'
        },
        'multicast-filter': {
            enum: OrchestrationManagedNamespaceSpec_multicast_filter_uihint,
            default: 'basic',
            required: true,
            type: 'string'
        },
        'discovery-protocol': {
            enum: OrchestrationManagedNamespaceSpec_discovery_protocol_uihint,
            default: 'disabled',
            required: true,
            type: 'string'
        },
        'discovery-operation': {
            enum: OrchestrationManagedNamespaceSpec_discovery_operation_uihint,
            default: 'none',
            required: true,
            type: 'string'
        },
        'num-uplinks': {
            default: parseInt('2'),
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return OrchestrationManagedNamespaceSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return OrchestrationManagedNamespaceSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (OrchestrationManagedNamespaceSpec.propInfo[prop] != null &&
                        OrchestrationManagedNamespaceSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['mtu'] != null) {
            this['mtu'] = values['mtu'];
        } else if (fillDefaults && OrchestrationManagedNamespaceSpec.hasDefaultValue('mtu')) {
            this['mtu'] = OrchestrationManagedNamespaceSpec.propInfo['mtu'].default;
        } else {
            this['mtu'] = null
        }
        if (values && values['multicast-filter'] != null) {
            this['multicast-filter'] = values['multicast-filter'];
        } else if (fillDefaults && OrchestrationManagedNamespaceSpec.hasDefaultValue('multicast-filter')) {
            this['multicast-filter'] = <OrchestrationManagedNamespaceSpec_multicast_filter>  OrchestrationManagedNamespaceSpec.propInfo['multicast-filter'].default;
        } else {
            this['multicast-filter'] = null
        }
        if (values && values['discovery-protocol'] != null) {
            this['discovery-protocol'] = values['discovery-protocol'];
        } else if (fillDefaults && OrchestrationManagedNamespaceSpec.hasDefaultValue('discovery-protocol')) {
            this['discovery-protocol'] = <OrchestrationManagedNamespaceSpec_discovery_protocol>  OrchestrationManagedNamespaceSpec.propInfo['discovery-protocol'].default;
        } else {
            this['discovery-protocol'] = null
        }
        if (values && values['discovery-operation'] != null) {
            this['discovery-operation'] = values['discovery-operation'];
        } else if (fillDefaults && OrchestrationManagedNamespaceSpec.hasDefaultValue('discovery-operation')) {
            this['discovery-operation'] = <OrchestrationManagedNamespaceSpec_discovery_operation>  OrchestrationManagedNamespaceSpec.propInfo['discovery-operation'].default;
        } else {
            this['discovery-operation'] = null
        }
        if (values && values['num-uplinks'] != null) {
            this['num-uplinks'] = values['num-uplinks'];
        } else if (fillDefaults && OrchestrationManagedNamespaceSpec.hasDefaultValue('num-uplinks')) {
            this['num-uplinks'] = OrchestrationManagedNamespaceSpec.propInfo['num-uplinks'].default;
        } else {
            this['num-uplinks'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'mtu': CustomFormControl(new FormControl(this['mtu']), OrchestrationManagedNamespaceSpec.propInfo['mtu']),
                'multicast-filter': CustomFormControl(new FormControl(this['multicast-filter'], [required, enumValidator(OrchestrationManagedNamespaceSpec_multicast_filter), ]), OrchestrationManagedNamespaceSpec.propInfo['multicast-filter']),
                'discovery-protocol': CustomFormControl(new FormControl(this['discovery-protocol'], [required, enumValidator(OrchestrationManagedNamespaceSpec_discovery_protocol), ]), OrchestrationManagedNamespaceSpec.propInfo['discovery-protocol']),
                'discovery-operation': CustomFormControl(new FormControl(this['discovery-operation'], [required, enumValidator(OrchestrationManagedNamespaceSpec_discovery_operation), ]), OrchestrationManagedNamespaceSpec.propInfo['discovery-operation']),
                'num-uplinks': CustomFormControl(new FormControl(this['num-uplinks']), OrchestrationManagedNamespaceSpec.propInfo['num-uplinks']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['mtu'].setValue(this['mtu']);
            this._formGroup.controls['multicast-filter'].setValue(this['multicast-filter']);
            this._formGroup.controls['discovery-protocol'].setValue(this['discovery-protocol']);
            this._formGroup.controls['discovery-operation'].setValue(this['discovery-operation']);
            this._formGroup.controls['num-uplinks'].setValue(this['num-uplinks']);
        }
    }
}

