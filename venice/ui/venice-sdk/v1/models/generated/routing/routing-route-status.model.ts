/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IRoutingRouteStatus {
    'prefix'?: string;
    'prefixlen'?: string;
    'aspath'?: string;
    'pathorigid'?: string;
    'nexthopaddr'?: string;
    'routesource'?: string;
    'isactive'?: string;
    'reasonnotbest'?: string;
    'remote_addr'?: string;
    'extcomm'?: Array<string>;
    'bestroute'?: boolean;
    'ecmproute'?: boolean;
    'flap_stats_flapcnt'?: number;
    'flap_stats_supprsd'?: boolean;
    'stale'?: boolean;
    'flap_start_time'?: number;
    '_ui'?: any;
}


export class RoutingRouteStatus extends BaseModel implements IRoutingRouteStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    'prefix': string = null;
    'prefixlen': string = null;
    'aspath': string = null;
    'pathorigid': string = null;
    'nexthopaddr': string = null;
    'routesource': string = null;
    'isactive': string = null;
    'reasonnotbest': string = null;
    'remote_addr': string = null;
    'extcomm': Array<string> = null;
    'bestroute': boolean = null;
    'ecmproute': boolean = null;
    'flap_stats_flapcnt': number = null;
    'flap_stats_supprsd': boolean = null;
    'stale': boolean = null;
    'flap_start_time': number = null;
    public static propInfo: { [prop in keyof IRoutingRouteStatus]: PropInfoItem } = {
        'prefix': {
            required: false,
            type: 'string'
        },
        'prefixlen': {
            required: false,
            type: 'string'
        },
        'aspath': {
            required: false,
            type: 'string'
        },
        'pathorigid': {
            required: false,
            type: 'string'
        },
        'nexthopaddr': {
            required: false,
            type: 'string'
        },
        'routesource': {
            required: false,
            type: 'string'
        },
        'isactive': {
            required: false,
            type: 'string'
        },
        'reasonnotbest': {
            required: false,
            type: 'string'
        },
        'remote_addr': {
            required: false,
            type: 'string'
        },
        'extcomm': {
            required: false,
            type: 'Array<string>'
        },
        'bestroute': {
            required: false,
            type: 'boolean'
        },
        'ecmproute': {
            required: false,
            type: 'boolean'
        },
        'flap_stats_flapcnt': {
            required: false,
            type: 'number'
        },
        'flap_stats_supprsd': {
            required: false,
            type: 'boolean'
        },
        'stale': {
            required: false,
            type: 'boolean'
        },
        'flap_start_time': {
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return RoutingRouteStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return RoutingRouteStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (RoutingRouteStatus.propInfo[prop] != null &&
                        RoutingRouteStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['extcomm'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['prefix'] != null) {
            this['prefix'] = values['prefix'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('prefix')) {
            this['prefix'] = RoutingRouteStatus.propInfo['prefix'].default;
        } else {
            this['prefix'] = null
        }
        if (values && values['prefixlen'] != null) {
            this['prefixlen'] = values['prefixlen'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('prefixlen')) {
            this['prefixlen'] = RoutingRouteStatus.propInfo['prefixlen'].default;
        } else {
            this['prefixlen'] = null
        }
        if (values && values['aspath'] != null) {
            this['aspath'] = values['aspath'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('aspath')) {
            this['aspath'] = RoutingRouteStatus.propInfo['aspath'].default;
        } else {
            this['aspath'] = null
        }
        if (values && values['pathorigid'] != null) {
            this['pathorigid'] = values['pathorigid'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('pathorigid')) {
            this['pathorigid'] = RoutingRouteStatus.propInfo['pathorigid'].default;
        } else {
            this['pathorigid'] = null
        }
        if (values && values['nexthopaddr'] != null) {
            this['nexthopaddr'] = values['nexthopaddr'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('nexthopaddr')) {
            this['nexthopaddr'] = RoutingRouteStatus.propInfo['nexthopaddr'].default;
        } else {
            this['nexthopaddr'] = null
        }
        if (values && values['routesource'] != null) {
            this['routesource'] = values['routesource'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('routesource')) {
            this['routesource'] = RoutingRouteStatus.propInfo['routesource'].default;
        } else {
            this['routesource'] = null
        }
        if (values && values['isactive'] != null) {
            this['isactive'] = values['isactive'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('isactive')) {
            this['isactive'] = RoutingRouteStatus.propInfo['isactive'].default;
        } else {
            this['isactive'] = null
        }
        if (values && values['reasonnotbest'] != null) {
            this['reasonnotbest'] = values['reasonnotbest'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('reasonnotbest')) {
            this['reasonnotbest'] = RoutingRouteStatus.propInfo['reasonnotbest'].default;
        } else {
            this['reasonnotbest'] = null
        }
        if (values && values['remote_addr'] != null) {
            this['remote_addr'] = values['remote_addr'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('remote_addr')) {
            this['remote_addr'] = RoutingRouteStatus.propInfo['remote_addr'].default;
        } else {
            this['remote_addr'] = null
        }
        if (values && values['extcomm'] != null) {
            this['extcomm'] = values['extcomm'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('extcomm')) {
            this['extcomm'] = [ RoutingRouteStatus.propInfo['extcomm'].default];
        } else {
            this['extcomm'] = [];
        }
        if (values && values['bestroute'] != null) {
            this['bestroute'] = values['bestroute'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('bestroute')) {
            this['bestroute'] = RoutingRouteStatus.propInfo['bestroute'].default;
        } else {
            this['bestroute'] = null
        }
        if (values && values['ecmproute'] != null) {
            this['ecmproute'] = values['ecmproute'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('ecmproute')) {
            this['ecmproute'] = RoutingRouteStatus.propInfo['ecmproute'].default;
        } else {
            this['ecmproute'] = null
        }
        if (values && values['flap_stats_flapcnt'] != null) {
            this['flap_stats_flapcnt'] = values['flap_stats_flapcnt'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('flap_stats_flapcnt')) {
            this['flap_stats_flapcnt'] = RoutingRouteStatus.propInfo['flap_stats_flapcnt'].default;
        } else {
            this['flap_stats_flapcnt'] = null
        }
        if (values && values['flap_stats_supprsd'] != null) {
            this['flap_stats_supprsd'] = values['flap_stats_supprsd'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('flap_stats_supprsd')) {
            this['flap_stats_supprsd'] = RoutingRouteStatus.propInfo['flap_stats_supprsd'].default;
        } else {
            this['flap_stats_supprsd'] = null
        }
        if (values && values['stale'] != null) {
            this['stale'] = values['stale'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('stale')) {
            this['stale'] = RoutingRouteStatus.propInfo['stale'].default;
        } else {
            this['stale'] = null
        }
        if (values && values['flap_start_time'] != null) {
            this['flap_start_time'] = values['flap_start_time'];
        } else if (fillDefaults && RoutingRouteStatus.hasDefaultValue('flap_start_time')) {
            this['flap_start_time'] = RoutingRouteStatus.propInfo['flap_start_time'].default;
        } else {
            this['flap_start_time'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'prefix': CustomFormControl(new FormControl(this['prefix']), RoutingRouteStatus.propInfo['prefix']),
                'prefixlen': CustomFormControl(new FormControl(this['prefixlen']), RoutingRouteStatus.propInfo['prefixlen']),
                'aspath': CustomFormControl(new FormControl(this['aspath']), RoutingRouteStatus.propInfo['aspath']),
                'pathorigid': CustomFormControl(new FormControl(this['pathorigid']), RoutingRouteStatus.propInfo['pathorigid']),
                'nexthopaddr': CustomFormControl(new FormControl(this['nexthopaddr']), RoutingRouteStatus.propInfo['nexthopaddr']),
                'routesource': CustomFormControl(new FormControl(this['routesource']), RoutingRouteStatus.propInfo['routesource']),
                'isactive': CustomFormControl(new FormControl(this['isactive']), RoutingRouteStatus.propInfo['isactive']),
                'reasonnotbest': CustomFormControl(new FormControl(this['reasonnotbest']), RoutingRouteStatus.propInfo['reasonnotbest']),
                'remote_addr': CustomFormControl(new FormControl(this['remote_addr']), RoutingRouteStatus.propInfo['remote_addr']),
                'extcomm': CustomFormControl(new FormControl(this['extcomm']), RoutingRouteStatus.propInfo['extcomm']),
                'bestroute': CustomFormControl(new FormControl(this['bestroute']), RoutingRouteStatus.propInfo['bestroute']),
                'ecmproute': CustomFormControl(new FormControl(this['ecmproute']), RoutingRouteStatus.propInfo['ecmproute']),
                'flap_stats_flapcnt': CustomFormControl(new FormControl(this['flap_stats_flapcnt']), RoutingRouteStatus.propInfo['flap_stats_flapcnt']),
                'flap_stats_supprsd': CustomFormControl(new FormControl(this['flap_stats_supprsd']), RoutingRouteStatus.propInfo['flap_stats_supprsd']),
                'stale': CustomFormControl(new FormControl(this['stale']), RoutingRouteStatus.propInfo['stale']),
                'flap_start_time': CustomFormControl(new FormControl(this['flap_start_time']), RoutingRouteStatus.propInfo['flap_start_time']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['prefix'].setValue(this['prefix']);
            this._formGroup.controls['prefixlen'].setValue(this['prefixlen']);
            this._formGroup.controls['aspath'].setValue(this['aspath']);
            this._formGroup.controls['pathorigid'].setValue(this['pathorigid']);
            this._formGroup.controls['nexthopaddr'].setValue(this['nexthopaddr']);
            this._formGroup.controls['routesource'].setValue(this['routesource']);
            this._formGroup.controls['isactive'].setValue(this['isactive']);
            this._formGroup.controls['reasonnotbest'].setValue(this['reasonnotbest']);
            this._formGroup.controls['remote_addr'].setValue(this['remote_addr']);
            this._formGroup.controls['extcomm'].setValue(this['extcomm']);
            this._formGroup.controls['bestroute'].setValue(this['bestroute']);
            this._formGroup.controls['ecmproute'].setValue(this['ecmproute']);
            this._formGroup.controls['flap_stats_flapcnt'].setValue(this['flap_stats_flapcnt']);
            this._formGroup.controls['flap_stats_supprsd'].setValue(this['flap_stats_supprsd']);
            this._formGroup.controls['stale'].setValue(this['stale']);
            this._formGroup.controls['flap_start_time'].setValue(this['flap_start_time']);
        }
    }
}

