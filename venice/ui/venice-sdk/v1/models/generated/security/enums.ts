/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */

// generate enum based on strings instead of numbers
// (see https://blog.rsuter.com/how-to-implement-an-enum-with-string-values-in-typescript/)
export enum LabelsRequirement_operator {
    'equals' = <any>"equals",
    'notEquals' = <any>"notEquals",
    'in' = <any>"in",
    'notIn' = <any>"notIn",
}

export enum SecurityCertificateSpec_usages {
    'Server' = <any>"Server",
    'Client' = <any>"Client",
    'TrustRoot' = <any>"TrustRoot",
}

export enum SecurityCertificateStatus_validity {
    'Unknown' = <any>"Unknown",
    'Valid' = <any>"Valid",
    'Invalid' = <any>"Invalid",
    'Expired' = <any>"Expired",
}


export enum LabelsRequirement_operator_uihint {
    'notEquals' = <any> "not equals",
    'notIn' = <any> "not in",
}




/**
 * bundle of all enums for databinding to options, radio-buttons etc.
 * usage in component:
 *   import { AllEnums, minValueValidator, maxValueValidator } from '../../models/webapi';
 *
 *   @Component({
 *       ...
 *   })
 *   export class xxxComponent implements OnInit {
 *       allEnums = AllEnums;
 *       ...
 *       ngOnInit() {
 *           this.allEnums = AllEnums.instance;
 *       }
 *   }
*/
export class AllEnums {
    private static _instance: AllEnums = new AllEnums();
    constructor() {
        if (AllEnums._instance) {
            throw new Error("Error: Instantiation failed: Use AllEnums.instance instead of new");
        }
        AllEnums._instance = this;
    }
    static get instance(): AllEnums {
        return AllEnums._instance;
    }

    LabelsRequirement_operator = LabelsRequirement_operator;
    SecurityCertificateSpec_usages = SecurityCertificateSpec_usages;
    SecurityCertificateStatus_validity = SecurityCertificateStatus_validity;

    LabelsRequirement_operator_uihint = LabelsRequirement_operator_uihint;
}
