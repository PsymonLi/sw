/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { LabelsSelector, ILabelsSelector } from './labels-selector.model';

export interface ISecuritySecurityGroupSpec {
    'workload-selector'?: ILabelsSelector;
    'service-labels'?: Array<string>;
    'match-prefixes'?: Array<string>;
}


export class SecuritySecurityGroupSpec extends BaseModel implements ISecuritySecurityGroupSpec {
    'workload-selector': LabelsSelector;
    'service-labels': Array<string>;
    'match-prefixes': Array<string>;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['workload-selector'] = new LabelsSelector();
        this['service-labels'] = new Array<string>();
        this['match-prefixes'] = new Array<string>();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['workload-selector'].setValues(values['workload-selector']);
            this.fillModelArray<string>(this, 'service-labels', values['service-labels']);
            this.fillModelArray<string>(this, 'match-prefixes', values['match-prefixes']);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'workload-selector': this['workload-selector'].$formGroup,
                'service-labels': new FormArray([]),
                'match-prefixes': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('service-labels', this['service-labels']);
            // generate FormArray control elements
            this.fillFormArray<string>('match-prefixes', this['match-prefixes']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this['workload-selector'].setFormGroupValues();
            this.fillModelArray<string>(this, 'service-labels', this['service-labels']);
            this.fillModelArray<string>(this, 'match-prefixes', this['match-prefixes']);
        }
    }
}

