/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';


export interface ISecurityFirewallProfileSpec {
    'session-idle-timeout'?: string;
    'tcp-connection-setup-timeout'?: string;
    'tcp-close-timeout'?: string;
    'tcp-half-closed-timeout'?: string;
    'tcp-drop-timeout'?: string;
    'udp-drop-timeout'?: string;
    'icmp-drop-timeout'?: string;
    'drop-timeout'?: string;
    'tcp-timeout'?: string;
    'udp-timeout'?: string;
    'icmp-timeout'?: string;
    'disable-conn-track'?: boolean;
    'ip-normalization-enable'?: boolean;
    'tcp-normalization-enable'?: boolean;
    'udp-normalization-enable'?: boolean;
    'icmp-normalization-enable'?: boolean;
}


export class SecurityFirewallProfileSpec extends BaseModel implements ISecurityFirewallProfileSpec {
    /** should be a valid time duration
     */
    'session-idle-timeout': string = null;
    /** should be a valid time duration
     */
    'tcp-connection-setup-timeout': string = null;
    /** should be a valid time duration
     */
    'tcp-close-timeout': string = null;
    /** should be a valid time duration
     */
    'tcp-half-closed-timeout': string = null;
    /** should be a valid time duration
     */
    'tcp-drop-timeout': string = null;
    /** should be a valid time duration
     */
    'udp-drop-timeout': string = null;
    /** should be a valid time duration
     */
    'icmp-drop-timeout': string = null;
    /** should be a valid time duration
     */
    'drop-timeout': string = null;
    /** should be a valid time duration
     */
    'tcp-timeout': string = null;
    /** should be a valid time duration
     */
    'udp-timeout': string = null;
    /** should be a valid time duration
     */
    'icmp-timeout': string = null;
    'disable-conn-track': boolean = null;
    'ip-normalization-enable': boolean = null;
    'tcp-normalization-enable': boolean = null;
    'udp-normalization-enable': boolean = null;
    'icmp-normalization-enable': boolean = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'session-idle-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'tcp-connection-setup-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'tcp-close-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'tcp-half-closed-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'tcp-drop-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'udp-drop-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'icmp-drop-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'drop-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'tcp-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'udp-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'icmp-timeout': {
            description:  'should be a valid time duration ',
            hint:  '2h',
            type: 'string'
        },
        'disable-conn-track': {
            type: 'boolean'
        },
        'ip-normalization-enable': {
            type: 'boolean'
        },
        'tcp-normalization-enable': {
            type: 'boolean'
        },
        'udp-normalization-enable': {
            type: 'boolean'
        },
        'icmp-normalization-enable': {
            type: 'boolean'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityFirewallProfileSpec.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityFirewallProfileSpec.propInfo[prop] != null &&
                        SecurityFirewallProfileSpec.propInfo[prop].default != null &&
                        SecurityFirewallProfileSpec.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['session-idle-timeout'] != null) {
            this['session-idle-timeout'] = values['session-idle-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('session-idle-timeout')) {
            this['session-idle-timeout'] = SecurityFirewallProfileSpec.propInfo['session-idle-timeout'].default;
        }
        if (values && values['tcp-connection-setup-timeout'] != null) {
            this['tcp-connection-setup-timeout'] = values['tcp-connection-setup-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-connection-setup-timeout')) {
            this['tcp-connection-setup-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-connection-setup-timeout'].default;
        }
        if (values && values['tcp-close-timeout'] != null) {
            this['tcp-close-timeout'] = values['tcp-close-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-close-timeout')) {
            this['tcp-close-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-close-timeout'].default;
        }
        if (values && values['tcp-half-closed-timeout'] != null) {
            this['tcp-half-closed-timeout'] = values['tcp-half-closed-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-half-closed-timeout')) {
            this['tcp-half-closed-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-half-closed-timeout'].default;
        }
        if (values && values['tcp-drop-timeout'] != null) {
            this['tcp-drop-timeout'] = values['tcp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-drop-timeout')) {
            this['tcp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-drop-timeout'].default;
        }
        if (values && values['udp-drop-timeout'] != null) {
            this['udp-drop-timeout'] = values['udp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('udp-drop-timeout')) {
            this['udp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['udp-drop-timeout'].default;
        }
        if (values && values['icmp-drop-timeout'] != null) {
            this['icmp-drop-timeout'] = values['icmp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('icmp-drop-timeout')) {
            this['icmp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['icmp-drop-timeout'].default;
        }
        if (values && values['drop-timeout'] != null) {
            this['drop-timeout'] = values['drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('drop-timeout')) {
            this['drop-timeout'] = SecurityFirewallProfileSpec.propInfo['drop-timeout'].default;
        }
        if (values && values['tcp-timeout'] != null) {
            this['tcp-timeout'] = values['tcp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-timeout')) {
            this['tcp-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-timeout'].default;
        }
        if (values && values['udp-timeout'] != null) {
            this['udp-timeout'] = values['udp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('udp-timeout')) {
            this['udp-timeout'] = SecurityFirewallProfileSpec.propInfo['udp-timeout'].default;
        }
        if (values && values['icmp-timeout'] != null) {
            this['icmp-timeout'] = values['icmp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('icmp-timeout')) {
            this['icmp-timeout'] = SecurityFirewallProfileSpec.propInfo['icmp-timeout'].default;
        }
        if (values && values['disable-conn-track'] != null) {
            this['disable-conn-track'] = values['disable-conn-track'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('disable-conn-track')) {
            this['disable-conn-track'] = SecurityFirewallProfileSpec.propInfo['disable-conn-track'].default;
        }
        if (values && values['ip-normalization-enable'] != null) {
            this['ip-normalization-enable'] = values['ip-normalization-enable'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('ip-normalization-enable')) {
            this['ip-normalization-enable'] = SecurityFirewallProfileSpec.propInfo['ip-normalization-enable'].default;
        }
        if (values && values['tcp-normalization-enable'] != null) {
            this['tcp-normalization-enable'] = values['tcp-normalization-enable'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-normalization-enable')) {
            this['tcp-normalization-enable'] = SecurityFirewallProfileSpec.propInfo['tcp-normalization-enable'].default;
        }
        if (values && values['udp-normalization-enable'] != null) {
            this['udp-normalization-enable'] = values['udp-normalization-enable'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('udp-normalization-enable')) {
            this['udp-normalization-enable'] = SecurityFirewallProfileSpec.propInfo['udp-normalization-enable'].default;
        }
        if (values && values['icmp-normalization-enable'] != null) {
            this['icmp-normalization-enable'] = values['icmp-normalization-enable'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('icmp-normalization-enable')) {
            this['icmp-normalization-enable'] = SecurityFirewallProfileSpec.propInfo['icmp-normalization-enable'].default;
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'session-idle-timeout': new FormControl(this['session-idle-timeout']),
                'tcp-connection-setup-timeout': new FormControl(this['tcp-connection-setup-timeout']),
                'tcp-close-timeout': new FormControl(this['tcp-close-timeout']),
                'tcp-half-closed-timeout': new FormControl(this['tcp-half-closed-timeout']),
                'tcp-drop-timeout': new FormControl(this['tcp-drop-timeout']),
                'udp-drop-timeout': new FormControl(this['udp-drop-timeout']),
                'icmp-drop-timeout': new FormControl(this['icmp-drop-timeout']),
                'drop-timeout': new FormControl(this['drop-timeout']),
                'tcp-timeout': new FormControl(this['tcp-timeout']),
                'udp-timeout': new FormControl(this['udp-timeout']),
                'icmp-timeout': new FormControl(this['icmp-timeout']),
                'disable-conn-track': new FormControl(this['disable-conn-track']),
                'ip-normalization-enable': new FormControl(this['ip-normalization-enable']),
                'tcp-normalization-enable': new FormControl(this['tcp-normalization-enable']),
                'udp-normalization-enable': new FormControl(this['udp-normalization-enable']),
                'icmp-normalization-enable': new FormControl(this['icmp-normalization-enable']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['session-idle-timeout'].setValue(this['session-idle-timeout']);
            this._formGroup.controls['tcp-connection-setup-timeout'].setValue(this['tcp-connection-setup-timeout']);
            this._formGroup.controls['tcp-close-timeout'].setValue(this['tcp-close-timeout']);
            this._formGroup.controls['tcp-half-closed-timeout'].setValue(this['tcp-half-closed-timeout']);
            this._formGroup.controls['tcp-drop-timeout'].setValue(this['tcp-drop-timeout']);
            this._formGroup.controls['udp-drop-timeout'].setValue(this['udp-drop-timeout']);
            this._formGroup.controls['icmp-drop-timeout'].setValue(this['icmp-drop-timeout']);
            this._formGroup.controls['drop-timeout'].setValue(this['drop-timeout']);
            this._formGroup.controls['tcp-timeout'].setValue(this['tcp-timeout']);
            this._formGroup.controls['udp-timeout'].setValue(this['udp-timeout']);
            this._formGroup.controls['icmp-timeout'].setValue(this['icmp-timeout']);
            this._formGroup.controls['disable-conn-track'].setValue(this['disable-conn-track']);
            this._formGroup.controls['ip-normalization-enable'].setValue(this['ip-normalization-enable']);
            this._formGroup.controls['tcp-normalization-enable'].setValue(this['tcp-normalization-enable']);
            this._formGroup.controls['udp-normalization-enable'].setValue(this['udp-normalization-enable']);
            this._formGroup.controls['icmp-normalization-enable'].setValue(this['icmp-normalization-enable']);
        }
    }
}

