/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface ISecurityFirewallProfileSpec {
    'session-idle-timeout': string;
    'tcp-connection-setup-timeout': string;
    'tcp-close-timeout': string;
    'tcp-half-closed-timeout': string;
    'tcp-drop-timeout': string;
    'udp-drop-timeout': string;
    'icmp-drop-timeout': string;
    'drop-timeout': string;
    'tcp-timeout': string;
    'udp-timeout': string;
    'icmp-timeout': string;
}


export class SecurityFirewallProfileSpec extends BaseModel implements ISecurityFirewallProfileSpec {
    /** Session idle timeout removes/deletes the session/flow if there is inactivity; this value is superceded by any value specified in App objectshould be a valid time duration
 */
    'session-idle-timeout': string = null;
    /** TCP Connection Setup Timeout is the period TCP session is kept to see the response of a SYNshould be a valid time duration
 */
    'tcp-connection-setup-timeout': string = null;
    /** TCP Close Timeout is the time for which TCP session is kept after a FIN is seenshould be a valid time duration
 */
    'tcp-close-timeout': string = null;
    /** TCP Half Closed Timeout is the time for which tCP session is kept when connection is half closed i.e. FIN sent by FIN_Ack not receivedshould be a valid time duration
 */
    'tcp-half-closed-timeout': string = null;
    /** TCP Drop Timeout is the period for which a drop entry is installed for a denied TCP flowshould be a valid time duration
 */
    'tcp-drop-timeout': string = null;
    /** UDP Drop Timeout is the period for which a drop entry is installed for a denied UDP flowshould be a valid time duration
 */
    'udp-drop-timeout': string = null;
    /** ICMP Drop Timeout is the period for which a drop entry is installed for a denied ICMP flowshould be a valid time duration
 */
    'icmp-drop-timeout': string = null;
    /** Drop Timeout is the period for which a drop entry is installed for a denied non tcp/udp/icmp flowshould be a valid time duration
 */
    'drop-timeout': string = null;
    /** Tcp Timeout is the period for which a TCP session is kept alive during inactivityshould be a valid time duration
 */
    'tcp-timeout': string = null;
    /** Udp Timeout is the period for which a UDP session is kept alive during inactivityshould be a valid time duration
 */
    'udp-timeout': string = null;
    /** Icmp Timeout is the period for which a ICMP session is kept alive during inactivityshould be a valid time duration
 */
    'icmp-timeout': string = null;
    public static propInfo: { [prop in keyof ISecurityFirewallProfileSpec]: PropInfoItem } = {
        'session-idle-timeout': {
            default: '90s',
            description:  `Session idle timeout removes/deletes the session/flow if there is inactivity; this value is superceded by any value specified in App objectshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'tcp-connection-setup-timeout': {
            default: '30s',
            description:  `TCP Connection Setup Timeout is the period TCP session is kept to see the response of a SYNshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'tcp-close-timeout': {
            default: '15s',
            description:  `TCP Close Timeout is the time for which TCP session is kept after a FIN is seenshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'tcp-half-closed-timeout': {
            default: '120s',
            description:  `TCP Half Closed Timeout is the time for which tCP session is kept when connection is half closed i.e. FIN sent by FIN_Ack not receivedshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'tcp-drop-timeout': {
            default: '90s',
            description:  `TCP Drop Timeout is the period for which a drop entry is installed for a denied TCP flowshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'udp-drop-timeout': {
            default: '60s',
            description:  `UDP Drop Timeout is the period for which a drop entry is installed for a denied UDP flowshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'icmp-drop-timeout': {
            default: '60s',
            description:  `ICMP Drop Timeout is the period for which a drop entry is installed for a denied ICMP flowshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'drop-timeout': {
            default: '60s',
            description:  `Drop Timeout is the period for which a drop entry is installed for a denied non tcp/udp/icmp flowshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'tcp-timeout': {
            default: '3600s',
            description:  `Tcp Timeout is the period for which a TCP session is kept alive during inactivityshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'udp-timeout': {
            default: '30s',
            description:  `Udp Timeout is the period for which a UDP session is kept alive during inactivityshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
        'icmp-timeout': {
            default: '6s',
            description:  `Icmp Timeout is the period for which a ICMP session is kept alive during inactivityshould be a valid time duration `,
            hint:  '2h',
            required: true,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityFirewallProfileSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return SecurityFirewallProfileSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityFirewallProfileSpec.propInfo[prop] != null &&
                        SecurityFirewallProfileSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['session-idle-timeout'] != null) {
            this['session-idle-timeout'] = values['session-idle-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('session-idle-timeout')) {
            this['session-idle-timeout'] = SecurityFirewallProfileSpec.propInfo['session-idle-timeout'].default;
        } else {
            this['session-idle-timeout'] = null
        }
        if (values && values['tcp-connection-setup-timeout'] != null) {
            this['tcp-connection-setup-timeout'] = values['tcp-connection-setup-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-connection-setup-timeout')) {
            this['tcp-connection-setup-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-connection-setup-timeout'].default;
        } else {
            this['tcp-connection-setup-timeout'] = null
        }
        if (values && values['tcp-close-timeout'] != null) {
            this['tcp-close-timeout'] = values['tcp-close-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-close-timeout')) {
            this['tcp-close-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-close-timeout'].default;
        } else {
            this['tcp-close-timeout'] = null
        }
        if (values && values['tcp-half-closed-timeout'] != null) {
            this['tcp-half-closed-timeout'] = values['tcp-half-closed-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-half-closed-timeout')) {
            this['tcp-half-closed-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-half-closed-timeout'].default;
        } else {
            this['tcp-half-closed-timeout'] = null
        }
        if (values && values['tcp-drop-timeout'] != null) {
            this['tcp-drop-timeout'] = values['tcp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-drop-timeout')) {
            this['tcp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-drop-timeout'].default;
        } else {
            this['tcp-drop-timeout'] = null
        }
        if (values && values['udp-drop-timeout'] != null) {
            this['udp-drop-timeout'] = values['udp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('udp-drop-timeout')) {
            this['udp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['udp-drop-timeout'].default;
        } else {
            this['udp-drop-timeout'] = null
        }
        if (values && values['icmp-drop-timeout'] != null) {
            this['icmp-drop-timeout'] = values['icmp-drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('icmp-drop-timeout')) {
            this['icmp-drop-timeout'] = SecurityFirewallProfileSpec.propInfo['icmp-drop-timeout'].default;
        } else {
            this['icmp-drop-timeout'] = null
        }
        if (values && values['drop-timeout'] != null) {
            this['drop-timeout'] = values['drop-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('drop-timeout')) {
            this['drop-timeout'] = SecurityFirewallProfileSpec.propInfo['drop-timeout'].default;
        } else {
            this['drop-timeout'] = null
        }
        if (values && values['tcp-timeout'] != null) {
            this['tcp-timeout'] = values['tcp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('tcp-timeout')) {
            this['tcp-timeout'] = SecurityFirewallProfileSpec.propInfo['tcp-timeout'].default;
        } else {
            this['tcp-timeout'] = null
        }
        if (values && values['udp-timeout'] != null) {
            this['udp-timeout'] = values['udp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('udp-timeout')) {
            this['udp-timeout'] = SecurityFirewallProfileSpec.propInfo['udp-timeout'].default;
        } else {
            this['udp-timeout'] = null
        }
        if (values && values['icmp-timeout'] != null) {
            this['icmp-timeout'] = values['icmp-timeout'];
        } else if (fillDefaults && SecurityFirewallProfileSpec.hasDefaultValue('icmp-timeout')) {
            this['icmp-timeout'] = SecurityFirewallProfileSpec.propInfo['icmp-timeout'].default;
        } else {
            this['icmp-timeout'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'session-idle-timeout': CustomFormControl(new FormControl(this['session-idle-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['session-idle-timeout']),
                'tcp-connection-setup-timeout': CustomFormControl(new FormControl(this['tcp-connection-setup-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['tcp-connection-setup-timeout']),
                'tcp-close-timeout': CustomFormControl(new FormControl(this['tcp-close-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['tcp-close-timeout']),
                'tcp-half-closed-timeout': CustomFormControl(new FormControl(this['tcp-half-closed-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['tcp-half-closed-timeout']),
                'tcp-drop-timeout': CustomFormControl(new FormControl(this['tcp-drop-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['tcp-drop-timeout']),
                'udp-drop-timeout': CustomFormControl(new FormControl(this['udp-drop-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['udp-drop-timeout']),
                'icmp-drop-timeout': CustomFormControl(new FormControl(this['icmp-drop-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['icmp-drop-timeout']),
                'drop-timeout': CustomFormControl(new FormControl(this['drop-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['drop-timeout']),
                'tcp-timeout': CustomFormControl(new FormControl(this['tcp-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['tcp-timeout']),
                'udp-timeout': CustomFormControl(new FormControl(this['udp-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['udp-timeout']),
                'icmp-timeout': CustomFormControl(new FormControl(this['icmp-timeout'], [required, ]), SecurityFirewallProfileSpec.propInfo['icmp-timeout']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['session-idle-timeout'].setValue(this['session-idle-timeout']);
            this._formGroup.controls['tcp-connection-setup-timeout'].setValue(this['tcp-connection-setup-timeout']);
            this._formGroup.controls['tcp-close-timeout'].setValue(this['tcp-close-timeout']);
            this._formGroup.controls['tcp-half-closed-timeout'].setValue(this['tcp-half-closed-timeout']);
            this._formGroup.controls['tcp-drop-timeout'].setValue(this['tcp-drop-timeout']);
            this._formGroup.controls['udp-drop-timeout'].setValue(this['udp-drop-timeout']);
            this._formGroup.controls['icmp-drop-timeout'].setValue(this['icmp-drop-timeout']);
            this._formGroup.controls['drop-timeout'].setValue(this['drop-timeout']);
            this._formGroup.controls['tcp-timeout'].setValue(this['tcp-timeout']);
            this._formGroup.controls['udp-timeout'].setValue(this['udp-timeout']);
            this._formGroup.controls['icmp-timeout'].setValue(this['icmp-timeout']);
        }
    }
}

