/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { SecurityALG_Type,  } from './enums';
import { SecurityIcmpAlg, ISecurityIcmpAlg } from './security-icmp-alg.model';
import { SecurityDnsAlg, ISecurityDnsAlg } from './security-dns-alg.model';
import { SecurityFtpAlg, ISecurityFtpAlg } from './security-ftp-alg.model';
import { SecuritySunrpcAlg, ISecuritySunrpcAlg } from './security-sunrpc-alg.model';
import { SecurityMsrpcAlg, ISecurityMsrpcAlg } from './security-msrpc-alg.model';

export interface ISecurityALG {
    'Type'?: SecurityALG_Type;
    'icmp'?: ISecurityIcmpAlg;
    'dns'?: ISecurityDnsAlg;
    'ftp'?: ISecurityFtpAlg;
    'sunrpc'?: ISecuritySunrpcAlg;
    'msrpc'?: ISecurityMsrpcAlg;
}


export class SecurityALG extends BaseModel implements ISecurityALG {
    'Type': SecurityALG_Type = null;
    'icmp': SecurityIcmpAlg = null;
    'dns': SecurityDnsAlg = null;
    'ftp': SecurityFtpAlg = null;
    'sunrpc': SecuritySunrpcAlg = null;
    'msrpc': SecurityMsrpcAlg = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'Type': {
            enum: SecurityALG_Type,
            default: 'ICMP',
            type: 'string'
        },
        'icmp': {
            type: 'object'
        },
        'dns': {
            type: 'object'
        },
        'ftp': {
            type: 'object'
        },
        'sunrpc': {
            type: 'object'
        },
        'msrpc': {
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityALG.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityALG.propInfo[prop] != null &&
                        SecurityALG.propInfo[prop].default != null &&
                        SecurityALG.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['icmp'] = new SecurityIcmpAlg();
        this['dns'] = new SecurityDnsAlg();
        this['ftp'] = new SecurityFtpAlg();
        this['sunrpc'] = new SecuritySunrpcAlg();
        this['msrpc'] = new SecurityMsrpcAlg();
        this.setValues(values);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['Type'] != null) {
            this['Type'] = values['Type'];
        } else if (fillDefaults && SecurityALG.hasDefaultValue('Type')) {
            this['Type'] = <SecurityALG_Type>  SecurityALG.propInfo['Type'].default;
        }
        if (values) {
            this['icmp'].setValues(values['icmp']);
        }
        if (values) {
            this['dns'].setValues(values['dns']);
        }
        if (values) {
            this['ftp'].setValues(values['ftp']);
        }
        if (values) {
            this['sunrpc'].setValues(values['sunrpc']);
        }
        if (values) {
            this['msrpc'].setValues(values['msrpc']);
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'Type': new FormControl(this['Type'], [enumValidator(SecurityALG_Type), ]),
                'icmp': this['icmp'].$formGroup,
                'dns': this['dns'].$formGroup,
                'ftp': this['ftp'].$formGroup,
                'sunrpc': this['sunrpc'].$formGroup,
                'msrpc': this['msrpc'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['Type'].setValue(this['Type']);
            this['icmp'].setFormGroupValuesToBeModelValues();
            this['dns'].setFormGroupValuesToBeModelValues();
            this['ftp'].setFormGroupValuesToBeModelValues();
            this['sunrpc'].setFormGroupValuesToBeModelValues();
            this['msrpc'].setFormGroupValuesToBeModelValues();
        }
    }
}

