/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface ISecuritySGRule {
    'ports'?: string;
    'action'?: string;
    'peer-group'?: string;
    'apps'?: Array<string>;
    'app-user'?: string;
    'app-user-group'?: string;
}


export class SecuritySGRule extends BaseModel implements ISecuritySGRule {
    'ports': string;
    'action': string;
    'peer-group': string;
    'apps': Array<string>;
    'app-user': string;
    'app-user-group': string;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['apps'] = new Array<string>();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['ports'] = values['ports'];
            this['action'] = values['action'];
            this['peer-group'] = values['peer-group'];
            this.fillModelArray<string>(this, 'apps', values['apps']);
            this['app-user'] = values['app-user'];
            this['app-user-group'] = values['app-user-group'];
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'ports': new FormControl(this['ports']),
                'action': new FormControl(this['action']),
                'peer-group': new FormControl(this['peer-group']),
                'apps': new FormArray([]),
                'app-user': new FormControl(this['app-user']),
                'app-user-group': new FormControl(this['app-user-group']),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('apps', this['apps']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['ports'].setValue(this['ports']);
            this._formGroup.controls['action'].setValue(this['action']);
            this._formGroup.controls['peer-group'].setValue(this['peer-group']);
            this.fillModelArray<string>(this, 'apps', this['apps']);
            this._formGroup.controls['app-user'].setValue(this['app-user']);
            this._formGroup.controls['app-user-group'].setValue(this['app-user-group']);
        }
    }
}

