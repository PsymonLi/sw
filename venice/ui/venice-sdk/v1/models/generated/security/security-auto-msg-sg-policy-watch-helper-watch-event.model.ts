/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { SecuritySGPolicy, ISecuritySGPolicy } from './security-sg-policy.model';

export interface ISecurityAutoMsgSGPolicyWatchHelperWatchEvent {
    'Type'?: string;
    'Object'?: ISecuritySGPolicy;
}


export class SecurityAutoMsgSGPolicyWatchHelperWatchEvent extends BaseModel implements ISecurityAutoMsgSGPolicyWatchHelperWatchEvent {
    'Type': string;
    'Object': SecuritySGPolicy;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (SecurityAutoMsgSGPolicyWatchHelperWatchEvent.enumProperties[prop] != null &&
                        SecurityAutoMsgSGPolicyWatchHelperWatchEvent.enumProperties[prop].default != null &&
                        SecurityAutoMsgSGPolicyWatchHelperWatchEvent.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['Object'] = new SecuritySGPolicy();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['Type'] != null) {
            this['Type'] = values['Type'];
        }
        if (values) {
            this['Object'].setValues(values['Object']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'Type': new FormControl(this['Type']),
                'Object': this['Object'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['Type'].setValue(this['Type']);
            this['Object'].setFormGroupValues();
        }
    }
}

