/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { SecuritySGRule, ISecuritySGRule } from './security-sg-rule.model';

export interface ISecurityNetworkSecurityPolicySpec {
    'attach-groups'?: Array<string>;
    'attach-tenant'?: boolean;
    'rules'?: Array<ISecuritySGRule>;
}


export class SecurityNetworkSecurityPolicySpec extends BaseModel implements ISecurityNetworkSecurityPolicySpec {
    /** list of security groups this policy is attached to */
    'attach-groups': Array<string> = null;
    /** specifies if the set of rules need to be attached globally to a tenant */
    'attach-tenant': boolean = null;
    /** list of rules */
    'rules': Array<SecuritySGRule> = null;
    public static propInfo: { [prop in keyof ISecurityNetworkSecurityPolicySpec]: PropInfoItem } = {
        'attach-groups': {
            description:  'List of security groups this policy is attached to',
            required: false,
            type: 'Array<string>'
        },
        'attach-tenant': {
            description:  'Specifies if the set of rules need to be attached globally to a tenant',
            required: false,
            type: 'boolean'
        },
        'rules': {
            description:  'List of rules',
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityNetworkSecurityPolicySpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return SecurityNetworkSecurityPolicySpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityNetworkSecurityPolicySpec.propInfo[prop] != null &&
                        SecurityNetworkSecurityPolicySpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['attach-groups'] = new Array<string>();
        this['rules'] = new Array<SecuritySGRule>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['attach-groups'] != null) {
            this['attach-groups'] = values['attach-groups'];
        } else if (fillDefaults && SecurityNetworkSecurityPolicySpec.hasDefaultValue('attach-groups')) {
            this['attach-groups'] = [ SecurityNetworkSecurityPolicySpec.propInfo['attach-groups'].default];
        } else {
            this['attach-groups'] = [];
        }
        if (values && values['attach-tenant'] != null) {
            this['attach-tenant'] = values['attach-tenant'];
        } else if (fillDefaults && SecurityNetworkSecurityPolicySpec.hasDefaultValue('attach-tenant')) {
            this['attach-tenant'] = SecurityNetworkSecurityPolicySpec.propInfo['attach-tenant'].default;
        } else {
            this['attach-tenant'] = null
        }
        if (values) {
            this.fillModelArray<SecuritySGRule>(this, 'rules', values['rules'], SecuritySGRule);
        } else {
            this['rules'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'attach-groups': CustomFormControl(new FormControl(this['attach-groups']), SecurityNetworkSecurityPolicySpec.propInfo['attach-groups']),
                'attach-tenant': CustomFormControl(new FormControl(this['attach-tenant']), SecurityNetworkSecurityPolicySpec.propInfo['attach-tenant']),
                'rules': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<SecuritySGRule>('rules', this['rules'], SecuritySGRule);
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('rules') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('rules').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['attach-groups'].setValue(this['attach-groups']);
            this._formGroup.controls['attach-tenant'].setValue(this['attach-tenant']);
            this.fillModelArray<SecuritySGRule>(this, 'rules', this['rules'], SecuritySGRule);
        }
    }
}

