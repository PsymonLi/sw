/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface ISecurityTLSProtocolSpec {
    'version'?: string;
    'cipher-suite'?: string;
}


export class SecurityTLSProtocolSpec extends BaseModel implements ISecurityTLSProtocolSpec {
    'version': string = null;
    'cipher-suite': string = null;
    public static propInfo: { [prop in keyof ISecurityTLSProtocolSpec]: PropInfoItem } = {
        'version': {
            required: false,
            type: 'string'
        },
        'cipher-suite': {
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityTLSProtocolSpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return SecurityTLSProtocolSpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityTLSProtocolSpec.propInfo[prop] != null &&
                        SecurityTLSProtocolSpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['version'] != null) {
            this['version'] = values['version'];
        } else if (fillDefaults && SecurityTLSProtocolSpec.hasDefaultValue('version')) {
            this['version'] = SecurityTLSProtocolSpec.propInfo['version'].default;
        } else {
            this['version'] = null
        }
        if (values && values['cipher-suite'] != null) {
            this['cipher-suite'] = values['cipher-suite'];
        } else if (fillDefaults && SecurityTLSProtocolSpec.hasDefaultValue('cipher-suite')) {
            this['cipher-suite'] = SecurityTLSProtocolSpec.propInfo['cipher-suite'].default;
        } else {
            this['cipher-suite'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'version': CustomFormControl(new FormControl(this['version']), SecurityTLSProtocolSpec.propInfo['version']),
                'cipher-suite': CustomFormControl(new FormControl(this['cipher-suite']), SecurityTLSProtocolSpec.propInfo['cipher-suite']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['version'].setValue(this['version']);
            this._formGroup.controls['cipher-suite'].setValue(this['cipher-suite']);
        }
    }
}

