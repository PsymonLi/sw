/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { SecurityTLSProtocolSpec, ISecurityTLSProtocolSpec } from './security-tls-protocol-spec.model';
import { SecurityIPsecProtocolSpec, ISecurityIPsecProtocolSpec } from './security-i-psec-protocol-spec.model';

export interface ISecurityTrafficEncryptionPolicySpec {
    'mode'?: string;
    'tls'?: ISecurityTLSProtocolSpec;
    'ipsec'?: ISecurityIPsecProtocolSpec;
    'key-rotation-interval-secs'?: number;
}


export class SecurityTrafficEncryptionPolicySpec extends BaseModel implements ISecurityTrafficEncryptionPolicySpec {
    /** Possible values: TLS, IPsec. */
    'mode': string = null;
    /** TLS Parameters for workload-to-workload connections. */
    'tls': SecurityTLSProtocolSpec = null;
    /** IPsec Parameters for node-to-node connections. */
    'ipsec': SecurityIPsecProtocolSpec = null;
    /** How often the keys should be rotated, in seconds. */
    'key-rotation-interval-secs': number = null;
    public static propInfo: { [prop in keyof ISecurityTrafficEncryptionPolicySpec]: PropInfoItem } = {
        'mode': {
            description:  `Possible values: TLS, IPsec.`,
            required: false,
            type: 'string'
        },
        'tls': {
            description:  `TLS Parameters for workload-to-workload connections.`,
            required: false,
            type: 'object'
        },
        'ipsec': {
            description:  `IPsec Parameters for node-to-node connections.`,
            required: false,
            type: 'object'
        },
        'key-rotation-interval-secs': {
            description:  `How often the keys should be rotated, in seconds.`,
            required: false,
            type: 'number'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return SecurityTrafficEncryptionPolicySpec.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return SecurityTrafficEncryptionPolicySpec.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (SecurityTrafficEncryptionPolicySpec.propInfo[prop] != null &&
                        SecurityTrafficEncryptionPolicySpec.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['tls'] = new SecurityTLSProtocolSpec();
        this['ipsec'] = new SecurityIPsecProtocolSpec();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['mode'] != null) {
            this['mode'] = values['mode'];
        } else if (fillDefaults && SecurityTrafficEncryptionPolicySpec.hasDefaultValue('mode')) {
            this['mode'] = SecurityTrafficEncryptionPolicySpec.propInfo['mode'].default;
        } else {
            this['mode'] = null
        }
        if (values) {
            this['tls'].setValues(values['tls'], fillDefaults);
        } else {
            this['tls'].setValues(null, fillDefaults);
        }
        if (values) {
            this['ipsec'].setValues(values['ipsec'], fillDefaults);
        } else {
            this['ipsec'].setValues(null, fillDefaults);
        }
        if (values && values['key-rotation-interval-secs'] != null) {
            this['key-rotation-interval-secs'] = values['key-rotation-interval-secs'];
        } else if (fillDefaults && SecurityTrafficEncryptionPolicySpec.hasDefaultValue('key-rotation-interval-secs')) {
            this['key-rotation-interval-secs'] = SecurityTrafficEncryptionPolicySpec.propInfo['key-rotation-interval-secs'].default;
        } else {
            this['key-rotation-interval-secs'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'mode': CustomFormControl(new FormControl(this['mode']), SecurityTrafficEncryptionPolicySpec.propInfo['mode']),
                'tls': CustomFormGroup(this['tls'].$formGroup, SecurityTrafficEncryptionPolicySpec.propInfo['tls'].required),
                'ipsec': CustomFormGroup(this['ipsec'].$formGroup, SecurityTrafficEncryptionPolicySpec.propInfo['ipsec'].required),
                'key-rotation-interval-secs': CustomFormControl(new FormControl(this['key-rotation-interval-secs']), SecurityTrafficEncryptionPolicySpec.propInfo['key-rotation-interval-secs']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('tls') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('tls').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('ipsec') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('ipsec').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['mode'].setValue(this['mode']);
            this['tls'].setFormGroupValuesToBeModelValues();
            this['ipsec'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['key-rotation-interval-secs'].setValue(this['key-rotation-interval-secs']);
        }
    }
}

