/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';


export interface ISecurityIPsecProtocolSpec {
    'encryption-transform'?: string;
    'integrity-transform'?: string;
}


export class SecurityIPsecProtocolSpec extends BaseModel implements ISecurityIPsecProtocolSpec {
    'encryption-transform': string;
    'integrity-transform': string;
    public static enumProperties = {
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['encryption-transform'] = values['encryption-transform'];
            this['integrity-transform'] = values['integrity-transform'];
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'encryption-transform': new FormControl(this['encryption-transform']),
                'integrity-transform': new FormControl(this['integrity-transform']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['encryption-transform'].setValue(this['encryption-transform']);
            this._formGroup.controls['integrity-transform'].setValue(this['integrity-transform']);
        }
    }
}

