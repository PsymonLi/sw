/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { SecurityAutoMsgAppWatchHelperWatchEvent, ISecurityAutoMsgAppWatchHelperWatchEvent } from './security-auto-msg-app-watch-helper-watch-event.model';

export interface ISecurityAutoMsgAppWatchHelper {
    'Events'?: Array<ISecurityAutoMsgAppWatchHelperWatchEvent>;
}


export class SecurityAutoMsgAppWatchHelper extends BaseModel implements ISecurityAutoMsgAppWatchHelper {
    'Events': Array<SecurityAutoMsgAppWatchHelperWatchEvent> = null;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (SecurityAutoMsgAppWatchHelper.enumProperties[prop] != null &&
                        SecurityAutoMsgAppWatchHelper.enumProperties[prop].default != null &&
                        SecurityAutoMsgAppWatchHelper.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['Events'] = new Array<SecurityAutoMsgAppWatchHelperWatchEvent>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.fillModelArray<SecurityAutoMsgAppWatchHelperWatchEvent>(this, 'Events', values['Events'], SecurityAutoMsgAppWatchHelperWatchEvent);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'Events': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<SecurityAutoMsgAppWatchHelperWatchEvent>('Events', this['Events'], SecurityAutoMsgAppWatchHelperWatchEvent);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this.fillModelArray<SecurityAutoMsgAppWatchHelperWatchEvent>(this, 'Events', this['Events'], SecurityAutoMsgAppWatchHelperWatchEvent);
        }
    }
}

