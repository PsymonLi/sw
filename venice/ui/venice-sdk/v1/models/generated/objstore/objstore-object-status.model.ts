/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IObjstoreObjectStatus {
    'size'?: string;
    'digest'?: string;
}


export class ObjstoreObjectStatus extends BaseModel implements IObjstoreObjectStatus {
    /** Size is the total size of the object. */
    'size': string = null;
    /** Digest is a hash digest of the object content. */
    'digest': string = null;
    public static propInfo: { [prop in keyof IObjstoreObjectStatus]: PropInfoItem } = {
        'size': {
            description:  `Size is the total size of the object.`,
            required: false,
            type: 'string'
        },
        'digest': {
            description:  `Digest is a hash digest of the object content.`,
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return ObjstoreObjectStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return ObjstoreObjectStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (ObjstoreObjectStatus.propInfo[prop] != null &&
                        ObjstoreObjectStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['size'] != null) {
            this['size'] = values['size'];
        } else if (fillDefaults && ObjstoreObjectStatus.hasDefaultValue('size')) {
            this['size'] = ObjstoreObjectStatus.propInfo['size'].default;
        } else {
            this['size'] = null
        }
        if (values && values['digest'] != null) {
            this['digest'] = values['digest'];
        } else if (fillDefaults && ObjstoreObjectStatus.hasDefaultValue('digest')) {
            this['digest'] = ObjstoreObjectStatus.propInfo['digest'].default;
        } else {
            this['digest'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'size': CustomFormControl(new FormControl(this['size']), ObjstoreObjectStatus.propInfo['size']),
                'digest': CustomFormControl(new FormControl(this['digest']), ObjstoreObjectStatus.propInfo['digest']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['size'].setValue(this['size']);
            this._formGroup.controls['digest'].setValue(this['digest']);
        }
    }
}

