/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IApiObjectRef {
    'tenant'?: string;
    'namespace'?: string;
    'kind'?: string;
    'name'?: string;
    'uri'?: string;
}


export class ApiObjectRef extends BaseModel implements IApiObjectRef {
    /** Tenant of the object. */
    'tenant': string = null;
    /** Namespace of the object, for scoped objects. */
    'namespace': string = null;
    /** Kind represents the type of the API object. */
    'kind': string = null;
    /** Name of the object, unique within a Namespace for scoped objects. */
    'name': string = null;
    /** URI is a link to accessing the referenced object. */
    'uri': string = null;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (ApiObjectRef.enumProperties[prop] != null &&
                        ApiObjectRef.enumProperties[prop].default != null &&
                        ApiObjectRef.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['tenant'] != null) {
            this['tenant'] = values['tenant'];
        }
        if (values && values['namespace'] != null) {
            this['namespace'] = values['namespace'];
        }
        if (values && values['kind'] != null) {
            this['kind'] = values['kind'];
        }
        if (values && values['name'] != null) {
            this['name'] = values['name'];
        }
        if (values && values['uri'] != null) {
            this['uri'] = values['uri'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'tenant': new FormControl(this['tenant']),
                'namespace': new FormControl(this['namespace']),
                'kind': new FormControl(this['kind']),
                'name': new FormControl(this['name']),
                'uri': new FormControl(this['uri']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['tenant'].setValue(this['tenant']);
            this._formGroup.controls['namespace'].setValue(this['namespace']);
            this._formGroup.controls['kind'].setValue(this['kind']);
            this._formGroup.controls['name'].setValue(this['name']);
            this._formGroup.controls['uri'].setValue(this['uri']);
        }
    }
}

