/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';

import { SearchPolicySearchResponse_status,  } from './enums';
import { SecuritySGRule, ISecuritySGRule } from './security-sg-rule.model';

export interface ISearchPolicySearchResponse {
    'status'?: SearchPolicySearchResponse_status;
    'sg-policy'?: string;
    'rule'?: ISecuritySGRule;
    'index'?: number;
}


export class SearchPolicySearchResponse extends BaseModel implements ISearchPolicySearchResponse {
    'status': SearchPolicySearchResponse_status = null;
    'sg-policy': string = null;
    'rule': SecuritySGRule = null;
    'index': number = null;
    public static enumProperties: { [key: string] : EnumDef } = {
        'status': {
            enum: SearchPolicySearchResponse_status,
            default: 'MATCH',
        },
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (SearchPolicySearchResponse.enumProperties[prop] != null &&
                        SearchPolicySearchResponse.enumProperties[prop].default != null &&
                        SearchPolicySearchResponse.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['rule'] = new SecuritySGRule();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['status'] != null) {
            this['status'] = values['status'];
        } else if (SearchPolicySearchResponse.hasDefaultEnumValue('status')) {
            this['status'] = <SearchPolicySearchResponse_status> SearchPolicySearchResponse.enumProperties['status'].default;
        }
        if (values && values['sg-policy'] != null) {
            this['sg-policy'] = values['sg-policy'];
        }
        if (values) {
            this['rule'].setValues(values['rule']);
        }
        if (values && values['index'] != null) {
            this['index'] = values['index'];
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'status': new FormControl(this['status'], [enumValidator(SearchPolicySearchResponse_status), ]),
                'sg-policy': new FormControl(this['sg-policy']),
                'rule': this['rule'].$formGroup,
                'index': new FormControl(this['index']),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['status'].setValue(this['status']);
            this._formGroup.controls['sg-policy'].setValue(this['sg-policy']);
            this['rule'].setFormGroupValues();
            this._formGroup.controls['index'].setValue(this['index']);
        }
    }
}

