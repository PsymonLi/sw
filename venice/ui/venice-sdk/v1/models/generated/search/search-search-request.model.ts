/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';

import { SearchSearchRequest_mode } from './enums';
import { SearchSearchQuery } from './search-search-query.model';

export interface ISearchSearchRequest {
    'query-string'?: string;
    'from'?: number;
    'max-results'?: number;
    'sort-by'?: string;
    'mode'?: SearchSearchRequest_mode;
    'query'?: SearchSearchQuery;
}


export class SearchSearchRequest extends BaseModel implements ISearchSearchRequest {
    /** length of string should be between 0 and 256
 */
    'query-string': string;
    /** value should be between 0 and 1023
 */
    'from': number;
    /** value should be between 0 and 8192
 */
    'max-results': number;
    /** SortyBy is an optional parameter and contains the field name 
to be sorted by, For eg: "meta.name"
This can be specified as URI parameter. */
    'sort-by': string;
    'mode': SearchSearchRequest_mode;
    /** Search query contains the search requirements
This is intended for advanced query use cases involving
boolean query, structured term query and supports various
combinations of text, phrase strings and search modifiers
for specific categories, kinds, fields and labels.
This cannot be specified as URI parameter. */
    'query': SearchSearchQuery;
    public static enumProperties = {
        'mode': SearchSearchRequest_mode,
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['query'] = new SearchSearchQuery();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this['query-string'] = values['query-string'];
            this['from'] = values['from'];
            this['max-results'] = values['max-results'];
            this['sort-by'] = values['sort-by'];
            this['mode'] = values['mode'];
            this['query'].setValues(values['query']);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'query-string': new FormControl(this['query-string'], [Validators.maxLength(256), ]),
                'from': new FormControl(this['from'], [maxValueValidator(1023), ]),
                'max-results': new FormControl(this['max-results'], [maxValueValidator(8192), ]),
                'sort-by': new FormControl(this['sort-by'], [Validators.maxLength(256), ]),
                'mode': new FormControl(this['mode'], [enumValidator(SearchSearchRequest_mode), ]),
                'query': this['query'].$formGroup,
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['query-string'].setValue(this['query-string']);
            this._formGroup.controls['from'].setValue(this['from']);
            this._formGroup.controls['max-results'].setValue(this['max-results']);
            this._formGroup.controls['sort-by'].setValue(this['sort-by']);
            this._formGroup.controls['mode'].setValue(this['mode']);
            this['query'].setFormGroupValues();
        }
    }
}

