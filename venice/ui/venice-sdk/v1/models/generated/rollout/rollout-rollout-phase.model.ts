/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';

import { RolloutRolloutPhase_phase,  RolloutRolloutPhase_phase_uihint  } from './enums';

export interface IRolloutRolloutPhase {
    'name'?: string;
    'phase'?: RolloutRolloutPhase_phase;
    'start-time'?: Date;
    'end-time'?: Date;
    'reason'?: string;
    'message'?: string;
}


export class RolloutRolloutPhase extends BaseModel implements IRolloutRolloutPhase {
    'name': string = null;
    'phase': RolloutRolloutPhase_phase = null;
    /** The time of starting the rollout for this node/service. 
    This does not include the pre-check which can happen way before the actual rollout. */
    'start-time': Date = null;
    'end-time': Date = null;
    'reason': string = null;
    /** A detailed message indicating details about the transition. */
    'message': string = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'name': {
            type: 'string'
        },
        'phase': {
            enum: RolloutRolloutPhase_phase_uihint,
            default: 'PRE_CHECK',
            type: 'string'
        },
        'start-time': {
            description:  'The time of starting the rollout for this node/service.  This does not include the pre-check which can happen way before the actual rollout.',
            type: 'Date'
        },
        'end-time': {
            type: 'Date'
        },
        'reason': {
            type: 'string'
        },
        'message': {
            description:  'A detailed message indicating details about the transition.',
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return RolloutRolloutPhase.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return RolloutRolloutPhase.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (RolloutRolloutPhase.propInfo[prop] != null &&
                        RolloutRolloutPhase.propInfo[prop].default != null &&
                        RolloutRolloutPhase.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['name'] != null) {
            this['name'] = values['name'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('name')) {
            this['name'] = RolloutRolloutPhase.propInfo['name'].default;
        }
        if (values && values['phase'] != null) {
            this['phase'] = values['phase'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('phase')) {
            this['phase'] = <RolloutRolloutPhase_phase>  RolloutRolloutPhase.propInfo['phase'].default;
        }
        if (values && values['start-time'] != null) {
            this['start-time'] = values['start-time'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('start-time')) {
            this['start-time'] = RolloutRolloutPhase.propInfo['start-time'].default;
        }
        if (values && values['end-time'] != null) {
            this['end-time'] = values['end-time'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('end-time')) {
            this['end-time'] = RolloutRolloutPhase.propInfo['end-time'].default;
        }
        if (values && values['reason'] != null) {
            this['reason'] = values['reason'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('reason')) {
            this['reason'] = RolloutRolloutPhase.propInfo['reason'].default;
        }
        if (values && values['message'] != null) {
            this['message'] = values['message'];
        } else if (fillDefaults && RolloutRolloutPhase.hasDefaultValue('message')) {
            this['message'] = RolloutRolloutPhase.propInfo['message'].default;
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'name': new FormControl(this['name']),
                'phase': new FormControl(this['phase'], [required, enumValidator(RolloutRolloutPhase_phase), ]),
                'start-time': new FormControl(this['start-time']),
                'end-time': new FormControl(this['end-time']),
                'reason': new FormControl(this['reason']),
                'message': new FormControl(this['message']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['name'].setValue(this['name']);
            this._formGroup.controls['phase'].setValue(this['phase']);
            this._formGroup.controls['start-time'].setValue(this['start-time']);
            this._formGroup.controls['end-time'].setValue(this['end-time']);
            this._formGroup.controls['reason'].setValue(this['reason']);
            this._formGroup.controls['message'].setValue(this['message']);
        }
    }
}

