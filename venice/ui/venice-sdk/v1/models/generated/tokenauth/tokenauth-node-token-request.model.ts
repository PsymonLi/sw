/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface ITokenauthNodeTokenRequest {
    'audience'?: Array<string>;
    'validity-start'?: Date;
    'validity-end'?: Date;
}


export class TokenauthNodeTokenRequest extends BaseModel implements ITokenauthNodeTokenRequest {
    /** Audience represents a list of nodes the token is valid for. "*" indicates all nodes */
    'audience': Array<string> = null;
    /** ValidityStart indicates the time at which the token becomes valid */
    'validity-start': Date = null;
    /** ValidityEnd indicates the time at which the token becomes invalid */
    'validity-end': Date = null;
    public static propInfo: { [prop in keyof ITokenauthNodeTokenRequest]: PropInfoItem } = {
        'audience': {
            description:  `Audience represents a list of nodes the token is valid for. "*" indicates all nodes`,
            required: false,
            type: 'Array<string>'
        },
        'validity-start': {
            description:  `ValidityStart indicates the time at which the token becomes valid`,
            required: false,
            type: 'Date'
        },
        'validity-end': {
            description:  `ValidityEnd indicates the time at which the token becomes invalid`,
            required: false,
            type: 'Date'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return TokenauthNodeTokenRequest.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return TokenauthNodeTokenRequest.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (TokenauthNodeTokenRequest.propInfo[prop] != null &&
                        TokenauthNodeTokenRequest.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['audience'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['audience'] != null) {
            this['audience'] = values['audience'];
        } else if (fillDefaults && TokenauthNodeTokenRequest.hasDefaultValue('audience')) {
            this['audience'] = [ TokenauthNodeTokenRequest.propInfo['audience'].default];
        } else {
            this['audience'] = [];
        }
        if (values && values['validity-start'] != null) {
            this['validity-start'] = values['validity-start'];
        } else if (fillDefaults && TokenauthNodeTokenRequest.hasDefaultValue('validity-start')) {
            this['validity-start'] = TokenauthNodeTokenRequest.propInfo['validity-start'].default;
        } else {
            this['validity-start'] = null
        }
        if (values && values['validity-end'] != null) {
            this['validity-end'] = values['validity-end'];
        } else if (fillDefaults && TokenauthNodeTokenRequest.hasDefaultValue('validity-end')) {
            this['validity-end'] = TokenauthNodeTokenRequest.propInfo['validity-end'].default;
        } else {
            this['validity-end'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'audience': CustomFormControl(new FormControl(this['audience']), TokenauthNodeTokenRequest.propInfo['audience']),
                'validity-start': CustomFormControl(new FormControl(this['validity-start']), TokenauthNodeTokenRequest.propInfo['validity-start']),
                'validity-end': CustomFormControl(new FormControl(this['validity-end']), TokenauthNodeTokenRequest.propInfo['validity-end']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['audience'].setValue(this['audience']);
            this._formGroup.controls['validity-start'].setValue(this['validity-start']);
            this._formGroup.controls['validity-end'].setValue(this['validity-end']);
        }
    }
}

