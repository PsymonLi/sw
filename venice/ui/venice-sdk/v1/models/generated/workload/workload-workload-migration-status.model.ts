/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';

import { WorkloadWorkloadMigrationStatus_status,  WorkloadWorkloadMigrationStatus_status_uihint  } from './enums';

export interface IWorkloadWorkloadMigrationStatus {
    'status': WorkloadWorkloadMigrationStatus_status;
    'start-time'?: Date;
    'end-time'?: Date;
    'source-host'?: string;
    'destination-host'?: string;
    'reason'?: string;
}


export class WorkloadWorkloadMigrationStatus extends BaseModel implements IWorkloadWorkloadMigrationStatus {
    /** Status of migration */
    'status': WorkloadWorkloadMigrationStatus_status = null;
    /** Start time of the migration operation */
    'start-time': Date = null;
    /** End time of the migration operation */
    'end-time': Date = null;
    /** Source Hostname derived from the workload to host to DSC association */
    'source-host': string = null;
    /** Destination Hostname where the new workload will be migrated to */
    'destination-host': string = null;
    /** Reason field is populated if some failures are encountered while migrating a workload */
    'reason': string = null;
    public static propInfo: { [prop in keyof IWorkloadWorkloadMigrationStatus]: PropInfoItem } = {
        'status': {
            enum: WorkloadWorkloadMigrationStatus_status_uihint,
            default: 'none',
            description:  'Status of migration',
            required: true,
            type: 'string'
        },
        'start-time': {
            description:  'Start time of the migration operation',
            required: false,
            type: 'Date'
        },
        'end-time': {
            description:  'End time of the migration operation',
            required: false,
            type: 'Date'
        },
        'source-host': {
            description:  'Source Hostname derived from the workload to host to DSC association',
            required: false,
            type: 'string'
        },
        'destination-host': {
            description:  'Destination Hostname where the new workload will be migrated to',
            required: false,
            type: 'string'
        },
        'reason': {
            description:  'Reason field is populated if some failures are encountered while migrating a workload',
            required: false,
            type: 'string'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return WorkloadWorkloadMigrationStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return WorkloadWorkloadMigrationStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (WorkloadWorkloadMigrationStatus.propInfo[prop] != null &&
                        WorkloadWorkloadMigrationStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['status'] != null) {
            this['status'] = values['status'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('status')) {
            this['status'] = <WorkloadWorkloadMigrationStatus_status>  WorkloadWorkloadMigrationStatus.propInfo['status'].default;
        } else {
            this['status'] = null
        }
        if (values && values['start-time'] != null) {
            this['start-time'] = values['start-time'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('start-time')) {
            this['start-time'] = WorkloadWorkloadMigrationStatus.propInfo['start-time'].default;
        } else {
            this['start-time'] = null
        }
        if (values && values['end-time'] != null) {
            this['end-time'] = values['end-time'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('end-time')) {
            this['end-time'] = WorkloadWorkloadMigrationStatus.propInfo['end-time'].default;
        } else {
            this['end-time'] = null
        }
        if (values && values['source-host'] != null) {
            this['source-host'] = values['source-host'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('source-host')) {
            this['source-host'] = WorkloadWorkloadMigrationStatus.propInfo['source-host'].default;
        } else {
            this['source-host'] = null
        }
        if (values && values['destination-host'] != null) {
            this['destination-host'] = values['destination-host'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('destination-host')) {
            this['destination-host'] = WorkloadWorkloadMigrationStatus.propInfo['destination-host'].default;
        } else {
            this['destination-host'] = null
        }
        if (values && values['reason'] != null) {
            this['reason'] = values['reason'];
        } else if (fillDefaults && WorkloadWorkloadMigrationStatus.hasDefaultValue('reason')) {
            this['reason'] = WorkloadWorkloadMigrationStatus.propInfo['reason'].default;
        } else {
            this['reason'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'status': CustomFormControl(new FormControl(this['status'], [required, enumValidator(WorkloadWorkloadMigrationStatus_status), ]), WorkloadWorkloadMigrationStatus.propInfo['status']),
                'start-time': CustomFormControl(new FormControl(this['start-time']), WorkloadWorkloadMigrationStatus.propInfo['start-time']),
                'end-time': CustomFormControl(new FormControl(this['end-time']), WorkloadWorkloadMigrationStatus.propInfo['end-time']),
                'source-host': CustomFormControl(new FormControl(this['source-host']), WorkloadWorkloadMigrationStatus.propInfo['source-host']),
                'destination-host': CustomFormControl(new FormControl(this['destination-host']), WorkloadWorkloadMigrationStatus.propInfo['destination-host']),
                'reason': CustomFormControl(new FormControl(this['reason']), WorkloadWorkloadMigrationStatus.propInfo['reason']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['status'].setValue(this['status']);
            this._formGroup.controls['start-time'].setValue(this['start-time']);
            this._formGroup.controls['end-time'].setValue(this['end-time']);
            this._formGroup.controls['source-host'].setValue(this['source-host']);
            this._formGroup.controls['destination-host'].setValue(this['destination-host']);
            this._formGroup.controls['reason'].setValue(this['reason']);
        }
    }
}

