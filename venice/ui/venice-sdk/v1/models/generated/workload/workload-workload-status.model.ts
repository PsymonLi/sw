/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, EnumDef } from './base-model';


export interface IWorkloadWorkloadStatus {
    'interfaces'?: object;
    'endpoints'?: Array<string>;
}


export class WorkloadWorkloadStatus extends BaseModel implements IWorkloadWorkloadStatus {
    'interfaces': object;
    'endpoints': Array<string>;
    public static enumProperties: { [key: string] : EnumDef } = {
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultEnumValue(prop) {
        return (WorkloadWorkloadStatus.enumProperties[prop] != null &&
                        WorkloadWorkloadStatus.enumProperties[prop].default != null &&
                        WorkloadWorkloadStatus.enumProperties[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['endpoints'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['interfaces'] != null) {
            this['interfaces'] = values['interfaces'];
        }
        if (values) {
            this.fillModelArray<string>(this, 'endpoints', values['endpoints']);
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'interfaces': new FormControl(this['interfaces']),
                'endpoints': new FormArray([]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('endpoints', this['endpoints']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['interfaces'].setValue(this['interfaces']);
            this.fillModelArray<string>(this, 'endpoints', this['endpoints']);
        }
    }
}

