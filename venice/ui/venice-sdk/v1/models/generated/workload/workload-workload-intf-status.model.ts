/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from '../basemodel/base-model';


export interface IWorkloadWorkloadIntfStatus {
    'ip-addresses'?: Array<string>;
    'endpoint'?: string;
    'micro-seg-vlan'?: number;
    'mac-address'?: string;
    'external-vlan'?: number;
    'network'?: string;
    'dsc-interfaces'?: Array<string>;
    '_ui'?: any;
}


export class WorkloadWorkloadIntfStatus extends BaseModel implements IWorkloadWorkloadIntfStatus {
    /** Field for holding arbitrary ui state */
    '_ui': any = {};
    /** List of all IP addresses configured and discovered on a Workload Interface. */
    'ip-addresses': Array<string> = null;
    /** Endpoint associated with this Workload interface. */
    'endpoint': string = null;
    /** Micro-segmentation vlan used by this interface. */
    'micro-seg-vlan': number = null;
    /** MACAddress contains the MAC address of the interface as seen by the workload. */
    'mac-address': string = null;
    /** External vlan assigned for this interface. */
    'external-vlan': number = null;
    /** Network this interface belongs to. */
    'network': string = null;
    /** List of all DSC interfaces that can be used. The DSC interface is identified using the MAC address assigned to the DSC port. */
    'dsc-interfaces': Array<string> = null;
    public static propInfo: { [prop in keyof IWorkloadWorkloadIntfStatus]: PropInfoItem } = {
        'ip-addresses': {
            description:  `List of all IP addresses configured and discovered on a Workload Interface.`,
            required: false,
            type: 'Array<string>'
        },
        'endpoint': {
            description:  `Endpoint associated with this Workload interface.`,
            required: false,
            type: 'string'
        },
        'micro-seg-vlan': {
            description:  `Micro-segmentation vlan used by this interface.`,
            required: false,
            type: 'number'
        },
        'mac-address': {
            description:  `MACAddress contains the MAC address of the interface as seen by the workload.`,
            required: false,
            type: 'string'
        },
        'external-vlan': {
            description:  `External vlan assigned for this interface.`,
            required: false,
            type: 'number'
        },
        'network': {
            description:  `Network this interface belongs to.`,
            required: false,
            type: 'string'
        },
        'dsc-interfaces': {
            description:  `List of all DSC interfaces that can be used. The DSC interface is identified using the MAC address assigned to the DSC port.`,
            required: false,
            type: 'Array<string>'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return WorkloadWorkloadIntfStatus.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return WorkloadWorkloadIntfStatus.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (WorkloadWorkloadIntfStatus.propInfo[prop] != null &&
                        WorkloadWorkloadIntfStatus.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['ip-addresses'] = new Array<string>();
        this['dsc-interfaces'] = new Array<string>();
        this._inputValue = values;
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['_ui']) {
            this['_ui'] = values['_ui']
        }
        if (values && values['ip-addresses'] != null) {
            this['ip-addresses'] = values['ip-addresses'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('ip-addresses')) {
            this['ip-addresses'] = [ WorkloadWorkloadIntfStatus.propInfo['ip-addresses'].default];
        } else {
            this['ip-addresses'] = [];
        }
        if (values && values['endpoint'] != null) {
            this['endpoint'] = values['endpoint'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('endpoint')) {
            this['endpoint'] = WorkloadWorkloadIntfStatus.propInfo['endpoint'].default;
        } else {
            this['endpoint'] = null
        }
        if (values && values['micro-seg-vlan'] != null) {
            this['micro-seg-vlan'] = values['micro-seg-vlan'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('micro-seg-vlan')) {
            this['micro-seg-vlan'] = WorkloadWorkloadIntfStatus.propInfo['micro-seg-vlan'].default;
        } else {
            this['micro-seg-vlan'] = null
        }
        if (values && values['mac-address'] != null) {
            this['mac-address'] = values['mac-address'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('mac-address')) {
            this['mac-address'] = WorkloadWorkloadIntfStatus.propInfo['mac-address'].default;
        } else {
            this['mac-address'] = null
        }
        if (values && values['external-vlan'] != null) {
            this['external-vlan'] = values['external-vlan'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('external-vlan')) {
            this['external-vlan'] = WorkloadWorkloadIntfStatus.propInfo['external-vlan'].default;
        } else {
            this['external-vlan'] = null
        }
        if (values && values['network'] != null) {
            this['network'] = values['network'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('network')) {
            this['network'] = WorkloadWorkloadIntfStatus.propInfo['network'].default;
        } else {
            this['network'] = null
        }
        if (values && values['dsc-interfaces'] != null) {
            this['dsc-interfaces'] = values['dsc-interfaces'];
        } else if (fillDefaults && WorkloadWorkloadIntfStatus.hasDefaultValue('dsc-interfaces')) {
            this['dsc-interfaces'] = [ WorkloadWorkloadIntfStatus.propInfo['dsc-interfaces'].default];
        } else {
            this['dsc-interfaces'] = [];
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'ip-addresses': CustomFormControl(new FormControl(this['ip-addresses']), WorkloadWorkloadIntfStatus.propInfo['ip-addresses']),
                'endpoint': CustomFormControl(new FormControl(this['endpoint']), WorkloadWorkloadIntfStatus.propInfo['endpoint']),
                'micro-seg-vlan': CustomFormControl(new FormControl(this['micro-seg-vlan']), WorkloadWorkloadIntfStatus.propInfo['micro-seg-vlan']),
                'mac-address': CustomFormControl(new FormControl(this['mac-address']), WorkloadWorkloadIntfStatus.propInfo['mac-address']),
                'external-vlan': CustomFormControl(new FormControl(this['external-vlan']), WorkloadWorkloadIntfStatus.propInfo['external-vlan']),
                'network': CustomFormControl(new FormControl(this['network']), WorkloadWorkloadIntfStatus.propInfo['network']),
                'dsc-interfaces': CustomFormControl(new FormControl(this['dsc-interfaces']), WorkloadWorkloadIntfStatus.propInfo['dsc-interfaces']),
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['ip-addresses'].setValue(this['ip-addresses']);
            this._formGroup.controls['endpoint'].setValue(this['endpoint']);
            this._formGroup.controls['micro-seg-vlan'].setValue(this['micro-seg-vlan']);
            this._formGroup.controls['mac-address'].setValue(this['mac-address']);
            this._formGroup.controls['external-vlan'].setValue(this['external-vlan']);
            this._formGroup.controls['network'].setValue(this['network']);
            this._formGroup.controls['dsc-interfaces'].setValue(this['dsc-interfaces']);
        }
    }
}

