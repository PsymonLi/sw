/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel, PropInfoItem } from './base-model';


export interface IWorkloadEndpointStatus {
    'endpoint-uuid'?: string;
    'workload-uuid'?: string;
    'workload-name'?: string;
    'network'?: string;
    'homing-host-addr'?: string;
    'homing-host-name'?: string;
    'ipv4-address'?: string;
    'ipv4-gateway'?: string;
    'ipv6-address'?: string;
    'ipv6-gateway'?: string;
    'mac-address'?: string;
    'node-uuid'?: string;
    'EndpointState'?: string;
    'SecurityGroups'?: Array<string>;
    'micro-segment-vlan'?: number;
    'workload-attributes'?: object;
}


export class WorkloadEndpointStatus extends BaseModel implements IWorkloadEndpointStatus {
    'endpoint-uuid': string = null;
    'workload-uuid': string = null;
    'workload-name': string = null;
    'network': string = null;
    'homing-host-addr': string = null;
    'homing-host-name': string = null;
    'ipv4-address': string = null;
    'ipv4-gateway': string = null;
    'ipv6-address': string = null;
    'ipv6-gateway': string = null;
    'mac-address': string = null;
    'node-uuid': string = null;
    'EndpointState': string = null;
    'SecurityGroups': Array<string> = null;
    'micro-segment-vlan': number = null;
    'workload-attributes': object = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'endpoint-uuid': {
            type: 'string'
                    },
        'workload-uuid': {
            type: 'string'
                    },
        'workload-name': {
            type: 'string'
                    },
        'network': {
            type: 'string'
                    },
        'homing-host-addr': {
            type: 'string'
                    },
        'homing-host-name': {
            type: 'string'
                    },
        'ipv4-address': {
            type: 'string'
                    },
        'ipv4-gateway': {
            type: 'string'
                    },
        'ipv6-address': {
            type: 'string'
                    },
        'ipv6-gateway': {
            type: 'string'
                    },
        'mac-address': {
            type: 'string'
                    },
        'node-uuid': {
            type: 'string'
                    },
        'EndpointState': {
            type: 'string'
                    },
        'SecurityGroups': {
            type: 'object'
        },
        'micro-segment-vlan': {
            type: 'number'
                    },
        'workload-attributes': {
            type: 'object'
                    },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return WorkloadEndpointStatus.propInfo[propName];
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (WorkloadEndpointStatus.propInfo[prop] != null &&
                        WorkloadEndpointStatus.propInfo[prop].default != null &&
                        WorkloadEndpointStatus.propInfo[prop].default != '');
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this['SecurityGroups'] = new Array<string>();
        this.setValues(values);
    }

    /**
     * set the values. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values && values['endpoint-uuid'] != null) {
            this['endpoint-uuid'] = values['endpoint-uuid'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('endpoint-uuid')) {
            this['endpoint-uuid'] = WorkloadEndpointStatus.propInfo['endpoint-uuid'].default;
        }
        if (values && values['workload-uuid'] != null) {
            this['workload-uuid'] = values['workload-uuid'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('workload-uuid')) {
            this['workload-uuid'] = WorkloadEndpointStatus.propInfo['workload-uuid'].default;
        }
        if (values && values['workload-name'] != null) {
            this['workload-name'] = values['workload-name'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('workload-name')) {
            this['workload-name'] = WorkloadEndpointStatus.propInfo['workload-name'].default;
        }
        if (values && values['network'] != null) {
            this['network'] = values['network'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('network')) {
            this['network'] = WorkloadEndpointStatus.propInfo['network'].default;
        }
        if (values && values['homing-host-addr'] != null) {
            this['homing-host-addr'] = values['homing-host-addr'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('homing-host-addr')) {
            this['homing-host-addr'] = WorkloadEndpointStatus.propInfo['homing-host-addr'].default;
        }
        if (values && values['homing-host-name'] != null) {
            this['homing-host-name'] = values['homing-host-name'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('homing-host-name')) {
            this['homing-host-name'] = WorkloadEndpointStatus.propInfo['homing-host-name'].default;
        }
        if (values && values['ipv4-address'] != null) {
            this['ipv4-address'] = values['ipv4-address'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('ipv4-address')) {
            this['ipv4-address'] = WorkloadEndpointStatus.propInfo['ipv4-address'].default;
        }
        if (values && values['ipv4-gateway'] != null) {
            this['ipv4-gateway'] = values['ipv4-gateway'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('ipv4-gateway')) {
            this['ipv4-gateway'] = WorkloadEndpointStatus.propInfo['ipv4-gateway'].default;
        }
        if (values && values['ipv6-address'] != null) {
            this['ipv6-address'] = values['ipv6-address'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('ipv6-address')) {
            this['ipv6-address'] = WorkloadEndpointStatus.propInfo['ipv6-address'].default;
        }
        if (values && values['ipv6-gateway'] != null) {
            this['ipv6-gateway'] = values['ipv6-gateway'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('ipv6-gateway')) {
            this['ipv6-gateway'] = WorkloadEndpointStatus.propInfo['ipv6-gateway'].default;
        }
        if (values && values['mac-address'] != null) {
            this['mac-address'] = values['mac-address'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('mac-address')) {
            this['mac-address'] = WorkloadEndpointStatus.propInfo['mac-address'].default;
        }
        if (values && values['node-uuid'] != null) {
            this['node-uuid'] = values['node-uuid'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('node-uuid')) {
            this['node-uuid'] = WorkloadEndpointStatus.propInfo['node-uuid'].default;
        }
        if (values && values['EndpointState'] != null) {
            this['EndpointState'] = values['EndpointState'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('EndpointState')) {
            this['EndpointState'] = WorkloadEndpointStatus.propInfo['EndpointState'].default;
        }
        if (values) {
            this.fillModelArray<string>(this, 'SecurityGroups', values['SecurityGroups']);
        }
        if (values && values['micro-segment-vlan'] != null) {
            this['micro-segment-vlan'] = values['micro-segment-vlan'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('micro-segment-vlan')) {
            this['micro-segment-vlan'] = WorkloadEndpointStatus.propInfo['micro-segment-vlan'].default;
        }
        if (values && values['workload-attributes'] != null) {
            this['workload-attributes'] = values['workload-attributes'];
        } else if (WorkloadEndpointStatus.hasDefaultValue('workload-attributes')) {
            this['workload-attributes'] = WorkloadEndpointStatus.propInfo['workload-attributes'].default;
        }
    }




    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'endpoint-uuid': new FormControl(this['endpoint-uuid']),
                'workload-uuid': new FormControl(this['workload-uuid']),
                'workload-name': new FormControl(this['workload-name']),
                'network': new FormControl(this['network']),
                'homing-host-addr': new FormControl(this['homing-host-addr']),
                'homing-host-name': new FormControl(this['homing-host-name']),
                'ipv4-address': new FormControl(this['ipv4-address']),
                'ipv4-gateway': new FormControl(this['ipv4-gateway']),
                'ipv6-address': new FormControl(this['ipv6-address']),
                'ipv6-gateway': new FormControl(this['ipv6-gateway']),
                'mac-address': new FormControl(this['mac-address']),
                'node-uuid': new FormControl(this['node-uuid']),
                'EndpointState': new FormControl(this['EndpointState']),
                'SecurityGroups': new FormArray([]),
                'micro-segment-vlan': new FormControl(this['micro-segment-vlan']),
                'workload-attributes': new FormControl(this['workload-attributes']),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('SecurityGroups', this['SecurityGroups']);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['endpoint-uuid'].setValue(this['endpoint-uuid']);
            this._formGroup.controls['workload-uuid'].setValue(this['workload-uuid']);
            this._formGroup.controls['workload-name'].setValue(this['workload-name']);
            this._formGroup.controls['network'].setValue(this['network']);
            this._formGroup.controls['homing-host-addr'].setValue(this['homing-host-addr']);
            this._formGroup.controls['homing-host-name'].setValue(this['homing-host-name']);
            this._formGroup.controls['ipv4-address'].setValue(this['ipv4-address']);
            this._formGroup.controls['ipv4-gateway'].setValue(this['ipv4-gateway']);
            this._formGroup.controls['ipv6-address'].setValue(this['ipv6-address']);
            this._formGroup.controls['ipv6-gateway'].setValue(this['ipv6-gateway']);
            this._formGroup.controls['mac-address'].setValue(this['mac-address']);
            this._formGroup.controls['node-uuid'].setValue(this['node-uuid']);
            this._formGroup.controls['EndpointState'].setValue(this['EndpointState']);
            this.fillModelArray<string>(this, 'SecurityGroups', this['SecurityGroups']);
            this._formGroup.controls['micro-segment-vlan'].setValue(this['micro-segment-vlan']);
            this._formGroup.controls['workload-attributes'].setValue(this['workload-attributes']);
        }
    }
}

