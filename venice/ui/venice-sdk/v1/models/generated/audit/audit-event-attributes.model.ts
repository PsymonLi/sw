/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, minLengthValidator, maxLengthValidator, required, enumValidator, patternValidator, CustomFormControl, CustomFormGroup } from '../../../utils/validators';
import { BaseModel, PropInfoItem } from './base-model';

import { AuditEventAttributes_stage,  } from './enums';
import { AuditEventAttributes_level,  } from './enums';
import { ApiObjectRef, IApiObjectRef } from './api-object-ref.model';
import { AuditEventAttributes_outcome,  } from './enums';

export interface IAuditEventAttributes {
    'stage': AuditEventAttributes_stage;
    'level': AuditEventAttributes_level;
    'user'?: IApiObjectRef;
    'client-ips'?: Array<string>;
    'resource'?: IApiObjectRef;
    'action'?: string;
    'outcome': AuditEventAttributes_outcome;
    'request-uri': string;
    'request-object'?: string;
    'response-object'?: string;
    'gateway-node'?: string;
    'gateway-ip'?: string;
    'service-name'?: string;
    'data'?: object;
}


export class AuditEventAttributes extends BaseModel implements IAuditEventAttributes {
    'stage': AuditEventAttributes_stage = null;
    'level': AuditEventAttributes_level = null;
    /** User who initiated an action on the referred object (resource)
    User role and group is part of user status. User object in login response will be logged in ResponseObject field. */
    'user': ApiObjectRef = null;
    'client-ips': Array<string> = null;
    'resource': ApiObjectRef = null;
    'action': string = null;
    'outcome': AuditEventAttributes_outcome = null;
    /** should be a valid URI */
    'request-uri': string = null;
    'request-object': string = null;
    'response-object': string = null;
    'gateway-node': string = null;
    'gateway-ip': string = null;
    'service-name': string = null;
    /** Data is unstructured key value map stored with audit log that may be set by hooks in API Gateway. We can store Signature in
    JWS compact serialization format in this map. Data in this map will not be signed. */
    'data': object = null;
    public static propInfo: { [prop: string]: PropInfoItem } = {
        'stage': {
            enum: AuditEventAttributes_stage,
            default: 'RequestAuthorization',
            required: true,
            type: 'string'
        },
        'level': {
            enum: AuditEventAttributes_level,
            default: 'Basic',
            required: true,
            type: 'string'
        },
        'user': {
            description:  'User who initiated an action on the referred object (resource) User role and group is part of user status. User object in login response will be logged in ResponseObject field.',
            required: false,
            type: 'object'
        },
        'client-ips': {
            required: false,
            type: 'Array<string>'
        },
        'resource': {
            required: false,
            type: 'object'
        },
        'action': {
            required: false,
            type: 'string'
        },
        'outcome': {
            enum: AuditEventAttributes_outcome,
            default: 'Success',
            required: true,
            type: 'string'
        },
        'request-uri': {
            description:  'should be a valid URI',
            hint:  'https://10.1.1.1, ldap://10.1.1.1:800, /path/to/x',
            required: true,
            type: 'string'
        },
        'request-object': {
            required: false,
            type: 'string'
        },
        'response-object': {
            required: false,
            type: 'string'
        },
        'gateway-node': {
            required: false,
            type: 'string'
        },
        'gateway-ip': {
            required: false,
            type: 'string'
        },
        'service-name': {
            required: false,
            type: 'string'
        },
        'data': {
            description:  'Data is unstructured key value map stored with audit log that may be set by hooks in API Gateway. We can store Signature in JWS compact serialization format in this map. Data in this map will not be signed.',
            required: false,
            type: 'object'
        },
    }

    public getPropInfo(propName: string): PropInfoItem {
        return AuditEventAttributes.propInfo[propName];
    }

    public getPropInfoConfig(): { [key:string]:PropInfoItem } {
        return AuditEventAttributes.propInfo;
    }

    /**
     * Returns whether or not there is an enum property with a default value
    */
    public static hasDefaultValue(prop) {
        return (AuditEventAttributes.propInfo[prop] != null &&
                        AuditEventAttributes.propInfo[prop].default != null);
    }

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any, setDefaults:boolean = true) {
        super();
        this['user'] = new ApiObjectRef();
        this['client-ips'] = new Array<string>();
        this['resource'] = new ApiObjectRef();
        this.setValues(values, setDefaults);
    }

    /**
     * set the values for both the Model and the Form Group. If a value isn't provided and we have a default, we use that.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, fillDefaults = true): void {
        if (values && values['stage'] != null) {
            this['stage'] = values['stage'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('stage')) {
            this['stage'] = <AuditEventAttributes_stage>  AuditEventAttributes.propInfo['stage'].default;
        } else {
            this['stage'] = null
        }
        if (values && values['level'] != null) {
            this['level'] = values['level'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('level')) {
            this['level'] = <AuditEventAttributes_level>  AuditEventAttributes.propInfo['level'].default;
        } else {
            this['level'] = null
        }
        if (values) {
            this['user'].setValues(values['user'], fillDefaults);
        } else {
            this['user'].setValues(null, fillDefaults);
        }
        if (values && values['client-ips'] != null) {
            this['client-ips'] = values['client-ips'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('client-ips')) {
            this['client-ips'] = [ AuditEventAttributes.propInfo['client-ips'].default];
        } else {
            this['client-ips'] = [];
        }
        if (values) {
            this['resource'].setValues(values['resource'], fillDefaults);
        } else {
            this['resource'].setValues(null, fillDefaults);
        }
        if (values && values['action'] != null) {
            this['action'] = values['action'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('action')) {
            this['action'] = AuditEventAttributes.propInfo['action'].default;
        } else {
            this['action'] = null
        }
        if (values && values['outcome'] != null) {
            this['outcome'] = values['outcome'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('outcome')) {
            this['outcome'] = <AuditEventAttributes_outcome>  AuditEventAttributes.propInfo['outcome'].default;
        } else {
            this['outcome'] = null
        }
        if (values && values['request-uri'] != null) {
            this['request-uri'] = values['request-uri'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('request-uri')) {
            this['request-uri'] = AuditEventAttributes.propInfo['request-uri'].default;
        } else {
            this['request-uri'] = null
        }
        if (values && values['request-object'] != null) {
            this['request-object'] = values['request-object'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('request-object')) {
            this['request-object'] = AuditEventAttributes.propInfo['request-object'].default;
        } else {
            this['request-object'] = null
        }
        if (values && values['response-object'] != null) {
            this['response-object'] = values['response-object'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('response-object')) {
            this['response-object'] = AuditEventAttributes.propInfo['response-object'].default;
        } else {
            this['response-object'] = null
        }
        if (values && values['gateway-node'] != null) {
            this['gateway-node'] = values['gateway-node'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('gateway-node')) {
            this['gateway-node'] = AuditEventAttributes.propInfo['gateway-node'].default;
        } else {
            this['gateway-node'] = null
        }
        if (values && values['gateway-ip'] != null) {
            this['gateway-ip'] = values['gateway-ip'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('gateway-ip')) {
            this['gateway-ip'] = AuditEventAttributes.propInfo['gateway-ip'].default;
        } else {
            this['gateway-ip'] = null
        }
        if (values && values['service-name'] != null) {
            this['service-name'] = values['service-name'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('service-name')) {
            this['service-name'] = AuditEventAttributes.propInfo['service-name'].default;
        } else {
            this['service-name'] = null
        }
        if (values && values['data'] != null) {
            this['data'] = values['data'];
        } else if (fillDefaults && AuditEventAttributes.hasDefaultValue('data')) {
            this['data'] = AuditEventAttributes.propInfo['data'].default;
        } else {
            this['data'] = null
        }
        this.setFormGroupValuesToBeModelValues();
    }


    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                'stage': CustomFormControl(new FormControl(this['stage'], [required, enumValidator(AuditEventAttributes_stage), ]), AuditEventAttributes.propInfo['stage']),
                'level': CustomFormControl(new FormControl(this['level'], [required, enumValidator(AuditEventAttributes_level), ]), AuditEventAttributes.propInfo['level']),
                'user': CustomFormGroup(this['user'].$formGroup, AuditEventAttributes.propInfo['user'].required),
                'client-ips': CustomFormControl(new FormControl(this['client-ips']), AuditEventAttributes.propInfo['client-ips']),
                'resource': CustomFormGroup(this['resource'].$formGroup, AuditEventAttributes.propInfo['resource'].required),
                'action': CustomFormControl(new FormControl(this['action']), AuditEventAttributes.propInfo['action']),
                'outcome': CustomFormControl(new FormControl(this['outcome'], [required, enumValidator(AuditEventAttributes_outcome), ]), AuditEventAttributes.propInfo['outcome']),
                'request-uri': CustomFormControl(new FormControl(this['request-uri'], [required, ]), AuditEventAttributes.propInfo['request-uri']),
                'request-object': CustomFormControl(new FormControl(this['request-object']), AuditEventAttributes.propInfo['request-object']),
                'response-object': CustomFormControl(new FormControl(this['response-object']), AuditEventAttributes.propInfo['response-object']),
                'gateway-node': CustomFormControl(new FormControl(this['gateway-node']), AuditEventAttributes.propInfo['gateway-node']),
                'gateway-ip': CustomFormControl(new FormControl(this['gateway-ip']), AuditEventAttributes.propInfo['gateway-ip']),
                'service-name': CustomFormControl(new FormControl(this['service-name']), AuditEventAttributes.propInfo['service-name']),
                'data': CustomFormControl(new FormControl(this['data']), AuditEventAttributes.propInfo['data']),
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('user') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('user').get(field);
                control.updateValueAndValidity();
            });
            // We force recalculation of controls under a form group
            Object.keys((this._formGroup.get('resource') as FormGroup).controls).forEach(field => {
                const control = this._formGroup.get('resource').get(field);
                control.updateValueAndValidity();
            });
        }
        return this._formGroup;
    }

    setModelToBeFormGroupValues() {
        this.setValues(this.$formGroup.value, false);
    }

    setFormGroupValuesToBeModelValues() {
        if (this._formGroup) {
            this._formGroup.controls['stage'].setValue(this['stage']);
            this._formGroup.controls['level'].setValue(this['level']);
            this['user'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['client-ips'].setValue(this['client-ips']);
            this['resource'].setFormGroupValuesToBeModelValues();
            this._formGroup.controls['action'].setValue(this['action']);
            this._formGroup.controls['outcome'].setValue(this['outcome']);
            this._formGroup.controls['request-uri'].setValue(this['request-uri']);
            this._formGroup.controls['request-object'].setValue(this['request-object']);
            this._formGroup.controls['response-object'].setValue(this['response-object']);
            this._formGroup.controls['gateway-node'].setValue(this['gateway-node']);
            this._formGroup.controls['gateway-ip'].setValue(this['gateway-ip']);
            this._formGroup.controls['service-name'].setValue(this['service-name']);
            this._formGroup.controls['data'].setValue(this['data']);
        }
    }
}

