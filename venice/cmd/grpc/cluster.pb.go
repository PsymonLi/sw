// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		cluster.proto

	It has these top-level messages:
		ClusterPreJoinReq
		ClusterPreJoinResp
		QuorumMember
		QuorumConfig
		Certificate
		CertMgrBundle
		ClusterJoinReq
		ClusterJoinResp
		ClusterDisjoinReq
		ClusterDisjoinResp
		RegisterNICRequest
		RegisterNICResponse
		UpdateNICRequest
		UpdateNICResponse
		SmartNICEvent
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import cmd "github.com/pensando/sw/api/generated/cmd"
import api "github.com/pensando/sw/api"

import context "golang.org/x/net/context"
import grpc1 "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Cluster PreJoin request
type ClusterPreJoinReq struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid         string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp    string `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	TransportKey []byte `protobuf:"bytes,4,opt,name=transportKey,proto3" json:"transportKey,omitempty"`
}

func (m *ClusterPreJoinReq) Reset()                    { *m = ClusterPreJoinReq{} }
func (m *ClusterPreJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinReq) ProtoMessage()               {}
func (*ClusterPreJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{0} }

func (m *ClusterPreJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterPreJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterPreJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ClusterPreJoinReq) GetTransportKey() []byte {
	if m != nil {
		return m.TransportKey
	}
	return nil
}

// Cluster PreJoin response
type ClusterPreJoinResp struct {
	SwVersion    string `protobuf:"bytes,1,opt,name=sw_version,json=swVersion,proto3" json:"sw_version,omitempty"`
	TransportKey []byte `protobuf:"bytes,2,opt,name=transportKey,proto3" json:"transportKey,omitempty"`
}

func (m *ClusterPreJoinResp) Reset()                    { *m = ClusterPreJoinResp{} }
func (m *ClusterPreJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinResp) ProtoMessage()               {}
func (*ClusterPreJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{1} }

func (m *ClusterPreJoinResp) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *ClusterPreJoinResp) GetTransportKey() []byte {
	if m != nil {
		return m.TransportKey
	}
	return nil
}

// Quorum member
type QuorumMember struct {
	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PeerUrls   []string `protobuf:"bytes,3,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls []string `protobuf:"bytes,4,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
}

func (m *QuorumMember) Reset()                    { *m = QuorumMember{} }
func (m *QuorumMember) String() string            { return proto.CompactTextString(m) }
func (*QuorumMember) ProtoMessage()               {}
func (*QuorumMember) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{2} }

func (m *QuorumMember) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QuorumMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuorumMember) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *QuorumMember) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

// Quorum configuration
type QuorumConfig struct {
	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuorumMembers []*QuorumMember `protobuf:"bytes,2,rep,name=quorum_members,json=quorumMembers" json:"quorum_members,omitempty"`
}

func (m *QuorumConfig) Reset()                    { *m = QuorumConfig{} }
func (m *QuorumConfig) String() string            { return proto.CompactTextString(m) }
func (*QuorumConfig) ProtoMessage()               {}
func (*QuorumConfig) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{3} }

func (m *QuorumConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuorumConfig) GetQuorumMembers() []*QuorumMember {
	if m != nil {
		return m.QuorumMembers
	}
	return nil
}

// Certificate
type Certificate struct {
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{4} }

func (m *Certificate) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

// CA Bundle
type CertMgrBundle struct {
	WrappedCaKey []byte         `protobuf:"bytes,1,opt,name=wrappedCaKey,proto3" json:"wrappedCaKey,omitempty"`
	CaTrustChain []*Certificate `protobuf:"bytes,2,rep,name=caTrustChain" json:"caTrustChain,omitempty"`
	TrustRoots   []*Certificate `protobuf:"bytes,3,rep,name=trustRoots" json:"trustRoots,omitempty"`
}

func (m *CertMgrBundle) Reset()                    { *m = CertMgrBundle{} }
func (m *CertMgrBundle) String() string            { return proto.CompactTextString(m) }
func (*CertMgrBundle) ProtoMessage()               {}
func (*CertMgrBundle) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{5} }

func (m *CertMgrBundle) GetWrappedCaKey() []byte {
	if m != nil {
		return m.WrappedCaKey
	}
	return nil
}

func (m *CertMgrBundle) GetCaTrustChain() []*Certificate {
	if m != nil {
		return m.CaTrustChain
	}
	return nil
}

func (m *CertMgrBundle) GetTrustRoots() []*Certificate {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

// Cluster Join request
type ClusterJoinReq struct {
	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid          string         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp     string         `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	QuorumNodes   []string       `protobuf:"bytes,4,rep,name=quorum_nodes,json=quorumNodes" json:"quorum_nodes,omitempty"`
	QuorumConfig  *QuorumConfig  `protobuf:"bytes,5,opt,name=quorum_config,json=quorumConfig" json:"quorum_config,omitempty"`
	NTPServers    []string       `protobuf:"bytes,6,rep,name=NTPServers" json:"NTPServers,omitempty"`
	NodeId        string         `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CertMgrBundle *CertMgrBundle `protobuf:"bytes,8,opt,name=certMgrBundle" json:"certMgrBundle,omitempty"`
}

func (m *ClusterJoinReq) Reset()                    { *m = ClusterJoinReq{} }
func (m *ClusterJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinReq) ProtoMessage()               {}
func (*ClusterJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{6} }

func (m *ClusterJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ClusterJoinReq) GetQuorumNodes() []string {
	if m != nil {
		return m.QuorumNodes
	}
	return nil
}

func (m *ClusterJoinReq) GetQuorumConfig() *QuorumConfig {
	if m != nil {
		return m.QuorumConfig
	}
	return nil
}

func (m *ClusterJoinReq) GetNTPServers() []string {
	if m != nil {
		return m.NTPServers
	}
	return nil
}

func (m *ClusterJoinReq) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ClusterJoinReq) GetCertMgrBundle() *CertMgrBundle {
	if m != nil {
		return m.CertMgrBundle
	}
	return nil
}

// Cluster Join response
type ClusterJoinResp struct {
}

func (m *ClusterJoinResp) Reset()                    { *m = ClusterJoinResp{} }
func (m *ClusterJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinResp) ProtoMessage()               {}
func (*ClusterJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{7} }

// Cluster Disjoin request
type ClusterDisjoinReq struct {
}

func (m *ClusterDisjoinReq) Reset()                    { *m = ClusterDisjoinReq{} }
func (m *ClusterDisjoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterDisjoinReq) ProtoMessage()               {}
func (*ClusterDisjoinReq) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{8} }

// Cluster Disjoin response
type ClusterDisjoinResp struct {
}

func (m *ClusterDisjoinResp) Reset()                    { *m = ClusterDisjoinResp{} }
func (m *ClusterDisjoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterDisjoinResp) ProtoMessage()               {}
func (*ClusterDisjoinResp) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{9} }

// Register NIC request
type RegisterNICRequest struct {
	// SmartNIC object
	Nic cmd.SmartNIC `protobuf:"bytes,1,opt,name=Nic" json:"nic,omitempty"`
	// Factory Certificate
	Cert []byte `protobuf:"bytes,2,opt,name=Cert,proto3" json:"cert,omitempty"`
}

func (m *RegisterNICRequest) Reset()                    { *m = RegisterNICRequest{} }
func (m *RegisterNICRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNICRequest) ProtoMessage()               {}
func (*RegisterNICRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{10} }

func (m *RegisterNICRequest) GetNic() cmd.SmartNIC {
	if m != nil {
		return m.Nic
	}
	return cmd.SmartNIC{}
}

func (m *RegisterNICRequest) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

// Register NIC response
type RegisterNICResponse struct {
	// Admission Status of NIC - string enum of cmd.SmartNICSpec.SmartNICPhase
	Phase string `protobuf:"bytes,1,opt,name=Phase,proto3" json:"phase,omitempty"`
	// Reason is an optional field. It is populated with reason
	// when there is an Admisison failure
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"reason,omitempty"`
}

func (m *RegisterNICResponse) Reset()                    { *m = RegisterNICResponse{} }
func (m *RegisterNICResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNICResponse) ProtoMessage()               {}
func (*RegisterNICResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{11} }

func (m *RegisterNICResponse) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *RegisterNICResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Update NIC request
type UpdateNICRequest struct {
	// SmartNIC object
	Nic cmd.SmartNIC `protobuf:"bytes,1,opt,name=Nic" json:"nic,omitempty"`
}

func (m *UpdateNICRequest) Reset()                    { *m = UpdateNICRequest{} }
func (m *UpdateNICRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNICRequest) ProtoMessage()               {}
func (*UpdateNICRequest) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{12} }

func (m *UpdateNICRequest) GetNic() cmd.SmartNIC {
	if m != nil {
		return m.Nic
	}
	return cmd.SmartNIC{}
}

// Update NIC response
type UpdateNICResponse struct {
	// SmartNIC object
	Nic *cmd.SmartNIC `protobuf:"bytes,1,opt,name=Nic" json:"nic,omitempty"`
}

func (m *UpdateNICResponse) Reset()                    { *m = UpdateNICResponse{} }
func (m *UpdateNICResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNICResponse) ProtoMessage()               {}
func (*UpdateNICResponse) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{13} }

func (m *UpdateNICResponse) GetNic() *cmd.SmartNIC {
	if m != nil {
		return m.Nic
	}
	return nil
}

// SmartNIC watch event
type SmartNICEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"eventType,omitempty"`
	Nic       cmd.SmartNIC  `protobuf:"bytes,2,opt,name=Nic" json:"nic,omitempty"`
}

func (m *SmartNICEvent) Reset()                    { *m = SmartNICEvent{} }
func (m *SmartNICEvent) String() string            { return proto.CompactTextString(m) }
func (*SmartNICEvent) ProtoMessage()               {}
func (*SmartNICEvent) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{14} }

func (m *SmartNICEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *SmartNICEvent) GetNic() cmd.SmartNIC {
	if m != nil {
		return m.Nic
	}
	return cmd.SmartNIC{}
}

func init() {
	proto.RegisterType((*ClusterPreJoinReq)(nil), "grpc.ClusterPreJoinReq")
	proto.RegisterType((*ClusterPreJoinResp)(nil), "grpc.ClusterPreJoinResp")
	proto.RegisterType((*QuorumMember)(nil), "grpc.QuorumMember")
	proto.RegisterType((*QuorumConfig)(nil), "grpc.QuorumConfig")
	proto.RegisterType((*Certificate)(nil), "grpc.Certificate")
	proto.RegisterType((*CertMgrBundle)(nil), "grpc.CertMgrBundle")
	proto.RegisterType((*ClusterJoinReq)(nil), "grpc.ClusterJoinReq")
	proto.RegisterType((*ClusterJoinResp)(nil), "grpc.ClusterJoinResp")
	proto.RegisterType((*ClusterDisjoinReq)(nil), "grpc.ClusterDisjoinReq")
	proto.RegisterType((*ClusterDisjoinResp)(nil), "grpc.ClusterDisjoinResp")
	proto.RegisterType((*RegisterNICRequest)(nil), "grpc.RegisterNICRequest")
	proto.RegisterType((*RegisterNICResponse)(nil), "grpc.RegisterNICResponse")
	proto.RegisterType((*UpdateNICRequest)(nil), "grpc.UpdateNICRequest")
	proto.RegisterType((*UpdateNICResponse)(nil), "grpc.UpdateNICResponse")
	proto.RegisterType((*SmartNICEvent)(nil), "grpc.SmartNICEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error)
	Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error)
	Disjoin(ctx context.Context, in *ClusterDisjoinReq, opts ...grpc1.CallOption) (*ClusterDisjoinResp, error)
}

type clusterClient struct {
	cc *grpc1.ClientConn
}

func NewClusterClient(cc *grpc1.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error) {
	out := new(ClusterPreJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/PreJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error) {
	out := new(ClusterJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Disjoin(ctx context.Context, in *ClusterDisjoinReq, opts ...grpc1.CallOption) (*ClusterDisjoinResp, error) {
	out := new(ClusterDisjoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/Disjoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	PreJoin(context.Context, *ClusterPreJoinReq) (*ClusterPreJoinResp, error)
	Join(context.Context, *ClusterJoinReq) (*ClusterJoinResp, error)
	Disjoin(context.Context, *ClusterDisjoinReq) (*ClusterDisjoinResp, error)
}

func RegisterClusterServer(s *grpc1.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_PreJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPreJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PreJoin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/PreJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PreJoin(ctx, req.(*ClusterPreJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Join(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Join(ctx, req.(*ClusterJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Disjoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDisjoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Disjoin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/Disjoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Disjoin(ctx, req.(*ClusterDisjoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "PreJoin",
			Handler:    _Cluster_PreJoin_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Cluster_Join_Handler,
		},
		{
			MethodName: "Disjoin",
			Handler:    _Cluster_Disjoin_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "cluster.proto",
}

// Client API for SmartNIC service

type SmartNICClient interface {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	RegisterNIC(ctx context.Context, in *RegisterNICRequest, opts ...grpc1.CallOption) (*RegisterNICResponse, error)
	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc1.CallOption) (*UpdateNICResponse, error)
	// Watcher for SmartNIC object updates
	WatchNICs(ctx context.Context, in *api.ObjectMeta, opts ...grpc1.CallOption) (SmartNIC_WatchNICsClient, error)
}

type smartNICClient struct {
	cc *grpc1.ClientConn
}

func NewSmartNICClient(cc *grpc1.ClientConn) SmartNICClient {
	return &smartNICClient{cc}
}

func (c *smartNICClient) RegisterNIC(ctx context.Context, in *RegisterNICRequest, opts ...grpc1.CallOption) (*RegisterNICResponse, error) {
	out := new(RegisterNICResponse)
	err := grpc1.Invoke(ctx, "/grpc.SmartNIC/RegisterNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartNICClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc1.CallOption) (*UpdateNICResponse, error) {
	out := new(UpdateNICResponse)
	err := grpc1.Invoke(ctx, "/grpc.SmartNIC/UpdateNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartNICClient) WatchNICs(ctx context.Context, in *api.ObjectMeta, opts ...grpc1.CallOption) (SmartNIC_WatchNICsClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_SmartNIC_serviceDesc.Streams[0], c.cc, "/grpc.SmartNIC/WatchNICs", opts...)
	if err != nil {
		return nil, err
	}
	x := &smartNICWatchNICsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmartNIC_WatchNICsClient interface {
	Recv() (*SmartNICEvent, error)
	grpc1.ClientStream
}

type smartNICWatchNICsClient struct {
	grpc1.ClientStream
}

func (x *smartNICWatchNICsClient) Recv() (*SmartNICEvent, error) {
	m := new(SmartNICEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SmartNIC service

type SmartNICServer interface {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	RegisterNIC(context.Context, *RegisterNICRequest) (*RegisterNICResponse, error)
	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	UpdateNIC(context.Context, *UpdateNICRequest) (*UpdateNICResponse, error)
	// Watcher for SmartNIC object updates
	WatchNICs(*api.ObjectMeta, SmartNIC_WatchNICsServer) error
}

func RegisterSmartNICServer(s *grpc1.Server, srv SmartNICServer) {
	s.RegisterService(&_SmartNIC_serviceDesc, srv)
}

func _SmartNIC_RegisterNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartNICServer).RegisterNIC(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SmartNIC/RegisterNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartNICServer).RegisterNIC(ctx, req.(*RegisterNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartNIC_UpdateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartNICServer).UpdateNIC(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SmartNIC/UpdateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartNICServer).UpdateNIC(ctx, req.(*UpdateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartNIC_WatchNICs_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmartNICServer).WatchNICs(m, &smartNICWatchNICsServer{stream})
}

type SmartNIC_WatchNICsServer interface {
	Send(*SmartNICEvent) error
	grpc1.ServerStream
}

type smartNICWatchNICsServer struct {
	grpc1.ServerStream
}

func (x *smartNICWatchNICsServer) Send(m *SmartNICEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _SmartNIC_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.SmartNIC",
	HandlerType: (*SmartNICServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "RegisterNIC",
			Handler:    _SmartNIC_RegisterNIC_Handler,
		},
		{
			MethodName: "UpdateNIC",
			Handler:    _SmartNIC_UpdateNIC_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "WatchNICs",
			Handler:       _SmartNIC_WatchNICs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster.proto",
}

func (m *ClusterPreJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.TransportKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.TransportKey)))
		i += copy(dAtA[i:], m.TransportKey)
	}
	return i, nil
}

func (m *ClusterPreJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SwVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.SwVersion)))
		i += copy(dAtA[i:], m.SwVersion)
	}
	if len(m.TransportKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.TransportKey)))
		i += copy(dAtA[i:], m.TransportKey)
	}
	return i, nil
}

func (m *QuorumMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *QuorumConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.QuorumMembers) > 0 {
		for _, msg := range m.QuorumMembers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Certificate)))
		i += copy(dAtA[i:], m.Certificate)
	}
	return i, nil
}

func (m *CertMgrBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertMgrBundle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WrappedCaKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.WrappedCaKey)))
		i += copy(dAtA[i:], m.WrappedCaKey)
	}
	if len(m.CaTrustChain) > 0 {
		for _, msg := range m.CaTrustChain {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, msg := range m.TrustRoots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.QuorumNodes) > 0 {
		for _, s := range m.QuorumNodes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.QuorumConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.QuorumConfig.Size()))
		n1, err := m.QuorumConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.CertMgrBundle != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.CertMgrBundle.Size()))
		n2, err := m.CertMgrBundle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ClusterJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterDisjoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDisjoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterDisjoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDisjoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterNICRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterNICRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Nic.Size()))
	n3, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Cert) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Cert)))
		i += copy(dAtA[i:], m.Cert)
	}
	return i, nil
}

func (m *RegisterNICResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterNICResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phase) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Phase)))
		i += copy(dAtA[i:], m.Phase)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UpdateNICRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNICRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Nic.Size()))
	n4, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *UpdateNICResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNICResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Nic.Size()))
		n5, err := m.Nic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SmartNICEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartNICEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Nic.Size()))
	n6, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterPreJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.TransportKey)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *ClusterPreJoinResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.SwVersion)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.TransportKey)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *QuorumMember) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCluster(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *QuorumConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.QuorumMembers) > 0 {
		for _, e := range m.QuorumMembers {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *Certificate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *CertMgrBundle) Size() (n int) {
	var l int
	_ = l
	l = len(m.WrappedCaKey)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.CaTrustChain) > 0 {
		for _, e := range m.CaTrustChain {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	if len(m.TrustRoots) > 0 {
		for _, e := range m.TrustRoots {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *ClusterJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.QuorumNodes) > 0 {
		for _, s := range m.QuorumNodes {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	if m.QuorumConfig != nil {
		l = m.QuorumConfig.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.CertMgrBundle != nil {
		l = m.CertMgrBundle.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *ClusterJoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClusterDisjoinReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClusterDisjoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RegisterNICRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Nic.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *RegisterNICResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *UpdateNICRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Nic.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func (m *UpdateNICResponse) Size() (n int) {
	var l int
	_ = l
	if m.Nic != nil {
		l = m.Nic.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *SmartNICEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovCluster(uint64(m.EventType))
	}
	l = m.Nic.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func sovCluster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCluster(x uint64) (n int) {
	return sovCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterPreJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportKey = append(m.TransportKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TransportKey == nil {
				m.TransportKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterPreJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportKey = append(m.TransportKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TransportKey == nil {
				m.TransportKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerUrls = append(m.PeerUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUrls = append(m.ClientUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumMembers = append(m.QuorumMembers, &QuorumMember{})
			if err := m.QuorumMembers[len(m.QuorumMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
			if m.Certificate == nil {
				m.Certificate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertMgrBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertMgrBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertMgrBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrappedCaKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrappedCaKey = append(m.WrappedCaKey[:0], dAtA[iNdEx:postIndex]...)
			if m.WrappedCaKey == nil {
				m.WrappedCaKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaTrustChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaTrustChain = append(m.CaTrustChain, &Certificate{})
			if err := m.CaTrustChain[len(m.CaTrustChain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustRoots = append(m.TrustRoots, &Certificate{})
			if err := m.TrustRoots[len(m.TrustRoots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumNodes = append(m.QuorumNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuorumConfig == nil {
				m.QuorumConfig = &QuorumConfig{}
			}
			if err := m.QuorumConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTPServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTPServers = append(m.NTPServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertMgrBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertMgrBundle == nil {
				m.CertMgrBundle = &CertMgrBundle{}
			}
			if err := m.CertMgrBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDisjoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDisjoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDisjoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDisjoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDisjoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDisjoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterNICRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterNICRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterNICRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterNICResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterNICResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterNICResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNICRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNICRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNICRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNICResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNICResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNICResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nic == nil {
				m.Nic = &cmd.SmartNIC{}
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartNICEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartNICEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartNICEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cluster.proto", fileDescriptorCluster) }

var fileDescriptorCluster = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6f, 0x23, 0x35,
	0x14, 0xef, 0xa4, 0xd9, 0xb6, 0x79, 0xf9, 0xd3, 0xd6, 0xed, 0xd2, 0x21, 0x40, 0x12, 0x46, 0x02,
	0x15, 0xb1, 0x24, 0x10, 0x54, 0x10, 0x97, 0x3d, 0x24, 0xbb, 0x87, 0xec, 0xaa, 0xa1, 0xcc, 0x76,
	0x59, 0x71, 0x8a, 0x9c, 0x19, 0x37, 0xf5, 0x2a, 0x33, 0x76, 0x6d, 0x4f, 0xab, 0x5e, 0xf8, 0x08,
	0x9c, 0xb9, 0x70, 0xe6, 0x6b, 0x70, 0x63, 0x8f, 0x7c, 0x82, 0x08, 0x95, 0x5b, 0x3e, 0x05, 0xb2,
	0x3d, 0x49, 0x26, 0x69, 0x00, 0x21, 0xb8, 0xf9, 0xfd, 0xde, 0xef, 0xfd, 0xf1, 0x7b, 0x3f, 0xcf,
	0x40, 0x39, 0x18, 0x27, 0x52, 0x11, 0xd1, 0xe4, 0x82, 0x29, 0x86, 0xf2, 0x23, 0xc1, 0x83, 0xea,
	0xbb, 0x23, 0xc6, 0x46, 0x63, 0xd2, 0xc2, 0x9c, 0xb6, 0x70, 0x1c, 0x33, 0x85, 0x15, 0x65, 0xb1,
	0xb4, 0x9c, 0xea, 0x27, 0x23, 0xaa, 0x2e, 0x93, 0x61, 0x33, 0x60, 0x51, 0x6b, 0xc4, 0x46, 0xac,
	0x65, 0xe0, 0x61, 0x72, 0x61, 0x2c, 0x63, 0x98, 0x53, 0x4a, 0xff, 0x38, 0x43, 0xe7, 0x24, 0x96,
	0x38, 0x0e, 0x59, 0x4b, 0xde, 0x98, 0xe4, 0x86, 0x21, 0x5b, 0x41, 0x14, 0xa6, 0xe4, 0x0f, 0xfe,
	0x86, 0x1c, 0x11, 0x85, 0x2d, 0xcd, 0xfb, 0x1e, 0xf6, 0xbb, 0xb6, 0xef, 0x33, 0x41, 0x9e, 0x31,
	0x1a, 0xfb, 0xe4, 0x0a, 0x21, 0xc8, 0xc7, 0x38, 0x22, 0xae, 0xd3, 0x70, 0x8e, 0x0b, 0xbe, 0x39,
	0x6b, 0x2c, 0x49, 0x68, 0xe8, 0xe6, 0x2c, 0xa6, 0xcf, 0xe8, 0x3d, 0x80, 0x6b, 0x2a, 0x54, 0x82,
	0xc7, 0x03, 0xca, 0xdd, 0x4d, 0xe3, 0x29, 0xa4, 0x48, 0x8f, 0x23, 0x0f, 0x4a, 0x4a, 0xe0, 0x58,
	0x72, 0x26, 0xd4, 0x73, 0x72, 0xeb, 0xe6, 0x1b, 0xce, 0x71, 0xc9, 0x5f, 0xc2, 0xbc, 0x57, 0x80,
	0x56, 0xeb, 0x4b, 0xae, 0x13, 0xcb, 0x9b, 0xc1, 0x35, 0x11, 0x92, 0xb2, 0x38, 0x6d, 0xa3, 0x20,
	0x6f, 0xbe, 0xb5, 0xc0, 0xbd, 0xc4, 0xb9, 0x35, 0x89, 0x39, 0x94, 0xbe, 0x49, 0x98, 0x48, 0xa2,
	0x53, 0x12, 0x0d, 0x89, 0x40, 0x15, 0xc8, 0xd1, 0xd0, 0xa4, 0xca, 0xfb, 0x39, 0x1a, 0xce, 0xef,
	0x98, 0xcb, 0xdc, 0xf1, 0x1d, 0x28, 0x70, 0x42, 0xc4, 0x20, 0x11, 0x63, 0xe9, 0x6e, 0x36, 0x36,
	0x8f, 0x0b, 0xfe, 0x8e, 0x06, 0x5e, 0x8a, 0xb1, 0x44, 0x75, 0x28, 0x06, 0x63, 0x4a, 0x62, 0x65,
	0xdd, 0x79, 0xe3, 0x06, 0x0b, 0x69, 0x82, 0xf7, 0xdd, 0xac, 0x62, 0x97, 0xc5, 0x17, 0x74, 0x94,
	0xa9, 0x58, 0x30, 0x15, 0xbf, 0x82, 0xca, 0x95, 0xf1, 0x0f, 0x22, 0xd3, 0x92, 0x74, 0x73, 0x8d,
	0xcd, 0xe3, 0x62, 0x1b, 0x35, 0xb5, 0x54, 0x9a, 0xd9, 0x6e, 0xfd, 0xf2, 0x55, 0xc6, 0x92, 0x5e,
	0x0b, 0x8a, 0x5d, 0x22, 0x14, 0xbd, 0xa0, 0x01, 0x56, 0x04, 0x35, 0xa0, 0x18, 0x2c, 0x4c, 0x53,
	0xa2, 0xe4, 0x67, 0x21, 0xef, 0x27, 0x07, 0xca, 0x3a, 0xe2, 0x74, 0x24, 0x3a, 0x49, 0x1c, 0x8e,
	0x89, 0x9e, 0xd9, 0x8d, 0xc0, 0x9c, 0x93, 0xb0, 0x8b, 0xf5, 0xcc, 0x6c, 0xd0, 0x12, 0x86, 0x4e,
	0xa0, 0x14, 0xe0, 0x73, 0x91, 0x48, 0xd5, 0xbd, 0xc4, 0x34, 0x4e, 0xfb, 0xdb, 0xb7, 0xfd, 0x65,
	0x1a, 0xf0, 0x97, 0x68, 0xe8, 0x33, 0x00, 0xa5, 0x2d, 0x9f, 0x31, 0x65, 0xe7, 0xb6, 0x36, 0x28,
	0x43, 0xf2, 0x7e, 0xce, 0x41, 0x25, 0xdd, 0xfb, 0xff, 0x2c, 0xba, 0xf7, 0xa1, 0x94, 0x4e, 0x39,
	0x66, 0x21, 0x99, 0xed, 0xa9, 0x68, 0xb1, 0xbe, 0x86, 0xd0, 0x97, 0x90, 0x8e, 0x77, 0x10, 0x98,
	0x4d, 0xb9, 0x0f, 0x1a, 0xce, 0xea, 0x1e, 0xec, 0x0e, 0xfd, 0x34, 0x57, 0xba, 0xd1, 0x1a, 0x40,
	0xff, 0xfc, 0xec, 0x05, 0x11, 0x5a, 0x99, 0xee, 0x96, 0x55, 0xc0, 0x02, 0x41, 0x47, 0xb0, 0xad,
	0x8b, 0x0e, 0x68, 0xe8, 0x6e, 0x9b, 0xbe, 0xb6, 0xb4, 0xd9, 0xd3, 0xab, 0x2f, 0x07, 0xd9, 0x6d,
	0xb8, 0x3b, 0xa6, 0xe2, 0xc1, 0x62, 0x48, 0x73, 0x97, 0xbf, 0xcc, 0xf4, 0xf6, 0x61, 0x77, 0x69,
	0x50, 0x92, 0x7b, 0x07, 0xf3, 0x37, 0xfb, 0x84, 0xca, 0xd7, 0x76, 0x7c, 0xde, 0xe1, 0xfc, 0x21,
	0xcd, 0x41, 0xc9, 0x3d, 0x05, 0xc8, 0x27, 0x23, 0xaa, 0xe1, 0x7e, 0xaf, 0xeb, 0x93, 0xab, 0x84,
	0x48, 0x85, 0xbe, 0x80, 0xcd, 0x3e, 0x0d, 0xcc, 0xa4, 0x8b, 0xed, 0x72, 0x53, 0x7f, 0x34, 0x5e,
	0x44, 0x58, 0xa8, 0x7e, 0xaf, 0xdb, 0x79, 0xf8, 0x66, 0x52, 0xdf, 0x98, 0x4e, 0xea, 0xe5, 0x98,
	0x06, 0x8f, 0x58, 0x44, 0x15, 0x89, 0xb8, 0xba, 0xf5, 0x75, 0x00, 0xfa, 0x10, 0xf2, 0xba, 0x57,
	0xfb, 0xde, 0x3a, 0x68, 0x3a, 0xa9, 0x57, 0x74, 0xb3, 0x19, 0x9a, 0xf1, 0x7b, 0x31, 0x1c, 0x2c,
	0x55, 0x95, 0x9c, 0xc5, 0x92, 0xa0, 0x8f, 0xe0, 0xc1, 0xd9, 0x25, 0x96, 0xe9, 0x8a, 0x3b, 0x07,
	0xd3, 0x49, 0x7d, 0x97, 0x6b, 0x20, 0x93, 0xc0, 0x32, 0xd0, 0x23, 0xd8, 0xf2, 0x09, 0x96, 0x2c,
	0xb6, 0xab, 0xef, 0x1c, 0x4e, 0x27, 0xf5, 0x3d, 0x61, 0x90, 0x0c, 0x39, 0xe5, 0x78, 0xcf, 0x60,
	0xef, 0x25, 0x0f, 0xb1, 0x22, 0xff, 0xfd, 0x8e, 0xde, 0x73, 0xd8, 0xcf, 0xe4, 0x4a, 0x3b, 0xff,
	0xa7, 0x64, 0xce, 0x5f, 0x24, 0xfb, 0xc1, 0x81, 0xf2, 0x8c, 0xf8, 0xf4, 0x9a, 0xc4, 0x0a, 0x3d,
	0x85, 0x82, 0x39, 0x9c, 0xdf, 0x72, 0x3b, 0x87, 0x4a, 0xbb, 0xd2, 0xc4, 0x9c, 0x36, 0xe7, 0x68,
	0xe7, 0x68, 0x3a, 0xa9, 0x1f, 0x90, 0x99, 0x99, 0x49, 0xb9, 0x88, 0x9c, 0x35, 0x94, 0xfb, 0x97,
	0xb7, 0x6b, 0xff, 0xe2, 0xc0, 0x76, 0x2a, 0x13, 0xf4, 0x18, 0xb6, 0xd3, 0x6f, 0x2e, 0x3a, 0x4a,
	0x85, 0xb8, 0xfa, 0x27, 0xa8, 0xba, 0xeb, 0x1d, 0x92, 0x7b, 0x1b, 0xe8, 0x04, 0xf2, 0x26, 0xf8,
	0x70, 0x89, 0x33, 0x8b, 0x7c, 0xb8, 0x06, 0x35, 0x61, 0x8f, 0x61, 0x3b, 0x55, 0xe8, 0x4a, 0xd9,
	0x85, 0x98, 0x57, 0xca, 0x66, 0x05, 0xbd, 0xd1, 0xfe, 0xd5, 0x81, 0x9d, 0xd9, 0x5d, 0xd1, 0x13,
	0x28, 0x66, 0x94, 0x86, 0xd2, 0xb8, 0xfb, 0x92, 0xaf, 0xbe, 0xbd, 0xc6, 0x63, 0x97, 0x6b, 0x5a,
	0x2a, 0xcc, 0x77, 0x8e, 0xde, 0xb2, 0xcc, 0x55, 0x41, 0x55, 0x8f, 0xee, 0xe1, 0xf3, 0xf8, 0x13,
	0x28, 0xbc, 0xc2, 0x2a, 0xb8, 0xec, 0xf7, 0xba, 0x12, 0xed, 0x9a, 0x75, 0x7e, 0x3d, 0x7c, 0x4d,
	0x02, 0x75, 0x4a, 0x14, 0xae, 0xa6, 0xaf, 0x7c, 0x49, 0x07, 0xde, 0xc6, 0xa7, 0x4e, 0x67, 0xef,
	0xcd, 0x5d, 0xcd, 0xf9, 0xed, 0xae, 0xe6, 0xfc, 0x7e, 0x57, 0x73, 0x7e, 0xfc, 0xa3, 0xb6, 0x31,
	0xdc, 0x32, 0x3f, 0xe5, 0xcf, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x83, 0x04, 0x67, 0xd6, 0x4c,
	0x08, 0x00, 0x00,
}
