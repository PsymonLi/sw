// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: member.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		member.proto

	It has these top-level messages:
		ClusterPreJoinReq
		ClusterPreJoinResp
		QuorumMember
		QuorumConfig
		CertMgrBundle
		ClusterJoinReq
		ClusterJoinResp
		ClusterDisjoinReq
		ClusterDisjoinResp
		NICAdmissionRequest
		AuthenticationRequest
		AuthenticationResponse
		NICAdmissionResponse
		RegisterNICRequest
		RegisterNICResponse
		UpdateNICRequest
		UpdateNICResponse
		SmartNICEvent
		HeartbeatRequest
		HeartbeatResponse
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import cluster2 "github.com/pensando/sw/api/generated/cluster"
import api "github.com/pensando/sw/api"
import certapi "github.com/pensando/sw/venice/cmd/grpc/server/certificates/certapi"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Cluster PreJoin request
type ClusterPreJoinReq struct {
	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid         string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp    string   `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	TransportKey []byte   `protobuf:"bytes,4,opt,name=transportKey,proto3" json:"transportKey,omitempty"`
	NtpServers   []string `protobuf:"bytes,5,rep,name=ntpServers" json:"ntpServers,omitempty"`
}

func (m *ClusterPreJoinReq) Reset()                    { *m = ClusterPreJoinReq{} }
func (m *ClusterPreJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinReq) ProtoMessage()               {}
func (*ClusterPreJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{0} }

func (m *ClusterPreJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterPreJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterPreJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ClusterPreJoinReq) GetTransportKey() []byte {
	if m != nil {
		return m.TransportKey
	}
	return nil
}

func (m *ClusterPreJoinReq) GetNtpServers() []string {
	if m != nil {
		return m.NtpServers
	}
	return nil
}

// Cluster PreJoin response
type ClusterPreJoinResp struct {
	SwVersion    string `protobuf:"bytes,1,opt,name=sw_version,json=swVersion,proto3" json:"sw_version,omitempty"`
	TransportKey []byte `protobuf:"bytes,2,opt,name=transportKey,proto3" json:"transportKey,omitempty"`
}

func (m *ClusterPreJoinResp) Reset()                    { *m = ClusterPreJoinResp{} }
func (m *ClusterPreJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinResp) ProtoMessage()               {}
func (*ClusterPreJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{1} }

func (m *ClusterPreJoinResp) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *ClusterPreJoinResp) GetTransportKey() []byte {
	if m != nil {
		return m.TransportKey
	}
	return nil
}

// Quorum member
type QuorumMember struct {
	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PeerUrls   []string `protobuf:"bytes,3,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls []string `protobuf:"bytes,4,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
}

func (m *QuorumMember) Reset()                    { *m = QuorumMember{} }
func (m *QuorumMember) String() string            { return proto.CompactTextString(m) }
func (*QuorumMember) ProtoMessage()               {}
func (*QuorumMember) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{2} }

func (m *QuorumMember) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QuorumMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuorumMember) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *QuorumMember) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

// Quorum configuration
type QuorumConfig struct {
	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuorumMembers []*QuorumMember `protobuf:"bytes,2,rep,name=quorum_members,json=quorumMembers" json:"quorum_members,omitempty"`
	Existing      bool            `protobuf:"varint,3,opt,name=existing,proto3" json:"existing,omitempty"`
}

func (m *QuorumConfig) Reset()                    { *m = QuorumConfig{} }
func (m *QuorumConfig) String() string            { return proto.CompactTextString(m) }
func (*QuorumConfig) ProtoMessage()               {}
func (*QuorumConfig) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{3} }

func (m *QuorumConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuorumConfig) GetQuorumMembers() []*QuorumMember {
	if m != nil {
		return m.QuorumMembers
	}
	return nil
}

func (m *QuorumConfig) GetExisting() bool {
	if m != nil {
		return m.Existing
	}
	return false
}

// CA Bundle
type CertMgrBundle struct {
	WrappedCaKey []byte                `protobuf:"bytes,1,opt,name=wrappedCaKey,proto3" json:"wrappedCaKey,omitempty"`
	CaTrustChain *certapi.CaTrustChain `protobuf:"bytes,2,opt,name=caTrustChain" json:"caTrustChain,omitempty"`
	TrustRoots   *certapi.TrustRoots   `protobuf:"bytes,3,opt,name=trustRoots" json:"trustRoots,omitempty"`
}

func (m *CertMgrBundle) Reset()                    { *m = CertMgrBundle{} }
func (m *CertMgrBundle) String() string            { return proto.CompactTextString(m) }
func (*CertMgrBundle) ProtoMessage()               {}
func (*CertMgrBundle) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{4} }

func (m *CertMgrBundle) GetWrappedCaKey() []byte {
	if m != nil {
		return m.WrappedCaKey
	}
	return nil
}

func (m *CertMgrBundle) GetCaTrustChain() *certapi.CaTrustChain {
	if m != nil {
		return m.CaTrustChain
	}
	return nil
}

func (m *CertMgrBundle) GetTrustRoots() *certapi.TrustRoots {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

// Cluster Join request
type ClusterJoinReq struct {
	Name          string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid          string         `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp     string         `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	QuorumNodes   []string       `protobuf:"bytes,4,rep,name=quorum_nodes,json=quorumNodes" json:"quorum_nodes,omitempty"`
	QuorumConfig  *QuorumConfig  `protobuf:"bytes,5,opt,name=quorum_config,json=quorumConfig" json:"quorum_config,omitempty"`
	NTPServers    []string       `protobuf:"bytes,6,rep,name=NTPServers" json:"NTPServers,omitempty"`
	NodeId        string         `protobuf:"bytes,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	CertMgrBundle *CertMgrBundle `protobuf:"bytes,8,opt,name=certMgrBundle" json:"certMgrBundle,omitempty"`
}

func (m *ClusterJoinReq) Reset()                    { *m = ClusterJoinReq{} }
func (m *ClusterJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinReq) ProtoMessage()               {}
func (*ClusterJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{5} }

func (m *ClusterJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ClusterJoinReq) GetQuorumNodes() []string {
	if m != nil {
		return m.QuorumNodes
	}
	return nil
}

func (m *ClusterJoinReq) GetQuorumConfig() *QuorumConfig {
	if m != nil {
		return m.QuorumConfig
	}
	return nil
}

func (m *ClusterJoinReq) GetNTPServers() []string {
	if m != nil {
		return m.NTPServers
	}
	return nil
}

func (m *ClusterJoinReq) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ClusterJoinReq) GetCertMgrBundle() *CertMgrBundle {
	if m != nil {
		return m.CertMgrBundle
	}
	return nil
}

// Cluster Join response
type ClusterJoinResp struct {
}

func (m *ClusterJoinResp) Reset()                    { *m = ClusterJoinResp{} }
func (m *ClusterJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinResp) ProtoMessage()               {}
func (*ClusterJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{6} }

// Cluster Disjoin request
type ClusterDisjoinReq struct {
}

func (m *ClusterDisjoinReq) Reset()                    { *m = ClusterDisjoinReq{} }
func (m *ClusterDisjoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterDisjoinReq) ProtoMessage()               {}
func (*ClusterDisjoinReq) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{7} }

// Cluster Disjoin response
type ClusterDisjoinResp struct {
}

func (m *ClusterDisjoinResp) Reset()                    { *m = ClusterDisjoinResp{} }
func (m *ClusterDisjoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterDisjoinResp) ProtoMessage()               {}
func (*ClusterDisjoinResp) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{8} }

// NMD --> CMD
type NICAdmissionRequest struct {
	Nic cluster2.DistributedServiceCard `protobuf:"bytes,1,opt,name=Nic" json:"nic,omitempty"`
	// Factory Certificates
	Certs [][]byte `protobuf:"bytes,2,rep,name=Certs" json:"certificates,omitempty"`
	// Cluster Certificate Signing Request
	ClusterCertSignRequest []byte `protobuf:"bytes,3,opt,name=ClusterCertSignRequest,proto3" json:"clusterCertSignRequest,omitempty"`
}

func (m *NICAdmissionRequest) Reset()                    { *m = NICAdmissionRequest{} }
func (m *NICAdmissionRequest) String() string            { return proto.CompactTextString(m) }
func (*NICAdmissionRequest) ProtoMessage()               {}
func (*NICAdmissionRequest) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{9} }

func (m *NICAdmissionRequest) GetNic() cluster2.DistributedServiceCard {
	if m != nil {
		return m.Nic
	}
	return cluster2.DistributedServiceCard{}
}

func (m *NICAdmissionRequest) GetCerts() [][]byte {
	if m != nil {
		return m.Certs
	}
	return nil
}

func (m *NICAdmissionRequest) GetClusterCertSignRequest() []byte {
	if m != nil {
		return m.ClusterCertSignRequest
	}
	return nil
}

// CMD --> NMD
type AuthenticationRequest struct {
	// Challenge consists of a random nonce
	Challenge []byte `protobuf:"bytes,1,opt,name=Challenge,proto3" json:"challenge,omitempty"`
	// Trust chain of the cluster CA
	TrustChain [][]byte `protobuf:"bytes,2,rep,name=TrustChain" json:"trustChain,omitempty"`
}

func (m *AuthenticationRequest) Reset()                    { *m = AuthenticationRequest{} }
func (m *AuthenticationRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationRequest) ProtoMessage()               {}
func (*AuthenticationRequest) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{10} }

func (m *AuthenticationRequest) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *AuthenticationRequest) GetTrustChain() [][]byte {
	if m != nil {
		return m.TrustChain
	}
	return nil
}

// NMD --> CMD
type AuthenticationResponse struct {
	// Random string chosen by NMD to compute the response
	// Prevents chosen-plaintext attacks
	// Needed for verification of the signature
	ClaimantRandom []byte `protobuf:"bytes,1,opt,name=ClaimantRandom,proto3" json:"claimantRandom,omitempty"`
	// Challenge response
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=ChallengeResponse,proto3" json:"challengeResponse,omitempty"`
}

func (m *AuthenticationResponse) Reset()                    { *m = AuthenticationResponse{} }
func (m *AuthenticationResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthenticationResponse) ProtoMessage()               {}
func (*AuthenticationResponse) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{11} }

func (m *AuthenticationResponse) GetClaimantRandom() []byte {
	if m != nil {
		return m.ClaimantRandom
	}
	return nil
}

func (m *AuthenticationResponse) GetChallengeResponse() []byte {
	if m != nil {
		return m.ChallengeResponse
	}
	return nil
}

// CMD --> NMD
type NICAdmissionResponse struct {
	// Admission Status of NIC - string enum of cluster.SmartNICSpec.SmartNICPhase
	Phase string `protobuf:"bytes,1,opt,name=Phase,proto3" json:"phase,omitempty"`
	// Reason is an optional field. It is populated with reason
	// when there is an Admisison failure
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"reason,omitempty"`
	// The certificate used to talk to other Venice and NAPLES components
	ClusterCert *certapi.CertificateSignResp `protobuf:"bytes,3,opt,name=ClusterCert" json:"clusterCert,omitempty"`
	// The CA trust chain for the cluster certificate
	CaTrustChain *certapi.CaTrustChain `protobuf:"bytes,4,opt,name=CaTrustChain" json:"caTrustChain,omitempty"`
	// Additional root certificates to trust
	TrustRoots *certapi.TrustRoots `protobuf:"bytes,5,opt,name=TrustRoots" json:"trustRoots,omitempty"`
	// Registration response may also contain a smartnic version to rollout to if non-empty.
	RolloutVersion string `protobuf:"bytes,6,opt,name=RolloutVersion,proto3" json:"rolloutVersion,omitempty"`
	// List of controller quorum nodes
	Controllers []string `protobuf:"bytes,7,rep,name=Controllers" json:"controllers,omitempty"`
}

func (m *NICAdmissionResponse) Reset()                    { *m = NICAdmissionResponse{} }
func (m *NICAdmissionResponse) String() string            { return proto.CompactTextString(m) }
func (*NICAdmissionResponse) ProtoMessage()               {}
func (*NICAdmissionResponse) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{12} }

func (m *NICAdmissionResponse) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *NICAdmissionResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *NICAdmissionResponse) GetClusterCert() *certapi.CertificateSignResp {
	if m != nil {
		return m.ClusterCert
	}
	return nil
}

func (m *NICAdmissionResponse) GetCaTrustChain() *certapi.CaTrustChain {
	if m != nil {
		return m.CaTrustChain
	}
	return nil
}

func (m *NICAdmissionResponse) GetTrustRoots() *certapi.TrustRoots {
	if m != nil {
		return m.TrustRoots
	}
	return nil
}

func (m *NICAdmissionResponse) GetRolloutVersion() string {
	if m != nil {
		return m.RolloutVersion
	}
	return ""
}

func (m *NICAdmissionResponse) GetControllers() []string {
	if m != nil {
		return m.Controllers
	}
	return nil
}

// NIC Registration request (CMD --> NMD)
type RegisterNICRequest struct {
	// First message
	AdmissionRequest *NICAdmissionRequest `protobuf:"bytes,1,opt,name=AdmissionRequest" json:"admissionRequest,omitempty"`
	// Third message
	AuthenticationResponse *AuthenticationResponse `protobuf:"bytes,2,opt,name=AuthenticationResponse" json:"authenticationResponse,omitempty"`
}

func (m *RegisterNICRequest) Reset()                    { *m = RegisterNICRequest{} }
func (m *RegisterNICRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterNICRequest) ProtoMessage()               {}
func (*RegisterNICRequest) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{13} }

func (m *RegisterNICRequest) GetAdmissionRequest() *NICAdmissionRequest {
	if m != nil {
		return m.AdmissionRequest
	}
	return nil
}

func (m *RegisterNICRequest) GetAuthenticationResponse() *AuthenticationResponse {
	if m != nil {
		return m.AuthenticationResponse
	}
	return nil
}

// NIC Registration response (NMD --> CMD)
type RegisterNICResponse struct {
	// Second message
	AuthenticationRequest *AuthenticationRequest `protobuf:"bytes,1,opt,name=AuthenticationRequest" json:"authenticationRequest,omitempty"`
	// Fourth message
	AdmissionResponse *NICAdmissionResponse `protobuf:"bytes,2,opt,name=AdmissionResponse" json:"admissionResponse,omitempty"`
}

func (m *RegisterNICResponse) Reset()                    { *m = RegisterNICResponse{} }
func (m *RegisterNICResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterNICResponse) ProtoMessage()               {}
func (*RegisterNICResponse) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{14} }

func (m *RegisterNICResponse) GetAuthenticationRequest() *AuthenticationRequest {
	if m != nil {
		return m.AuthenticationRequest
	}
	return nil
}

func (m *RegisterNICResponse) GetAdmissionResponse() *NICAdmissionResponse {
	if m != nil {
		return m.AdmissionResponse
	}
	return nil
}

// Update NIC request
type UpdateNICRequest struct {
	// SmartNIC object
	Nic cluster2.DistributedServiceCard `protobuf:"bytes,1,opt,name=Nic" json:"nic,omitempty"`
}

func (m *UpdateNICRequest) Reset()                    { *m = UpdateNICRequest{} }
func (m *UpdateNICRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNICRequest) ProtoMessage()               {}
func (*UpdateNICRequest) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{15} }

func (m *UpdateNICRequest) GetNic() cluster2.DistributedServiceCard {
	if m != nil {
		return m.Nic
	}
	return cluster2.DistributedServiceCard{}
}

// Update NIC response
type UpdateNICResponse struct {
}

func (m *UpdateNICResponse) Reset()                    { *m = UpdateNICResponse{} }
func (m *UpdateNICResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNICResponse) ProtoMessage()               {}
func (*UpdateNICResponse) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{16} }

// SmartNIC watch event
type SmartNICEvent struct {
	EventType api.EventType                   `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"eventType,omitempty"`
	Nic       cluster2.DistributedServiceCard `protobuf:"bytes,2,opt,name=Nic" json:"nic,omitempty"`
}

func (m *SmartNICEvent) Reset()                    { *m = SmartNICEvent{} }
func (m *SmartNICEvent) String() string            { return proto.CompactTextString(m) }
func (*SmartNICEvent) ProtoMessage()               {}
func (*SmartNICEvent) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{17} }

func (m *SmartNICEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *SmartNICEvent) GetNic() cluster2.DistributedServiceCard {
	if m != nil {
		return m.Nic
	}
	return cluster2.DistributedServiceCard{}
}

type HeartbeatRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{18} }

func (m *HeartbeatRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type HeartbeatResponse struct {
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptorMember, []int{19} }

func init() {
	proto.RegisterType((*ClusterPreJoinReq)(nil), "grpc.ClusterPreJoinReq")
	proto.RegisterType((*ClusterPreJoinResp)(nil), "grpc.ClusterPreJoinResp")
	proto.RegisterType((*QuorumMember)(nil), "grpc.QuorumMember")
	proto.RegisterType((*QuorumConfig)(nil), "grpc.QuorumConfig")
	proto.RegisterType((*CertMgrBundle)(nil), "grpc.CertMgrBundle")
	proto.RegisterType((*ClusterJoinReq)(nil), "grpc.ClusterJoinReq")
	proto.RegisterType((*ClusterJoinResp)(nil), "grpc.ClusterJoinResp")
	proto.RegisterType((*ClusterDisjoinReq)(nil), "grpc.ClusterDisjoinReq")
	proto.RegisterType((*ClusterDisjoinResp)(nil), "grpc.ClusterDisjoinResp")
	proto.RegisterType((*NICAdmissionRequest)(nil), "grpc.NICAdmissionRequest")
	proto.RegisterType((*AuthenticationRequest)(nil), "grpc.AuthenticationRequest")
	proto.RegisterType((*AuthenticationResponse)(nil), "grpc.AuthenticationResponse")
	proto.RegisterType((*NICAdmissionResponse)(nil), "grpc.NICAdmissionResponse")
	proto.RegisterType((*RegisterNICRequest)(nil), "grpc.RegisterNICRequest")
	proto.RegisterType((*RegisterNICResponse)(nil), "grpc.RegisterNICResponse")
	proto.RegisterType((*UpdateNICRequest)(nil), "grpc.UpdateNICRequest")
	proto.RegisterType((*UpdateNICResponse)(nil), "grpc.UpdateNICResponse")
	proto.RegisterType((*SmartNICEvent)(nil), "grpc.SmartNICEvent")
	proto.RegisterType((*HeartbeatRequest)(nil), "grpc.HeartbeatRequest")
	proto.RegisterType((*HeartbeatResponse)(nil), "grpc.HeartbeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error)
	Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error)
	Disjoin(ctx context.Context, in *ClusterDisjoinReq, opts ...grpc1.CallOption) (*ClusterDisjoinResp, error)
}

type clusterClient struct {
	cc *grpc1.ClientConn
}

func NewClusterClient(cc *grpc1.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error) {
	out := new(ClusterPreJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/PreJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error) {
	out := new(ClusterJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Disjoin(ctx context.Context, in *ClusterDisjoinReq, opts ...grpc1.CallOption) (*ClusterDisjoinResp, error) {
	out := new(ClusterDisjoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/Disjoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	PreJoin(context.Context, *ClusterPreJoinReq) (*ClusterPreJoinResp, error)
	Join(context.Context, *ClusterJoinReq) (*ClusterJoinResp, error)
	Disjoin(context.Context, *ClusterDisjoinReq) (*ClusterDisjoinResp, error)
}

func RegisterClusterServer(s *grpc1.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_PreJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPreJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PreJoin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/PreJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PreJoin(ctx, req.(*ClusterPreJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Join(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Join(ctx, req.(*ClusterJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Disjoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDisjoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Disjoin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/Disjoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Disjoin(ctx, req.(*ClusterDisjoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "PreJoin",
			Handler:    _Cluster_PreJoin_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Cluster_Join_Handler,
		},
		{
			MethodName: "Disjoin",
			Handler:    _Cluster_Disjoin_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "member.proto",
}

// Client API for SmartNICRegistration service

type SmartNICRegistrationClient interface {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	RegisterNIC(ctx context.Context, opts ...grpc1.CallOption) (SmartNICRegistration_RegisterNICClient, error)
}

type smartNICRegistrationClient struct {
	cc *grpc1.ClientConn
}

func NewSmartNICRegistrationClient(cc *grpc1.ClientConn) SmartNICRegistrationClient {
	return &smartNICRegistrationClient{cc}
}

func (c *smartNICRegistrationClient) RegisterNIC(ctx context.Context, opts ...grpc1.CallOption) (SmartNICRegistration_RegisterNICClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_SmartNICRegistration_serviceDesc.Streams[0], c.cc, "/grpc.SmartNICRegistration/RegisterNIC", opts...)
	if err != nil {
		return nil, err
	}
	x := &smartNICRegistrationRegisterNICClient{stream}
	return x, nil
}

type SmartNICRegistration_RegisterNICClient interface {
	Send(*RegisterNICRequest) error
	Recv() (*RegisterNICResponse, error)
	grpc1.ClientStream
}

type smartNICRegistrationRegisterNICClient struct {
	grpc1.ClientStream
}

func (x *smartNICRegistrationRegisterNICClient) Send(m *RegisterNICRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *smartNICRegistrationRegisterNICClient) Recv() (*RegisterNICResponse, error) {
	m := new(RegisterNICResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SmartNICRegistration service

type SmartNICRegistrationServer interface {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	RegisterNIC(SmartNICRegistration_RegisterNICServer) error
}

func RegisterSmartNICRegistrationServer(s *grpc1.Server, srv SmartNICRegistrationServer) {
	s.RegisterService(&_SmartNICRegistration_serviceDesc, srv)
}

func _SmartNICRegistration_RegisterNIC_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(SmartNICRegistrationServer).RegisterNIC(&smartNICRegistrationRegisterNICServer{stream})
}

type SmartNICRegistration_RegisterNICServer interface {
	Send(*RegisterNICResponse) error
	Recv() (*RegisterNICRequest, error)
	grpc1.ServerStream
}

type smartNICRegistrationRegisterNICServer struct {
	grpc1.ServerStream
}

func (x *smartNICRegistrationRegisterNICServer) Send(m *RegisterNICResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *smartNICRegistrationRegisterNICServer) Recv() (*RegisterNICRequest, error) {
	m := new(RegisterNICRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SmartNICRegistration_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.SmartNICRegistration",
	HandlerType: (*SmartNICRegistrationServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "RegisterNIC",
			Handler:       _SmartNICRegistration_RegisterNIC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "member.proto",
}

// Client API for SmartNICUpdates service

type SmartNICUpdatesClient interface {
	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc1.CallOption) (*UpdateNICResponse, error)
	// Watcher for SmartNIC object updates
	WatchNICs(ctx context.Context, in *api.ObjectMeta, opts ...grpc1.CallOption) (SmartNICUpdates_WatchNICsClient, error)
}

type smartNICUpdatesClient struct {
	cc *grpc1.ClientConn
}

func NewSmartNICUpdatesClient(cc *grpc1.ClientConn) SmartNICUpdatesClient {
	return &smartNICUpdatesClient{cc}
}

func (c *smartNICUpdatesClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc1.CallOption) (*UpdateNICResponse, error) {
	out := new(UpdateNICResponse)
	err := grpc1.Invoke(ctx, "/grpc.SmartNICUpdates/UpdateNIC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartNICUpdatesClient) WatchNICs(ctx context.Context, in *api.ObjectMeta, opts ...grpc1.CallOption) (SmartNICUpdates_WatchNICsClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_SmartNICUpdates_serviceDesc.Streams[0], c.cc, "/grpc.SmartNICUpdates/WatchNICs", opts...)
	if err != nil {
		return nil, err
	}
	x := &smartNICUpdatesWatchNICsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SmartNICUpdates_WatchNICsClient interface {
	Recv() (*SmartNICEvent, error)
	grpc1.ClientStream
}

type smartNICUpdatesWatchNICsClient struct {
	grpc1.ClientStream
}

func (x *smartNICUpdatesWatchNICsClient) Recv() (*SmartNICEvent, error) {
	m := new(SmartNICEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SmartNICUpdates service

type SmartNICUpdatesServer interface {
	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	UpdateNIC(context.Context, *UpdateNICRequest) (*UpdateNICResponse, error)
	// Watcher for SmartNIC object updates
	WatchNICs(*api.ObjectMeta, SmartNICUpdates_WatchNICsServer) error
}

func RegisterSmartNICUpdatesServer(s *grpc1.Server, srv SmartNICUpdatesServer) {
	s.RegisterService(&_SmartNICUpdates_serviceDesc, srv)
}

func _SmartNICUpdates_UpdateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartNICUpdatesServer).UpdateNIC(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SmartNICUpdates/UpdateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartNICUpdatesServer).UpdateNIC(ctx, req.(*UpdateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartNICUpdates_WatchNICs_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmartNICUpdatesServer).WatchNICs(m, &smartNICUpdatesWatchNICsServer{stream})
}

type SmartNICUpdates_WatchNICsServer interface {
	Send(*SmartNICEvent) error
	grpc1.ServerStream
}

type smartNICUpdatesWatchNICsServer struct {
	grpc1.ServerStream
}

func (x *smartNICUpdatesWatchNICsServer) Send(m *SmartNICEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _SmartNICUpdates_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.SmartNICUpdates",
	HandlerType: (*SmartNICUpdatesServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "UpdateNIC",
			Handler:    _SmartNICUpdates_UpdateNIC_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "WatchNICs",
			Handler:       _SmartNICUpdates_WatchNICs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "member.proto",
}

// Client API for NodeHeartbeat service

type NodeHeartbeatClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc1.CallOption) (*HeartbeatResponse, error)
}

type nodeHeartbeatClient struct {
	cc *grpc1.ClientConn
}

func NewNodeHeartbeatClient(cc *grpc1.ClientConn) NodeHeartbeatClient {
	return &nodeHeartbeatClient{cc}
}

func (c *nodeHeartbeatClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc1.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc1.Invoke(ctx, "/grpc.NodeHeartbeat/Heartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeHeartbeat service

type NodeHeartbeatServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterNodeHeartbeatServer(s *grpc1.Server, srv NodeHeartbeatServer) {
	s.RegisterService(&_NodeHeartbeat_serviceDesc, srv)
}

func _NodeHeartbeat_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHeartbeatServer).Heartbeat(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NodeHeartbeat/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHeartbeatServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeHeartbeat_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.NodeHeartbeat",
	HandlerType: (*NodeHeartbeatServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _NodeHeartbeat_Heartbeat_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "member.proto",
}

func (m *ClusterPreJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.TransportKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.TransportKey)))
		i += copy(dAtA[i:], m.TransportKey)
	}
	if len(m.NtpServers) > 0 {
		for _, s := range m.NtpServers {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ClusterPreJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SwVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.SwVersion)))
		i += copy(dAtA[i:], m.SwVersion)
	}
	if len(m.TransportKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.TransportKey)))
		i += copy(dAtA[i:], m.TransportKey)
	}
	return i, nil
}

func (m *QuorumMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *QuorumConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.QuorumMembers) > 0 {
		for _, msg := range m.QuorumMembers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMember(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Existing {
		dAtA[i] = 0x18
		i++
		if m.Existing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CertMgrBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertMgrBundle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WrappedCaKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.WrappedCaKey)))
		i += copy(dAtA[i:], m.WrappedCaKey)
	}
	if m.CaTrustChain != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.CaTrustChain.Size()))
		n1, err := m.CaTrustChain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TrustRoots != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.TrustRoots.Size()))
		n2, err := m.TrustRoots.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ClusterJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if len(m.QuorumNodes) > 0 {
		for _, s := range m.QuorumNodes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.QuorumConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.QuorumConfig.Size()))
		n3, err := m.QuorumConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.CertMgrBundle != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.CertMgrBundle.Size()))
		n4, err := m.CertMgrBundle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ClusterJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterDisjoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDisjoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterDisjoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDisjoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NICAdmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NICAdmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMember(dAtA, i, uint64(m.Nic.Size()))
	n5, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Certs) > 0 {
		for _, b := range m.Certs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMember(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ClusterCertSignRequest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.ClusterCertSignRequest)))
		i += copy(dAtA[i:], m.ClusterCertSignRequest)
	}
	return i, nil
}

func (m *AuthenticationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Challenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	if len(m.TrustChain) > 0 {
		for _, b := range m.TrustChain {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMember(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *AuthenticationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClaimantRandom) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.ClaimantRandom)))
		i += copy(dAtA[i:], m.ClaimantRandom)
	}
	if len(m.ChallengeResponse) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.ChallengeResponse)))
		i += copy(dAtA[i:], m.ChallengeResponse)
	}
	return i, nil
}

func (m *NICAdmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NICAdmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Phase) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Phase)))
		i += copy(dAtA[i:], m.Phase)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.ClusterCert != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.ClusterCert.Size()))
		n6, err := m.ClusterCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.CaTrustChain != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.CaTrustChain.Size()))
		n7, err := m.CaTrustChain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.TrustRoots != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.TrustRoots.Size()))
		n8, err := m.TrustRoots.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.RolloutVersion) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.RolloutVersion)))
		i += copy(dAtA[i:], m.RolloutVersion)
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RegisterNICRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterNICRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdmissionRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.AdmissionRequest.Size()))
		n9, err := m.AdmissionRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.AuthenticationResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.AuthenticationResponse.Size()))
		n10, err := m.AuthenticationResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *RegisterNICResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterNICResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthenticationRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.AuthenticationRequest.Size()))
		n11, err := m.AuthenticationRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.AdmissionResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.AdmissionResponse.Size()))
		n12, err := m.AdmissionResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UpdateNICRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNICRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMember(dAtA, i, uint64(m.Nic.Size()))
	n13, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *UpdateNICResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNICResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SmartNICEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartNICEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintMember(dAtA, i, uint64(m.Nic.Size()))
	n14, err := m.Nic.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *HeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	return i, nil
}

func (m *HeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMember(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterPreJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.TransportKey)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.NtpServers) > 0 {
		for _, s := range m.NtpServers {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	return n
}

func (m *ClusterPreJoinResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.SwVersion)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.TransportKey)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *QuorumMember) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMember(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	return n
}

func (m *QuorumConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.QuorumMembers) > 0 {
		for _, e := range m.QuorumMembers {
			l = e.Size()
			n += 1 + l + sovMember(uint64(l))
		}
	}
	if m.Existing {
		n += 2
	}
	return n
}

func (m *CertMgrBundle) Size() (n int) {
	var l int
	_ = l
	l = len(m.WrappedCaKey)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.CaTrustChain != nil {
		l = m.CaTrustChain.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.TrustRoots != nil {
		l = m.TrustRoots.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *ClusterJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.QuorumNodes) > 0 {
		for _, s := range m.QuorumNodes {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	if m.QuorumConfig != nil {
		l = m.QuorumConfig.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.CertMgrBundle != nil {
		l = m.CertMgrBundle.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *ClusterJoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClusterDisjoinReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClusterDisjoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NICAdmissionRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Nic.Size()
	n += 1 + l + sovMember(uint64(l))
	if len(m.Certs) > 0 {
		for _, b := range m.Certs {
			l = len(b)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	l = len(m.ClusterCertSignRequest)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *AuthenticationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.TrustChain) > 0 {
		for _, b := range m.TrustChain {
			l = len(b)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	return n
}

func (m *AuthenticationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClaimantRandom)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.ChallengeResponse)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *NICAdmissionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.ClusterCert != nil {
		l = m.ClusterCert.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.CaTrustChain != nil {
		l = m.CaTrustChain.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.TrustRoots != nil {
		l = m.TrustRoots.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.RolloutVersion)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if len(m.Controllers) > 0 {
		for _, s := range m.Controllers {
			l = len(s)
			n += 1 + l + sovMember(uint64(l))
		}
	}
	return n
}

func (m *RegisterNICRequest) Size() (n int) {
	var l int
	_ = l
	if m.AdmissionRequest != nil {
		l = m.AdmissionRequest.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.AuthenticationResponse != nil {
		l = m.AuthenticationResponse.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *RegisterNICResponse) Size() (n int) {
	var l int
	_ = l
	if m.AuthenticationRequest != nil {
		l = m.AuthenticationRequest.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	if m.AdmissionResponse != nil {
		l = m.AdmissionResponse.Size()
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *UpdateNICRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Nic.Size()
	n += 1 + l + sovMember(uint64(l))
	return n
}

func (m *UpdateNICResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SmartNICEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovMember(uint64(m.EventType))
	}
	l = m.Nic.Size()
	n += 1 + l + sovMember(uint64(l))
	return n
}

func (m *HeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	return n
}

func (m *HeartbeatResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovMember(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMember(x uint64) (n int) {
	return sovMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterPreJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportKey = append(m.TransportKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TransportKey == nil {
				m.TransportKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtpServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NtpServers = append(m.NtpServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterPreJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportKey = append(m.TransportKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TransportKey == nil {
				m.TransportKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerUrls = append(m.PeerUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUrls = append(m.ClientUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumMembers = append(m.QuorumMembers, &QuorumMember{})
			if err := m.QuorumMembers[len(m.QuorumMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Existing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Existing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertMgrBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertMgrBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertMgrBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrappedCaKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrappedCaKey = append(m.WrappedCaKey[:0], dAtA[iNdEx:postIndex]...)
			if m.WrappedCaKey == nil {
				m.WrappedCaKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaTrustChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaTrustChain == nil {
				m.CaTrustChain = &certapi.CaTrustChain{}
			}
			if err := m.CaTrustChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustRoots == nil {
				m.TrustRoots = &certapi.TrustRoots{}
			}
			if err := m.TrustRoots.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumNodes = append(m.QuorumNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuorumConfig == nil {
				m.QuorumConfig = &QuorumConfig{}
			}
			if err := m.QuorumConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTPServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTPServers = append(m.NTPServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertMgrBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertMgrBundle == nil {
				m.CertMgrBundle = &CertMgrBundle{}
			}
			if err := m.CertMgrBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDisjoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDisjoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDisjoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDisjoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDisjoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDisjoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NICAdmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NICAdmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NICAdmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certs = append(m.Certs, make([]byte, postIndex-iNdEx))
			copy(m.Certs[len(m.Certs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCertSignRequest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterCertSignRequest = append(m.ClusterCertSignRequest[:0], dAtA[iNdEx:postIndex]...)
			if m.ClusterCertSignRequest == nil {
				m.ClusterCertSignRequest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustChain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustChain = append(m.TrustChain, make([]byte, postIndex-iNdEx))
			copy(m.TrustChain[len(m.TrustChain)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimantRandom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimantRandom = append(m.ClaimantRandom[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimantRandom == nil {
				m.ClaimantRandom = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeResponse = append(m.ChallengeResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.ChallengeResponse == nil {
				m.ChallengeResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NICAdmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NICAdmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NICAdmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterCert == nil {
				m.ClusterCert = &certapi.CertificateSignResp{}
			}
			if err := m.ClusterCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaTrustChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CaTrustChain == nil {
				m.CaTrustChain = &certapi.CaTrustChain{}
			}
			if err := m.CaTrustChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustRoots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrustRoots == nil {
				m.TrustRoots = &certapi.TrustRoots{}
			}
			if err := m.TrustRoots.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolloutVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RolloutVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controllers = append(m.Controllers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterNICRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterNICRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterNICRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdmissionRequest == nil {
				m.AdmissionRequest = &NICAdmissionRequest{}
			}
			if err := m.AdmissionRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationResponse == nil {
				m.AuthenticationResponse = &AuthenticationResponse{}
			}
			if err := m.AuthenticationResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterNICResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterNICResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterNICResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationRequest == nil {
				m.AuthenticationRequest = &AuthenticationRequest{}
			}
			if err := m.AuthenticationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdmissionResponse == nil {
				m.AdmissionResponse = &NICAdmissionResponse{}
			}
			if err := m.AdmissionResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNICRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNICRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNICRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNICResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNICResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNICResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartNICEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartNICEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartNICEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMember
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMember
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMember(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMember = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMember   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("member.proto", fileDescriptorMember) }

var fileDescriptorMember = []byte{
	// 1435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0x1b, 0xc7,
	0x12, 0xd5, 0x50, 0x4f, 0x16, 0xa9, 0x57, 0xeb, 0x35, 0xa6, 0x75, 0x35, 0xba, 0x73, 0x6f, 0x00,
	0x25, 0x70, 0x48, 0x81, 0x86, 0x91, 0x18, 0x01, 0x0c, 0x98, 0x94, 0x01, 0x33, 0x81, 0x68, 0x67,
	0x2c, 0xc5, 0x08, 0x60, 0x40, 0x69, 0x0e, 0xdb, 0x54, 0x1b, 0xe4, 0xcc, 0x68, 0xba, 0x47, 0x8a,
	0xf3, 0x05, 0xfe, 0x8a, 0x20, 0x40, 0x16, 0x59, 0xe5, 0x1f, 0xb2, 0xf4, 0x32, 0x5f, 0x40, 0x04,
	0x5e, 0x72, 0x93, 0x45, 0x16, 0xc9, 0x32, 0xe8, 0xc7, 0x90, 0x3d, 0x7c, 0x64, 0x13, 0xef, 0xd8,
	0xa7, 0xab, 0xab, 0xaa, 0xab, 0x4e, 0x9d, 0x69, 0x42, 0xb1, 0x47, 0x7a, 0x2d, 0x12, 0x97, 0xa3,
	0x38, 0xe4, 0x21, 0x5a, 0xe8, 0xc4, 0x91, 0x5f, 0xda, 0xef, 0x84, 0x61, 0xa7, 0x4b, 0x2a, 0x38,
	0xa2, 0x15, 0x1c, 0x04, 0x21, 0xc7, 0x9c, 0x86, 0x01, 0x53, 0x36, 0xa5, 0x8f, 0x3b, 0x94, 0x5f,
	0x26, 0xad, 0xb2, 0x1f, 0xf6, 0x2a, 0x9d, 0xb0, 0x13, 0x56, 0x24, 0xdc, 0x4a, 0x5e, 0xca, 0x95,
	0x5c, 0xc8, 0x5f, 0xda, 0xfc, 0xd8, 0x30, 0x8f, 0x48, 0xc0, 0x70, 0xd0, 0x0e, 0x2b, 0xec, 0x46,
	0x3a, 0x97, 0x16, 0xac, 0xc2, 0x7a, 0x38, 0xe6, 0x01, 0xf5, 0xf5, 0x89, 0x0f, 0xfe, 0xe1, 0x44,
	0x8f, 0x70, 0xac, 0xcd, 0xce, 0x67, 0x98, 0x5d, 0x93, 0x80, 0xfa, 0xa4, 0xe2, 0xf7, 0xda, 0x15,
	0x71, 0x9b, 0x0a, 0x23, 0xf1, 0x35, 0x89, 0x2b, 0x3e, 0x89, 0x39, 0x7d, 0x49, 0x7d, 0xcc, 0x09,
	0x93, 0x0b, 0xe1, 0xce, 0x04, 0x95, 0x5b, 0xf7, 0x7b, 0x0b, 0x36, 0xeb, 0xdd, 0x84, 0x71, 0x12,
	0x3f, 0x8d, 0xc9, 0xe7, 0x21, 0x0d, 0x3c, 0x72, 0x85, 0x10, 0x2c, 0x04, 0xb8, 0x47, 0x6c, 0xeb,
	0xd0, 0x3a, 0xca, 0x7b, 0xf2, 0xb7, 0xc0, 0x92, 0x84, 0xb6, 0xed, 0x9c, 0xc2, 0xc4, 0x6f, 0xf4,
	0x1f, 0x80, 0x6b, 0x1a, 0xf3, 0x04, 0x77, 0x2f, 0x68, 0x64, 0xcf, 0xcb, 0x9d, 0xbc, 0x46, 0x1a,
	0x11, 0x72, 0xa1, 0xc8, 0x63, 0x1c, 0xb0, 0x28, 0x8c, 0xf9, 0x17, 0xe4, 0xb5, 0xbd, 0x70, 0x68,
	0x1d, 0x15, 0xbd, 0x0c, 0x86, 0x0e, 0x00, 0x02, 0x1e, 0x3d, 0x93, 0x59, 0x33, 0x7b, 0xf1, 0x70,
	0xfe, 0x28, 0xef, 0x19, 0x88, 0xfb, 0x1c, 0xd0, 0x78, 0x7e, 0x2c, 0x12, 0x81, 0xd9, 0xcd, 0x85,
	0x30, 0xa0, 0x61, 0xa0, 0xd3, 0xcc, 0xb3, 0x9b, 0xaf, 0x14, 0x30, 0x11, 0x38, 0x37, 0x19, 0xd8,
	0x8d, 0xa0, 0xf8, 0x65, 0x12, 0xc6, 0x49, 0xef, 0x54, 0x52, 0x02, 0xad, 0x41, 0x8e, 0xb6, 0xa5,
	0xab, 0x05, 0x2f, 0x47, 0xdb, 0xc3, 0x1a, 0xe4, 0x8c, 0x1a, 0xdc, 0x86, 0x7c, 0x44, 0x48, 0x7c,
	0x91, 0xc4, 0x5d, 0x66, 0xcf, 0xcb, 0x5c, 0x57, 0x04, 0x70, 0x1e, 0x77, 0x19, 0x72, 0xa0, 0xe0,
	0x77, 0x29, 0x09, 0xb8, 0xda, 0x5e, 0x50, 0x57, 0x51, 0x90, 0x30, 0x70, 0x93, 0x34, 0x62, 0x3d,
	0x0c, 0x5e, 0xd2, 0x8e, 0x11, 0x31, 0x2f, 0x23, 0xde, 0x87, 0xb5, 0x2b, 0xb9, 0x7f, 0xa1, 0x58,
	0xca, 0xec, 0xdc, 0xe1, 0xfc, 0x51, 0xa1, 0x8a, 0xca, 0xa2, 0xb3, 0x65, 0x33, 0x5b, 0x6f, 0xf5,
	0xca, 0x58, 0x31, 0x54, 0x82, 0x15, 0xf2, 0x2d, 0x65, 0x9c, 0x06, 0x1d, 0xd9, 0x86, 0x15, 0x6f,
	0xb8, 0x76, 0x7f, 0xb4, 0x60, 0xb5, 0x4e, 0x62, 0x7e, 0xda, 0x89, 0x6b, 0x49, 0xd0, 0xee, 0x12,
	0x51, 0x9e, 0x9b, 0x18, 0x47, 0x11, 0x69, 0xd7, 0xb1, 0x28, 0x8f, 0xa5, 0xca, 0x63, 0x62, 0xe8,
	0x3e, 0x14, 0x7d, 0x7c, 0x16, 0x27, 0x8c, 0xd7, 0x2f, 0x31, 0x0d, 0x64, 0x19, 0x0a, 0xd5, 0x9d,
	0xb2, 0xe6, 0x52, 0xb9, 0x6e, 0x6c, 0x7a, 0x19, 0x53, 0x74, 0x17, 0x80, 0x8b, 0x95, 0x17, 0x86,
	0x9c, 0xc9, 0x74, 0x0a, 0xd5, 0xad, 0xe1, 0xc1, 0xb3, 0xe1, 0x96, 0x67, 0x98, 0xb9, 0x3f, 0xe5,
	0x60, 0x4d, 0x37, 0xfa, 0x3d, 0xb3, 0xf0, 0xbf, 0x50, 0xd4, 0x65, 0x0d, 0xc2, 0x36, 0x49, 0x1b,
	0x53, 0x50, 0x58, 0x53, 0x40, 0xe8, 0x13, 0xd0, 0xf5, 0xbc, 0xf0, 0x65, 0x6b, 0xec, 0x45, 0x99,
	0x74, 0xa6, 0xf0, 0xaa, 0x69, 0x9e, 0xf6, 0xa5, 0x5b, 0x78, 0x00, 0xd0, 0x3c, 0x7b, 0x9a, 0xb2,
	0x77, 0x49, 0xb5, 0x7c, 0x84, 0xa0, 0x3d, 0x58, 0x16, 0x41, 0x2f, 0x68, 0xdb, 0x5e, 0x96, 0x79,
	0x2d, 0x89, 0x65, 0x43, 0xf4, 0x7a, 0xd5, 0x37, 0x7b, 0x62, 0xaf, 0xe8, 0x32, 0xc9, 0x88, 0x99,
	0x76, 0x79, 0x59, 0x4b, 0x77, 0x13, 0xd6, 0x33, 0x85, 0x62, 0x91, 0xbb, 0x35, 0x1c, 0xe2, 0x13,
	0xca, 0x5e, 0xa9, 0xf2, 0xb9, 0xdb, 0xc3, 0xc9, 0x19, 0x82, 0x2c, 0x72, 0x7f, 0xb7, 0x60, 0xab,
	0xd9, 0xa8, 0x3f, 0x6c, 0xf7, 0x28, 0x13, 0xb3, 0xe2, 0x91, 0xab, 0x84, 0x30, 0x8e, 0x1e, 0xc3,
	0x7c, 0x93, 0xfa, 0xb2, 0xd6, 0x85, 0xaa, 0x53, 0xf6, 0xd5, 0xc9, 0xf2, 0x09, 0x65, 0x3c, 0xa6,
	0xad, 0x84, 0x93, 0xb6, 0xb8, 0x13, 0xf5, 0x49, 0x1d, 0xc7, 0xed, 0xda, 0xce, 0xdb, 0xbe, 0x33,
	0x37, 0xe8, 0x3b, 0xab, 0x01, 0xf5, 0xef, 0x84, 0x3d, 0xca, 0x49, 0x2f, 0xe2, 0xaf, 0x3d, 0xe1,
	0x02, 0x1d, 0xc3, 0xa2, 0xc8, 0x5f, 0xb1, 0xb7, 0x58, 0x2b, 0x0d, 0xfa, 0xce, 0xae, 0xa9, 0x3c,
	0x86, 0xbd, 0x32, 0x44, 0x2f, 0x60, 0x57, 0x67, 0x2a, 0xd6, 0xcf, 0x68, 0x27, 0xcd, 0x4a, 0x36,
	0xb3, 0x58, 0xfb, 0xff, 0xa0, 0xef, 0x1c, 0xfa, 0x53, 0x2d, 0x0c, 0x67, 0x33, 0x7c, 0xb8, 0x6f,
	0x2c, 0xd8, 0x79, 0x98, 0xf0, 0x4b, 0x12, 0x70, 0x91, 0x80, 0x71, 0xe7, 0x7b, 0x90, 0xaf, 0x5f,
	0xe2, 0x6e, 0x97, 0x04, 0x1d, 0xc5, 0xb2, 0x62, 0x6d, 0x6f, 0xd0, 0x77, 0xb6, 0xfc, 0x14, 0x34,
	0xbc, 0x8f, 0x2c, 0xd1, 0xa7, 0x00, 0x99, 0xc1, 0x10, 0xb7, 0xb4, 0x07, 0x7d, 0x67, 0x9b, 0x0f,
	0x51, 0xe3, 0xa0, 0x61, 0xeb, 0xfe, 0x6c, 0xc1, 0xee, 0x78, 0x2a, 0x2c, 0x0a, 0x03, 0x46, 0xd0,
	0x89, 0xa0, 0x3f, 0xa6, 0x3d, 0x1c, 0x70, 0x4f, 0x68, 0x7b, 0x4f, 0x27, 0xb4, 0x3f, 0xe8, 0x3b,
	0xb6, 0x9f, 0xd9, 0x31, 0x9c, 0x8f, 0x9d, 0x41, 0xa7, 0xb0, 0x39, 0xcc, 0x33, 0x75, 0xad, 0xd4,
	0xaf, 0xe6, 0x0c, 0xfa, 0xce, 0x6d, 0x7f, 0x7c, 0xd3, 0xf0, 0x35, 0x79, 0xd2, 0xfd, 0x63, 0x1e,
	0xb6, 0xb3, 0x64, 0xd1, 0xd9, 0x7e, 0x08, 0x8b, 0x4f, 0x2f, 0x31, 0xd3, 0xb3, 0x59, 0xdb, 0x1a,
	0xf4, 0x9d, 0xf5, 0x48, 0x00, 0x66, 0x73, 0xa5, 0x05, 0xba, 0x03, 0x4b, 0x1e, 0xc1, 0x2c, 0x54,
	0x12, 0x92, 0xaf, 0x6d, 0x0f, 0xfa, 0xce, 0x46, 0x2c, 0x11, 0xc3, 0x58, 0xdb, 0xa0, 0xaf, 0xa1,
	0x60, 0xb4, 0x51, 0x8b, 0xc7, 0xfe, 0x48, 0x75, 0x46, 0x3c, 0x52, 0x2d, 0x66, 0x51, 0xed, 0xd6,
	0xa0, 0xef, 0xec, 0x18, 0xec, 0x30, 0xbc, 0x9a, 0xbe, 0xd0, 0x39, 0x14, 0x4d, 0xd1, 0x92, 0x5f,
	0xa3, 0x59, 0x8a, 0xa6, 0x59, 0x6b, 0x20, 0x86, 0xd7, 0x8c, 0x1b, 0x74, 0xaa, 0xd9, 0xa0, 0xd4,
	0x6e, 0x71, 0xa6, 0xda, 0x19, 0x14, 0x91, 0xeb, 0x09, 0x8a, 0x48, 0x54, 0xf0, 0xc0, 0x0b, 0xbb,
	0xdd, 0x30, 0xe1, 0xfa, 0x63, 0x66, 0x2f, 0xc9, 0xb2, 0x49, 0x1e, 0xc4, 0x99, 0x1d, 0x93, 0x07,
	0xd9, 0x33, 0xe8, 0x33, 0x28, 0xd4, 0xc3, 0x80, 0x0b, 0x7b, 0x21, 0x4c, 0xcb, 0x42, 0x98, 0x74,
	0xa1, 0x46, 0x70, 0xa6, 0x50, 0x23, 0xd8, 0xfd, 0xd3, 0x02, 0xe4, 0x91, 0x0e, 0x15, 0x95, 0x6b,
	0x36, 0xea, 0xe9, 0xb4, 0x10, 0xd8, 0x18, 0x57, 0x0d, 0x2d, 0x17, 0xb7, 0x94, 0x6a, 0x4d, 0x91,
	0x95, 0xda, 0xc1, 0xa0, 0xef, 0x94, 0xf0, 0x18, 0x6a, 0x04, 0x9e, 0x70, 0x89, 0xbe, 0x9b, 0x35,
	0x22, 0xfa, 0x13, 0xb4, 0xaf, 0x82, 0x4d, 0xb7, 0x51, 0x52, 0x81, 0xa7, 0xee, 0x99, 0x52, 0x31,
	0xfd, 0xb4, 0xfb, 0x97, 0x05, 0x5b, 0x99, 0x9b, 0x6b, 0xba, 0x5f, 0xcf, 0x50, 0x10, 0x7d, 0xff,
	0xdb, 0xd3, 0x53, 0x52, 0x15, 0xf8, 0xdf, 0xa0, 0xef, 0x38, 0x78, 0xda, 0x96, 0x91, 0xd0, 0x0c,
	0x81, 0xa2, 0xb0, 0x39, 0x31, 0x7b, 0xba, 0x0c, 0xa5, 0x69, 0x35, 0xd7, 0x45, 0x90, 0xa3, 0x8e,
	0xc7, 0x61, 0x73, 0xd4, 0x27, 0xce, 0xb8, 0x2f, 0x60, 0xe3, 0x3c, 0x6a, 0x63, 0x4e, 0x8c, 0x8e,
	0xbf, 0xb7, 0x6f, 0x82, 0xf8, 0x40, 0x19, 0xde, 0x75, 0xc8, 0x1f, 0x2c, 0x58, 0x7d, 0x26, 0x1e,
	0xc3, 0xcd, 0x46, 0xfd, 0xd1, 0x35, 0x09, 0x38, 0x7a, 0x04, 0x79, 0xf9, 0xe3, 0xec, 0x75, 0xa4,
	0xa4, 0x65, 0xad, 0xba, 0x56, 0x16, 0x63, 0x34, 0x44, 0x95, 0x40, 0x93, 0x74, 0x69, 0x0a, 0xf4,
	0xd0, 0x26, 0xcd, 0x3b, 0xf7, 0xef, 0xf3, 0xfe, 0x08, 0x36, 0x1e, 0x13, 0x1c, 0xf3, 0x16, 0xc1,
	0x3c, 0xad, 0xca, 0x2e, 0x2c, 0x89, 0x57, 0x43, 0xe3, 0x44, 0x3f, 0x4c, 0xf4, 0x4a, 0xdc, 0xd1,
	0xb0, 0x55, 0x77, 0xac, 0xfe, 0x62, 0xc1, 0xb2, 0x16, 0x21, 0xf4, 0x00, 0x96, 0xf5, 0x1b, 0x16,
	0xed, 0xe9, 0xef, 0xfc, 0xf8, 0xcb, 0xbb, 0x64, 0x4f, 0xdf, 0x60, 0x91, 0x3b, 0x87, 0xee, 0xc1,
	0x82, 0x3c, 0xbc, 0x9d, 0xb1, 0x49, 0x4f, 0xee, 0x4c, 0x41, 0xe5, 0xb1, 0x07, 0xb0, 0xac, 0x1f,
	0x00, 0x63, 0x61, 0x47, 0x6f, 0x85, 0xb1, 0xb0, 0xe6, 0x7b, 0x61, 0xae, 0xfa, 0x0d, 0x6c, 0xa7,
	0x5d, 0x52, 0xb3, 0x11, 0x4b, 0x8e, 0xa2, 0xc7, 0x50, 0x30, 0x66, 0x05, 0x69, 0x17, 0x93, 0xc2,
	0x51, 0xba, 0x35, 0x65, 0x47, 0x53, 0x60, 0xee, 0xc8, 0x3a, 0xb6, 0xaa, 0x6f, 0x2c, 0x58, 0x4f,
	0x43, 0x28, 0x9a, 0x30, 0xf4, 0x00, 0xf2, 0x43, 0xc6, 0xa0, 0x5d, 0xe5, 0x61, 0x9c, 0xa0, 0xa5,
	0xbd, 0x09, 0x3c, 0xf5, 0x2b, 0xbe, 0xed, 0xcf, 0x31, 0xf7, 0x2f, 0x9b, 0x8d, 0x3a, 0x43, 0xeb,
	0x92, 0x44, 0x4f, 0x5a, 0xaf, 0x88, 0xcf, 0x4f, 0x09, 0xc7, 0x25, 0xfd, 0xce, 0xca, 0xb0, 0xcf,
	0x9d, 0x3b, 0xb6, 0xaa, 0x4f, 0x60, 0x55, 0xb4, 0x73, 0xd8, 0x48, 0x91, 0xc7, 0x68, 0xa1, 0xf3,
	0x18, 0xa7, 0x44, 0x9a, 0xc7, 0x44, 0xfb, 0xdd, 0xb9, 0x5a, 0xf1, 0xed, 0xbb, 0x03, 0xeb, 0xd7,
	0x77, 0x07, 0xd6, 0x6f, 0xef, 0x0e, 0xac, 0xd6, 0x92, 0xfc, 0xd7, 0x75, 0xf7, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0xdf, 0x59, 0x4c, 0x88, 0x0e, 0x00, 0x00,
}
