syntax = "proto3";

package grpc;

// Mandatory imports.
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/protos/cmd.proto";
import "github.com/pensando/sw/api/meta.proto";

// --------------------------------- C L U S T E R -------------------------------------------------
service Cluster {
	rpc PreJoin (ClusterPreJoinReq)  returns (ClusterPreJoinResp) {};
	rpc Join (ClusterJoinReq)  returns (ClusterJoinResp) {};
	rpc Disjoin (ClusterDisjoinReq)  returns (ClusterDisjoinResp) {};
}

// Cluster PreJoin request
message ClusterPreJoinReq {
	string name = 1;
	string uuid = 2;
	string virtual_ip = 3;
}

// Cluster PreJoin response
message ClusterPreJoinResp {
	string sw_version = 1;
}

// Quorum member
message QuorumMember {
	uint64 id = 1;
	string name = 2;
	repeated string peer_urls = 3;
	repeated string client_urls = 4;
}

// Quorum configuration
message QuorumConfig {
	string id = 1;
	repeated QuorumMember quorum_members = 2;
}

// Cluster Join request
message ClusterJoinReq {
	string name = 1;
	string uuid = 2;
	string virtual_ip = 3;
	repeated string quorum_nodes = 4;
	QuorumConfig quorum_config = 5;
	repeated string NTPServers = 6;
	string node_id = 7;
}

// Cluster Join response
message ClusterJoinResp {

}
// Cluster Disjoin request
message ClusterDisjoinReq {
}

// Cluster Disjoin response
message ClusterDisjoinResp {
}

// --------------------------------- SmartNIC service API  -----------------------------------

// SmartNIC service API
// NMD on Naples will be the client of this API
service SmartNIC {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	rpc RegisterNIC (RegisterNICRequest) returns (RegisterNICResponse) {};

	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	rpc UpdateNIC (UpdateNICRequest) returns (UpdateNICResponse) {};

	// Watcher for SmartNIC object updates
	rpc WatchNICs (api.ObjectMeta) returns (stream SmartNICEvent) {};

}

// Register NIC request
message RegisterNICRequest {

	// SmartNIC object
	cmd.SmartNIC Nic    = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];

	// Factory Certificate
	bytes Cert          = 2 [(gogoproto.jsontag) = "cert,omitempty"];
}

// Register NIC response
message RegisterNICResponse {

	// Admission Status of NIC - string enum of cmd.SmartNICSpec.SmartNICPhase
	string Phase = 1 [(gogoproto.jsontag) = "phase,omitempty"];

	// Reason is an optional field. It is populated with reason
	// when there is an Admisison failure
	string Reason = 2 [(gogoproto.jsontag) = "reason,omitempty"];
}

// Update NIC request
message UpdateNICRequest {

	// SmartNIC object
	cmd.SmartNIC Nic = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];
}

// Update NIC response
message UpdateNICResponse {

	// SmartNIC object
	cmd.SmartNIC Nic = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "nic,omitempty"];
}

// SmartNIC watch event
message SmartNICEvent {
	api.EventType EventType = 1 [(gogoproto.jsontag) = "eventType,omitempty"];
	cmd.SmartNIC  Nic       = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];
}
