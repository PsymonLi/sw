syntax = "proto3";

package grpc;

// Mandatory imports.
import "google/api/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/protos/cmd.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/venice/cmd/grpc/server/certificates/certapi/certificates.proto";

// --------------------------------- C L U S T E R -------------------------------------------------
service Cluster {
	rpc PreJoin (ClusterPreJoinReq)  returns (ClusterPreJoinResp) {};
	rpc Join (ClusterJoinReq)  returns (ClusterJoinResp) {};
	rpc Disjoin (ClusterDisjoinReq)  returns (ClusterDisjoinResp) {};
}

// A Venice cluster runs a service to issue X509 certificates to controllers and agents for mTLS.
// A node that joins the cluster bootstraps its CA with a signing key shared with other nodes.
// The signing key is transported in wrapped form from the node that initiates cluster formation
// to the node that is asked to join using the Elliptic Curve Diffie-Hellman (ECDH) protocol.
//
// This is the sequence of steps performed by initiation and joining node to transport the CA signing key:
// 1. Initiator generates EC key pair (Public1, Private1) and sends Public1 to joining node
// 2. Joining node generates an EC key pair (Public2, Private2) and sends Public2 to initiator node
// 3. Initiator node computes an AES key as AESKey = Private1 + Public2
// 4. Joining node computes the same AES key as AESKey = Private2 + Public1
// 5. Initiator node sends the signing key to joining node encrypted with AESKey
// 6. Joining node decrypts the signing key using AESKey and bootstraps the CA.

// Cluster PreJoin request
message ClusterPreJoinReq {
	string name = 1;
	string uuid = 2;
	string virtual_ip = 3;
	bytes transportKey = 4; // Initiator public key (step 1 in CA key transport sequence)
}

// Cluster PreJoin response
message ClusterPreJoinResp {
	string sw_version = 1;
	bytes transportKey = 2; // Joining node public key (step 2 in CA key transport sequence)
}

// Quorum member
message QuorumMember {
	uint64 id = 1;
	string name = 2;
	repeated string peer_urls = 3;
	repeated string client_urls = 4;
}

// Quorum configuration
message QuorumConfig {
	string id = 1;
	repeated QuorumMember quorum_members = 2;
}

// CA Bundle
message CertMgrBundle {
	bytes wrappedCaKey = 1;
	repeated certapi.Certificate caTrustChain = 2;
	repeated certapi.Certificate trustRoots = 3;
}

// Cluster Join request
message ClusterJoinReq {
	string name = 1;
	string uuid = 2;
	string virtual_ip = 3;
	repeated string quorum_nodes = 4;
	QuorumConfig quorum_config = 5;
	repeated string NTPServers = 6;
	string node_id = 7;
	CertMgrBundle certMgrBundle = 8; // Bundle containing the CA signing key and related certificates (step 5)
}

// Cluster Join response
message ClusterJoinResp {

}
// Cluster Disjoin request
message ClusterDisjoinReq {
}

// Cluster Disjoin response
message ClusterDisjoinResp {
}

// --------------------------------- SmartNIC service APIs  -----------------------------------

// SmartNIC service APIs
// NMD on Naples will be the client of this APIs

service SmartNICRegistration {
	// Register NIC
	// - registers the NIC when the mode is switched from classic
	//   to managed mode
	rpc RegisterNIC (RegisterNICRequest) returns (RegisterNICResponse) {};
}

service SmartNICUpdates {
	// Update NIC
	// - updates the SmartNIC and associcated port attributes, status
	rpc UpdateNIC (UpdateNICRequest) returns (UpdateNICResponse) {};

	// Watcher for SmartNIC object updates
	rpc WatchNICs (api.ObjectMeta) returns (stream SmartNICEvent) {};

}

// Register NIC request
message RegisterNICRequest {

	// SmartNIC object
	cluster.SmartNIC Nic    = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];

	// Factory Certificate
	bytes Cert          = 2 [(gogoproto.jsontag) = "cert,omitempty"];
}

// Register NIC response
message RegisterNICResponse {

	// Admission Status of NIC - string enum of cluster.SmartNICSpec.SmartNICPhase
	string Phase = 1 [(gogoproto.jsontag) = "phase,omitempty"];

	// Reason is an optional field. It is populated with reason
	// when there is an Admisison failure
	string Reason = 2 [(gogoproto.jsontag) = "reason,omitempty"];
}

// Update NIC request
message UpdateNICRequest {

	// SmartNIC object
	cluster.SmartNIC Nic = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];
}

// Update NIC response
message UpdateNICResponse {

	// SmartNIC object
	cluster.SmartNIC Nic = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "nic,omitempty"];
}

// SmartNIC watch event
message SmartNICEvent {
	api.EventType EventType = 1 [(gogoproto.jsontag) = "eventType,omitempty"];
	cluster.SmartNIC  Nic       = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "nic,omitempty"];
}
