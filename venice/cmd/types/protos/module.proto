syntax = "proto3";

package types;
import "github.com/pensando/sw/api/meta.proto";
import "github.com/pensando/sw/api/common.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// ModuleAPI is used to get list of modules or a module in a Venice cluster.
service ModuleAPI {
    // List all Modules
    rpc ListModules (api.Empty) returns (ModuleList) {}

    // Get a Module
    rpc GetModule (api.ObjectMeta) returns (Module) {}
}

// ModuleSpec contains the configuration for a module that runs in a Venice cluster.
// Each module can consist of multiple processes (or submodules) that are scheduled
// together. Each submodule can support one or more services. Each service runs at
// a port.
message ModuleSpec {
    // ModuleType contains the type of module.
    enum ModuleType {
        // Singleton module type runs at the leader node.
        Singleton = 0;

        // DaemonSet module type runs on all controller nodes.
        DaemonSet = 1;

        // Deployment module type runs NumCopies number of instances.
        Deployment = 2;

        // ReplicaSet are created for each deployment with the desired number of replicas requested.
        ReplicaSet = 3;

        // Job(s) are created for each CrobJob deployment.
        Job        = 4;
    }

    // Type contains the type of the module.
    ModuleType Type = 1;

    // NumCopies identifies the number of instances to run, for example with
    // Deployment.
    uint32 NumCopies = 2;

    // Submodule contains the information about a single process in a module.
    message Submodule {
        // Name identifies the submodule.
        string Name = 1;

        // Image identifies the image used to run this submodule.
        string Image = 2;

        // Service defines the attributes of a service supported by this module.
        message Service {
            // Name specifies the name of the service.
            string Name = 1;

            // Port specifies the port where the service runs.
            uint32 Port = 2;
        }

        // Services contain the list of services supported by the submodule.
        repeated Service Services = 3[(gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

        // Privileged specifies whether this is a privileged submodule.
        bool Privileged = 4;

        // Args specify the arguments for the submodule.
        repeated string Args = 5;

        // HTTPGetAction describes an action based on HTTP Get requests.
        message HTTPGetAction {
            // Path to access on the HTTP server
            string Path               = 1;
            // Port is the port number to access on the container
            int32 Port                = 2;
            // Scheme to use for connecting to the host
            string Scheme             = 3;
        }

        // ExecAction describes a "run in container" action.
        message ExecAction  {
            // Command is the command line to execute inside the container, the working directory for the
            // command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
            // not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
            // a shell, you need to explicitly call out to that shell.
            // Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string Command = 1;
        }

        // Handler defines a specific action that should be taken
        message Handler {
            // One and only one of the following should be specified.
            // Exec specifies the action to take.
            ExecAction Exec          = 1;
            // HTTPGet specifies the http request to perform.
            HTTPGetAction HTTPGet    = 2;
        }

        // Probe defines the attributes of a readiness/liveness of this container
        message Probe {
            Handler Handler           = 1;
            // InitialDelaySeconds is the number of seconds after the container has started before liveness probes are initiated
            int32 InitialDelaySeconds = 2;
            // PeriodSeconds is how often (in seconds) to perform the probe
            int32 PeriodSeconds       = 3;
        }

        // ReadinessProbe specifies URL for periodic probe of container service readiness
        Probe ReadinessProbe = 6;

        // EnvVars specify the environment variables for this submodule.
        map<string, string> EnvVars = 7;
    }

    // Submodules contains the list of submodules for this module.
    repeated Submodule Submodules = 3[(gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    // Volume defines the storage for a module. Currently, it only supports
    // local storage.
    message Volume {
        // Name contains the name of the volume.
        string Name = 1;

        // HostPath contains the host directory/file being mounted.
        string HostPath = 2;

        // MountPath contains the directory/file name of the mounted path.
        string MountPath = 3;
    }

    // Volumes contains the list of volumes for this module.
    repeated Volume Volumes = 4[(gogoproto.nullable) = false,  (gogoproto.jsontag) = ",inline"];

    // RestrictNodes specifies the nodes to constrain the module to
    string RestrictNodes = 5;

    // Disabled is set to true if the module is disabled due to licences
    bool Disabled        = 6;

    // Schedule specifies the schedule for the cron job. This field is applicable only for CronJob modules
    string Schedule      = 7;
}

message ModuleStatus {
    // Nodes contains the hosts where the module instances are running. 
    repeated string Nodes = 1;
}

// Module represents a module running in a Venice cluster.
message Module {
    api.TypeMeta T = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Spec contains the configuration of the module.
    ModuleSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];

    // Status contains the current state of the module.
    ModuleStatus Status = 4[(gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
}

// ModuleList contains list of Modules.
message ModuleList {
    api.TypeMeta T = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ListMeta L = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];

    // Items contains list of Modules.
    repeated Module Items = 3;
}
