// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evtsproxy.proto

/*
	Package evtsproxyproto is a generated protocol buffer package.

	It is generated from these files:
		evtsproxy.proto

	It has these top-level messages:
*/
package evtsproxyproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import events "github.com/pensando/sw/api/generated/events"
import api2 "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/venice/ctrler/evtsmgr/rpcserver/evtsmgrproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventsProxyAPI service

type EventsProxyAPIClient interface {
	// recorder will forward the event to proxy which will be channeled to the
	// dispatcher where the event gets deduped and distributed to the writers
	// (events manager, events exporter, etc.). event recorder connects only
	// with proxy; proxy handles rest of the workflow.
	ForwardEvent(ctx context.Context, in *events.Event, opts ...grpc.CallOption) (*api2.Empty, error)
	// recorder can buffer events when the proxy is unavailable and send
	// all of them at once when the proxy comes back online.
	ForwardEvents(ctx context.Context, in *events.EventList, opts ...grpc.CallOption) (*api2.Empty, error)
}

type eventsProxyAPIClient struct {
	cc *grpc.ClientConn
}

func NewEventsProxyAPIClient(cc *grpc.ClientConn) EventsProxyAPIClient {
	return &eventsProxyAPIClient{cc}
}

func (c *eventsProxyAPIClient) ForwardEvent(ctx context.Context, in *events.Event, opts ...grpc.CallOption) (*api2.Empty, error) {
	out := new(api2.Empty)
	err := grpc.Invoke(ctx, "/evtsproxyproto.EventsProxyAPI/ForwardEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsProxyAPIClient) ForwardEvents(ctx context.Context, in *events.EventList, opts ...grpc.CallOption) (*api2.Empty, error) {
	out := new(api2.Empty)
	err := grpc.Invoke(ctx, "/evtsproxyproto.EventsProxyAPI/ForwardEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventsProxyAPI service

type EventsProxyAPIServer interface {
	// recorder will forward the event to proxy which will be channeled to the
	// dispatcher where the event gets deduped and distributed to the writers
	// (events manager, events exporter, etc.). event recorder connects only
	// with proxy; proxy handles rest of the workflow.
	ForwardEvent(context.Context, *events.Event) (*api2.Empty, error)
	// recorder can buffer events when the proxy is unavailable and send
	// all of them at once when the proxy comes back online.
	ForwardEvents(context.Context, *events.EventList) (*api2.Empty, error)
}

func RegisterEventsProxyAPIServer(s *grpc.Server, srv EventsProxyAPIServer) {
	s.RegisterService(&_EventsProxyAPI_serviceDesc, srv)
}

func _EventsProxyAPI_ForwardEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsProxyAPIServer).ForwardEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evtsproxyproto.EventsProxyAPI/ForwardEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsProxyAPIServer).ForwardEvent(ctx, req.(*events.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventsProxyAPI_ForwardEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.EventList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsProxyAPIServer).ForwardEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evtsproxyproto.EventsProxyAPI/ForwardEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsProxyAPIServer).ForwardEvents(ctx, req.(*events.EventList))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventsProxyAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evtsproxyproto.EventsProxyAPI",
	HandlerType: (*EventsProxyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardEvent",
			Handler:    _EventsProxyAPI_ForwardEvent_Handler,
		},
		{
			MethodName: "ForwardEvents",
			Handler:    _EventsProxyAPI_ForwardEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evtsproxy.proto",
}

func init() { proto.RegisterFile("evtsproxy.proto", fileDescriptorEvtsproxy) }

var fileDescriptorEvtsproxy = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4e, 0xc4, 0x30,
	0x10, 0x45, 0x37, 0x0d, 0x45, 0xc4, 0x2e, 0x90, 0x32, 0x42, 0x29, 0x68, 0x28, 0x10, 0x1e, 0x04,
	0x27, 0x00, 0x29, 0x48, 0x48, 0x14, 0xe1, 0x08, 0x8e, 0x33, 0x18, 0x4b, 0x89, 0xc7, 0xb2, 0x9d,
	0x2c, 0x7b, 0x13, 0x8e, 0x44, 0xc9, 0x11, 0x50, 0xb8, 0x08, 0x8a, 0x93, 0x85, 0x80, 0xb4, 0xdb,
	0xf9, 0x8f, 0xdf, 0xff, 0xfe, 0x9e, 0xf8, 0x08, 0x3b, 0xef, 0x8c, 0xa5, 0xd7, 0x0d, 0x33, 0x96,
	0x3c, 0x25, 0xab, 0x9f, 0x41, 0xd0, 0xe9, 0xa9, 0x24, 0x92, 0x35, 0x02, 0x37, 0x0a, 0xb8, 0xd6,
	0xe4, 0xb9, 0x57, 0xa4, 0xdd, 0x48, 0xa7, 0xb9, 0x54, 0xfe, 0xa5, 0x2d, 0x99, 0xa0, 0x06, 0x0c,
	0x6a, 0xc7, 0x75, 0x45, 0xe0, 0xd6, 0xd0, 0xa1, 0x56, 0x02, 0xa1, 0xf5, 0xaa, 0x76, 0x83, 0x55,
	0xa2, 0x9e, 0xbb, 0x41, 0x69, 0x51, 0xb7, 0x15, 0x6e, 0x63, 0x2e, 0x67, 0x31, 0x92, 0x24, 0x41,
	0x18, 0x97, 0xed, 0x73, 0x50, 0x41, 0x84, 0xd3, 0x84, 0xb3, 0x1d, 0xaf, 0x0e, 0x1d, 0x03, 0xe1,
	0x00, 0x3b, 0xd4, 0x7e, 0x1b, 0x7f, 0xbe, 0x87, 0x17, 0xd4, 0x34, 0xa4, 0x27, 0xf0, 0x69, 0xff,
	0x77, 0x84, 0xb7, 0x35, 0x5a, 0x18, 0x36, 0xd4, 0x48, 0x0b, 0xd6, 0x08, 0x87, 0xb6, 0xfb, 0x9d,
	0x8c, 0x45, 0x27, 0x31, 0x46, 0x5e, 0x53, 0xbc, 0xca, 0x43, 0x97, 0x62, 0xd8, 0xe9, 0x6d, 0xf1,
	0x90, 0x5c, 0xc4, 0x87, 0xf7, 0x64, 0xd7, 0xdc, 0x56, 0xe1, 0x22, 0x59, 0xb2, 0xa9, 0x6c, 0x90,
	0x69, 0xcc, 0xb8, 0x51, 0x2c, 0x6f, 0x8c, 0xdf, 0x9c, 0x2d, 0x92, 0xab, 0x78, 0x39, 0x87, 0x5d,
	0x72, 0xf2, 0x87, 0x7e, 0x54, 0xee, 0x9f, 0xe3, 0xee, 0xf8, 0xbd, 0xcf, 0xa2, 0x8f, 0x3e, 0x8b,
	0x3e, 0xfb, 0x2c, 0x7a, 0xfb, 0xca, 0x16, 0x45, 0x54, 0x1e, 0x84, 0x2e, 0x37, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0xf6, 0xf7, 0xab, 0xee, 0x01, 0x00, 0x00,
}
