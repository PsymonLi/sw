// metric

syntax = "proto3";
package metric;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/pensando/sw/api/common.proto";
import "github.com/pensando/sw/api/meta.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Metric API service definition.
service MetricApi {
	rpc WriteMetrics(MetricBundle) returns (api.Empty) {}
	rpc WriteLines(LineBundle) returns (api.Empty) {}
	rpc CreateDatabase(DatabaseReq) returns (StatusResp) {}
}

message LineBundle {
	string dbName = 1;
	uint64 srcID = 2;
	repeated string Lines = 3;
}

// Field is one of (uint64, float64, string, bool)
message Field {
	oneof f {
		int64 Int64    = 1;
		uint64 Uint64  = 2;
		double Float64 = 3;
		string String  = 4;
		bool Bool      = 5;
	}
}

// MetricPoint contains a set of tags and fields, and a timestamp
message MetricPoint {
	string name = 1;
	map <string, string> tags = 2;
	map <string, Field> fields = 3;
	api.Timestamp when = 4;
}

// MetricBundle is a set of metric points to be written to the same db.
message MetricBundle {
	string dbName = 1;
	string reporter = 2;
	repeated MetricPoint metrics = 3;
}

// status resp
message StatusResp {
    string Status = 1; // response status
}

// DatabaseReq contains database operation parameters
message DatabaseReq {
    string DatabaseName    = 1;
    uint64 RetentionPeriod = 2;
}