// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metric.proto

/*
	Package metric is a generated protocol buffer package.

	It is generated from these files:
		metric.proto

	It has these top-level messages:
		LineBundle
		Field
		MetricPoint
		MetricBundle
*/
package metric

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LineBundle struct {
	DbName string   `protobuf:"bytes,1,opt,name=dbName,proto3" json:"dbName,omitempty"`
	SrcID  uint64   `protobuf:"varint,2,opt,name=srcID,proto3" json:"srcID,omitempty"`
	Lines  []string `protobuf:"bytes,3,rep,name=Lines" json:"Lines,omitempty"`
}

func (m *LineBundle) Reset()                    { *m = LineBundle{} }
func (m *LineBundle) String() string            { return proto.CompactTextString(m) }
func (*LineBundle) ProtoMessage()               {}
func (*LineBundle) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

func (m *LineBundle) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *LineBundle) GetSrcID() uint64 {
	if m != nil {
		return m.SrcID
	}
	return 0
}

func (m *LineBundle) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

// Field is one of (uint64, float64, string, bool)
type Field struct {
	// Types that are valid to be assigned to F:
	//	*Field_Int64
	//	*Field_Float64
	//	*Field_String_
	//	*Field_Bool
	F isField_F `protobuf_oneof:"f"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{1} }

type isField_F interface {
	isField_F()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Field_Int64 struct {
	Int64 int64 `protobuf:"varint,1,opt,name=Int64,proto3,oneof"`
}
type Field_Float64 struct {
	Float64 float64 `protobuf:"fixed64,2,opt,name=Float64,proto3,oneof"`
}
type Field_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=String,proto3,oneof"`
}
type Field_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=Bool,proto3,oneof"`
}

func (*Field_Int64) isField_F()   {}
func (*Field_Float64) isField_F() {}
func (*Field_String_) isField_F() {}
func (*Field_Bool) isField_F()    {}

func (m *Field) GetF() isField_F {
	if m != nil {
		return m.F
	}
	return nil
}

func (m *Field) GetInt64() int64 {
	if x, ok := m.GetF().(*Field_Int64); ok {
		return x.Int64
	}
	return 0
}

func (m *Field) GetFloat64() float64 {
	if x, ok := m.GetF().(*Field_Float64); ok {
		return x.Float64
	}
	return 0
}

func (m *Field) GetString_() string {
	if x, ok := m.GetF().(*Field_String_); ok {
		return x.String_
	}
	return ""
}

func (m *Field) GetBool() bool {
	if x, ok := m.GetF().(*Field_Bool); ok {
		return x.Bool
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Field) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Field_OneofMarshaler, _Field_OneofUnmarshaler, _Field_OneofSizer, []interface{}{
		(*Field_Int64)(nil),
		(*Field_Float64)(nil),
		(*Field_String_)(nil),
		(*Field_Bool)(nil),
	}
}

func _Field_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Field)
	// f
	switch x := m.F.(type) {
	case *Field_Int64:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64))
	case *Field_Float64:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.Float64))
	case *Field_String_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.String_)
	case *Field_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Field.F has unexpected type %T", x)
	}
	return nil
}

func _Field_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Field)
	switch tag {
	case 1: // f.Int64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.F = &Field_Int64{int64(x)}
		return true, err
	case 2: // f.Float64
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.F = &Field_Float64{math.Float64frombits(x)}
		return true, err
	case 3: // f.String
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.F = &Field_String_{x}
		return true, err
	case 4: // f.Bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.F = &Field_Bool{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Field_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Field)
	// f
	switch x := m.F.(type) {
	case *Field_Int64:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64))
	case *Field_Float64:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Field_String_:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *Field_Bool:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MetricPoint contains a set of tags and fields, and a timestamp
type MetricPoint struct {
	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tags   map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fields map[string]*Field `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	When   *api1.Timestamp   `protobuf:"bytes,4,opt,name=when" json:"when,omitempty"`
}

func (m *MetricPoint) Reset()                    { *m = MetricPoint{} }
func (m *MetricPoint) String() string            { return proto.CompactTextString(m) }
func (*MetricPoint) ProtoMessage()               {}
func (*MetricPoint) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{2} }

func (m *MetricPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricPoint) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MetricPoint) GetFields() map[string]*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MetricPoint) GetWhen() *api1.Timestamp {
	if m != nil {
		return m.When
	}
	return nil
}

// MetricBundle is a set of metric points to be written to the same db.
type MetricBundle struct {
	DbName   string         `protobuf:"bytes,1,opt,name=dbName,proto3" json:"dbName,omitempty"`
	Reporter string         `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Metrics  []*MetricPoint `protobuf:"bytes,3,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *MetricBundle) Reset()                    { *m = MetricBundle{} }
func (m *MetricBundle) String() string            { return proto.CompactTextString(m) }
func (*MetricBundle) ProtoMessage()               {}
func (*MetricBundle) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{3} }

func (m *MetricBundle) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *MetricBundle) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *MetricBundle) GetMetrics() []*MetricPoint {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*LineBundle)(nil), "metric.LineBundle")
	proto.RegisterType((*Field)(nil), "metric.Field")
	proto.RegisterType((*MetricPoint)(nil), "metric.MetricPoint")
	proto.RegisterType((*MetricBundle)(nil), "metric.MetricBundle")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricApi service

type MetricApiClient interface {
	WriteMetrics(ctx context.Context, in *MetricBundle, opts ...grpc.CallOption) (*api.Empty, error)
	WriteLines(ctx context.Context, in *LineBundle, opts ...grpc.CallOption) (*api.Empty, error)
}

type metricApiClient struct {
	cc *grpc.ClientConn
}

func NewMetricApiClient(cc *grpc.ClientConn) MetricApiClient {
	return &metricApiClient{cc}
}

func (c *metricApiClient) WriteMetrics(ctx context.Context, in *MetricBundle, opts ...grpc.CallOption) (*api.Empty, error) {
	out := new(api.Empty)
	err := grpc.Invoke(ctx, "/metric.MetricApi/WriteMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricApiClient) WriteLines(ctx context.Context, in *LineBundle, opts ...grpc.CallOption) (*api.Empty, error) {
	out := new(api.Empty)
	err := grpc.Invoke(ctx, "/metric.MetricApi/WriteLines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricApi service

type MetricApiServer interface {
	WriteMetrics(context.Context, *MetricBundle) (*api.Empty, error)
	WriteLines(context.Context, *LineBundle) (*api.Empty, error)
}

func RegisterMetricApiServer(s *grpc.Server, srv MetricApiServer) {
	s.RegisterService(&_MetricApi_serviceDesc, srv)
}

func _MetricApi_WriteMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricApiServer).WriteMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricApi/WriteMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricApiServer).WriteMetrics(ctx, req.(*MetricBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricApi_WriteLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LineBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricApiServer).WriteLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metric.MetricApi/WriteLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricApiServer).WriteLines(ctx, req.(*LineBundle))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metric.MetricApi",
	HandlerType: (*MetricApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteMetrics",
			Handler:    _MetricApi_WriteMetrics_Handler,
		},
		{
			MethodName: "WriteLines",
			Handler:    _MetricApi_WriteLines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}

func (m *LineBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineBundle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if m.SrcID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.SrcID))
	}
	if len(m.Lines) > 0 {
		for _, s := range m.Lines {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.F != nil {
		nn1, err := m.F.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Field_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintMetric(dAtA, i, uint64(m.Int64))
	return i, nil
}
func (m *Field_Float64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float64))))
	i += 8
	return i, nil
}
func (m *Field_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMetric(dAtA, i, uint64(len(m.String_)))
	i += copy(dAtA[i:], m.String_)
	return i, nil
}
func (m *Field_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *MetricPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x12
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + len(v) + sovMetric(uint64(len(v)))
			i = encodeVarintMetric(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetric(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMetric(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Fields) > 0 {
		for k, _ := range m.Fields {
			dAtA[i] = 0x1a
			i++
			v := m.Fields[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMetric(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMetric(uint64(len(k))) + msgSize
			i = encodeVarintMetric(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetric(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMetric(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.When != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.When.Size()))
		n3, err := m.When.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MetricBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricBundle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DbName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.Reporter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.Reporter)))
		i += copy(dAtA[i:], m.Reporter)
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMetric(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMetric(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LineBundle) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.SrcID != 0 {
		n += 1 + sovMetric(uint64(m.SrcID))
	}
	if len(m.Lines) > 0 {
		for _, s := range m.Lines {
			l = len(s)
			n += 1 + l + sovMetric(uint64(l))
		}
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	if m.F != nil {
		n += m.F.Size()
	}
	return n
}

func (m *Field_Int64) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMetric(uint64(m.Int64))
	return n
}
func (m *Field_Float64) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Field_String_) Size() (n int) {
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovMetric(uint64(l))
	return n
}
func (m *Field_Bool) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *MetricPoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMetric(uint64(len(k))) + 1 + len(v) + sovMetric(uint64(len(v)))
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if len(m.Fields) > 0 {
		for k, v := range m.Fields {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMetric(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMetric(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMetric(uint64(mapEntrySize))
		}
	}
	if m.When != nil {
		l = m.When.Size()
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *MetricBundle) Size() (n int) {
	var l int
	_ = l
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovMetric(uint64(l))
		}
	}
	return n
}

func sovMetric(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LineBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcID", wireType)
			}
			m.SrcID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lines = append(m.Lines, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.F = &Field_Int64{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.F = &Field_Float64{float64(math.Float64frombits(v))}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F = &Field_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.F = &Field_Bool{b}
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetric
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMetric
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetric(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMetric
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = make(map[string]*Field)
			}
			var mapkey string
			var mapvalue *Field
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMetric
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetric
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMetric
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthMetric
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Field{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetric(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMetric
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fields[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field When", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.When == nil {
				m.When = &api1.Timestamp{}
			}
			if err := m.When.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &MetricPoint{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetric(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metric.proto", fileDescriptorMetric) }

var fileDescriptorMetric = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0xeb, 0x26, 0xeb, 0xd6, 0x93, 0x7e, 0x9f, 0x90, 0x99, 0xa6, 0x28, 0x82, 0x52, 0x05,
	0x21, 0x7a, 0xb3, 0x44, 0x04, 0xc4, 0x10, 0x77, 0x54, 0x74, 0xea, 0x24, 0x40, 0x95, 0x99, 0xc4,
	0xb5, 0x9b, 0xba, 0x99, 0x45, 0x62, 0x87, 0xc4, 0xd9, 0xd4, 0xf7, 0xe2, 0x21, 0xb8, 0xe4, 0x11,
	0x50, 0x9f, 0x04, 0xc5, 0x4e, 0xb6, 0x4c, 0x2a, 0x70, 0xe7, 0xff, 0xf1, 0xff, 0x77, 0x7c, 0xce,
	0xf1, 0x81, 0x51, 0xc6, 0x54, 0xc1, 0xe3, 0x20, 0x2f, 0xa4, 0x92, 0x78, 0x60, 0x94, 0xf7, 0x28,
	0x91, 0x32, 0x49, 0x59, 0x48, 0x73, 0x1e, 0x52, 0x21, 0xa4, 0xa2, 0x8a, 0x4b, 0x51, 0x1a, 0x97,
	0x37, 0x4f, 0xb8, 0xba, 0xaa, 0x56, 0x41, 0x2c, 0xb3, 0x30, 0x67, 0xa2, 0xa4, 0x62, 0x2d, 0xc3,
	0xf2, 0x26, 0xbc, 0x66, 0x82, 0xc7, 0x2c, 0xac, 0x14, 0x4f, 0xcb, 0x1a, 0x4d, 0x98, 0xe8, 0xd2,
	0x21, 0x17, 0x71, 0x5a, 0xad, 0x59, 0x9b, 0xe6, 0xf9, 0x1f, 0xd2, 0xd4, 0x8f, 0xc6, 0x32, 0xcb,
	0xa4, 0x68, 0x8c, 0xcf, 0xfe, 0x62, 0xcc, 0x98, 0xa2, 0x8d, 0xed, 0xb4, 0x63, 0x4b, 0x64, 0x22,
	0x43, 0x1d, 0x5e, 0x55, 0x1b, 0xad, 0xb4, 0xd0, 0x27, 0x63, 0xf7, 0x97, 0x00, 0x1f, 0xb8, 0x60,
	0xb3, 0x4a, 0xac, 0x53, 0x86, 0x4f, 0x60, 0xb0, 0x5e, 0x7d, 0xa2, 0x19, 0x73, 0xd1, 0x04, 0x4d,
	0x87, 0xa4, 0x51, 0xf8, 0x18, 0x0e, 0xca, 0x22, 0xbe, 0x78, 0xef, 0xf6, 0x27, 0x68, 0x6a, 0x13,
	0x23, 0xea, 0x68, 0xcd, 0x96, 0xae, 0x35, 0xb1, 0xa6, 0x43, 0x62, 0x84, 0x9f, 0xc3, 0xc1, 0x39,
	0x67, 0xe9, 0x1a, 0x9f, 0xc0, 0xc1, 0x85, 0x50, 0xaf, 0x5f, 0xe9, 0x5c, 0xd6, 0xa2, 0x47, 0x8c,
	0xc4, 0x1e, 0x1c, 0x9e, 0xa7, 0x92, 0xd6, 0x37, 0x75, 0x3a, 0xb4, 0xe8, 0x91, 0x36, 0x80, 0x5d,
	0x18, 0x7c, 0x56, 0x05, 0x17, 0x89, 0x6b, 0xd5, 0x05, 0x2c, 0x7a, 0xa4, 0xd1, 0xf8, 0x18, 0xec,
	0x99, 0x94, 0xa9, 0x6b, 0x4f, 0xd0, 0xf4, 0x68, 0xd1, 0x23, 0x5a, 0xcd, 0x2c, 0x40, 0x1b, 0xff,
	0x7b, 0x1f, 0x9c, 0x8f, 0xfa, 0xcb, 0x96, 0x92, 0x0b, 0x85, 0x31, 0xd8, 0xe2, 0xae, 0x07, 0x7d,
	0xc6, 0x2f, 0xc0, 0x56, 0x34, 0x29, 0xdd, 0xfe, 0xc4, 0x9a, 0x3a, 0xd1, 0xe3, 0xa0, 0xf9, 0xf0,
	0x0e, 0x16, 0x5c, 0xd2, 0xa4, 0x9c, 0x0b, 0x55, 0x6c, 0x89, 0xb6, 0xe2, 0x33, 0x18, 0x6c, 0xea,
	0x46, 0x4c, 0x7f, 0x4e, 0xf4, 0x64, 0x1f, 0xa4, 0x5b, 0x6d, 0xb0, 0xc6, 0x8e, 0x7d, 0xb0, 0x6f,
	0xae, 0x98, 0xd0, 0xa5, 0x3a, 0xd1, 0xff, 0x01, 0xcd, 0x79, 0x70, 0xc9, 0x33, 0x56, 0x2a, 0x9a,
	0xe5, 0x44, 0xdf, 0x79, 0x67, 0x30, 0xbc, 0x7d, 0x0f, 0x3f, 0x00, 0xeb, 0x2b, 0xdb, 0x36, 0xf5,
	0xd6, 0xc7, 0x7a, 0xb4, 0xd7, 0x34, 0xad, 0x98, 0x9e, 0xd0, 0x90, 0x18, 0xf1, 0xb6, 0xff, 0x06,
	0x79, 0x0b, 0x70, 0x3a, 0x6f, 0xee, 0x41, 0x9f, 0x76, 0x51, 0x27, 0xfa, 0xaf, 0xad, 0x5a, 0x53,
	0x9d, 0x4c, 0xfe, 0x37, 0x18, 0x99, 0x4e, 0xfe, 0xf1, 0xf9, 0x1e, 0x1c, 0x15, 0x2c, 0x97, 0x85,
	0x62, 0x45, 0x53, 0xce, 0xad, 0xc6, 0xa7, 0x70, 0x68, 0xd2, 0xb7, 0x43, 0x7a, 0xb8, 0x67, 0x48,
	0xa4, 0xf5, 0x44, 0x12, 0x86, 0x26, 0xfe, 0x2e, 0xe7, 0x38, 0x82, 0xd1, 0x97, 0x82, 0x2b, 0x66,
	0x22, 0x25, 0x3e, 0xbe, 0x8f, 0x9a, 0xaa, 0x3c, 0xd0, 0xe3, 0x9b, 0x67, 0xb9, 0xda, 0xfa, 0x3d,
	0x1c, 0x00, 0x68, 0x46, 0xaf, 0x1a, 0xc6, 0x2d, 0x71, 0xb7, 0xc2, 0xf7, 0xfd, 0xb3, 0xd1, 0x8f,
	0xdd, 0x18, 0xfd, 0xdc, 0x8d, 0xd1, 0xaf, 0xdd, 0x18, 0x2d, 0xd1, 0x6a, 0xa0, 0xb7, 0xfe, 0xe5,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x2d, 0xfd, 0xf1, 0xf1, 0x03, 0x00, 0x00,
}
