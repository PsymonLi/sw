// Code generated by MockGen. DO NOT EDIT.
// Source: metric.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"

	api "github.com/pensando/sw/api"
	metric "github.com/pensando/sw/venice/citadel/collector/rpcserver/metric"
)

// MockisField_F is a mock of isField_F interface
type MockisField_F struct {
	ctrl     *gomock.Controller
	recorder *MockisField_FMockRecorder
}

// MockisField_FMockRecorder is the mock recorder for MockisField_F
type MockisField_FMockRecorder struct {
	mock *MockisField_F
}

// NewMockisField_F creates a new mock instance
func NewMockisField_F(ctrl *gomock.Controller) *MockisField_F {
	mock := &MockisField_F{ctrl: ctrl}
	mock.recorder = &MockisField_FMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisField_F) EXPECT() *MockisField_FMockRecorder {
	return m.recorder
}

// isField_F mocks base method
func (m *MockisField_F) isField_F() {
	m.ctrl.Call(m, "isField_F")
}

// isField_F indicates an expected call of isField_F
func (mr *MockisField_FMockRecorder) isField_F() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isField_F", reflect.TypeOf((*MockisField_F)(nil).isField_F))
}

// MarshalTo mocks base method
func (m *MockisField_F) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisField_FMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisField_F)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisField_F) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisField_FMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisField_F)(nil).Size))
}

// MockMetricApiClient is a mock of MetricApiClient interface
type MockMetricApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricApiClientMockRecorder
}

// MockMetricApiClientMockRecorder is the mock recorder for MockMetricApiClient
type MockMetricApiClientMockRecorder struct {
	mock *MockMetricApiClient
}

// NewMockMetricApiClient creates a new mock instance
func NewMockMetricApiClient(ctrl *gomock.Controller) *MockMetricApiClient {
	mock := &MockMetricApiClient{ctrl: ctrl}
	mock.recorder = &MockMetricApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricApiClient) EXPECT() *MockMetricApiClientMockRecorder {
	return m.recorder
}

// WriteMetrics mocks base method
func (m *MockMetricApiClient) WriteMetrics(ctx context.Context, in *metric.MetricBundle, opts ...grpc.CallOption) (*api.Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMetrics", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetrics indicates an expected call of WriteMetrics
func (mr *MockMetricApiClientMockRecorder) WriteMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetrics", reflect.TypeOf((*MockMetricApiClient)(nil).WriteMetrics), varargs...)
}

// WriteLines mocks base method
func (m *MockMetricApiClient) WriteLines(ctx context.Context, in *metric.LineBundle, opts ...grpc.CallOption) (*api.Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteLines", varargs...)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLines indicates an expected call of WriteLines
func (mr *MockMetricApiClientMockRecorder) WriteLines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLines", reflect.TypeOf((*MockMetricApiClient)(nil).WriteLines), varargs...)
}

// CreateDatabase mocks base method
func (m *MockMetricApiClient) CreateDatabase(ctx context.Context, in *metric.DatabaseReq, opts ...grpc.CallOption) (*metric.StatusResp, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatabase", varargs...)
	ret0, _ := ret[0].(*metric.StatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase
func (mr *MockMetricApiClientMockRecorder) CreateDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockMetricApiClient)(nil).CreateDatabase), varargs...)
}

// MockMetricApiServer is a mock of MetricApiServer interface
type MockMetricApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricApiServerMockRecorder
}

// MockMetricApiServerMockRecorder is the mock recorder for MockMetricApiServer
type MockMetricApiServerMockRecorder struct {
	mock *MockMetricApiServer
}

// NewMockMetricApiServer creates a new mock instance
func NewMockMetricApiServer(ctrl *gomock.Controller) *MockMetricApiServer {
	mock := &MockMetricApiServer{ctrl: ctrl}
	mock.recorder = &MockMetricApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricApiServer) EXPECT() *MockMetricApiServerMockRecorder {
	return m.recorder
}

// WriteMetrics mocks base method
func (m *MockMetricApiServer) WriteMetrics(arg0 context.Context, arg1 *metric.MetricBundle) (*api.Empty, error) {
	ret := m.ctrl.Call(m, "WriteMetrics", arg0, arg1)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMetrics indicates an expected call of WriteMetrics
func (mr *MockMetricApiServerMockRecorder) WriteMetrics(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMetrics", reflect.TypeOf((*MockMetricApiServer)(nil).WriteMetrics), arg0, arg1)
}

// WriteLines mocks base method
func (m *MockMetricApiServer) WriteLines(arg0 context.Context, arg1 *metric.LineBundle) (*api.Empty, error) {
	ret := m.ctrl.Call(m, "WriteLines", arg0, arg1)
	ret0, _ := ret[0].(*api.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLines indicates an expected call of WriteLines
func (mr *MockMetricApiServerMockRecorder) WriteLines(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLines", reflect.TypeOf((*MockMetricApiServer)(nil).WriteLines), arg0, arg1)
}

// CreateDatabase mocks base method
func (m *MockMetricApiServer) CreateDatabase(arg0 context.Context, arg1 *metric.DatabaseReq) (*metric.StatusResp, error) {
	ret := m.ctrl.Call(m, "CreateDatabase", arg0, arg1)
	ret0, _ := ret[0].(*metric.StatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase
func (mr *MockMetricApiServerMockRecorder) CreateDatabase(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockMetricApiServer)(nil).CreateDatabase), arg0, arg1)
}
