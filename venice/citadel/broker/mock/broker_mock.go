// Code generated by MockGen. DO NOT EDIT.
// Source: ../broker.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/influxdata/influxdb/models"
	query "github.com/influxdata/influxdb/query"

	meta "github.com/pensando/sw/venice/citadel/meta"
	tproto "github.com/pensando/sw/venice/citadel/tproto"
)

// MockInf is a mock of Inf interface
type MockInf struct {
	ctrl     *gomock.Controller
	recorder *MockInfMockRecorder
}

// MockInfMockRecorder is the mock recorder for MockInf
type MockInfMockRecorder struct {
	mock *MockInf
}

// NewMockInf creates a new mock instance
func NewMockInf(ctrl *gomock.Controller) *MockInf {
	mock := &MockInf{ctrl: ctrl}
	mock.recorder = &MockInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInf) EXPECT() *MockInfMockRecorder {
	return m.recorder
}

// GetCluster mocks base method
func (m *MockInf) GetCluster(clusterType string) *meta.TscaleCluster {
	ret := m.ctrl.Call(m, "GetCluster", clusterType)
	ret0, _ := ret[0].(*meta.TscaleCluster)
	return ret0
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockInfMockRecorder) GetCluster(clusterType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInf)(nil).GetCluster), clusterType)
}

// IsStopped mocks base method
func (m *MockInf) IsStopped() bool {
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped
func (mr *MockInfMockRecorder) IsStopped() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockInf)(nil).IsStopped))
}

// Stop mocks base method
func (m *MockInf) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockInfMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInf)(nil).Stop))
}

// CreateDatabase mocks base method
func (m *MockInf) CreateDatabase(ctx context.Context, database string) error {
	ret := m.ctrl.Call(m, "CreateDatabase", ctx, database)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabase indicates an expected call of CreateDatabase
func (mr *MockInfMockRecorder) CreateDatabase(ctx, database interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockInf)(nil).CreateDatabase), ctx, database)
}

// CreateDatabaseWithRetention mocks base method
func (m *MockInf) CreateDatabaseWithRetention(ctx context.Context, database string, retention uint64) error {
	ret := m.ctrl.Call(m, "CreateDatabaseWithRetention", ctx, database, retention)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatabaseWithRetention indicates an expected call of CreateDatabaseWithRetention
func (mr *MockInfMockRecorder) CreateDatabaseWithRetention(ctx, database, retention interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseWithRetention", reflect.TypeOf((*MockInf)(nil).CreateDatabaseWithRetention), ctx, database, retention)
}

// DeleteDatabase mocks base method
func (m *MockInf) DeleteDatabase(ctx context.Context, database string) error {
	ret := m.ctrl.Call(m, "DeleteDatabase", ctx, database)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabase indicates an expected call of DeleteDatabase
func (mr *MockInfMockRecorder) DeleteDatabase(ctx, database interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockInf)(nil).DeleteDatabase), ctx, database)
}

// WritePoints mocks base method
func (m *MockInf) WritePoints(ctx context.Context, database string, points []models.Point) error {
	ret := m.ctrl.Call(m, "WritePoints", ctx, database, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePoints indicates an expected call of WritePoints
func (mr *MockInfMockRecorder) WritePoints(ctx, database, points interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePoints", reflect.TypeOf((*MockInf)(nil).WritePoints), ctx, database, points)
}

// ExecuteQuery mocks base method
func (m *MockInf) ExecuteQuery(ctx context.Context, database, qry string) ([]*query.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteQuery", ctx, database, qry)
	ret0, _ := ret[0].([]*query.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery
func (mr *MockInfMockRecorder) ExecuteQuery(ctx, database, qry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockInf)(nil).ExecuteQuery), ctx, database, qry)
}

// ExecuteAggQuery mocks base method
func (m *MockInf) ExecuteAggQuery(ctx context.Context, database, qry string) ([]*query.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteAggQuery", ctx, database, qry)
	ret0, _ := ret[0].([]*query.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAggQuery indicates an expected call of ExecuteAggQuery
func (mr *MockInfMockRecorder) ExecuteAggQuery(ctx, database, qry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAggQuery", reflect.TypeOf((*MockInf)(nil).ExecuteAggQuery), ctx, database, qry)
}

// WriteLines mocks base method
func (m *MockInf) WriteLines(ctx context.Context, database string, lines []string) error {
	ret := m.ctrl.Call(m, "WriteLines", ctx, database, lines)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLines indicates an expected call of WriteLines
func (mr *MockInfMockRecorder) WriteLines(ctx, database, lines interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLines", reflect.TypeOf((*MockInf)(nil).WriteLines), ctx, database, lines)
}

// ClusterCheck mocks base method
func (m *MockInf) ClusterCheck() error {
	ret := m.ctrl.Call(m, "ClusterCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClusterCheck indicates an expected call of ClusterCheck
func (mr *MockInfMockRecorder) ClusterCheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCheck", reflect.TypeOf((*MockInf)(nil).ClusterCheck))
}

// WriteKvs mocks base method
func (m *MockInf) WriteKvs(ctx context.Context, table string, kvs []*tproto.KeyValue) error {
	ret := m.ctrl.Call(m, "WriteKvs", ctx, table, kvs)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteKvs indicates an expected call of WriteKvs
func (mr *MockInfMockRecorder) WriteKvs(ctx, table, kvs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteKvs", reflect.TypeOf((*MockInf)(nil).WriteKvs), ctx, table, kvs)
}

// ReadKvs mocks base method
func (m *MockInf) ReadKvs(ctx context.Context, table string, keys []*tproto.Key) ([]*tproto.KeyValue, error) {
	ret := m.ctrl.Call(m, "ReadKvs", ctx, table, keys)
	ret0, _ := ret[0].([]*tproto.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadKvs indicates an expected call of ReadKvs
func (mr *MockInfMockRecorder) ReadKvs(ctx, table, keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKvs", reflect.TypeOf((*MockInf)(nil).ReadKvs), ctx, table, keys)
}

// ListKvs mocks base method
func (m *MockInf) ListKvs(ctx context.Context, table string) ([]*tproto.KeyValue, error) {
	ret := m.ctrl.Call(m, "ListKvs", ctx, table)
	ret0, _ := ret[0].([]*tproto.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKvs indicates an expected call of ListKvs
func (mr *MockInfMockRecorder) ListKvs(ctx, table interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKvs", reflect.TypeOf((*MockInf)(nil).ListKvs), ctx, table)
}

// DeleteKvs mocks base method
func (m *MockInf) DeleteKvs(ctx context.Context, table string, keys []*tproto.Key) error {
	ret := m.ctrl.Call(m, "DeleteKvs", ctx, table, keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKvs indicates an expected call of DeleteKvs
func (mr *MockInfMockRecorder) DeleteKvs(ctx, table, keys interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKvs", reflect.TypeOf((*MockInf)(nil).DeleteKvs), ctx, table, keys)
}
