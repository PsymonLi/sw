// Code generated by MockGen. DO NOT EDIT.
// Source: ../query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	query "github.com/influxdata/influxdb/query"
)

// MockBrokerInf is a mock of BrokerInf interface
type MockBrokerInf struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerInfMockRecorder
}

// MockBrokerInfMockRecorder is the mock recorder for MockBrokerInf
type MockBrokerInfMockRecorder struct {
	mock *MockBrokerInf
}

// NewMockBrokerInf creates a new mock instance
func NewMockBrokerInf(ctrl *gomock.Controller) *MockBrokerInf {
	mock := &MockBrokerInf{ctrl: ctrl}
	mock.recorder = &MockBrokerInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrokerInf) EXPECT() *MockBrokerInfMockRecorder {
	return m.recorder
}

// ClusterCheck mocks base method
func (m *MockBrokerInf) ClusterCheck() error {
	ret := m.ctrl.Call(m, "ClusterCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClusterCheck indicates an expected call of ClusterCheck
func (mr *MockBrokerInfMockRecorder) ClusterCheck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCheck", reflect.TypeOf((*MockBrokerInf)(nil).ClusterCheck))
}

// ExecuteQuery mocks base method
func (m *MockBrokerInf) ExecuteQuery(ctx context.Context, database, qry string) ([]*query.Result, error) {
	ret := m.ctrl.Call(m, "ExecuteQuery", ctx, database, qry)
	ret0, _ := ret[0].([]*query.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery
func (mr *MockBrokerInfMockRecorder) ExecuteQuery(ctx, database, qry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockBrokerInf)(nil).ExecuteQuery), ctx, database, qry)
}
