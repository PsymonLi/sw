// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

/*
	Package eventsproto is a generated protocol buffer package.

	It is generated from these files:
		events.proto

	It has these top-level messages:
		Empty
*/
package eventsproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import events "github.com/pensando/sw/api/generated/events"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

func init() {
	proto.RegisterType((*Empty)(nil), "eventsproto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	// any component can use this method to generate an event
	SendEvent(ctx context.Context, in *events.Event, opts ...grpc.CallOption) (*Empty, error)
	// any component can establish a watch to get a stream of events.
	// e.g. alerting system could watch for events to trigger an alert.
	WatchEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Events_WatchEventsClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) SendEvent(ctx context.Context, in *events.Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/eventsproto.Events/SendEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) WatchEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Events_WatchEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/eventsproto.Events/WatchEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsWatchEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_WatchEventsClient interface {
	Recv() (*events.Event, error)
	grpc.ClientStream
}

type eventsWatchEventsClient struct {
	grpc.ClientStream
}

func (x *eventsWatchEventsClient) Recv() (*events.Event, error) {
	m := new(events.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Events service

type EventsServer interface {
	// any component can use this method to generate an event
	SendEvent(context.Context, *events.Event) (*Empty, error)
	// any component can establish a watch to get a stream of events.
	// e.g. alerting system could watch for events to trigger an alert.
	WatchEvents(*Empty, Events_WatchEventsServer) error
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsproto.Events/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).SendEvent(ctx, req.(*events.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_WatchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).WatchEvents(m, &eventsWatchEventsServer{stream})
}

type Events_WatchEventsServer interface {
	Send(*events.Event) error
	grpc.ServerStream
}

type eventsWatchEventsServer struct {
	grpc.ServerStream
}

func (x *eventsWatchEventsServer) Send(m *events.Event) error {
	return x.ServerStream.SendMsg(m)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventsproto.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _Events_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEvents",
			Handler:       _Events_WatchEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x9b, 0x83, 0x2b, 0x66, 0x15, 0x24, 0xc7, 0x22, 0x3d, 0xf4, 0x6e, 0x66, 0x51, 0x9f,
	0x40, 0xe8, 0x5d, 0xf0, 0xe0, 0x39, 0x6d, 0xc7, 0x6c, 0xa0, 0x3b, 0x13, 0x4c, 0xba, 0xe2, 0x9b,
	0xf8, 0x48, 0x1e, 0x7d, 0x04, 0xa9, 0x2f, 0x22, 0x3b, 0x56, 0xa8, 0xa0, 0xb7, 0x7c, 0xc9, 0xf7,
	0xff, 0x49, 0x46, 0x9f, 0xe2, 0x1e, 0x29, 0x27, 0x1b, 0x9f, 0x38, 0xb3, 0x59, 0x7f, 0x93, 0x40,
	0x79, 0xe1, 0x99, 0xfd, 0x80, 0xe0, 0x62, 0x00, 0x47, 0xc4, 0xd9, 0xe5, 0xc0, 0x34, 0xab, 0x65,
	0xe3, 0x43, 0xde, 0x8e, 0xad, 0xed, 0x78, 0x07, 0x11, 0x29, 0x39, 0xea, 0x19, 0xd2, 0x33, 0xec,
	0x91, 0x42, 0x87, 0x30, 0xe6, 0x30, 0xa4, 0x43, 0xd4, 0x23, 0x2d, 0xd3, 0x10, 0xa8, 0x1b, 0xc6,
	0x1e, 0x7f, 0x6a, 0x2e, 0x17, 0x35, 0x9e, 0x3d, 0x83, 0x6c, 0xb7, 0xe3, 0xa3, 0x90, 0x80, 0xac,
	0x66, 0xdd, 0xfe, 0x73, 0xeb, 0xe1, 0x8d, 0x62, 0x24, 0x58, 0x7e, 0xa8, 0x3e, 0xd6, 0x47, 0xcd,
	0x2e, 0xe6, 0x97, 0xab, 0xa8, 0x57, 0x8d, 0x1c, 0x98, 0x8d, 0x3e, 0xb9, 0x47, 0xea, 0x85, 0xcc,
	0x99, 0x9d, 0x75, 0xc1, 0xd2, 0xd8, 0xc5, 0x00, 0xac, 0x24, 0xeb, 0xc2, 0xdc, 0xe8, 0xf5, 0x83,
	0xcb, 0xdd, 0x76, 0x2e, 0xf8, 0x43, 0x2a, 0x7f, 0xf7, 0xd4, 0xc5, 0x46, 0xdd, 0x9e, 0xbf, 0x4d,
	0x95, 0x7a, 0x9f, 0x2a, 0xf5, 0x31, 0x55, 0xea, 0xf5, 0xb3, 0x2a, 0xee, 0x54, 0xbb, 0x92, 0xcc,
	0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xa2, 0x4d, 0xfe, 0x76, 0x01, 0x00, 0x00,
}
