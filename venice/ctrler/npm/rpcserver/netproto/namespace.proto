//------------------------------------------------------------------------------
// {C} Copyright 2017 Pensando Systems Inc. All rights reserved
//
// protobuf specification for namespace
//------------------------------------------------------------------------------

syntax = "proto3";
package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ---------------------------- Namespace API ----------------------------

// Namespace controller api
service NamespaceApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Namespace",
        Method: ["list", "post", "delete", "put"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Name}"
    };

    rpc GetNamespace (api.ObjectMeta) returns (Namespace) {};
    rpc ListNamespaces (api.ObjectMeta) returns (NamespaceList) {};
    rpc WatchNamespaces (api.ObjectMeta) returns (stream NamespaceEvent) {};
}

// Namespace object
message Namespace {
    api.TypeMeta    TypeMeta    = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta  ObjectMeta  = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    NamespaceSpec   Spec        = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    NamespaceStatus Status      = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// NamespaceSpec captures all the namespace level configuration
message NamespaceSpec {
    enum Type
    {
        CUSTOMER  = 0;  // Customer type tenant.
        INFRA     = 1;  // Infra tenant. This will create an infra VRF in HAL
    }
    string NamespaceType  = 1 [(venice.check) = "StrEnum(NamespaceSpec.Type)",
                               (gogoproto.nullable) = true, (gogoproto.jsontag) = "namespace-type,omitempty"];


}
// Namespace Status
message NamespaceStatus {
    uint64 NamespaceID  = 1 [(gogoproto.jsontag) = "namespace-id,omitempty"];     // Namespace identifier
}


message NamespaceList {
    repeated Namespace namespaces = 1;
}

// namespace watch event
message NamespaceEvent {
    api.EventType   EventType   = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Namespace       Namespace   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "namespace,omitempty"];
}