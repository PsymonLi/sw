// network object

syntax = "proto3";

package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";


// security rule
message SecurityRule {
    string  Direction = 1;  // direction incoming/outgoing
    string  PeerGroup = 2;  // From/To security group
    uint32  PeerGroupID = 3; // Peer security group id
    message Service {
        string protocol = 1;   // IP prootocol (tcp/udp/icmp)
        uint32 port     = 2;   // port number
    }
    // services (port & protocol)
    repeated Service Services = 4[(gogoproto.nullable) = false, (gogoproto.jsontag) = "services,omitempty"];
    string  Action            = 5;  // action allow/deny/reject
    bool    Log               = 6;  // logging enabled/disabled
    // FIXME: Move these match fields before action?
    repeated string Apps = 7; //List of apps
    repeated string AppUsers = 8; // List of users
}

// security group spec
message SecurityGroupSpec {
    string SecurityProfile      = 1;  // security profile name
    // security rules
    repeated SecurityRule Rules = 2[(gogoproto.nullable) = false, (gogoproto.jsontag) = "rules,omitempty"];
}

// security group status
message SecurityGroupStatus {
    uint32 SecurityGroupID = 1; // security group id
}

// security group object
message SecurityGroup {
    api.TypeMeta   TypeMeta     = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta   = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    SecurityGroupSpec    Spec   = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    SecurityGroupStatus  Status = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}

// list of security groups
message SecurityGroupList {
    repeated SecurityGroup SecurityGroups = 1;
}

// security group watch event
message SecurityGroupEvent {
    api.EventType EventType       = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    SecurityGroup SecurityGroup   = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "security-group,omitempty"];
}

// security group rpc service
service SecurityApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "SecurityGroup",
        Method: ["list", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Name}"
    };

    rpc GetSecurityGroup (api.ObjectMeta) returns (SecurityGroup) {};
    rpc ListSecurityGroups (api.ObjectMeta) returns (SecurityGroupList) {};
    rpc WatchSecurityGroups (api.ObjectMeta) returns (stream SecurityGroupEvent) {};
}
