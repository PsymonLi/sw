// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: endpoint.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EndpointSpec_Type int32

const (
	EndpointSpec_NONE   EndpointSpec_Type = 0
	EndpointSpec_LIF    EndpointSpec_Type = 1
	EndpointSpec_UPLINK EndpointSpec_Type = 2
	EndpointSpec_TUNNEL EndpointSpec_Type = 3
)

var EndpointSpec_Type_name = map[int32]string{
	0: "NONE",
	1: "LIF",
	2: "UPLINK",
	3: "TUNNEL",
}
var EndpointSpec_Type_value = map[string]int32{
	"NONE":   0,
	"LIF":    1,
	"UPLINK": 2,
	"TUNNEL": 3,
}

func (x EndpointSpec_Type) String() string {
	return proto.EnumName(EndpointSpec_Type_name, int32(x))
}
func (EndpointSpec_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{1, 0} }

// endpoint object
type Endpoint struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           EndpointSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         EndpointStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{0} }

func (m *Endpoint) GetSpec() EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return EndpointSpec{}
}

func (m *Endpoint) GetStatus() EndpointStatus {
	if m != nil {
		return m.Status
	}
	return EndpointStatus{}
}

// endpoint spec
type EndpointSpec struct {
	EndpointUUID       string            `protobuf:"bytes,1,opt,name=EndpointUUID,proto3" json:"endpoint-uuid,omitempty"`
	WorkloadUUID       string            `protobuf:"bytes,2,opt,name=WorkloadUUID,proto3" json:"workload-uuid,omitempty"`
	WorkloadName       string            `protobuf:"bytes,3,opt,name=WorkloadName,proto3" json:"workload-name,omitempty"`
	NetworkName        string            `protobuf:"bytes,4,opt,name=NetworkName,proto3" json:"network-name,omitempty"`
	WorkloadAttributes map[string]string `protobuf:"bytes,5,rep,name=WorkloadAttributes" json:"workload-attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityGroups     []string          `protobuf:"bytes,6,rep,name=SecurityGroups" json:"security-groups,omitempty"`
	InterfaceType      string            `protobuf:"bytes,7,opt,name=InterfaceType,proto3" json:"interface-type,omitempty"`
	Interface          string            `protobuf:"bytes,8,opt,name=Interface,proto3" json:"interface,omitempty"`
	IPv4Address        string            `protobuf:"bytes,9,opt,name=IPv4Address,proto3" json:"ipv4-address,omitempty"`
	IPv4Gateway        string            `protobuf:"bytes,10,opt,name=IPv4Gateway,proto3" json:"ipv4-gateway,omitempty"`
	IPv6Address        string            `protobuf:"bytes,11,opt,name=IPv6Address,proto3" json:"ipv6-address,omitempty"`
	IPv6Gateway        string            `protobuf:"bytes,12,opt,name=IPv6Gateway,proto3" json:"ipv6-gateway,omitempty"`
	MacAddress         string            `protobuf:"bytes,13,opt,name=MacAddress,proto3" json:"mac-address,omitempty"`
	HomingHostAddr     string            `protobuf:"bytes,14,opt,name=HomingHostAddr,proto3" json:"homing-host-address,omitempty"`
	HomingHostName     string            `protobuf:"bytes,15,opt,name=HomingHostName,proto3" json:"homing-host-name,omitempty"`
	NodeUUID           string            `protobuf:"bytes,16,opt,name=NodeUUID,proto3" json:"node-uuid,omitempty"`
	UsegVlan           uint32            `protobuf:"varint,17,opt,name=UsegVlan,proto3" json:"useg-vlan,omitempty"`
}

func (m *EndpointSpec) Reset()                    { *m = EndpointSpec{} }
func (m *EndpointSpec) String() string            { return proto.CompactTextString(m) }
func (*EndpointSpec) ProtoMessage()               {}
func (*EndpointSpec) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{1} }

func (m *EndpointSpec) GetEndpointUUID() string {
	if m != nil {
		return m.EndpointUUID
	}
	return ""
}

func (m *EndpointSpec) GetWorkloadUUID() string {
	if m != nil {
		return m.WorkloadUUID
	}
	return ""
}

func (m *EndpointSpec) GetWorkloadName() string {
	if m != nil {
		return m.WorkloadName
	}
	return ""
}

func (m *EndpointSpec) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *EndpointSpec) GetWorkloadAttributes() map[string]string {
	if m != nil {
		return m.WorkloadAttributes
	}
	return nil
}

func (m *EndpointSpec) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *EndpointSpec) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *EndpointSpec) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *EndpointSpec) GetIPv4Address() string {
	if m != nil {
		return m.IPv4Address
	}
	return ""
}

func (m *EndpointSpec) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *EndpointSpec) GetIPv6Address() string {
	if m != nil {
		return m.IPv6Address
	}
	return ""
}

func (m *EndpointSpec) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *EndpointSpec) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *EndpointSpec) GetHomingHostAddr() string {
	if m != nil {
		return m.HomingHostAddr
	}
	return ""
}

func (m *EndpointSpec) GetHomingHostName() string {
	if m != nil {
		return m.HomingHostName
	}
	return ""
}

func (m *EndpointSpec) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *EndpointSpec) GetUsegVlan() uint32 {
	if m != nil {
		return m.UsegVlan
	}
	return 0
}

// endpoint status
type EndpointStatus struct {
	EnicID uint64 `protobuf:"varint,10,opt,name=EnicID,proto3" json:"enic-id,omitempty"`
}

func (m *EndpointStatus) Reset()                    { *m = EndpointStatus{} }
func (m *EndpointStatus) String() string            { return proto.CompactTextString(m) }
func (*EndpointStatus) ProtoMessage()               {}
func (*EndpointStatus) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{2} }

func (m *EndpointStatus) GetEnicID() uint64 {
	if m != nil {
		return m.EnicID
	}
	return 0
}

// list of endpoints
type EndpointList struct {
	Endpoints []*Endpoint `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (m *EndpointList) String() string            { return proto.CompactTextString(m) }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{3} }

func (m *EndpointList) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

// endpoint watch event
type EndpointEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Endpoint  Endpoint      `protobuf:"bytes,2,opt,name=Endpoint" json:"endpoint,omitempty"`
}

func (m *EndpointEvent) Reset()                    { *m = EndpointEvent{} }
func (m *EndpointEvent) String() string            { return proto.CompactTextString(m) }
func (*EndpointEvent) ProtoMessage()               {}
func (*EndpointEvent) Descriptor() ([]byte, []int) { return fileDescriptorEndpoint, []int{4} }

func (m *EndpointEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *EndpointEvent) GetEndpoint() Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return Endpoint{}
}

func init() {
	proto.RegisterType((*Endpoint)(nil), "netproto.Endpoint")
	proto.RegisterType((*EndpointSpec)(nil), "netproto.EndpointSpec")
	proto.RegisterType((*EndpointStatus)(nil), "netproto.EndpointStatus")
	proto.RegisterType((*EndpointList)(nil), "netproto.EndpointList")
	proto.RegisterType((*EndpointEvent)(nil), "netproto.EndpointEvent")
	proto.RegisterEnum("netproto.EndpointSpec_Type", EndpointSpec_Type_name, EndpointSpec_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EndpointApi service

type EndpointApiClient interface {
	CreateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	GetEndpoint(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Endpoint, error)
	ListEndpoints(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*EndpointList, error)
	DeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error)
	WatchEndpoints(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (EndpointApi_WatchEndpointsClient, error)
}

type endpointApiClient struct {
	cc *grpc.ClientConn
}

func NewEndpointApiClient(cc *grpc.ClientConn) EndpointApiClient {
	return &endpointApiClient{cc}
}

func (c *endpointApiClient) CreateEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/netproto.EndpointApi/CreateEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiClient) GetEndpoint(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/netproto.EndpointApi/GetEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiClient) ListEndpoints(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := grpc.Invoke(ctx, "/netproto.EndpointApi/ListEndpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiClient) DeleteEndpoint(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := grpc.Invoke(ctx, "/netproto.EndpointApi/DeleteEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointApiClient) WatchEndpoints(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (EndpointApi_WatchEndpointsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EndpointApi_serviceDesc.Streams[0], c.cc, "/netproto.EndpointApi/WatchEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointApiWatchEndpointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EndpointApi_WatchEndpointsClient interface {
	Recv() (*EndpointEvent, error)
	grpc.ClientStream
}

type endpointApiWatchEndpointsClient struct {
	grpc.ClientStream
}

func (x *endpointApiWatchEndpointsClient) Recv() (*EndpointEvent, error) {
	m := new(EndpointEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EndpointApi service

type EndpointApiServer interface {
	CreateEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	GetEndpoint(context.Context, *api.ObjectMeta) (*Endpoint, error)
	ListEndpoints(context.Context, *api.ObjectMeta) (*EndpointList, error)
	DeleteEndpoint(context.Context, *Endpoint) (*Endpoint, error)
	WatchEndpoints(*api.ObjectMeta, EndpointApi_WatchEndpointsServer) error
}

func RegisterEndpointApiServer(s *grpc.Server, srv EndpointApiServer) {
	s.RegisterService(&_EndpointApi_serviceDesc, srv)
}

func _EndpointApi_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointApiServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.EndpointApi/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointApiServer).CreateEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointApi_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointApiServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.EndpointApi/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointApiServer).GetEndpoint(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointApi_ListEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointApiServer).ListEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.EndpointApi/ListEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointApiServer).ListEndpoints(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointApi_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointApiServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.EndpointApi/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointApiServer).DeleteEndpoint(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointApi_WatchEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndpointApiServer).WatchEndpoints(m, &endpointApiWatchEndpointsServer{stream})
}

type EndpointApi_WatchEndpointsServer interface {
	Send(*EndpointEvent) error
	grpc.ServerStream
}

type endpointApiWatchEndpointsServer struct {
	grpc.ServerStream
}

func (x *endpointApiWatchEndpointsServer) Send(m *EndpointEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _EndpointApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.EndpointApi",
	HandlerType: (*EndpointApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEndpoint",
			Handler:    _EndpointApi_CreateEndpoint_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _EndpointApi_GetEndpoint_Handler,
		},
		{
			MethodName: "ListEndpoints",
			Handler:    _EndpointApi_ListEndpoints_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _EndpointApi_DeleteEndpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchEndpoints",
			Handler:       _EndpointApi_WatchEndpoints_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "endpoint.proto",
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *EndpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EndpointUUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.EndpointUUID)))
		i += copy(dAtA[i:], m.EndpointUUID)
	}
	if len(m.WorkloadUUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.WorkloadUUID)))
		i += copy(dAtA[i:], m.WorkloadUUID)
	}
	if len(m.WorkloadName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.WorkloadName)))
		i += copy(dAtA[i:], m.WorkloadName)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, _ := range m.WorkloadAttributes {
			dAtA[i] = 0x2a
			i++
			v := m.WorkloadAttributes[k]
			mapSize := 1 + len(k) + sovEndpoint(uint64(len(k))) + 1 + len(v) + sovEndpoint(uint64(len(v)))
			i = encodeVarintEndpoint(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.InterfaceType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.InterfaceType)))
		i += copy(dAtA[i:], m.InterfaceType)
	}
	if len(m.Interface) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.Interface)))
		i += copy(dAtA[i:], m.Interface)
	}
	if len(m.IPv4Address) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv4Address)))
		i += copy(dAtA[i:], m.IPv4Address)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Address) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv6Address)))
		i += copy(dAtA[i:], m.IPv6Address)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.HomingHostAddr) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostAddr)))
		i += copy(dAtA[i:], m.HomingHostAddr)
	}
	if len(m.HomingHostName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.HomingHostName)))
		i += copy(dAtA[i:], m.HomingHostName)
	}
	if len(m.NodeUUID) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(len(m.NodeUUID)))
		i += copy(dAtA[i:], m.NodeUUID)
	}
	if m.UsegVlan != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.UsegVlan))
	}
	return i, nil
}

func (m *EndpointStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnicID != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.EnicID))
	}
	return i, nil
}

func (m *EndpointList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEndpoint(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EndpointEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEndpoint(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintEndpoint(dAtA, i, uint64(m.Endpoint.Size()))
	n5, err := m.Endpoint.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintEndpoint(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	return n
}

func (m *EndpointSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.EndpointUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.WorkloadUUID)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.WorkloadName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	if len(m.WorkloadAttributes) > 0 {
		for k, v := range m.WorkloadAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEndpoint(uint64(len(k))) + 1 + len(v) + sovEndpoint(uint64(len(v)))
			n += mapEntrySize + 1 + sovEndpoint(uint64(mapEntrySize))
		}
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	l = len(m.InterfaceType)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.Interface)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv4Address)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv6Address)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostAddr)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.HomingHostName)
	if l > 0 {
		n += 1 + l + sovEndpoint(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 2 + l + sovEndpoint(uint64(l))
	}
	if m.UsegVlan != 0 {
		n += 2 + sovEndpoint(uint64(m.UsegVlan))
	}
	return n
}

func (m *EndpointStatus) Size() (n int) {
	var l int
	_ = l
	if m.EnicID != 0 {
		n += 1 + sovEndpoint(uint64(m.EnicID))
	}
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovEndpoint(uint64(l))
		}
	}
	return n
}

func (m *EndpointEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEndpoint(uint64(m.EventType))
	}
	l = m.Endpoint.Size()
	n += 1 + l + sovEndpoint(uint64(l))
	return n
}

func sovEndpoint(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEndpoint(x uint64) (n int) {
	return sovEndpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkloadAttributes == nil {
				m.WorkloadAttributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEndpoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEndpoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEndpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEndpoint
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEndpoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEndpoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkloadAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomingHostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomingHostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsegVlan", wireType)
			}
			m.UsegVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsegVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicID", wireType)
			}
			m.EnicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnicID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEndpoint
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEndpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEndpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEndpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEndpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEndpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEndpoint
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEndpoint
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEndpoint(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEndpoint = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEndpoint   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("endpoint.proto", fileDescriptorEndpoint) }

var fileDescriptorEndpoint = []byte{
	// 1087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xc7, 0xa3, 0xd8, 0x75, 0x6c, 0xba, 0x56, 0x5d, 0xb6, 0x4d, 0x14, 0xaf, 0x8d, 0x32, 0x03,
	0x03, 0x32, 0xa0, 0xb6, 0xbb, 0x34, 0x0b, 0xb6, 0xa0, 0x6b, 0x17, 0x2d, 0x4e, 0xea, 0x36, 0x75,
	0x83, 0xbc, 0xac, 0x67, 0x5a, 0x66, 0x14, 0xad, 0x36, 0x29, 0x98, 0x94, 0x03, 0x63, 0xe8, 0x61,
	0x18, 0xb0, 0xcf, 0xb0, 0x5b, 0x0f, 0x3b, 0x0c, 0xd8, 0x71, 0x9f, 0xa2, 0xc7, 0x7e, 0x02, 0x61,
	0xc8, 0x6e, 0xfa, 0x14, 0x03, 0x69, 0xcb, 0xa2, 0x65, 0x65, 0x87, 0xde, 0xc8, 0x87, 0xff, 0xdf,
	0xff, 0x79, 0xc4, 0x57, 0x01, 0x1d, 0x93, 0xae, 0x47, 0x5d, 0xc2, 0xeb, 0xde, 0x80, 0x72, 0x0a,
	0xf3, 0x04, 0x73, 0xd9, 0xaa, 0xdc, 0x77, 0x28, 0x75, 0x7a, 0xb8, 0x81, 0x3c, 0xb7, 0x81, 0x08,
	0xa1, 0x1c, 0x71, 0x97, 0x12, 0x36, 0xd6, 0x55, 0x9a, 0x8e, 0xcb, 0x2f, 0xfc, 0x4e, 0xdd, 0xa6,
	0xfd, 0x86, 0x87, 0x09, 0x43, 0xa4, 0x4b, 0x1b, 0xec, 0xb2, 0x31, 0xc4, 0xc4, 0xb5, 0x71, 0xc3,
	0xe7, 0x6e, 0x8f, 0x09, 0xd4, 0xc1, 0x44, 0xa5, 0x1b, 0x2e, 0xb1, 0x7b, 0x7e, 0x17, 0x47, 0x36,
	0x35, 0xc5, 0xc6, 0xa1, 0x0e, 0x6d, 0xc8, 0x70, 0xc7, 0x3f, 0x97, 0x3d, 0xd9, 0x91, 0xad, 0x89,
	0xfc, 0x8b, 0x6b, 0xb2, 0x8a, 0x1a, 0xfb, 0x98, 0xa3, 0xb1, 0xac, 0xfa, 0xe7, 0x22, 0xc8, 0x37,
	0x27, 0xdf, 0x05, 0x9f, 0x82, 0xfc, 0xe9, 0xc8, 0xc3, 0xaf, 0x30, 0x47, 0x86, 0xb6, 0xae, 0x6d,
	0x14, 0x37, 0x4b, 0x75, 0xe4, 0xb9, 0xf5, 0x28, 0x68, 0xdd, 0xf9, 0x10, 0x98, 0x0b, 0x1f, 0x03,
	0x53, 0x0b, 0x03, 0x73, 0xe9, 0xa1, 0x4b, 0x7a, 0x2e, 0xc1, 0xc7, 0x53, 0x06, 0xbe, 0x04, 0xe0,
	0x75, 0xe7, 0x27, 0x6c, 0x73, 0xe9, 0xb0, 0x28, 0x1d, 0x6e, 0x49, 0x87, 0x38, 0x6c, 0x55, 0x14,
	0x0f, 0x5d, 0x54, 0xf2, 0x90, 0xf6, 0x5d, 0x8e, 0xfb, 0x1e, 0x1f, 0x1d, 0x2b, 0x38, 0xb4, 0x40,
	0xf6, 0xc4, 0xc3, 0xb6, 0x91, 0x91, 0x36, 0xcb, 0xf5, 0x68, 0xb6, 0xeb, 0x51, 0xb9, 0x62, 0xd4,
	0x5a, 0x16, 0x6e, 0xc2, 0x89, 0x79, 0xd8, 0x56, 0x9c, 0x24, 0x0b, 0x5f, 0x80, 0xdc, 0x09, 0x47,
	0xdc, 0x67, 0x46, 0x56, 0xba, 0x18, 0x29, 0x2e, 0x72, 0xdc, 0x32, 0x26, 0x3e, 0x65, 0x26, 0xfb,
	0x8a, 0xd3, 0xc4, 0xa1, 0xfa, 0x1e, 0x80, 0x9b, 0x6a, 0x6a, 0xf8, 0x2c, 0xee, 0x9f, 0x9d, 0xb5,
	0xf6, 0xe4, 0x8c, 0x15, 0xac, 0xcf, 0xc2, 0xc0, 0x5c, 0x89, 0x76, 0x4a, 0xcd, 0xf7, 0xdd, 0xae,
	0xe2, 0x35, 0x03, 0x08, 0x83, 0x37, 0x74, 0xf0, 0xb6, 0x47, 0x51, 0x57, 0x1a, 0x2c, 0xc6, 0x06,
	0x97, 0x93, 0xf8, 0x9c, 0x81, 0x0a, 0xa8, 0x06, 0x6d, 0xd4, 0xc7, 0x72, 0xaa, 0x92, 0x06, 0x04,
	0xf5, 0x71, 0x9a, 0x81, 0x00, 0xe0, 0x13, 0x50, 0x6c, 0x63, 0x2e, 0xb4, 0x92, 0xcf, 0x4a, 0xbe,
	0x12, 0x06, 0xe6, 0x32, 0x19, 0x87, 0x93, 0xb8, 0x2a, 0x87, 0xbf, 0x68, 0x00, 0x46, 0x76, 0xbb,
	0x9c, 0x0f, 0xdc, 0x8e, 0xcf, 0x31, 0x33, 0x6e, 0xac, 0x67, 0x36, 0x8a, 0x9b, 0xf5, 0xf4, 0x05,
	0xab, 0xcf, 0x03, 0x4d, 0xc2, 0x07, 0x23, 0xeb, 0xf3, 0x30, 0x30, 0x1f, 0x4c, 0xab, 0x46, 0xd3,
	0x51, 0x25, 0x79, 0x4a, 0x32, 0xd8, 0x04, 0xfa, 0x09, 0xb6, 0xfd, 0x81, 0xcb, 0x47, 0x07, 0x03,
	0xea, 0x7b, 0xcc, 0xc8, 0xad, 0x67, 0x36, 0x0a, 0xd6, 0x83, 0x30, 0x30, 0x57, 0xd9, 0x64, 0xa4,
	0xe6, 0xc8, 0x21, 0xc5, 0x2a, 0x01, 0xc1, 0x0e, 0x28, 0xb5, 0x08, 0xc7, 0x83, 0x73, 0x64, 0x63,
	0xb1, 0x9d, 0x8d, 0x25, 0x39, 0x15, 0x4f, 0xfe, 0xfa, 0x6d, 0xf5, 0xfe, 0x09, 0x1f, 0x34, 0x89,
	0xdf, 0xdf, 0x98, 0xf9, 0x8c, 0xd6, 0xbe, 0x90, 0x7d, 0x19, 0x06, 0xa6, 0xe1, 0x46, 0x60, 0x8d,
	0x8f, 0x3c, 0x75, 0xb2, 0x66, 0x2d, 0xe1, 0xd7, 0xa0, 0x30, 0x0d, 0x18, 0x79, 0xe9, 0xbf, 0x12,
	0x06, 0xe6, 0x9d, 0x29, 0xaf, 0xa0, 0xb1, 0x52, 0xac, 0x51, 0xeb, 0x68, 0xb8, 0xb5, 0xdb, 0xed,
	0x0e, 0x30, 0x63, 0x46, 0x21, 0x5e, 0x23, 0xd7, 0x1b, 0x6e, 0xd5, 0xd0, 0x38, 0xae, 0xae, 0x91,
	0x22, 0x8f, 0xe8, 0x03, 0xc4, 0xf1, 0x25, 0x1a, 0x19, 0x20, 0x41, 0x3b, 0xe3, 0x78, 0x92, 0x9e,
	0xc8, 0x27, 0xf4, 0x76, 0x94, 0xbb, 0x38, 0x43, 0x6f, 0x5f, 0x93, 0x7b, 0x7b, 0x36, 0xf7, 0x76,
	0x94, 0xfb, 0x66, 0x82, 0x4e, 0xcf, 0x1d, 0xc9, 0xe1, 0xb7, 0x00, 0xbc, 0x42, 0x76, 0x94, 0xba,
	0x24, 0xe1, 0xd5, 0x30, 0x30, 0xef, 0xf5, 0x91, 0x9d, 0x92, 0x59, 0x11, 0xc3, 0x16, 0xd0, 0x9f,
	0xd3, 0xbe, 0x4b, 0x9c, 0xe7, 0x94, 0x71, 0x11, 0x34, 0x74, 0x89, 0xcb, 0x3d, 0x76, 0x21, 0x47,
	0x6a, 0x17, 0x94, 0xf1, 0x14, 0x9b, 0x04, 0x08, 0xf7, 0x55, 0x2b, 0x79, 0x48, 0x6e, 0x49, 0xab,
	0xb5, 0x30, 0x30, 0x2b, 0xaa, 0x55, 0xe2, 0xa0, 0x24, 0x28, 0xf8, 0x18, 0xe4, 0xdb, 0xb4, 0x8b,
	0xe5, 0x39, 0x2f, 0xc7, 0x6b, 0x4f, 0x68, 0x17, 0x27, 0xcf, 0xf8, 0x54, 0x28, 0xa0, 0x33, 0x86,
	0x9d, 0x1f, 0x7b, 0x88, 0x18, 0xb7, 0xd7, 0xb5, 0x8d, 0xd2, 0x18, 0xf2, 0x19, 0x76, 0x6a, 0xc3,
	0x1e, 0x22, 0x2a, 0x14, 0x09, 0x2b, 0x4d, 0xb0, 0x72, 0xcd, 0x19, 0x83, 0x65, 0x90, 0x79, 0x8b,
	0x47, 0xe3, 0x8b, 0xea, 0x58, 0x34, 0xe1, 0x5d, 0x70, 0x63, 0x88, 0x7a, 0x3e, 0x1e, 0xdf, 0x3d,
	0xc7, 0xe3, 0xce, 0xce, 0xe2, 0x37, 0x5a, 0xf5, 0x2b, 0x90, 0x95, 0xbb, 0x36, 0x0f, 0xb2, 0xed,
	0xd7, 0xed, 0x66, 0x79, 0x01, 0x2e, 0x81, 0xcc, 0x61, 0x6b, 0xbf, 0xac, 0x41, 0x00, 0x72, 0x67,
	0x47, 0x87, 0xad, 0xf6, 0xcb, 0xf2, 0xa2, 0x68, 0x9f, 0x9e, 0xb5, 0xdb, 0xcd, 0xc3, 0x72, 0xa6,
	0xfa, 0x0c, 0xe8, 0xb3, 0xb7, 0x2a, 0xac, 0x81, 0x5c, 0x93, 0xb8, 0x76, 0x6b, 0x4f, 0x6e, 0xbc,
	0xac, 0x75, 0x2f, 0x0c, 0xcc, 0xdb, 0xe2, 0xd9, 0xab, 0xcd, 0x7c, 0xf1, 0x44, 0x54, 0xfd, 0x3e,
	0xbe, 0x51, 0x0f, 0x5d, 0xc6, 0xe1, 0x23, 0x50, 0x88, 0x6e, 0x52, 0x66, 0x68, 0xf2, 0x5a, 0x81,
	0xf3, 0xd7, 0xca, 0x71, 0x2c, 0xaa, 0xfe, 0xa1, 0x81, 0x52, 0x14, 0x6f, 0x0e, 0x31, 0xe1, 0x70,
	0x1f, 0x14, 0x64, 0x43, 0x9e, 0x6a, 0xf1, 0xe5, 0xfa, 0xa6, 0x2e, 0x9f, 0xa4, 0x69, 0xd4, 0x32,
	0xc2, 0xc0, 0xbc, 0x8b, 0x45, 0x37, 0x79, 0x82, 0x63, 0x14, 0xbe, 0x88, 0xdf, 0xc9, 0xc9, 0xcb,
	0x96, 0x52, 0xca, 0xf8, 0x71, 0x0b, 0x03, 0x13, 0x46, 0x25, 0xa9, 0x4b, 0x14, 0xa9, 0x36, 0xdf,
	0x67, 0x40, 0x31, 0xea, 0xec, 0x7a, 0x2e, 0xdc, 0x01, 0xfa, 0x0f, 0x03, 0x8c, 0x38, 0x9e, 0xbe,
	0xc4, 0x29, 0xde, 0x95, 0x94, 0x58, 0x75, 0x01, 0x6e, 0x81, 0xe2, 0x01, 0xe6, 0x53, 0x30, 0xf9,
	0xdc, 0x5e, 0x43, 0xed, 0x80, 0x92, 0x98, 0xe1, 0x28, 0xc2, 0xe6, 0xb9, 0x94, 0x07, 0x57, 0x10,
	0x92, 0xd5, 0xf7, 0x70, 0x0f, 0x7f, 0x52, 0xb5, 0x4f, 0x81, 0xfe, 0x06, 0x71, 0xfb, 0xe2, 0x7f,
	0x12, 0xaf, 0xcc, 0x83, 0x72, 0x15, 0xaa, 0x0b, 0x8f, 0xb4, 0xca, 0xf9, 0xdf, 0xbf, 0xae, 0x76,
	0x94, 0x3f, 0x96, 0x6c, 0x4f, 0xec, 0x93, 0xac, 0x47, 0x19, 0x87, 0x19, 0xcf, 0xe7, 0x30, 0xd7,
	0x95, 0xa5, 0x55, 0xbe, 0x6b, 0xfc, 0x1c, 0x7b, 0xd6, 0x4f, 0x31, 0x41, 0x84, 0xbf, 0x9b, 0x89,
	0x89, 0x63, 0xc9, 0x3c, 0x64, 0xe3, 0xf9, 0xf0, 0x3b, 0xab, 0xfc, 0xe1, 0x6a, 0x4d, 0xfb, 0x78,
	0xb5, 0xa6, 0xfd, 0x73, 0xb5, 0xa6, 0xfd, 0xfe, 0xef, 0xda, 0xc2, 0x91, 0xd6, 0xc9, 0xc9, 0xa2,
	0x1e, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x81, 0xf2, 0xe4, 0x08, 0x0a, 0x00, 0x00,
}
