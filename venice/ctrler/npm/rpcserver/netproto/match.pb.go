// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MatchSelector_Type int32

const (
	MatchSelector_NONE          MatchSelector_Type = 0
	MatchSelector_IP            MatchSelector_Type = 1
	MatchSelector_IPPrefix      MatchSelector_Type = 2
	MatchSelector_IPRange       MatchSelector_Type = 3
	MatchSelector_SecurityGroup MatchSelector_Type = 4
)

var MatchSelector_Type_name = map[int32]string{
	0: "NONE",
	1: "IP",
	2: "IPPrefix",
	3: "IPRange",
	4: "SecurityGroup",
}
var MatchSelector_Type_value = map[string]int32{
	"NONE":          0,
	"IP":            1,
	"IPPrefix":      2,
	"IPRange":       3,
	"SecurityGroup": 4,
}

func (x MatchSelector_Type) String() string {
	return proto.EnumName(MatchSelector_Type_name, int32(x))
}
func (MatchSelector_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorMatch, []int{0, 0} }

// Common MatchSelector
type MatchSelector struct {
	MatchType string `protobuf:"bytes,1,opt,name=MatchType,proto3" json:"match-type"`
	Match     string `protobuf:"bytes,2,opt,name=Match,proto3" json:"match"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMatch, []int{0} }

func (m *MatchSelector) GetMatchType() string {
	if m != nil {
		return m.MatchType
	}
	return ""
}

func (m *MatchSelector) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func init() {
	proto.RegisterType((*MatchSelector)(nil), "netproto.MatchSelector")
	proto.RegisterEnum("netproto.MatchSelector_Type", MatchSelector_Type_name, MatchSelector_Type_value)
}
func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MatchType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.MatchType)))
		i += copy(dAtA[i:], m.MatchType)
	}
	if len(m.Match) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Match)))
		i += copy(dAtA[i:], m.Match)
	}
	return i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	l = len(m.MatchType)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Match)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func sovMatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("match.proto", fileDescriptorMatch) }

var fileDescriptorMatch = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x29, 0x02, 0x42, 0x91, 0x64, 0xec, 0x0a, 0xd1, 0x0c, 0x86, 0xc4, 0x04, 0x17, 0xd0,
	0x85, 0x37, 0x20, 0x41, 0x43, 0x8c, 0x38, 0x01, 0x2f, 0x50, 0x86, 0x47, 0x69, 0x32, 0xd3, 0x4e,
	0x3a, 0xad, 0xca, 0x05, 0x3c, 0x83, 0x67, 0xf0, 0x1e, 0x26, 0x2e, 0x3d, 0x01, 0x31, 0xb8, 0xe3,
	0x14, 0x66, 0x3a, 0x1a, 0x71, 0xe1, 0xee, 0xfd, 0x7f, 0xbe, 0xff, 0x6f, 0xdf, 0xc3, 0xf5, 0x98,
	0x99, 0x70, 0xd9, 0x4f, 0xb4, 0x32, 0x8a, 0x54, 0x25, 0x18, 0x37, 0xb5, 0x4e, 0xb8, 0x52, 0x3c,
	0x02, 0xca, 0x12, 0x41, 0x99, 0x94, 0xca, 0x30, 0x23, 0x94, 0x4c, 0x73, 0xae, 0x35, 0xe4, 0xc2,
	0x2c, 0xed, 0xac, 0x1f, 0xaa, 0x98, 0x26, 0x20, 0x53, 0x26, 0xe7, 0x8a, 0xa6, 0x0f, 0xf4, 0x1e,
	0xa4, 0x08, 0x81, 0x5a, 0x23, 0xa2, 0x34, 0x8b, 0x72, 0x90, 0xbb, 0x69, 0x2a, 0x64, 0x18, 0xd9,
	0x39, 0xfc, 0xd4, 0xf4, 0x76, 0x6a, 0xb8, 0xe2, 0x8a, 0x3a, 0x7b, 0x66, 0x17, 0x4e, 0x39, 0xe1,
	0xa6, 0x6f, 0xfc, 0xec, 0x9f, 0x57, 0xb3, 0x3f, 0xc6, 0x60, 0x58, 0x8e, 0x75, 0x5e, 0x11, 0x6e,
	0xdc, 0x64, 0x4b, 0x4d, 0x21, 0x82, 0xd0, 0x28, 0x4d, 0xae, 0x71, 0xcd, 0x19, 0x77, 0xab, 0x04,
	0x9a, 0xe8, 0x14, 0x75, 0x6b, 0x83, 0xde, 0xcb, 0xd3, 0xd1, 0xf1, 0xd4, 0xe8, 0xa1, 0xb4, 0x71,
	0xf7, 0x0f, 0xdd, 0xcf, 0xa8, 0xf3, 0xed, 0xba, 0x8d, 0xdd, 0x65, 0x7a, 0x66, 0x95, 0xc0, 0xe4,
	0x37, 0x4f, 0xda, 0xb8, 0xec, 0x44, 0xb3, 0xe8, 0x8a, 0x6a, 0xdb, 0x75, 0xbb, 0xec, 0xc8, 0x49,
	0xee, 0x77, 0x2e, 0x71, 0xc9, 0x81, 0x55, 0x5c, 0x1a, 0xdf, 0x8e, 0x87, 0x5e, 0x81, 0x54, 0x70,
	0x71, 0x14, 0x78, 0x88, 0x1c, 0xe0, 0xea, 0x28, 0x08, 0x34, 0x2c, 0xc4, 0xa3, 0x57, 0x24, 0x75,
	0xbc, 0x3f, 0x0a, 0x26, 0x4c, 0x72, 0xf0, 0xf6, 0xc8, 0x21, 0x6e, 0x4c, 0x21, 0xb4, 0x5a, 0x98,
	0xd5, 0x95, 0x56, 0x36, 0xf1, 0x4a, 0x03, 0xef, 0x6d, 0xe3, 0xa3, 0xf7, 0x8d, 0x8f, 0x3e, 0x36,
	0x3e, 0x7a, 0xfe, 0xf4, 0x0b, 0x01, 0x9a, 0x55, 0xdc, 0x8a, 0x17, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x96, 0x3e, 0x1c, 0xac, 0xb6, 0x01, 0x00, 0x00,
}
