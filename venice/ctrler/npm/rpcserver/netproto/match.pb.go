// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Common MatchSelector. ToDo Add ICMP Match criteria
type MatchSelector struct {
	// Automatically interpret the string as an octet, a CIDR or an hyphen separated range
	Addresses []string `protobuf:"bytes,1,rep,name=Addresses" json:"addresses,omitempty"`
	// Match on the security group
	SecurityGroups []string `protobuf:"bytes,2,rep,name=SecurityGroups" json:"security-groups,omitempty"`
	// Match on the App info
	AppConfigs []*AppConfig `protobuf:"bytes,4,rep,name=AppConfigs" json:"app-configs,omitempty"`
}

func (m *MatchSelector) Reset()                    { *m = MatchSelector{} }
func (m *MatchSelector) String() string            { return proto.CompactTextString(m) }
func (*MatchSelector) ProtoMessage()               {}
func (*MatchSelector) Descriptor() ([]byte, []int) { return fileDescriptorMatch, []int{0} }

func (m *MatchSelector) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *MatchSelector) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *MatchSelector) GetAppConfigs() []*AppConfig {
	if m != nil {
		return m.AppConfigs
	}
	return nil
}

type AppConfig struct {
	// Protocol for the app. If the protocol is icmp, then the port field gets interpreted as ICMP Type.
	// ICMP Code will be fetched from its corresponding App Object
	Protocol string `protobuf:"bytes,1,opt,name=Protocol,proto3" json:"protocol,omitempty"`
	// Port for the app
	Port string `protobuf:"bytes,2,opt,name=Port,proto3" json:"port,omitempty"`
	// Additional ALG configurations
	AppName string `protobuf:"bytes,3,opt,name=AppName,proto3" json:"app-name,omitempty"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptorMatch, []int{1} }

func (m *AppConfig) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AppConfig) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *AppConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func init() {
	proto.RegisterType((*MatchSelector)(nil), "netproto.MatchSelector")
	proto.RegisterType((*AppConfig)(nil), "netproto.AppConfig")
}
func (m *MatchSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AppConfigs) > 0 {
		for _, msg := range m.AppConfigs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	return i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchSelector) Size() (n int) {
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if len(m.AppConfigs) > 0 {
		for _, e := range m.AppConfigs {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	return n
}

func (m *AppConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	return n
}

func sovMatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MatchSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppConfigs = append(m.AppConfigs, &AppConfig{})
			if err := m.AppConfigs[len(m.AppConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("match.proto", fileDescriptorMatch) }

var fileDescriptorMatch = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0x87, 0xf1, 0x3a, 0xc1, 0xea, 0x89, 0x09, 0x79, 0x02, 0xb2, 0x09, 0x9a, 0x6a, 0x12, 0xa8,
	0x17, 0x34, 0x46, 0x43, 0x3c, 0x40, 0x83, 0x26, 0xae, 0x98, 0x2a, 0xf6, 0x04, 0xae, 0x73, 0xe6,
	0x59, 0x4a, 0x7c, 0xac, 0xd8, 0x01, 0xed, 0x4d, 0xe0, 0x8d, 0xb8, 0xe4, 0x05, 0x88, 0x50, 0xb9,
	0xcb, 0x53, 0xa0, 0xb8, 0x4d, 0x6b, 0x21, 0x71, 0x77, 0xfe, 0x7c, 0xbf, 0x2f, 0x27, 0xa6, 0xc7,
	0x95, 0xf0, 0xf2, 0x2e, 0xb3, 0x35, 0x7a, 0x64, 0x47, 0x06, 0x7c, 0xa8, 0xce, 0x5f, 0x28, 0x44,
	0x55, 0x02, 0x17, 0x56, 0x73, 0x61, 0x0c, 0x7a, 0xe1, 0x35, 0x1a, 0xb7, 0xe1, 0xce, 0xaf, 0x94,
	0xf6, 0x77, 0xcd, 0x2a, 0x93, 0x58, 0x71, 0x0b, 0xc6, 0x09, 0x53, 0x20, 0x77, 0x5f, 0xf9, 0x17,
	0x30, 0x5a, 0x02, 0x6f, 0xbc, 0x2e, 0x5d, 0x1f, 0x55, 0x60, 0xe2, 0x34, 0xd7, 0x46, 0x96, 0x4d,
	0x01, 0x83, 0x66, 0x1e, 0x69, 0x14, 0x2a, 0xe4, 0x61, 0xbc, 0x6a, 0x6e, 0x43, 0x17, 0x9a, 0x50,
	0x6d, 0xf1, 0x57, 0xff, 0xf9, 0x6a, 0x7f, 0x63, 0x05, 0x5e, 0x6c, 0xb0, 0x8b, 0x5f, 0x84, 0x3e,
	0xfe, 0xd4, 0xff, 0xd4, 0x0d, 0x94, 0x20, 0x3d, 0xd6, 0xec, 0x3d, 0x1d, 0x2f, 0x8a, 0xa2, 0x06,
	0xe7, 0xc0, 0x25, 0x64, 0x3a, 0x9a, 0x8d, 0xf3, 0xe7, 0x5d, 0x9b, 0x9e, 0x8a, 0x61, 0xf8, 0x06,
	0x2b, 0xed, 0xa1, 0xb2, 0xfe, 0xfe, 0xf3, 0x9e, 0x64, 0x57, 0xf4, 0xe4, 0x06, 0x64, 0x53, 0x6b,
	0x7f, 0xff, 0xb1, 0xc6, 0xc6, 0xba, 0xe4, 0x20, 0x64, 0x5f, 0x76, 0x6d, 0x7a, 0xe6, 0xb6, 0x9b,
	0xb9, 0x0a, 0xab, 0xc8, 0xf0, 0x4f, 0x88, 0x5d, 0x53, 0xba, 0xb0, 0xf6, 0x03, 0x9a, 0x5b, 0xad,
	0x5c, 0x72, 0x38, 0x1d, 0xcd, 0x8e, 0x2f, 0x4f, 0xb3, 0xe1, 0xa5, 0xb3, 0xdd, 0x2e, 0x3f, 0xeb,
	0xda, 0xf4, 0xa9, 0xb0, 0x76, 0x2e, 0x37, 0x6c, 0xe4, 0x8c, 0x0c, 0x17, 0xdf, 0x09, 0x1d, 0xef,
	0x5a, 0x76, 0x49, 0x8f, 0x96, 0xbd, 0x47, 0x62, 0x99, 0x90, 0x29, 0x99, 0x8d, 0xf3, 0x67, 0x5d,
	0x9b, 0x32, 0xbb, 0x9d, 0x45, 0x8e, 0x1d, 0xc7, 0x5e, 0xd3, 0xc3, 0x25, 0xd6, 0x3e, 0x39, 0x08,
	0x3c, 0xeb, 0xda, 0xf4, 0xc4, 0x62, 0xed, 0x23, 0x36, 0xec, 0xd9, 0x5b, 0xfa, 0x68, 0x61, 0xed,
	0xb5, 0xa8, 0x20, 0x19, 0xed, 0xd5, 0xfd, 0x85, 0x46, 0x54, 0x10, 0xe1, 0x03, 0x96, 0x3f, 0xf9,
	0xb1, 0x9e, 0x90, 0x9f, 0xeb, 0x09, 0xf9, 0xbd, 0x9e, 0x90, 0x6f, 0x7f, 0x26, 0x0f, 0x96, 0x64,
	0xf5, 0x30, 0xdc, 0xf2, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xd8, 0x73, 0x0c, 0x6a,
	0x02, 0x00, 0x00,
}
