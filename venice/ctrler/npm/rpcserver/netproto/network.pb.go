// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

/*
	Package netproto is a generated protocol buffer package.

	It is generated from these files:
		network.proto
		endpoint.proto
		security.proto
		service.proto
		tenant.proto
		interface.proto
		nat.proto
		route.proto
		namespace.proto
		ipsec.proto
		match.proto

	It has these top-level messages:
		Network
		NetworkSpec
		NetworkStatus
		NetworkList
		NetworkEvent
		NetworkEventList
		Endpoint
		EndpointSpec
		EndpointStatus
		EndpointList
		EndpointEvent
		SecurityGroup
		SecurityGroupSpec
		SecurityRule
		SecurityGroupStatus
		SecurityGroupList
		SecurityGroupEvent
		ServiceBackend
		ServiceSpec
		HealthCheck
		ServiceStatus
		Service
		ServiceBackendSpec
		ServiceBackendStatus
		TenantStatus
		TenantSpec
		Tenant
		TenantList
		TenantEvent
		Interface
		InterfaceSpec
		InterfaceStatus
		EnicStatus
		InterfaceList
		InterfaceEvent
		NatPool
		NatPoolSpec
		NatPoolStatus
		NatPoolList
		NatPoolEvent
		NatBinding
		NatBindingSpec
		NatBindingStatus
		NatBindingList
		NatBindingEvent
		NatPolicy
		NatPolicySpec
		NatRule
		NatPolicyStatus
		NatPolicyList
		NatPolicyEvent
		Route
		RouteSpec
		RouteStatus
		RouteList
		RouteEvent
		Namespace
		NamespaceSpec
		NamespaceStatus
		NamespaceList
		NamespaceEvent
		IPSecPolicy
		IPSecPolicySpec
		IPSecRule
		IPSecPolicyStatus
		IPSecPolicyList
		IPSecPolicyEvent
		IPSecSAEncrypt
		IPSecSAEncryptSpec
		Protocol
		AuthAlgorithm
		EncryptionAlgorithm
		IPSecSAEncryptStatus
		IPSecSAEncryptList
		IPSecSAEncryptEvent
		IPSecSADecrypt
		IPSecSADecryptSpec
		IPSecSADecryptStatus
		IPSecSADecryptList
		IPSecSADecryptEvent
		MatchSelector
*/
package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// network object
type Network struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NetworkSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NetworkStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

func (m *Network) GetSpec() NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return NetworkSpec{}
}

func (m *Network) GetStatus() NetworkStatus {
	if m != nil {
		return m.Status
	}
	return NetworkStatus{}
}

// network spec
type NetworkSpec struct {
	IPv4Subnet  string `protobuf:"bytes,1,opt,name=IPv4Subnet,proto3" json:"IPv4Subnet,omitempty"`
	IPv4Gateway string `protobuf:"bytes,2,opt,name=IPv4Gateway,proto3" json:"IPv4Gateway,omitempty"`
	IPv6Subnet  string `protobuf:"bytes,3,opt,name=IPv6Subnet,proto3" json:"IPv6Subnet,omitempty"`
	IPv6Gateway string `protobuf:"bytes,4,opt,name=IPv6Gateway,proto3" json:"IPv6Gateway,omitempty"`
	VlanID      uint32 `protobuf:"varint,5,opt,name=VlanID,proto3" json:"VlanID,omitempty"`
	VxlanVNI    uint32 `protobuf:"varint,6,opt,name=VxlanVNI,proto3" json:"VxlanVNI,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{1} }

func (m *NetworkSpec) GetIPv4Subnet() string {
	if m != nil {
		return m.IPv4Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv4Gateway() string {
	if m != nil {
		return m.IPv4Gateway
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Subnet() string {
	if m != nil {
		return m.IPv6Subnet
	}
	return ""
}

func (m *NetworkSpec) GetIPv6Gateway() string {
	if m != nil {
		return m.IPv6Gateway
	}
	return ""
}

func (m *NetworkSpec) GetVlanID() uint32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

func (m *NetworkSpec) GetVxlanVNI() uint32 {
	if m != nil {
		return m.VxlanVNI
	}
	return 0
}

// network status
type NetworkStatus struct {
	AllocatedVlanID   uint32 `protobuf:"varint,1,opt,name=AllocatedVlanID,proto3" json:"AllocatedVlanID,omitempty"`
	AllocatedVxlanVNI uint32 `protobuf:"varint,2,opt,name=AllocatedVxlanVNI,proto3" json:"AllocatedVxlanVNI,omitempty"`
	NetworkID         uint64 `protobuf:"varint,3,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	NetworkHandle     uint64 `protobuf:"varint,4,opt,name=NetworkHandle,proto3" json:"NetworkHandle,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

func (m *NetworkStatus) GetAllocatedVlanID() uint32 {
	if m != nil {
		return m.AllocatedVlanID
	}
	return 0
}

func (m *NetworkStatus) GetAllocatedVxlanVNI() uint32 {
	if m != nil {
		return m.AllocatedVxlanVNI
	}
	return 0
}

func (m *NetworkStatus) GetNetworkID() uint64 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

func (m *NetworkStatus) GetNetworkHandle() uint64 {
	if m != nil {
		return m.NetworkHandle
	}
	return 0
}

// list of networks
type NetworkList struct {
	Networks []*Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
}

func (m *NetworkList) Reset()                    { *m = NetworkList{} }
func (m *NetworkList) String() string            { return proto.CompactTextString(m) }
func (*NetworkList) ProtoMessage()               {}
func (*NetworkList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{3} }

func (m *NetworkList) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

// network watch event
type NetworkEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Network   Network       `protobuf:"bytes,2,opt,name=Network" json:"network,omitempty"`
}

func (m *NetworkEvent) Reset()                    { *m = NetworkEvent{} }
func (m *NetworkEvent) String() string            { return proto.CompactTextString(m) }
func (*NetworkEvent) ProtoMessage()               {}
func (*NetworkEvent) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{4} }

func (m *NetworkEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NetworkEvent) GetNetwork() Network {
	if m != nil {
		return m.Network
	}
	return Network{}
}

type NetworkEventList struct {
	NetworkEvents []*NetworkEvent `protobuf:"bytes,1,rep,name=networkEvents" json:"networkEvents,omitempty"`
}

func (m *NetworkEventList) Reset()                    { *m = NetworkEventList{} }
func (m *NetworkEventList) String() string            { return proto.CompactTextString(m) }
func (*NetworkEventList) ProtoMessage()               {}
func (*NetworkEventList) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{5} }

func (m *NetworkEventList) GetNetworkEvents() []*NetworkEvent {
	if m != nil {
		return m.NetworkEvents
	}
	return nil
}

func init() {
	proto.RegisterType((*Network)(nil), "netproto.Network")
	proto.RegisterType((*NetworkSpec)(nil), "netproto.NetworkSpec")
	proto.RegisterType((*NetworkStatus)(nil), "netproto.NetworkStatus")
	proto.RegisterType((*NetworkList)(nil), "netproto.NetworkList")
	proto.RegisterType((*NetworkEvent)(nil), "netproto.NetworkEvent")
	proto.RegisterType((*NetworkEventList)(nil), "netproto.NetworkEventList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkApi service

type NetworkApiClient interface {
	GetNetwork(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Network, error)
	ListNetworks(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NetworkList, error)
	WatchNetworks(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NetworkApi_WatchNetworksClient, error)
}

type networkApiClient struct {
	cc *grpc.ClientConn
}

func NewNetworkApiClient(cc *grpc.ClientConn) NetworkApiClient {
	return &networkApiClient{cc}
}

func (c *networkApiClient) GetNetwork(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := grpc.Invoke(ctx, "/netproto.NetworkApi/GetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkApiClient) ListNetworks(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NetworkList, error) {
	out := new(NetworkList)
	err := grpc.Invoke(ctx, "/netproto.NetworkApi/ListNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkApiClient) WatchNetworks(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NetworkApi_WatchNetworksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NetworkApi_serviceDesc.Streams[0], c.cc, "/netproto.NetworkApi/WatchNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkApiWatchNetworksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkApi_WatchNetworksClient interface {
	Recv() (*NetworkEventList, error)
	grpc.ClientStream
}

type networkApiWatchNetworksClient struct {
	grpc.ClientStream
}

func (x *networkApiWatchNetworksClient) Recv() (*NetworkEventList, error) {
	m := new(NetworkEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NetworkApi service

type NetworkApiServer interface {
	GetNetwork(context.Context, *api.ObjectMeta) (*Network, error)
	ListNetworks(context.Context, *api.ObjectMeta) (*NetworkList, error)
	WatchNetworks(*api.ObjectMeta, NetworkApi_WatchNetworksServer) error
}

func RegisterNetworkApiServer(s *grpc.Server, srv NetworkApiServer) {
	s.RegisterService(&_NetworkApi_serviceDesc, srv)
}

func _NetworkApi_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkApiServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NetworkApi/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkApiServer).GetNetwork(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkApi_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkApiServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NetworkApi/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkApiServer).ListNetworks(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkApi_WatchNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkApiServer).WatchNetworks(m, &networkApiWatchNetworksServer{stream})
}

type NetworkApi_WatchNetworksServer interface {
	Send(*NetworkEventList) error
	grpc.ServerStream
}

type networkApiWatchNetworksServer struct {
	grpc.ServerStream
}

func (x *networkApiWatchNetworksServer) Send(m *NetworkEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _NetworkApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NetworkApi",
	HandlerType: (*NetworkApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetwork",
			Handler:    _NetworkApi_GetNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _NetworkApi_ListNetworks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNetworks",
			Handler:       _NetworkApi_WatchNetworks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *NetworkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPv4Subnet) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Subnet)))
		i += copy(dAtA[i:], m.IPv4Subnet)
	}
	if len(m.IPv4Gateway) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv4Gateway)))
		i += copy(dAtA[i:], m.IPv4Gateway)
	}
	if len(m.IPv6Subnet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Subnet)))
		i += copy(dAtA[i:], m.IPv6Subnet)
	}
	if len(m.IPv6Gateway) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.IPv6Gateway)))
		i += copy(dAtA[i:], m.IPv6Gateway)
	}
	if m.VlanID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.VxlanVNI))
	}
	return i, nil
}

func (m *NetworkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocatedVlanID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.AllocatedVlanID))
	}
	if m.AllocatedVxlanVNI != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.AllocatedVxlanVNI))
	}
	if m.NetworkID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.NetworkID))
	}
	if m.NetworkHandle != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.NetworkHandle))
	}
	return i, nil
}

func (m *NetworkList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetwork(dAtA, i, uint64(m.Network.Size()))
	n5, err := m.Network.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NetworkEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkEvents) > 0 {
		for _, msg := range m.NetworkEvents {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNetwork(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.IPv4Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv4Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Subnet)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.IPv6Gateway)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.VlanID != 0 {
		n += 1 + sovNetwork(uint64(m.VlanID))
	}
	if m.VxlanVNI != 0 {
		n += 1 + sovNetwork(uint64(m.VxlanVNI))
	}
	return n
}

func (m *NetworkStatus) Size() (n int) {
	var l int
	_ = l
	if m.AllocatedVlanID != 0 {
		n += 1 + sovNetwork(uint64(m.AllocatedVlanID))
	}
	if m.AllocatedVxlanVNI != 0 {
		n += 1 + sovNetwork(uint64(m.AllocatedVxlanVNI))
	}
	if m.NetworkID != 0 {
		n += 1 + sovNetwork(uint64(m.NetworkID))
	}
	if m.NetworkHandle != 0 {
		n += 1 + sovNetwork(uint64(m.NetworkHandle))
	}
	return n
}

func (m *NetworkList) Size() (n int) {
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNetwork(uint64(m.EventType))
	}
	l = m.Network.Size()
	n += 1 + l + sovNetwork(uint64(l))
	return n
}

func (m *NetworkEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.NetworkEvents) > 0 {
		for _, e := range m.NetworkEvents {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv4Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv4Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanID", wireType)
			}
			m.VlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanVNI", wireType)
			}
			m.VxlanVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VxlanVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedVlanID", wireType)
			}
			m.AllocatedVlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedVlanID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedVxlanVNI", wireType)
			}
			m.AllocatedVxlanVNI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocatedVxlanVNI |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			m.NetworkID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkHandle", wireType)
			}
			m.NetworkHandle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkHandle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkEvents = append(m.NetworkEvents, &NetworkEvent{})
			if err := m.NetworkEvents[len(m.NetworkEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network.proto", fileDescriptorNetwork) }

var fileDescriptorNetwork = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0x33, 0x49, 0xbe, 0x34, 0x99, 0x34, 0xfd, 0x99, 0x0f, 0x8a, 0x6b, 0x55, 0x49, 0x64,
	0x81, 0x94, 0x45, 0x1b, 0xa3, 0x80, 0x2a, 0x16, 0x05, 0xd1, 0xa8, 0x3f, 0x44, 0x40, 0xa9, 0xdc,
	0xaa, 0xac, 0x27, 0xce, 0x21, 0x35, 0x38, 0x33, 0x56, 0x3d, 0x6e, 0x89, 0x50, 0x57, 0xdc, 0x04,
	0x2b, 0x36, 0xb0, 0x63, 0xc7, 0x3d, 0x20, 0x75, 0xd9, 0x2b, 0x88, 0x50, 0xd9, 0xf5, 0x2a, 0x90,
	0x27, 0x63, 0xc7, 0xa9, 0xe9, 0x6e, 0xce, 0x7b, 0xce, 0xfb, 0xcc, 0x39, 0xe3, 0x19, 0xe3, 0x0a,
	0x03, 0x71, 0xc6, 0x4f, 0x3e, 0x34, 0xbd, 0x13, 0x2e, 0x38, 0x29, 0x32, 0x10, 0x72, 0xa5, 0xaf,
	0xf4, 0x39, 0xef, 0xbb, 0x60, 0x52, 0xcf, 0x31, 0x29, 0x63, 0x5c, 0x50, 0xe1, 0x70, 0xe6, 0x8f,
	0xeb, 0xf4, 0xed, 0xbe, 0x23, 0x8e, 0x83, 0x6e, 0xd3, 0xe6, 0x03, 0xd3, 0x03, 0xe6, 0x53, 0xd6,
	0xe3, 0xa6, 0x7f, 0x66, 0x9e, 0x02, 0x73, 0x6c, 0x30, 0x03, 0xe1, 0xb8, 0x7e, 0x68, 0xed, 0x03,
	0x4b, 0xba, 0x4d, 0x87, 0xd9, 0x6e, 0xd0, 0x83, 0x08, 0xb3, 0x96, 0xc0, 0xf4, 0x79, 0x9f, 0x9b,
	0x52, 0xee, 0x06, 0xef, 0x64, 0x24, 0x03, 0xb9, 0x52, 0xe5, 0x0f, 0x6e, 0xd9, 0x35, 0xec, 0x71,
	0x00, 0x82, 0x8e, 0xcb, 0x8c, 0xef, 0x59, 0x3c, 0xb3, 0x37, 0x1e, 0x8b, 0x3c, 0xc3, 0xc5, 0xc3,
	0xa1, 0x07, 0xaf, 0x41, 0x50, 0x0d, 0xd5, 0x51, 0xa3, 0xdc, 0xaa, 0x34, 0xa9, 0xe7, 0x34, 0x23,
	0xb1, 0xfd, 0xff, 0xc5, 0xa8, 0x96, 0xb9, 0x1c, 0xd5, 0xd0, 0xf5, 0xa8, 0x36, 0xb3, 0xea, 0x30,
	0xd7, 0x61, 0x60, 0xc5, 0x1e, 0xf2, 0x12, 0xe3, 0x37, 0xdd, 0xf7, 0x60, 0x0b, 0x49, 0xc8, 0x4a,
	0xc2, 0xbc, 0x24, 0x4c, 0xe4, 0xb6, 0x9e, 0x60, 0xcc, 0x85, 0x8d, 0xac, 0xf2, 0x81, 0x23, 0x60,
	0xe0, 0x89, 0xa1, 0x95, 0xb0, 0x93, 0x4d, 0x9c, 0x3f, 0xf0, 0xc0, 0xd6, 0x72, 0x12, 0x73, 0xb7,
	0x19, 0x1d, 0x76, 0x53, 0x75, 0x1b, 0x26, 0xdb, 0x4b, 0x21, 0x2c, 0x04, 0xf9, 0x1e, 0xd8, 0x09,
	0x90, 0xb4, 0x92, 0x0e, 0x2e, 0x1c, 0x08, 0x2a, 0x02, 0x5f, 0xcb, 0x4b, 0xc8, 0xbd, 0x34, 0x44,
	0xa6, 0xdb, 0x9a, 0xc2, 0x2c, 0xf8, 0x32, 0x4e, 0x80, 0x14, 0xc0, 0xf8, 0x85, 0x70, 0x39, 0xb1,
	0x31, 0xa9, 0x62, 0xdc, 0xd9, 0x3f, 0x7d, 0x7c, 0x10, 0x74, 0x19, 0x08, 0x79, 0x58, 0x25, 0x2b,
	0xa1, 0x90, 0x3a, 0x2e, 0x87, 0xd1, 0x2e, 0x15, 0x70, 0x46, 0x87, 0xf2, 0x2c, 0x4a, 0x56, 0x52,
	0x52, 0x84, 0x75, 0x45, 0xc8, 0xc5, 0x84, 0xf5, 0x29, 0xc2, 0x7a, 0x44, 0xc8, 0xc7, 0x84, 0x48,
	0x22, 0x4b, 0xb8, 0x70, 0xe4, 0x52, 0xd6, 0xd9, 0xd2, 0xfe, 0xab, 0xa3, 0x46, 0xc5, 0x52, 0x11,
	0xd1, 0x71, 0xf1, 0xe8, 0xa3, 0x4b, 0xd9, 0xd1, 0x5e, 0x47, 0x2b, 0xc8, 0x4c, 0x1c, 0x1b, 0x3f,
	0x10, 0xae, 0x4c, 0xcd, 0x4e, 0x1a, 0x78, 0x7e, 0xd3, 0x75, 0xb9, 0x4d, 0x05, 0xf4, 0x14, 0x0e,
	0x49, 0xd3, 0x4d, 0x99, 0xac, 0xe2, 0xc5, 0x89, 0x14, 0x6d, 0x90, 0x95, 0xb5, 0xe9, 0x04, 0x59,
	0xc1, 0x25, 0xb5, 0x51, 0x67, 0x4b, 0x8e, 0x97, 0xb7, 0x26, 0x02, 0xb9, 0x1f, 0xb7, 0xf1, 0x82,
	0xb2, 0x9e, 0x0b, 0x72, 0xbe, 0xbc, 0x35, 0x2d, 0x1a, 0x1b, 0xf1, 0xa1, 0xbf, 0x72, 0x7c, 0x41,
	0xd6, 0x70, 0x51, 0xbd, 0x40, 0x5f, 0x43, 0xf5, 0x5c, 0xa3, 0xdc, 0x5a, 0x4c, 0x7d, 0x51, 0x2b,
	0x2e, 0x31, 0xbe, 0x22, 0x3c, 0xab, 0xd4, 0xed, 0x53, 0x60, 0x82, 0xec, 0xe0, 0x92, 0x5c, 0x84,
	0x17, 0x56, 0x0e, 0x39, 0xd7, 0x9a, 0x93, 0xd7, 0x33, 0x56, 0xdb, 0xda, 0xf5, 0xa8, 0x76, 0x07,
	0xc2, 0x70, 0x4d, 0x0c, 0x3d, 0x48, 0xdc, 0x84, 0x89, 0x95, 0xec, 0xc4, 0x4f, 0x46, 0x5d, 0xf2,
	0x74, 0x1b, 0xed, 0x65, 0x75, 0xa5, 0x16, 0x55, 0x3b, 0x09, 0x52, 0x64, 0x36, 0xf6, 0xf1, 0x42,
	0xb2, 0x3f, 0x39, 0xe3, 0x46, 0xfc, 0x97, 0x91, 0x5a, 0x34, 0xe8, 0x52, 0x6a, 0x07, 0x99, 0xb6,
	0xa6, 0x8b, 0x5b, 0xdf, 0xb2, 0x18, 0xab, 0xfc, 0xa6, 0xe7, 0x90, 0x16, 0xc6, 0xbb, 0x20, 0xa2,
	0xe7, 0x7d, 0xf3, 0x29, 0xea, 0xe9, 0xb6, 0x8d, 0x0c, 0x79, 0x82, 0x67, 0xc3, 0x46, 0x94, 0xe0,
	0xa7, 0x5d, 0xe9, 0xa7, 0x18, 0xd6, 0x1b, 0x19, 0xf2, 0x1c, 0x57, 0xde, 0x52, 0x61, 0x1f, 0xdf,
	0x6e, 0xd5, 0xff, 0x3d, 0xc5, 0xd8, 0xff, 0x10, 0xe9, 0xf0, 0xf3, 0xf3, 0x32, 0x9d, 0xfc, 0x8f,
	0xf2, 0x6e, 0x78, 0x22, 0x79, 0x8f, 0xfb, 0x82, 0xe4, 0xbc, 0x40, 0x90, 0x42, 0x0f, 0x5c, 0x10,
	0xa0, 0x3f, 0x35, 0x3f, 0x4d, 0xa8, 0xcd, 0x43, 0x60, 0x94, 0x89, 0xf3, 0x29, 0x6d, 0x8f, 0x0e,
	0xc0, 0xf7, 0xa8, 0x0d, 0x69, 0xf9, 0xbc, 0xbd, 0x70, 0x71, 0x55, 0x45, 0x97, 0x57, 0x55, 0xf4,
	0xfb, 0xaa, 0x8a, 0xbe, 0xfc, 0xa9, 0x66, 0xf6, 0x51, 0xb7, 0x20, 0xdb, 0x7a, 0xf4, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x70, 0x36, 0xa8, 0xe4, 0x05, 0x00, 0x00,
}
