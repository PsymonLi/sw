// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: security.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// security group object
type SecurityGroup struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           SecurityGroupSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         SecurityGroupStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *SecurityGroup) Reset()                    { *m = SecurityGroup{} }
func (m *SecurityGroup) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroup) ProtoMessage()               {}
func (*SecurityGroup) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{0} }

func (m *SecurityGroup) GetSpec() SecurityGroupSpec {
	if m != nil {
		return m.Spec
	}
	return SecurityGroupSpec{}
}

func (m *SecurityGroup) GetStatus() SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return SecurityGroupStatus{}
}

// security group spec
type SecurityGroupSpec struct {
	SecurityProfile string `protobuf:"bytes,1,opt,name=SecurityProfile,proto3" json:"SecurityProfile,omitempty"`
	// security rules
	Rules []SecurityRule `protobuf:"bytes,2,rep,name=Rules" json:"rules,omitempty"`
}

func (m *SecurityGroupSpec) Reset()                    { *m = SecurityGroupSpec{} }
func (m *SecurityGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupSpec) ProtoMessage()               {}
func (*SecurityGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{1} }

func (m *SecurityGroupSpec) GetSecurityProfile() string {
	if m != nil {
		return m.SecurityProfile
	}
	return ""
}

func (m *SecurityGroupSpec) GetRules() []SecurityRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// security rule
type SecurityRule struct {
	Direction   string `protobuf:"bytes,1,opt,name=Direction,proto3" json:"Direction,omitempty"`
	PeerGroup   string `protobuf:"bytes,2,opt,name=PeerGroup,proto3" json:"PeerGroup,omitempty"`
	PeerGroupID uint64 `protobuf:"varint,3,opt,name=PeerGroupID,proto3" json:"PeerGroupID,omitempty"`
	// services (port & protocol)
	Services []SecurityRule_Service `protobuf:"bytes,4,rep,name=Services" json:"services,omitempty"`
	Action   string                 `protobuf:"bytes,5,opt,name=Action,proto3" json:"Action,omitempty"`
	Log      bool                   `protobuf:"varint,6,opt,name=Log,proto3" json:"Log,omitempty"`
	// FIXME: Move these match fields before action?
	Apps     []string `protobuf:"bytes,7,rep,name=Apps" json:"Apps,omitempty"`
	AppUsers []string `protobuf:"bytes,8,rep,name=AppUsers" json:"AppUsers,omitempty"`
}

func (m *SecurityRule) Reset()                    { *m = SecurityRule{} }
func (m *SecurityRule) String() string            { return proto.CompactTextString(m) }
func (*SecurityRule) ProtoMessage()               {}
func (*SecurityRule) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{2} }

func (m *SecurityRule) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *SecurityRule) GetPeerGroup() string {
	if m != nil {
		return m.PeerGroup
	}
	return ""
}

func (m *SecurityRule) GetPeerGroupID() uint64 {
	if m != nil {
		return m.PeerGroupID
	}
	return 0
}

func (m *SecurityRule) GetServices() []SecurityRule_Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *SecurityRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *SecurityRule) GetLog() bool {
	if m != nil {
		return m.Log
	}
	return false
}

func (m *SecurityRule) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *SecurityRule) GetAppUsers() []string {
	if m != nil {
		return m.AppUsers
	}
	return nil
}

type SecurityRule_Service struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *SecurityRule_Service) Reset()                    { *m = SecurityRule_Service{} }
func (m *SecurityRule_Service) String() string            { return proto.CompactTextString(m) }
func (*SecurityRule_Service) ProtoMessage()               {}
func (*SecurityRule_Service) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{2, 0} }

func (m *SecurityRule_Service) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *SecurityRule_Service) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// security group status
type SecurityGroupStatus struct {
	SecurityGroupID uint64 `protobuf:"varint,1,opt,name=SecurityGroupID,proto3" json:"SecurityGroupID,omitempty"`
}

func (m *SecurityGroupStatus) Reset()                    { *m = SecurityGroupStatus{} }
func (m *SecurityGroupStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStatus) ProtoMessage()               {}
func (*SecurityGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{3} }

func (m *SecurityGroupStatus) GetSecurityGroupID() uint64 {
	if m != nil {
		return m.SecurityGroupID
	}
	return 0
}

// list of security groups
type SecurityGroupList struct {
	SecurityGroups []*SecurityGroup `protobuf:"bytes,1,rep,name=SecurityGroups" json:"SecurityGroups,omitempty"`
}

func (m *SecurityGroupList) Reset()                    { *m = SecurityGroupList{} }
func (m *SecurityGroupList) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupList) ProtoMessage()               {}
func (*SecurityGroupList) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{4} }

func (m *SecurityGroupList) GetSecurityGroups() []*SecurityGroup {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

// security group watch event
type SecurityGroupEvent struct {
	EventType     api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	SecurityGroup SecurityGroup `protobuf:"bytes,2,opt,name=SecurityGroup" json:"security-group,omitempty"`
}

func (m *SecurityGroupEvent) Reset()                    { *m = SecurityGroupEvent{} }
func (m *SecurityGroupEvent) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupEvent) ProtoMessage()               {}
func (*SecurityGroupEvent) Descriptor() ([]byte, []int) { return fileDescriptorSecurity, []int{5} }

func (m *SecurityGroupEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *SecurityGroupEvent) GetSecurityGroup() SecurityGroup {
	if m != nil {
		return m.SecurityGroup
	}
	return SecurityGroup{}
}

func init() {
	proto.RegisterType((*SecurityGroup)(nil), "netproto.SecurityGroup")
	proto.RegisterType((*SecurityGroupSpec)(nil), "netproto.SecurityGroupSpec")
	proto.RegisterType((*SecurityRule)(nil), "netproto.SecurityRule")
	proto.RegisterType((*SecurityRule_Service)(nil), "netproto.SecurityRule.Service")
	proto.RegisterType((*SecurityGroupStatus)(nil), "netproto.SecurityGroupStatus")
	proto.RegisterType((*SecurityGroupList)(nil), "netproto.SecurityGroupList")
	proto.RegisterType((*SecurityGroupEvent)(nil), "netproto.SecurityGroupEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecurityApi service

type SecurityApiClient interface {
	GetSecurityGroup(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SecurityGroup, error)
	ListSecurityGroups(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SecurityGroupList, error)
	WatchSecurityGroups(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (SecurityApi_WatchSecurityGroupsClient, error)
}

type securityApiClient struct {
	cc *grpc.ClientConn
}

func NewSecurityApiClient(cc *grpc.ClientConn) SecurityApiClient {
	return &securityApiClient{cc}
}

func (c *securityApiClient) GetSecurityGroup(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SecurityGroup, error) {
	out := new(SecurityGroup)
	err := grpc.Invoke(ctx, "/netproto.SecurityApi/GetSecurityGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityApiClient) ListSecurityGroups(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SecurityGroupList, error) {
	out := new(SecurityGroupList)
	err := grpc.Invoke(ctx, "/netproto.SecurityApi/ListSecurityGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityApiClient) WatchSecurityGroups(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (SecurityApi_WatchSecurityGroupsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SecurityApi_serviceDesc.Streams[0], c.cc, "/netproto.SecurityApi/WatchSecurityGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &securityApiWatchSecurityGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SecurityApi_WatchSecurityGroupsClient interface {
	Recv() (*SecurityGroupEvent, error)
	grpc.ClientStream
}

type securityApiWatchSecurityGroupsClient struct {
	grpc.ClientStream
}

func (x *securityApiWatchSecurityGroupsClient) Recv() (*SecurityGroupEvent, error) {
	m := new(SecurityGroupEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SecurityApi service

type SecurityApiServer interface {
	GetSecurityGroup(context.Context, *api.ObjectMeta) (*SecurityGroup, error)
	ListSecurityGroups(context.Context, *api.ObjectMeta) (*SecurityGroupList, error)
	WatchSecurityGroups(*api.ObjectMeta, SecurityApi_WatchSecurityGroupsServer) error
}

func RegisterSecurityApiServer(s *grpc.Server, srv SecurityApiServer) {
	s.RegisterService(&_SecurityApi_serviceDesc, srv)
}

func _SecurityApi_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityApiServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.SecurityApi/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityApiServer).GetSecurityGroup(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityApi_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityApiServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.SecurityApi/ListSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityApiServer).ListSecurityGroups(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityApi_WatchSecurityGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityApiServer).WatchSecurityGroups(m, &securityApiWatchSecurityGroupsServer{stream})
}

type SecurityApi_WatchSecurityGroupsServer interface {
	Send(*SecurityGroupEvent) error
	grpc.ServerStream
}

type securityApiWatchSecurityGroupsServer struct {
	grpc.ServerStream
}

func (x *securityApiWatchSecurityGroupsServer) Send(m *SecurityGroupEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _SecurityApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.SecurityApi",
	HandlerType: (*SecurityApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecurityGroup",
			Handler:    _SecurityApi_GetSecurityGroup_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _SecurityApi_ListSecurityGroups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSecurityGroups",
			Handler:       _SecurityApi_WatchSecurityGroups_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "security.proto",
}

func (m *SecurityGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSecurity(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSecurity(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSecurity(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintSecurity(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *SecurityGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SecurityProfile) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.SecurityProfile)))
		i += copy(dAtA[i:], m.SecurityProfile)
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Direction) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.Direction)))
		i += copy(dAtA[i:], m.Direction)
	}
	if len(m.PeerGroup) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.PeerGroup)))
		i += copy(dAtA[i:], m.PeerGroup)
	}
	if m.PeerGroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(m.PeerGroupID))
	}
	if len(m.Services) > 0 {
		for _, msg := range m.Services {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Log {
		dAtA[i] = 0x30
		i++
		if m.Log {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AppUsers) > 0 {
		for _, s := range m.AppUsers {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SecurityRule_Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRule_Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Protocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *SecurityGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecurityGroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(m.SecurityGroupID))
	}
	return i, nil
}

func (m *SecurityGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SecurityGroups) > 0 {
		for _, msg := range m.SecurityGroups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecurity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SecurityGroupEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecurity(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSecurity(dAtA, i, uint64(m.SecurityGroup.Size()))
	n5, err := m.SecurityGroup.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintSecurity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SecurityGroup) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSecurity(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSecurity(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSecurity(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSecurity(uint64(l))
	return n
}

func (m *SecurityGroupSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.SecurityProfile)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSecurity(uint64(l))
		}
	}
	return n
}

func (m *SecurityRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	l = len(m.PeerGroup)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	if m.PeerGroupID != 0 {
		n += 1 + sovSecurity(uint64(m.PeerGroupID))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovSecurity(uint64(l))
		}
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	if m.Log {
		n += 2
	}
	if len(m.Apps) > 0 {
		for _, s := range m.Apps {
			l = len(s)
			n += 1 + l + sovSecurity(uint64(l))
		}
	}
	if len(m.AppUsers) > 0 {
		for _, s := range m.AppUsers {
			l = len(s)
			n += 1 + l + sovSecurity(uint64(l))
		}
	}
	return n
}

func (m *SecurityRule_Service) Size() (n int) {
	var l int
	_ = l
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovSecurity(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovSecurity(uint64(m.Port))
	}
	return n
}

func (m *SecurityGroupStatus) Size() (n int) {
	var l int
	_ = l
	if m.SecurityGroupID != 0 {
		n += 1 + sovSecurity(uint64(m.SecurityGroupID))
	}
	return n
}

func (m *SecurityGroupList) Size() (n int) {
	var l int
	_ = l
	if len(m.SecurityGroups) > 0 {
		for _, e := range m.SecurityGroups {
			l = e.Size()
			n += 1 + l + sovSecurity(uint64(l))
		}
	}
	return n
}

func (m *SecurityGroupEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovSecurity(uint64(m.EventType))
	}
	l = m.SecurityGroup.Size()
	n += 1 + l + sovSecurity(uint64(l))
	return n
}

func sovSecurity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSecurity(x uint64) (n int) {
	return sovSecurity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecurityGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, SecurityRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerGroupID", wireType)
			}
			m.PeerGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerGroupID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, SecurityRule_Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Log = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppUsers = append(m.AppUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRule_Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupID", wireType)
			}
			m.SecurityGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityGroupID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, &SecurityGroup{})
			if err := m.SecurityGroups[len(m.SecurityGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecurityGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSecurity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSecurity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSecurity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSecurity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("security.proto", fileDescriptorSecurity) }

var fileDescriptorSecurity = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0xe3, 0x24, 0xe4, 0xc7, 0xa4, 0x84, 0x74, 0xa8, 0xc0, 0x75, 0x69, 0x12, 0x59, 0xaa,
	0x94, 0x03, 0xd8, 0x55, 0x7a, 0xea, 0xa1, 0xa0, 0x58, 0x50, 0x5a, 0x95, 0x16, 0xe4, 0xd0, 0xf6,
	0x58, 0x39, 0xe6, 0x61, 0xa6, 0x72, 0x3c, 0x23, 0xcf, 0x98, 0x2a, 0xaa, 0x38, 0xed, 0xfe, 0x11,
	0xfb, 0x77, 0xec, 0x61, 0x6f, 0x7b, 0xe7, 0x88, 0xb4, 0xa7, 0xbd, 0x44, 0x2b, 0xf6, 0xc6, 0x5f,
	0xb1, 0x9a, 0x89, 0x93, 0x38, 0x09, 0xd1, 0xde, 0xe6, 0x7d, 0xfd, 0xde, 0x67, 0xbe, 0x7e, 0x33,
	0xf3, 0x50, 0x9d, 0x83, 0x9f, 0xc4, 0x44, 0x8c, 0x2c, 0x16, 0x53, 0x41, 0x71, 0x25, 0x02, 0xa1,
	0x56, 0xc6, 0x5e, 0x40, 0x69, 0x10, 0x82, 0xed, 0x31, 0x62, 0x7b, 0x51, 0x44, 0x85, 0x27, 0x08,
	0x8d, 0xf8, 0x24, 0xcf, 0x38, 0x09, 0x88, 0xb8, 0x49, 0x06, 0x96, 0x4f, 0x87, 0x36, 0x83, 0x88,
	0x7b, 0xd1, 0x15, 0xb5, 0xf9, 0x7f, 0xf6, 0x2d, 0x44, 0xc4, 0x07, 0x3b, 0x11, 0x24, 0xe4, 0xb2,
	0x34, 0x80, 0x28, 0x5b, 0x6d, 0x93, 0xc8, 0x0f, 0x93, 0x2b, 0x98, 0x62, 0x0e, 0x32, 0x98, 0x80,
	0x06, 0xd4, 0x56, 0xf2, 0x20, 0xb9, 0x56, 0x91, 0x0a, 0xd4, 0x2a, 0x4d, 0xff, 0x6e, 0xcd, 0xae,
	0xd2, 0xe3, 0x10, 0x84, 0x37, 0x49, 0x33, 0xdf, 0xe4, 0xd1, 0x66, 0x3f, 0xfd, 0xaf, 0xd3, 0x98,
	0x26, 0x0c, 0x1f, 0xa2, 0xca, 0xe5, 0x88, 0xc1, 0xef, 0x20, 0x3c, 0x5d, 0x6b, 0x6b, 0x9d, 0x5a,
	0x77, 0xd3, 0xf2, 0x18, 0xb1, 0xa6, 0xa2, 0xb3, 0x7d, 0x3f, 0x6e, 0xe5, 0x1e, 0xc6, 0x2d, 0xed,
	0x69, 0xdc, 0x2a, 0xef, 0x93, 0x28, 0x24, 0x11, 0xb8, 0xb3, 0x1a, 0xfc, 0x1b, 0x42, 0xe7, 0x83,
	0x7f, 0xc1, 0x17, 0x8a, 0x90, 0x57, 0x84, 0x2d, 0x45, 0x98, 0xcb, 0x8e, 0x91, 0x61, 0xd4, 0xa5,
	0x9d, 0x7d, 0x3a, 0x24, 0x02, 0x86, 0x4c, 0x8c, 0xdc, 0x4c, 0x39, 0x3e, 0x45, 0xc5, 0x3e, 0x03,
	0x5f, 0x2f, 0x28, 0xcc, 0x37, 0xd6, 0xb4, 0xe5, 0xd6, 0x82, 0x67, 0x99, 0xe2, 0xec, 0x48, 0xa4,
	0xc4, 0x71, 0x06, 0x7e, 0x06, 0xa7, 0x00, 0xf8, 0x1c, 0x95, 0xfa, 0xc2, 0x13, 0x09, 0xd7, 0x8b,
	0x0a, 0xf5, 0xed, 0x3a, 0x94, 0x4a, 0x72, 0xf4, 0x14, 0xd6, 0xe0, 0x2a, 0xce, 0xe0, 0x52, 0x8c,
	0xf9, 0x52, 0x43, 0x5f, 0xae, 0x98, 0xc0, 0x1d, 0xb4, 0x35, 0x15, 0x2f, 0x62, 0x7a, 0x4d, 0x42,
	0x50, 0x3d, 0xac, 0xba, 0xcb, 0x32, 0x3e, 0x41, 0x1b, 0x6e, 0x12, 0x02, 0xd7, 0xf3, 0xed, 0x42,
	0xa7, 0xd6, 0xdd, 0x59, 0xf5, 0x23, 0x3f, 0x3b, 0xbb, 0xa9, 0x91, 0xad, 0x58, 0x26, 0x67, 0x7c,
	0x4c, 0xaa, 0xcd, 0xf7, 0x79, 0xf4, 0x45, 0xb6, 0x00, 0xef, 0xa1, 0xea, 0x31, 0x89, 0xc1, 0x97,
	0x77, 0x28, 0xdd, 0x7b, 0x2e, 0xc8, 0xaf, 0x17, 0x00, 0xb1, 0x32, 0xac, 0xce, 0xa6, 0xea, 0xce,
	0x05, 0xdc, 0x46, 0xb5, 0x59, 0xf0, 0xeb, 0xb1, 0x6a, 0x7a, 0xd1, 0xcd, 0x4a, 0xf8, 0x2f, 0x54,
	0xe9, 0x43, 0x7c, 0x4b, 0x7c, 0x90, 0x8d, 0x94, 0xc6, 0x9b, 0xcf, 0x1b, 0xb7, 0xd2, 0xb4, 0xc9,
	0x49, 0x3f, 0x8d, 0x5b, 0x98, 0xa7, 0x75, 0x99, 0x7f, 0x98, 0xb1, 0xf0, 0x0e, 0x2a, 0xf5, 0x26,
	0x96, 0x37, 0x94, 0xa9, 0x34, 0xc2, 0x0d, 0x54, 0x38, 0xa3, 0x81, 0x5e, 0x6a, 0x6b, 0x9d, 0x8a,
	0x2b, 0x97, 0x18, 0xa3, 0x62, 0x8f, 0x31, 0xae, 0x97, 0xdb, 0x85, 0x4e, 0xd5, 0x55, 0x6b, 0x6c,
	0xa0, 0x4a, 0x8f, 0xb1, 0x3f, 0x39, 0xc4, 0x5c, 0xaf, 0x28, 0x7d, 0x16, 0x1b, 0x3f, 0xa2, 0x72,
	0xba, 0x8b, 0x4c, 0x53, 0x46, 0x7d, 0x1a, 0xa6, 0x9d, 0x99, 0xc5, 0x12, 0xcb, 0x68, 0x2c, 0x54,
	0x4f, 0x36, 0x5d, 0xb5, 0x36, 0x8f, 0xd0, 0xf6, 0x33, 0x77, 0x23, 0x7b, 0xc6, 0xd3, 0x4e, 0x69,
	0xaa, 0x53, 0xcb, 0xb2, 0x79, 0xb9, 0x74, 0x45, 0xce, 0x08, 0x17, 0xf8, 0x08, 0xd5, 0x17, 0x44,
	0xae, 0x6b, 0xaa, 0x91, 0xbb, 0x6b, 0x6e, 0xa4, 0xbb, 0x94, 0x6e, 0xbe, 0xd5, 0x10, 0x5e, 0x90,
	0x4e, 0x6e, 0x21, 0x12, 0xf8, 0x67, 0x54, 0x55, 0x0b, 0xf9, 0x10, 0x95, 0xa1, 0x7a, 0xb7, 0xae,
	0x9e, 0xdd, 0x4c, 0x75, 0xf4, 0xa7, 0x71, 0xeb, 0x2b, 0x90, 0xe1, 0x81, 0x18, 0x31, 0xc8, 0x9c,
	0xc4, 0xbc, 0x14, 0xff, 0xb3, 0x34, 0x10, 0xd2, 0x27, 0xbc, 0xce, 0x9e, 0xd3, 0x4e, 0x0f, 0x58,
	0x9f, 0x8e, 0xc7, 0x83, 0x40, 0xea, 0x19, 0xf8, 0x22, 0xaf, 0xfb, 0x2e, 0x8f, 0x6a, 0x53, 0xa5,
	0xc7, 0x08, 0x3e, 0x44, 0x8d, 0x53, 0x10, 0x8b, 0x43, 0x68, 0x79, 0x60, 0x18, 0xeb, 0xb6, 0x37,
	0x73, 0xf8, 0x18, 0x61, 0xd9, 0xd8, 0xc5, 0x2e, 0xad, 0x12, 0xd6, 0x0d, 0x0f, 0x59, 0x6b, 0xe6,
	0xf0, 0x2f, 0x68, 0xfb, 0x6f, 0x4f, 0xf8, 0x37, 0x9f, 0xc3, 0xec, 0xad, 0xc1, 0xa8, 0x06, 0x9a,
	0xb9, 0xef, 0x35, 0x43, 0xbc, 0x7e, 0xf1, 0x35, 0x5b, 0x9e, 0xaa, 0xc5, 0x50, 0x9e, 0x7d, 0x91,
	0x51, 0x2e, 0x70, 0x81, 0x25, 0x02, 0x97, 0xae, 0x20, 0x04, 0x01, 0xc6, 0x4f, 0xf6, 0xff, 0x73,
	0xba, 0x75, 0x09, 0x91, 0x17, 0x89, 0xbb, 0x05, 0xed, 0x0f, 0x6f, 0x08, 0x9c, 0x79, 0x3e, 0xac,
	0xca, 0x77, 0x66, 0x59, 0xce, 0x73, 0x1e, 0x70, 0xa7, 0x71, 0xff, 0xd8, 0xd4, 0x1e, 0x1e, 0x9b,
	0xda, 0x87, 0xc7, 0xa6, 0xf6, 0xea, 0x63, 0x33, 0x77, 0xa1, 0x0d, 0x4a, 0xca, 0xe7, 0x0f, 0x9f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x9e, 0xaf, 0xff, 0xba, 0x06, 0x00, 0x00,
}
