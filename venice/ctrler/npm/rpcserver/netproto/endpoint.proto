// network object

syntax = "proto3";

package netproto;

// Mandatory imports.
import "google/api/annotations.proto";
import public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";

// ---------------------------- Endpoint API ----------------------------

// endpoint controller api
service EndpointApi {
    // options for auto generating rest endpoints
    option(venice.naplesRestService) = {
        Object: "Endpoint",
        Method: ["list", "post", "put", "delete"],
        Pattern: "/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}"
    };

    rpc CreateEndpoint (Endpoint) returns (Endpoint) {};
    rpc GetEndpoint (api.ObjectMeta) returns (Endpoint) {};
    rpc ListEndpoints (api.ObjectMeta) returns (EndpointList) {};
    rpc DeleteEndpoint (Endpoint) returns (Endpoint) {};
    rpc WatchEndpoints (api.ObjectMeta) returns (stream EndpointEvent) {};
}

// endpoint object
message Endpoint {
    api.TypeMeta   TypeMeta   = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta ObjectMeta = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    EndpointSpec   Spec       = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,omitempty"];
    EndpointStatus Status     = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "status,omitempty"];
}


// endpoint spec
message EndpointSpec {
    enum Type{
        NONE    = 0;
        LIF     = 1; // For local EPs
        UPLINK  = 2; // For Remote EPs
        TUNNEL  = 3; // For Remote EPs going over tunnels
    }
    string EndpointUUID  = 1 [(gogoproto.jsontag) = "endpoint-uuid,omitempty"];
    string WorkloadUUID  = 2 [(gogoproto.jsontag) = "workload-uuid,omitempty"];
    string WorkloadName  = 3 [(gogoproto.jsontag) = "workload-name,omitempty"];
    string NetworkName   = 4 [(gogoproto.jsontag) = "network-name,omitempty"];
    map<string,string> WorkloadAttributes = 5 [(gogoproto.jsontag) = "workload-attributes,omitempty"];
    repeated string SecurityGroups = 6 [(gogoproto.jsontag) = "security-groups,omitempty"];
    string InterfaceType = 7 [(venice.check) = "StrEnum(EndpointSpec.IFType)",
                              (gogoproto.jsontag) = "interface-type,omitempty"];
    string Interface     = 8 [(gogoproto.jsontag) = "interface,omitempty"];
}

// endpoint status
message EndpointStatus {
    string IPv4Address    = 1 [(gogoproto.jsontag) = "ipv4-address,omitempty"];
    string IPv4Gateway    = 2 [(gogoproto.jsontag) = "ipv4-gateway,omitempty"];
    string IPv6Address    = 3 [(gogoproto.jsontag) = "ipv6-address,omitempty"];
    string IPv6Gateway    = 4 [(gogoproto.jsontag) = "ipv6-gateway,omitempty"];
    string MacAddress     = 5 [(gogoproto.jsontag) = "mac-address,omitempty"];
    string HomingHostAddr = 6 [(gogoproto.jsontag) = "homing-host-address,omitempty"];
    string HomingHostName = 7 [(gogoproto.jsontag) = "homing-host-name,omitempty"];
    string NodeUUID       = 8 [(gogoproto.jsontag) = "node-uuid,omitempty"];
    uint32 UsegVlan       = 9 [(gogoproto.jsontag) = "useg-vlan,omitempty"];
}


// list of endpoints
message EndpointList {
    repeated Endpoint endpoints = 1;
}

// endpoint watch event
message EndpointEvent {
    api.EventType EventType = 1 [(gogoproto.jsontag) = "event-type,omitempty"];
    Endpoint       Endpoint = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "endpoint,omitempty"];
}