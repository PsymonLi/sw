// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tenant.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TenantSpec_Type int32

const (
	TenantSpec_CUSTOMER TenantSpec_Type = 0
	TenantSpec_INFRA    TenantSpec_Type = 1
)

var TenantSpec_Type_name = map[int32]string{
	0: "CUSTOMER",
	1: "INFRA",
}
var TenantSpec_Type_value = map[string]int32{
	"CUSTOMER": 0,
	"INFRA":    1,
}

func (x TenantSpec_Type) String() string {
	return proto.EnumName(TenantSpec_Type_name, int32(x))
}
func (TenantSpec_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorTenant, []int{1, 0} }

// Tenant Status
type TenantStatus struct {
	TenantID uint64 `protobuf:"varint,1,opt,name=TenantID,proto3" json:"tenant-id,omitempty"`
}

func (m *TenantStatus) Reset()                    { *m = TenantStatus{} }
func (m *TenantStatus) String() string            { return proto.CompactTextString(m) }
func (*TenantStatus) ProtoMessage()               {}
func (*TenantStatus) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{0} }

func (m *TenantStatus) GetTenantID() uint64 {
	if m != nil {
		return m.TenantID
	}
	return 0
}

// TenantSpec captures all the tenant level configuration
type TenantSpec struct {
	TenantType string `protobuf:"bytes,1,opt,name=TenantType,proto3" json:"tenant-type,omitempty"`
}

func (m *TenantSpec) Reset()                    { *m = TenantSpec{} }
func (m *TenantSpec) String() string            { return proto.CompactTextString(m) }
func (*TenantSpec) ProtoMessage()               {}
func (*TenantSpec) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{1} }

func (m *TenantSpec) GetTenantType() string {
	if m != nil {
		return m.TenantType
	}
	return ""
}

// Tenant object
type Tenant struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           TenantSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TenantStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Tenant) Reset()                    { *m = Tenant{} }
func (m *Tenant) String() string            { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()               {}
func (*Tenant) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{2} }

func (m *Tenant) GetSpec() TenantSpec {
	if m != nil {
		return m.Spec
	}
	return TenantSpec{}
}

func (m *Tenant) GetStatus() TenantStatus {
	if m != nil {
		return m.Status
	}
	return TenantStatus{}
}

type TenantList struct {
	Tenants []*Tenant `protobuf:"bytes,1,rep,name=tenants" json:"tenants,omitempty"`
}

func (m *TenantList) Reset()                    { *m = TenantList{} }
func (m *TenantList) String() string            { return proto.CompactTextString(m) }
func (*TenantList) ProtoMessage()               {}
func (*TenantList) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{3} }

func (m *TenantList) GetTenants() []*Tenant {
	if m != nil {
		return m.Tenants
	}
	return nil
}

// network watch event
type TenantEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Tenant    Tenant        `protobuf:"bytes,2,opt,name=Tenant" json:"network,omitempty"`
}

func (m *TenantEvent) Reset()                    { *m = TenantEvent{} }
func (m *TenantEvent) String() string            { return proto.CompactTextString(m) }
func (*TenantEvent) ProtoMessage()               {}
func (*TenantEvent) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{4} }

func (m *TenantEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *TenantEvent) GetTenant() Tenant {
	if m != nil {
		return m.Tenant
	}
	return Tenant{}
}

func init() {
	proto.RegisterType((*TenantStatus)(nil), "netproto.TenantStatus")
	proto.RegisterType((*TenantSpec)(nil), "netproto.TenantSpec")
	proto.RegisterType((*Tenant)(nil), "netproto.Tenant")
	proto.RegisterType((*TenantList)(nil), "netproto.TenantList")
	proto.RegisterType((*TenantEvent)(nil), "netproto.TenantEvent")
	proto.RegisterEnum("netproto.TenantSpec_Type", TenantSpec_Type_name, TenantSpec_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TenantApi service

type TenantApiClient interface {
	GetTenant(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Tenant, error)
	ListTenants(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TenantList, error)
	WatchTenants(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TenantApi_WatchTenantsClient, error)
}

type tenantApiClient struct {
	cc *grpc.ClientConn
}

func NewTenantApiClient(cc *grpc.ClientConn) TenantApiClient {
	return &tenantApiClient{cc}
}

func (c *tenantApiClient) GetTenant(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := grpc.Invoke(ctx, "/netproto.TenantApi/GetTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantApiClient) ListTenants(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TenantList, error) {
	out := new(TenantList)
	err := grpc.Invoke(ctx, "/netproto.TenantApi/ListTenants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantApiClient) WatchTenants(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TenantApi_WatchTenantsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TenantApi_serviceDesc.Streams[0], c.cc, "/netproto.TenantApi/WatchTenants", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenantApiWatchTenantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TenantApi_WatchTenantsClient interface {
	Recv() (*TenantEvent, error)
	grpc.ClientStream
}

type tenantApiWatchTenantsClient struct {
	grpc.ClientStream
}

func (x *tenantApiWatchTenantsClient) Recv() (*TenantEvent, error) {
	m := new(TenantEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TenantApi service

type TenantApiServer interface {
	GetTenant(context.Context, *api.ObjectMeta) (*Tenant, error)
	ListTenants(context.Context, *api.ObjectMeta) (*TenantList, error)
	WatchTenants(*api.ObjectMeta, TenantApi_WatchTenantsServer) error
}

func RegisterTenantApiServer(s *grpc.Server, srv TenantApiServer) {
	s.RegisterService(&_TenantApi_serviceDesc, srv)
}

func _TenantApi_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantApiServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TenantApi/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).GetTenant(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantApiServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TenantApi/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantApiServer).ListTenants(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantApi_WatchTenants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TenantApiServer).WatchTenants(m, &tenantApiWatchTenantsServer{stream})
}

type TenantApi_WatchTenantsServer interface {
	Send(*TenantEvent) error
	grpc.ServerStream
}

type tenantApiWatchTenantsServer struct {
	grpc.ServerStream
}

func (x *tenantApiWatchTenantsServer) Send(m *TenantEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _TenantApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.TenantApi",
	HandlerType: (*TenantApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenant",
			Handler:    _TenantApi_GetTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _TenantApi_ListTenants_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTenants",
			Handler:       _TenantApi_WatchTenants_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tenant.proto",
}

func (m *TenantStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TenantID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.TenantID))
	}
	return i, nil
}

func (m *TenantSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TenantType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(len(m.TenantType)))
		i += copy(dAtA[i:], m.TenantType)
	}
	return i, nil
}

func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *TenantList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for _, msg := range m.Tenants {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.Tenant.Size()))
	n5, err := m.Tenant.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TenantStatus) Size() (n int) {
	var l int
	_ = l
	if m.TenantID != 0 {
		n += 1 + sovTenant(uint64(m.TenantID))
	}
	return n
}

func (m *TenantSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.TenantType)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *Tenant) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *TenantList) Size() (n int) {
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for _, e := range m.Tenants {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *TenantEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTenant(uint64(m.EventType))
	}
	l = m.Tenant.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func sovTenant(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTenant(x uint64) (n int) {
	return sovTenant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TenantStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenants = append(m.Tenants, &Tenant{})
			if err := m.Tenants[len(m.Tenants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTenant(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTenant = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tenant.proto", fileDescriptorTenant) }

var fileDescriptorTenant = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xb3, 0x6d, 0x7e, 0x69, 0xb2, 0xc9, 0xaf, 0x84, 0xed, 0x1f, 0xdc, 0x08, 0x25, 0x95,
	0x25, 0xa4, 0x82, 0x5a, 0xbb, 0x4a, 0x05, 0xa2, 0x1c, 0x10, 0x75, 0x49, 0xa1, 0x82, 0xb6, 0x28,
	0x2d, 0x42, 0x1c, 0x1d, 0x67, 0x48, 0x17, 0x92, 0x5d, 0xab, 0x1e, 0xb7, 0xaa, 0x10, 0x27, 0x24,
	0xc4, 0x23, 0x20, 0x6e, 0x5c, 0x39, 0xf2, 0x14, 0x3d, 0xf6, 0x09, 0x22, 0x54, 0x6e, 0x11, 0x0f,
	0x81, 0x76, 0x6d, 0x27, 0x56, 0xa2, 0x9e, 0xbc, 0x33, 0xfe, 0x7e, 0x3f, 0xb3, 0x33, 0xb3, 0xb4,
	0x84, 0x20, 0x5c, 0x81, 0x96, 0x7f, 0x22, 0x51, 0xb2, 0xbc, 0x00, 0xd4, 0xa7, 0xca, 0xed, 0x8e,
	0x94, 0x9d, 0x2e, 0xd8, 0xae, 0xcf, 0x6d, 0x57, 0x08, 0x89, 0x2e, 0x72, 0x29, 0x82, 0x48, 0x57,
	0x69, 0x74, 0x38, 0x1e, 0x87, 0x2d, 0xcb, 0x93, 0x3d, 0xdb, 0x07, 0x11, 0xb8, 0xa2, 0x2d, 0xed,
	0xe0, 0xcc, 0x3e, 0x05, 0xc1, 0x3d, 0xb0, 0x43, 0xe4, 0xdd, 0x40, 0x59, 0x3b, 0x20, 0xd2, 0x6e,
	0x9b, 0x0b, 0xaf, 0x1b, 0xb6, 0x21, 0xc1, 0xac, 0xa5, 0x30, 0x1d, 0xd9, 0x91, 0xb6, 0x4e, 0xb7,
	0xc2, 0x77, 0x3a, 0xd2, 0x81, 0x3e, 0xc5, 0xf2, 0x3b, 0xd7, 0x54, 0x55, 0x77, 0xec, 0x01, 0xba,
	0x91, 0xcc, 0xdc, 0xa6, 0xa5, 0x23, 0xdd, 0xd4, 0x21, 0xba, 0x18, 0x06, 0x6c, 0x83, 0xe6, 0xa3,
	0x78, 0xf7, 0xa9, 0x41, 0x96, 0xc9, 0x4a, 0xd6, 0xb9, 0x35, 0xe8, 0xd7, 0xe6, 0xa2, 0xc6, 0xd7,
	0x78, 0x7b, 0x55, 0xf6, 0x38, 0x42, 0xcf, 0xc7, 0xf3, 0xe6, 0x50, 0x68, 0x7e, 0x25, 0x94, 0xc6,
	0x14, 0x1f, 0x3c, 0xf6, 0x36, 0x89, 0x8e, 0xce, 0x7d, 0xd0, 0x94, 0x82, 0xb3, 0xf9, 0xf3, 0xcb,
	0x92, 0x71, 0x88, 0x27, 0x0d, 0x11, 0xf6, 0x56, 0x46, 0x5a, 0x4b, 0x49, 0xee, 0x5e, 0xf4, 0x6b,
	0x64, 0xd0, 0xaf, 0x2d, 0xc4, 0x55, 0xf0, 0xdc, 0x87, 0x54, 0x9d, 0x14, 0xcc, 0xac, 0xd1, 0xac,
	0xfa, 0xb2, 0x12, 0xcd, 0x6f, 0xbf, 0x3e, 0x3c, 0x3a, 0xd8, 0x6b, 0x34, 0xcb, 0x19, 0x56, 0xa0,
	0xff, 0xed, 0xee, 0xef, 0x34, 0xb7, 0xca, 0xc4, 0xfc, 0x31, 0x45, 0x73, 0x91, 0x9e, 0x3d, 0xa6,
	0x79, 0xa5, 0xdd, 0x03, 0x74, 0xf5, 0x25, 0x8a, 0xf5, 0xff, 0x2d, 0xd7, 0xe7, 0x56, 0x92, 0x74,
	0xe6, 0x2e, 0xfa, 0xb5, 0xcc, 0x65, 0x54, 0x7b, 0x66, 0x95, 0x8b, 0x2e, 0x17, 0xd0, 0x1c, 0x7a,
	0xd8, 0x0b, 0x4a, 0x0f, 0x5a, 0xef, 0xc1, 0x43, 0x4d, 0x98, 0xd2, 0x84, 0x1b, 0x9a, 0x30, 0x4a,
	0x3b, 0x95, 0x14, 0x63, 0x56, 0xcd, 0x35, 0x7d, 0xf1, 0x91, 0x8e, 0x3d, 0xa1, 0x59, 0xd5, 0xaf,
	0x31, 0xad, 0x31, 0xf3, 0x56, 0xf2, 0x76, 0xac, 0xd1, 0x2c, 0x9c, 0x45, 0xc5, 0x52, 0x9c, 0xc0,
	0x07, 0x2f, 0xc5, 0xd1, 0x4e, 0xf6, 0x9c, 0xe6, 0xa2, 0x1d, 0x19, 0x59, 0xcd, 0x58, 0x9c, 0x60,
	0xe8, 0xbf, 0x8e, 0x11, 0x53, 0xca, 0x81, 0x8e, 0x53, 0x9c, 0xd8, 0x6f, 0x3e, 0x4c, 0xf6, 0xf3,
	0x92, 0x07, 0xc8, 0xee, 0xd1, 0x99, 0x68, 0xee, 0x81, 0x41, 0x96, 0xa7, 0x57, 0x8a, 0xf5, 0xf2,
	0x38, 0xb8, 0x99, 0x08, 0xcc, 0xef, 0x84, 0x16, 0xa3, 0x5c, 0xe3, 0x14, 0x04, 0xb2, 0x1d, 0x5a,
	0xd0, 0x87, 0xe1, 0xa2, 0x67, 0xeb, 0xb3, 0x7a, 0x42, 0xc3, 0xac, 0x63, 0x0c, 0xfa, 0xb5, 0x79,
	0x50, 0xe1, 0xf8, 0x5e, 0x47, 0x56, 0xb6, 0x9d, 0x2c, 0x2d, 0x1e, 0xf3, 0xc4, 0x15, 0x9c, 0xa5,
	0xb8, 0xab, 0x9b, 0x02, 0xf0, 0x4c, 0x9e, 0x7c, 0x48, 0xb7, 0x15, 0x49, 0xea, 0x7f, 0x09, 0x2d,
	0x44, 0xc7, 0x2d, 0x9f, 0xb3, 0x75, 0x5a, 0x78, 0x06, 0x18, 0x3f, 0x85, 0xf1, 0xb5, 0x55, 0x26,
	0x0a, 0x98, 0x19, 0xf6, 0x80, 0x16, 0xd5, 0x40, 0xa2, 0x38, 0x98, 0xf4, 0x4c, 0x2c, 0x4d, 0xa9,
	0xcd, 0x0c, 0x7b, 0x44, 0x4b, 0x6f, 0x5c, 0xf4, 0x8e, 0xaf, 0x35, 0x2e, 0x8c, 0x1b, 0x75, 0xe3,
	0x66, 0x66, 0x9d, 0x54, 0x36, 0x7f, 0x7d, 0x5e, 0xba, 0x3f, 0x7c, 0xb1, 0xd9, 0xae, 0x5a, 0x48,
	0xd6, 0x97, 0x01, 0xb2, 0x5c, 0x1b, 0xba, 0x80, 0xc0, 0xa6, 0xfd, 0x10, 0x2b, 0xcc, 0xfe, 0x38,
	0xe2, 0x59, 0xfb, 0x6e, 0x0f, 0x3e, 0x39, 0xe5, 0x8b, 0xab, 0x2a, 0xb9, 0xbc, 0xaa, 0x92, 0xdf,
	0x57, 0x55, 0xf2, 0xed, 0x4f, 0x35, 0xf3, 0x8a, 0xb4, 0x72, 0xba, 0xca, 0xc6, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x06, 0xfd, 0x2a, 0x6a, 0xa9, 0x04, 0x00, 0x00,
}
