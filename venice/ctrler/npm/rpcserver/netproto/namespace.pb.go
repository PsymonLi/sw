// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: namespace.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Namespace Status
type NamespaceStatus struct {
	NamespaceID uint64 `protobuf:"varint,1,opt,name=NamespaceID,proto3" json:"NamespaceID,omitempty"`
}

func (m *NamespaceStatus) Reset()                    { *m = NamespaceStatus{} }
func (m *NamespaceStatus) String() string            { return proto.CompactTextString(m) }
func (*NamespaceStatus) ProtoMessage()               {}
func (*NamespaceStatus) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{0} }

func (m *NamespaceStatus) GetNamespaceID() uint64 {
	if m != nil {
		return m.NamespaceID
	}
	return 0
}

// NamespaceSpec captures all the namespace level configuration
type NamespaceSpec struct {
	Meta *api.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
}

func (m *NamespaceSpec) Reset()                    { *m = NamespaceSpec{} }
func (m *NamespaceSpec) String() string            { return proto.CompactTextString(m) }
func (*NamespaceSpec) ProtoMessage()               {}
func (*NamespaceSpec) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{1} }

func (m *NamespaceSpec) GetMeta() *api.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

// Namespace object
type Namespace struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           NamespaceSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         NamespaceStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{2} }

func (m *Namespace) GetSpec() NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return NamespaceSpec{}
}

func (m *Namespace) GetStatus() NamespaceStatus {
	if m != nil {
		return m.Status
	}
	return NamespaceStatus{}
}

type NamespaceList struct {
	Namespaces []*Namespace `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (m *NamespaceList) Reset()                    { *m = NamespaceList{} }
func (m *NamespaceList) String() string            { return proto.CompactTextString(m) }
func (*NamespaceList) ProtoMessage()               {}
func (*NamespaceList) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{3} }

func (m *NamespaceList) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// namespace watch event
type NamespaceEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Namespace Namespace     `protobuf:"bytes,2,opt,name=Namespace" json:"namespace,omitempty"`
}

func (m *NamespaceEvent) Reset()                    { *m = NamespaceEvent{} }
func (m *NamespaceEvent) String() string            { return proto.CompactTextString(m) }
func (*NamespaceEvent) ProtoMessage()               {}
func (*NamespaceEvent) Descriptor() ([]byte, []int) { return fileDescriptorNamespace, []int{4} }

func (m *NamespaceEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *NamespaceEvent) GetNamespace() Namespace {
	if m != nil {
		return m.Namespace
	}
	return Namespace{}
}

func init() {
	proto.RegisterType((*NamespaceStatus)(nil), "netproto.NamespaceStatus")
	proto.RegisterType((*NamespaceSpec)(nil), "netproto.NamespaceSpec")
	proto.RegisterType((*Namespace)(nil), "netproto.Namespace")
	proto.RegisterType((*NamespaceList)(nil), "netproto.NamespaceList")
	proto.RegisterType((*NamespaceEvent)(nil), "netproto.NamespaceEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NamespaceApi service

type NamespaceApiClient interface {
	GetNamespace(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Namespace, error)
	ListNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NamespaceList, error)
	WatchNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NamespaceApi_WatchNamespacesClient, error)
}

type namespaceApiClient struct {
	cc *grpc.ClientConn
}

func NewNamespaceApiClient(cc *grpc.ClientConn) NamespaceApiClient {
	return &namespaceApiClient{cc}
}

func (c *namespaceApiClient) GetNamespace(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := grpc.Invoke(ctx, "/netproto.NamespaceApi/GetNamespace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceApiClient) ListNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*NamespaceList, error) {
	out := new(NamespaceList)
	err := grpc.Invoke(ctx, "/netproto.NamespaceApi/ListNamespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceApiClient) WatchNamespaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (NamespaceApi_WatchNamespacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NamespaceApi_serviceDesc.Streams[0], c.cc, "/netproto.NamespaceApi/WatchNamespaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &namespaceApiWatchNamespacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NamespaceApi_WatchNamespacesClient interface {
	Recv() (*NamespaceEvent, error)
	grpc.ClientStream
}

type namespaceApiWatchNamespacesClient struct {
	grpc.ClientStream
}

func (x *namespaceApiWatchNamespacesClient) Recv() (*NamespaceEvent, error) {
	m := new(NamespaceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NamespaceApi service

type NamespaceApiServer interface {
	GetNamespace(context.Context, *api.ObjectMeta) (*Namespace, error)
	ListNamespaces(context.Context, *api.ObjectMeta) (*NamespaceList, error)
	WatchNamespaces(*api.ObjectMeta, NamespaceApi_WatchNamespacesServer) error
}

func RegisterNamespaceApiServer(s *grpc.Server, srv NamespaceApiServer) {
	s.RegisterService(&_NamespaceApi_serviceDesc, srv)
}

func _NamespaceApi_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceApiServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NamespaceApi/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceApiServer).GetNamespace(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceApi_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceApiServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.NamespaceApi/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceApiServer).ListNamespaces(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceApi_WatchNamespaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamespaceApiServer).WatchNamespaces(m, &namespaceApiWatchNamespacesServer{stream})
}

type NamespaceApi_WatchNamespacesServer interface {
	Send(*NamespaceEvent) error
	grpc.ServerStream
}

type namespaceApiWatchNamespacesServer struct {
	grpc.ServerStream
}

func (x *namespaceApiWatchNamespacesServer) Send(m *NamespaceEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _NamespaceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.NamespaceApi",
	HandlerType: (*NamespaceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespace",
			Handler:    _NamespaceApi_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _NamespaceApi_ListNamespaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchNamespaces",
			Handler:       _NamespaceApi_WatchNamespaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "namespace.proto",
}

func (m *NamespaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NamespaceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.NamespaceID))
	}
	return i, nil
}

func (m *NamespaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.TypeMeta.Size()))
	n2, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.ObjectMeta.Size()))
	n3, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Spec.Size()))
	n4, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Status.Size()))
	n5, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NamespaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, msg := range m.Namespaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NamespaceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n6, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NamespaceStatus) Size() (n int) {
	var l int
	_ = l
	if m.NamespaceID != 0 {
		n += 1 + sovNamespace(uint64(m.NamespaceID))
	}
	return n
}

func (m *NamespaceSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNamespace(uint64(l))
	}
	return n
}

func (m *Namespace) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovNamespace(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
}

func (m *NamespaceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		}
	}
	return n
}

func (m *NamespaceEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovNamespace(uint64(m.EventType))
	}
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
}

func sovNamespace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNamespace(x uint64) (n int) {
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceID", wireType)
			}
			m.NamespaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &api.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &Namespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNamespace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNamespace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamespace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamespace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamespace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNamespace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNamespace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNamespace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("namespace.proto", fileDescriptorNamespace) }

var fileDescriptorNamespace = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xc4, 0xca, 0xd7, 0x6e, 0xda, 0xa4, 0xda, 0x7c, 0xa2, 0xae, 0x41, 0x49, 0x64,
	0x84, 0xd4, 0x43, 0x6b, 0xa3, 0x04, 0x71, 0x02, 0x44, 0x4d, 0x0b, 0x42, 0x85, 0x82, 0x02, 0x12,
	0x67, 0xc7, 0x19, 0xdc, 0x45, 0xce, 0xee, 0x8a, 0x5d, 0x17, 0x45, 0x88, 0x13, 0x27, 0xde, 0x80,
	0x47, 0x40, 0x1c, 0x79, 0x8a, 0x1e, 0xfb, 0x04, 0x11, 0x0a, 0xb7, 0x3e, 0x05, 0xda, 0x4d, 0x62,
	0x2f, 0x60, 0xb8, 0xed, 0xcc, 0xce, 0xff, 0x37, 0x3b, 0xff, 0x59, 0xd4, 0xa2, 0xd1, 0x04, 0x04,
	0x8f, 0x62, 0xf0, 0xf9, 0x5b, 0x26, 0x19, 0x5e, 0xa3, 0x20, 0xf5, 0xc9, 0xbd, 0x96, 0x30, 0x96,
	0xa4, 0x10, 0x44, 0x9c, 0x04, 0x11, 0xa5, 0x4c, 0x46, 0x92, 0x30, 0x2a, 0x16, 0x75, 0xee, 0x51,
	0x42, 0xe4, 0x69, 0x36, 0xf2, 0x63, 0x36, 0x09, 0x38, 0x50, 0x11, 0xd1, 0x31, 0x0b, 0xc4, 0xbb,
	0xe0, 0x0c, 0x28, 0x89, 0x21, 0xc8, 0x24, 0x49, 0x85, 0x92, 0x26, 0x40, 0x4d, 0x75, 0x40, 0x68,
	0x9c, 0x66, 0x63, 0x58, 0x61, 0xf6, 0x0d, 0x4c, 0xc2, 0x12, 0x16, 0xe8, 0xf4, 0x28, 0x7b, 0xad,
	0x23, 0x1d, 0xe8, 0xd3, 0xb2, 0xfc, 0xc6, 0x5f, 0xba, 0xaa, 0x37, 0x4e, 0x40, 0x46, 0x8b, 0x32,
	0x6f, 0x80, 0x5a, 0x27, 0xab, 0xb9, 0x5e, 0xc8, 0x48, 0x66, 0x02, 0xf7, 0x50, 0x23, 0x4f, 0x3d,
	0x3e, 0x74, 0xac, 0x9e, 0xb5, 0x6b, 0x0f, 0xcd, 0x94, 0x77, 0x0b, 0x6d, 0x16, 0x22, 0x0e, 0x31,
	0xbe, 0x8e, 0xec, 0xa7, 0x20, 0x23, 0x5d, 0xdb, 0xe8, 0xb7, 0xfc, 0x88, 0x13, 0xff, 0xd9, 0xe8,
	0x0d, 0xc4, 0x52, 0xa5, 0x87, 0xfa, 0xd2, 0xfb, 0x5a, 0x45, 0xeb, 0xb9, 0x0c, 0xdf, 0x43, 0x6b,
	0x2f, 0xa7, 0x1c, 0x0c, 0xd9, 0xa6, 0x96, 0xad, 0x92, 0x61, 0xfb, 0x7c, 0xd6, 0xad, 0x5c, 0xcc,
	0xba, 0xd6, 0xe5, 0xac, 0xfb, 0xdf, 0x1e, 0xa1, 0x29, 0xa1, 0x30, 0xcc, 0x35, 0xf8, 0x18, 0xa1,
	0xa2, 0x83, 0x53, 0x2d, 0x6d, 0x1c, 0xba, 0x06, 0xa3, 0xa9, 0xa6, 0xde, 0x63, 0x13, 0x22, 0x61,
	0xc2, 0xe5, 0x74, 0x68, 0xc8, 0xf1, 0x03, 0x64, 0xab, 0x39, 0x9c, 0x9a, 0xc6, 0x6c, 0xfb, 0xab,
	0xcd, 0xfa, 0xbf, 0x8c, 0x19, 0x5e, 0x51, 0x38, 0x85, 0x12, 0x1c, 0x62, 0x03, 0xa5, 0xc5, 0xf8,
	0x18, 0xd5, 0x17, 0x0e, 0x3a, 0xb6, 0xc6, 0xec, 0x94, 0x61, 0x74, 0x41, 0xe8, 0x2c, 0x41, 0x5b,
	0x42, 0xc7, 0x06, 0x6a, 0x89, 0xf0, 0x0e, 0x0d, 0x8b, 0x9f, 0x10, 0x21, 0xf1, 0x00, 0xa1, 0xfc,
	0x03, 0x0a, 0xc7, 0xea, 0xd5, 0x76, 0x1b, 0xfd, 0x76, 0x49, 0x87, 0xa1, 0x51, 0xe6, 0x7d, 0xb1,
	0x50, 0x33, 0xbf, 0x39, 0x3a, 0x03, 0x2a, 0xf1, 0x43, 0xb4, 0xae, 0x0f, 0xca, 0x48, 0x6d, 0x7c,
	0xb3, 0xdf, 0xd4, 0xb6, 0xe5, 0xd9, 0xd0, 0xb9, 0x9c, 0x75, 0xff, 0x07, 0x15, 0xee, 0xcb, 0x29,
	0x07, 0xe3, 0x75, 0x85, 0x14, 0x9f, 0x18, 0xcb, 0x5c, 0xda, 0x5f, 0xf6, 0x9c, 0xf0, 0xea, 0x72,
	0xd4, 0x76, 0xfe, 0x2c, 0x93, 0x97, 0xd7, 0xf5, 0x3f, 0x55, 0xd1, 0x46, 0x1e, 0x1d, 0x70, 0x82,
	0x6f, 0xa3, 0x8d, 0x47, 0x20, 0x8b, 0x0f, 0xf3, 0xfb, 0x72, 0xdd, 0xb2, 0x76, 0x5e, 0x05, 0xdf,
	0x41, 0x4d, 0x65, 0x58, 0x9e, 0x12, 0x7f, 0x2a, 0xcb, 0x16, 0xac, 0x34, 0x5e, 0x05, 0xdf, 0x47,
	0xad, 0x57, 0x91, 0x8c, 0x4f, 0xff, 0x25, 0x77, 0x4a, 0xe4, 0xda, 0x18, 0xaf, 0x72, 0xd3, 0x72,
	0x0f, 0xbe, 0x7d, 0xdc, 0xb9, 0x6b, 0xfe, 0x74, 0x3b, 0x55, 0xfb, 0xb3, 0x39, 0x13, 0x12, 0xd7,
	0xc7, 0x90, 0x82, 0x04, 0x5c, 0xe3, 0x99, 0x74, 0xb7, 0x83, 0xf7, 0x05, 0xb5, 0x40, 0x7d, 0x08,
	0xb7, 0xce, 0xe7, 0x1d, 0xeb, 0x62, 0xde, 0xb1, 0xbe, 0xcf, 0x3b, 0xd6, 0xe7, 0x1f, 0x9d, 0xca,
	0x73, 0x6b, 0x54, 0xd7, 0x0d, 0x07, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x89, 0xa9, 0x59, 0xe4,
	0x87, 0x04, 0x00, 0x00,
}
