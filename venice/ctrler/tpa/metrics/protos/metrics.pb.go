// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metrics.proto

/*
	Package metricsprotos is a generated protocol buffer package.

	It is generated from these files:
		metrics.proto

	It has these top-level messages:
		MetricsSpec
		MetricsStatus
		Metrics
*/
package metricsprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"
import _ "github.com/pensando/sw/api/generated/monitoring"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricsSpec struct {
}

func (m *MetricsSpec) Reset()                    { *m = MetricsSpec{} }
func (m *MetricsSpec) String() string            { return proto.CompactTextString(m) }
func (*MetricsSpec) ProtoMessage()               {}
func (*MetricsSpec) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{0} }

type MetricsStatus struct {
}

func (m *MetricsStatus) Reset()                    { *m = MetricsStatus{} }
func (m *MetricsStatus) String() string            { return proto.CompactTextString(m) }
func (*MetricsStatus) ProtoMessage()               {}
func (*MetricsStatus) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{1} }

// Metrics stats Metrics object
type Metrics struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           MetricsSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         MetricsStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Metrics) Reset()                    { *m = Metrics{} }
func (m *Metrics) String() string            { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()               {}
func (*Metrics) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{2} }

func (m *Metrics) GetSpec() MetricsSpec {
	if m != nil {
		return m.Spec
	}
	return MetricsSpec{}
}

func (m *Metrics) GetStatus() MetricsStatus {
	if m != nil {
		return m.Status
	}
	return MetricsStatus{}
}

func init() {
	proto.RegisterType((*MetricsSpec)(nil), "metricsprotos.MetricsSpec")
	proto.RegisterType((*MetricsStatus)(nil), "metricsprotos.MetricsStatus")
	proto.RegisterType((*Metrics)(nil), "metricsprotos.Metrics")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricsApi service

type MetricsApiClient interface {
}

type metricsApiClient struct {
	cc *grpc.ClientConn
}

func NewMetricsApiClient(cc *grpc.ClientConn) MetricsApiClient {
	return &metricsApiClient{cc}
}

// Server API for MetricsApi service

type MetricsApiServer interface {
}

func RegisterMetricsApiServer(s *grpc.Server, srv MetricsApiServer) {
	s.RegisterService(&_MetricsApi_serviceDesc, srv)
}

var _MetricsApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metricsprotos.MetricsApi",
	HandlerType: (*MetricsApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "metrics.proto",
}

func (m *MetricsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MetricsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMetrics(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintMetrics(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMetrics(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintMetrics(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetricsSpec) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MetricsStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Metrics) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovMetrics(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovMetrics(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovMetrics(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovMetrics(uint64(l))
	return n
}

func sovMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metrics.proto", fileDescriptorMetrics) }

var fileDescriptorMetrics = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0xea, 0xd3, 0x40,
	0x18, 0xc5, 0xff, 0x69, 0x4b, 0x2b, 0x53, 0x62, 0x4b, 0x04, 0x89, 0xa1, 0xa4, 0x52, 0x50, 0x5c,
	0xd4, 0x0c, 0xd6, 0xad, 0x88, 0x06, 0x74, 0x23, 0xad, 0x52, 0x7b, 0x81, 0x49, 0xfa, 0x19, 0x47,
	0x92, 0x99, 0xa1, 0xf3, 0x45, 0x29, 0xd2, 0x95, 0x97, 0xf0, 0x14, 0x2e, 0x3c, 0x45, 0x97, 0x3d,
	0x41, 0x91, 0xba, 0xf3, 0x14, 0x92, 0x49, 0x62, 0xd3, 0x45, 0xdd, 0xe5, 0x3d, 0xde, 0xfb, 0xe5,
	0x7b, 0x09, 0xb1, 0x33, 0xc0, 0x0d, 0x8f, 0x75, 0xa0, 0x36, 0x12, 0xa5, 0x53, 0x4b, 0xa3, 0xb4,
	0x37, 0x4a, 0xa4, 0x4c, 0x52, 0xa0, 0x4c, 0x71, 0xca, 0x84, 0x90, 0xc8, 0x90, 0x4b, 0x51, 0x85,
	0xbd, 0x57, 0x09, 0xc7, 0x8f, 0x79, 0x14, 0xc4, 0x32, 0xa3, 0x0a, 0x84, 0x66, 0x62, 0x2d, 0xa9,
	0xfe, 0x42, 0x3f, 0x83, 0xe0, 0x31, 0xd0, 0x1c, 0x79, 0xaa, 0x8b, 0x6a, 0x02, 0xa2, 0xd9, 0xa6,
	0x5c, 0xc4, 0x69, 0xbe, 0x86, 0x1a, 0xf3, 0xb8, 0x81, 0x49, 0x64, 0x22, 0xa9, 0xb1, 0xa3, 0xfc,
	0x83, 0x51, 0x46, 0x98, 0xa7, 0x2a, 0xfe, 0xe0, 0xca, 0x5b, 0x8b, 0x1b, 0x33, 0x40, 0x56, 0xc5,
	0x9e, 0xfc, 0x27, 0x56, 0xae, 0xa3, 0x08, 0x29, 0x14, 0x7b, 0xb7, 0x65, 0x65, 0x62, 0x93, 0xfe,
	0xbc, 0x9c, 0xff, 0x5e, 0x41, 0x3c, 0x19, 0x10, 0xbb, 0x96, 0xc8, 0x30, 0xd7, 0x93, 0x1f, 0x2d,
	0xd2, 0xab, 0x1c, 0xe7, 0x39, 0xb9, 0xb5, 0xda, 0x2a, 0x98, 0x03, 0x32, 0xd7, 0xba, 0x6f, 0x3d,
	0xea, 0xcf, 0xec, 0x80, 0x29, 0x1e, 0xd4, 0x66, 0x78, 0x67, 0x7f, 0x1c, 0xdf, 0x1c, 0x8e, 0x63,
	0xeb, 0xcf, 0x71, 0xdc, 0x9b, 0x72, 0x91, 0x72, 0x01, 0xcb, 0x7f, 0x1d, 0xe7, 0x0d, 0x21, 0x6f,
	0xa3, 0x4f, 0x10, 0xa3, 0x21, 0xb4, 0x0c, 0x61, 0x60, 0x08, 0x67, 0x3b, 0xf4, 0x1a, 0x8c, 0xdb,
	0xc5, 0xb6, 0xa9, 0xcc, 0x38, 0x42, 0xa6, 0x70, 0xbb, 0x6c, 0xd4, 0x9d, 0xd7, 0xa4, 0x53, 0x5c,
	0xec, 0xb6, 0x0d, 0xc6, 0x0b, 0x2e, 0x7e, 0x62, 0xd0, 0xd8, 0x14, 0xde, 0x2d, 0x88, 0x05, 0x4d,
	0x2b, 0x88, 0x1b, 0x34, 0xd3, 0x77, 0x16, 0xa4, 0x5b, 0x4e, 0x75, 0x3b, 0x86, 0x34, 0xba, 0x42,
	0x32, 0x99, 0xd0, 0xad, 0x58, 0x43, 0x6d, 0x74, 0x83, 0x56, 0x51, 0x66, 0x0b, 0x42, 0xaa, 0xca,
	0x4b, 0xc5, 0xbd, 0x17, 0x3f, 0xbf, 0xdd, 0x7b, 0x76, 0xfe, 0x82, 0xed, 0x04, 0xd0, 0xe9, 0xa4,
	0x5c, 0xa3, 0xf7, 0x90, 0x7e, 0x3d, 0xaf, 0x09, 0x56, 0x20, 0x98, 0xc0, 0xdd, 0x85, 0xb7, 0x60,
	0x19, 0xec, 0xc2, 0xe1, 0xfe, 0xe4, 0x5b, 0x87, 0x93, 0x6f, 0xfd, 0x3a, 0xf9, 0xd6, 0xf7, 0xdf,
	0xfe, 0xcd, 0x3b, 0x2b, 0xea, 0x9a, 0xdb, 0x9e, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x66, 0x93,
	0xd3, 0xdf, 0xc9, 0x02, 0x00, 0x00,
}
