// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: diagnostics.proto

/*
	Package protos is a generated protocol buffer package.

	It is generated from these files:
		diagnostics.proto

	It has these top-level messages:
		Log
		Logs
		Stats
*/
package protos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import diagnostics "github.com/pensando/sw/api/generated/diagnostics"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Log struct {
	Log map[string]string `protobuf:"bytes,1,rep,name=Log" json:"log,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{0} }

func (m *Log) GetLog() map[string]string {
	if m != nil {
		return m.Log
	}
	return nil
}

type Logs struct {
	Logs []*Log `protobuf:"bytes,1,rep,name=Logs" json:"logs"`
}

func (m *Logs) Reset()                    { *m = Logs{} }
func (m *Logs) String() string            { return proto.CompactTextString(m) }
func (*Logs) ProtoMessage()               {}
func (*Logs) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{1} }

func (m *Logs) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Stats struct {
	Stats map[string]string `protobuf:"bytes,1,rep,name=Stats" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{2} }

func (m *Stats) GetStats() map[string]string {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*Log)(nil), "protos.Log")
	proto.RegisterType((*Logs)(nil), "protos.Logs")
	proto.RegisterType((*Stats)(nil), "protos.Stats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Diagnostics service

type DiagnosticsClient interface {
	Debug(ctx context.Context, in *diagnostics.DiagnosticsRequest, opts ...grpc.CallOption) (*diagnostics.DiagnosticsResponse, error)
}

type diagnosticsClient struct {
	cc *grpc.ClientConn
}

func NewDiagnosticsClient(cc *grpc.ClientConn) DiagnosticsClient {
	return &diagnosticsClient{cc}
}

func (c *diagnosticsClient) Debug(ctx context.Context, in *diagnostics.DiagnosticsRequest, opts ...grpc.CallOption) (*diagnostics.DiagnosticsResponse, error) {
	out := new(diagnostics.DiagnosticsResponse)
	err := grpc.Invoke(ctx, "/protos.Diagnostics/Debug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Diagnostics service

type DiagnosticsServer interface {
	Debug(context.Context, *diagnostics.DiagnosticsRequest) (*diagnostics.DiagnosticsResponse, error)
}

func RegisterDiagnosticsServer(s *grpc.Server, srv DiagnosticsServer) {
	s.RegisterService(&_Diagnostics_serviceDesc, srv)
}

func _Diagnostics_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(diagnostics.DiagnosticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Diagnostics/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServer).Debug(ctx, req.(*diagnostics.DiagnosticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diagnostics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Diagnostics",
	HandlerType: (*DiagnosticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Debug",
			Handler:    _Diagnostics_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diagnostics.proto",
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for k, _ := range m.Log {
			dAtA[i] = 0xa
			i++
			v := m.Log[k]
			mapSize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			i = encodeVarintDiagnostics(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Logs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for k, _ := range m.Stats {
			dAtA[i] = 0xa
			i++
			v := m.Stats[k]
			mapSize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			i = encodeVarintDiagnostics(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintDiagnostics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Log) Size() (n int) {
	var l int
	_ = l
	if len(m.Log) > 0 {
		for k, v := range m.Log {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			n += mapEntrySize + 1 + sovDiagnostics(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Logs) Size() (n int) {
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovDiagnostics(uint64(l))
		}
	}
	return n
}

func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for k, v := range m.Stats {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			n += mapEntrySize + 1 + sovDiagnostics(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDiagnostics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiagnostics(x uint64) (n int) {
	return sovDiagnostics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Log == nil {
				m.Log = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiagnostics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiagnostics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Log[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiagnostics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiagnostics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stats[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiagnostics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiagnostics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiagnostics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiagnostics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiagnostics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("diagnostics.proto", fileDescriptorDiagnostics) }

var fileDescriptorDiagnostics = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbb, 0xce, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0x2f, 0xa8, 0xb8, 0x20, 0xa8, 0xe9, 0x10, 0x45, 0xa8, 0xa9, 0x32, 0x15, 0x09,
	0x62, 0x51, 0x24, 0x54, 0x18, 0x4b, 0xbb, 0x65, 0x40, 0x61, 0x64, 0xca, 0xc5, 0x18, 0x8b, 0xc4,
	0x27, 0xd4, 0x76, 0xa1, 0x2f, 0xc0, 0xb3, 0x31, 0xf2, 0x04, 0xd5, 0xa7, 0x8e, 0x7d, 0x8a, 0x4f,
	0xb1, 0x53, 0x35, 0x4b, 0x87, 0x6f, 0x48, 0xce, 0xc5, 0xbf, 0xff, 0x39, 0xff, 0xe1, 0xe0, 0x49,
	0x21, 0x52, 0x2e, 0x41, 0x69, 0x91, 0xab, 0xa8, 0xde, 0x81, 0x06, 0xf2, 0xd8, 0x06, 0xe5, 0xbf,
	0xe2, 0x00, 0xbc, 0x64, 0x34, 0xad, 0x05, 0x4d, 0xa5, 0x04, 0x9d, 0x6a, 0x01, 0xb2, 0xa5, 0xfc,
	0x2d, 0x17, 0xfa, 0x87, 0xc9, 0xa2, 0x1c, 0x2a, 0x5a, 0x33, 0xa9, 0x52, 0x59, 0x00, 0x55, 0xbf,
	0xe9, 0x9e, 0x49, 0x91, 0x33, 0x6a, 0xb4, 0x28, 0x55, 0x23, 0xe5, 0x4c, 0x76, 0xd5, 0x54, 0xc8,
	0xbc, 0x34, 0x05, 0xbb, 0x8c, 0x79, 0xdb, 0x19, 0xc3, 0x81, 0x03, 0xb5, 0xed, 0xcc, 0x7c, 0xb7,
	0x95, 0x2d, 0x6c, 0xd6, 0xe2, 0xd1, 0x8d, 0xad, 0x8d, 0x47, 0x67, 0x9b, 0x56, 0x50, 0x98, 0x92,
	0x39, 0x3e, 0xfc, 0x83, 0xfb, 0x31, 0x70, 0xf2, 0xd1, 0x06, 0x0f, 0xcd, 0xfb, 0x8b, 0xf1, 0x72,
	0xea, 0xde, 0x54, 0x14, 0x03, 0x6f, 0xbe, 0xad, 0xd4, 0xbb, 0xc3, 0x7a, 0x72, 0x3e, 0x06, 0xcf,
	0x4a, 0xe0, 0x6f, 0xa0, 0x12, 0x9a, 0x55, 0xb5, 0x3e, 0x24, 0x8d, 0xc6, 0xff, 0x80, 0x47, 0x17,
	0x86, 0xbc, 0xc0, 0xfd, 0x9f, 0xec, 0xe0, 0xa1, 0x39, 0x5a, 0x3c, 0x49, 0x9a, 0x94, 0x4c, 0xf1,
	0x70, 0x9f, 0x96, 0x86, 0x79, 0x3d, 0xdb, 0x73, 0xc5, 0xa7, 0xde, 0x0a, 0x85, 0xef, 0xf0, 0x20,
	0x06, 0xae, 0xc8, 0x6b, 0x17, 0xdb, 0xdd, 0xe3, 0xce, 0xee, 0xf5, 0xe8, 0x7c, 0x0c, 0x06, 0x25,
	0x70, 0x95, 0x58, 0x24, 0xfc, 0x8b, 0xf0, 0xf0, 0xab, 0x4e, 0xb5, 0x22, 0x9f, 0xdb, 0xa4, 0x55,
	0x79, 0x17, 0x95, 0x6d, 0xba, 0xbf, 0x73, 0xfd, 0xf2, 0x7c, 0x0c, 0x9e, 0xab, 0xa6, 0xee, 0xf8,
	0x76, 0x5a, 0x7f, 0x85, 0xf1, 0x95, 0x7c, 0x88, 0xf7, 0xe5, 0x37, 0x3c, 0xde, 0x5c, 0xcf, 0x82,
	0xc4, 0x78, 0xb8, 0x61, 0x99, 0xe1, 0x24, 0x88, 0xba, 0xd7, 0xd2, 0x41, 0x12, 0xf6, 0xcb, 0x30,
	0xa5, 0xfd, 0xf9, 0x6d, 0x40, 0xd5, 0x20, 0x15, 0x0b, 0x1f, 0xad, 0x9f, 0xfe, 0x3b, 0xcd, 0xd0,
	0xff, 0xd3, 0x0c, 0xdd, 0x9d, 0x66, 0xe8, 0x0b, 0xca, 0xdc, 0xb9, 0xbd, 0xbf, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x95, 0xea, 0x24, 0xa4, 0x8a, 0x02, 0x00, 0x00,
}
