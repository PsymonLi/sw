// Resource definitions

syntax = "proto3";

package rproto;

// resource kinds
enum ResourceKind {
    UnknownKind = 0;
    Scalar      = 1;
    Range       = 2;
    Set         = 3;
}

// request types
enum AllocType {
    Any        = 0;
    Specific   = 1;
}

// Resource attributes
message ResourceAttributes {
    map<string, string> Attributes = 1; // attributes <key, value> pairs
}

// Scalar resource
message ScalarResource {
    uint64 TotalResource     = 1;  // Total resources
    uint64 AvailableResource = 2;  // Currently available resources
}

// Range resource
message RangeResource {
    uint64 Begin        = 1;   // Beginning of the range
    uint64 End          = 2;   // End of range
    uint64 NumAvailable = 3;   // # of available values
    bytes  Allocated    = 4;   // bitmap of Allocated values in the range
}

// Set resource
message SetResource {
    uint64 NumTotal       = 1;  // total # of items
    uint64 NumAvailable   = 2;  // available # of items
    repeated uint64 Items = 3;  // list of provided items
    map<uint64, uint64> AllocatedItems = 4;  // list of consumed items
}

// Resource definition
message Resource {
    string        ResourceType = 1;           // resource type
    ResourceKind  ResourceKind = 2;           // kind of resource
    ScalarResource    Scalar   = 3;           // scalar resource state
    RangeResource     Range    = 4;           // range resource state
    SetResource       Set      = 5;           // set resource state
    ResourceAttributes Attributes = 6; // resource attributes
}

// resource request Constraints
message ResourceConstraints {
    string              ProviderID = 1;  // request on a specific provider
    ResourceAttributes  Attributes = 2;  // list of attributes to match on
}

// resource request
message ResourceRequest {
    string    ResourceType    = 1; // resource type
    AllocType AllocType       = 2; // allocation type 'any' or 'specific'
    string    Scheduler       = 3; // scheduling algorithm to use
    uint64    Quantity        = 4; // number of resources to allocate
    string    ConsumerID      = 5; // unique id for the resource consumer
    repeated uint64  Values   = 6; // specific value to allocate
    ResourceConstraints Constraints = 7; // resource scheduling Constraints
}

// ResourceProvide is the resource provider
message ResourceProvide {
    Resource   Resource   = 1;
    string     ProviderID = 2;
}

// ResourceConsumer is a resource consumer instance
message ResourceConsumer {
    string          ConsumerID   = 1;
    string          ProviderID   = 2;
    string          ResourceType = 3;
    repeated uint64 Values       = 4;
}

// ResourceProvider provides a resource
message ResourceProvider {
    Resource     Resource   = 1;
    string       ProviderID = 2;
    map<string, ResourceConsumer> Consumers = 3;
}
