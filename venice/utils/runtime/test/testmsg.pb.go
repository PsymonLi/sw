// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testmsg.proto

/*
	Package runtimetest is a generated protocol buffer package.

	It is generated from these files:
		testmsg.proto

	It has these top-level messages:
		TestProtoMessage
*/
package runtimetest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestProtoMessage struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"metadata,omitempty"`
	Field1         string `protobuf:"bytes,3,opt,name=Field1,proto3" json:"Field1,omitempty"`
}

func (m *TestProtoMessage) Reset()                    { *m = TestProtoMessage{} }
func (m *TestProtoMessage) String() string            { return proto.CompactTextString(m) }
func (*TestProtoMessage) ProtoMessage()               {}
func (*TestProtoMessage) Descriptor() ([]byte, []int) { return fileDescriptorTestmsg, []int{0} }

func (m *TestProtoMessage) GetField1() string {
	if m != nil {
		return m.Field1
	}
	return ""
}

func init() {
	proto.RegisterType((*TestProtoMessage)(nil), "runtimetest.TestProtoMessage")
}
func (m *TestProtoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestProtoMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTestmsg(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTestmsg(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Field1) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTestmsg(dAtA, i, uint64(len(m.Field1)))
		i += copy(dAtA[i:], m.Field1)
	}
	return i, nil
}

func encodeVarintTestmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestProtoMessage) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTestmsg(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTestmsg(uint64(l))
	l = len(m.Field1)
	if l > 0 {
		n += 1 + l + sovTestmsg(uint64(l))
	}
	return n
}

func sovTestmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTestmsg(x uint64) (n int) {
	return sovTestmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestProtoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestProtoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestProtoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTestmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTestmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTestmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTestmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("testmsg.proto", fileDescriptorTestmsg) }

var fileDescriptorTestmsg = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0x1d, 0x85, 0x8a, 0xa9, 0x45, 0x59, 0x41, 0x42, 0x0f, 0x49, 0x11, 0x84, 0x1e, 0x6a,
	0xd6, 0x9f, 0xb3, 0x97, 0x1e, 0xbc, 0x95, 0x48, 0xc8, 0x0b, 0x6c, 0x9a, 0x71, 0x5d, 0xe9, 0xfe,
	0xd0, 0x9d, 0x20, 0x7d, 0x16, 0x5f, 0xa8, 0xc7, 0x3e, 0x41, 0x90, 0x1c, 0x7d, 0x0a, 0xc9, 0xb6,
	0x87, 0xde, 0xe6, 0x1b, 0xbe, 0x8f, 0x99, 0x68, 0x44, 0xe8, 0x49, 0x7b, 0x99, 0xb9, 0xb5, 0x25,
	0xcb, 0x86, 0xeb, 0xc6, 0x90, 0xd2, 0xd8, 0x6f, 0xc7, 0x0f, 0x52, 0xd1, 0x67, 0x53, 0x65, 0x4b,
	0xab, 0xb9, 0xb4, 0xd2, 0xf2, 0xe0, 0x54, 0xcd, 0x47, 0xa0, 0x00, 0x61, 0xda, 0xb7, 0xe3, 0xfb,
	0x23, 0xdd, 0xa1, 0xf1, 0xc2, 0xd4, 0x96, 0xfb, 0x6f, 0x2e, 0x9c, 0xe2, 0x1a, 0x49, 0xec, 0xb5,
	0xbb, 0x1f, 0x88, 0xae, 0x4b, 0xf4, 0xf4, 0xde, 0xd3, 0x02, 0xbd, 0x17, 0x12, 0xd9, 0x63, 0x04,
	0x65, 0x0c, 0x13, 0x98, 0x0e, 0x9f, 0x47, 0x99, 0x70, 0x2a, 0x2b, 0x37, 0x0e, 0x17, 0x48, 0x62,
	0x7e, 0xb3, 0x6d, 0xd3, 0x93, 0x5d, 0x9b, 0xc2, 0x5f, 0x9b, 0x9e, 0xcf, 0x94, 0x59, 0x29, 0x83,
	0x05, 0x94, 0xec, 0x35, 0x82, 0x3c, 0x3e, 0x0d, 0xc5, 0x55, 0x28, 0xf2, 0xea, 0x0b, 0x97, 0x14,
	0x9a, 0xe4, 0xa8, 0x61, 0xfd, 0xe9, 0x5a, 0x90, 0x98, 0x59, 0xad, 0x08, 0xb5, 0xa3, 0x4d, 0x01,
	0x39, 0xbb, 0x8d, 0x06, 0x6f, 0x0a, 0x57, 0xf5, 0x53, 0x7c, 0x36, 0x81, 0xe9, 0x45, 0x71, 0xa0,
	0xf9, 0xe5, 0xb6, 0x4b, 0x60, 0xd7, 0x25, 0xf0, 0xdb, 0x25, 0x50, 0x0d, 0xc2, 0xcb, 0x2f, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x52, 0x5e, 0x39, 0x85, 0x26, 0x01, 0x00, 0x00,
}
