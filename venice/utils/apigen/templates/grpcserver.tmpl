// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}}ApiServer is a auto generated package.
Input file: {{.Name}}
*/
package {{.GoPkg.Name}}ApiServer
{{$validators := getValidatorManifest .}}{{$storageTransformers := getStorageTransformersManifest .}}{{if isAPIServerServed .}}
import (
	"context"
	"fmt"
	"time"
	"strings"

    "github.com/gogo/protobuf/types"
	"github.com/pkg/errors"
	"github.com/satori/go.uuid"
	"google.golang.org/grpc"

	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/apiserver/pkg"
	{{.GoPkg.Name}} "{{getRelPath .}}/generated/{{.GoPkg.Name}}"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/runtime"
	"github.com/pensando/sw/venice/utils/ctxutils"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/errors"
	"github.com/pensando/sw/api/listerwatcher"
	"github.com/pensando/sw/venice/globals"

)
{{$pkgname := .GoPkg.Name}}{{$flname := (getFileName .Name)}}

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type s{{$pkgname}}{{$flname}}Backend struct {
	Services  map[string]apiserver.Service
	Messages  map[string]apiserver.Message
	logger log.Logger
	scheme *runtime.Scheme

	{{range .Services}}
	endpoints{{.Name}} *e{{.Name}}Endpoints{{end}}
}
{{range .Services}}{{$svcname := .Name}}
type e{{.Name}}Endpoints struct {
	Svc           s{{$pkgname}}{{$flname}}Backend
	fnAutoWatchSvc{{$svcname}} func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error
	{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}} {{else}}
	fn{{.Name}} func(ctx context.Context, t interface{}) (interface{}, error){{end}}{{end}}
	{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
	fnAutoWatch{{.}} func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error {{end}}{{end}}
}{{end}}

func (s *s{{$pkgname}}{{$flname}}Backend) regMsgsFunc(l log.Logger, scheme *runtime.Scheme) {
	l.Infof("registering message for s{{$pkgname}}{{$flname}}Backend")
	s.Messages = map[string]apiserver.Message{
		{{range .Messages}}{{if isNestedMessage .}}{{else}}
		"{{$pkgname}}.{{.Name}}":     apisrvpkg.NewMessage("{{$pkgname}}.{{.Name}}"){{if ne (len (getDbKey .)) 0}}.WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := {{$pkgname}}.{{.Name}}{}
				return r.MakeKey(prefix)
			}
			r := i.({{$pkgname}}.{{.Name}})
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.({{$pkgname}}.{{.Name}})
			r.Kind = "{{.Name}}"
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create bool, updateFn kvstore.UpdateFunc) (interface{}, error) {
			r := i.({{$pkgname}}.{{.Name}})
			key := r.MakeKey(prefix)
			r.Kind = "{{.Name}}"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				if err != nil {
					l.ErrorLog("msg", "KV create failed", "key", key, "error", err)
				}
			} else { {{if isSpecStatusMessage .}}
				if updateFn != nil  {
					into := &{{$pkgname}}.{{.Name}}{}
					err = kvs.ConsistentUpdate(ctx, key, into, updateFn)
				} else { {{end}}
				if r.ResourceVersion != "" {
					l.Infof("resource version is specified %s\n", r.ResourceVersion)
					err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
				} else {
					err = kvs.Update(ctx, key, &r)
				}
				if err != nil {
					l.ErrorLog("msg", "KV update failed", "key", key, "error", err)
				}{{if isSpecStatusMessage .}}
				} {{end}}

			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.({{$pkgname}}.{{.Name}})
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				if err != nil {
					l.ErrorLog("msg", "KV transaction create failed", "key", key, "error", err)
				}
			} else {
				err = txn.Update(key, &r)
				if err != nil {
					l.ErrorLog("msg", "KV transaction update failed", "key", key, "error", err)
				}
			}
			return err
		}).WithUUIDWriter(func(i interface{}) (interface{}, error) {
			r := i.({{$pkgname}}.{{.Name}})
			r.UUID = uuid.NewV4().String()
			return r, nil
		}).WithCreationTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.({{$pkgname}}.{{.Name}})
			var err error
            ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.CreationTime.Timestamp = *ts
			}
			return r, err
		}).WithModTimeWriter(func(i interface{}) (interface{}, error) {
			r := i.({{$pkgname}}.{{.Name}})
			var err error
            ts, err := types.TimestampProto(time.Now())
			if err == nil {
				r.ModTime.Timestamp = *ts
			}
			return r, err
		}).WithSelfLinkWriter(func (path, ver, prefix string, i interface{}) (interface{}, error){
			r := i.({{$pkgname}}.{{.Name}})
			r.SelfLink = path
			return r, nil
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := {{$pkgname}}.{{.Name}}{}
			err := kvs.Get(ctx, key, &r)
			if err != nil {
				l.ErrorLog("msg", "Object get failed", "key", key, "error", err)
			}
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := {{$pkgname}}.{{.Name}}{}
			err := kvs.Delete(ctx, key, &r)
			if err != nil {
				l.ErrorLog("msg", "Object delete failed", "key", key, "error", err)
			}
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			err := txn.Delete(key)
			if err != nil {
				l.ErrorLog("msg", "Object Txn delete failed", "key", key, "error", err)
			}
			return err
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object{
			r := i.({{$pkgname}}.{{.Name}})
			return &r
		}){{$msgname := .Name}}{{with (index $validators.Map (derefStr .Name))}}.WithValidate(func(i interface{}, ver string, ignoreStatus bool) []error {
			r := i.({{$pkgname}}.{{$msgname}})
			return r.Validate(ver, "", ignoreStatus)
		}){{end}}{{if isSpecStatusMessage .}}.WithReplaceSpecFunction(func (i interface{}) kvstore.UpdateFunc {
			var n *{{$pkgname}}.{{.Name}}
			if v, ok := i.({{$pkgname}}.{{.Name}}); ok {
				n = &v
			} else if v, ok := i.(*{{$pkgname}}.{{.Name}}); ok {
				n = v
			} else {
				return nil
			}
			return func(oldObj runtime.Object) (runtime.Object, error) {
				if ret, ok := oldObj.(*{{$pkgname}}.{{.Name}}); ok {
					ret.Name, ret.Tenant, ret.Namespace, ret.Labels, ret.ModTime = n.Name, n.Tenant, n.Namespace, n.Labels, n.ModTime
					ret.Spec = n.Spec
					return ret, nil
				}
				return nil, errors.New("invalid object")
			}
		}).WithReplaceStatusFunction(func (i interface{}) kvstore.UpdateFunc {
			var n *{{$pkgname}}.{{.Name}}
			if v, ok := i.({{$pkgname}}.{{.Name}}); ok {
				n = &v
			} else if v, ok := i.(*{{$pkgname}}.{{.Name}}); ok {
				n = v
			} else {
				return nil
			}
			return func(oldObj runtime.Object) (runtime.Object, error) {
				if ret, ok := oldObj.(*{{$pkgname}}.{{.Name}}); ok {
					ret.Status = n.Status
					return ret, nil
				}
				return nil, errors.New("invalid object")
			}
		}){{end}}{{$msgname := .Name}}{{with (index $storageTransformers.Map (derefStr .Name))}}{{if .HasTransformers}}.WithStorageTransformer(&{{$pkgname}}.Storage{{$msgname}}Transformer){{end}}{{end}},
		{{else}}{{if isListHelper .}}.WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {
			{{$objname := getListType . true}}
			into := {{$pkgname}}.{{.Name}}{}
			into.Kind = "{{.Name}}"
			r := {{$objname}}{}
			r.ObjectMeta = options.ObjectMeta
			key := r.MakeKey(prefix)
			err := kvs.ListFiltered(ctx, key, &into, *options)
			if err != nil {
				l.ErrorLog("msg", "Object ListFiltered failed", "key", key, "error", err)
				return nil, err
			}{{with (index $storageTransformers.Map (derefStr .Name))}}{{if .HasTransformers}}
			err = into.ApplyStorageTransformer(ctx, false)
			if err != nil {
  			return nil, err
			}{{end}}{{end}}
			return into, nil
		}).WithSelfLinkWriter(func (path, ver, prefix string, i interface{}) (interface{}, error){
			r := i.({{$pkgname}}.{{.Name}})
			for i := range r.Items {
				r.Items[i].SelfLink = r.Items[i].MakeURI("{{getFileCategory .}}", ver, prefix)
			}
			return r, nil
		}).WithGetRuntimeObject(func(i interface{}) runtime.Object{
			r := i.({{$pkgname}}.{{.Name}})
			return &r
		}){{end}},{{end}}{{end}}{{end}}
		// Add a message handler for ListWatch options
		"api.ListWatchOptions":                      apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	apisrv.RegisterMessages("{{$pkgname}}", s.Messages)
	// add messages to package.
	if 	pkgMessages == nil {
		pkgMessages = make(map[string]apiserver.Message)
	}
	for k, v := range s.Messages {
		pkgMessages[k] = v
	}
}

func (s *s{{$pkgname}}{{$flname}}Backend) regSvcsFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {
	{{range .Services}}{{$svcname := .Name}}{{$svcparams := (getSvcParams .)}}{{$svcver := $svcparams.Version}}{{$svcprefix := $svcparams.Prefix}}
	{
		srv := apisrvpkg.NewService("{{$pkgname}}.{{.Name}}")
		s.endpoints{{$svcname}}.fnAutoWatchSvc{{$svcname}} = srv.WatchFromKv
		{{range .Methods}}{{$methparams := (getMethodParams .)}}{{if (strEq $methparams.Oper "WatchOper")}}{{else}}
		s.endpoints{{$svcname}}.fn{{.Name}} = srv.AddMethod("{{.Name}}",
			apisrvpkg.NewMethod(srv, pkgMessages["{{getInputType $pkgname . true}}"], pkgMessages["{{getOutputType $pkgname . true}}"], "{{$svcprefix}}", "{{.Name}}")).WithOper(apiserver.{{$methparams.Oper}}){{if isAutoList .}}{{else}}{{if eq (len (getDbKey .RequestType)) 0}}.WithPreCommitHook(func(ctx context.Context, kvs kvstore.Interface, txn kvstore.Txn, key string, oper apiserver.APIOperType, i interface{}) (interface{}, bool, error) {
			return i, false, nil
		}){{end}}{{end}}.WithVersion("{{$svcver}}").WithMakeURI(func(i interface{}) (string, error) { {{if isRestExposed .}}{{$uri := getURIKey . $svcver false}}{{if $uri.Ref}}
			in, ok := i.({{getInputType $pkgname . true}})
			if !ok {
				return "", fmt.Errorf("wrong type")
			} {{end}}
			return fmt.Sprint("/", globals.ConfigURIPrefix, "/", {{$uri.Str}}), nil{{else}}
			return "", fmt.Errorf("not rest endpoint"){{end}}
		}).HandleInvocation
		{{end}}{{end}}
		{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
		s.endpoints{{$svcname}}.fnAutoWatch{{.}} = pkgMessages["{{$pkgname}}.{{.}}"].WatchFromKv
		{{end}}{{end}}
		s.Services = map[string]apiserver.Service{
			"{{$pkgname}}.{{.Name}}": srv,
		}
		apisrv.RegisterService("{{$pkgname}}.{{.Name}}", srv)
		endpoints := {{$pkgname}}.Make{{$svcname}}ServerEndpoints(s.endpoints{{$svcname}}, logger)
		server := {{$pkgname}}.MakeGRPCServer{{$svcname}}(ctx, endpoints, logger)
		{{$pkgname}}.Register{{.Name}}Server(grpcserver.GrpcServer, server)
	}{{end}}
}

func (s *s{{$pkgname}}{{$flname}}Backend) regWatchersFunc(ctx context.Context, logger log.Logger, grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) {
	{{range .Services}}{{$svcname := .Name}}{{$svcparams := (getSvcParams .)}}{{$svcver := $svcparams.Version}}{{$svcprefix := $svcparams.Prefix}}
	// Add Watchers
	{
		{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}
		// Service watcher
		svc := s.Services["{{$pkgname}}.{{.Name}}"]
		if svc != nil {
			svc.WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfnMap map[string]func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
				key := globals.ConfigRootPrefix + "/{{$svcprefix}}"
				wstream := stream.(grpc.ServerStream)
				nctx, cancel := context.WithCancel(wstream.Context())
				defer cancel()
				watcher, err := kvs.WatchFiltered(nctx, key, *options)
				if err != nil {
					l.ErrorLog("msg", "error starting Watch for service", "error", err, "service", "{{.Name}}")
					return err
				}
				return listerwatcher.SvcWatch(nctx, watcher, wstream, txfnMap, version, l)
			})
		}

		{{range $cruds}}
		pkgMessages["{{$pkgname}}.{{.}}"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := {{$pkgname}}.{{.}}{}
			key := o.MakeKey(svcprefix)
			if strings.HasSuffix(key, "//") {
				key = strings.TrimSuffix(key, "/")
			}
			wstream := stream.({{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Server)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			id := fmt.Sprintf("%s-%x", ctxutils.GetPeerID(nctx), &key)

			nctx = ctxutils.SetContextID(nctx, id)
			if kvs == nil {
				return fmt.Errorf("Nil KVS")
			}
			l.InfoLog("msg", "KVWatcher starting watch", "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
			watcher, err := kvs.WatchFiltered(nctx, key, *options)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
				return err
			}
			timer := time.NewTimer(apiserver.DefaultWatchHoldInterval)
			if !timer.Stop() {
				<- timer.C
			}
			running := false
			events := &{{$pkgname}}.AutoMsg{{.}}WatchHelper{}
			sendToStream := func() error {
				l.DebugLog("msg", "writing to stream", "len", len(events.Events))
				if err := wstream.Send(events); err != nil {
					l.ErrorLog("msg", "Stream send error'ed for Order", "error", err, "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
					return err
				}
				events = &{{$pkgname}}.AutoMsg{{.}}WatchHelper{}
				return nil
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.ErrorLog("msg", "Channel closed for Watcher", "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
						return nil
					}
					in, ok := ev.Object.(*{{$pkgname}}.{{.}})
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						}
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					{{$crudname := .}}{{with (index $storageTransformers.Map (getWatchHelperName .))}}{{if .HasTransformers}}{
						txin, err := {{$pkgname}}.Storage{{$crudname}}Transformer.TransformFromStorage(nctx, *in)
						if err != nil {
							return errors.Wrap(err, "Failed to apply storage transformer to {{$crudname}}")
						}
						obj := txin.({{$pkgname}}.{{$crudname}})
						in = &obj
					}{{end}}{{end}}
					strEvent := &{{$pkgname}}.AutoMsg{{.}}WatchHelper_WatchEvent{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "received {{.}} watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "{{.}}", "fromver", in.APIVersion, "tover", version, "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
							break
						}
						strEvent.Object = i.(*{{$pkgname}}.{{.}})
					}
					events.Events = append(events.Events, strEvent)
					if !running {
						running = true
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
					if len(events.Events) >= apiserver.DefaultWatchBatchSize {
						if err = sendToStream(); err != nil {
							return err
						}
						if !timer.Stop() {
							<- timer.C
						}
						timer.Reset(apiserver.DefaultWatchHoldInterval)
					}
				case <-timer.C:
						running = false
						if err = sendToStream(); err != nil {
							return err
						}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for Watcher", "WatcherID", id, "bbject", "{{$pkgname}}.{{.}}")
					return wstream.Context().Err()
				}
			}
		})
		{{end}}{{end}}
	}
	{{end}}
}


func (s *s{{$pkgname}}{{$flname}}Backend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	// register all messages in the package if not done already
	s.logger = logger
	s.scheme = scheme
	registerMessages(logger, scheme)
	registerServices(ctx, logger, grpcserver, scheme)
	registerWatchers(ctx, logger, grpcserver, scheme)
	return nil
}

func (s *s{{$pkgname}}{{$flname}}Backend) Reset() {
	cleanupRegistration()
}
{{range .Services}}{{$svcname := .Name}}{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}} {{else}}
func (e *e{{$svcname}}Endpoints) {{.Name}}(ctx context.Context, t {{getInputType $pkgname . true}}) ( {{getOutputType $pkgname . true}}, error) {
	r, err := e.fn{{.Name}}(ctx, t)
	if err == nil {
		return r.({{getOutputType $pkgname . true}}), err
	}
	return {{getOutputType $pkgname . true}}{}, err

}{{end}}{{end}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$svcprefix := (getExtension "venice.apiPrefix" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
func (e *e{{$svcname}}Endpoints)AutoWatch{{.}}(in *api.ListWatchOptions, stream {{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Server) error {
	return e.fnAutoWatch{{.}}(in, stream, "{{$svcprefix}}")
}{{end}}{{end}}
func (e *e{{$svcname}}Endpoints) AutoWatchSvc{{.Name}} (in *api.ListWatchOptions, stream {{$pkgname}}.{{$svcname}}_AutoWatchSvc{{title $svcname}}Server) error {
	return e.fnAutoWatchSvc{{$svcname}}(in, stream, "")
}
{{end}}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := s{{$pkgname}}{{$flname}}Backend{}
	addMsgRegFunc(svc.regMsgsFunc)
	addSvcRegFunc(svc.regSvcsFunc)
	addWatcherRegFunc(svc.regWatchersFunc)

	{{range .Services}}
	{
		e := e{{.Name}}Endpoints{Svc: svc}
		svc.endpoints{{.Name}} = &e
	}{{end}}
	apisrv.Register("{{$pkgname}}.{{.Name}}", &svc)
}{{end}}
