// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}}GwService is a auto generated package.
Input file: {{.Name}}
*/
package {{.GoPkg.Name}}GwService

import (
	"context"
	"net/http"
	"sync"
	"strings"
	"time"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/utils"
	"github.com/pensando/sw/api/interfaces"
	"github.com/pensando/sw/venice/apigw/pkg"
	"github.com/pensando/sw/venice/apigw"
	"github.com/pensando/sw/venice/apiserver"
	"github.com/pensando/sw/venice/utils/authz"
	hdr "github.com/pensando/sw/venice/utils/histogram"
	{{.GoPkg.Name}} "{{getRelPath .}}/generated/{{.GoPkg.Name}}"
	grpcclient "{{getRelPath .}}/generated/{{.GoPkg.Name}}/grpc/client"
)


// Dummy vars to suppress import errors
var _ api.TypeMeta
var _ authz.Authorizer

{{$grpcdest := "pen-apiserver"}}
{{$cgrpcdest := (getGrpcDestination .)}}
{{$pkgname := .GoPkg.Name}}{{range $index, $v := .Services}}{{$svcname := .Name}}{{$svcparams := (getSvcParams .)}}
type s{{.Name}}GwService struct {
	logger log.Logger
	defSvcProf apigw.ServiceProfile
	svcProf map[string]apigw.ServiceProfile
}

type adapter{{.Name}} struct {
	conn *rpckit.RPCClient
	service {{$pkgname}}.Service{{$svcname}}Client
	gwSvc *s{{$svcname}}GwService
	gw apigw.APIGateway
}
{{range .Methods}}{{$params := (getMethodParams .)}}{{if isStreaming .}}{{else}}
func (a adapter{{$svcname}}) {{.Name}} (oldctx oldcontext.Context, t *{{getInputType $pkgname . true}}, options ...grpc.CallOption) (*{{getOutputType $pkgname . true}}, error) {
	// Not using options for now. Will be passed through context as needed.
	trackTime := time.Now()
	defer func() {
		hdr.Record("apigw.{{$svcname}}{{.Name}}", time.Since(trackTime))
	}()
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("{{.Name}}")
	if err != nil {
		return nil, errors.New("unknown service profile")
	} {{if isAutoGenMethod .}}{{if isAutoList .}}
	{{if isTenanted (getListTypeMsg .ResponseType)}}
	if t.Tenant == "" {
    	t.Tenant = globals.DefaultTenant
	}{{else}}
	t.Tenant = ""{{end}}{{if isNamespaced (getListTypeMsg .ResponseType)}}{{else}}
    t.Namespace = ""{{end}}
	oper, kind, tenant, namespace, group, name, auditAction := apiintf.ListOper, "{{getListType .ResponseType false}}", t.Tenant, t.Namespace, "{{$pkgname}}", "", strings.Title(string(apiintf.ListOper))
	{{else}}{{if isActionMethod .}}
	oper, kind, tenant, namespace, group, name, auditAction := apiintf.{{$params.Oper}}, "{{getActionTarget .}}", t.Tenant, t.Namespace, "{{$pkgname}}", t.Name, "{{.Name}}"
	{{else}}
	oper, kind, tenant, namespace, group, name, auditAction := apiintf.{{$params.Oper}}, "{{getInputType $pkgname . false}}", t.Tenant, t.Namespace, "{{$pkgname}}", t.Name, strings.Title(string(apiintf.{{$params.Oper}}))
	{{end}}{{end}}{{/*<isAutoList>*/}}
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, name), oper, auditAction)
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	{{end}}{{/*<isAutoGenMethod>*/}}

	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*{{getInputType $pkgname . true}})
		return a.service.{{.Name}}(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, t, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.(*{{getOutputType $pkgname . true}}), err
}
{{end}}{{end}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}
func (a adapter{{$svcname}}) AutoWatchSvc{{$svcname}}(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_AutoWatchSvc{{$svcname}}Client, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatchSvc{{$svcname}}")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	oper, kind, tenant, namespace, group := apiintf.WatchOper, "", in.Tenant, in.Namespace, "{{$pkgname}}"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper, strings.Title(string(oper)))
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
        iws, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwWebSocketWatch)
        if ok && iws.(bool) {
			nctx, cancel := context.WithCancel(ctx)
            ir, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwHTTPReq)
            if !ok {
                return  nil, errors.New("unable to retrieve request")
            }
            iw, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwHTTPWriter)
            if !ok {
                return nil, errors.New("unable to retrieve writer")
            }
            conn, err := wsUpgrader.Upgrade(iw.(http.ResponseWriter), ir.(*http.Request), nil)
            if err != nil {
                log.Errorf("WebSocket Upgrade failed (%s)", err)
                return nil, err
            }
            ctx = apiutils.SetVar(nctx, apiutils.CtxKeyAPIGwWebSocketConn, conn)
            conn.SetCloseHandler(func(code int, text string) error {
            	cancel()
            	log.Infof("received close notification on websocket [AutoWatch{{$svcname}}] (%v/%v)", code, text)
                return nil
            })
			// start a dummy reciever
			go func() {
				for {
					_, _, err := conn.ReadMessage()
					if err !=nil {
						log.Errorf("received error on websocket receive (%s)", err)
						cancel()
						return
					}
				}
			}()
        }
		return a.service.AutoWatchSvc{{$svcname}}(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.({{$pkgname}}.{{$svcname}}_AutoWatchSvc{{$svcname}}Client), err
}
{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{$svc := .}}{{range $cruds}}
func (a adapter{{$svcname}}) AutoWatch{{.}}(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Client, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("AutoWatch{{.}}")
	if err != nil {
		return nil, errors.New("unknown service profile")
	}
	{{if isObjTenanted $svc.File . }}
    if in.Tenant == "" {
    	in.Tenant = globals.DefaultTenant
    }{{else}}
	in.Tenant = ""{{end}}{{if isObjNamespaced $svc.File . }}{{else}}
		in.Namespace = "" {{end}}
	oper, kind, tenant, namespace, group := apiintf.WatchOper, "{{.}}", in.Tenant, in.Namespace, "{{$pkgname}}"
	op := authz.NewAPIServerOperation(authz.NewResource(tenant, group, kind, namespace, ""), oper, strings.Title(string(oper)))
	ctx = apigwpkg.NewContextWithOperations(ctx, op)
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*api.ListWatchOptions)
        iws, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwWebSocketWatch)
        if ok && iws.(bool) {
			nctx, cancel := context.WithCancel(ctx)
            ir, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwHTTPReq)
            if !ok {
                return  nil, errors.New("unable to retrieve request")
            }
            iw, ok := apiutils.GetVar(ctx, apiutils.CtxKeyAPIGwHTTPWriter)
            if !ok {
                return nil, errors.New("unable to retrieve writer")
            }
            conn, err := wsUpgrader.Upgrade(iw.(http.ResponseWriter), ir.(*http.Request), nil)
            if err != nil {
                log.Errorf("WebSocket Upgrade failed (%s)", err)
                return nil, err
            }
            ctx = apiutils.SetVar(nctx, apiutils.CtxKeyAPIGwWebSocketConn, conn)
            conn.SetCloseHandler(func(code int, text string) error {
                cancel()
                log.Infof("received close notification on websocket [AutoWatch{{.}}] (%v/%v)", code, text)
                return nil
             })
			// start a dummy reciever
            go func() {
				for {
					_, _, err := conn.ReadMessage()
					if err !=nil {
						log.Errorf("received error on websocket receive (%s)", err)
						cancel()
						return
					}
				}
			}()
        }
		return a.service.AutoWatch{{.}}(ctx, in)
	}
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.({{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Client), err
}
{{end}}{{else}}
func (a adapter{{$svcname}}) AutoWatchSvc{{$svcname}}(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_AutoWatchSvc{{$svcname}}Client, error) {
	return nil, errors.New("not implemented")
}
{{end}}
{{range .Methods}}{{$params := (getMethodParams .)}}{{if isStreaming .}}{{if (strEq $params.Oper "WatchOper")}} {{else}}{{if isClientStreaming .}}
func (a adapter{{$svcname}}) {{.Name}}(oldctx oldcontext.Context, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_{{.Name}}Client, error) {
	ctx := context.Context(oldctx)
	return a.service.{{.Name}}(ctx)
} {{else}}{{if isSrvBinStream .}}
func (a adapter{{$svcname}}) {{.Name}}(oldctx oldcontext.Context, in *{{getInputType $pkgname . true}}, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_{{.Name}}Client, error) {
	ctx := context.Context(oldctx)
	prof, err := a.gwSvc.GetServiceProfile("{{.Name}}")
	if err != nil {
	return nil, errors.New("unknown service profile")
	}
	fn := func(ctx context.Context, i interface{}) (interface{}, error) {
		in := i.(*{{getInputType $pkgname . true}})
		return a.service.{{.Name}}(ctx, in)
	}
	apiutils.SetVar(ctx, apiutils.CtxKeyAPIGwBinStreamReq, true)
	ret, err := a.gw.HandleRequest(ctx, in, prof, fn)
	if ret == nil {
		return nil, err
	}
	return ret.({{$pkgname}}.{{$svcname}}_{{.Name}}Client), err
}{{else}}
func (a adapter{{$svcname}}) {{.Name}}(oldctx oldcontext.Context, in *{{getInputType $pkgname . true}}, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_{{.Name}}Client, error) {
	ctx := context.Context(oldctx)
	return a.service.{{.Name}}(ctx, in)
}{{end}}{{end}}{{end}}{{end}}{{end}}

func (e *s{{.Name}}GwService) setupSvcProfile() {
	e.defSvcProf = apigwpkg.NewServiceProfile(nil, "", "{{$svcparams.Prefix}}", apiintf.UnknownOper)
	e.defSvcProf.SetDefaults()
	e.svcProf = make(map[string]apigw.ServiceProfile)
	{{range .Methods}}{{$params := getMethodParams . }}{{if isRestExposed .}}{{$x := (saveStr "" 0)}}{{$x := (saveStr "UnknownOper" 1)}}
	{{if isAutoGenMethod .}}{{if isAutoList .}}{{$x := (saveStr (getOutputType $pkgname . false) 0)}}{{$x := (saveStr "ListOper"  1)}}{{else}}{{if isAutoWatch .}}
	{{$x := (saveStr (getOutputType $pkgname . false) 0)}}{{$x := (saveStr "WatchOper"  1)}}{{else}}
    {{if isActionMethod .}}{{ $x := (saveStr (getActionTarget .) 0)}}{{$x := (saveStr "CreateOper"  1)}}{{else}}
    {{$x := (saveStr (getInputType $pkgname . false) 0)}}{{$x := (saveStr $params.Oper  1)}}{{end}}{{end}}{{end}}{{end}}

	e.svcProf["{{.Name}}"] = apigwpkg.NewServiceProfile(e.defSvcProf, "{{getStr 0}}", "{{$svcparams.Prefix}}", apiintf.{{getStr 1}}){{end}}{{end}}{{$proxyPaths := getProxyPaths .}}{{range $proxyPaths}}
	e.svcProf["_RProxy_" + "/" + "{{.Path}}"] = apigwpkg.NewServiceProfile(e.defSvcProf, "", "", apiintf.UnknownOper){{end}}
}

// GetDefaultServiceProfile returns the default fallback service profile for this service
func (e *s{{.Name}}GwService) GetDefaultServiceProfile() (apigw.ServiceProfile, error) {
	if e.defSvcProf == nil {
		return nil, errors.New("not found")
	}
	return e.defSvcProf, nil
}

// GetServiceProfile returns the service profile for a given method in this service
func (e *s{{.Name}}GwService) GetServiceProfile(method string) (apigw.ServiceProfile, error) {
	if ret, ok := e.svcProf[method]; ok {
		return ret, nil
	}
	return nil, errors.New("not found")
}

// GetCrudServiceProfile returns the service profile for a auto generated crud operation
func (e *s{{.Name}}GwService) GetCrudServiceProfile(obj string, oper apiintf.APIOperType) (apigw.ServiceProfile, error) {
	name := apiserver.GetCrudServiceName(obj, oper)
	if name != "" {
		return e.GetServiceProfile(name)
	}
	return nil, errors.New("not found")
}

// GetProxyServiceProfile returns the service Profile for a reverse proxy path
func (e *s{{.Name}}GwService) GetProxyServiceProfile(path string)  (apigw.ServiceProfile, error) {
	name := "_RProxy_" + path
	return e.GetServiceProfile(name)
}

func (e *s{{.Name}}GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface,
	wg *sync.WaitGroup) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	{{if strEq $cgrpcdest "" }}grpcaddr := "{{$grpcdest}}"{{else}}
	grpcaddr := "{{$cgrpcdest}}"{{end}}
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger

	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	muxMutex.Lock()
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	muxMutex.Unlock()
	e.setupSvcProfile()
	{{$manifest := (getSvcManifest "../generated/apiclient/svcmanifest.json")}}{{$pkgs := (index $manifest $pkgname)}}{{$fileCount := (len $pkgs.Files)}}
	{{if eq ($index) 0}}
	err := registerSwaggerDef(m, logger)
	if err != nil {
		logger.ErrorLog("msg", "failed to register swagger spec", "service", "{{$pkgname}}.{{.Name}}", "err", err)
	}{{end}} {{$proxyPaths := getProxyPaths .}}{{range $proxyPaths}}
	{
		name := "_RProxy_" + "/" + "{{.Path}}"
		svcProf, err := e.GetServiceProfile(name)
		if err != nil {
			logger.Fatalf("failed to get service profile for [%s](%s)", name, err)
		}

		rproxy, err := apigwpkg.NewRProxyHandler("{{.Path}}", "{{.TrimPath}}", "{{.Prefix}}", "{{.Backend}}", svcProf)
		if err != nil {
			logger.Fatalf("failed to get proxy handler for [%s](%s)", name, err)
		}
		m.Handle("{{.FullPath}}", rproxy)
	}{{end}}
	wg.Add(1)
	go func() {
		defer func() {
			muxMutex.Lock()
			mux = nil
			muxMutex.Unlock()
		}()
		defer wg.Done()
		for {
			nctx, cancel := context.WithCancel(ctx)
			cl, err := e.newClient(nctx, grpcaddr, rslvr, apigw.GetDevMode())
			if err == nil {
				muxMutex.Lock()
				err = {{$pkgname}}.Register{{.Name}}HandlerWithClient(ctx, mux, cl)
				muxMutex.Unlock()
				if err == nil {
					logger.InfoLog("msg", "registered service {{$pkgname}}.{{.Name}}")
					m.Handle("{{$svcparams.URIPath}}/", http.StripPrefix("{{$svcparams.URIPath}}", mux))
					return
				} else {
					err = errors.Wrap(err, "failed to register")
				}
			} else {
				err = errors.Wrap(err, "failed to create client")
			}
			cancel()
			logger.ErrorLog("msg", "failed to register", "service", "{{$pkgname}}.{{.Name}}", "err", err)
			select {
				case <-ctx.Done():
					return
				case <-time.After(5 * time.Second):
			}
		}
	}()
	return nil
}

func (e *s{{.Name}}GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface, devmode bool) (*adapter{{$svcname}}, error) {
	var opts []rpckit.Option
	opts = append(opts, rpckit.WithTLSClientIdentity(globals.APIGw))
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	} else {
	  {{if strEq $cgrpcdest "" }}opts = append(opts, rpckit.WithRemoteServerName("{{$grpcdest}}")){{else}}
		opts = append(opts, rpckit.WithRemoteServerName("{{$cgrpcdest}}")){{end}}
	}

	if !devmode {
		opts = append(opts, rpckit.WithTracerEnabled(false))
		opts = append(opts, rpckit.WithLoggerEnabled(false))
		opts = append(opts, rpckit.WithStatsEnabled(false))
	}

	client, err := rpckit.NewRPCClient(globals.APIGw, grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "err", cerr)
			}
		}()
	}()

	cl := &adapter{{$svcname}}{conn: client, gw: apigwpkg.MustGetAPIGateway(), gwSvc: e, service: grpcclient.New{{.Name}}Backend(client.ClientConn, e.logger)}
	return cl, nil
}{{end}}

func init() {
	{{if gt (len .Services) 0}}
	apigw := apigwpkg.MustGetAPIGateway(){{end}}
	{{range .Services}}{{$svcparams := (getSvcParams .)}}
	svc{{.Name}} := s{{.Name}}GwService {}
	apigw.Register("{{$pkgname}}.{{.Name}}", "{{$svcparams.Prefix}}/", &svc{{.Name}}){{end}}
}
