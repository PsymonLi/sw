// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}}GwService is a auto generated package.
Input file: {{.Name}}
*/
package {{.GoPkg.Name}}GwService

import (
	"context"
	"net/http"

	"github.com/pkg/errors"
	oldcontext "golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pensando/grpc-gateway/runtime"
	"github.com/pensando/sw/venice/utils/rpckit"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/apigw/pkg"
	{{.GoPkg.Name}} "{{.GoPkg.RelPath}}/generated/{{.GoPkg.Name}}"
	"{{.GoPkg.RelPath}}/generated/{{.GoPkg.Name}}/grpc/client"
)


// Dummy vars to suppress import errors
var _ api.TypeMeta

{{$grpcdest := "pen-apiserver"}}
{{$cgrpcdest := (getGrpcDestination .)}}
{{$pkgname := .GoPkg.Name}}{{range $index, $v := .Services}}{{$svcname := .Name}}{{$svcparams := (getSvcParams .)}}
type s{{.Name}}GwService struct {
	logger log.Logger
}

type adapter{{.Name}} struct {
	service {{$pkgname}}.Service{{$svcname}}Client
}
{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}} {{else}}
func (a adapter{{$svcname}}) {{.Name}} (oldctx oldcontext.Context, t *{{getInputType $pkgname . true}}, options ...grpc.CallOption) (*{{getOutputType $pkgname . true}}, error) {
	// Not using options for now. Will be passed through context as needed.
	ctx := context.Context(oldctx)
	return a.service.{{.Name}}(ctx, t)
}
{{end}}{{end}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
func (a adapter{{$svcname}}) AutoWatch{{.}}(oldctx oldcontext.Context, in *api.ListWatchOptions, options ...grpc.CallOption) ({{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Client, error) {
	ctx := context.Context(oldctx)
	return a.service.AutoWatch{{.}}(ctx, in)
}
{{end}}{{end}}

func (e *s{{.Name}}GwService) CompleteRegistration(ctx context.Context,
	logger log.Logger,
	grpcserver *grpc.Server,
	m *http.ServeMux,
	rslvr resolver.Interface) error {
	apigw := apigwpkg.MustGetAPIGateway()
	// IP:port destination or service discovery key.
	{{if strEq $cgrpcdest "" }}grpcaddr := "{{$grpcdest}}"{{else}}
	grpcaddr := "{{$cgrpcdest}}"{{end}}
	grpcaddr = apigw.GetAPIServerAddr(grpcaddr)
	e.logger = logger
	cl, err := e.newClient(ctx, grpcaddr, rslvr)
	if cl == nil || err != nil {
		err = errors.Wrap(err, "could not create client")
		return err
	}
	marshaller := runtime.JSONBuiltin{}
	opts := runtime.WithMarshalerOption("*", &marshaller)
	if mux == nil {
		mux = runtime.NewServeMux(opts)
	}
	fileCount++
	err = {{$pkgname}}.Register{{.Name}}HandlerWithClient(ctx, mux, cl)
	if err != nil {
		err = errors.Wrap(err, "service registration failed")
		return err
	}
	logger.InfoLog("msg", "registered service {{$pkgname}}.{{.Name}}")
	{{$manifest := (getSvcManifest "generated/apiclient/svcmanifest.json")}}{{$pkgs := (index $manifest $pkgname)}}{{$fileCount := (len $pkgs.Files)}}
	m.Handle("/{{$svcparams.Version}}/{{$svcparams.Prefix}}/", http.StripPrefix("/{{$svcparams.Version}}/{{$svcparams.Prefix}}", mux))
	if fileCount == {{$fileCount}} {
		{{if eq ($index) 0}}err = registerSwaggerDef(m, logger){{end}}
	}
	return err
}

func (e *s{{.Name}}GwService) newClient(ctx context.Context, grpcAddr string, rslvr resolver.Interface) ({{$pkgname}}.{{.Name}}Client, error) {
	var opts []rpckit.Option
	if rslvr != nil {
		opts = append(opts, rpckit.WithBalancer(balancer.New(rslvr)))
	}
	client, err := rpckit.NewRPCClient("{{.Name}}GwService", grpcAddr, opts...)
	if err != nil {
		return nil, errors.Wrap(err, "create rpc client")
	}

	e.logger.Infof("Connected to GRPC Server %s", grpcAddr)
	defer func() {
		go func() {
			<-ctx.Done()
			if cerr := client.Close(); cerr != nil {
				e.logger.ErrorLog("msg", "Failed to close conn on Done()", "addr", grpcAddr, "error", cerr)
			}
		}()
	}()

	cl := adapter{{$svcname}}{grpcclient.New{{.Name}}Backend(client.ClientConn, e.logger)}
	return cl, nil
}{{end}}

func init() {
	apigw := apigwpkg.MustGetAPIGateway()
	{{range .Services}}{{$svcparams := (getSvcParams .)}}
	svc{{.Name}} := s{{.Name}}GwService {}
	apigw.Register("{{$pkgname}}.{{.Name}}", "{{$svcparams.Prefix}}/", &svc{{.Name}}){{end}}
}
