// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package {{.GoPkg.Name}}{{$pkgname := .GoPkg.Name}}

import (
	"context"
	"encoding/json"
	"net/http"

	oldcontext "golang.org/x/net/context"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"github.com/go-kit/kit/tracing/opentracing"

	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/api"
)

// Dummy definitions to suppress nonused warnings
var _ api.ObjectMeta

{{range .Services}}{{$svcname := .Name}}
type grpcServer{{$svcname}} struct {
	Endpoints Endpoints{{.Name}}Server
	{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}}{{else}}
	{{.Name}}Hdlr grpctransport.Handler{{end}}{{end}}
}

// MakeGRPCServer{{.Name}} creates a GRPC server for {{.Name}} service
func MakeGRPCServer{{.Name}}(ctx context.Context, endpoints Endpoints{{.Name}}Server, logger log.Logger) {{.Name}}Server {
	options := []grpctransport.ServerOption{
		grpctransport.ServerErrorLogger(logger),
		grpctransport.ServerBefore(recoverVersion),
	}
	return &grpcServer{{$svcname}}{
		Endpoints: endpoints, {{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}}{{else}}
		{{.Name}}Hdlr: grpctransport.NewServer(
			endpoints.{{.Name}}Endpoint,
			DecodeGrpcReq{{.RequestType.Name}},
			EncodeGrpcResp{{.ResponseType.Name}},
            append(options, grpctransport.ServerBefore(opentracing.FromGRPCRequest(stdopentracing.GlobalTracer(), "{{.Name}}", logger)))...,
		),
		{{end}}{{end}}
	}
}
{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}}{{else}}
func (s *grpcServer{{$svcname}}) {{.Name}}(ctx oldcontext.Context, req *{{getInputType $pkgname . false}}) (*{{getOutputType $pkgname . false}}, error) {
	_, resp, err := s.{{.Name}}Hdlr.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	r := resp.(resp{{$svcname}}{{.Name}}).V
	return &r, resp.(resp{{$svcname}}{{.Name}}).Err
}

func decodeHTTPresp{{$svcname}}{{.Name}}(_ context.Context, r *http.Response) (interface{}, error) {
	if r.StatusCode != http.StatusOK {
		return nil, errorDecoder(r)
	}
	var resp {{getOutputType $pkgname . false}}
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}
{{end}}{{end}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{$prefix := (getExtension "venice.apiPrefix" .)}}{{range $cruds}}
func (s *grpcServer{{$svcname}}) AutoWatch{{.}}(in *api.ListWatchOptions, stream {{$svcname}}_AutoWatch{{.}}Server) error {
	return s.Endpoints.AutoWatch{{.}}(in, stream)
}
{{end}}{{end}}{{end}}
{{range .Messages}}{{if isNestedMessage .}}{{else}}{{if (hasExtension "venice.objectAutoGen" .)}}{{$autotype := (getExtension "venice.objectAutoGen" .)}}{{if strEq $autotype "watchhelper"}}{{else}}
func encodeHTTP{{.Name}}(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTP{{.Name}}(_ context.Context, r *http.Request) (interface{}, error) {
	var req {{.Name}}
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReq{{.Name}} encodes GRPC request
func EncodeGrpcReq{{.Name}}(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*{{.Name}})
	return req, nil
}

// DecodeGrpcReq{{.Name}} decodes GRPC request
func DecodeGrpcReq{{.Name}}(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*{{.Name}})
	return req, nil
}

// EncodeGrpcResp{{.Name}} endodes the GRPC response
func EncodeGrpcResp{{.Name}}(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcResp{{.Name}} decodes the GRPC response
func DecodeGrpcResp{{.Name}}(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
{{end}}{{else}}
func encodeHTTP{{.Name}}(ctx context.Context, req *http.Request, request interface{}) error {
	return encodeHTTPRequest(ctx, req, request)
}

func decodeHTTP{{.Name}}(_ context.Context, r *http.Request) (interface{}, error) {
	var req {{.Name}}
	if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
		return nil, e
	}
	return req, nil
}

// EncodeGrpcReq{{.Name}} encodes GRPC request
func EncodeGrpcReq{{.Name}}(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*{{.Name}})
	return req, nil
}

// DecodeGrpcReq{{.Name}} decodes GRPC request
func DecodeGrpcReq{{.Name}}(ctx context.Context, request interface{}) (interface{}, error) {
	req := request.(*{{.Name}})
	return req, nil
}

// EncodeGrpcResp{{.Name}} encodes GRC response
func EncodeGrpcResp{{.Name}}(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}

// DecodeGrpcResp{{.Name}} decodes GRPC response
func DecodeGrpcResp{{.Name}}(ctx context.Context, response interface{}) (interface{}, error) {
	return response, nil
}
{{end}}{{end}}{{end}}
