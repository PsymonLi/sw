// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/

package {{.GoPkg.Name}}

import "sort"

// EventTypeAttributes attributes belong to each event type
type EventTypeAttributes struct {
    EType string
	Category string
	Severity string
	Desc string
}

// EventDetails contains all the attributes of an events
type EventDetails struct {
	Name string `json:name`
	Severity string `json:severity`
	Desc string `json:desc`
}

// map containing the list of all event types and it's associated attributes
var eventTypes map[EventType]*EventTypeAttributes

// map containing the list of all events grouped by category
var eventTypesByCategory map[string][]*EventDetails

{{$evtTypes := getEventTypes .}}
{{if (gt (len $evtTypes) 0)}}

func init() {
	eventTypes = map[EventType]*EventTypeAttributes{}

    {{range $evtTypes -}}
    eventTypes[{{.EType}}] = &EventTypeAttributes{
                                EType: "{{.EType}}",
                                Severity:"{{.Severity}}",
                                Category:"{{.Category}}",
                                Desc: "{{.Desc}}"}

    {{end}}
}

{{end}}

func GetEventTypeAttrs(eType EventType) *EventTypeAttributes {
	if attrs, ok := eventTypes[eType]; ok {
		return attrs
	}

	return nil
}

func GetEventsByCategory() map[string][]*EventDetails {
	var eTypes []string
	for _, eType := range eventTypes {
		eTypes = append(eTypes, eType.EType)
	}
	sort.Strings(eTypes)

	eventTypesByCategory = map[string][]*EventDetails{}
	for _, eTypeStr := range eTypes {
		eType, ok := EventType_value[eTypeStr]
		if ok {
			eAttrs := eventTypes[EventType(eType)]
			eventTypesByCategory[eAttrs.Category] = append(eventTypesByCategory[eAttrs.Category],
				&EventDetails{Name: eAttrs.EType, Desc: eAttrs.Desc, Severity: eAttrs.Severity})
		}
	}

	return eventTypesByCategory
}