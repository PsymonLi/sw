// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package apiclient

{{$pkgs := (getSvcManifest "../generated/apiclient/svcmanifest.json")}}
import (
    "net/http"

    "github.com/pensando/sw/venice/utils/log"
    "github.com/pensando/sw/venice/utils/rpckit"{{range $key, $value := $pkgs}}
    {{$key}} "github.com/pensando/sw/api/generated/{{$key}}"
    {{$key}}Client "github.com/pensando/sw/api/generated/{{$key}}/grpc/client"{{end}}
)

// APIGroup is an API Group name
type APIGroup string
const ( {{range $key, $value := $pkgs}}
Group{{title $key}} APIGroup = "{{$key}}" {{end}}
)

// Services is list of all services exposed by the client ---
type Services interface {
    Close() error
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
    // Package is {{$key}} and len of messages is {{len $v.Messages}}{{if (ne 0 (len $v.Messages))}}
    {{$k}}() {{$pkgname}}.{{$k}}Interface{{end}}{{end}}{{end}}
}

type apiGrpcServerClient struct {
    url string
    logger log.Logger
    client *rpckit.RPCClient
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}{{if (ne 0 (len $v.Messages))}}
    a{{$k}} {{$pkgname}}.{{$k}}Interface {{end}}{{end}}{{end}}
}

// Close closes the client
func (a *apiGrpcServerClient) Close() error {
    return a.client.Close()
}
{{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
func (a *apiGrpcServerClient) {{$k}}() {{$pkgname}}.{{$k}}Interface {
    return a.a{{$k}}
}
{{end}}{{end}}
// NewGrpcAPIClient returns a gRPC client
func NewGrpcAPIClient(clientName, url string, logger log.Logger, opts ...rpckit.Option) (Services, error) {
    client, err := rpckit.NewRPCClient(clientName, url, opts...)
    if err != nil {
        logger.ErrorLog("msg", "Failed to connect to gRPC server", "URL", url, "error", err)
        return nil, err
    }
    return &apiGrpcServerClient{
        url: url,
        client: client,
        logger: logger,
        {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
        a{{$k}}: {{$pkgname}}Client.NewGrpcCrudClient{{$k}}(client.ClientConn, logger), {{end}}{{end}}
    }, nil
}

type apiRestServerClient struct {
    url string
    logger log.Logger
    httpTransport *http.Transport
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}{{if (ne 0 (len $v.Messages))}}
    a{{$k}} {{$pkgname}}.{{$k}}Interface {{end}}{{end}}{{end}}
}

// Close closes the client
func (a *apiRestServerClient) Close() error {
    if a.httpTransport != nil {
        a.httpTransport.CloseIdleConnections()
    }
    return nil
}

{{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
func (a *apiRestServerClient) {{$k}}() {{$pkgname}}.{{$k}}Interface {
    return a.a{{$k}}
}
{{end}}{{end}}
// NewRestAPIClient returns a REST client
func NewRestAPIClient(url string) (Services, error) {
    ht:= &http.Transport{
            TLSClientConfig: &tls.Config{
            InsecureSkipVerify: true,
        },
    }
    httpClient:= &http.Client{
            Transport: ht,
    }
    return &apiRestServerClient{
        url: url,
        logger: log.WithContext("module", "RestAPIClient"),
        httpTransport: ht,
        {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
        a{{$k}}: {{$pkgname}}Client.NewRestCrudClient{{$k}}(url, httpClient), {{end}}{{end}}
    }, nil
}

// NewStagedRestAPIClient returns a REST client
func NewStagedRestAPIClient(url string, bufferId string) (Services, error) {
    ht:= &http.Transport{
            TLSClientConfig: &tls.Config{
            InsecureSkipVerify: true,
        },
    }
    httpClient:= &http.Client{
        Transport: ht,
    }
    return &apiRestServerClient{
        url: url,
        logger: log.WithContext("module", "RestAPIClient"),
        httpTransport: ht,
        {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
        a{{$k}}: {{$pkgname}}Client.NewStagedRestCrudClient{{$k}}(url, bufferId, httpClient), {{end}}{{end}}
    }, nil
}