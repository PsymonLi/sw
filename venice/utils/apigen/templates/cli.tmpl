// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}}CliUtilsBackend is a auto generated package.
Input file: {{.Name}}
*/
package cli
import (
	"fmt"
	"context"

	"github.com/pensando/sw/api/generated/apiclient"
	loginctx "github.com/pensando/sw/api/login/context"
  	"github.com/pensando/sw/venice/ncli/gen"
	"github.com/pensando/sw/api/generated/{{.GoPkg.Name}}"
)

{{$cliFlagMap := (getCLIFlagMap .)}}{{$file := .}}{{$pkg := $file.Package}}
{{range $svcAndObjName, $cliFlags := $cliFlagMap}} {{$svcObj := (splitSvcObj $svcAndObjName)}}
// Create{{$svcObj.ObjName}}Flags specifies flags for {{$svcObj.ObjName}} create operation
var Create{{$svcObj.ObjName}}Flags = []gen.CliFlag{
{{ range $cliFlag := $cliFlags }}	{
		ID: "{{$cliFlag.ID}}",
		Type: "{{$cliFlag.Type}}",
		Help: "{{$cliFlag.Help}}",
		Skip: {{$cliFlag.Skip}},
		Insert: "{{$cliFlag.Insert}}",
	},
{{ end }}}

func remove{{$svcObj.ObjName}}Oper(obj interface{}) error {
	if v, ok := obj.(*{{$svcAndObjName}}); ok {
                v.UUID = ""
                v.ResourceVersion = ""
		v.Status = {{$svcAndObjName}}Status{}
        }
	return nil
}
{{ end }}

{{ if len $cliFlagMap }}
func init() {
	cl := gen.GetInfo()
	{{range $svcAndObjName, $cliFlags := $cliFlagMap}} {{$svcObj := (splitSvcObj $svcAndObjName)}}
	cl.AddCliInfo("{{$svcAndObjName}}", "create", Create{{$svcObj.ObjName}}Flags)
	cl.AddRemoveObjOperFunc("{{$svcAndObjName}}", remove{{$svcObj.ObjName}}Oper)
	{{ end }}
}{{ end }}

{{range .Services}}{{$svcname := .Name}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{$svc := . }}{{range $cruds}}{{$objName := .}}

func restGet{{$objName}}(hostname, tenant, token string, obj interface{}) error {
	{{if and (isRestMethod $svc "AutoGet" .) (isRestMethod $svc "AutoList" .)}}
        restcl, err := apiclient.NewRestAPIClient(hostname)
        if err != nil {
                return fmt.Errorf("cannot create REST client")
        }
        loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	{{if isRestMethod $svc "AutoGet" .}}
	if v, ok := obj.(*{{$pkg}}.{{$objName}}); ok {
		nv, err := restcl.{{$svcname}}().{{$objName}}().Get(loginCtx, &v.ObjectMeta)
                if err != nil {
                        return err
                }
                *v = *nv
	}{{end}}

	{{if isRestMethod $svc "AutoList" .}}
	if v, ok := obj.(*{{$pkg}}.{{$objName}}List); ok {
		opts := api.ListWatchOptions{ObjectMeta : api.ObjectMeta{Tenant: tenant}}
		nv, err := restcl.{{$svcname}}().{{$objName}}().List(loginCtx, &opts)
                if err != nil {
                        return err
                }
                v.Items = nv
        }{{end}}
	return nil
	{{else}}return fmt.Errorf("get operation not supported for {{$objName}} object"){{end}}
}

func restDelete{{$objName}}(hostname, token string, obj interface{}) error {
	{{if isRestMethod $svc "AutoDelete" .}}
        restcl, err := apiclient.NewRestAPIClient(hostname)
        if err != nil {
                return fmt.Errorf("cannot create REST client")
        }
        loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*{{$pkg}}.{{$objName}}); ok {
		nv, err := restcl.{{$svcname}}().{{$objName}}().Delete(loginCtx, &v.ObjectMeta)
                if err != nil {
                        return err
                }
                *v = *nv
	}
	return nil
	{{else}}return fmt.Errorf("delete operation not supported for {{$objName}} object"){{end}}
}

func restPost{{$objName}}(hostname, token string, obj interface{}) error {
	{{if isRestMethod $svc "AutoAdd" .}}
        restcl, err := apiclient.NewRestAPIClient(hostname)
        if err != nil {
                return fmt.Errorf("cannot create REST client")
        }
        loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*{{$pkg}}.{{$objName}}); ok {
		nv, err := restcl.{{$svcname}}().{{$objName}}().Create(loginCtx, v)
                if err != nil {
                        return err
                }
                *v = *nv
        }
	return nil
	{{else}}return fmt.Errorf("create operation not supported for {{$objName}} object"){{end}}
}

func restPut{{$objName}}(hostname, token string, obj interface{}) error {
	{{if isRestMethod $svc "AutoUpdate" .}}
        restcl, err := apiclient.NewRestAPIClient(hostname)
        if err != nil {
                return fmt.Errorf("cannot create REST client")
        }
        loginCtx := loginctx.NewContextWithAuthzHeader(context.Background(), "Bearer "+token)

	if v, ok := obj.(*{{$pkg}}.{{$objName}}); ok {
		nv, err := restcl.{{$svcname}}().{{$objName}}().Update(loginCtx, v)
                if err != nil {
                        return err
                }
                *v = *nv
        }
	return nil
	{{else}}return fmt.Errorf("put operation not supported for {{$objName}} object"){{end}}
}
{{end}}{{end}}{{end}}

{{if len .Services}}
func init() {
	cl := gen.GetInfo()
	if cl == nil {
		return
	}
	{{range .Services}}{{$svcname := .Name}}
	{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{$svc := . }}{{range $cruds}}{{$objName := .}}
	{{if isRestMethod $svc "AutoAdd" .}}cl.AddRestPostFunc("{{$pkg}}.{{$objName}}", "v1", restPost{{$objName}}){{end}}
	{{if isRestMethod $svc "AutoDelete" .}}cl.AddRestDeleteFunc("{{$pkg}}.{{$objName}}", "v1", restDelete{{$objName}}){{end}}
	{{if isRestMethod $svc "AutoUpdate" .}}cl.AddRestPutFunc("{{$pkg}}.{{$objName}}", "v1", restPut{{$objName}}){{end}}
	{{if isRestMethod $svc "AutoGet" .}}cl.AddRestGetFunc("{{$pkg}}.{{$objName}}", "v1", restGet{{$objName}}){{end}}
	{{ end }}{{end}}{{end}}
}{{end}}
