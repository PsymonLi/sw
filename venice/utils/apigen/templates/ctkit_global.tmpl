// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.


package ctkit 

{{$pkgs := (getSvcManifest "../generated/apiclient/svcmanifest.json")}}

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/generated/apiclient"
    {{range $key, $value := $pkgs}}
    "github.com/pensando/sw/api/generated/{{$key}}"{{end}}
	"github.com/pensando/sw/venice/utils/balancer"
	"github.com/pensando/sw/venice/utils/kvstore"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/resolver"
	"github.com/pensando/sw/venice/utils/rpckit"
)




// db of objects for a kind
type kindStore struct {
	objects map[string]runtime.Object
}

type ctrlerCtx struct {
	sync.Mutex                                // lock for the controller
	name        string                        // controller name
	apisrvURL   string                        // API server URL
	logger      log.Logger                    // logger
	resolver    resolver.Interface            // name resolver
	balancer    balancer.Balancer             // grpc load balancer
	stoped      bool                          // stop the watchers
	watchers    map[string]kvstore.Watcher    // watchers
	watchCancel map[string]context.CancelFunc // stop watcher
	handlers    map[string]interface{}        // event handlers
	waitGrp     sync.WaitGroup                // wait group to wait on all go routines to exit
	kinds       map[string]*kindStore         // DB of all kinds
	apicl       apiclient.Services            // api client to write
}

// Controller is the main interface provided by controller instance
type Controller interface {
	FindObject(kind string, ometa *api.ObjectMeta) (runtime.Object, error)
	ListObjects(kind string) []runtime.Object
	Stop() error                                 // stop the controller
	
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}  {{range $v.Messages}} 
    {{.}}() {{.}}API  // return {{.}} API interface {{end}}{{end}}{{end}}
}

// NewController creates a new instance of controler
func NewController(name string, apisrvURL string, resolver resolver.Interface) (Controller, error) {

	// create controller context
	ctrl := ctrlerCtx{
		name:        name,
		apisrvURL:   apisrvURL,
		logger:      log.GetNewLogger(log.GetDefaultConfig(name + "Watcher")),
		resolver:    resolver,
		balancer:    balancer.New(resolver),
		stoped:      false,
		watchers:    make(map[string]kvstore.Watcher),
		watchCancel: make(map[string]context.CancelFunc),
		handlers:    make(map[string]interface{}),
		kinds:       make(map[string]*kindStore),
	}

	return &ctrl, nil
}

// Stop stops the controller
func (ct *ctrlerCtx) Stop() error {
	ct.stoped = true

	// stop all watchers
	for _, wt := range ct.watchers {
		wt.Stop()
	}

	// cancel all watchers
	for _, cancel := range ct.watchCancel {
		cancel()
	}

	// stop api client
	if ct.apicl != nil {
		ct.apicl.Close()
		ct.apicl = nil
	}
	
	// wait for all goroutines to exit
	ct.waitGrp.Wait()

	return nil
}

func (ct *ctrlerCtx) apiClient() (apiclient.Services, error) {
	ct.Lock()
	apicl := ct.apicl
	ct.Unlock()
	if apicl != nil {
		return apicl, nil
	}

	for i := 0; i < 10; i++ {
		// create a grpc client
		apicl, err := apiclient.NewGrpcAPIClient(ct.name, ct.apisrvURL, ct.logger, rpckit.WithBalancer(ct.balancer))
		if err == nil {
			ct.Lock()
			ct.apicl = apicl
			ct.Unlock()
			return apicl, nil
		}

		log.Warnf("Failed to connect to gRPC server [%s]\n", ct.apisrvURL)
		time.Sleep(time.Millisecond * 100)
	}

	return nil, fmt.Errorf("Error connecting to api client")
}

func (ct *ctrlerCtx) addObject(kind, key string, obj runtime.Object) error {
	ct.Lock()
	defer ct.Unlock()

	ks, ok := ct.kinds[kind]
	if !ok {
		ks = &kindStore{
			objects: make(map[string]runtime.Object),
		}
		ct.kinds[kind] = ks
	}

	// insert the object into kind store
	ks.objects[key] = obj

	return nil
}

func (ct *ctrlerCtx) findObject(kind, key string) (runtime.Object, error) {
	ct.Lock()
	defer ct.Unlock()

	ks, ok := ct.kinds[kind]
	if !ok {
		return nil, fmt.Errorf("Object %s/%s not found", kind, key)
	}

	obj, ok := ks.objects[key]
	if !ok {
		return nil, fmt.Errorf("Object %s/%s not found", kind, key)
	}

	return obj, nil
}


// FindObject finds an objetc by meta
func (ct *ctrlerCtx) FindObject(kind string, ometa *api.ObjectMeta) (runtime.Object, error) {
	return ct.findObject(kind, ometa.GetKey())
}

// ListObjects returns a list of object of a kind
func (ct *ctrlerCtx) ListObjects(kind string) []runtime.Object {
	ct.Lock()
	defer ct.Unlock()

	ks, ok := ct.kinds[kind]
	if !ok {
		return []runtime.Object{}
	}

	var objlist []runtime.Object
	for _, obj := range ks.objects {
		objlist = append(objlist, obj)
	}

	return objlist
}

func (ct *ctrlerCtx) delObject(kind, key string) error {
	ct.Lock()
	defer ct.Unlock()

	ks, ok := ct.kinds[kind]
	if !ok {
		return fmt.Errorf("Object %s/%s not found", kind, key)
	}

	_, ok = ks.objects[key]
	if !ok {
		return fmt.Errorf("Object %s/%s not found", kind, key)
	}

	// delete the object
	delete(ks.objects, key)

	return nil
}
