// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metrics_annotations.proto

/*
	Package venice is a generated protocol buffer package.

	It is generated from these files:
		metrics_annotations.proto

	It has these top-level messages:
		MetricInfo
		MetricFieldInfo
*/
package venice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricUnitType int32

const (
	MetricUnitType_Count      MetricUnitType = 0
	MetricUnitType_Percentage MetricUnitType = 1
	MetricUnitType_Bytes      MetricUnitType = 2
	MetricUnitType_ID         MetricUnitType = 3
)

var MetricUnitType_name = map[int32]string{
	0: "Count",
	1: "Percentage",
	2: "Bytes",
	3: "ID",
}
var MetricUnitType_value = map[string]int32{
	"Count":      0,
	"Percentage": 1,
	"Bytes":      2,
	"ID":         3,
}

func (x MetricUnitType) String() string {
	return proto.EnumName(MetricUnitType_name, int32(x))
}
func (MetricUnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetricsAnnotations, []int{0}
}

type MetricInfo struct {
	DisplayName string `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// defines what fields in the message are used to identify the metric measurement.
	KeyFields string `protobuf:"bytes,3,opt,name=KeyFields,proto3" json:"KeyFields,omitempty"`
}

func (m *MetricInfo) Reset()                    { *m = MetricInfo{} }
func (m *MetricInfo) String() string            { return proto.CompactTextString(m) }
func (*MetricInfo) ProtoMessage()               {}
func (*MetricInfo) Descriptor() ([]byte, []int) { return fileDescriptorMetricsAnnotations, []int{0} }

func (m *MetricInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MetricInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricInfo) GetKeyFields() string {
	if m != nil {
		return m.KeyFields
	}
	return ""
}

type MetricFieldInfo struct {
	DisplayName string         `protobuf:"bytes,1,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Units       MetricUnitType `protobuf:"varint,3,opt,name=Units,proto3,enum=venice.MetricUnitType" json:"Units,omitempty"`
	ScaleMin    int32          `protobuf:"varint,4,opt,name=ScaleMin,proto3" json:"ScaleMin,omitempty"`
	ScaleMax    int32          `protobuf:"varint,5,opt,name=ScaleMax,proto3" json:"ScaleMax,omitempty"`
}

func (m *MetricFieldInfo) Reset()         { *m = MetricFieldInfo{} }
func (m *MetricFieldInfo) String() string { return proto.CompactTextString(m) }
func (*MetricFieldInfo) ProtoMessage()    {}
func (*MetricFieldInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorMetricsAnnotations, []int{1}
}

func (m *MetricFieldInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MetricFieldInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricFieldInfo) GetUnits() MetricUnitType {
	if m != nil {
		return m.Units
	}
	return MetricUnitType_Count
}

func (m *MetricFieldInfo) GetScaleMin() int32 {
	if m != nil {
		return m.ScaleMin
	}
	return 0
}

func (m *MetricFieldInfo) GetScaleMax() int32 {
	if m != nil {
		return m.ScaleMax
	}
	return 0
}

var E_MetricInfo = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*MetricInfo)(nil),
	Field:         90001,
	Name:          "venice.metricInfo",
	Tag:           "bytes,90001,opt,name=metricInfo",
	Filename:      "metrics_annotations.proto",
}

var E_MetricsField = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*MetricFieldInfo)(nil),
	Field:         91001,
	Name:          "venice.metricsField",
	Tag:           "bytes,91001,opt,name=metricsField",
	Filename:      "metrics_annotations.proto",
}

func init() {
	proto.RegisterType((*MetricInfo)(nil), "venice.MetricInfo")
	proto.RegisterType((*MetricFieldInfo)(nil), "venice.MetricFieldInfo")
	proto.RegisterEnum("venice.MetricUnitType", MetricUnitType_name, MetricUnitType_value)
	proto.RegisterExtension(E_MetricInfo)
	proto.RegisterExtension(E_MetricsField)
}
func (m *MetricInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.KeyFields) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(len(m.KeyFields)))
		i += copy(dAtA[i:], m.KeyFields)
	}
	return i, nil
}

func (m *MetricFieldInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricFieldInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Units != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(m.Units))
	}
	if m.ScaleMin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(m.ScaleMin))
	}
	if m.ScaleMax != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetricsAnnotations(dAtA, i, uint64(m.ScaleMax))
	}
	return i, nil
}

func encodeVarintMetricsAnnotations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetricInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMetricsAnnotations(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMetricsAnnotations(uint64(l))
	}
	l = len(m.KeyFields)
	if l > 0 {
		n += 1 + l + sovMetricsAnnotations(uint64(l))
	}
	return n
}

func (m *MetricFieldInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovMetricsAnnotations(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMetricsAnnotations(uint64(l))
	}
	if m.Units != 0 {
		n += 1 + sovMetricsAnnotations(uint64(m.Units))
	}
	if m.ScaleMin != 0 {
		n += 1 + sovMetricsAnnotations(uint64(m.ScaleMin))
	}
	if m.ScaleMax != 0 {
		n += 1 + sovMetricsAnnotations(uint64(m.ScaleMax))
	}
	return n
}

func sovMetricsAnnotations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetricsAnnotations(x uint64) (n int) {
	return sovMetricsAnnotations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricsAnnotations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetricsAnnotations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricFieldInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetricsAnnotations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricFieldInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricFieldInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			m.Units = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Units |= (MetricUnitType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMin", wireType)
			}
			m.ScaleMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleMax", wireType)
			}
			m.ScaleMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScaleMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetricsAnnotations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetricsAnnotations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetricsAnnotations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetricsAnnotations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetricsAnnotations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetricsAnnotations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetricsAnnotations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetricsAnnotations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetricsAnnotations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetricsAnnotations   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metrics_annotations.proto", fileDescriptorMetricsAnnotations) }

var fileDescriptorMetricsAnnotations = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x41, 0x8b, 0xda, 0x40,
	0x14, 0xc7, 0x3b, 0xda, 0x48, 0x7d, 0x8a, 0x0d, 0x73, 0x68, 0x53, 0x69, 0x6d, 0xf0, 0x24, 0xa5,
	0x44, 0xb0, 0x37, 0x0f, 0x3d, 0x58, 0x29, 0x48, 0xb1, 0x2d, 0x69, 0xbd, 0x15, 0xca, 0x18, 0x9f,
	0x61, 0x20, 0xce, 0x84, 0xcc, 0xb8, 0x98, 0x8f, 0xb1, 0x9f, 0x67, 0x0f, 0x7b, 0x5b, 0xf6, 0xb8,
	0x1f, 0x61, 0xf1, 0x5b, 0xec, 0x6d, 0xc9, 0x8c, 0x1a, 0xc3, 0x5e, 0xf7, 0x98, 0xff, 0xff, 0x9f,
	0xdf, 0x3f, 0xef, 0xbd, 0xc0, 0xbb, 0x0d, 0xea, 0x8c, 0x47, 0xea, 0x3f, 0x13, 0x42, 0x6a, 0xa6,
	0xb9, 0x14, 0x2a, 0x48, 0x33, 0xa9, 0x25, 0x6d, 0x5c, 0xa0, 0xe0, 0x11, 0x76, 0xfd, 0x58, 0xca,
	0x38, 0xc1, 0xa1, 0x51, 0x97, 0xdb, 0xf5, 0x70, 0x85, 0x2a, 0xca, 0x78, 0xaa, 0x65, 0x66, 0x93,
	0x7d, 0x01, 0x30, 0x37, 0x98, 0x99, 0x58, 0x4b, 0xea, 0x43, 0x6b, 0xca, 0x55, 0x9a, 0xb0, 0xfc,
	0x27, 0xdb, 0xa0, 0x47, 0x7c, 0x32, 0x68, 0x86, 0xe7, 0x92, 0x49, 0x1c, 0x18, 0x5c, 0x0a, 0xaf,
	0x76, 0x48, 0x94, 0x12, 0x7d, 0x0f, 0xcd, 0x1f, 0x98, 0x7f, 0xe7, 0x98, 0xac, 0x94, 0x57, 0x37,
	0x7e, 0x29, 0xf4, 0xaf, 0x08, 0xbc, 0xb6, 0x85, 0x46, 0x78, 0xb6, 0xd6, 0xcf, 0xe0, 0x2c, 0x04,
	0xd7, 0xb6, 0xb1, 0x33, 0x7a, 0x13, 0xd8, 0x0d, 0x04, 0xb6, 0xab, 0xb0, 0xfe, 0xe6, 0x29, 0x86,
	0x36, 0x44, 0xbb, 0xf0, 0xea, 0x4f, 0xc4, 0x12, 0x9c, 0x73, 0xe1, 0xbd, 0xf4, 0xc9, 0xc0, 0x09,
	0x4f, 0xcf, 0xa5, 0xc7, 0x76, 0x9e, 0x73, 0xee, 0xb1, 0xdd, 0xa7, 0xaf, 0xd0, 0xa9, 0x02, 0x69,
	0x13, 0x9c, 0x6f, 0x72, 0x2b, 0xb4, 0xfb, 0x82, 0x76, 0x00, 0x7e, 0x63, 0x16, 0xa1, 0xd0, 0x2c,
	0x46, 0x97, 0x14, 0xd6, 0x24, 0xd7, 0xa8, 0xdc, 0x1a, 0x6d, 0x40, 0x6d, 0x36, 0x75, 0xeb, 0xe3,
	0x05, 0xc0, 0xa6, 0xdc, 0xf6, 0xc7, 0xc0, 0x9e, 0x27, 0x38, 0x9e, 0x27, 0x98, 0xa3, 0x52, 0x2c,
	0xc6, 0x5f, 0x66, 0x26, 0xe5, 0x5d, 0x5e, 0x17, 0x1f, 0xd0, 0x1a, 0xd1, 0xea, 0x34, 0xc5, 0xcb,
	0xe1, 0x19, 0x68, 0xfc, 0x0f, 0xda, 0x87, 0x7f, 0xc1, 0x2c, 0x95, 0x7e, 0x78, 0x02, 0x36, 0xfa,
	0x11, 0xfb, 0x70, 0x63, 0xb1, 0x6f, 0xab, 0xd8, 0xd3, 0x41, 0xc2, 0x0a, 0x6d, 0xd2, 0xbe, 0xdd,
	0xf7, 0xc8, 0xdd, 0xbe, 0x47, 0xee, 0xf7, 0x3d, 0xb2, 0x6c, 0x18, 0xe6, 0x97, 0xc7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8c, 0xc5, 0xf6, 0x4e, 0x7e, 0x02, 0x00, 0x00,
}
