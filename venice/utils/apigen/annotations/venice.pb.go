// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: venice.proto

/*
	Package venice is a generated protocol buffer package.

	It is generated from these files:
		venice.proto

	It has these top-level messages:
		ObjectRln
		RestEndpoint
		ObjectPrefix
		ActionEndpoint
		ProxyEndpoint
*/
package venice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ObjectRln struct {
	// Type of reference one of [ NamedRef, SelectorRef, WeakRef ]
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Object being referred to.
	To string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	// Use this field in the message to derive tenant
	UseTenant string `protobuf:"bytes,3,opt,name=UseTenant,proto3" json:"UseTenant,omitempty"`
}

func (m *ObjectRln) Reset()                    { *m = ObjectRln{} }
func (m *ObjectRln) String() string            { return proto.CompactTextString(m) }
func (*ObjectRln) ProtoMessage()               {}
func (*ObjectRln) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{0} }

func (m *ObjectRln) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ObjectRln) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ObjectRln) GetUseTenant() string {
	if m != nil {
		return m.UseTenant
	}
	return ""
}

// RestEndpoint is used by the venice.apiRestservice option to specify REST resources to be exposed.
type RestEndpoint struct {
	// Object for which the endpoint is being defined
	Object string `protobuf:"bytes,1,opt,name=Object,proto3" json:"Object,omitempty"`
	// Methods allowed on the resource
	Method []string `protobuf:"bytes,2,rep,name=Method" json:"Method,omitempty"`
	// Pattern for the URI
	Pattern string `protobuf:"bytes,3,opt,name=Pattern,proto3" json:"Pattern,omitempty"`
	// Prefix for the URL
	Prefix string `protobuf:"bytes,4,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// version
	Version string `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *RestEndpoint) Reset()                    { *m = RestEndpoint{} }
func (m *RestEndpoint) String() string            { return proto.CompactTextString(m) }
func (*RestEndpoint) ProtoMessage()               {}
func (*RestEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{1} }

func (m *RestEndpoint) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *RestEndpoint) GetMethod() []string {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RestEndpoint) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *RestEndpoint) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *RestEndpoint) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// ObjectPrefix defines the way the object is identified in the kvstore and REST api.
type ObjectPrefix struct {
	// Path is the path component of the prefix - like tenant etc.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Target is the prefix for the object. Which is usually the containers name or singleton name
	//
	// Types that are valid to be assigned to Target:
	//	*ObjectPrefix_Collection
	//	*ObjectPrefix_Singleton
	Target isObjectPrefix_Target `protobuf_oneof:"Target"`
}

func (m *ObjectPrefix) Reset()                    { *m = ObjectPrefix{} }
func (m *ObjectPrefix) String() string            { return proto.CompactTextString(m) }
func (*ObjectPrefix) ProtoMessage()               {}
func (*ObjectPrefix) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{2} }

type isObjectPrefix_Target interface {
	isObjectPrefix_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ObjectPrefix_Collection struct {
	Collection string `protobuf:"bytes,2,opt,name=Collection,proto3,oneof"`
}
type ObjectPrefix_Singleton struct {
	Singleton string `protobuf:"bytes,3,opt,name=Singleton,proto3,oneof"`
}

func (*ObjectPrefix_Collection) isObjectPrefix_Target() {}
func (*ObjectPrefix_Singleton) isObjectPrefix_Target()  {}

func (m *ObjectPrefix) GetTarget() isObjectPrefix_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ObjectPrefix) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ObjectPrefix) GetCollection() string {
	if x, ok := m.GetTarget().(*ObjectPrefix_Collection); ok {
		return x.Collection
	}
	return ""
}

func (m *ObjectPrefix) GetSingleton() string {
	if x, ok := m.GetTarget().(*ObjectPrefix_Singleton); ok {
		return x.Singleton
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObjectPrefix) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObjectPrefix_OneofMarshaler, _ObjectPrefix_OneofUnmarshaler, _ObjectPrefix_OneofSizer, []interface{}{
		(*ObjectPrefix_Collection)(nil),
		(*ObjectPrefix_Singleton)(nil),
	}
}

func _ObjectPrefix_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObjectPrefix)
	// Target
	switch x := m.Target.(type) {
	case *ObjectPrefix_Collection:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Collection)
	case *ObjectPrefix_Singleton:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Singleton)
	case nil:
	default:
		return fmt.Errorf("ObjectPrefix.Target has unexpected type %T", x)
	}
	return nil
}

func _ObjectPrefix_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObjectPrefix)
	switch tag {
	case 2: // Target.Collection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Target = &ObjectPrefix_Collection{x}
		return true, err
	case 3: // Target.Singleton
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Target = &ObjectPrefix_Singleton{x}
		return true, err
	default:
		return false, nil
	}
}

func _ObjectPrefix_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObjectPrefix)
	// Target
	switch x := m.Target.(type) {
	case *ObjectPrefix_Collection:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Collection)))
		n += len(x.Collection)
	case *ObjectPrefix_Singleton:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Singleton)))
		n += len(x.Singleton)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ActionEndpoint defines a action endpoint definition
type ActionEndpoint struct {
	// Target specifies whether the action is on a collection or an instance
	//
	// Types that are valid to be assigned to Target:
	//	*ActionEndpoint_Collection
	//	*ActionEndpoint_Object
	Target isActionEndpoint_Target `protobuf_oneof:"Target"`
	// Action is the name of the Action
	Action string `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
	// Request is the request parameter message type. Should be defined in the same file
	Request string `protobuf:"bytes,4,opt,name=Request,proto3" json:"Request,omitempty"`
	// Response is the response parameter message type. Should be defined in the same file
	Response string `protobuf:"bytes,5,opt,name=Response,proto3" json:"Response,omitempty"`
	// Description is a short description of the Action
	Desc string `protobuf:"bytes,6,opt,name=Desc,proto3" json:"Desc,omitempty"`
}

func (m *ActionEndpoint) Reset()                    { *m = ActionEndpoint{} }
func (m *ActionEndpoint) String() string            { return proto.CompactTextString(m) }
func (*ActionEndpoint) ProtoMessage()               {}
func (*ActionEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{3} }

type isActionEndpoint_Target interface {
	isActionEndpoint_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionEndpoint_Collection struct {
	Collection string `protobuf:"bytes,1,opt,name=Collection,proto3,oneof"`
}
type ActionEndpoint_Object struct {
	Object string `protobuf:"bytes,2,opt,name=Object,proto3,oneof"`
}

func (*ActionEndpoint_Collection) isActionEndpoint_Target() {}
func (*ActionEndpoint_Object) isActionEndpoint_Target()     {}

func (m *ActionEndpoint) GetTarget() isActionEndpoint_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ActionEndpoint) GetCollection() string {
	if x, ok := m.GetTarget().(*ActionEndpoint_Collection); ok {
		return x.Collection
	}
	return ""
}

func (m *ActionEndpoint) GetObject() string {
	if x, ok := m.GetTarget().(*ActionEndpoint_Object); ok {
		return x.Object
	}
	return ""
}

func (m *ActionEndpoint) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *ActionEndpoint) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *ActionEndpoint) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *ActionEndpoint) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionEndpoint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionEndpoint_OneofMarshaler, _ActionEndpoint_OneofUnmarshaler, _ActionEndpoint_OneofSizer, []interface{}{
		(*ActionEndpoint_Collection)(nil),
		(*ActionEndpoint_Object)(nil),
	}
}

func _ActionEndpoint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionEndpoint)
	// Target
	switch x := m.Target.(type) {
	case *ActionEndpoint_Collection:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Collection)
	case *ActionEndpoint_Object:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Object)
	case nil:
	default:
		return fmt.Errorf("ActionEndpoint.Target has unexpected type %T", x)
	}
	return nil
}

func _ActionEndpoint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionEndpoint)
	switch tag {
	case 1: // Target.Collection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Target = &ActionEndpoint_Collection{x}
		return true, err
	case 2: // Target.Object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Target = &ActionEndpoint_Object{x}
		return true, err
	default:
		return false, nil
	}
}

func _ActionEndpoint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionEndpoint)
	// Target
	switch x := m.Target.(type) {
	case *ActionEndpoint_Collection:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Collection)))
		n += len(x.Collection)
	case *ActionEndpoint_Object:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Object)))
		n += len(x.Object)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxyEndpoint defines an endpoint which will be reverse proxied to a backend.
type ProxyEndpoint struct {
	// Backend specifies the external server where the request will be proxied to.
	//  This can either be a fully qualified path <hostname>:<port> or a resolver
	//  destination "pen-xxxserver"
	Backend string `protobuf:"bytes,1,opt,name=Backend,proto3" json:"Backend,omitempty"`
	// URI path that needs to be reverse proxied to Backend. this is a simple path prefix
	//  sub-paths for which will all be forwarded. Only one rule per path prefix is allowed.
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	// PathPrefix is the prefix to add towards the proxy backend
	PathPrefix string `protobuf:"bytes,3,opt,name=PathPrefix,proto3" json:"PathPrefix,omitempty"`
	// DocString is a user friendly short description
	DocString string `protobuf:"bytes,4,opt,name=DocString,proto3" json:"DocString,omitempty"`
	// Response is the response object for the request
	Response string `protobuf:"bytes,5,opt,name=Response,proto3" json:"Response,omitempty"`
	// FormParams is the list of the form parts if the proxy endpoint accepts multi-part forms
	FormParams []*ProxyEndpoint_MultipartParam `protobuf:"bytes,6,rep,name=FormParams" json:"FormParams,omitempty"`
}

func (m *ProxyEndpoint) Reset()                    { *m = ProxyEndpoint{} }
func (m *ProxyEndpoint) String() string            { return proto.CompactTextString(m) }
func (*ProxyEndpoint) ProtoMessage()               {}
func (*ProxyEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{4} }

func (m *ProxyEndpoint) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *ProxyEndpoint) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProxyEndpoint) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

func (m *ProxyEndpoint) GetDocString() string {
	if m != nil {
		return m.DocString
	}
	return ""
}

func (m *ProxyEndpoint) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *ProxyEndpoint) GetFormParams() []*ProxyEndpoint_MultipartParam {
	if m != nil {
		return m.FormParams
	}
	return nil
}

type ProxyEndpoint_MultipartParam struct {
	// Name of the multipart form parameeter
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Type for the parameter
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// User friendly short description
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Is the parameter required
	Required bool `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`
}

func (m *ProxyEndpoint_MultipartParam) Reset()         { *m = ProxyEndpoint_MultipartParam{} }
func (m *ProxyEndpoint_MultipartParam) String() string { return proto.CompactTextString(m) }
func (*ProxyEndpoint_MultipartParam) ProtoMessage()    {}
func (*ProxyEndpoint_MultipartParam) Descriptor() ([]byte, []int) {
	return fileDescriptorVenice, []int{4, 0}
}

func (m *ProxyEndpoint_MultipartParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProxyEndpoint_MultipartParam) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProxyEndpoint_MultipartParam) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProxyEndpoint_MultipartParam) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

var E_FileGrpcDest = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51235,
	Name:          "venice.fileGrpcDest",
	Tag:           "bytes,51235,opt,name=fileGrpcDest",
	Filename:      "venice.proto",
}

var E_FileApiServerBacked = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51236,
	Name:          "venice.fileApiServerBacked",
	Tag:           "varint,51236,opt,name=fileApiServerBacked",
	Filename:      "venice.proto",
}

var E_FileCategory = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51237,
	Name:          "venice.fileCategory",
	Tag:           "bytes,51237,opt,name=fileCategory",
	Filename:      "venice.proto",
}

var E_FilterImport = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51238,
	Name:          "venice.filterImport",
	Tag:           "bytes,51238,rep,name=filterImport",
	Filename:      "venice.proto",
}

var E_ApiVersion = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51250,
	Name:          "venice.apiVersion",
	Tag:           "bytes,51250,opt,name=apiVersion",
	Filename:      "venice.proto",
}

var E_ApiPrefix = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51251,
	Name:          "venice.apiPrefix",
	Tag:           "bytes,51251,opt,name=apiPrefix",
	Filename:      "venice.proto",
}

var E_ApiGrpcCrudService = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51252,
	Name:          "venice.apiGrpcCrudService",
	Tag:           "bytes,51252,rep,name=apiGrpcCrudService",
	Filename:      "venice.proto",
}

var E_ApiRestService = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]*RestEndpoint)(nil),
	Field:         51253,
	Name:          "venice.apiRestService",
	Tag:           "bytes,51253,rep,name=apiRestService",
	Filename:      "venice.proto",
}

var E_NaplesRestService = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]*RestEndpoint)(nil),
	Field:         51254,
	Name:          "venice.naplesRestService",
	Tag:           "bytes,51254,rep,name=naplesRestService",
	Filename:      "venice.proto",
}

var E_ApiAction = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]*ActionEndpoint)(nil),
	Field:         51255,
	Name:          "venice.apiAction",
	Tag:           "bytes,51255,rep,name=apiAction",
	Filename:      "venice.proto",
}

var E_EventTypes = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51256,
	Name:          "venice.eventTypes",
	Tag:           "bytes,51256,rep,name=eventTypes",
	Filename:      "venice.proto",
}

var E_ProxyPrefix = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: ([]*ProxyEndpoint)(nil),
	Field:         51257,
	Name:          "venice.proxyPrefix",
	Tag:           "bytes,51257,rep,name=proxyPrefix",
	Filename:      "venice.proto",
}

var E_MethodOper = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51270,
	Name:          "venice.methodOper",
	Tag:           "bytes,51270,opt,name=methodOper",
	Filename:      "venice.proto",
}

var E_MethodAutoGen = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51271,
	Name:          "venice.methodAutoGen",
	Tag:           "varint,51271,opt,name=methodAutoGen",
	Filename:      "venice.proto",
}

var E_MethodTenantDefault = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51272,
	Name:          "venice.methodTenantDefault",
	Tag:           "varint,51272,opt,name=methodTenantDefault",
	Filename:      "venice.proto",
}

var E_MethodActionObject = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51273,
	Name:          "venice.methodActionObject",
	Tag:           "bytes,51273,opt,name=methodActionObject",
	Filename:      "venice.proto",
}

var E_MethodSrvBinaryStream = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51274,
	Name:          "venice.methodSrvBinaryStream",
	Tag:           "varint,51274,opt,name=methodSrvBinaryStream",
	Filename:      "venice.proto",
}

var E_ObjectPrefix = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*ObjectPrefix)(nil),
	Field:         51290,
	Name:          "venice.objectPrefix",
	Tag:           "bytes,51290,opt,name=objectPrefix",
	Filename:      "venice.proto",
}

var E_ObjectAutoGen = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51291,
	Name:          "venice.objectAutoGen",
	Tag:           "bytes,51291,opt,name=objectAutoGen",
	Filename:      "venice.proto",
}

var E_ForceDoc = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51292,
	Name:          "venice.forceDoc",
	Tag:           "varint,51292,opt,name=forceDoc",
	Filename:      "venice.proto",
}

var E_ObjRelation = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*ObjectRln)(nil),
	Field:         51300,
	Name:          "venice.objRelation",
	Tag:           "bytes,51300,opt,name=objRelation",
	Filename:      "venice.proto",
}

var E_Check = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51301,
	Name:          "venice.check",
	Tag:           "bytes,51301,rep,name=check",
	Filename:      "venice.proto",
}

var E_Default = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51302,
	Name:          "venice.default",
	Tag:           "bytes,51302,rep,name=default",
	Filename:      "venice.proto",
}

var E_StorageTransformer = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: ([]string)(nil),
	Field:         51303,
	Name:          "venice.storageTransformer",
	Tag:           "bytes,51303,rep,name=storageTransformer",
	Filename:      "venice.proto",
}

var E_Mutable = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         51304,
	Name:          "venice.mutable",
	Tag:           "varint,51304,opt,name=mutable",
	Filename:      "venice.proto",
}

var E_EnumValueStr = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51340,
	Name:          "venice.enumValueStr",
	Tag:           "bytes,51340,opt,name=enumValueStr",
	Filename:      "venice.proto",
}

func init() {
	proto.RegisterType((*ObjectRln)(nil), "venice.ObjectRln")
	proto.RegisterType((*RestEndpoint)(nil), "venice.RestEndpoint")
	proto.RegisterType((*ObjectPrefix)(nil), "venice.ObjectPrefix")
	proto.RegisterType((*ActionEndpoint)(nil), "venice.ActionEndpoint")
	proto.RegisterType((*ProxyEndpoint)(nil), "venice.ProxyEndpoint")
	proto.RegisterType((*ProxyEndpoint_MultipartParam)(nil), "venice.ProxyEndpoint.MultipartParam")
	proto.RegisterExtension(E_FileGrpcDest)
	proto.RegisterExtension(E_FileApiServerBacked)
	proto.RegisterExtension(E_FileCategory)
	proto.RegisterExtension(E_FilterImport)
	proto.RegisterExtension(E_ApiVersion)
	proto.RegisterExtension(E_ApiPrefix)
	proto.RegisterExtension(E_ApiGrpcCrudService)
	proto.RegisterExtension(E_ApiRestService)
	proto.RegisterExtension(E_NaplesRestService)
	proto.RegisterExtension(E_ApiAction)
	proto.RegisterExtension(E_EventTypes)
	proto.RegisterExtension(E_ProxyPrefix)
	proto.RegisterExtension(E_MethodOper)
	proto.RegisterExtension(E_MethodAutoGen)
	proto.RegisterExtension(E_MethodTenantDefault)
	proto.RegisterExtension(E_MethodActionObject)
	proto.RegisterExtension(E_MethodSrvBinaryStream)
	proto.RegisterExtension(E_ObjectPrefix)
	proto.RegisterExtension(E_ObjectAutoGen)
	proto.RegisterExtension(E_ForceDoc)
	proto.RegisterExtension(E_ObjRelation)
	proto.RegisterExtension(E_Check)
	proto.RegisterExtension(E_Default)
	proto.RegisterExtension(E_StorageTransformer)
	proto.RegisterExtension(E_Mutable)
	proto.RegisterExtension(E_EnumValueStr)
}
func (m *ObjectRln) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRln) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.UseTenant) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.UseTenant)))
		i += copy(dAtA[i:], m.UseTenant)
	}
	return i, nil
}

func (m *RestEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestEndpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Object) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Object)))
		i += copy(dAtA[i:], m.Object)
	}
	if len(m.Method) > 0 {
		for _, s := range m.Method {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *ObjectPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectPrefix) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Target != nil {
		nn1, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ObjectPrefix_Collection) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintVenice(dAtA, i, uint64(len(m.Collection)))
	i += copy(dAtA[i:], m.Collection)
	return i, nil
}
func (m *ObjectPrefix_Singleton) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintVenice(dAtA, i, uint64(len(m.Singleton)))
	i += copy(dAtA[i:], m.Singleton)
	return i, nil
}
func (m *ActionEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionEndpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		nn2, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *ActionEndpoint_Collection) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintVenice(dAtA, i, uint64(len(m.Collection)))
	i += copy(dAtA[i:], m.Collection)
	return i, nil
}
func (m *ActionEndpoint_Object) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintVenice(dAtA, i, uint64(len(m.Object)))
	i += copy(dAtA[i:], m.Object)
	return i, nil
}
func (m *ProxyEndpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyEndpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Backend) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Backend)))
		i += copy(dAtA[i:], m.Backend)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.PathPrefix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.PathPrefix)))
		i += copy(dAtA[i:], m.PathPrefix)
	}
	if len(m.DocString) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.DocString)))
		i += copy(dAtA[i:], m.DocString)
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if len(m.FormParams) > 0 {
		for _, msg := range m.FormParams {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVenice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyEndpoint_MultipartParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyEndpoint_MultipartParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Required {
		dAtA[i] = 0x20
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintVenice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObjectRln) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.UseTenant)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	return n
}

func (m *RestEndpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	if len(m.Method) > 0 {
		for _, s := range m.Method {
			l = len(s)
			n += 1 + l + sovVenice(uint64(l))
		}
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	return n
}

func (m *ObjectPrefix) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	return n
}

func (m *ObjectPrefix_Collection) Size() (n int) {
	var l int
	_ = l
	l = len(m.Collection)
	n += 1 + l + sovVenice(uint64(l))
	return n
}
func (m *ObjectPrefix_Singleton) Size() (n int) {
	var l int
	_ = l
	l = len(m.Singleton)
	n += 1 + l + sovVenice(uint64(l))
	return n
}
func (m *ActionEndpoint) Size() (n int) {
	var l int
	_ = l
	if m.Target != nil {
		n += m.Target.Size()
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	return n
}

func (m *ActionEndpoint_Collection) Size() (n int) {
	var l int
	_ = l
	l = len(m.Collection)
	n += 1 + l + sovVenice(uint64(l))
	return n
}
func (m *ActionEndpoint_Object) Size() (n int) {
	var l int
	_ = l
	l = len(m.Object)
	n += 1 + l + sovVenice(uint64(l))
	return n
}
func (m *ProxyEndpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.Backend)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.PathPrefix)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.DocString)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	if len(m.FormParams) > 0 {
		for _, e := range m.FormParams {
			l = e.Size()
			n += 1 + l + sovVenice(uint64(l))
		}
	}
	return n
}

func (m *ProxyEndpoint_MultipartParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	if m.Required {
		n += 2
	}
	return n
}

func sovVenice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVenice(x uint64) (n int) {
	return sovVenice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectRln) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRln: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRln: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseTenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = append(m.Method, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &ObjectPrefix_Collection{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Singleton", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &ObjectPrefix_Singleton{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &ActionEndpoint_Collection{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = &ActionEndpoint_Object{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyEndpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormParams = append(m.FormParams, &ProxyEndpoint_MultipartParam{})
			if err := m.FormParams[len(m.FormParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyEndpoint_MultipartParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipartParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipartParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVenice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVenice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVenice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVenice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVenice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVenice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("venice.proto", fileDescriptorVenice) }

var fileDescriptorVenice = []byte{
	// 1026 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0xc7, 0x63, 0x6f, 0xe2, 0xdd, 0xad, 0xf5, 0xae, 0x94, 0x09, 0x89, 0x46, 0xab, 0xe0, 0x98,
	0x15, 0x87, 0x9c, 0x1c, 0x29, 0x88, 0x03, 0x2d, 0x21, 0xd8, 0x5d, 0x67, 0x37, 0x1c, 0x96, 0x35,
	0x63, 0xb3, 0x48, 0x70, 0x40, 0xed, 0x71, 0xd9, 0x3b, 0xc9, 0xb8, 0x7b, 0xd2, 0xd3, 0x63, 0x65,
	0x5f, 0x01, 0x71, 0x08, 0xcf, 0xc0, 0xc7, 0x03, 0xf0, 0x19, 0x5e, 0x00, 0x02, 0x27, 0x2e, 0x5c,
	0x80, 0x03, 0x5a, 0xf1, 0xf5, 0x18, 0xa8, 0xa7, 0x6b, 0xc6, 0x33, 0xd8, 0xca, 0x84, 0x93, 0xa7,
	0xca, 0xfd, 0xff, 0x75, 0x55, 0x75, 0x55, 0x37, 0x34, 0x67, 0x28, 0x02, 0x1f, 0x3b, 0x91, 0x92,
	0x5a, 0x3a, 0x0d, 0x6b, 0x6d, 0xb7, 0x27, 0x52, 0x4e, 0x42, 0xbc, 0x95, 0x7a, 0x87, 0xc9, 0xf8,
	0xd6, 0x08, 0x63, 0x5f, 0x05, 0x91, 0x96, 0xca, 0xae, 0xdc, 0x39, 0x82, 0xf5, 0xe3, 0xe1, 0x3d,
	0xf4, 0xb5, 0x17, 0x0a, 0xc7, 0x81, 0x8b, 0x83, 0xb3, 0x08, 0xdd, 0x5a, 0xbb, 0x76, 0x73, 0xdd,
	0x4b, 0xbf, 0x9d, 0x2d, 0xa8, 0x0f, 0xa4, 0x5b, 0x4f, 0x3d, 0xf5, 0x81, 0x74, 0xae, 0xc3, 0xfa,
	0xdb, 0x31, 0x0e, 0x50, 0x70, 0xa1, 0xdd, 0x95, 0xd4, 0x3d, 0x77, 0xec, 0x7c, 0x50, 0x83, 0xa6,
	0x87, 0xb1, 0xbe, 0x23, 0x46, 0x91, 0x0c, 0x84, 0x76, 0xae, 0x41, 0xc3, 0xf2, 0x09, 0x4a, 0x96,
	0xf1, 0x1f, 0xa1, 0x3e, 0x95, 0x23, 0xb7, 0xde, 0x5e, 0x31, 0x7e, 0x6b, 0x39, 0x2e, 0xac, 0xf6,
	0xb8, 0xd6, 0xa8, 0x04, 0xc1, 0x33, 0xd3, 0x28, 0x7a, 0x0a, 0xc7, 0xc1, 0x43, 0xf7, 0xa2, 0x25,
	0x59, 0xcb, 0x28, 0x4e, 0x50, 0xc5, 0x81, 0x14, 0xee, 0x25, 0xab, 0x20, 0x73, 0x47, 0x40, 0xd3,
	0xee, 0x46, 0x2b, 0x1d, 0xb8, 0xd8, 0xe3, 0xfa, 0x34, 0x4b, 0xcf, 0x7c, 0x3b, 0x6d, 0x80, 0x7d,
	0x19, 0x86, 0xe8, 0x6b, 0x03, 0x48, 0xd3, 0xbc, 0x7b, 0xc1, 0x2b, 0xf8, 0x9c, 0x16, 0xac, 0xf7,
	0x03, 0x31, 0x09, 0x51, 0x4b, 0x8a, 0xe9, 0xee, 0x05, 0x6f, 0xee, 0xda, 0x5b, 0x83, 0xc6, 0x80,
	0xab, 0x09, 0xea, 0x9d, 0xc7, 0x35, 0xd8, 0xda, 0x4d, 0x45, 0x79, 0xfa, 0x65, 0x7c, 0x6d, 0x09,
	0xde, 0xcd, 0x0b, 0x94, 0x6d, 0x5e, 0x28, 0x91, 0xa5, 0x51, 0x25, 0xc8, 0x32, 0x09, 0x7b, 0xf8,
	0x20, 0xc1, 0x58, 0x53, 0x25, 0x32, 0xd3, 0xd9, 0x86, 0x35, 0x0f, 0xe3, 0x48, 0x8a, 0x18, 0xa9,
	0x16, 0xb9, 0x6d, 0x92, 0xef, 0x62, 0xec, 0xbb, 0x0d, 0x9b, 0xbc, 0xf9, 0x2e, 0x84, 0xfe, 0x73,
	0x1d, 0x36, 0x7b, 0x4a, 0x3e, 0x3c, 0xcb, 0x23, 0x77, 0x61, 0x75, 0x8f, 0xfb, 0xf7, 0x51, 0x8c,
	0xa8, 0x5e, 0x99, 0x99, 0x97, 0xb1, 0x5e, 0x28, 0x63, 0x0b, 0xc0, 0xfc, 0xd2, 0x01, 0xd9, 0x78,
	0x0b, 0x1e, 0xd3, 0x35, 0x5d, 0xe9, 0xf7, 0xb5, 0x0a, 0xc4, 0x84, 0xa2, 0x9e, 0x3b, 0x9e, 0x1a,
	0x77, 0x17, 0xe0, 0x40, 0xaa, 0x69, 0x8f, 0x2b, 0x3e, 0x8d, 0xdd, 0x46, 0x7b, 0xe5, 0xe6, 0xc6,
	0xed, 0x17, 0x3b, 0xd4, 0xed, 0xa5, 0x90, 0x3b, 0x47, 0x49, 0xa8, 0x83, 0x88, 0x2b, 0x9d, 0x2e,
	0xf6, 0x0a, 0xba, 0xed, 0x19, 0x6c, 0x95, 0xff, 0x35, 0x59, 0xbc, 0xc9, 0xa7, 0x79, 0xaf, 0x9b,
	0xef, 0xbc, 0xff, 0xeb, 0x85, 0xfe, 0x6f, 0xc3, 0x46, 0x97, 0x86, 0x66, 0x7e, 0x14, 0x45, 0x97,
	0x8d, 0xfe, 0x41, 0x12, 0x28, 0x1c, 0xa5, 0xa9, 0xad, 0x79, 0xb9, 0xcd, 0xf6, 0xa0, 0x39, 0x0e,
	0x42, 0x3c, 0x54, 0x91, 0xdf, 0x35, 0x27, 0x74, 0xbd, 0x63, 0x27, 0xb2, 0x93, 0x4d, 0x64, 0xe7,
	0x20, 0x08, 0xf1, 0x38, 0x05, 0xc5, 0xee, 0xc7, 0x8f, 0x2c, 0xbe, 0xa4, 0x61, 0x3d, 0xb8, 0x62,
	0xec, 0xdd, 0x28, 0xe8, 0xa3, 0x9a, 0xa1, 0x4a, 0xcf, 0x61, 0x54, 0x81, 0xfa, 0x24, 0x45, 0xad,
	0x79, 0xcb, 0xa4, 0x59, 0x54, 0xfb, 0x5c, 0xe3, 0x44, 0xaa, 0xb3, 0x0a, 0xd4, 0xa7, 0xc5, 0xa8,
	0x32, 0x0d, 0x31, 0x34, 0xaa, 0x37, 0xa6, 0x91, 0x54, 0x55, 0x99, 0x7d, 0xf6, 0x68, 0x25, 0x1d,
	0xf3, 0x92, 0x86, 0xed, 0x02, 0xf0, 0x28, 0xa0, 0x71, 0x75, 0x6e, 0x2c, 0x10, 0x4c, 0xd0, 0x81,
	0x9f, 0x43, 0x3e, 0xa7, 0x40, 0x0a, 0x22, 0xf6, 0x1a, 0xac, 0xf3, 0x28, 0xa0, 0x2e, 0xab, 0x24,
	0x7c, 0x41, 0x84, 0xb9, 0x86, 0xbd, 0x05, 0x0e, 0x8f, 0x02, 0x53, 0xec, 0x7d, 0x95, 0x8c, 0x68,
	0x7d, 0x35, 0xe9, 0x4b, 0x4a, 0x68, 0x89, 0x98, 0xbd, 0x0f, 0x5b, 0x3c, 0x0a, 0xcc, 0x35, 0xf8,
	0xcc, 0xb8, 0xaf, 0x52, 0xdc, 0xc6, 0xed, 0xe7, 0xb2, 0xce, 0x2e, 0x5e, 0xa2, 0xde, 0x7f, 0x70,
	0x0c, 0xe1, 0xb2, 0xe0, 0x51, 0x88, 0xf1, 0xff, 0xda, 0xe3, 0xeb, 0xa7, 0xee, 0xb1, 0x48, 0x64,
	0xef, 0xa4, 0xb5, 0xa5, 0x5b, 0xa7, 0x12, 0xff, 0x0d, 0xe1, 0xaf, 0x65, 0xf8, 0xf2, 0x55, 0xe8,
	0xcd, 0x59, 0xe6, 0xdc, 0x71, 0x86, 0x42, 0x9b, 0x01, 0x8b, 0xab, 0xc9, 0x8f, 0xa9, 0xd6, 0x05,
	0x11, 0x7b, 0x17, 0x36, 0x22, 0x33, 0xfc, 0xcf, 0x7a, 0xf2, 0xdf, 0x52, 0x74, 0x57, 0x97, 0x5e,
	0x1d, 0x5e, 0x11, 0xc6, 0x5e, 0x07, 0x98, 0xa6, 0xaf, 0xd1, 0x71, 0x84, 0xca, 0x69, 0x2d, 0xa0,
	0x8f, 0xe8, 0x4f, 0x4b, 0xfe, 0x2e, 0xeb, 0xca, 0xb9, 0x86, 0x1d, 0xc0, 0xa6, 0xb5, 0x76, 0x13,
	0x2d, 0x0f, 0x51, 0x54, 0x42, 0xbe, 0xa7, 0x71, 0x2d, 0xcb, 0x98, 0x07, 0x57, 0xac, 0xc3, 0x3e,
	0xaf, 0x5d, 0x1c, 0xf3, 0x24, 0xd4, 0x95, 0xb4, 0x27, 0xd9, 0xf0, 0x2f, 0x11, 0xb3, 0x1e, 0x38,
	0xb4, 0x49, 0x7a, 0x18, 0xf4, 0xd8, 0x54, 0x21, 0x7f, 0xa0, 0x2c, 0x97, 0x68, 0xd9, 0x09, 0x5c,
	0xb5, 0xde, 0xbe, 0x9a, 0xed, 0x05, 0x82, 0xab, 0xb3, 0xbe, 0x56, 0xc8, 0xa7, 0x95, 0xd0, 0x1f,
	0x29, 0xce, 0xe5, 0x72, 0xf6, 0x1e, 0x34, 0x65, 0xf1, 0xfd, 0xbe, 0xb1, 0x04, 0x17, 0xc7, 0x7c,
	0x92, 0x1f, 0xf2, 0x2f, 0x29, 0xaf, 0xd0, 0xe1, 0xc5, 0xe7, 0xdf, 0x2b, 0xc1, 0xd8, 0x21, 0x6c,
	0x5a, 0x3b, 0x3b, 0xa2, 0x4a, 0xfa, 0xaf, 0x54, 0x82, 0xb2, 0x8e, 0xbd, 0x0a, 0x6b, 0x63, 0xa9,
	0x7c, 0xec, 0x4a, 0xbf, 0x9a, 0xf1, 0x1b, 0x65, 0x9c, 0x4b, 0xd8, 0x00, 0x36, 0xe4, 0xf0, 0x9e,
	0x87, 0x21, 0x4f, 0xc7, 0xec, 0xf9, 0x25, 0xd7, 0x28, 0x86, 0x79, 0xc5, 0xfe, 0xa0, 0x0c, 0x2f,
	0x97, 0x33, 0xf4, 0x42, 0xe1, 0x15, 0x31, 0xec, 0x65, 0xb8, 0xe4, 0x9f, 0xa2, 0x7f, 0xbf, 0x8a,
	0xf7, 0x27, 0x8d, 0x96, 0x5d, 0xcd, 0x5e, 0x81, 0xd5, 0x11, 0xf5, 0x58, 0x85, 0xf0, 0x2f, 0x12,
	0x66, 0xeb, 0xd9, 0x31, 0x38, 0xb1, 0x96, 0x8a, 0x4f, 0x70, 0xa0, 0xb8, 0x88, 0xc7, 0x52, 0x4d,
	0x51, 0x55, 0x51, 0xfe, 0xce, 0x6e, 0xd1, 0x45, 0xa9, 0x89, 0x65, 0x9a, 0x68, 0x3e, 0x0c, 0xb1,
	0x8a, 0xf2, 0x0f, 0x15, 0x35, 0x5b, 0xcf, 0x0e, 0xa1, 0x89, 0x22, 0x99, 0x9e, 0xf0, 0x30, 0xc1,
	0xbe, 0x56, 0xce, 0x0b, 0x0b, 0xfa, 0x3b, 0xd9, 0xdf, 0x19, 0xe3, 0xc3, 0x8f, 0xe8, 0x91, 0x2b,
	0x0a, 0xf7, 0x9a, 0x4f, 0xce, 0x5b, 0xb5, 0x9f, 0xce, 0x5b, 0xb5, 0xdf, 0xcf, 0x5b, 0xb5, 0x61,
	0x23, 0x95, 0xbf, 0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xeb, 0x82, 0xba, 0x6c, 0x0b,
	0x00, 0x00,
}
