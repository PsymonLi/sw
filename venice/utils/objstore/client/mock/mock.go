// Code generated by MockGen. DO NOT EDIT.
// Source: ../objstore.go

package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	client "github.com/pensando/sw/venice/utils/objstore/minio/client"
)

// MockobjStoreBackend is a mock of objStoreBackend interface
type MockobjStoreBackend struct {
	ctrl     *gomock.Controller
	recorder *MockobjStoreBackendMockRecorder
}

// MockobjStoreBackendMockRecorder is the mock recorder for MockobjStoreBackend
type MockobjStoreBackendMockRecorder struct {
	mock *MockobjStoreBackend
}

// NewMockobjStoreBackend creates a new mock instance
func NewMockobjStoreBackend(ctrl *gomock.Controller) *MockobjStoreBackend {
	mock := &MockobjStoreBackend{ctrl: ctrl}
	mock.recorder = &MockobjStoreBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockobjStoreBackend) EXPECT() *MockobjStoreBackendMockRecorder {
	return _m.recorder
}

// PutObject mocks base method
func (_m *MockobjStoreBackend) PutObject(ctx context.Context, objectName string, reader io.Reader, userMeta map[string]string) (int64, error) {
	ret := _m.ctrl.Call(_m, "PutObject", ctx, objectName, reader, userMeta)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject
func (_mr *MockobjStoreBackendMockRecorder) PutObject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutObject", reflect.TypeOf((*MockobjStoreBackend)(nil).PutObject), arg0, arg1, arg2, arg3)
}

// GetObject mocks base method
func (_m *MockobjStoreBackend) GetObject(ctx context.Context, objectName string) (io.ReadCloser, error) {
	ret := _m.ctrl.Call(_m, "GetObject", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (_mr *MockobjStoreBackendMockRecorder) GetObject(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetObject", reflect.TypeOf((*MockobjStoreBackend)(nil).GetObject), arg0, arg1)
}

// StatObject mocks base method
func (_m *MockobjStoreBackend) StatObject(objectName string) (*client.ObjectStats, error) {
	ret := _m.ctrl.Call(_m, "StatObject", objectName)
	ret0, _ := ret[0].(*client.ObjectStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatObject indicates an expected call of StatObject
func (_mr *MockobjStoreBackendMockRecorder) StatObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StatObject", reflect.TypeOf((*MockobjStoreBackend)(nil).StatObject), arg0)
}

// ListObjects mocks base method
func (_m *MockobjStoreBackend) ListObjects(prefix string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListObjects", prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects
func (_mr *MockobjStoreBackendMockRecorder) ListObjects(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListObjects", reflect.TypeOf((*MockobjStoreBackend)(nil).ListObjects), arg0)
}

// RemoveObjects mocks base method
func (_m *MockobjStoreBackend) RemoveObjects(prefix string) error {
	ret := _m.ctrl.Call(_m, "RemoveObjects", prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObjects indicates an expected call of RemoveObjects
func (_mr *MockobjStoreBackendMockRecorder) RemoveObjects(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveObjects", reflect.TypeOf((*MockobjStoreBackend)(nil).RemoveObjects), arg0)
}
