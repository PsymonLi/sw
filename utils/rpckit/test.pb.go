// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package rpckit is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	TestReq
	TestResp
*/
package rpckit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RPC request
type TestReq struct {
	ReqMsg string `protobuf:"bytes,1,opt,name=reqMsg" json:"reqMsg,omitempty"`
}

func (m *TestReq) Reset()                    { *m = TestReq{} }
func (m *TestReq) String() string            { return proto.CompactTextString(m) }
func (*TestReq) ProtoMessage()               {}
func (*TestReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestReq) GetReqMsg() string {
	if m != nil {
		return m.ReqMsg
	}
	return ""
}

// RPC response
type TestResp struct {
	RespMsg string `protobuf:"bytes,1,opt,name=respMsg" json:"respMsg,omitempty"`
}

func (m *TestResp) Reset()                    { *m = TestResp{} }
func (m *TestResp) String() string            { return proto.CompactTextString(m) }
func (*TestResp) ProtoMessage()               {}
func (*TestResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestResp) GetRespMsg() string {
	if m != nil {
		return m.RespMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*TestReq)(nil), "rpckit.TestReq")
	proto.RegisterType((*TestResp)(nil), "rpckit.TestResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	// test rpc call
	TestRPC(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
	TestRPCErr(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) TestRPC(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := grpc.Invoke(ctx, "/rpckit.Test/TestRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TestRPCErr(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := grpc.Invoke(ctx, "/rpckit.Test/TestRPCErr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	// test rpc call
	TestRPC(context.Context, *TestReq) (*TestResp, error)
	TestRPCErr(context.Context, *TestReq) (*TestResp, error)
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_TestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpckit.Test/TestRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TestRPC(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TestRPCErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TestRPCErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpckit.Test/TestRPCErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TestRPCErr(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpckit.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRPC",
			Handler:    _Test_TestRPC_Handler,
		},
		{
			MethodName: "TestRPCErr",
			Handler:    _Test_TestRPCErr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// Client API for Test2 service

type Test2Client interface {
	// test rpc call
	TestRPC(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
}

type test2Client struct {
	cc *grpc.ClientConn
}

func NewTest2Client(cc *grpc.ClientConn) Test2Client {
	return &test2Client{cc}
}

func (c *test2Client) TestRPC(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := grpc.Invoke(ctx, "/rpckit.Test2/TestRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test2 service

type Test2Server interface {
	// test rpc call
	TestRPC(context.Context, *TestReq) (*TestResp, error)
}

func RegisterTest2Server(s *grpc.Server, srv Test2Server) {
	s.RegisterService(&_Test2_serviceDesc, srv)
}

func _Test2_TestRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test2Server).TestRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpckit.Test2/TestRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test2Server).TestRPC(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Test2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpckit.Test2",
	HandlerType: (*Test2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestRPC",
			Handler:    _Test2_TestRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x2a, 0x48, 0xce, 0xce, 0x2c, 0x51, 0x52,
	0xe4, 0x62, 0x0f, 0x49, 0x2d, 0x2e, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe3, 0x62, 0x2b, 0x4a, 0x2d,
	0xf4, 0x2d, 0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x94, 0x54, 0xb8, 0x38,
	0x20, 0x4a, 0x8a, 0x0b, 0x84, 0x24, 0xb8, 0xd8, 0x8b, 0x52, 0x8b, 0x0b, 0x10, 0x8a, 0x60, 0x5c,
	0xa3, 0x4c, 0x2e, 0x16, 0x90, 0x2a, 0x21, 0x3d, 0xa8, 0x81, 0x01, 0xce, 0x42, 0xfc, 0x7a, 0x10,
	0x4b, 0xf4, 0xa0, 0x36, 0x48, 0x09, 0xa0, 0x0a, 0x14, 0x17, 0x28, 0x31, 0x08, 0x19, 0x72, 0x71,
	0x41, 0xd5, 0xbb, 0x16, 0x15, 0x11, 0xa5, 0xc5, 0xc8, 0x9c, 0x8b, 0x15, 0xc4, 0x33, 0x22, 0xd5,
	0xae, 0x24, 0x36, 0xb0, 0xdf, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0xde, 0xaf, 0xa4,
	0x09, 0x01, 0x00, 0x00,
}
