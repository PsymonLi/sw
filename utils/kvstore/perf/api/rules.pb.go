// Code generated by protoc-gen-go.
// source: rules.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	rules.proto

It has these top-level messages:
	TypeMeta
	ObjectMeta
	ListMeta
	Rule
	RuleList
	Event
	ListReq
	WatchReq
	DeleteReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_EventType int32

const (
	Event_Created Event_EventType = 0
	Event_Updated Event_EventType = 1
	Event_Deleted Event_EventType = 2
)

var Event_EventType_name = map[int32]string{
	0: "Created",
	1: "Updated",
	2: "Deleted",
}
var Event_EventType_value = map[string]int32{
	"Created": 0,
	"Updated": 1,
	"Deleted": 2,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type TypeMeta struct {
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
}

func (m *TypeMeta) Reset()                    { *m = TypeMeta{} }
func (m *TypeMeta) String() string            { return proto.CompactTextString(m) }
func (*TypeMeta) ProtoMessage()               {}
func (*TypeMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TypeMeta) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type ObjectMeta struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ObjectMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListMeta struct {
	ResourceVersion string `protobuf:"bytes,1,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
}

func (m *ListMeta) Reset()                    { *m = ListMeta{} }
func (m *ListMeta) String() string            { return proto.CompactTextString(m) }
func (*ListMeta) ProtoMessage()               {}
func (*ListMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListMeta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type Rule struct {
	Typemeta *TypeMeta   `protobuf:"bytes,1,opt,name=typemeta" json:"typemeta,omitempty"`
	Metadata *ObjectMeta `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Name     string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SrcIp    string      `protobuf:"bytes,4,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp    string      `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	SrcPort  int32       `protobuf:"varint,6,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort  int32       `protobuf:"varint,7,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Protocol int32       `protobuf:"varint,8,opt,name=protocol" json:"protocol,omitempty"`
	Allow    bool        `protobuf:"varint,9,opt,name=allow" json:"allow,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rule) GetTypemeta() *TypeMeta {
	if m != nil {
		return m.Typemeta
	}
	return nil
}

func (m *Rule) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Rule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rule) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *Rule) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *Rule) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Rule) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Rule) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *Rule) GetAllow() bool {
	if m != nil {
		return m.Allow
	}
	return false
}

func (m *Rule) GetObjectKind() string {
	return "Rule"
}
func (m *Rule) GetObjectAPIVersion() string {
	return "v1"
}
func (m *Rule) GetObjectMeta() *api.ObjectMeta {
	return &api.ObjectMeta{
		Name: m.Name,
	}
}

type RuleList struct {
	Typemeta *TypeMeta `protobuf:"bytes,1,opt,name=typemeta" json:"typemeta,omitempty"`
	Metadata *ListMeta `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	Items    []*Rule   `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *RuleList) Reset()                    { *m = RuleList{} }
func (m *RuleList) String() string            { return proto.CompactTextString(m) }
func (*RuleList) ProtoMessage()               {}
func (*RuleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RuleList) GetTypemeta() *TypeMeta {
	if m != nil {
		return m.Typemeta
	}
	return nil
}

func (m *RuleList) GetMetadata() *ListMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RuleList) GetItems() []*Rule {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RuleList) GetObjectKind() string {
	return "RuleList"
}
func (m *RuleList) GetObjectAPIVersion() string {
	return "v1"
}
func (m *RuleList) GetListMeta() *api.ListMeta {
	return &api.ListMeta{}
}

type Event struct {
	Type Event_EventType `protobuf:"varint,1,opt,name=type,enum=api.Event_EventType" json:"type,omitempty"`
	Rule *Rule           `protobuf:"bytes,2,opt,name=rule" json:"rule,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Event) GetType() Event_EventType {
	if m != nil {
		return m.Type
	}
	return Event_Created
}

func (m *Event) GetRule() *Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *Event) GetObjectKind() string {
	return "Event"
}
func (m *Event) GetObjectAPIVersion() string {
	return "v1"
}
func (m *Event) GetListMeta() *api.ListMeta {
	return &api.ListMeta{}
}

type ListReq struct {
}

func (m *ListReq) Reset()                    { *m = ListReq{} }
func (m *ListReq) String() string            { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()               {}
func (*ListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type WatchReq struct {
}

func (m *WatchReq) Reset()                    { *m = WatchReq{} }
func (m *WatchReq) String() string            { return proto.CompactTextString(m) }
func (*WatchReq) ProtoMessage()               {}
func (*WatchReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeleteReq struct {
}

func (m *DeleteReq) Reset()                    { *m = DeleteReq{} }
func (m *DeleteReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()               {}
func (*DeleteReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*TypeMeta)(nil), "api.TypeMeta")
	proto.RegisterType((*ObjectMeta)(nil), "api.ObjectMeta")
	proto.RegisterType((*ListMeta)(nil), "api.ListMeta")
	proto.RegisterType((*Rule)(nil), "api.Rule")
	proto.RegisterType((*RuleList)(nil), "api.RuleList")
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterType((*ListReq)(nil), "api.ListReq")
	proto.RegisterType((*WatchReq)(nil), "api.WatchReq")
	proto.RegisterType((*DeleteReq)(nil), "api.DeleteReq")
	proto.RegisterEnum("api.Event_EventType", Event_EventType_name, Event_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rules service

type RulesClient interface {
	CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error)
	ListRules(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*RuleList, error)
	WatchRules(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (Rules_WatchRulesClient, error)
	DeleteRules(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*RuleList, error)
}

type rulesClient struct {
	cc *grpc.ClientConn
}

func NewRulesClient(cc *grpc.ClientConn) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) CreateRule(ctx context.Context, in *Rule, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := grpc.Invoke(ctx, "/api.Rules/CreateRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ListRules(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*RuleList, error) {
	out := new(RuleList)
	err := grpc.Invoke(ctx, "/api.Rules/ListRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) WatchRules(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (Rules_WatchRulesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rules_serviceDesc.Streams[0], c.cc, "/api.Rules/WatchRules", opts...)
	if err != nil {
		return nil, err
	}
	x := &rulesWatchRulesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rules_WatchRulesClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type rulesWatchRulesClient struct {
	grpc.ClientStream
}

func (x *rulesWatchRulesClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rulesClient) DeleteRules(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*RuleList, error) {
	out := new(RuleList)
	err := grpc.Invoke(ctx, "/api.Rules/DeleteRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rules service

type RulesServer interface {
	CreateRule(context.Context, *Rule) (*Rule, error)
	ListRules(context.Context, *ListReq) (*RuleList, error)
	WatchRules(*WatchReq, Rules_WatchRulesServer) error
	DeleteRules(context.Context, *DeleteReq) (*RuleList, error)
}

func RegisterRulesServer(s *grpc.Server, srv RulesServer) {
	s.RegisterService(&_Rules_serviceDesc, srv)
}

func _Rules_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Rules/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).CreateRule(ctx, req.(*Rule))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Rules/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ListRules(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_WatchRules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RulesServer).WatchRules(m, &rulesWatchRulesServer{stream})
}

type Rules_WatchRulesServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type rulesWatchRulesServer struct {
	grpc.ServerStream
}

func (x *rulesWatchRulesServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Rules_DeleteRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).DeleteRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Rules/DeleteRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).DeleteRules(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _Rules_CreateRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _Rules_ListRules_Handler,
		},
		{
			MethodName: "DeleteRules",
			Handler:    _Rules_DeleteRules_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRules",
			Handler:       _Rules_WatchRules_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rules.proto",
}

func init() { proto.RegisterFile("rules.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x8a, 0x13, 0x41,
	0x10, 0xc6, 0x33, 0x9b, 0x4c, 0xd2, 0x53, 0xe3, 0xfe, 0xa1, 0x59, 0x61, 0x0c, 0xa8, 0xa1, 0xf1,
	0x90, 0xb8, 0x10, 0x24, 0xe2, 0x13, 0xa8, 0x87, 0x05, 0x45, 0x69, 0xfc, 0x73, 0x5c, 0x7a, 0x67,
	0x0a, 0x1c, 0x9d, 0x64, 0x3a, 0xdd, 0x9d, 0x95, 0x3d, 0x0a, 0x1e, 0x7c, 0x22, 0x9f, 0x4f, 0xaa,
	0x3a, 0x33, 0x59, 0xd8, 0x93, 0x97, 0xa4, 0xeb, 0xfb, 0x7e, 0x5d, 0xf5, 0x51, 0xd3, 0x90, 0xbb,
	0x5d, 0x83, 0x7e, 0x69, 0x5d, 0x1b, 0x5a, 0x39, 0x34, 0xb6, 0x56, 0x4f, 0x40, 0x7c, 0xba, 0xb5,
	0xf8, 0x1e, 0x83, 0x91, 0x12, 0x46, 0x3f, 0xea, 0x4d, 0x55, 0x24, 0xb3, 0x64, 0x9e, 0x69, 0x3e,
	0xab, 0x19, 0xc0, 0x87, 0xeb, 0xef, 0x58, 0x86, 0x8e, 0xd8, 0x98, 0x35, 0x76, 0x04, 0x9d, 0xd5,
	0x2b, 0x10, 0xef, 0x6a, 0x1f, 0xfd, 0x05, 0x9c, 0x39, 0xf4, 0xed, 0xce, 0x95, 0x78, 0x75, 0x83,
	0xce, 0xd7, 0xed, 0x66, 0xcf, 0x9e, 0x76, 0xfa, 0x97, 0x28, 0xab, 0x3f, 0x47, 0x30, 0xd2, 0xbb,
	0x06, 0xe5, 0x02, 0x44, 0xb8, 0xb5, 0xb8, 0xc6, 0x60, 0x98, 0xcd, 0x57, 0xc7, 0x4b, 0x63, 0xeb,
	0x65, 0x17, 0x4b, 0xf7, 0xb6, 0xbc, 0x00, 0x41, 0xff, 0x95, 0x09, 0xa6, 0x38, 0x62, 0xf4, 0x94,
	0xd1, 0x43, 0x42, 0xdd, 0x03, 0x7d, 0xd6, 0xe1, 0x21, 0xab, 0x7c, 0x08, 0x63, 0xef, 0xca, 0xab,
	0xda, 0x16, 0x23, 0x56, 0x53, 0xef, 0xca, 0x4b, 0x4b, 0x72, 0xe5, 0x03, 0xc9, 0x69, 0x94, 0x2b,
	0x1f, 0x2e, 0xad, 0x7c, 0x04, 0x82, 0x68, 0xdb, 0xba, 0x50, 0x8c, 0x67, 0xc9, 0x3c, 0xd5, 0x13,
	0xef, 0xca, 0x8f, 0xad, 0x0b, 0x64, 0xd1, 0x0d, 0xb6, 0x26, 0xd1, 0xaa, 0x7c, 0x60, 0x6b, 0x0a,
	0x82, 0xf7, 0x5b, 0xb6, 0x4d, 0x21, 0xd8, 0xea, 0x6b, 0x79, 0x0e, 0xa9, 0x69, 0x9a, 0xf6, 0x67,
	0x91, 0xcd, 0x92, 0xb9, 0xd0, 0xb1, 0x50, 0xbf, 0x12, 0x10, 0xb4, 0x0a, 0x5a, 0xe3, 0xff, 0xac,
	0x63, 0x71, 0x6f, 0x1d, 0x11, 0xed, 0x3e, 0xc7, 0x9d, 0x65, 0x3c, 0x85, 0xb4, 0x0e, 0xb8, 0xf6,
	0xc5, 0x70, 0x36, 0x9c, 0xe7, 0xab, 0x8c, 0x39, 0x9a, 0xa9, 0xa3, 0xae, 0x7e, 0x27, 0x90, 0xbe,
	0xbd, 0xc1, 0x4d, 0x90, 0x73, 0x18, 0xd1, 0x04, 0x1e, 0x7e, 0xb2, 0x3a, 0x67, 0x92, 0x9d, 0xf8,
	0x4b, 0x39, 0x34, 0x13, 0xf2, 0x31, 0x8c, 0xe8, 0x3d, 0xed, 0x67, 0xdf, 0xe9, 0xc9, 0xb2, 0x5a,
	0x41, 0xd6, 0xdf, 0x90, 0x39, 0x4c, 0x5e, 0x3b, 0x34, 0x01, 0xab, 0xb3, 0x01, 0x15, 0x9f, 0x6d,
	0xc5, 0x45, 0x42, 0xc5, 0x1b, 0x6c, 0x90, 0x8a, 0x23, 0x95, 0xc1, 0x84, 0xd2, 0x6b, 0xdc, 0x2a,
	0x00, 0xf1, 0xd5, 0x84, 0xf2, 0x1b, 0x9d, 0x73, 0xc8, 0x22, 0xa3, 0x71, 0xbb, 0xfa, 0x9b, 0x40,
	0x4a, 0x63, 0xbc, 0x7c, 0x06, 0x10, 0x9b, 0xf2, 0x43, 0x3a, 0x04, 0x98, 0x1e, 0x8e, 0x6a, 0x20,
	0x9f, 0x43, 0xc6, 0x3d, 0xf9, 0xca, 0x83, 0x7e, 0x43, 0x1a, 0xb7, 0xd3, 0xe3, 0x9e, 0x23, 0x45,
	0x0d, 0xe4, 0x05, 0x40, 0x1c, 0xca, 0x70, 0xb4, 0xbb, 0x14, 0x53, 0x38, 0xec, 0x42, 0x0d, 0x5e,
	0x24, 0x72, 0x09, 0xf9, 0x3e, 0x15, 0xd3, 0x27, 0x6c, 0xf7, 0x39, 0xef, 0x35, 0xbf, 0x1e, 0xf3,
	0x3b, 0x78, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x31, 0x42, 0xbf, 0x86, 0x03, 0x00, 0x00,
}
