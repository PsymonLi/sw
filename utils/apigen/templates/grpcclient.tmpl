package grpcclient

import (
	"context"
	
	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	{{.GoPkg.Name}} "{{.GoPkg.RelPath}}/generated"
	"github.com/pensando/sw/utils/log"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

func dummyBefore(ctx context.Context, md *metadata.MD) context.Context {
	xmd, ok := metadata.FromContext(ctx)
	if ok {
		cmd := metadata.Join(*md, xmd)
		*md = cmd
	}
	return ctx
}

{{$pkgname := .GoPkg.Name}}{{range .Services}}{{$srvname := .Name}}
func New{{$srvname}}(conn *grpc.ClientConn) {{$pkgname}}.Service{{$srvname}} {
 {{range .Methods}}
	var l_{{.Name}}Endpoint endpoint.Endpoint
	{
		l_{{.Name}}Endpoint = grpctransport.NewClient(
			conn,
			"{{$pkgname}}.{{$srvname}}",
			"{{.Name}}",
			{{$pkgname}}.EndcodeGrpcReq{{.RequestType.Name}},
			{{$pkgname}}.DecodeGrpcResp{{.ResponseType.Name}},
			{{$pkgname}}.{{.ResponseType.Name}}{},
			grpctransport.ClientBefore(dummyBefore),
		).Endpoint()
	} {{end}}
	return {{$pkgname}}.Endpoints_{{$srvname}}{
	{{range .Methods}}
		{{.Name}}Endpoint:  l_{{.Name}}Endpoint,{{end}}
	}
}

func New{{$srvname}}Backend(conn *grpc.ClientConn, logger log.Logger) {{$pkgname}}.Service{{$srvname}} {
	cl := New{{$srvname}}(conn)
	cl = {{$pkgname}}.Logging{{$srvname}}Middleware(logger)(cl)
	return cl
}
{{end}}
