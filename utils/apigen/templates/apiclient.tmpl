// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package apiclient

{{$pkgs := (getSvcManifest "generated/apiclient/svcmanifest.json")}}
import (
    "google.golang.org/grpc"
    gogocodec "github.com/gogo/protobuf/codec"

    "github.com/pensando/sw/utils/log"
    "github.com/pensando/sw/utils/rpckit"{{range $key, $value := $pkgs}}
    {{$key}} "github.com/pensando/sw/api/generated/{{$key}}"
    {{$key}}Client "github.com/pensando/sw/api/generated/{{$key}}/grpc/client"{{end}}
)

const codecSize = 1024 * 1024

// Services is list of all services exposed by the client ---
type Services interface {
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
    // Package is {{$key}} and len of messages is {{len $v.Messages}}{{if (ne 0 (len $v.Messages))}}
    {{$k}}() {{$pkgname}}.{{$k}}Interface{{end}}{{end}}{{end}}
}

type apiGrpcServerClient struct {
    url string
    logger log.Logger
    conn *grpc.ClientConn
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}{{if (ne 0 (len $v.Messages))}}
    a{{$k}} {{$pkgname}}.{{$k}}Interface {{end}}{{end}}{{end}}
}
{{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
func (a *apiGrpcServerClient) {{$k}}() {{$pkgname}}.{{$k}}Interface {
    return a.a{{$k}}
}
{{end}}{{end}}
// NewGrpcAPIClient returns a gRPC client
func NewGrpcAPIClient(url string, logger log.Logger, opts ...grpc.DialOption) (Services, error) {
    client, err := rpckit.NewRPCClient("ApiClient", url, rpckit.WithCodec(gogocodec.New(codecSize)))
	if err != nil {
		logger.ErrorLog("msg", "Failed to connect to gRPC server", "URL", url, "error", err)
		return nil, err
	}
    return &apiGrpcServerClient{
        url: url,
        conn: client.ClientConn,
        logger: logger,
        {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
        a{{$k}}: {{$pkgname}}Client.NewGrpcCrudClient{{$k}}(client.ClientConn, logger), {{end}}{{end}}
    }, nil
}

type apiRestServerClient struct {
    url string
    {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}{{if (ne 0 (len $v.Messages))}}
    a{{$k}} {{$pkgname}}.{{$k}}Interface {{end}}{{end}}{{end}}
}
{{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
func (a *apiRestServerClient) {{$k}}() {{$pkgname}}.{{$k}}Interface {
    return a.a{{$k}}
}
{{end}}{{end}}
// NewRestAPIClient returns a REST client
func NewRestAPIClient(url string) (Services, error) {
    return &apiRestServerClient{
        url: url,
        {{range $key, $value := $pkgs}}{{$pkgname := $key}}{{range $k, $v := $value.Svcs}}
        a{{$k}}: {{$pkgname}}Client.NewRestCrudClient{{$k}}(url), {{end}}{{end}}
    }, nil
}
