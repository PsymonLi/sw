// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}}ApiServer is a auto generated package.
Input file: {{.Name}}
*/
package {{.GoPkg.Name}}ApiServer

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"google.golang.org/grpc"

	"github.com/pensando/sw/apiserver"
	"github.com/pensando/sw/apiserver/pkg"
	{{.GoPkg.Name}} "{{.GoPkg.RelPath}}/generated/{{.GoPkg.Name}}"
	"github.com/pensando/sw/utils/kvstore"
	"github.com/pensando/sw/utils/log"
	"github.com/pensando/sw/utils/rpckit"
	"github.com/pensando/sw/utils/runtime"
	"github.com/pensando/sw/api"
	"github.com/pensando/sw/api/listerwatcher"
)
{{$pkgname := .GoPkg.Name}}{{$flname := (getFileName .Name)}}

// dummy vars to suppress unused errors
var _ api.ObjectMeta
var _ listerwatcher.WatcherClient
var _ fmt.Stringer

type s{{$pkgname}}{{$flname}}Backend struct {
	Services  map[string]apiserver.Service
	Messages  map[string]apiserver.Message
	{{range .Services}}
	endpoints{{.Name}} *e{{.Name}}Endpoints{{end}}
}
{{range .Services}}{{$svcname := .Name}}
type e{{.Name}}Endpoints struct {
	Svc           s{{$pkgname}}{{$flname}}Backend
	{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}} {{else}}
	fn{{.Name}} func(ctx context.Context, t interface{}) (interface{}, error){{end}}{{end}}
	{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
	fnAutoWatch{{.}} func(in *api.ListWatchOptions, stream grpc.ServerStream, svcprefix string) error {{end}}{{end}}
}{{end}}

func (s *s{{$pkgname}}{{$flname}}Backend) CompleteRegistration(ctx context.Context, logger log.Logger,
	grpcserver *rpckit.RPCServer, scheme *runtime.Scheme) error {
	s.Messages = map[string]apiserver.Message{
		{{range .Messages}}{{if isNestedMessage .}}{{else}}
		"{{$pkgname}}.{{.Name}}":     apisrvpkg.NewMessage("{{$pkgname}}.{{.Name}}"){{if ne (len (getDbKey .)) 0}}.WithKeyGenerator(func(i interface{}, prefix string) string {
			if i == nil {
				r := {{$pkgname}}.{{.Name}}{}
				return r.MakeKey(prefix)
			}
			r := i.({{$pkgname}}.{{.Name}})
			return r.MakeKey(prefix)
		}).WithObjectVersionWriter(func(i interface{}, version string) interface{} {
			r := i.({{$pkgname}}.{{.Name}})
			r.APIVersion = version
			return r
		}).WithKvUpdater(func(ctx context.Context, kvs kvstore.Interface, i interface{}, prefix string, create bool) (interface{}, error) {
			r := i.({{$pkgname}}.{{.Name}})
			key := r.MakeKey(prefix)
			r.Kind = "{{.Name}}"
			var err error
			if create {
				err = kvs.Create(ctx, key, &r)
				err = errors.Wrap(err, "KV create failed")
			} else {
				if r.ResourceVersion != "" {
					logger.Infof("resource version is specified %s\n", r.ResourceVersion)
					err = kvs.Update(ctx, key, &r, kvstore.Compare(kvstore.WithVersion(key), "=", r.ResourceVersion))
				} else {
					err = kvs.Update(ctx, key, &r)
				}
				err = errors.Wrap(err, "KV update failed")
			}
			return r, err
		}).WithKvTxnUpdater(func(ctx context.Context, txn kvstore.Txn, i interface{}, prefix string, create bool) error {
			r := i.({{$pkgname}}.{{.Name}})
			key := r.MakeKey(prefix)
			var err error
			if create {
				err = txn.Create(key, &r)
				err = errors.Wrap(err, "KV transaction create failed")
			} else {
				err = txn.Update(key, &r)
				err = errors.Wrap(err, "KV transaction update failed")
			}
			return err
		}).WithKvGetter(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := {{$pkgname}}.{{.Name}}{}
			err := kvs.Get(ctx, key, &r)
			err = errors.Wrap(err, "KV get failed")
			return r, err
		}).WithKvDelFunc(func(ctx context.Context, kvs kvstore.Interface, key string) (interface{}, error) {
			r := {{$pkgname}}.{{.Name}}{}
			err := kvs.Delete(ctx, key, &r)
			return r, err
		}).WithKvTxnDelFunc(func(ctx context.Context, txn kvstore.Txn, key string) error {
			return txn.Delete(key)
		}),{{else}}{{if isListHelper .}}.WithKvListFunc(func(ctx context.Context, kvs kvstore.Interface, options *api.ListWatchOptions, prefix string) (interface{}, error) {
			{{$objname := getListType . true}}
			into := {{$pkgname}}.{{.Name}}{}
			r := {{$objname}}{}
			key := r.MakeKey(prefix)
			err := kvs.List(ctx, key, &into)
			if err != nil {
				return nil, err
			}
			return into, nil
		}){{end}},{{end}}{{end}}{{end}}
		// Add a message handler for ListWatch options
		"api.ListWatchOptions":                      apisrvpkg.NewMessage("api.ListWatchOptions"),
	}

	scheme.AddKnownTypes({{range  .Messages}}{{if (len (getDbKey .)) ne 0}}
		&{{$pkgname}}.{{.Name}}{},{{end}}{{end}}
	)

	apisrv.RegisterMessages("{{$pkgname}}", s.Messages)
	{{range .Services}}{{$svcname := .Name}}{{$svcparams := (getSvcParams .)}}{{$svcver := $svcparams.Version}}{{$svcprefix := $svcparams.Prefix}}
	{
		srv := apisrvpkg.NewService("{{.Name}}")
		{{range .Methods}}{{$methparams := (getMethodParams .)}}{{if (strEq $methparams.Oper "WatchOper")}}{{else}}
		s.endpoints{{$svcname}}.fn{{.Name}} = srv.AddMethod("{{.Name}}",
			apisrvpkg.NewMethod(s.Messages["{{getInputType $pkgname . true}}"], s.Messages["{{getOutputType $pkgname . true}}"], "{{$svcprefix}}", "{{.Name}}")).WithOper(apiserver.{{$methparams.Oper}}){{if isAutoList .}}{{else}}{{if eq (len (getDbKey .RequestType)) 0}}.WithPreCommitHook(func(ctx context.Context, kvs kvstore.Interface, txn kvstore.Txn, key, oper string, i interface{}) (interface{}, bool, error) {
			return i, false, nil
		}){{end}}{{end}}.WithVersion("{{$svcver}}").HandleInvocation
		{{end}}{{end}}
		{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
		s.endpoints{{$svcname}}.fnAutoWatch{{.}} = s.Messages["{{$pkgname}}.{{.}}"].WatchFromKv
		{{end}}{{end}}
		s.Services = map[string]apiserver.Service{
			"{{$pkgname}}.{{.Name}}": srv,
		}
		apisrv.RegisterService("{{$pkgname}}.{{.Name}}", srv)
		endpoints := {{$pkgname}}.Make{{$svcname}}ServerEndpoints(s.endpoints{{$svcname}}, logger)
		server := {{$pkgname}}.MakeGRPCServer{{$svcname}}(ctx, endpoints, logger)
		{{$pkgname}}.Register{{.Name}}Server(grpcserver.GrpcServer, server)
	}
	// Add Watchers
	{
		{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
		s.Messages["{{$pkgname}}.{{.}}"].WithKvWatchFunc(func(l log.Logger, options *api.ListWatchOptions, kvs kvstore.Interface, stream interface{}, txfn func(from, to string, i interface{}) (interface{}, error), version, svcprefix string) error {
			o := {{$pkgname}}.{{.}}{}
			key := o.MakeKey(svcprefix)
			wstream := stream.({{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Server)
			nctx, cancel := context.WithCancel(wstream.Context())
			defer cancel()
			watcher, err := kvs.PrefixWatch(nctx, key, options.ResourceVersion)
			if err != nil {
				l.ErrorLog("msg", "error starting Watch on KV", "error", err, "object", "{{.}}")
				return err
			}
			for {
				select {
				case ev, ok := <-watcher.EventChan():
					if !ok {
						l.DebugLog("Channel closed for {{.}} Watcher")
						return nil
					}
					in, ok := ev.Object.(*{{$pkgname}}.{{.}})
					if !ok {
						status, ok := ev.Object.(*api.Status)
						if !ok {
							return errors.New("unknown error")
						} 
						return fmt.Errorf("%v:(%s) %s", status.Code, status.Result, status.Message)
					}
					strEvent := {{$pkgname}}.AutoMsg{{.}}WatchHelper{
						Type:   string(ev.Type),
						Object: in,
					}
					l.DebugLog("msg", "recieved {{.}} watch event from KV", "type", ev.Type)
					if version != in.APIVersion {
						i, err := txfn(in.APIVersion, version, in)
						if err != nil {
							l.ErrorLog("msg", "Failed to transform message", "type", "{{.}}", "fromver", in.APIVersion, "tover", version)
							break
						}
						strEvent.Object = i.(*{{$pkgname}}.{{.}})
					}
					l.DebugLog("msg", "writing to stream")
					if err := wstream.Send(&strEvent); err != nil {
						l.DebugLog("msg", "Stream send error'ed for {{.}}", "error", err)
						return err
					}
				case <-nctx.Done():
					l.DebugLog("msg", "Context cancelled for {{.}} Watcher")
					return wstream.Context().Err()
				}
			}
		})
		{{end}}{{end}}
	}
	{{end}}
	return nil
}

{{range .Services}}{{$svcname := .Name}}{{range .Methods}}{{$params := (getMethodParams .)}}{{if (strEq $params.Oper "WatchOper")}} {{else}}
func (e *e{{$svcname}}Endpoints) {{.Name}}(ctx context.Context, t {{getInputType $pkgname . true}}) ( {{getOutputType $pkgname . true}}, error) {
	r, err := e.fn{{.Name}}(ctx, t)
	if err == nil {
		return r.({{getOutputType $pkgname . true}}), err
	}
	return {{getOutputType $pkgname . true}}{}, err

}{{end}}{{end}}
{{if (hasExtension "venice.apiGrpcCrudService" .)}}{{$svcprefix := (getExtension "venice.apiPrefix" .)}}{{$cruds := (getExtension "venice.apiGrpcCrudService" .)}}{{range $cruds}}
func (e *e{{$svcname}}Endpoints)AutoWatch{{.}}(in *api.ListWatchOptions, stream {{$pkgname}}.{{$svcname}}_AutoWatch{{.}}Server) error {
	return e.fnAutoWatch{{.}}(in, stream, "{{$svcprefix}}")
}{{end}}{{end}}{{end}}

func init() {
	apisrv = apisrvpkg.MustGetAPIServer()

	svc := s{{$pkgname}}{{$flname}}Backend{}

	{{range .Services}}
	{
		e := e{{.Name}}Endpoints{Svc: svc}
		svc.endpoints{{.Name}} = &e
	}{{end}}
	apisrv.Register("{{$pkgname}}.{{.Name}}", &svc)
}
