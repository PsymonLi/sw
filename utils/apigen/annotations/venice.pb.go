// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: venice.proto

/*
	Package venice is a generated protocol buffer package.

	It is generated from these files:
		venice.proto

	It has these top-level messages:
		ObjectRln
*/
package venice

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ObjectRln struct {
	// Type of reference one of [ Named, Selector, Backref ]
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Object being referred to.
	To string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
}

func (m *ObjectRln) Reset()                    { *m = ObjectRln{} }
func (m *ObjectRln) String() string            { return proto.CompactTextString(m) }
func (*ObjectRln) ProtoMessage()               {}
func (*ObjectRln) Descriptor() ([]byte, []int) { return fileDescriptorVenice, []int{0} }

func (m *ObjectRln) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ObjectRln) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

var E_FileGrpcDest = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51235,
	Name:          "venice.fileGrpcDest",
	Tag:           "bytes,51235,opt,name=fileGrpcDest",
	Filename:      "venice.proto",
}

var E_ApiVersion = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51250,
	Name:          "venice.apiVersion",
	Tag:           "bytes,51250,opt,name=apiVersion",
	Filename:      "venice.proto",
}

var E_ApiPrefix = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51251,
	Name:          "venice.apiPrefix",
	Tag:           "bytes,51251,opt,name=apiPrefix",
	Filename:      "venice.proto",
}

var E_MethodOper = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51270,
	Name:          "venice.methodOper",
	Tag:           "bytes,51270,opt,name=methodOper",
	Filename:      "venice.proto",
}

var E_ObjectPrefix = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         51290,
	Name:          "venice.objectPrefix",
	Tag:           "bytes,51290,opt,name=objectPrefix",
	Filename:      "venice.proto",
}

var E_ObjRelation = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*ObjectRln)(nil),
	Field:         51300,
	Name:          "venice.objRelation",
	Tag:           "bytes,51300,opt,name=objRelation",
	Filename:      "venice.proto",
}

func init() {
	proto.RegisterType((*ObjectRln)(nil), "venice.ObjectRln")
	proto.RegisterExtension(E_FileGrpcDest)
	proto.RegisterExtension(E_ApiVersion)
	proto.RegisterExtension(E_ApiPrefix)
	proto.RegisterExtension(E_MethodOper)
	proto.RegisterExtension(E_ObjectPrefix)
	proto.RegisterExtension(E_ObjRelation)
}
func (m *ObjectRln) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectRln) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenice(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	return i, nil
}

func encodeFixed64Venice(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Venice(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVenice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObjectRln) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovVenice(uint64(l))
	}
	return n
}

func sovVenice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVenice(x uint64) (n int) {
	return sovVenice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectRln) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectRln: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectRln: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVenice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVenice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVenice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVenice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVenice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVenice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVenice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("venice.proto", fileDescriptorVenice) }

var fileDescriptorVenice = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4a, 0xfb, 0x40,
	0x10, 0xc7, 0x7f, 0xe9, 0x4f, 0x0a, 0x9d, 0x16, 0xd1, 0x3d, 0x15, 0xd1, 0x58, 0x3c, 0x79, 0x4a,
	0x41, 0x6f, 0x7b, 0x51, 0x8b, 0x7f, 0x4e, 0xa5, 0x12, 0x83, 0xf7, 0x24, 0x9d, 0xd6, 0x2d, 0x6b,
	0x66, 0xd9, 0x5d, 0x8b, 0xbe, 0x85, 0x47, 0xef, 0xbe, 0x81, 0xbe, 0x83, 0x78, 0xf4, 0xec, 0x49,
	0xaa, 0x0f, 0x22, 0x6e, 0xd2, 0xb4, 0x52, 0xc5, 0x5b, 0x32, 0x3b, 0x9f, 0xcf, 0x7c, 0x99, 0x81,
	0xc6, 0x18, 0x33, 0x91, 0x62, 0xa0, 0x34, 0x59, 0x62, 0xd5, 0xfc, 0x6f, 0xad, 0x35, 0x24, 0x1a,
	0x4a, 0x6c, 0xbb, 0x6a, 0x72, 0x35, 0x68, 0xf7, 0xd1, 0xa4, 0x5a, 0x28, 0x4b, 0x3a, 0xef, 0xdc,
	0x6a, 0x43, 0xad, 0x97, 0x8c, 0x30, 0xb5, 0xa1, 0xcc, 0x18, 0x83, 0xa5, 0xe8, 0x46, 0x61, 0xd3,
	0x6b, 0x79, 0xdb, 0xb5, 0xd0, 0x7d, 0xb3, 0x65, 0xa8, 0x44, 0xd4, 0xac, 0xb8, 0x4a, 0x25, 0x22,
	0xde, 0x81, 0xc6, 0x40, 0x48, 0x3c, 0xd1, 0x2a, 0x3d, 0x44, 0x63, 0xd9, 0x7a, 0x90, 0xcf, 0x08,
	0xa6, 0x33, 0x82, 0x63, 0x21, 0xb1, 0xa7, 0xac, 0xa0, 0xcc, 0x34, 0xef, 0x6f, 0xff, 0x3b, 0xf2,
	0x1b, 0xc3, 0x0f, 0x00, 0x62, 0x25, 0xce, 0x51, 0x1b, 0x41, 0x19, 0xdb, 0x5c, 0x30, 0x9c, 0xa1,
	0x1e, 0x8b, 0xb4, 0x94, 0x3c, 0x14, 0x92, 0x39, 0x88, 0xef, 0x41, 0x2d, 0x56, 0xe2, 0x54, 0xe3,
	0x40, 0x5c, 0xff, 0x6d, 0x78, 0x2c, 0x0c, 0x33, 0x86, 0xef, 0x03, 0x5c, 0xa2, 0xbd, 0xa0, 0x7e,
	0x4f, 0xa1, 0x66, 0xfe, 0x82, 0xa1, 0x5b, 0x3c, 0xe6, 0x82, 0xa7, 0x69, 0x84, 0x19, 0xc3, 0x8f,
	0xa0, 0x41, 0x6e, 0x75, 0xbf, 0xa6, 0xe8, 0xa2, 0x31, 0xf1, 0xb0, 0x4c, 0xf1, 0x3a, 0x5d, 0xc6,
	0x3c, 0xc6, 0x23, 0xa8, 0x53, 0x32, 0x0a, 0x51, 0xc6, 0x5f, 0x5d, 0x6c, 0xe3, 0x87, 0x7d, 0xa2,
	0x2c, 0x83, 0x7c, 0x38, 0x47, 0x7d, 0x67, 0x35, 0x28, 0x0e, 0x5e, 0x5e, 0x2f, 0x9c, 0xd7, 0x74,
	0x56, 0x9e, 0x27, 0xbe, 0xf7, 0x32, 0xf1, 0xbd, 0xb7, 0x89, 0xef, 0xdd, 0xbd, 0xfb, 0xff, 0x92,
	0xaa, 0x13, 0xee, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x1f, 0x74, 0xa7, 0x2a, 0x02, 0x00,
	0x00,
}
